{"version":3,"file":"thumb.d.ts","sources":["thumb.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { NgScrollbar } from '../../ng-scrollbar';\nimport { TrackAdapter } from '../track/track';\nexport declare abstract class ThumbAdapter {\n    protected cmp: NgScrollbar;\n    protected track: TrackAdapter;\n    protected thumbElement: HTMLElement;\n    protected document: any;\n    private _dragging;\n    dragging: Observable<boolean>;\n    protected abstract get pageProperty(): string;\n    protected abstract get clientProperty(): string;\n    abstract get dragStartOffset(): number;\n    abstract get size(): number;\n    protected abstract get viewportScrollSize(): number;\n    protected abstract get viewportScrollOffset(): number;\n    abstract get viewportScrollMax(): number;\n    get trackMax(): number;\n    get clientRect(): ClientRect;\n    get clicked(): Observable<any>;\n    protected constructor(cmp: NgScrollbar, track: TrackAdapter, thumbElement: HTMLElement, document: any);\n    update(): void;\n    /**\n     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged\n     * This function is called by thumb drag event using viewport or scrollbar pointer events\n     */\n    dragged(event: any): Observable<number>;\n    protected abstract setDragging(value: boolean): void;\n    protected abstract scrollTo(position: number): void;\n    protected abstract updateStyles(position: number, size: number): void;\n    protected abstract handleDrag(position: number, scrollMax?: number): number;\n    protected abstract handleDirection(position: number, scrollMax?: number): number;\n}\n"]}