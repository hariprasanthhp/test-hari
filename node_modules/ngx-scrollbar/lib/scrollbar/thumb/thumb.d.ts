import { Observable } from 'rxjs';
import { NgScrollbar } from '../../ng-scrollbar';
import { TrackAdapter } from '../track/track';
import * as ɵngcc0 from '@angular/core';
export declare abstract class ThumbAdapter {
    protected cmp: NgScrollbar;
    protected track: TrackAdapter;
    protected thumbElement: HTMLElement;
    protected document: any;
    private _dragging;
    dragging: Observable<boolean>;
    protected abstract get pageProperty(): string;
    protected abstract get clientProperty(): string;
    abstract get dragStartOffset(): number;
    abstract get size(): number;
    protected abstract get viewportScrollSize(): number;
    protected abstract get viewportScrollOffset(): number;
    abstract get viewportScrollMax(): number;
    get trackMax(): number;
    get clientRect(): ClientRect;
    get clicked(): Observable<any>;
    protected constructor(cmp: NgScrollbar, track: TrackAdapter, thumbElement: HTMLElement, document: any);
    update(): void;
    /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     */
    dragged(event: any): Observable<number>;
    protected abstract setDragging(value: boolean): void;
    protected abstract scrollTo(position: number): void;
    protected abstract updateStyles(position: number, size: number): void;
    protected abstract handleDrag(position: number, scrollMax?: number): number;
    protected abstract handleDirection(position: number, scrollMax?: number): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ThumbAdapter, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<ThumbAdapter, never, never, {}, { "dragging": "dragging"; }, never>;
}

//# sourceMappingURL=thumb.d.ts.map