{"version":3,"file":"ng-scrollbar.d.ts","sources":["ng-scrollbar.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit, AfterViewInit, OnChanges, OnDestroy, SimpleChanges, NgZone, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Observable } from 'rxjs';\nimport { ScrollViewport } from './scroll-viewport';\nimport { SmoothScrollElement, SmoothScrollManager, SmoothScrollToOptions, SmoothScrollToElementOptions } from 'ngx-scrollbar/smooth-scroll';\nimport { ScrollbarAppearance, ScrollbarTrack, ScrollbarPosition, ScrollbarVisibility, NgScrollbarState, ScrollbarPointerEventsMethod } from './ng-scrollbar.model';\nimport { ScrollbarManager } from './utils/scrollbar-manager';\nexport declare class NgScrollbar implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n    private el;\n    private zone;\n    private changeDetectorRef;\n    private dir;\n    private smoothScroll;\n    manager: ScrollbarManager;\n    private _disabled;\n    private _sensorDisabled;\n    private _pointerEventsDisabled;\n    private _autoHeightDisabled;\n    private _autoWidthDisabled;\n    private _viewportPropagateMouseMove;\n    /** Disable custom scrollbar and switch back to native scrollbar */\n    get disabled(): boolean;\n    set disabled(disabled: boolean);\n    /** Whether ResizeObserver is disabled */\n    get sensorDisabled(): boolean;\n    set sensorDisabled(disabled: boolean);\n    /** A flag used to enable/disable the scrollbar thumb dragged event */\n    get pointerEventsDisabled(): boolean;\n    set pointerEventsDisabled(disabled: boolean);\n    /** Enable viewport mousemove event propagation (only when pointerEventsMethod=\"viewport\") */\n    get viewportPropagateMouseMove(): boolean;\n    set viewportPropagateMouseMove(disabled: boolean);\n    /** Disable auto-height */\n    get autoHeightDisabled(): boolean;\n    set autoHeightDisabled(disabled: boolean);\n    /** Disable auto-width */\n    get autoWidthDisabled(): boolean;\n    set autoWidthDisabled(disabled: boolean);\n    /** A class forwarded to scrollable viewport element */\n    viewClass: string;\n    /** A class forwarded to the scrollbar track element */\n    trackClass: string;\n    /** A class forwarded to the scrollbar thumb element */\n    thumbClass: string;\n    /** Minimum scrollbar thumb size */\n    minThumbSize: number;\n    /** The duration which the scrolling takes to reach its target when scrollbar rail is clicked */\n    trackClickScrollDuration: number;\n    /**\n     * Sets the pointer events method\n     * Use viewport pointer events  to handle dragging and track click (This makes scrolling work when mouse is over the scrollbar)\n     * Use scrollbar pointer events to handle dragging and track click\n     */\n    pointerEventsMethod: ScrollbarPointerEventsMethod;\n    /**\n     * Sets the supported scroll track of the viewport, there are 3 options:\n     *\n     * - `vertical` Use both vertical and horizontal scrollbar\n     * - `horizontal` Use both vertical and horizontal scrollbar\n     * - `all` Use both vertical and horizontal scrollbar\n     */\n    track: ScrollbarTrack;\n    /**\n     * When to show the scrollbar, and there are 3 options:\n     *\n     * - `native` (default) Scrollbar will be visible when viewport is scrollable like with native scrollbar\n     * - `hover` Scrollbars are hidden by default, only visible on scrolling or hovering\n     * - `always` Scrollbars are always shown even if the viewport is not scrollable\n     */\n    visibility: ScrollbarVisibility;\n    /**\n     *  Sets the appearance of the scrollbar, there are 2 options:\n     *\n     * - `standard` (default) scrollbar space will be reserved just like with native scrollbar.\n     * - `compact` scrollbar doesn't reserve any space, they are placed over the viewport.\n     */\n    appearance: ScrollbarAppearance;\n    /**\n     * Sets the position of each scrollbar, there are 4 options:\n     *\n     * - `native` (Default) Use the default position like in native scrollbar.\n     * - `invertY` Inverts vertical scrollbar position\n     * - `invertX` Inverts Horizontal scrollbar position\n     * - `invertAll` Inverts both scrollbar positions\n     */\n    position: ScrollbarPosition;\n    /** Debounce interval for detecting changes via ResizeObserver */\n    sensorDebounce: number;\n    /** Scroll Audit Time */\n    scrollAuditTime: number;\n    /** Steam that emits when scrollbar is updated */\n    updated: EventEmitter<void>;\n    /** Vertical scrollbar ElementRef used for include its thickness in auto-width mode */\n    private scrollbarY;\n    /** Horizontal scrollbar ElementRef used for include its thickness in auto-height mode */\n    private scrollbarX;\n    /** Default viewport reference */\n    private defaultViewPort;\n    /** Custom viewport reference */\n    private customViewPort;\n    /** Viewport Element */\n    viewport: ScrollViewport;\n    /** Set of attributes added on the scrollbar wrapper */\n    state: NgScrollbarState;\n    /** Stream that destroys components' observables */\n    private readonly destroyed;\n    /** Stream that emits on scroll event */\n    scrolled: Observable<any>;\n    /** Steam that emits scroll event for vertical scrollbar */\n    verticalScrolled: Observable<any>;\n    /** Steam that emits scroll event for horizontal scrollbar */\n    horizontalScrolled: Observable<any>;\n    get nativeElement(): HTMLElement;\n    constructor(el: ElementRef, zone: NgZone, changeDetectorRef: ChangeDetectorRef, dir: Directionality, smoothScroll: SmoothScrollManager, manager: ScrollbarManager);\n    /**\n     * Update local state with each change detection\n     */\n    private updateState;\n    private setState;\n    private getScrolledByDirection;\n    /**\n     * Set hovered state if a scrollbar is being hovered\n     */\n    setHovered(hovered: ScrollbarHovered): void;\n    /**\n     * Set dragging state if a scrollbar is being dragged\n     */\n    setDragging(dragging: ScrollbarDragging): void;\n    /**\n     * Set clicked state if a scrollbar track is being click\n     */\n    setClicked(scrollbarClicked: boolean): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Update local state and the internal scrollbar controls\n     */\n    update(): void;\n    /**\n     * Smooth scroll functions\n     */\n    scrollTo(options: SmoothScrollToOptions): Promise<void>;\n    /**\n     * Scroll to element by reference or selector\n     */\n    scrollToElement(target: SmoothScrollElement, options?: SmoothScrollToElementOptions): Promise<void>;\n    private updateHeight;\n    private updateWidth;\n}\ninterface ScrollbarDragging {\n    verticalDragging?: boolean;\n    horizontalDragging?: boolean;\n}\ninterface ScrollbarHovered {\n    verticalHovered?: boolean;\n    horizontalHovered?: boolean;\n}\nexport {};\n"]}