{"version":3,"file":"gojs-angular.umd.js","sources":["../../../projects/gojs-angular/src/lib/diagram.component.ts","../../../projects/gojs-angular/src/lib/palette.component.ts","../../../projects/gojs-angular/src/lib/overview.component.ts","../../../projects/gojs-angular/src/lib/gojs-angular.module.ts","../../../projects/gojs-angular/src/lib/data-sync.service.ts"],"sourcesContent":["import { Component, ElementRef, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild, KeyValueChangeRecord } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Component({\r\n  selector: 'gojs-diagram',\r\n  template: '<div #ngDiagram [className]=divClassName></div>'\r\n})\r\nexport class DiagramComponent {\r\n\r\n  /**\r\n   * Diagram initialization function. Returns a go.Diagram.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initDiagram: () => go.Diagram;\r\n\r\n  // Node data for diagram\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for diagram\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null; // optional\r\n\r\n  // Model data for diagram\r\n  @Input() public modelData: go.ObjectData = null; // optional\r\n\r\n  // Diagram div class name. Use this name to style your diagram in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // model changed listener function for diagram\r\n  public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  @Input() public skipsDiagramUpdate: boolean = false;\r\n\r\n  // event emitter -- fires when diagram model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngDiagram', { static: true }) public diagramDiv: ElementRef;\r\n  public diagram: go.Diagram = null;\r\n\r\n  // differs for array inputs (node / link data arrays)\r\n  private _ndaDiffer: KeyValueDiffer<string, any>;\r\n  private _ldaDiffer: KeyValueDiffer<string, any>;\r\n\r\n  private _mdaDiffer: KeyValueDiffer<string, any>;\r\n\r\n  constructor(private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._kvdiffers.find([]).create();\r\n    this._ldaDiffer = this._kvdiffers.find([]).create();\r\n\r\n    this._mdaDiffer = this._kvdiffers.find([]).create();\r\n  }\r\n\r\n  /**\r\n   * Initializes diagram / model after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    this.diagram = this.initDiagram();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the diagram,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.diagram.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.diagramDiv.nativeElement;\r\n    if (divRef === null) return;\r\n    this.diagram.div = divRef;\r\n\r\n    // initialize the Diagram's model\r\n    this.diagram.delayInitialization(() => {\r\n      const model = this.diagram.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n        this.diagram.layoutDiagram(true);\r\n      }, null);\r\n    });\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished && this.diagram && this.diagram.model && !this.diagram.model.isReadOnly) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.diagram.addModelChangedListener(this.modelChangedListener);\r\n\r\n\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * Merges changes from app data into GoJS model data, \r\n   * making sure only actual changes (and not falsely flagged no-ops on array / obj data props) are logged\r\n   * @param component an instance of DiagramComponent or PaletteComponent\r\n   * @param kvchanges The kvchanges object produced by either a node or link Angular differ object\r\n   * @param str \"n\" for node data changes, \"l\" for link data changes\r\n   *  */ \r\n  public static mergeChanges(component, kvchanges, str): boolean {\r\n\r\n    // helper function\r\n    function compareObjs(obj1, obj2) {\r\n      // Loop through properties in object 1\r\n      for (const p in obj1) {\r\n        // Check property exists on both objects\r\n        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\r\n\r\n        switch (typeof (obj1[p])) {\r\n          // Deep compare objects\r\n          case 'object':\r\n            if (!compareObjs(obj1[p], obj2[p])) return false;\r\n            break;\r\n          // Compare values\r\n          default:\r\n            if (obj1[p] !== obj2[p]) return false;\r\n        }\r\n      }\r\n\r\n      // Check object 2 for any extra properties\r\n      for (const p in obj2) {\r\n        if (typeof (obj1[p]) === 'undefined') return false;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    var dia = component instanceof DiagramComponent ? component.diagram : component.palette;\r\n\r\n    if (!dia || !dia.model) return;\r\n\r\n    if (kvchanges) {\r\n\r\n      // handle added nodes / links\r\n      kvchanges.forEachAddedItem((r: KeyValueChangeRecord<string, any>) => {\r\n        switch (str) {\r\n          case \"n\": {\r\n            dia.model.addNodeData(r.currentValue);\r\n            break;\r\n          }\r\n          case \"l\": {\r\n            var m = <go.GraphLinksModel>dia.model;\r\n            m.addLinkData(r.currentValue);\r\n            break;\r\n          }\r\n        }\r\n      });\r\n\r\n      // handle removed nodes / links\r\n      kvchanges.forEachRemovedItem((r: KeyValueChangeRecord<string, any>) => {\r\n        switch (str) {\r\n          case \"n\": {\r\n            let m = dia.model;\r\n            let keyPropName = m.nodeKeyProperty.toString();\r\n            var node = dia.findNodeForKey(r.previousValue[keyPropName]);\r\n            if (node) {\r\n              dia.remove(node);\r\n            }\r\n            break;\r\n          }\r\n          case \"l\": {\r\n            let m = <go.GraphLinksModel>dia.model;\r\n            var keyPropName = m.linkKeyProperty.toString();\r\n            var link = dia.findLinkForKey(r.previousValue[keyPropName]);\r\n            if (link) {\r\n              dia.remove(link);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      });\r\n\r\n      // handle changed data for nodes / links\r\n      kvchanges.forEachChangedItem((r: KeyValueChangeRecord<string, any>) => {\r\n        \r\n        // ensure \"changes\" to array / object / enumerable data properties are legit\r\n        const sameVals = compareObjs(r.currentValue, r.previousValue);\r\n\r\n        // update proper data object for node or link\r\n        if (!sameVals) {\r\n          switch (str) {\r\n            case \"n\": {\r\n              let m = dia.model;\r\n              let keyPropName = m.nodeKeyProperty.toString();\r\n              var node = dia.findNodeForKey(r.previousValue[keyPropName]);\r\n              if (node) {\r\n                dia.model.assignAllDataProperties(node.data, r.currentValue);\r\n              }\r\n              break;\r\n            }\r\n            case \"l\": {\r\n              let m = <go.GraphLinksModel>dia.model;\r\n              var keyPropName = m.linkKeyProperty.toString();\r\n              var link = dia.findLinkForKey(r.previousValue[keyPropName]);\r\n              if (link) {\r\n                dia.model.assignAllDataProperties(link.data, r.currentValue);\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        \r\n      });\r\n    }\r\n    \r\n  }\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n\r\n    if (!this.diagram) return;\r\n    if (!this.diagram.model) return;\r\n\r\n    // these need to be run each check, even if no merging happens\r\n    // otherwise, they will detect all diffs that happened since last time skipsDiagram was false,\r\n    // such as remove ops that happened in GoJS when skipsDiagram = true, \r\n    // and then realllllly bad stuff happens (deleting random nodes, updating the wrong Parts)\r\n    // Angular differs are a lot of fun\r\n    var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    var linkDiffs = this._ldaDiffer.diff(this.linkDataArray);\r\n\r\n    var modelDiffs = this._mdaDiffer.diff(this.modelData);\r\n\r\n    if (!nodeDiffs && !linkDiffs && !modelDiffs) return;\r\n\r\n    if (this.skipsDiagramUpdate) return;\r\n\r\n    // don't need model change listener while performing known data updates\r\n    if (this.modelChangedListener !== null) this.diagram.model.removeChangedListener(this.modelChangedListener);\r\n\r\n    this.diagram.model.startTransaction('update data');\r\n    // update modelData first, in case bindings on nodes / links depend on model data\r\n    this.diagram.model.assignAllDataProperties(this.diagram.model.modelData, this.modelData);\r\n    // merge node / link data\r\n    DiagramComponent.mergeChanges(this, nodeDiffs, \"n\");\r\n    DiagramComponent.mergeChanges(this, linkDiffs, \"l\");\r\n    this.diagram.model.commitTransaction('update data');\r\n\r\n    // reset the model change listener\r\n    if (this.modelChangedListener !== null) this.diagram.model.addChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngDoCheck\r\n\r\n  public ngOnDestroy() {\r\n    this.diagram.div = null; // removes event listeners\r\n  }\r\n}\r\n","import { Component, ElementRef, EventEmitter, Input, KeyValueDiffer, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\nimport { DiagramComponent } from './diagram.component';\r\n@Component({\r\n  selector: 'gojs-palette',\r\n  template: '<div #ngPalette [className]=divClassName></div>'\r\n})\r\nexport class PaletteComponent {\r\n\r\n  /**\r\n   * Palette initialization function. Returns a go.Palette.\r\n   * Do not initialize model data in this function.\r\n   */\r\n  @Input() public initPalette: () => go.Palette;\r\n\r\n  // Node data for palette\r\n  @Input() public nodeDataArray: Array<go.ObjectData>;\r\n\r\n  // Link data for palette. Optional\r\n  @Input() public linkDataArray: Array<go.ObjectData> = null;\r\n\r\n  // Model data for palette. Optional\r\n  @Input() public modelData: go.ObjectData = null;\r\n\r\n  // Palette div class name. Use this name to style your palette in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  @Input() public skipsPaletteUpdate: boolean = false;\r\n\r\n  // model changed listener function for palette\r\n  public modelChangedListener: (e: go.ChangedEvent) => void | null = null;\r\n\r\n  // event emitter -- fires when palette model changes. Capture this emitted event in parent component\r\n  @Output() public modelChange: EventEmitter<go.IncrementalData> = new EventEmitter<go.IncrementalData>();\r\n\r\n  @ViewChild('ngPalette', { static: true }) public paletteDiv: ElementRef;\r\n\r\n  // The Palette itself\r\n  public palette: go.Palette | null = null;\r\n\r\n  // differs for array inputs (node / link data arrays)\r\n  private _ndaDiffer: KeyValueDiffer<string, any>;\r\n  private _ldaDiffer: KeyValueDiffer<string, any>;\r\n\r\n  private _mdaDiffer: KeyValueDiffer<string, any>;\r\n\r\n  constructor(private _kvdiffers: KeyValueDiffers, public zone: NgZone) {\r\n    // differs used to check if there have been changed to the array @Inputs\r\n    // without them, changes to the input arrays won't register in ngOnChanges,\r\n    // since the array reference itself may be the same\r\n    this._ndaDiffer = this._kvdiffers.find([]).create();\r\n    this._ldaDiffer = this._kvdiffers.find([]).create();\r\n\r\n    this._mdaDiffer = this._kvdiffers.find([]).create();\r\n\r\n  } // end constructor\r\n\r\n  /**\r\n   * Initialize Palette after view init\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.paletteDiv) return;\r\n\r\n    this.palette = this.initPalette();\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the palette,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.palette.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,\r\n    // using the overridden addEventListener function above\r\n    const divRef = this.paletteDiv.nativeElement;\r\n    this.palette.div = divRef;\r\n\r\n    // initialize palette model\r\n    this.palette.delayInitialization(() => {\r\n      const model = this.palette.model;\r\n      model.commit((m: go.Model) => {\r\n        m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));\r\n        if (this.linkDataArray && m instanceof go.GraphLinksModel) {\r\n          m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));\r\n        }\r\n        if (this.modelData) {\r\n          m.assignAllDataProperties(m.modelData, this.modelData);\r\n        }\r\n        this.palette.layoutDiagram(true);\r\n      }, null);\r\n    });\r\n\r\n\r\n    // initializer listener\r\n    this.modelChangedListener = (e: go.ChangedEvent) => {\r\n      if (e.isTransactionFinished && this.palette && this.palette.model && !this.palette.model.isReadOnly) {\r\n        // this must be done within a NgZone.run block, so changes are detected in the parent component\r\n        this.zone.run(() => {\r\n          const dataChanges = e.model!.toIncrementalData(e);\r\n          this.modelChange.emit(dataChanges);\r\n        });\r\n      }\r\n    };\r\n    this.palette.addModelChangedListener(this.modelChangedListener);\r\n  } // end ngAfterViewInit\r\n\r\n  /**\r\n   * Always be checking if array Input data has changed (node and link data arrays)\r\n   */\r\n  public ngDoCheck() {\r\n\r\n    if (!this.palette) return;\r\n    if (!this.palette.model) return;\r\n\r\n    // these need to be run each check, even if no merging happens\r\n    // otherwise, they will detect all diffs that happened since last time skipsPaletteUpdate was false,\r\n    // such as remove ops that happened in GoJS when skipsPaletteUpdate = true, \r\n    // and then realllllly bad stuff happens (deleting random nodes, updating the wrong Parts)\r\n    // Angular differs are a lot of fun\r\n    var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);\r\n    var linkDiffs = this._ldaDiffer.diff(this.linkDataArray);\r\n\r\n    var modelDiffs = this._mdaDiffer.diff(this.modelData);\r\n\r\n    if (!nodeDiffs && !linkDiffs && !modelDiffs) return;\r\n\r\n    if (this.skipsPaletteUpdate) return;\r\n\r\n    // don't need model change listener while performing known data updates\r\n    if (this.modelChangedListener !== null) this.palette.model.removeChangedListener(this.modelChangedListener);\r\n\r\n    this.palette.model.startTransaction('update data');\r\n    // update modelData first, in case bindings on nodes / links depend on model data\r\n    this.palette.model.assignAllDataProperties(this.palette.model.modelData, this.modelData);\r\n    DiagramComponent.mergeChanges(this, nodeDiffs, \"n\");\r\n    DiagramComponent.mergeChanges(this, linkDiffs, \"l\");\r\n    this.palette.model.commitTransaction('update data');\r\n    // reset the model change listener\r\n    if (this.modelChangedListener !== null) this.palette.model.addChangedListener(this.modelChangedListener);\r\n\r\n  } // end ngDoCheck\r\n\r\n  public ngOnDestroy() {\r\n    this.palette.div = null; // removes event listeners\r\n  }\r\n\r\n}\r\n","import { Component, ElementRef, Input, NgZone, SimpleChanges, ViewChild } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Component({\r\n  selector: 'gojs-overview',\r\n  template: '<div #ngOverview [className]=divClassName></div>'\r\n})\r\nexport class OverviewComponent {\r\n\r\n  // The function used to initialize the Overview\r\n  @Input() public initOverview: () => go.Overview;\r\n\r\n  // Overview div class name. Use this name to style your Overview in CSS\r\n  @Input() public divClassName: string;\r\n\r\n  // The Diagram to observe with the Overview\r\n  @Input() public observedDiagram: go.Diagram = null;\r\n\r\n  @ViewChild('ngOverview', { static: true }) public overviewDiv: ElementRef;\r\n\r\n  // The Overview itself\r\n  public overview: go.Overview | null = null;\r\n\r\n  constructor(public zone: NgZone) { }\r\n\r\n  /**\r\n   * Initialize the overview\r\n   */\r\n  public ngAfterViewInit() {\r\n    if (!this.overviewDiv) return;\r\n    if (this.initOverview) {\r\n      this.overview = this.initOverview();\r\n    } else {\r\n      this.overview = new go.Overview();\r\n      this.overview.contentAlignment = go.Spot.Center;\r\n    }\r\n\r\n    // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone\r\n    // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance\r\n    // If some state-altering behavior must happen on a mousemove event inside the overview,\r\n    // you will have to using zone.run() to make sure that event triggers angular change detection\r\n    this.overview.addEventListener = (DOMElement: Element | Window | Document, name: string, listener: any, capture: boolean) => {\r\n      const superAddEventListener = go.Diagram.prototype.addEventListener;\r\n      if (name === 'mousemove') {\r\n        this.zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));\r\n      } else {\r\n        this.zone.run(() => {\r\n          superAddEventListener.call(this, DOMElement, name, listener, capture);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.overview.div = this.overviewDiv.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Only update when the observed diagram changes\r\n   * @param changes\r\n   */\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (!this.overview) return;\r\n    if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {\r\n      this.overview.observed = changes.observedDiagram.currentValue;\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.overview.div = null; // removes event listeners\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { DiagramComponent } from './diagram.component';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { PaletteComponent } from './palette.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ],\r\n  imports: [\r\n  ],\r\n  exports: [\r\n    DiagramComponent,\r\n    OverviewComponent,\r\n    PaletteComponent\r\n  ]\r\n})\r\nexport class GojsAngularModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport * as go from 'gojs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataSyncService {\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Sync a node data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param nodeData The node data array to merge these changes with\r\n   * @param model Required if you have defined your model.nodeKeyProperty to be something other than 'key'\r\n   * @returns A node data array, merged with the changes\r\n   */\r\n  public static syncNodeData(changes: go.IncrementalData, nodeData: Array<go.ObjectData>, model?: go.Model) {\r\n    if (!changes) return nodeData;\r\n    if (!changes.modifiedNodeData && !changes.insertedNodeKeys && !changes.removedNodeKeys) return nodeData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedNodesMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified node data\r\n    if (changes.modifiedNodeData) {\r\n      changes.modifiedNodeData.forEach((nd: go.ObjectData) => {\r\n        // Get the value of the node key property checking wether is a function or a string\r\n        const key = model ? model.getKeyForNodeData(nd) : nd['key'];\r\n        modifiedNodesMap.set(key, nd);\r\n        for (let i = 0; i < nodeData.length; i++) {\r\n          const ndEntry = nodeData[i];\r\n          const keyNdEntry = model ? model.getKeyForNodeData(ndEntry) : ndEntry['key'];\r\n          if (keyNdEntry === key) {\r\n            nodeData[i] = nd;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted node data\r\n    if (changes.insertedNodeKeys) {\r\n      changes.insertedNodeKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedNodesMap.get(key);\r\n        if (nd) {\r\n          nodeData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed node data\r\n    if (changes.removedNodeKeys) {\r\n      nodeData = nodeData.filter((nd: go.ObjectData) => {\r\n        const key = model ? model.getKeyForNodeData(nd) : nd['key'];\r\n        if (changes.removedNodeKeys.includes(key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return nodeData;\r\n  }\r\n\r\n  /**\r\n   * Sync a link data array with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param linkData The link data array to merge these changes with\r\n   * @param model Required if you have defined your model.linkKeyProperty to be something other than 'key'\r\n   * @returns A link data array, merged with the changes\r\n   */\r\n  public static syncLinkData(changes: go.IncrementalData, linkData: Array<go.ObjectData>, model?: go.GraphLinksModel) {\r\n    if (!changes) return linkData;\r\n    if (!changes.modifiedLinkData && !changes.insertedLinkKeys && !changes.removedLinkKeys) return linkData;\r\n\r\n    // maintain a map of modified nodes for fast lookup during insertion\r\n    const modifiedLinksMap = new go.Map<go.Key, go.ObjectData>();\r\n\r\n    // account for modified link data\r\n    if (changes.modifiedLinkData) {\r\n      changes.modifiedLinkData.forEach((ld: go.ObjectData) => {\r\n        // Get the value of the link key\r\n        const key = model ? model.getKeyForLinkData(ld) : ld['key'];\r\n        modifiedLinksMap.set(key, ld);\r\n\r\n        for (let i = 0; i < linkData.length; i++) {\r\n          const ldEntry = linkData[i];\r\n          const keyLdEntry = model ? model.getKeyForLinkData(ldEntry) : ldEntry['key'];\r\n          if (keyLdEntry === key) {\r\n            linkData[i] = ld;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for inserted link data\r\n    if (changes.insertedLinkKeys) {\r\n      changes.insertedLinkKeys.forEach((key: go.Key) => {\r\n        const nd = modifiedLinksMap.get(key);\r\n        if (nd) {\r\n          linkData.push(nd);\r\n        }\r\n      });\r\n    }\r\n\r\n    // account for removed link data\r\n    if (changes.removedLinkKeys) {\r\n      linkData = linkData.filter((ld: go.ObjectData) => {\r\n        const key = model ? model.getKeyForLinkData(ld) : ld['key'];\r\n        if (changes.removedLinkKeys.includes(key)) {\r\n          return false;\r\n        } return true;\r\n      });\r\n    }\r\n\r\n    return linkData;\r\n  }\r\n\r\n  /**\r\n   * Sync modelData with a set of changes\r\n   * @param changes The set of changes to the GoJS model\r\n   * @param modelData The modelData to merge these changes with\r\n   * @returns A modelData object, merged with the changes\r\n   */\r\n  public static syncModelData(changes: go.IncrementalData, modelData: go.ObjectData) {\r\n    if (!changes) return modelData;\r\n    if (!changes.modelData) return modelData;\r\n    if (changes.modelData) {\r\n      return changes.modelData;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"],"names":["EventEmitter","go.Diagram","go.GraphLinksModel","Component","KeyValueDiffers","NgZone","Input","Output","ViewChild","go.Overview","go.Spot","NgModule","go.Map","Injectable"],"mappings":"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"}