/**
 * @fileoverview added by tsickle
 * Generated from: lib/palette.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, KeyValueDiffers, NgZone, Output, ViewChild } from '@angular/core';
import * as go from 'gojs';
import { DiagramComponent } from './diagram.component';
export class PaletteComponent {
    /**
     * @param {?} _kvdiffers
     * @param {?} zone
     */
    constructor(_kvdiffers, zone) {
        this._kvdiffers = _kvdiffers;
        this.zone = zone;
        // Link data for palette. Optional
        this.linkDataArray = null;
        // Model data for palette. Optional
        this.modelData = null;
        this.skipsPaletteUpdate = false;
        // model changed listener function for palette
        this.modelChangedListener = null;
        // event emitter -- fires when palette model changes. Capture this emitted event in parent component
        this.modelChange = new EventEmitter();
        // The Palette itself
        this.palette = null;
        // differs used to check if there have been changed to the array @Inputs
        // without them, changes to the input arrays won't register in ngOnChanges,
        // since the array reference itself may be the same
        this._ndaDiffer = this._kvdiffers.find([]).create();
        this._ldaDiffer = this._kvdiffers.find([]).create();
        this._mdaDiffer = this._kvdiffers.find([]).create();
    } // end constructor
    // end constructor
    /**
     * Initialize Palette after view init
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.paletteDiv)
            return;
        this.palette = this.initPalette();
        // This bit of code makes sure the mousemove event listeners on the canvas are run outside NgZone
        // This makes it so change detection isn't triggered every time the mouse is moved inside the canvas, greatly improving performance
        // If some state-altering behavior must happen on a mousemove event inside the palette,
        // you will have to using zone.run() to make sure that event triggers angular change detection
        this.palette.addEventListener = (/**
         * @param {?} DOMElement
         * @param {?} name
         * @param {?} listener
         * @param {?} capture
         * @return {?}
         */
        (DOMElement, name, listener, capture) => {
            /** @type {?} */
            const superAddEventListener = go.Diagram.prototype.addEventListener;
            if (name === 'mousemove') {
                this.zone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => superAddEventListener.call(this, DOMElement, name, listener, capture)));
            }
            else {
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    superAddEventListener.call(this, DOMElement, name, listener, capture);
                }));
            }
        });
        // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,
        // using the overridden addEventListener function above
        /** @type {?} */
        const divRef = this.paletteDiv.nativeElement;
        this.palette.div = divRef;
        // initialize palette model
        this.palette.delayInitialization((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const model = this.palette.model;
            model.commit((/**
             * @param {?} m
             * @return {?}
             */
            (m) => {
                m.mergeNodeDataArray(m.cloneDeep(this.nodeDataArray));
                if (this.linkDataArray && m instanceof go.GraphLinksModel) {
                    m.mergeLinkDataArray(m.cloneDeep(this.linkDataArray));
                }
                if (this.modelData) {
                    m.assignAllDataProperties(m.modelData, this.modelData);
                }
                this.palette.layoutDiagram(true);
            }), null);
        }));
        // initializer listener
        this.modelChangedListener = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.isTransactionFinished && this.palette && this.palette.model && !this.palette.model.isReadOnly) {
                // this must be done within a NgZone.run block, so changes are detected in the parent component
                this.zone.run((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const dataChanges = (/** @type {?} */ (e.model)).toIncrementalData(e);
                    this.modelChange.emit(dataChanges);
                }));
            }
        });
        this.palette.addModelChangedListener(this.modelChangedListener);
    } // end ngAfterViewInit
    // end ngAfterViewInit
    /**
     * Always be checking if array Input data has changed (node and link data arrays)
     * @return {?}
     */
    ngDoCheck() {
        if (!this.palette)
            return;
        if (!this.palette.model)
            return;
        // these need to be run each check, even if no merging happens
        // otherwise, they will detect all diffs that happened since last time skipsPaletteUpdate was false,
        // such as remove ops that happened in GoJS when skipsPaletteUpdate = true, 
        // and then realllllly bad stuff happens (deleting random nodes, updating the wrong Parts)
        // Angular differs are a lot of fun
        /** @type {?} */
        var nodeDiffs = this._ndaDiffer.diff(this.nodeDataArray);
        /** @type {?} */
        var linkDiffs = this._ldaDiffer.diff(this.linkDataArray);
        /** @type {?} */
        var modelDiffs = this._mdaDiffer.diff(this.modelData);
        if (!nodeDiffs && !linkDiffs && !modelDiffs)
            return;
        if (this.skipsPaletteUpdate)
            return;
        // don't need model change listener while performing known data updates
        if (this.modelChangedListener !== null)
            this.palette.model.removeChangedListener(this.modelChangedListener);
        this.palette.model.startTransaction('update data');
        // update modelData first, in case bindings on nodes / links depend on model data
        this.palette.model.assignAllDataProperties(this.palette.model.modelData, this.modelData);
        DiagramComponent.mergeChanges(this, nodeDiffs, "n");
        DiagramComponent.mergeChanges(this, linkDiffs, "l");
        this.palette.model.commitTransaction('update data');
        // reset the model change listener
        if (this.modelChangedListener !== null)
            this.palette.model.addChangedListener(this.modelChangedListener);
    } // end ngDoCheck
    // end ngDoCheck
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.palette.div = null; // removes event listeners
    }
}
PaletteComponent.decorators = [
    { type: Component, args: [{
                selector: 'gojs-palette',
                template: '<div #ngPalette [className]=divClassName></div>'
            }] }
];
/** @nocollapse */
PaletteComponent.ctorParameters = () => [
    { type: KeyValueDiffers },
    { type: NgZone }
];
PaletteComponent.propDecorators = {
    initPalette: [{ type: Input }],
    nodeDataArray: [{ type: Input }],
    linkDataArray: [{ type: Input }],
    modelData: [{ type: Input }],
    divClassName: [{ type: Input }],
    skipsPaletteUpdate: [{ type: Input }],
    modelChange: [{ type: Output }],
    paletteDiv: [{ type: ViewChild, args: ['ngPalette', { static: true },] }]
};
if (false) {
    /**
     * Palette initialization function. Returns a go.Palette.
     * Do not initialize model data in this function.
     * @type {?}
     */
    PaletteComponent.prototype.initPalette;
    /** @type {?} */
    PaletteComponent.prototype.nodeDataArray;
    /** @type {?} */
    PaletteComponent.prototype.linkDataArray;
    /** @type {?} */
    PaletteComponent.prototype.modelData;
    /** @type {?} */
    PaletteComponent.prototype.divClassName;
    /** @type {?} */
    PaletteComponent.prototype.skipsPaletteUpdate;
    /** @type {?} */
    PaletteComponent.prototype.modelChangedListener;
    /** @type {?} */
    PaletteComponent.prototype.modelChange;
    /** @type {?} */
    PaletteComponent.prototype.paletteDiv;
    /** @type {?} */
    PaletteComponent.prototype.palette;
    /**
     * @type {?}
     * @private
     */
    PaletteComponent.prototype._ndaDiffer;
    /**
     * @type {?}
     * @private
     */
    PaletteComponent.prototype._ldaDiffer;
    /**
     * @type {?}
     * @private
     */
    PaletteComponent.prototype._mdaDiffer;
    /**
     * @type {?}
     * @private
     */
    PaletteComponent.prototype._kvdiffers;
    /** @type {?} */
    PaletteComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,