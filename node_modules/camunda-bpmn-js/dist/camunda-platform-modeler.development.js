(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.BpmnModeler = factory());
}(this, (function () { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function createCommonjsModule(fn) {
	  var module = { exports: {} };
		return fn(module, module.exports), module.exports;
	}

	var inherits_browser = createCommonjsModule(function (module) {
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}
	});

	function createCommonjsModule$1(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var hat_1 = createCommonjsModule$1(function (module) {
	var hat = module.exports = function (bits, base) {
	    if (!base) base = 16;
	    if (bits === undefined) bits = 128;
	    if (bits <= 0) return '0';
	    
	    var digits = Math.log(Math.pow(2, bits)) / Math.log(base);
	    for (var i = 2; digits === Infinity; i *= 2) {
	        digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;
	    }
	    
	    var rem = digits - Math.floor(digits);
	    
	    var res = '';
	    
	    for (var i = 0; i < Math.floor(digits); i++) {
	        var x = Math.floor(Math.random() * base).toString(base);
	        res = x + res;
	    }
	    
	    if (rem) {
	        var b = Math.pow(base, rem);
	        var x = Math.floor(Math.random() * b).toString(base);
	        res = x + res;
	    }
	    
	    var parsed = parseInt(res, base);
	    if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {
	        return hat(bits, base)
	    }
	    else return res;
	};

	hat.rack = function (bits, base, expandBy) {
	    var fn = function (data) {
	        var iters = 0;
	        do {
	            if (iters ++ > 10) {
	                if (expandBy) bits += expandBy;
	                else throw new Error('too many ID collisions, use more bits')
	            }
	            
	            var id = hat(bits, base);
	        } while (Object.hasOwnProperty.call(hats, id));
	        
	        hats[id] = data;
	        return id;
	    };
	    var hats = fn.hats = {};
	    
	    fn.get = function (id) {
	        return fn.hats[id];
	    };
	    
	    fn.set = function (id, value) {
	        fn.hats[id] = value;
	        return fn;
	    };
	    
	    fn.bits = bits || 128;
	    fn.base = base || 16;
	    return fn;
	};
	});

	/**
	 * Create a new id generator / cache instance.
	 *
	 * You may optionally provide a seed that is used internally.
	 *
	 * @param {Seed} seed
	 */

	function Ids(seed) {
	  if (!(this instanceof Ids)) {
	    return new Ids(seed);
	  }

	  seed = seed || [128, 36, 1];
	  this._seed = seed.length ? hat_1.rack(seed[0], seed[1], seed[2]) : seed;
	}
	/**
	 * Generate a next id.
	 *
	 * @param {Object} [element] element to bind the id to
	 *
	 * @return {String} id
	 */

	Ids.prototype.next = function (element) {
	  return this._seed(element || true);
	};
	/**
	 * Generate a next id with a given prefix.
	 *
	 * @param {Object} [element] element to bind the id to
	 *
	 * @return {String} id
	 */


	Ids.prototype.nextPrefixed = function (prefix, element) {
	  var id;

	  do {
	    id = prefix + this.next(true);
	  } while (this.assigned(id)); // claim {prefix}{random}


	  this.claim(id, element); // return

	  return id;
	};
	/**
	 * Manually claim an existing id.
	 *
	 * @param {String} id
	 * @param {String} [element] element the id is claimed by
	 */


	Ids.prototype.claim = function (id, element) {
	  this._seed.set(id, element || true);
	};
	/**
	 * Returns true if the given id has already been assigned.
	 *
	 * @param  {String} id
	 * @return {Boolean}
	 */


	Ids.prototype.assigned = function (id) {
	  return this._seed.get(id) || false;
	};
	/**
	 * Unclaim an id.
	 *
	 * @param  {String} id the id to unclaim
	 */


	Ids.prototype.unclaim = function (id) {
	  delete this._seed.hats[id];
	};
	/**
	 * Clear all claimed ids.
	 */


	Ids.prototype.clear = function () {
	  var hats = this._seed.hats,
	      id;

	  for (id in hats) {
	    this.unclaim(id);
	  }
	};

	var index_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': Ids
	});

	/**
	 * Flatten array, one level deep.
	 *
	 * @param {Array<?>} arr
	 *
	 * @return {Array<?>}
	 */
	function flatten(arr) {
	  return Array.prototype.concat.apply([], arr);
	}

	var nativeToString = Object.prototype.toString;
	var nativeHasOwnProperty = Object.prototype.hasOwnProperty;
	function isUndefined(obj) {
	  return obj === undefined;
	}
	function isDefined(obj) {
	  return obj !== undefined;
	}
	function isNil(obj) {
	  return obj == null;
	}
	function isArray(obj) {
	  return nativeToString.call(obj) === '[object Array]';
	}
	function isObject(obj) {
	  return nativeToString.call(obj) === '[object Object]';
	}
	function isNumber(obj) {
	  return nativeToString.call(obj) === '[object Number]';
	}
	function isFunction(obj) {
	  var tag = nativeToString.call(obj);
	  return tag === '[object Function]' || tag === '[object AsyncFunction]' || tag === '[object GeneratorFunction]' || tag === '[object AsyncGeneratorFunction]' || tag === '[object Proxy]';
	}
	function isString(obj) {
	  return nativeToString.call(obj) === '[object String]';
	}
	/**
	 * Ensure collection is an array.
	 *
	 * @param {Object} obj
	 */

	function ensureArray(obj) {
	  if (isArray(obj)) {
	    return;
	  }

	  throw new Error('must supply array');
	}
	/**
	 * Return true, if target owns a property with the given key.
	 *
	 * @param {Object} target
	 * @param {String} key
	 *
	 * @return {Boolean}
	 */

	function has(target, key) {
	  return nativeHasOwnProperty.call(target, key);
	}

	/**
	 * Find element in collection.
	 *
	 * @param  {Array|Object} collection
	 * @param  {Function|Object} matcher
	 *
	 * @return {Object}
	 */

	function find(collection, matcher) {
	  matcher = toMatcher(matcher);
	  var match;
	  forEach(collection, function (val, key) {
	    if (matcher(val, key)) {
	      match = val;
	      return false;
	    }
	  });
	  return match;
	}
	/**
	 * Find element index in collection.
	 *
	 * @param  {Array|Object} collection
	 * @param  {Function} matcher
	 *
	 * @return {Object}
	 */

	function findIndex(collection, matcher) {
	  matcher = toMatcher(matcher);
	  var idx = isArray(collection) ? -1 : undefined;
	  forEach(collection, function (val, key) {
	    if (matcher(val, key)) {
	      idx = key;
	      return false;
	    }
	  });
	  return idx;
	}
	/**
	 * Find element in collection.
	 *
	 * @param  {Array|Object} collection
	 * @param  {Function} matcher
	 *
	 * @return {Array} result
	 */

	function filter(collection, matcher) {
	  var result = [];
	  forEach(collection, function (val, key) {
	    if (matcher(val, key)) {
	      result.push(val);
	    }
	  });
	  return result;
	}
	/**
	 * Iterate over collection; returning something
	 * (non-undefined) will stop iteration.
	 *
	 * @param  {Array|Object} collection
	 * @param  {Function} iterator
	 *
	 * @return {Object} return result that stopped the iteration
	 */

	function forEach(collection, iterator) {
	  var val, result;

	  if (isUndefined(collection)) {
	    return;
	  }

	  var convertKey = isArray(collection) ? toNum : identity;

	  for (var key in collection) {
	    if (has(collection, key)) {
	      val = collection[key];
	      result = iterator(val, convertKey(key));

	      if (result === false) {
	        return val;
	      }
	    }
	  }
	}
	/**
	 * Return collection without element.
	 *
	 * @param  {Array} arr
	 * @param  {Function} matcher
	 *
	 * @return {Array}
	 */

	function without(arr, matcher) {
	  if (isUndefined(arr)) {
	    return [];
	  }

	  ensureArray(arr);
	  matcher = toMatcher(matcher);
	  return arr.filter(function (el, idx) {
	    return !matcher(el, idx);
	  });
	}
	/**
	 * Reduce collection, returning a single result.
	 *
	 * @param  {Object|Array} collection
	 * @param  {Function} iterator
	 * @param  {Any} result
	 *
	 * @return {Any} result returned from last iterator
	 */

	function reduce(collection, iterator, result) {
	  forEach(collection, function (value, idx) {
	    result = iterator(result, value, idx);
	  });
	  return result;
	}
	/**
	 * Return true if every element in the collection
	 * matches the criteria.
	 *
	 * @param  {Object|Array} collection
	 * @param  {Function} matcher
	 *
	 * @return {Boolean}
	 */

	function every(collection, matcher) {
	  return !!reduce(collection, function (matches, val, key) {
	    return matches && matcher(val, key);
	  }, true);
	}
	/**
	 * Return true if some elements in the collection
	 * match the criteria.
	 *
	 * @param  {Object|Array} collection
	 * @param  {Function} matcher
	 *
	 * @return {Boolean}
	 */

	function some(collection, matcher) {
	  return !!find(collection, matcher);
	}
	/**
	 * Transform a collection into another collection
	 * by piping each member through the given fn.
	 *
	 * @param  {Object|Array}   collection
	 * @param  {Function} fn
	 *
	 * @return {Array} transformed collection
	 */

	function map(collection, fn) {
	  var result = [];
	  forEach(collection, function (val, key) {
	    result.push(fn(val, key));
	  });
	  return result;
	}
	/**
	 * Get the collections keys.
	 *
	 * @param  {Object|Array} collection
	 *
	 * @return {Array}
	 */

	function keys(collection) {
	  return collection && Object.keys(collection) || [];
	}
	/**
	 * Shorthand for `keys(o).length`.
	 *
	 * @param  {Object|Array} collection
	 *
	 * @return {Number}
	 */

	function size(collection) {
	  return keys(collection).length;
	}
	/**
	 * Get the values in the collection.
	 *
	 * @param  {Object|Array} collection
	 *
	 * @return {Array}
	 */

	function values(collection) {
	  return map(collection, function (val) {
	    return val;
	  });
	}
	/**
	 * Group collection members by attribute.
	 *
	 * @param  {Object|Array} collection
	 * @param  {Function} extractor
	 *
	 * @return {Object} map with { attrValue => [ a, b, c ] }
	 */

	function groupBy(collection, extractor) {
	  var grouped = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  extractor = toExtractor(extractor);
	  forEach(collection, function (val) {
	    var discriminator = extractor(val) || '_';
	    var group = grouped[discriminator];

	    if (!group) {
	      group = grouped[discriminator] = [];
	    }

	    group.push(val);
	  });
	  return grouped;
	}
	function uniqueBy(extractor) {
	  extractor = toExtractor(extractor);
	  var grouped = {};

	  for (var _len = arguments.length, collections = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    collections[_key - 1] = arguments[_key];
	  }

	  forEach(collections, function (c) {
	    return groupBy(c, extractor, grouped);
	  });
	  var result = map(grouped, function (val, key) {
	    return val[0];
	  });
	  return result;
	}
	var unionBy = uniqueBy;
	/**
	 * Sort collection by criteria.
	 *
	 * @param  {Object|Array} collection
	 * @param  {String|Function} extractor
	 *
	 * @return {Array}
	 */

	function sortBy(collection, extractor) {
	  extractor = toExtractor(extractor);
	  var sorted = [];
	  forEach(collection, function (value, key) {
	    var disc = extractor(value, key);
	    var entry = {
	      d: disc,
	      v: value
	    };

	    for (var idx = 0; idx < sorted.length; idx++) {
	      var d = sorted[idx].d;

	      if (disc < d) {
	        sorted.splice(idx, 0, entry);
	        return;
	      }
	    } // not inserted, append (!)


	    sorted.push(entry);
	  });
	  return map(sorted, function (e) {
	    return e.v;
	  });
	}
	/**
	 * Create an object pattern matcher.
	 *
	 * @example
	 *
	 * const matcher = matchPattern({ id: 1 });
	 *
	 * var element = find(elements, matcher);
	 *
	 * @param  {Object} pattern
	 *
	 * @return {Function} matcherFn
	 */

	function matchPattern(pattern) {
	  return function (el) {
	    return every(pattern, function (val, key) {
	      return el[key] === val;
	    });
	  };
	}

	function toExtractor(extractor) {
	  return isFunction(extractor) ? extractor : function (e) {
	    return e[extractor];
	  };
	}

	function toMatcher(matcher) {
	  return isFunction(matcher) ? matcher : function (e) {
	    return e === matcher;
	  };
	}

	function identity(arg) {
	  return arg;
	}

	function toNum(arg) {
	  return Number(arg);
	}

	/**
	 * Debounce fn, calling it only once if
	 * the given time elapsed between calls.
	 *
	 * @param  {Function} fn
	 * @param  {Number} timeout
	 *
	 * @return {Function} debounced function
	 */
	function debounce(fn, timeout) {
	  var timer;
	  var lastArgs;
	  var lastThis;
	  var lastNow;

	  function fire() {
	    var now = Date.now();
	    var scheduledDiff = lastNow + timeout - now;

	    if (scheduledDiff > 0) {
	      return schedule(scheduledDiff);
	    }

	    fn.apply(lastThis, lastArgs);
	    timer = lastNow = lastArgs = lastThis = undefined;
	  }

	  function schedule(timeout) {
	    timer = setTimeout(fire, timeout);
	  }

	  return function () {
	    lastNow = Date.now();

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    lastArgs = args;
	    lastThis = this; // ensure an execution is scheduled

	    if (!timer) {
	      schedule(timeout);
	    }
	  };
	}
	/**
	 * Throttle fn, calling at most once
	 * in the given interval.
	 *
	 * @param  {Function} fn
	 * @param  {Number} interval
	 *
	 * @return {Function} throttled function
	 */

	function throttle(fn, interval) {
	  var throttling = false;
	  return function () {
	    if (throttling) {
	      return;
	    }

	    fn.apply(void 0, arguments);
	    throttling = true;
	    setTimeout(function () {
	      throttling = false;
	    }, interval);
	  };
	}
	/**
	 * Bind function against target <this>.
	 *
	 * @param  {Function} fn
	 * @param  {Object}   target
	 *
	 * @return {Function} bound function
	 */

	function bind(fn, target) {
	  return fn.bind(target);
	}

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	/**
	 * Convenience wrapper for `Object.assign`.
	 *
	 * @param {Object} target
	 * @param {...Object} others
	 *
	 * @return {Object} the target
	 */

	function assign(target) {
	  for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    others[_key - 1] = arguments[_key];
	  }

	  return _extends.apply(void 0, [target].concat(others));
	}
	/**
	 * Pick given properties from the target object.
	 *
	 * @param {Object} target
	 * @param {Array} properties
	 *
	 * @return {Object} target
	 */

	function pick(target, properties) {
	  var result = {};
	  var obj = Object(target);
	  forEach(properties, function (prop) {
	    if (prop in obj) {
	      result[prop] = target[prop];
	    }
	  });
	  return result;
	}
	/**
	 * Pick all target properties, excluding the given ones.
	 *
	 * @param {Object} target
	 * @param {Array} properties
	 *
	 * @return {Object} target
	 */

	function omit(target, properties) {
	  var result = {};
	  var obj = Object(target);
	  forEach(obj, function (prop, key) {
	    if (properties.indexOf(key) === -1) {
	      result[key] = prop;
	    }
	  });
	  return result;
	}
	/**
	 * Recursively merge `...sources` into given target.
	 *
	 * Does support merging objects; does not support merging arrays.
	 *
	 * @param {Object} target
	 * @param {...Object} sources
	 *
	 * @return {Object} the target
	 */

	function merge(target) {
	  for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	    sources[_key2 - 1] = arguments[_key2];
	  }

	  if (!sources.length) {
	    return target;
	  }

	  forEach(sources, function (source) {
	    // skip non-obj sources, i.e. null
	    if (!source || !isObject(source)) {
	      return;
	    }

	    forEach(source, function (sourceVal, key) {
	      if (key === '__proto__') {
	        return;
	      }

	      var targetVal = target[key];

	      if (isObject(sourceVal)) {
	        if (!isObject(targetVal)) {
	          // override target[key] with object
	          targetVal = {};
	        }

	        target[key] = merge(targetVal, sourceVal);
	      } else {
	        target[key] = sourceVal;
	      }
	    });
	  });
	  return target;
	}

	var index_esm$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		flatten: flatten,
		find: find,
		findIndex: findIndex,
		filter: filter,
		forEach: forEach,
		without: without,
		reduce: reduce,
		every: every,
		some: some,
		map: map,
		keys: keys,
		size: size,
		values: values,
		groupBy: groupBy,
		uniqueBy: uniqueBy,
		unionBy: unionBy,
		sortBy: sortBy,
		matchPattern: matchPattern,
		debounce: debounce,
		throttle: throttle,
		bind: bind,
		isUndefined: isUndefined,
		isDefined: isDefined,
		isNil: isNil,
		isArray: isArray,
		isObject: isObject,
		isNumber: isNumber,
		isFunction: isFunction,
		isString: isString,
		ensureArray: ensureArray,
		has: has,
		assign: assign,
		pick: pick,
		omit: omit,
		merge: merge
	});

	/**
	 * Set attribute `name` to `val`, or get attr `name`.
	 *
	 * @param {Element} el
	 * @param {String} name
	 * @param {String} [val]
	 * @api public
	 */
	function attr(el, name, val) {
	  // get
	  if (arguments.length == 2) {
	    return el.getAttribute(name);
	  }

	  // remove
	  if (val === null) {
	    return el.removeAttribute(name);
	  }

	  // set
	  el.setAttribute(name, val);

	  return el;
	}

	var indexOf = [].indexOf;

	var indexof = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

	/**
	 * Taken from https://github.com/component/classes
	 *
	 * Without the component bits.
	 */

	/**
	 * Whitespace regexp.
	 */

	var re = /\s+/;

	/**
	 * toString reference.
	 */

	var toString = Object.prototype.toString;

	/**
	 * Wrap `el` in a `ClassList`.
	 *
	 * @param {Element} el
	 * @return {ClassList}
	 * @api public
	 */

	function classes(el) {
	  return new ClassList(el);
	}

	/**
	 * Initialize a new ClassList for `el`.
	 *
	 * @param {Element} el
	 * @api private
	 */

	function ClassList(el) {
	  if (!el || !el.nodeType) {
	    throw new Error('A DOM element reference is required');
	  }
	  this.el = el;
	  this.list = el.classList;
	}

	/**
	 * Add class `name` if not already present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.add = function (name) {
	  // classList
	  if (this.list) {
	    this.list.add(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = indexof(arr, name);
	  if (!~i) arr.push(name);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove class `name` when present, or
	 * pass a regular expression to remove
	 * any which match.
	 *
	 * @param {String|RegExp} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.remove = function (name) {
	  if ('[object RegExp]' == toString.call(name)) {
	    return this.removeMatching(name);
	  }

	  // classList
	  if (this.list) {
	    this.list.remove(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = indexof(arr, name);
	  if (~i) arr.splice(i, 1);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove all classes matching `re`.
	 *
	 * @param {RegExp} re
	 * @return {ClassList}
	 * @api private
	 */

	ClassList.prototype.removeMatching = function (re) {
	  var arr = this.array();
	  for (var i = 0; i < arr.length; i++) {
	    if (re.test(arr[i])) {
	      this.remove(arr[i]);
	    }
	  }
	  return this;
	};

	/**
	 * Toggle class `name`, can force state via `force`.
	 *
	 * For browsers that support classList, but do not support `force` yet,
	 * the mistake will be detected and corrected.
	 *
	 * @param {String} name
	 * @param {Boolean} force
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.toggle = function (name, force) {
	  // classList
	  if (this.list) {
	    if ('undefined' !== typeof force) {
	      if (force !== this.list.toggle(name, force)) {
	        this.list.toggle(name); // toggle again to correct
	      }
	    } else {
	      this.list.toggle(name);
	    }
	    return this;
	  }

	  // fallback
	  if ('undefined' !== typeof force) {
	    if (!force) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  } else {
	    if (this.has(name)) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  }

	  return this;
	};

	/**
	 * Return an array of classes.
	 *
	 * @return {Array}
	 * @api public
	 */

	ClassList.prototype.array = function () {
	  var className = this.el.getAttribute('class') || '';
	  var str = className.replace(/^\s+|\s+$/g, '');
	  var arr = str.split(re);
	  if ('' === arr[0]) arr.shift();
	  return arr;
	};

	/**
	 * Check if class `name` is present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.has = ClassList.prototype.contains = function (name) {
	  return this.list ? this.list.contains(name) : !!~indexof(this.array(), name);
	};

	/**
	 * Remove all children from the given element.
	 */
	function clear(el) {

	  var c;

	  while (el.childNodes.length) {
	    c = el.childNodes[0];
	    el.removeChild(c);
	  }

	  return el;
	}

	var proto = typeof Element !== 'undefined' ? Element.prototype : {};
	var vendor = proto.matches
	  || proto.matchesSelector
	  || proto.webkitMatchesSelector
	  || proto.mozMatchesSelector
	  || proto.msMatchesSelector
	  || proto.oMatchesSelector;

	var matchesSelector = match;

	/**
	 * Match `el` to `selector`.
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @return {Boolean}
	 * @api public
	 */

	function match(el, selector) {
	  if (!el || el.nodeType !== 1) return false;
	  if (vendor) return vendor.call(el, selector);
	  var nodes = el.parentNode.querySelectorAll(selector);
	  for (var i = 0; i < nodes.length; i++) {
	    if (nodes[i] == el) return true;
	  }
	  return false;
	}

	/**
	 * Closest
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @param {Boolean} checkYourSelf (optional)
	 */
	function closest (element, selector, checkYourSelf) {
	  var currentElem = checkYourSelf ? element : element.parentNode;

	  while (currentElem && currentElem.nodeType !== document.DOCUMENT_NODE && currentElem.nodeType !== document.DOCUMENT_FRAGMENT_NODE) {

	    if (matchesSelector(currentElem, selector)) {
	      return currentElem;
	    }

	    currentElem = currentElem.parentNode;
	  }

	  return matchesSelector(currentElem, selector) ? currentElem : null;
	}

	var bind$1 = window.addEventListener ? 'addEventListener' : 'attachEvent',
	    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',
	    prefix = bind$1 !== 'addEventListener' ? 'on' : '';

	/**
	 * Bind `el` event `type` to `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	var bind_1 = function(el, type, fn, capture){
	  el[bind$1](prefix + type, fn, capture || false);
	  return fn;
	};

	/**
	 * Unbind `el` event `type`'s callback `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	var unbind_1 = function(el, type, fn, capture){
	  el[unbind](prefix + type, fn, capture || false);
	  return fn;
	};

	var componentEvent = {
		bind: bind_1,
		unbind: unbind_1
	};

	/**
	 * Module dependencies.
	 */

	/**
	 * Delegate event `type` to `selector`
	 * and invoke `fn(e)`. A callback function
	 * is returned which may be passed to `.unbind()`.
	 *
	 * @param {Element} el
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @return {Function}
	 * @api public
	 */

	// Some events don't bubble, so we want to bind to the capture phase instead
	// when delegating.
	var forceCaptureEvents = ['focus', 'blur'];

	function bind$1$1(el, selector, type, fn, capture) {
	  if (forceCaptureEvents.indexOf(type) !== -1) {
	    capture = true;
	  }

	  return componentEvent.bind(el, type, function (e) {
	    var target = e.target || e.srcElement;
	    e.delegateTarget = closest(target, selector, true);
	    if (e.delegateTarget) {
	      fn.call(el, e);
	    }
	  }, capture);
	}

	/**
	 * Unbind event `type`'s callback `fn`.
	 *
	 * @param {Element} el
	 * @param {String} type
	 * @param {Function} fn
	 * @param {Boolean} capture
	 * @api public
	 */
	function unbind$1(el, type, fn, capture) {
	  if (forceCaptureEvents.indexOf(type) !== -1) {
	    capture = true;
	  }

	  return componentEvent.unbind(el, type, fn, capture);
	}

	var delegate = {
	  bind: bind$1$1,
	  unbind: unbind$1
	};

	/**
	 * Expose `parse`.
	 */

	var domify = parse;

	/**
	 * Tests for browser support.
	 */

	var innerHTMLBug = false;
	var bugTestDiv;
	if (typeof document !== 'undefined') {
	  bugTestDiv = document.createElement('div');
	  // Setup
	  bugTestDiv.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
	  // Make sure that link elements get serialized correctly by innerHTML
	  // This requires a wrapper element in IE
	  innerHTMLBug = !bugTestDiv.getElementsByTagName('link').length;
	  bugTestDiv = undefined;
	}

	/**
	 * Wrap map from jquery.
	 */

	var map$1 = {
	  legend: [1, '<fieldset>', '</fieldset>'],
	  tr: [2, '<table><tbody>', '</tbody></table>'],
	  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  // for script/link/style tags to work in IE6-8, you have to wrap
	  // in a div with a non-whitespace character in front, ha!
	  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
	};

	map$1.td =
	map$1.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	map$1.option =
	map$1.optgroup = [1, '<select multiple="multiple">', '</select>'];

	map$1.thead =
	map$1.tbody =
	map$1.colgroup =
	map$1.caption =
	map$1.tfoot = [1, '<table>', '</table>'];

	map$1.polyline =
	map$1.ellipse =
	map$1.polygon =
	map$1.circle =
	map$1.text =
	map$1.line =
	map$1.path =
	map$1.rect =
	map$1.g = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

	/**
	 * Parse `html` and return a DOM Node instance, which could be a TextNode,
	 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
	 * instance, depending on the contents of the `html` string.
	 *
	 * @param {String} html - HTML string to "domify"
	 * @param {Document} doc - The `document` instance to create the Node for
	 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
	 * @api private
	 */

	function parse(html, doc) {
	  if ('string' != typeof html) throw new TypeError('String expected');

	  // default to the global `document` object
	  if (!doc) doc = document;

	  // tag name
	  var m = /<([\w:]+)/.exec(html);
	  if (!m) return doc.createTextNode(html);

	  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

	  var tag = m[1];

	  // body support
	  if (tag == 'body') {
	    var el = doc.createElement('html');
	    el.innerHTML = html;
	    return el.removeChild(el.lastChild);
	  }

	  // wrap map
	  var wrap = map$1[tag] || map$1._default;
	  var depth = wrap[0];
	  var prefix = wrap[1];
	  var suffix = wrap[2];
	  var el = doc.createElement('div');
	  el.innerHTML = prefix + html + suffix;
	  while (depth--) el = el.lastChild;

	  // one element
	  if (el.firstChild == el.lastChild) {
	    return el.removeChild(el.firstChild);
	  }

	  // several elements
	  var fragment = doc.createDocumentFragment();
	  while (el.firstChild) {
	    fragment.appendChild(el.removeChild(el.firstChild));
	  }

	  return fragment;
	}

	function query(selector, el) {
	  el = el || document;

	  return el.querySelector(selector);
	}

	function all(selector, el) {
	  el = el || document;

	  return el.querySelectorAll(selector);
	}

	function remove(el) {
	  el.parentNode && el.parentNode.removeChild(el);
	}

	var index_esm$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		attr: attr,
		classes: classes,
		clear: clear,
		closest: closest,
		delegate: delegate,
		domify: domify,
		event: componentEvent,
		matches: matchesSelector,
		query: query,
		queryAll: all,
		remove: remove
	});

	function ensureImported(element, target) {

	  if (element.ownerDocument !== target.ownerDocument) {
	    try {
	      // may fail on webkit
	      return target.ownerDocument.importNode(element, true);
	    } catch (e) {
	      // ignore
	    }
	  }

	  return element;
	}

	/**
	 * appendTo utility
	 */

	/**
	 * Append a node to a target element and return the appended node.
	 *
	 * @param  {SVGElement} element
	 * @param  {SVGElement} target
	 *
	 * @return {SVGElement} the appended node
	 */
	function appendTo(element, target) {
	  return target.appendChild(ensureImported(element, target));
	}

	/**
	 * append utility
	 */

	/**
	 * Append a node to an element
	 *
	 * @param  {SVGElement} element
	 * @param  {SVGElement} node
	 *
	 * @return {SVGElement} the element
	 */
	function append(target, node) {
	  appendTo(node, target);
	  return target;
	}

	/**
	 * attribute accessor utility
	 */

	var LENGTH_ATTR = 2;

	var CSS_PROPERTIES = {
	  'alignment-baseline': 1,
	  'baseline-shift': 1,
	  'clip': 1,
	  'clip-path': 1,
	  'clip-rule': 1,
	  'color': 1,
	  'color-interpolation': 1,
	  'color-interpolation-filters': 1,
	  'color-profile': 1,
	  'color-rendering': 1,
	  'cursor': 1,
	  'direction': 1,
	  'display': 1,
	  'dominant-baseline': 1,
	  'enable-background': 1,
	  'fill': 1,
	  'fill-opacity': 1,
	  'fill-rule': 1,
	  'filter': 1,
	  'flood-color': 1,
	  'flood-opacity': 1,
	  'font': 1,
	  'font-family': 1,
	  'font-size': LENGTH_ATTR,
	  'font-size-adjust': 1,
	  'font-stretch': 1,
	  'font-style': 1,
	  'font-variant': 1,
	  'font-weight': 1,
	  'glyph-orientation-horizontal': 1,
	  'glyph-orientation-vertical': 1,
	  'image-rendering': 1,
	  'kerning': 1,
	  'letter-spacing': 1,
	  'lighting-color': 1,
	  'marker': 1,
	  'marker-end': 1,
	  'marker-mid': 1,
	  'marker-start': 1,
	  'mask': 1,
	  'opacity': 1,
	  'overflow': 1,
	  'pointer-events': 1,
	  'shape-rendering': 1,
	  'stop-color': 1,
	  'stop-opacity': 1,
	  'stroke': 1,
	  'stroke-dasharray': 1,
	  'stroke-dashoffset': 1,
	  'stroke-linecap': 1,
	  'stroke-linejoin': 1,
	  'stroke-miterlimit': 1,
	  'stroke-opacity': 1,
	  'stroke-width': LENGTH_ATTR,
	  'text-anchor': 1,
	  'text-decoration': 1,
	  'text-rendering': 1,
	  'unicode-bidi': 1,
	  'visibility': 1,
	  'word-spacing': 1,
	  'writing-mode': 1
	};


	function getAttribute(node, name) {
	  if (CSS_PROPERTIES[name]) {
	    return node.style[name];
	  } else {
	    return node.getAttributeNS(null, name);
	  }
	}

	function setAttribute(node, name, value) {
	  var hyphenated = name.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();

	  var type = CSS_PROPERTIES[hyphenated];

	  if (type) {
	    // append pixel unit, unless present
	    if (type === LENGTH_ATTR && typeof value === 'number') {
	      value = String(value) + 'px';
	    }

	    node.style[hyphenated] = value;
	  } else {
	    node.setAttributeNS(null, name, value);
	  }
	}

	function setAttributes(node, attrs) {

	  var names = Object.keys(attrs), i, name;

	  for (i = 0, name; (name = names[i]); i++) {
	    setAttribute(node, name, attrs[name]);
	  }
	}

	/**
	 * Gets or sets raw attributes on a node.
	 *
	 * @param  {SVGElement} node
	 * @param  {Object} [attrs]
	 * @param  {String} [name]
	 * @param  {String} [value]
	 *
	 * @return {String}
	 */
	function attr$1(node, name, value) {
	  if (typeof name === 'string') {
	    if (value !== undefined) {
	      setAttribute(node, name, value);
	    } else {
	      return getAttribute(node, name);
	    }
	  } else {
	    setAttributes(node, name);
	  }

	  return node;
	}

	/**
	 * Clear utility
	 */
	function index(arr, obj) {
	  if (arr.indexOf) {
	    return arr.indexOf(obj);
	  }


	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) {
	      return i;
	    }
	  }

	  return -1;
	}

	var re$1 = /\s+/;

	var toString$1 = Object.prototype.toString;

	function defined(o) {
	  return typeof o !== 'undefined';
	}

	/**
	 * Wrap `el` in a `ClassList`.
	 *
	 * @param {Element} el
	 * @return {ClassList}
	 * @api public
	 */

	function classes$1(el) {
	  return new ClassList$1(el);
	}

	function ClassList$1(el) {
	  if (!el || !el.nodeType) {
	    throw new Error('A DOM element reference is required');
	  }
	  this.el = el;
	  this.list = el.classList;
	}

	/**
	 * Add class `name` if not already present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList$1.prototype.add = function(name) {

	  // classList
	  if (this.list) {
	    this.list.add(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (!~i) {
	    arr.push(name);
	  }

	  if (defined(this.el.className.baseVal)) {
	    this.el.className.baseVal = arr.join(' ');
	  } else {
	    this.el.className = arr.join(' ');
	  }

	  return this;
	};

	/**
	 * Remove class `name` when present, or
	 * pass a regular expression to remove
	 * any which match.
	 *
	 * @param {String|RegExp} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList$1.prototype.remove = function(name) {
	  if ('[object RegExp]' === toString$1.call(name)) {
	    return this.removeMatching(name);
	  }

	  // classList
	  if (this.list) {
	    this.list.remove(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (~i) {
	    arr.splice(i, 1);
	  }
	  this.el.className.baseVal = arr.join(' ');
	  return this;
	};

	/**
	 * Remove all classes matching `re`.
	 *
	 * @param {RegExp} re
	 * @return {ClassList}
	 * @api private
	 */

	ClassList$1.prototype.removeMatching = function(re) {
	  var arr = this.array();
	  for (var i = 0; i < arr.length; i++) {
	    if (re.test(arr[i])) {
	      this.remove(arr[i]);
	    }
	  }
	  return this;
	};

	/**
	 * Toggle class `name`, can force state via `force`.
	 *
	 * For browsers that support classList, but do not support `force` yet,
	 * the mistake will be detected and corrected.
	 *
	 * @param {String} name
	 * @param {Boolean} force
	 * @return {ClassList}
	 * @api public
	 */

	ClassList$1.prototype.toggle = function(name, force) {
	  // classList
	  if (this.list) {
	    if (defined(force)) {
	      if (force !== this.list.toggle(name, force)) {
	        this.list.toggle(name); // toggle again to correct
	      }
	    } else {
	      this.list.toggle(name);
	    }
	    return this;
	  }

	  // fallback
	  if (defined(force)) {
	    if (!force) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  } else {
	    if (this.has(name)) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  }

	  return this;
	};

	/**
	 * Return an array of classes.
	 *
	 * @return {Array}
	 * @api public
	 */

	ClassList$1.prototype.array = function() {
	  var className = this.el.getAttribute('class') || '';
	  var str = className.replace(/^\s+|\s+$/g, '');
	  var arr = str.split(re$1);
	  if ('' === arr[0]) {
	    arr.shift();
	  }
	  return arr;
	};

	/**
	 * Check if class `name` is present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList$1.prototype.has =
	ClassList$1.prototype.contains = function(name) {
	  return (
	    this.list ?
	      this.list.contains(name) :
	      !! ~index(this.array(), name)
	  );
	};

	function remove$1(element) {
	  var parent = element.parentNode;

	  if (parent) {
	    parent.removeChild(element);
	  }

	  return element;
	}

	/**
	 * Clear utility
	 */

	/**
	 * Removes all children from the given element
	 *
	 * @param  {DOMElement} element
	 * @return {DOMElement} the element (for chaining)
	 */
	function clear$1(element) {
	  var child;

	  while ((child = element.firstChild)) {
	    remove$1(child);
	  }

	  return element;
	}

	function clone(element) {
	  return element.cloneNode(true);
	}

	var ns = {
	  svg: 'http://www.w3.org/2000/svg'
	};

	/**
	 * DOM parsing utility
	 */

	var SVG_START = '<svg xmlns="' + ns.svg + '"';

	function parse$1(svg) {

	  var unwrap = false;

	  // ensure we import a valid svg document
	  if (svg.substring(0, 4) === '<svg') {
	    if (svg.indexOf(ns.svg) === -1) {
	      svg = SVG_START + svg.substring(4);
	    }
	  } else {
	    // namespace svg
	    svg = SVG_START + '>' + svg + '</svg>';
	    unwrap = true;
	  }

	  var parsed = parseDocument(svg);

	  if (!unwrap) {
	    return parsed;
	  }

	  var fragment = document.createDocumentFragment();

	  var parent = parsed.firstChild;

	  while (parent.firstChild) {
	    fragment.appendChild(parent.firstChild);
	  }

	  return fragment;
	}

	function parseDocument(svg) {

	  var parser;

	  // parse
	  parser = new DOMParser();
	  parser.async = false;

	  return parser.parseFromString(svg, 'text/xml');
	}

	/**
	 * Create utility for SVG elements
	 */


	/**
	 * Create a specific type from name or SVG markup.
	 *
	 * @param {String} name the name or markup of the element
	 * @param {Object} [attrs] attributes to set on the element
	 *
	 * @returns {SVGElement}
	 */
	function create(name, attrs) {
	  var element;

	  if (name.charAt(0) === '<') {
	    element = parse$1(name).firstChild;
	    element = document.importNode(element, true);
	  } else {
	    element = document.createElementNS(ns.svg, name);
	  }

	  if (attrs) {
	    attr$1(element, attrs);
	  }

	  return element;
	}

	/**
	 * Geometry helpers
	 */

	// fake node used to instantiate svg geometry elements
	var node = create('svg');

	function extend(object, props) {
	  var i, k, keys = Object.keys(props);

	  for (i = 0; (k = keys[i]); i++) {
	    object[k] = props[k];
	  }

	  return object;
	}

	/**
	 * Create matrix via args.
	 *
	 * @example
	 *
	 * createMatrix({ a: 1, b: 1 });
	 * createMatrix();
	 * createMatrix(1, 2, 0, 0, 30, 20);
	 *
	 * @return {SVGMatrix}
	 */
	function createMatrix(a, b, c, d, e, f) {
	  var matrix = node.createSVGMatrix();

	  switch (arguments.length) {
	  case 0:
	    return matrix;
	  case 1:
	    return extend(matrix, a);
	  case 6:
	    return extend(matrix, {
	      a: a,
	      b: b,
	      c: c,
	      d: d,
	      e: e,
	      f: f
	    });
	  }
	}

	function createTransform(matrix) {
	  if (matrix) {
	    return node.createSVGTransformFromMatrix(matrix);
	  } else {
	    return node.createSVGTransform();
	  }
	}

	/**
	 * Serialization util
	 */

	var TEXT_ENTITIES = /([&<>]{1})/g;
	var ATTR_ENTITIES = /([\n\r"]{1})/g;

	var ENTITY_REPLACEMENT = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '\''
	};

	function escape(str, pattern) {

	  function replaceFn(match, entity) {
	    return ENTITY_REPLACEMENT[entity] || entity;
	  }

	  return str.replace(pattern, replaceFn);
	}

	function serialize(node, output) {

	  var i, len, attrMap, attrNode, childNodes;

	  switch (node.nodeType) {
	  // TEXT
	  case 3:
	    // replace special XML characters
	    output.push(escape(node.textContent, TEXT_ENTITIES));
	    break;

	  // ELEMENT
	  case 1:
	    output.push('<', node.tagName);

	    if (node.hasAttributes()) {
	      attrMap = node.attributes;
	      for (i = 0, len = attrMap.length; i < len; ++i) {
	        attrNode = attrMap.item(i);
	        output.push(' ', attrNode.name, '="', escape(attrNode.value, ATTR_ENTITIES), '"');
	      }
	    }

	    if (node.hasChildNodes()) {
	      output.push('>');
	      childNodes = node.childNodes;
	      for (i = 0, len = childNodes.length; i < len; ++i) {
	        serialize(childNodes.item(i), output);
	      }
	      output.push('</', node.tagName, '>');
	    } else {
	      output.push('/>');
	    }
	    break;

	  // COMMENT
	  case 8:
	    output.push('<!--', escape(node.nodeValue, TEXT_ENTITIES), '-->');
	    break;

	  // CDATA
	  case 4:
	    output.push('<![CDATA[', node.nodeValue, ']]>');
	    break;

	  default:
	    throw new Error('unable to handle node ' + node.nodeType);
	  }

	  return output;
	}

	/**
	 * innerHTML like functionality for SVG elements.
	 * based on innerSVG (https://code.google.com/p/innersvg)
	 */


	function set(element, svg) {

	  var parsed = parse$1(svg);

	  // clear element contents
	  clear$1(element);

	  if (!svg) {
	    return;
	  }

	  if (!isFragment(parsed)) {
	    // extract <svg> from parsed document
	    parsed = parsed.documentElement;
	  }

	  var nodes = slice(parsed.childNodes);

	  // import + append each node
	  for (var i = 0; i < nodes.length; i++) {
	    appendTo(nodes[i], element);
	  }

	}

	function get(element) {
	  var child = element.firstChild,
	      output = [];

	  while (child) {
	    serialize(child, output);
	    child = child.nextSibling;
	  }

	  return output.join('');
	}

	function isFragment(node) {
	  return node.nodeName === '#document-fragment';
	}

	function innerSVG(element, svg) {

	  if (svg !== undefined) {

	    try {
	      set(element, svg);
	    } catch (e) {
	      throw new Error('error parsing SVG: ' + e.message);
	    }

	    return element;
	  } else {
	    return get(element);
	  }
	}


	function slice(arr) {
	  return Array.prototype.slice.call(arr);
	}

	/**
	 * transform accessor utility
	 */

	function wrapMatrix(transformList, transform) {
	  if (transform instanceof SVGMatrix) {
	    return transformList.createSVGTransformFromMatrix(transform);
	  }

	  return transform;
	}


	function setTransforms(transformList, transforms) {
	  var i, t;

	  transformList.clear();

	  for (i = 0; (t = transforms[i]); i++) {
	    transformList.appendItem(wrapMatrix(transformList, t));
	  }
	}

	/**
	 * Get or set the transforms on the given node.
	 *
	 * @param {SVGElement} node
	 * @param  {SVGTransform|SVGMatrix|Array<SVGTransform|SVGMatrix>} [transforms]
	 *
	 * @return {SVGTransform} the consolidated transform
	 */
	function transform(node, transforms) {
	  var transformList = node.transform.baseVal;

	  if (transforms) {

	    if (!Array.isArray(transforms)) {
	      transforms = [ transforms ];
	    }

	    setTransforms(transformList, transforms);
	  }

	  return transformList.consolidate();
	}

	var CLASS_PATTERN = /^class /;

	function isClass(fn) {
	  return CLASS_PATTERN.test(fn.toString());
	}

	function isArray$1(obj) {
	  return Object.prototype.toString.call(obj) === '[object Array]';
	}

	function hasOwnProp(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	function annotate() {
	  var args = Array.prototype.slice.call(arguments);

	  if (args.length === 1 && isArray$1(args[0])) {
	    args = args[0];
	  }

	  var fn = args.pop();

	  fn.$inject = args;

	  return fn;
	}


	// Current limitations:
	// - can't put into "function arg" comments
	// function /* (no parenthesis like this) */ (){}
	// function abc( /* xx (no parenthesis like this) */ a, b) {}
	//
	// Just put the comment before function or inside:
	// /* (((this is fine))) */ function(a, b) {}
	// function abc(a) { /* (((this is fine))) */}
	//
	// - can't reliably auto-annotate constructor; we'll match the
	// first constructor(...) pattern found which may be the one
	// of a nested class, too.

	var CONSTRUCTOR_ARGS = /constructor\s*[^(]*\(\s*([^)]*)\)/m;
	var FN_ARGS = /^(?:async )?(?:function\s*)?[^(]*\(\s*([^)]*)\)/m;
	var FN_ARG = /\/\*([^*]*)\*\//m;

	function parseAnnotations(fn) {

	  if (typeof fn !== 'function') {
	    throw new Error('Cannot annotate "' + fn + '". Expected a function!');
	  }

	  var match = fn.toString().match(isClass(fn) ? CONSTRUCTOR_ARGS : FN_ARGS);

	  // may parse class without constructor
	  if (!match) {
	    return [];
	  }

	  return match[1] && match[1].split(',').map(function(arg) {
	    match = arg.match(FN_ARG);
	    return match ? match[1].trim() : arg.trim();
	  }) || [];
	}

	function Module() {
	  var providers = [];

	  this.factory = function(name, factory) {
	    providers.push([name, 'factory', factory]);
	    return this;
	  };

	  this.value = function(name, value) {
	    providers.push([name, 'value', value]);
	    return this;
	  };

	  this.type = function(name, type) {
	    providers.push([name, 'type', type]);
	    return this;
	  };

	  this.forEach = function(iterator) {
	    providers.forEach(iterator);
	  };

	}

	function Injector(modules, parent) {
	  parent = parent || {
	    get: function(name, strict) {
	      currentlyResolving.push(name);

	      if (strict === false) {
	        return null;
	      } else {
	        throw error('No provider for "' + name + '"!');
	      }
	    }
	  };

	  var currentlyResolving = [];
	  var providers = this._providers = Object.create(parent._providers || null);
	  var instances = this._instances = Object.create(null);

	  var self = instances.injector = this;

	  var error = function(msg) {
	    var stack = currentlyResolving.join(' -> ');
	    currentlyResolving.length = 0;
	    return new Error(stack ? msg + ' (Resolving: ' + stack + ')' : msg);
	  };

	  /**
	   * Return a named service.
	   *
	   * @param {String} name
	   * @param {Boolean} [strict=true] if false, resolve missing services to null
	   *
	   * @return {Object}
	   */
	  var get = function(name, strict) {
	    if (!providers[name] && name.indexOf('.') !== -1) {
	      var parts = name.split('.');
	      var pivot = get(parts.shift());

	      while (parts.length) {
	        pivot = pivot[parts.shift()];
	      }

	      return pivot;
	    }

	    if (hasOwnProp(instances, name)) {
	      return instances[name];
	    }

	    if (hasOwnProp(providers, name)) {
	      if (currentlyResolving.indexOf(name) !== -1) {
	        currentlyResolving.push(name);
	        throw error('Cannot resolve circular dependency!');
	      }

	      currentlyResolving.push(name);
	      instances[name] = providers[name][0](providers[name][1]);
	      currentlyResolving.pop();

	      return instances[name];
	    }

	    return parent.get(name, strict);
	  };

	  var fnDef = function(fn, locals) {

	    if (typeof locals === 'undefined') {
	      locals = {};
	    }

	    if (typeof fn !== 'function') {
	      if (isArray$1(fn)) {
	        fn = annotate(fn.slice());
	      } else {
	        throw new Error('Cannot invoke "' + fn + '". Expected a function!');
	      }
	    }

	    var inject = fn.$inject || parseAnnotations(fn);
	    var dependencies = inject.map(function(dep) {
	      if (hasOwnProp(locals, dep)) {
	        return locals[dep];
	      } else {
	        return get(dep);
	      }
	    });

	    return {
	      fn: fn,
	      dependencies: dependencies
	    };
	  };

	  var instantiate = function(Type) {
	    var def = fnDef(Type);

	    var fn = def.fn,
	        dependencies = def.dependencies;

	    // instantiate var args constructor
	    var Constructor = Function.prototype.bind.apply(fn, [ null ].concat(dependencies));

	    return new Constructor();
	  };

	  var invoke = function(func, context, locals) {
	    var def = fnDef(func, locals);

	    var fn = def.fn,
	        dependencies = def.dependencies;

	    return fn.apply(context, dependencies);
	  };


	  var createPrivateInjectorFactory = function(privateChildInjector) {
	    return annotate(function(key) {
	      return privateChildInjector.get(key);
	    });
	  };

	  var createChild = function(modules, forceNewInstances) {
	    if (forceNewInstances && forceNewInstances.length) {
	      var fromParentModule = Object.create(null);
	      var matchedScopes = Object.create(null);

	      var privateInjectorsCache = [];
	      var privateChildInjectors = [];
	      var privateChildFactories = [];

	      var provider;
	      var cacheIdx;
	      var privateChildInjector;
	      var privateChildInjectorFactory;
	      for (var name in providers) {
	        provider = providers[name];

	        if (forceNewInstances.indexOf(name) !== -1) {
	          if (provider[2] === 'private') {
	            cacheIdx = privateInjectorsCache.indexOf(provider[3]);
	            if (cacheIdx === -1) {
	              privateChildInjector = provider[3].createChild([], forceNewInstances);
	              privateChildInjectorFactory = createPrivateInjectorFactory(privateChildInjector);
	              privateInjectorsCache.push(provider[3]);
	              privateChildInjectors.push(privateChildInjector);
	              privateChildFactories.push(privateChildInjectorFactory);
	              fromParentModule[name] = [privateChildInjectorFactory, name, 'private', privateChildInjector];
	            } else {
	              fromParentModule[name] = [privateChildFactories[cacheIdx], name, 'private', privateChildInjectors[cacheIdx]];
	            }
	          } else {
	            fromParentModule[name] = [provider[2], provider[1]];
	          }
	          matchedScopes[name] = true;
	        }

	        if ((provider[2] === 'factory' || provider[2] === 'type') && provider[1].$scope) {
	          /* jshint -W083 */
	          forceNewInstances.forEach(function(scope) {
	            if (provider[1].$scope.indexOf(scope) !== -1) {
	              fromParentModule[name] = [provider[2], provider[1]];
	              matchedScopes[scope] = true;
	            }
	          });
	        }
	      }

	      forceNewInstances.forEach(function(scope) {
	        if (!matchedScopes[scope]) {
	          throw new Error('No provider for "' + scope + '". Cannot use provider from the parent!');
	        }
	      });

	      modules.unshift(fromParentModule);
	    }

	    return new Injector(modules, self);
	  };

	  var factoryMap = {
	    factory: invoke,
	    type: instantiate,
	    value: function(value) {
	      return value;
	    }
	  };

	  modules.forEach(function(module) {

	    function arrayUnwrap(type, value) {
	      if (type !== 'value' && isArray$1(value)) {
	        value = annotate(value.slice());
	      }

	      return value;
	    }

	    // TODO(vojta): handle wrong inputs (modules)
	    if (module instanceof Module) {
	      module.forEach(function(provider) {
	        var name = provider[0];
	        var type = provider[1];
	        var value = provider[2];

	        providers[name] = [factoryMap[type], arrayUnwrap(type, value), type];
	      });
	    } else if (typeof module === 'object') {
	      if (module.__exports__) {
	        var clonedModule = Object.keys(module).reduce(function(m, key) {
	          if (key.substring(0, 2) !== '__') {
	            m[key] = module[key];
	          }
	          return m;
	        }, Object.create(null));

	        var privateInjector = new Injector((module.__modules__ || []).concat([clonedModule]), self);
	        var getFromPrivateInjector = annotate(function(key) {
	          return privateInjector.get(key);
	        });
	        module.__exports__.forEach(function(key) {
	          providers[key] = [getFromPrivateInjector, key, 'private', privateInjector];
	        });
	      } else {
	        Object.keys(module).forEach(function(name) {
	          if (module[name][2] === 'private') {
	            providers[name] = module[name];
	            return;
	          }

	          var type = module[name][0];
	          var value = module[name][1];

	          providers[name] = [factoryMap[type], arrayUnwrap(type, value), type];
	        });
	      }
	    }
	  });

	  // public API
	  this.get = get;
	  this.invoke = invoke;
	  this.instantiate = instantiate;
	  this.createChild = createChild;
	}

	var DEFAULT_RENDER_PRIORITY = 1000;

	/**
	 * The base implementation of shape and connection renderers.
	 *
	 * @param {EventBus} eventBus
	 * @param {number} [renderPriority=1000]
	 */
	function BaseRenderer(eventBus, renderPriority) {
	  var self = this;

	  renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY;

	  eventBus.on([ 'render.shape', 'render.connection' ], renderPriority, function(evt, context) {
	    var type = evt.type,
	        element = context.element,
	        visuals = context.gfx;

	    if (self.canRender(element)) {
	      if (type === 'render.shape') {
	        return self.drawShape(visuals, element);
	      } else {
	        return self.drawConnection(visuals, element);
	      }
	    }
	  });

	  eventBus.on([ 'render.getShapePath', 'render.getConnectionPath'], renderPriority, function(evt, element) {
	    if (self.canRender(element)) {
	      if (evt.type === 'render.getShapePath') {
	        return self.getShapePath(element);
	      } else {
	        return self.getConnectionPath(element);
	      }
	    }
	  });
	}

	/**
	 * Should check whether *this* renderer can render
	 * the element/connection.
	 *
	 * @param {element} element
	 *
	 * @returns {boolean}
	 */
	BaseRenderer.prototype.canRender = function() {};

	/**
	 * Provides the shape's snap svg element to be drawn on the `canvas`.
	 *
	 * @param {djs.Graphics} visuals
	 * @param {Shape} shape
	 *
	 * @returns {Snap.svg} [returns a Snap.svg paper element ]
	 */
	BaseRenderer.prototype.drawShape = function() {};

	/**
	 * Provides the shape's snap svg element to be drawn on the `canvas`.
	 *
	 * @param {djs.Graphics} visuals
	 * @param {Connection} connection
	 *
	 * @returns {Snap.svg} [returns a Snap.svg paper element ]
	 */
	BaseRenderer.prototype.drawConnection = function() {};

	/**
	 * Gets the SVG path of a shape that represents it's visual bounds.
	 *
	 * @param {Shape} shape
	 *
	 * @return {string} svg path
	 */
	BaseRenderer.prototype.getShapePath = function() {};

	/**
	 * Gets the SVG path of a connection that represents it's visual bounds.
	 *
	 * @param {Connection} connection
	 *
	 * @return {string} svg path
	 */
	BaseRenderer.prototype.getConnectionPath = function() {};

	function componentsToPath(elements) {
	  return elements.join(',').replace(/,?([A-z]),?/g, '$1');
	}

	function toSVGPoints(points) {
	  var result = '';

	  for (var i = 0, p; (p = points[i]); i++) {
	    result += p.x + ',' + p.y + ' ';
	  }

	  return result;
	}

	function createLine(points, attrs) {

	  var line = create('polyline');
	  attr$1(line, { points: toSVGPoints(points) });

	  if (attrs) {
	    attr$1(line, attrs);
	  }

	  return line;
	}

	function updateLine(gfx, points) {
	  attr$1(gfx, { points: toSVGPoints(points) });

	  return gfx;
	}

	/**
	 * Get parent elements.
	 *
	 * @param {Array<djs.model.base>} elements
	 *
	 * @returns {Array<djs.model.Base>}
	 */
	function getParents(elements) {

	  // find elements that are not children of any other elements
	  return filter(elements, function(element) {
	    return !find(elements, function(e) {
	      return e !== element && getParent(element, e);
	    });
	  });
	}


	function getParent(element, parent) {
	  if (!parent) {
	    return;
	  }

	  if (element === parent) {
	    return parent;
	  }

	  if (!element.parent) {
	    return;
	  }

	  return getParent(element.parent, parent);
	}


	/**
	 * Adds an element to a collection and returns true if the
	 * element was added.
	 *
	 * @param {Array<Object>} elements
	 * @param {Object} e
	 * @param {boolean} unique
	 */
	function add(elements, e, unique) {
	  var canAdd = !unique || elements.indexOf(e) === -1;

	  if (canAdd) {
	    elements.push(e);
	  }

	  return canAdd;
	}


	/**
	 * Iterate over each element in a collection, calling the iterator function `fn`
	 * with (element, index, recursionDepth).
	 *
	 * Recurse into all elements that are returned by `fn`.
	 *
	 * @param  {Object|Array<Object>} elements
	 * @param  {Function} fn iterator function called with (element, index, recursionDepth)
	 * @param  {number} [depth] maximum recursion depth
	 */
	function eachElement(elements, fn, depth) {

	  depth = depth || 0;

	  if (!isArray(elements)) {
	    elements = [ elements ];
	  }

	  forEach(elements, function(s, i) {
	    var filter = fn(s, i, depth);

	    if (isArray(filter) && filter.length) {
	      eachElement(filter, fn, depth + 1);
	    }
	  });
	}


	/**
	 * Collects self + child elements up to a given depth from a list of elements.
	 *
	 * @param  {djs.model.Base|Array<djs.model.Base>} elements the elements to select the children from
	 * @param  {boolean} unique whether to return a unique result set (no duplicates)
	 * @param  {number} maxDepth the depth to search through or -1 for infinite
	 *
	 * @return {Array<djs.model.Base>} found elements
	 */
	function selfAndChildren(elements, unique, maxDepth) {
	  var result = [],
	      processedChildren = [];

	  eachElement(elements, function(element, i, depth) {
	    add(result, element, unique);

	    var children = element.children;

	    // max traversal depth not reached yet
	    if (maxDepth === -1 || depth < maxDepth) {

	      // children exist && children not yet processed
	      if (children && add(processedChildren, children, unique)) {
	        return children;
	      }
	    }
	  });

	  return result;
	}


	/**
	 * Return self + ALL children for a number of elements
	 *
	 * @param  {Array<djs.model.Base>} elements to query
	 * @param  {boolean} allowDuplicates to allow duplicates in the result set
	 *
	 * @return {Array<djs.model.Base>} the collected elements
	 */
	function selfAndAllChildren(elements, allowDuplicates) {
	  return selfAndChildren(elements, !allowDuplicates, -1);
	}


	/**
	 * Gets the the closure for all selected elements,
	 * their enclosed children and connections.
	 *
	 * @param {Array<djs.model.Base>} elements
	 * @param {boolean} [isTopLevel=true]
	 * @param {Object} [existingClosure]
	 *
	 * @return {Object} newClosure
	 */
	function getClosure(elements, isTopLevel, closure) {

	  if (isUndefined(isTopLevel)) {
	    isTopLevel = true;
	  }

	  if (isObject(isTopLevel)) {
	    closure = isTopLevel;
	    isTopLevel = true;
	  }


	  closure = closure || {};

	  var allShapes = copyObject(closure.allShapes),
	      allConnections = copyObject(closure.allConnections),
	      enclosedElements = copyObject(closure.enclosedElements),
	      enclosedConnections = copyObject(closure.enclosedConnections);

	  var topLevel = copyObject(
	    closure.topLevel,
	    isTopLevel && groupBy(elements, function(e) { return e.id; })
	  );


	  function handleConnection(c) {
	    if (topLevel[c.source.id] && topLevel[c.target.id]) {
	      topLevel[c.id] = [ c ];
	    }

	    // not enclosed as a child, but maybe logically
	    // (connecting two moved elements?)
	    if (allShapes[c.source.id] && allShapes[c.target.id]) {
	      enclosedConnections[c.id] = enclosedElements[c.id] = c;
	    }

	    allConnections[c.id] = c;
	  }

	  function handleElement(element) {

	    enclosedElements[element.id] = element;

	    if (element.waypoints) {

	      // remember connection
	      enclosedConnections[element.id] = allConnections[element.id] = element;
	    } else {

	      // remember shape
	      allShapes[element.id] = element;

	      // remember all connections
	      forEach(element.incoming, handleConnection);

	      forEach(element.outgoing, handleConnection);

	      // recurse into children
	      return element.children;
	    }
	  }

	  eachElement(elements, handleElement);

	  return {
	    allShapes: allShapes,
	    allConnections: allConnections,
	    topLevel: topLevel,
	    enclosedConnections: enclosedConnections,
	    enclosedElements: enclosedElements
	  };
	}

	/**
	 * Returns the surrounding bbox for all elements in
	 * the array or the element primitive.
	 *
	 * @param {Array<djs.model.Shape>|djs.model.Shape} elements
	 * @param {boolean} stopRecursion
	 */
	function getBBox(elements, stopRecursion) {

	  stopRecursion = !!stopRecursion;
	  if (!isArray(elements)) {
	    elements = [elements];
	  }

	  var minX,
	      minY,
	      maxX,
	      maxY;

	  forEach(elements, function(element) {

	    // If element is a connection the bbox must be computed first
	    var bbox = element;
	    if (element.waypoints && !stopRecursion) {
	      bbox = getBBox(element.waypoints, true);
	    }

	    var x = bbox.x,
	        y = bbox.y,
	        height = bbox.height || 0,
	        width = bbox.width || 0;

	    if (x < minX || minX === undefined) {
	      minX = x;
	    }
	    if (y < minY || minY === undefined) {
	      minY = y;
	    }

	    if ((x + width) > maxX || maxX === undefined) {
	      maxX = x + width;
	    }
	    if ((y + height) > maxY || maxY === undefined) {
	      maxY = y + height;
	    }
	  });

	  return {
	    x: minX,
	    y: minY,
	    height: maxY - minY,
	    width: maxX - minX
	  };
	}


	/**
	 * Returns all elements that are enclosed from the bounding box.
	 *
	 *   * If bbox.(width|height) is not specified the method returns
	 *     all elements with element.x/y > bbox.x/y
	 *   * If only bbox.x or bbox.y is specified, method return all elements with
	 *     e.x > bbox.x or e.y > bbox.y
	 *
	 * @param {Array<djs.model.Shape>} elements List of Elements to search through
	 * @param {djs.model.Shape} bbox the enclosing bbox.
	 *
	 * @return {Array<djs.model.Shape>} enclosed elements
	 */
	function getEnclosedElements(elements, bbox) {

	  var filteredElements = {};

	  forEach(elements, function(element) {

	    var e = element;

	    if (e.waypoints) {
	      e = getBBox(e);
	    }

	    if (!isNumber(bbox.y) && (e.x > bbox.x)) {
	      filteredElements[element.id] = element;
	    }
	    if (!isNumber(bbox.x) && (e.y > bbox.y)) {
	      filteredElements[element.id] = element;
	    }
	    if (e.x > bbox.x && e.y > bbox.y) {
	      if (isNumber(bbox.width) && isNumber(bbox.height) &&
	          e.width + e.x < bbox.width + bbox.x &&
	          e.height + e.y < bbox.height + bbox.y) {

	        filteredElements[element.id] = element;
	      } else if (!isNumber(bbox.width) || !isNumber(bbox.height)) {
	        filteredElements[element.id] = element;
	      }
	    }
	  });

	  return filteredElements;
	}


	function getType(element) {

	  if ('waypoints' in element) {
	    return 'connection';
	  }

	  if ('x' in element) {
	    return 'shape';
	  }

	  return 'root';
	}

	function isFrameElement(element) {

	  return !!(element && element.isFrame);
	}

	// helpers ///////////////////////////////

	function copyObject(src1, src2) {
	  return assign({}, src1 || {}, src2 || {});
	}

	// apply default renderer with lowest possible priority
	// so that it only kicks in if noone else could render
	var DEFAULT_RENDER_PRIORITY$1 = 1;

	/**
	 * The default renderer used for shapes and connections.
	 *
	 * @param {EventBus} eventBus
	 * @param {Styles} styles
	 */
	function DefaultRenderer(eventBus, styles) {

	  //
	  BaseRenderer.call(this, eventBus, DEFAULT_RENDER_PRIORITY$1);

	  this.CONNECTION_STYLE = styles.style([ 'no-fill' ], { strokeWidth: 5, stroke: 'fuchsia' });
	  this.SHAPE_STYLE = styles.style({ fill: 'white', stroke: 'fuchsia', strokeWidth: 2 });
	  this.FRAME_STYLE = styles.style([ 'no-fill' ], { stroke: 'fuchsia', strokeDasharray: 4, strokeWidth: 2 });
	}

	inherits_browser(DefaultRenderer, BaseRenderer);


	DefaultRenderer.prototype.canRender = function() {
	  return true;
	};

	DefaultRenderer.prototype.drawShape = function drawShape(visuals, element) {
	  var rect = create('rect');

	  attr$1(rect, {
	    x: 0,
	    y: 0,
	    width: element.width || 0,
	    height: element.height || 0
	  });

	  if (isFrameElement(element)) {
	    attr$1(rect, this.FRAME_STYLE);
	  } else {
	    attr$1(rect, this.SHAPE_STYLE);
	  }

	  append(visuals, rect);

	  return rect;
	};

	DefaultRenderer.prototype.drawConnection = function drawConnection(visuals, connection) {

	  var line = createLine(connection.waypoints, this.CONNECTION_STYLE);
	  append(visuals, line);

	  return line;
	};

	DefaultRenderer.prototype.getShapePath = function getShapePath(shape) {

	  var x = shape.x,
	      y = shape.y,
	      width = shape.width,
	      height = shape.height;

	  var shapePath = [
	    ['M', x, y],
	    ['l', width, 0],
	    ['l', 0, height],
	    ['l', -width, 0],
	    ['z']
	  ];

	  return componentsToPath(shapePath);
	};

	DefaultRenderer.prototype.getConnectionPath = function getConnectionPath(connection) {
	  var waypoints = connection.waypoints;

	  var idx, point, connectionPath = [];

	  for (idx = 0; (point = waypoints[idx]); idx++) {

	    // take invisible docking into account
	    // when creating the path
	    point = point.original || point;

	    connectionPath.push([ idx === 0 ? 'M' : 'L', point.x, point.y ]);
	  }

	  return componentsToPath(connectionPath);
	};


	DefaultRenderer.$inject = [ 'eventBus', 'styles' ];

	/**
	 * A component that manages shape styles
	 */
	function Styles() {

	  var defaultTraits = {

	    'no-fill': {
	      fill: 'none'
	    },
	    'no-border': {
	      strokeOpacity: 0.0
	    },
	    'no-events': {
	      pointerEvents: 'none'
	    }
	  };

	  var self = this;

	  /**
	   * Builds a style definition from a className, a list of traits and an object of additional attributes.
	   *
	   * @param  {string} className
	   * @param  {Array<string>} traits
	   * @param  {Object} additionalAttrs
	   *
	   * @return {Object} the style defintion
	   */
	  this.cls = function(className, traits, additionalAttrs) {
	    var attrs = this.style(traits, additionalAttrs);

	    return assign(attrs, { 'class': className });
	  };

	  /**
	   * Builds a style definition from a list of traits and an object of additional attributes.
	   *
	   * @param  {Array<string>} traits
	   * @param  {Object} additionalAttrs
	   *
	   * @return {Object} the style defintion
	   */
	  this.style = function(traits, additionalAttrs) {

	    if (!isArray(traits) && !additionalAttrs) {
	      additionalAttrs = traits;
	      traits = [];
	    }

	    var attrs = reduce(traits, function(attrs, t) {
	      return assign(attrs, defaultTraits[t] || {});
	    }, {});

	    return additionalAttrs ? assign(attrs, additionalAttrs) : attrs;
	  };

	  this.computeStyle = function(custom, traits, defaultStyles) {
	    if (!isArray(traits)) {
	      defaultStyles = traits;
	      traits = [];
	    }

	    return self.style(traits || [], assign({}, defaultStyles, custom || {}));
	  };
	}

	var DrawModule = {
	  __init__: [ 'defaultRenderer' ],
	  defaultRenderer: [ 'type', DefaultRenderer ],
	  styles: [ 'type', Styles ]
	};

	/**
	 * Failsafe remove an element from a collection
	 *
	 * @param  {Array<Object>} [collection]
	 * @param  {Object} [element]
	 *
	 * @return {number} the previous index of the element
	 */
	function remove$2(collection, element) {

	  if (!collection || !element) {
	    return -1;
	  }

	  var idx = collection.indexOf(element);

	  if (idx !== -1) {
	    collection.splice(idx, 1);
	  }

	  return idx;
	}

	/**
	 * Fail save add an element to the given connection, ensuring
	 * it does not yet exist.
	 *
	 * @param {Array<Object>} collection
	 * @param {Object} element
	 * @param {number} idx
	 */
	function add$1(collection, element, idx) {

	  if (!collection || !element) {
	    return;
	  }

	  if (typeof idx !== 'number') {
	    idx = -1;
	  }

	  var currentIdx = collection.indexOf(element);

	  if (currentIdx !== -1) {

	    if (currentIdx === idx) {

	      // nothing to do, position has not changed
	      return;
	    } else {

	      if (idx !== -1) {

	        // remove from current position
	        collection.splice(currentIdx, 1);
	      } else {

	        // already exists in collection
	        return;
	      }
	    }
	  }

	  if (idx !== -1) {

	    // insert at specified position
	    collection.splice(idx, 0, element);
	  } else {

	    // push to end
	    collection.push(element);
	  }
	}


	/**
	 * Fail save get the index of an element in a collection.
	 *
	 * @param {Array<Object>} collection
	 * @param {Object} element
	 *
	 * @return {number} the index or -1 if collection or element do
	 *                  not exist or the element is not contained.
	 */
	function indexOf$1(collection, element) {

	  if (!collection || !element) {
	    return -1;
	  }

	  return collection.indexOf(element);
	}

	var Collections = /*#__PURE__*/Object.freeze({
		__proto__: null,
		remove: remove$2,
		add: add$1,
		indexOf: indexOf$1
	});

	function round(number, resolution) {
	  return Math.round(number * resolution) / resolution;
	}

	function ensurePx(number) {
	  return isNumber(number) ? number + 'px' : number;
	}

	/**
	 * Creates a HTML container element for a SVG element with
	 * the given configuration
	 *
	 * @param  {Object} options
	 * @return {HTMLElement} the container element
	 */
	function createContainer(options) {

	  options = assign({}, { width: '100%', height: '100%' }, options);

	  var container = options.container || document.body;

	  // create a <div> around the svg element with the respective size
	  // this way we can always get the correct container size
	  // (this is impossible for <svg> elements at the moment)
	  var parent = document.createElement('div');
	  parent.setAttribute('class', 'djs-container');

	  assign(parent.style, {
	    position: 'relative',
	    overflow: 'hidden',
	    width: ensurePx(options.width),
	    height: ensurePx(options.height)
	  });

	  container.appendChild(parent);

	  return parent;
	}

	function createGroup(parent, cls, childIndex) {
	  var group = create('g');
	  classes$1(group).add(cls);

	  var index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;

	  // must ensure second argument is node or _null_
	  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore
	  parent.insertBefore(group, parent.childNodes[index] || null);

	  return group;
	}

	var BASE_LAYER = 'base';


	var REQUIRED_MODEL_ATTRS = {
	  shape: [ 'x', 'y', 'width', 'height' ],
	  connection: [ 'waypoints' ]
	};

	/**
	 * The main drawing canvas.
	 *
	 * @class
	 * @constructor
	 *
	 * @emits Canvas#canvas.init
	 *
	 * @param {Object} config
	 * @param {EventBus} eventBus
	 * @param {GraphicsFactory} graphicsFactory
	 * @param {ElementRegistry} elementRegistry
	 */
	function Canvas(config, eventBus, graphicsFactory, elementRegistry) {

	  this._eventBus = eventBus;
	  this._elementRegistry = elementRegistry;
	  this._graphicsFactory = graphicsFactory;

	  this._init(config || {});
	}

	Canvas.$inject = [
	  'config.canvas',
	  'eventBus',
	  'graphicsFactory',
	  'elementRegistry'
	];


	Canvas.prototype._init = function(config) {

	  var eventBus = this._eventBus;

	  // Creates a <svg> element that is wrapped into a <div>.
	  // This way we are always able to correctly figure out the size of the svg element
	  // by querying the parent node.
	  //
	  // (It is not possible to get the size of a svg element cross browser @ 2014-04-01)
	  //
	  // <div class="djs-container" style="width: {desired-width}, height: {desired-height}">
	  //   <svg width="100%" height="100%">
	  //    ...
	  //   </svg>
	  // </div>

	  // html container
	  var container = this._container = createContainer(config);

	  var svg = this._svg = create('svg');
	  attr$1(svg, { width: '100%', height: '100%' });

	  append(container, svg);

	  var viewport = this._viewport = createGroup(svg, 'viewport');

	  this._layers = {};

	  // debounce canvas.viewbox.changed events
	  // for smoother diagram interaction
	  if (config.deferUpdate !== false) {
	    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);
	  }

	  eventBus.on('diagram.init', function() {

	    /**
	     * An event indicating that the canvas is ready to be drawn on.
	     *
	     * @memberOf Canvas
	     *
	     * @event canvas.init
	     *
	     * @type {Object}
	     * @property {SVGElement} svg the created svg element
	     * @property {SVGElement} viewport the direct parent of diagram elements and shapes
	     */
	    eventBus.fire('canvas.init', {
	      svg: svg,
	      viewport: viewport
	    });

	  }, this);

	  // reset viewbox on shape changes to
	  // recompute the viewbox
	  eventBus.on([
	    'shape.added',
	    'connection.added',
	    'shape.removed',
	    'connection.removed',
	    'elements.changed'
	  ], function() {
	    delete this._cachedViewbox;
	  }, this);

	  eventBus.on('diagram.destroy', 500, this._destroy, this);
	  eventBus.on('diagram.clear', 500, this._clear, this);
	};

	Canvas.prototype._destroy = function(emit) {
	  this._eventBus.fire('canvas.destroy', {
	    svg: this._svg,
	    viewport: this._viewport
	  });

	  var parent = this._container.parentNode;

	  if (parent) {
	    parent.removeChild(this._container);
	  }

	  delete this._svg;
	  delete this._container;
	  delete this._layers;
	  delete this._rootElement;
	  delete this._viewport;
	};

	Canvas.prototype._clear = function() {

	  var self = this;

	  var allElements = this._elementRegistry.getAll();

	  // remove all elements
	  allElements.forEach(function(element) {
	    var type = getType(element);

	    if (type === 'root') {
	      self.setRootElement(null, true);
	    } else {
	      self._removeElement(element, type);
	    }
	  });

	  // force recomputation of view box
	  delete this._cachedViewbox;
	};

	/**
	 * Returns the default layer on which
	 * all elements are drawn.
	 *
	 * @returns {SVGElement}
	 */
	Canvas.prototype.getDefaultLayer = function() {
	  return this.getLayer(BASE_LAYER, 0);
	};

	/**
	 * Returns a layer that is used to draw elements
	 * or annotations on it.
	 *
	 * Non-existing layers retrieved through this method
	 * will be created. During creation, the optional index
	 * may be used to create layers below or above existing layers.
	 * A layer with a certain index is always created above all
	 * existing layers with the same index.
	 *
	 * @param {string} name
	 * @param {number} index
	 *
	 * @returns {SVGElement}
	 */
	Canvas.prototype.getLayer = function(name, index) {

	  if (!name) {
	    throw new Error('must specify a name');
	  }

	  var layer = this._layers[name];

	  if (!layer) {
	    layer = this._layers[name] = this._createLayer(name, index);
	  }

	  // throw an error if layer creation / retrival is
	  // requested on different index
	  if (typeof index !== 'undefined' && layer.index !== index) {
	    throw new Error('layer <' + name + '> already created at index <' + index + '>');
	  }

	  return layer.group;
	};

	/**
	 * Creates a given layer and returns it.
	 *
	 * @param {string} name
	 * @param {number} [index=0]
	 *
	 * @return {Object} layer descriptor with { index, group: SVGGroup }
	 */
	Canvas.prototype._createLayer = function(name, index) {

	  if (!index) {
	    index = 0;
	  }

	  var childIndex = reduce(this._layers, function(childIndex, layer) {
	    if (index >= layer.index) {
	      childIndex++;
	    }

	    return childIndex;
	  }, 0);

	  return {
	    group: createGroup(this._viewport, 'layer-' + name, childIndex),
	    index: index
	  };

	};

	/**
	 * Returns the html element that encloses the
	 * drawing canvas.
	 *
	 * @return {DOMNode}
	 */
	Canvas.prototype.getContainer = function() {
	  return this._container;
	};


	// markers //////////////////////

	Canvas.prototype._updateMarker = function(element, marker, add) {
	  var container;

	  if (!element.id) {
	    element = this._elementRegistry.get(element);
	  }

	  // we need to access all
	  container = this._elementRegistry._elements[element.id];

	  if (!container) {
	    return;
	  }

	  forEach([ container.gfx, container.secondaryGfx ], function(gfx) {
	    if (gfx) {

	      // invoke either addClass or removeClass based on mode
	      if (add) {
	        classes$1(gfx).add(marker);
	      } else {
	        classes$1(gfx).remove(marker);
	      }
	    }
	  });

	  /**
	   * An event indicating that a marker has been updated for an element
	   *
	   * @event element.marker.update
	   * @type {Object}
	   * @property {djs.model.Element} element the shape
	   * @property {Object} gfx the graphical representation of the shape
	   * @property {string} marker
	   * @property {boolean} add true if the marker was added, false if it got removed
	   */
	  this._eventBus.fire('element.marker.update', { element: element, gfx: container.gfx, marker: marker, add: !!add });
	};


	/**
	 * Adds a marker to an element (basically a css class).
	 *
	 * Fires the element.marker.update event, making it possible to
	 * integrate extension into the marker life-cycle, too.
	 *
	 * @example
	 * canvas.addMarker('foo', 'some-marker');
	 *
	 * var fooGfx = canvas.getGraphics('foo');
	 *
	 * fooGfx; // <g class="... some-marker"> ... </g>
	 *
	 * @param {string|djs.model.Base} element
	 * @param {string} marker
	 */
	Canvas.prototype.addMarker = function(element, marker) {
	  this._updateMarker(element, marker, true);
	};


	/**
	 * Remove a marker from an element.
	 *
	 * Fires the element.marker.update event, making it possible to
	 * integrate extension into the marker life-cycle, too.
	 *
	 * @param  {string|djs.model.Base} element
	 * @param  {string} marker
	 */
	Canvas.prototype.removeMarker = function(element, marker) {
	  this._updateMarker(element, marker, false);
	};

	/**
	 * Check the existence of a marker on element.
	 *
	 * @param  {string|djs.model.Base} element
	 * @param  {string} marker
	 */
	Canvas.prototype.hasMarker = function(element, marker) {
	  if (!element.id) {
	    element = this._elementRegistry.get(element);
	  }

	  var gfx = this.getGraphics(element);

	  return classes$1(gfx).has(marker);
	};

	/**
	 * Toggles a marker on an element.
	 *
	 * Fires the element.marker.update event, making it possible to
	 * integrate extension into the marker life-cycle, too.
	 *
	 * @param  {string|djs.model.Base} element
	 * @param  {string} marker
	 */
	Canvas.prototype.toggleMarker = function(element, marker) {
	  if (this.hasMarker(element, marker)) {
	    this.removeMarker(element, marker);
	  } else {
	    this.addMarker(element, marker);
	  }
	};

	Canvas.prototype.getRootElement = function() {
	  if (!this._rootElement) {
	    this.setRootElement({ id: '__implicitroot', children: [] });
	  }

	  return this._rootElement;
	};



	// root element handling //////////////////////

	/**
	 * Sets a given element as the new root element for the canvas
	 * and returns the new root element.
	 *
	 * @param {Object|djs.model.Root} element
	 * @param {boolean} [override] whether to override the current root element, if any
	 *
	 * @return {Object|djs.model.Root} new root element
	 */
	Canvas.prototype.setRootElement = function(element, override) {

	  if (element) {
	    this._ensureValid('root', element);
	  }

	  var currentRoot = this._rootElement,
	      elementRegistry = this._elementRegistry,
	      eventBus = this._eventBus;

	  if (currentRoot) {
	    if (!override) {
	      throw new Error('rootElement already set, need to specify override');
	    }

	    // simulate element remove event sequence
	    eventBus.fire('root.remove', { element: currentRoot });
	    eventBus.fire('root.removed', { element: currentRoot });

	    elementRegistry.remove(currentRoot);
	  }

	  if (element) {
	    var gfx = this.getDefaultLayer();

	    // resemble element add event sequence
	    eventBus.fire('root.add', { element: element });

	    elementRegistry.add(element, gfx, this._svg);

	    eventBus.fire('root.added', { element: element, gfx: gfx });
	  }

	  this._rootElement = element;

	  return element;
	};



	// add functionality //////////////////////

	Canvas.prototype._ensureValid = function(type, element) {
	  if (!element.id) {
	    throw new Error('element must have an id');
	  }

	  if (this._elementRegistry.get(element.id)) {
	    throw new Error('element with id ' + element.id + ' already exists');
	  }

	  var requiredAttrs = REQUIRED_MODEL_ATTRS[type];

	  var valid = every(requiredAttrs, function(attr) {
	    return typeof element[attr] !== 'undefined';
	  });

	  if (!valid) {
	    throw new Error(
	      'must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);
	  }
	};

	Canvas.prototype._setParent = function(element, parent, parentIndex) {
	  add$1(parent.children, element, parentIndex);
	  element.parent = parent;
	};

	/**
	 * Adds an element to the canvas.
	 *
	 * This wires the parent <-> child relationship between the element and
	 * a explicitly specified parent or an implicit root element.
	 *
	 * During add it emits the events
	 *
	 *  * <{type}.add> (element, parent)
	 *  * <{type}.added> (element, gfx)
	 *
	 * Extensions may hook into these events to perform their magic.
	 *
	 * @param {string} type
	 * @param {Object|djs.model.Base} element
	 * @param {Object|djs.model.Base} [parent]
	 * @param {number} [parentIndex]
	 *
	 * @return {Object|djs.model.Base} the added element
	 */
	Canvas.prototype._addElement = function(type, element, parent, parentIndex) {

	  parent = parent || this.getRootElement();

	  var eventBus = this._eventBus,
	      graphicsFactory = this._graphicsFactory;

	  this._ensureValid(type, element);

	  eventBus.fire(type + '.add', { element: element, parent: parent });

	  this._setParent(element, parent, parentIndex);

	  // create graphics
	  var gfx = graphicsFactory.create(type, element, parentIndex);

	  this._elementRegistry.add(element, gfx);

	  // update its visual
	  graphicsFactory.update(type, element, gfx);

	  eventBus.fire(type + '.added', { element: element, gfx: gfx });

	  return element;
	};

	/**
	 * Adds a shape to the canvas
	 *
	 * @param {Object|djs.model.Shape} shape to add to the diagram
	 * @param {djs.model.Base} [parent]
	 * @param {number} [parentIndex]
	 *
	 * @return {djs.model.Shape} the added shape
	 */
	Canvas.prototype.addShape = function(shape, parent, parentIndex) {
	  return this._addElement('shape', shape, parent, parentIndex);
	};

	/**
	 * Adds a connection to the canvas
	 *
	 * @param {Object|djs.model.Connection} connection to add to the diagram
	 * @param {djs.model.Base} [parent]
	 * @param {number} [parentIndex]
	 *
	 * @return {djs.model.Connection} the added connection
	 */
	Canvas.prototype.addConnection = function(connection, parent, parentIndex) {
	  return this._addElement('connection', connection, parent, parentIndex);
	};


	/**
	 * Internal remove element
	 */
	Canvas.prototype._removeElement = function(element, type) {

	  var elementRegistry = this._elementRegistry,
	      graphicsFactory = this._graphicsFactory,
	      eventBus = this._eventBus;

	  element = elementRegistry.get(element.id || element);

	  if (!element) {

	    // element was removed already
	    return;
	  }

	  eventBus.fire(type + '.remove', { element: element });

	  graphicsFactory.remove(element);

	  // unset parent <-> child relationship
	  remove$2(element.parent && element.parent.children, element);
	  element.parent = null;

	  eventBus.fire(type + '.removed', { element: element });

	  elementRegistry.remove(element);

	  return element;
	};


	/**
	 * Removes a shape from the canvas
	 *
	 * @param {string|djs.model.Shape} shape or shape id to be removed
	 *
	 * @return {djs.model.Shape} the removed shape
	 */
	Canvas.prototype.removeShape = function(shape) {

	  /**
	   * An event indicating that a shape is about to be removed from the canvas.
	   *
	   * @memberOf Canvas
	   *
	   * @event shape.remove
	   * @type {Object}
	   * @property {djs.model.Shape} element the shape descriptor
	   * @property {Object} gfx the graphical representation of the shape
	   */

	  /**
	   * An event indicating that a shape has been removed from the canvas.
	   *
	   * @memberOf Canvas
	   *
	   * @event shape.removed
	   * @type {Object}
	   * @property {djs.model.Shape} element the shape descriptor
	   * @property {Object} gfx the graphical representation of the shape
	   */
	  return this._removeElement(shape, 'shape');
	};


	/**
	 * Removes a connection from the canvas
	 *
	 * @param {string|djs.model.Connection} connection or connection id to be removed
	 *
	 * @return {djs.model.Connection} the removed connection
	 */
	Canvas.prototype.removeConnection = function(connection) {

	  /**
	   * An event indicating that a connection is about to be removed from the canvas.
	   *
	   * @memberOf Canvas
	   *
	   * @event connection.remove
	   * @type {Object}
	   * @property {djs.model.Connection} element the connection descriptor
	   * @property {Object} gfx the graphical representation of the connection
	   */

	  /**
	   * An event indicating that a connection has been removed from the canvas.
	   *
	   * @memberOf Canvas
	   *
	   * @event connection.removed
	   * @type {Object}
	   * @property {djs.model.Connection} element the connection descriptor
	   * @property {Object} gfx the graphical representation of the connection
	   */
	  return this._removeElement(connection, 'connection');
	};


	/**
	 * Return the graphical object underlaying a certain diagram element
	 *
	 * @param {string|djs.model.Base} element descriptor of the element
	 * @param {boolean} [secondary=false] whether to return the secondary connected element
	 *
	 * @return {SVGElement}
	 */
	Canvas.prototype.getGraphics = function(element, secondary) {
	  return this._elementRegistry.getGraphics(element, secondary);
	};


	/**
	 * Perform a viewbox update via a given change function.
	 *
	 * @param {Function} changeFn
	 */
	Canvas.prototype._changeViewbox = function(changeFn) {

	  // notify others of the upcoming viewbox change
	  this._eventBus.fire('canvas.viewbox.changing');

	  // perform actual change
	  changeFn.apply(this);

	  // reset the cached viewbox so that
	  // a new get operation on viewbox or zoom
	  // triggers a viewbox re-computation
	  this._cachedViewbox = null;

	  // notify others of the change; this step
	  // may or may not be debounced
	  this._viewboxChanged();
	};

	Canvas.prototype._viewboxChanged = function() {
	  this._eventBus.fire('canvas.viewbox.changed', { viewbox: this.viewbox() });
	};


	/**
	 * Gets or sets the view box of the canvas, i.e. the
	 * area that is currently displayed.
	 *
	 * The getter may return a cached viewbox (if it is currently
	 * changing). To force a recomputation, pass `false` as the first argument.
	 *
	 * @example
	 *
	 * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })
	 *
	 * // sets the visible area of the diagram to (100|100) -> (600|100)
	 * // and and scales it according to the diagram width
	 *
	 * var viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.
	 *
	 * console.log(viewbox);
	 * // {
	 * //   inner: Dimensions,
	 * //   outer: Dimensions,
	 * //   scale,
	 * //   x, y,
	 * //   width, height
	 * // }
	 *
	 * // if the current diagram is zoomed and scrolled, you may reset it to the
	 * // default zoom via this method, too:
	 *
	 * var zoomedAndScrolledViewbox = canvas.viewbox();
	 *
	 * canvas.viewbox({
	 *   x: 0,
	 *   y: 0,
	 *   width: zoomedAndScrolledViewbox.outer.width,
	 *   height: zoomedAndScrolledViewbox.outer.height
	 * });
	 *
	 * @param  {Object} [box] the new view box to set
	 * @param  {number} box.x the top left X coordinate of the canvas visible in view box
	 * @param  {number} box.y the top left Y coordinate of the canvas visible in view box
	 * @param  {number} box.width the visible width
	 * @param  {number} box.height
	 *
	 * @return {Object} the current view box
	 */
	Canvas.prototype.viewbox = function(box) {

	  if (box === undefined && this._cachedViewbox) {
	    return this._cachedViewbox;
	  }

	  var viewport = this._viewport,
	      innerBox,
	      outerBox = this.getSize(),
	      matrix,
	      transform$1,
	      scale,
	      x, y;

	  if (!box) {

	    // compute the inner box based on the
	    // diagrams default layer. This allows us to exclude
	    // external components, such as overlays
	    innerBox = this.getDefaultLayer().getBBox();

	    transform$1 = transform(viewport);
	    matrix = transform$1 ? transform$1.matrix : createMatrix();
	    scale = round(matrix.a, 1000);

	    x = round(-matrix.e || 0, 1000);
	    y = round(-matrix.f || 0, 1000);

	    box = this._cachedViewbox = {
	      x: x ? x / scale : 0,
	      y: y ? y / scale : 0,
	      width: outerBox.width / scale,
	      height: outerBox.height / scale,
	      scale: scale,
	      inner: {
	        width: innerBox.width,
	        height: innerBox.height,
	        x: innerBox.x,
	        y: innerBox.y
	      },
	      outer: outerBox
	    };

	    return box;
	  } else {

	    this._changeViewbox(function() {
	      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);

	      var matrix = this._svg.createSVGMatrix()
	        .scale(scale)
	        .translate(-box.x, -box.y);

	      transform(viewport, matrix);
	    });
	  }

	  return box;
	};


	/**
	 * Gets or sets the scroll of the canvas.
	 *
	 * @param {Object} [delta] the new scroll to apply.
	 *
	 * @param {number} [delta.dx]
	 * @param {number} [delta.dy]
	 */
	Canvas.prototype.scroll = function(delta) {

	  var node = this._viewport;
	  var matrix = node.getCTM();

	  if (delta) {
	    this._changeViewbox(function() {
	      delta = assign({ dx: 0, dy: 0 }, delta || {});

	      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);

	      setCTM(node, matrix);
	    });
	  }

	  return { x: matrix.e, y: matrix.f };
	};


	/**
	 * Gets or sets the current zoom of the canvas, optionally zooming
	 * to the specified position.
	 *
	 * The getter may return a cached zoom level. Call it with `false` as
	 * the first argument to force recomputation of the current level.
	 *
	 * @param {string|number} [newScale] the new zoom level, either a number, i.e. 0.9,
	 *                                   or `fit-viewport` to adjust the size to fit the current viewport
	 * @param {string|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null
	 *
	 * @return {number} the current scale
	 */
	Canvas.prototype.zoom = function(newScale, center) {

	  if (!newScale) {
	    return this.viewbox(newScale).scale;
	  }

	  if (newScale === 'fit-viewport') {
	    return this._fitViewport(center);
	  }

	  var outer,
	      matrix;

	  this._changeViewbox(function() {

	    if (typeof center !== 'object') {
	      outer = this.viewbox().outer;

	      center = {
	        x: outer.width / 2,
	        y: outer.height / 2
	      };
	    }

	    matrix = this._setZoom(newScale, center);
	  });

	  return round(matrix.a, 1000);
	};

	function setCTM(node, m) {
	  var mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';
	  node.setAttribute('transform', mstr);
	}

	Canvas.prototype._fitViewport = function(center) {

	  var vbox = this.viewbox(),
	      outer = vbox.outer,
	      inner = vbox.inner,
	      newScale,
	      newViewbox;

	  // display the complete diagram without zooming in.
	  // instead of relying on internal zoom, we perform a
	  // hard reset on the canvas viewbox to realize this
	  //
	  // if diagram does not need to be zoomed in, we focus it around
	  // the diagram origin instead

	  if (inner.x >= 0 &&
	      inner.y >= 0 &&
	      inner.x + inner.width <= outer.width &&
	      inner.y + inner.height <= outer.height &&
	      !center) {

	    newViewbox = {
	      x: 0,
	      y: 0,
	      width: Math.max(inner.width + inner.x, outer.width),
	      height: Math.max(inner.height + inner.y, outer.height)
	    };
	  } else {

	    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);
	    newViewbox = {
	      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),
	      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),
	      width: outer.width / newScale,
	      height: outer.height / newScale
	    };
	  }

	  this.viewbox(newViewbox);

	  return this.viewbox(false).scale;
	};


	Canvas.prototype._setZoom = function(scale, center) {

	  var svg = this._svg,
	      viewport = this._viewport;

	  var matrix = svg.createSVGMatrix();
	  var point = svg.createSVGPoint();

	  var centerPoint,
	      originalPoint,
	      currentMatrix,
	      scaleMatrix,
	      newMatrix;

	  currentMatrix = viewport.getCTM();

	  var currentScale = currentMatrix.a;

	  if (center) {
	    centerPoint = assign(point, center);

	    // revert applied viewport transformations
	    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());

	    // create scale matrix
	    scaleMatrix = matrix
	      .translate(originalPoint.x, originalPoint.y)
	      .scale(1 / currentScale * scale)
	      .translate(-originalPoint.x, -originalPoint.y);

	    newMatrix = currentMatrix.multiply(scaleMatrix);
	  } else {
	    newMatrix = matrix.scale(scale);
	  }

	  setCTM(this._viewport, newMatrix);

	  return newMatrix;
	};


	/**
	 * Returns the size of the canvas
	 *
	 * @return {Dimensions}
	 */
	Canvas.prototype.getSize = function() {
	  return {
	    width: this._container.clientWidth,
	    height: this._container.clientHeight
	  };
	};


	/**
	 * Return the absolute bounding box for the given element
	 *
	 * The absolute bounding box may be used to display overlays in the
	 * callers (browser) coordinate system rather than the zoomed in/out
	 * canvas coordinates.
	 *
	 * @param  {ElementDescriptor} element
	 * @return {Bounds} the absolute bounding box
	 */
	Canvas.prototype.getAbsoluteBBox = function(element) {
	  var vbox = this.viewbox();
	  var bbox;

	  // connection
	  // use svg bbox
	  if (element.waypoints) {
	    var gfx = this.getGraphics(element);

	    bbox = gfx.getBBox();
	  }

	  // shapes
	  // use data
	  else {
	    bbox = element;
	  }

	  var x = bbox.x * vbox.scale - vbox.x * vbox.scale;
	  var y = bbox.y * vbox.scale - vbox.y * vbox.scale;

	  var width = bbox.width * vbox.scale;
	  var height = bbox.height * vbox.scale;

	  return {
	    x: x,
	    y: y,
	    width: width,
	    height: height
	  };
	};

	/**
	 * Fires an event in order other modules can react to the
	 * canvas resizing
	 */
	Canvas.prototype.resized = function() {

	  // force recomputation of view box
	  delete this._cachedViewbox;

	  this._eventBus.fire('canvas.resized');
	};

	var ELEMENT_ID = 'data-element-id';


	/**
	 * @class
	 *
	 * A registry that keeps track of all shapes in the diagram.
	 */
	function ElementRegistry(eventBus) {
	  this._elements = {};

	  this._eventBus = eventBus;
	}

	ElementRegistry.$inject = [ 'eventBus' ];

	/**
	 * Register a pair of (element, gfx, (secondaryGfx)).
	 *
	 * @param {djs.model.Base} element
	 * @param {SVGElement} gfx
	 * @param {SVGElement} [secondaryGfx] optional other element to register, too
	 */
	ElementRegistry.prototype.add = function(element, gfx, secondaryGfx) {

	  var id = element.id;

	  this._validateId(id);

	  // associate dom node with element
	  attr$1(gfx, ELEMENT_ID, id);

	  if (secondaryGfx) {
	    attr$1(secondaryGfx, ELEMENT_ID, id);
	  }

	  this._elements[id] = { element: element, gfx: gfx, secondaryGfx: secondaryGfx };
	};

	/**
	 * Removes an element from the registry.
	 *
	 * @param {djs.model.Base} element
	 */
	ElementRegistry.prototype.remove = function(element) {
	  var elements = this._elements,
	      id = element.id || element,
	      container = id && elements[id];

	  if (container) {

	    // unset element id on gfx
	    attr$1(container.gfx, ELEMENT_ID, '');

	    if (container.secondaryGfx) {
	      attr$1(container.secondaryGfx, ELEMENT_ID, '');
	    }

	    delete elements[id];
	  }
	};

	/**
	 * Update the id of an element
	 *
	 * @param {djs.model.Base} element
	 * @param {string} newId
	 */
	ElementRegistry.prototype.updateId = function(element, newId) {

	  this._validateId(newId);

	  if (typeof element === 'string') {
	    element = this.get(element);
	  }

	  this._eventBus.fire('element.updateId', {
	    element: element,
	    newId: newId
	  });

	  var gfx = this.getGraphics(element),
	      secondaryGfx = this.getGraphics(element, true);

	  this.remove(element);

	  element.id = newId;

	  this.add(element, gfx, secondaryGfx);
	};

	/**
	 * Return the model element for a given id or graphics.
	 *
	 * @example
	 *
	 * elementRegistry.get('SomeElementId_1');
	 * elementRegistry.get(gfx);
	 *
	 *
	 * @param {string|SVGElement} filter for selecting the element
	 *
	 * @return {djs.model.Base}
	 */
	ElementRegistry.prototype.get = function(filter) {
	  var id;

	  if (typeof filter === 'string') {
	    id = filter;
	  } else {
	    id = filter && attr$1(filter, ELEMENT_ID);
	  }

	  var container = this._elements[id];
	  return container && container.element;
	};

	/**
	 * Return all elements that match a given filter function.
	 *
	 * @param {Function} fn
	 *
	 * @return {Array<djs.model.Base>}
	 */
	ElementRegistry.prototype.filter = function(fn) {

	  var filtered = [];

	  this.forEach(function(element, gfx) {
	    if (fn(element, gfx)) {
	      filtered.push(element);
	    }
	  });

	  return filtered;
	};

	/**
	 * Return the first element that satisfies the provided testing function.
	 *
	 * @param {Function} fn
	 *
	 * @return {djs.model.Base}
	 */
	ElementRegistry.prototype.find = function(fn) {
	  var map = this._elements,
	      keys = Object.keys(map);

	  for (var i = 0; i < keys.length; i++) {
	    var id = keys[i],
	        container = map[id],
	        element = container.element,
	        gfx = container.gfx;

	    if (fn(element, gfx)) {
	      return element;
	    }
	  }
	};

	/**
	 * Return all rendered model elements.
	 *
	 * @return {Array<djs.model.Base>}
	 */
	ElementRegistry.prototype.getAll = function() {
	  return this.filter(function(e) { return e; });
	};

	/**
	 * Iterate over all diagram elements.
	 *
	 * @param {Function} fn
	 */
	ElementRegistry.prototype.forEach = function(fn) {

	  var map = this._elements;

	  Object.keys(map).forEach(function(id) {
	    var container = map[id],
	        element = container.element,
	        gfx = container.gfx;

	    return fn(element, gfx);
	  });
	};

	/**
	 * Return the graphical representation of an element or its id.
	 *
	 * @example
	 * elementRegistry.getGraphics('SomeElementId_1');
	 * elementRegistry.getGraphics(rootElement); // <g ...>
	 *
	 * elementRegistry.getGraphics(rootElement, true); // <svg ...>
	 *
	 *
	 * @param {string|djs.model.Base} filter
	 * @param {boolean} [secondary=false] whether to return the secondary connected element
	 *
	 * @return {SVGElement}
	 */
	ElementRegistry.prototype.getGraphics = function(filter, secondary) {
	  var id = filter.id || filter;

	  var container = this._elements[id];
	  return container && (secondary ? container.secondaryGfx : container.gfx);
	};

	/**
	 * Validate the suitability of the given id and signals a problem
	 * with an exception.
	 *
	 * @param {string} id
	 *
	 * @throws {Error} if id is empty or already assigned
	 */
	ElementRegistry.prototype._validateId = function(id) {
	  if (!id) {
	    throw new Error('element must have an id');
	  }

	  if (this._elements[id]) {
	    throw new Error('element with id ' + id + ' already added');
	  }
	};

	/**
	 * An empty collection stub. Use {@link RefsCollection.extend} to extend a
	 * collection with ref semantics.
	 *
	 * @class RefsCollection
	 */

	/**
	 * Extends a collection with {@link Refs} aware methods
	 *
	 * @memberof RefsCollection
	 * @static
	 *
	 * @param  {Array<Object>} collection
	 * @param  {Refs} refs instance
	 * @param  {Object} property represented by the collection
	 * @param  {Object} target object the collection is attached to
	 *
	 * @return {RefsCollection<Object>} the extended array
	 */
	function extend$1(collection, refs, property, target) {

	  var inverseProperty = property.inverse;

	  /**
	   * Removes the given element from the array and returns it.
	   *
	   * @method RefsCollection#remove
	   *
	   * @param {Object} element the element to remove
	   */
	  Object.defineProperty(collection, 'remove', {
	    value: function(element) {
	      var idx = this.indexOf(element);
	      if (idx !== -1) {
	        this.splice(idx, 1);

	        // unset inverse
	        refs.unset(element, inverseProperty, target);
	      }

	      return element;
	    }
	  });

	  /**
	   * Returns true if the collection contains the given element
	   *
	   * @method RefsCollection#contains
	   *
	   * @param {Object} element the element to check for
	   */
	  Object.defineProperty(collection, 'contains', {
	    value: function(element) {
	      return this.indexOf(element) !== -1;
	    }
	  });

	  /**
	   * Adds an element to the array, unless it exists already (set semantics).
	   *
	   * @method RefsCollection#add
	   *
	   * @param {Object} element the element to add
	   * @param {Number} optional index to add element to
	   *                 (possibly moving other elements around)
	   */
	  Object.defineProperty(collection, 'add', {
	    value: function(element, idx) {

	      var currentIdx = this.indexOf(element);

	      if (typeof idx === 'undefined') {

	        if (currentIdx !== -1) {
	          // element already in collection (!)
	          return;
	        }

	        // add to end of array, as no idx is specified
	        idx = this.length;
	      }

	      // handle already in collection
	      if (currentIdx !== -1) {

	        // remove element from currentIdx
	        this.splice(currentIdx, 1);
	      }

	      // add element at idx
	      this.splice(idx, 0, element);

	      if (currentIdx === -1) {
	        // set inverse, unless element was
	        // in collection already
	        refs.set(element, inverseProperty, target);
	      }
	    }
	  });

	  // a simple marker, identifying this element
	  // as being a refs collection
	  Object.defineProperty(collection, '__refs_collection', {
	    value: true
	  });

	  return collection;
	}


	function isExtended(collection) {
	  return collection.__refs_collection === true;
	}

	var extend_1 = extend$1;

	var isExtended_1 = isExtended;

	var collection = {
		extend: extend_1,
		isExtended: isExtended_1
	};

	function hasOwnProperty(e, property) {
	  return Object.prototype.hasOwnProperty.call(e, property.name || property);
	}

	function defineCollectionProperty(ref, property, target) {

	  var collection$1 = collection.extend(target[property.name] || [], ref, property, target);

	  Object.defineProperty(target, property.name, {
	    enumerable: property.enumerable,
	    value: collection$1
	  });

	  if (collection$1.length) {

	    collection$1.forEach(function(o) {
	      ref.set(o, property.inverse, target);
	    });
	  }
	}


	function defineProperty(ref, property, target) {

	  var inverseProperty = property.inverse;

	  var _value = target[property.name];

	  Object.defineProperty(target, property.name, {
	    configurable: property.configurable,
	    enumerable: property.enumerable,

	    get: function() {
	      return _value;
	    },

	    set: function(value) {

	      // return if we already performed all changes
	      if (value === _value) {
	        return;
	      }

	      var old = _value;

	      // temporary set null
	      _value = null;

	      if (old) {
	        ref.unset(old, inverseProperty, target);
	      }

	      // set new value
	      _value = value;

	      // set inverse value
	      ref.set(_value, inverseProperty, target);
	    }
	  });

	}

	/**
	 * Creates a new references object defining two inversly related
	 * attribute descriptors a and b.
	 *
	 * <p>
	 *   When bound to an object using {@link Refs#bind} the references
	 *   get activated and ensure that add and remove operations are applied
	 *   reversely, too.
	 * </p>
	 *
	 * <p>
	 *   For attributes represented as collections {@link Refs} provides the
	 *   {@link RefsCollection#add}, {@link RefsCollection#remove} and {@link RefsCollection#contains} extensions
	 *   that must be used to properly hook into the inverse change mechanism.
	 * </p>
	 *
	 * @class Refs
	 *
	 * @classdesc A bi-directional reference between two attributes.
	 *
	 * @param {Refs.AttributeDescriptor} a property descriptor
	 * @param {Refs.AttributeDescriptor} b property descriptor
	 *
	 * @example
	 *
	 * var refs = Refs({ name: 'wheels', collection: true, enumerable: true }, { name: 'car' });
	 *
	 * var car = { name: 'toyota' };
	 * var wheels = [{ pos: 'front-left' }, { pos: 'front-right' }];
	 *
	 * refs.bind(car, 'wheels');
	 *
	 * car.wheels // []
	 * car.wheels.add(wheels[0]);
	 * car.wheels.add(wheels[1]);
	 *
	 * car.wheels // [{ pos: 'front-left' }, { pos: 'front-right' }]
	 *
	 * wheels[0].car // { name: 'toyota' };
	 * car.wheels.remove(wheels[0]);
	 *
	 * wheels[0].car // undefined
	 */
	function Refs(a, b) {

	  if (!(this instanceof Refs)) {
	    return new Refs(a, b);
	  }

	  // link
	  a.inverse = b;
	  b.inverse = a;

	  this.props = {};
	  this.props[a.name] = a;
	  this.props[b.name] = b;
	}

	/**
	 * Binds one side of a bi-directional reference to a
	 * target object.
	 *
	 * @memberOf Refs
	 *
	 * @param  {Object} target
	 * @param  {String} property
	 */
	Refs.prototype.bind = function(target, property) {
	  if (typeof property === 'string') {
	    if (!this.props[property]) {
	      throw new Error('no property <' + property + '> in ref');
	    }
	    property = this.props[property];
	  }

	  if (property.collection) {
	    defineCollectionProperty(this, property, target);
	  } else {
	    defineProperty(this, property, target);
	  }
	};

	Refs.prototype.ensureRefsCollection = function(target, property) {

	  var collection$1 = target[property.name];

	  if (!collection.isExtended(collection$1)) {
	    defineCollectionProperty(this, property, target);
	  }

	  return collection$1;
	};

	Refs.prototype.ensureBound = function(target, property) {
	  if (!hasOwnProperty(target, property)) {
	    this.bind(target, property);
	  }
	};

	Refs.prototype.unset = function(target, property, value) {

	  if (target) {
	    this.ensureBound(target, property);

	    if (property.collection) {
	      this.ensureRefsCollection(target, property).remove(value);
	    } else {
	      target[property.name] = undefined;
	    }
	  }
	};

	Refs.prototype.set = function(target, property, value) {

	  if (target) {
	    this.ensureBound(target, property);

	    if (property.collection) {
	      this.ensureRefsCollection(target, property).add(value);
	    } else {
	      target[property.name] = value;
	    }
	  }
	};

	var refs = Refs;

	var objectRefs = refs;

	var Collection = collection;
	objectRefs.Collection = Collection;

	var parentRefs = new objectRefs({ name: 'children', enumerable: true, collection: true }, { name: 'parent' }),
	    labelRefs = new objectRefs({ name: 'labels', enumerable: true, collection: true }, { name: 'labelTarget' }),
	    attacherRefs = new objectRefs({ name: 'attachers', collection: true }, { name: 'host' }),
	    outgoingRefs = new objectRefs({ name: 'outgoing', collection: true }, { name: 'source' }),
	    incomingRefs = new objectRefs({ name: 'incoming', collection: true }, { name: 'target' });

	/**
	 * @namespace djs.model
	 */

	/**
	 * @memberOf djs.model
	 */

	/**
	 * The basic graphical representation
	 *
	 * @class
	 *
	 * @abstract
	 */
	function Base() {

	  /**
	   * The object that backs up the shape
	   *
	   * @name Base#businessObject
	   * @type Object
	   */
	  Object.defineProperty(this, 'businessObject', {
	    writable: true
	  });


	  /**
	   * Single label support, will mapped to multi label array
	   *
	   * @name Base#label
	   * @type Object
	   */
	  Object.defineProperty(this, 'label', {
	    get: function() {
	      return this.labels[0];
	    },
	    set: function(newLabel) {

	      var label = this.label,
	          labels = this.labels;

	      if (!newLabel && label) {
	        labels.remove(label);
	      } else {
	        labels.add(newLabel, 0);
	      }
	    }
	  });

	  /**
	   * The parent shape
	   *
	   * @name Base#parent
	   * @type Shape
	   */
	  parentRefs.bind(this, 'parent');

	  /**
	   * The list of labels
	   *
	   * @name Base#labels
	   * @type Label
	   */
	  labelRefs.bind(this, 'labels');

	  /**
	   * The list of outgoing connections
	   *
	   * @name Base#outgoing
	   * @type Array<Connection>
	   */
	  outgoingRefs.bind(this, 'outgoing');

	  /**
	   * The list of incoming connections
	   *
	   * @name Base#incoming
	   * @type Array<Connection>
	   */
	  incomingRefs.bind(this, 'incoming');
	}


	/**
	 * A graphical object
	 *
	 * @class
	 * @constructor
	 *
	 * @extends Base
	 */
	function Shape() {
	  Base.call(this);

	  /**
	   * Indicates frame shapes
	   *
	   * @name Shape#isFrame
	   * @type boolean
	   */

	  /**
	   * The list of children
	   *
	   * @name Shape#children
	   * @type Array<Base>
	   */
	  parentRefs.bind(this, 'children');

	  /**
	   * @name Shape#host
	   * @type Shape
	   */
	  attacherRefs.bind(this, 'host');

	  /**
	   * @name Shape#attachers
	   * @type Shape
	   */
	  attacherRefs.bind(this, 'attachers');
	}

	inherits_browser(Shape, Base);


	/**
	 * A root graphical object
	 *
	 * @class
	 * @constructor
	 *
	 * @extends Shape
	 */
	function Root() {
	  Shape.call(this);
	}

	inherits_browser(Root, Shape);


	/**
	 * A label for an element
	 *
	 * @class
	 * @constructor
	 *
	 * @extends Shape
	 */
	function Label() {
	  Shape.call(this);

	  /**
	   * The labeled element
	   *
	   * @name Label#labelTarget
	   * @type Base
	   */
	  labelRefs.bind(this, 'labelTarget');
	}

	inherits_browser(Label, Shape);


	/**
	 * A connection between two elements
	 *
	 * @class
	 * @constructor
	 *
	 * @extends Base
	 */
	function Connection() {
	  Base.call(this);

	  /**
	   * The element this connection originates from
	   *
	   * @name Connection#source
	   * @type Base
	   */
	  outgoingRefs.bind(this, 'source');

	  /**
	   * The element this connection points to
	   *
	   * @name Connection#target
	   * @type Base
	   */
	  incomingRefs.bind(this, 'target');
	}

	inherits_browser(Connection, Base);


	var types = {
	  connection: Connection,
	  shape: Shape,
	  label: Label,
	  root: Root
	};

	/**
	 * Creates a new model element of the specified type
	 *
	 * @method create
	 *
	 * @example
	 *
	 * var shape1 = Model.create('shape', { x: 10, y: 10, width: 100, height: 100 });
	 * var shape2 = Model.create('shape', { x: 210, y: 210, width: 100, height: 100 });
	 *
	 * var connection = Model.create('connection', { waypoints: [ { x: 110, y: 55 }, {x: 210, y: 55 } ] });
	 *
	 * @param  {string} type lower-cased model name
	 * @param  {Object} attrs attributes to initialize the new model instance with
	 *
	 * @return {Base} the new model instance
	 */
	function create$1(type, attrs) {
	  var Type = types[type];
	  if (!Type) {
	    throw new Error('unknown type: <' + type + '>');
	  }
	  return assign(new Type(), attrs);
	}

	/**
	 * A factory for diagram-js shapes
	 */
	function ElementFactory() {
	  this._uid = 12;
	}


	ElementFactory.prototype.createRoot = function(attrs) {
	  return this.create('root', attrs);
	};

	ElementFactory.prototype.createLabel = function(attrs) {
	  return this.create('label', attrs);
	};

	ElementFactory.prototype.createShape = function(attrs) {
	  return this.create('shape', attrs);
	};

	ElementFactory.prototype.createConnection = function(attrs) {
	  return this.create('connection', attrs);
	};

	/**
	 * Create a model element with the given type and
	 * a number of pre-set attributes.
	 *
	 * @param  {string} type
	 * @param  {Object} attrs
	 * @return {djs.model.Base} the newly created model instance
	 */
	ElementFactory.prototype.create = function(type, attrs) {

	  attrs = assign({}, attrs || {});

	  if (!attrs.id) {
	    attrs.id = type + '_' + (this._uid++);
	  }

	  return create$1(type, attrs);
	};

	var FN_REF = '__fn';

	var DEFAULT_PRIORITY = 1000;

	var slice$1 = Array.prototype.slice;

	/**
	 * A general purpose event bus.
	 *
	 * This component is used to communicate across a diagram instance.
	 * Other parts of a diagram can use it to listen to and broadcast events.
	 *
	 *
	 * ## Registering for Events
	 *
	 * The event bus provides the {@link EventBus#on} and {@link EventBus#once}
	 * methods to register for events. {@link EventBus#off} can be used to
	 * remove event registrations. Listeners receive an instance of {@link Event}
	 * as the first argument. It allows them to hook into the event execution.
	 *
	 * ```javascript
	 *
	 * // listen for event
	 * eventBus.on('foo', function(event) {
	 *
	 *   // access event type
	 *   event.type; // 'foo'
	 *
	 *   // stop propagation to other listeners
	 *   event.stopPropagation();
	 *
	 *   // prevent event default
	 *   event.preventDefault();
	 * });
	 *
	 * // listen for event with custom payload
	 * eventBus.on('bar', function(event, payload) {
	 *   console.log(payload);
	 * });
	 *
	 * // listen for event returning value
	 * eventBus.on('foobar', function(event) {
	 *
	 *   // stop event propagation + prevent default
	 *   return false;
	 *
	 *   // stop event propagation + return custom result
	 *   return {
	 *     complex: 'listening result'
	 *   };
	 * });
	 *
	 *
	 * // listen with custom priority (default=1000, higher is better)
	 * eventBus.on('priorityfoo', 1500, function(event) {
	 *   console.log('invoked first!');
	 * });
	 *
	 *
	 * // listen for event and pass the context (`this`)
	 * eventBus.on('foobar', function(event) {
	 *   this.foo();
	 * }, this);
	 * ```
	 *
	 *
	 * ## Emitting Events
	 *
	 * Events can be emitted via the event bus using {@link EventBus#fire}.
	 *
	 * ```javascript
	 *
	 * // false indicates that the default action
	 * // was prevented by listeners
	 * if (eventBus.fire('foo') === false) {
	 *   console.log('default has been prevented!');
	 * };
	 *
	 *
	 * // custom args + return value listener
	 * eventBus.on('sum', function(event, a, b) {
	 *   return a + b;
	 * });
	 *
	 * // you can pass custom arguments + retrieve result values.
	 * var sum = eventBus.fire('sum', 1, 2);
	 * console.log(sum); // 3
	 * ```
	 */
	function EventBus() {
	  this._listeners = {};

	  // cleanup on destroy on lowest priority to allow
	  // message passing until the bitter end
	  this.on('diagram.destroy', 1, this._destroy, this);
	}


	/**
	 * Register an event listener for events with the given name.
	 *
	 * The callback will be invoked with `event, ...additionalArguments`
	 * that have been passed to {@link EventBus#fire}.
	 *
	 * Returning false from a listener will prevent the events default action
	 * (if any is specified). To stop an event from being processed further in
	 * other listeners execute {@link Event#stopPropagation}.
	 *
	 * Returning anything but `undefined` from a listener will stop the listener propagation.
	 *
	 * @param {string|Array<string>} events
	 * @param {number} [priority=1000] the priority in which this listener is called, larger is higher
	 * @param {Function} callback
	 * @param {Object} [that] Pass context (`this`) to the callback
	 */
	EventBus.prototype.on = function(events, priority, callback, that) {

	  events = isArray(events) ? events : [ events ];

	  if (isFunction(priority)) {
	    that = callback;
	    callback = priority;
	    priority = DEFAULT_PRIORITY;
	  }

	  if (!isNumber(priority)) {
	    throw new Error('priority must be a number');
	  }

	  var actualCallback = callback;

	  if (that) {
	    actualCallback = bind(callback, that);

	    // make sure we remember and are able to remove
	    // bound callbacks via {@link #off} using the original
	    // callback
	    actualCallback[FN_REF] = callback[FN_REF] || callback;
	  }

	  var self = this;

	  events.forEach(function(e) {
	    self._addListener(e, {
	      priority: priority,
	      callback: actualCallback,
	      next: null
	    });
	  });
	};


	/**
	 * Register an event listener that is executed only once.
	 *
	 * @param {string} event the event name to register for
	 * @param {number} [priority=1000] the priority in which this listener is called, larger is higher
	 * @param {Function} callback the callback to execute
	 * @param {Object} [that] Pass context (`this`) to the callback
	 */
	EventBus.prototype.once = function(event, priority, callback, that) {
	  var self = this;

	  if (isFunction(priority)) {
	    that = callback;
	    callback = priority;
	    priority = DEFAULT_PRIORITY;
	  }

	  if (!isNumber(priority)) {
	    throw new Error('priority must be a number');
	  }

	  function wrappedCallback() {
	    wrappedCallback.__isTomb = true;

	    var result = callback.apply(that, arguments);

	    self.off(event, wrappedCallback);

	    return result;
	  }

	  // make sure we remember and are able to remove
	  // bound callbacks via {@link #off} using the original
	  // callback
	  wrappedCallback[FN_REF] = callback;

	  this.on(event, priority, wrappedCallback);
	};


	/**
	 * Removes event listeners by event and callback.
	 *
	 * If no callback is given, all listeners for a given event name are being removed.
	 *
	 * @param {string|Array<string>} events
	 * @param {Function} [callback]
	 */
	EventBus.prototype.off = function(events, callback) {

	  events = isArray(events) ? events : [ events ];

	  var self = this;

	  events.forEach(function(event) {
	    self._removeListener(event, callback);
	  });

	};


	/**
	 * Create an EventBus event.
	 *
	 * @param {Object} data
	 *
	 * @return {Object} event, recognized by the eventBus
	 */
	EventBus.prototype.createEvent = function(data) {
	  var event = new InternalEvent();

	  event.init(data);

	  return event;
	};


	/**
	 * Fires a named event.
	 *
	 * @example
	 *
	 * // fire event by name
	 * events.fire('foo');
	 *
	 * // fire event object with nested type
	 * var event = { type: 'foo' };
	 * events.fire(event);
	 *
	 * // fire event with explicit type
	 * var event = { x: 10, y: 20 };
	 * events.fire('element.moved', event);
	 *
	 * // pass additional arguments to the event
	 * events.on('foo', function(event, bar) {
	 *   alert(bar);
	 * });
	 *
	 * events.fire({ type: 'foo' }, 'I am bar!');
	 *
	 * @param {string} [name] the optional event name
	 * @param {Object} [event] the event object
	 * @param {...Object} additional arguments to be passed to the callback functions
	 *
	 * @return {boolean} the events return value, if specified or false if the
	 *                   default action was prevented by listeners
	 */
	EventBus.prototype.fire = function(type, data) {
	  var event,
	      firstListener,
	      returnValue,
	      args;

	  args = slice$1.call(arguments);

	  if (typeof type === 'object') {
	    data = type;
	    type = data.type;
	  }

	  if (!type) {
	    throw new Error('no event type specified');
	  }

	  firstListener = this._listeners[type];

	  if (!firstListener) {
	    return;
	  }

	  // we make sure we fire instances of our home made
	  // events here. We wrap them only once, though
	  if (data instanceof InternalEvent) {

	    // we are fine, we alread have an event
	    event = data;
	  } else {
	    event = this.createEvent(data);
	  }

	  // ensure we pass the event as the first parameter
	  args[0] = event;

	  // original event type (in case we delegate)
	  var originalType = event.type;

	  // update event type before delegation
	  if (type !== originalType) {
	    event.type = type;
	  }

	  try {
	    returnValue = this._invokeListeners(event, args, firstListener);
	  } finally {

	    // reset event type after delegation
	    if (type !== originalType) {
	      event.type = originalType;
	    }
	  }

	  // set the return value to false if the event default
	  // got prevented and no other return value exists
	  if (returnValue === undefined && event.defaultPrevented) {
	    returnValue = false;
	  }

	  return returnValue;
	};


	EventBus.prototype.handleError = function(error) {
	  return this.fire('error', { error: error }) === false;
	};


	EventBus.prototype._destroy = function() {
	  this._listeners = {};
	};

	EventBus.prototype._invokeListeners = function(event, args, listener) {

	  var returnValue;

	  while (listener) {

	    // handle stopped propagation
	    if (event.cancelBubble) {
	      break;
	    }

	    returnValue = this._invokeListener(event, args, listener);

	    listener = listener.next;
	  }

	  return returnValue;
	};

	EventBus.prototype._invokeListener = function(event, args, listener) {

	  var returnValue;

	  if (listener.callback.__isTomb) {
	    return returnValue;
	  }

	  try {

	    // returning false prevents the default action
	    returnValue = invokeFunction(listener.callback, args);

	    // stop propagation on return value
	    if (returnValue !== undefined) {
	      event.returnValue = returnValue;
	      event.stopPropagation();
	    }

	    // prevent default on return false
	    if (returnValue === false) {
	      event.preventDefault();
	    }
	  } catch (e) {
	    if (!this.handleError(e)) {
	      console.error('unhandled error in event listener');
	      console.error(e.stack);

	      throw e;
	    }
	  }

	  return returnValue;
	};

	/*
	 * Add new listener with a certain priority to the list
	 * of listeners (for the given event).
	 *
	 * The semantics of listener registration / listener execution are
	 * first register, first serve: New listeners will always be inserted
	 * after existing listeners with the same priority.
	 *
	 * Example: Inserting two listeners with priority 1000 and 1300
	 *
	 *    * before: [ 1500, 1500, 1000, 1000 ]
	 *    * after: [ 1500, 1500, (new=1300), 1000, 1000, (new=1000) ]
	 *
	 * @param {string} event
	 * @param {Object} listener { priority, callback }
	 */
	EventBus.prototype._addListener = function(event, newListener) {

	  var listener = this._getListeners(event),
	      previousListener;

	  // no prior listeners
	  if (!listener) {
	    this._setListeners(event, newListener);

	    return;
	  }

	  // ensure we order listeners by priority from
	  // 0 (high) to n > 0 (low)
	  while (listener) {

	    if (listener.priority < newListener.priority) {

	      newListener.next = listener;

	      if (previousListener) {
	        previousListener.next = newListener;
	      } else {
	        this._setListeners(event, newListener);
	      }

	      return;
	    }

	    previousListener = listener;
	    listener = listener.next;
	  }

	  // add new listener to back
	  previousListener.next = newListener;
	};


	EventBus.prototype._getListeners = function(name) {
	  return this._listeners[name];
	};

	EventBus.prototype._setListeners = function(name, listener) {
	  this._listeners[name] = listener;
	};

	EventBus.prototype._removeListener = function(event, callback) {

	  var listener = this._getListeners(event),
	      nextListener,
	      previousListener,
	      listenerCallback;

	  if (!callback) {

	    // clear listeners
	    this._setListeners(event, null);

	    return;
	  }

	  while (listener) {

	    nextListener = listener.next;

	    listenerCallback = listener.callback;

	    if (listenerCallback === callback || listenerCallback[FN_REF] === callback) {
	      if (previousListener) {
	        previousListener.next = nextListener;
	      } else {

	        // new first listener
	        this._setListeners(event, nextListener);
	      }
	    }

	    previousListener = listener;
	    listener = nextListener;
	  }
	};

	/**
	 * A event that is emitted via the event bus.
	 */
	function InternalEvent() { }

	InternalEvent.prototype.stopPropagation = function() {
	  this.cancelBubble = true;
	};

	InternalEvent.prototype.preventDefault = function() {
	  this.defaultPrevented = true;
	};

	InternalEvent.prototype.init = function(data) {
	  assign(this, data || {});
	};


	/**
	 * Invoke function. Be fast...
	 *
	 * @param {Function} fn
	 * @param {Array<Object>} args
	 *
	 * @return {Any}
	 */
	function invokeFunction(fn, args) {
	  return fn.apply(null, args);
	}

	/**
	 * SVGs for elements are generated by the {@link GraphicsFactory}.
	 *
	 * This utility gives quick access to the important semantic
	 * parts of an element.
	 */

	/**
	 * Returns the visual part of a diagram element
	 *
	 * @param {Snap<SVGElement>} gfx
	 *
	 * @return {Snap<SVGElement>}
	 */
	function getVisual(gfx) {
	  return gfx.childNodes[0];
	}

	/**
	 * Returns the children for a given diagram element.
	 *
	 * @param {Snap<SVGElement>} gfx
	 * @return {Snap<SVGElement>}
	 */
	function getChildren(gfx) {
	  return gfx.parentNode.childNodes[1];
	}

	/**
	 * @param {<SVGElement>} element
	 * @param {number} x
	 * @param {number} y
	 * @param {number} angle
	 * @param {number} amount
	 */
	function transform$1(gfx, x, y, angle, amount) {
	  var translate = createTransform();
	  translate.setTranslate(x, y);

	  var rotate = createTransform();
	  rotate.setRotate(angle || 0, 0, 0);

	  var scale = createTransform();
	  scale.setScale(amount || 1, amount || 1);

	  transform(gfx, [ translate, rotate, scale ]);
	}


	/**
	 * @param {SVGElement} element
	 * @param {number} x
	 * @param {number} y
	 */
	function translate(gfx, x, y) {
	  var translate = createTransform();
	  translate.setTranslate(x, y);

	  transform(gfx, translate);
	}


	/**
	 * @param {SVGElement} element
	 * @param {number} angle
	 */
	function rotate(gfx, angle) {
	  var rotate = createTransform();
	  rotate.setRotate(angle, 0, 0);

	  transform(gfx, rotate);
	}

	/**
	 * A factory that creates graphical elements
	 *
	 * @param {EventBus} eventBus
	 * @param {ElementRegistry} elementRegistry
	 */
	function GraphicsFactory(eventBus, elementRegistry) {
	  this._eventBus = eventBus;
	  this._elementRegistry = elementRegistry;
	}

	GraphicsFactory.$inject = [ 'eventBus' , 'elementRegistry' ];


	GraphicsFactory.prototype._getChildrenContainer = function(element) {

	  var gfx = this._elementRegistry.getGraphics(element);

	  var childrenGfx;

	  // root element
	  if (!element.parent) {
	    childrenGfx = gfx;
	  } else {
	    childrenGfx = getChildren(gfx);
	    if (!childrenGfx) {
	      childrenGfx = create('g');
	      classes$1(childrenGfx).add('djs-children');

	      append(gfx.parentNode, childrenGfx);
	    }
	  }

	  return childrenGfx;
	};

	/**
	 * Clears the graphical representation of the element and returns the
	 * cleared visual (the <g class="djs-visual" /> element).
	 */
	GraphicsFactory.prototype._clear = function(gfx) {
	  var visual = getVisual(gfx);

	  clear(visual);

	  return visual;
	};

	/**
	 * Creates a gfx container for shapes and connections
	 *
	 * The layout is as follows:
	 *
	 * <g class="djs-group">
	 *
	 *   <!-- the gfx -->
	 *   <g class="djs-element djs-(shape|connection|frame)">
	 *     <g class="djs-visual">
	 *       <!-- the renderer draws in here -->
	 *     </g>
	 *
	 *     <!-- extensions (overlays, click box, ...) goes here
	 *   </g>
	 *
	 *   <!-- the gfx child nodes -->
	 *   <g class="djs-children"></g>
	 * </g>
	 *
	 * @param {string} type the type of the element, i.e. shape | connection
	 * @param {SVGElement} [childrenGfx]
	 * @param {number} [parentIndex] position to create container in parent
	 * @param {boolean} [isFrame] is frame element
	 *
	 * @return {SVGElement}
	 */
	GraphicsFactory.prototype._createContainer = function(
	    type, childrenGfx, parentIndex, isFrame
	) {
	  var outerGfx = create('g');
	  classes$1(outerGfx).add('djs-group');

	  // insert node at position
	  if (typeof parentIndex !== 'undefined') {
	    prependTo(outerGfx, childrenGfx, childrenGfx.childNodes[parentIndex]);
	  } else {
	    append(childrenGfx, outerGfx);
	  }

	  var gfx = create('g');
	  classes$1(gfx).add('djs-element');
	  classes$1(gfx).add('djs-' + type);

	  if (isFrame) {
	    classes$1(gfx).add('djs-frame');
	  }

	  append(outerGfx, gfx);

	  // create visual
	  var visual = create('g');
	  classes$1(visual).add('djs-visual');

	  append(gfx, visual);

	  return gfx;
	};

	GraphicsFactory.prototype.create = function(type, element, parentIndex) {
	  var childrenGfx = this._getChildrenContainer(element.parent);
	  return this._createContainer(type, childrenGfx, parentIndex, isFrameElement(element));
	};

	GraphicsFactory.prototype.updateContainments = function(elements) {

	  var self = this,
	      elementRegistry = this._elementRegistry,
	      parents;

	  parents = reduce(elements, function(map, e) {

	    if (e.parent) {
	      map[e.parent.id] = e.parent;
	    }

	    return map;
	  }, {});

	  // update all parents of changed and reorganized their children
	  // in the correct order (as indicated in our model)
	  forEach(parents, function(parent) {

	    var children = parent.children;

	    if (!children) {
	      return;
	    }

	    var childrenGfx = self._getChildrenContainer(parent);

	    forEach(children.slice().reverse(), function(child) {
	      var childGfx = elementRegistry.getGraphics(child);

	      prependTo(childGfx.parentNode, childrenGfx);
	    });
	  });
	};

	GraphicsFactory.prototype.drawShape = function(visual, element) {
	  var eventBus = this._eventBus;

	  return eventBus.fire('render.shape', { gfx: visual, element: element });
	};

	GraphicsFactory.prototype.getShapePath = function(element) {
	  var eventBus = this._eventBus;

	  return eventBus.fire('render.getShapePath', element);
	};

	GraphicsFactory.prototype.drawConnection = function(visual, element) {
	  var eventBus = this._eventBus;

	  return eventBus.fire('render.connection', { gfx: visual, element: element });
	};

	GraphicsFactory.prototype.getConnectionPath = function(waypoints) {
	  var eventBus = this._eventBus;

	  return eventBus.fire('render.getConnectionPath', waypoints);
	};

	GraphicsFactory.prototype.update = function(type, element, gfx) {

	  // do NOT update root element
	  if (!element.parent) {
	    return;
	  }

	  var visual = this._clear(gfx);

	  // redraw
	  if (type === 'shape') {
	    this.drawShape(visual, element);

	    // update positioning
	    translate(gfx, element.x, element.y);
	  } else
	  if (type === 'connection') {
	    this.drawConnection(visual, element);
	  } else {
	    throw new Error('unknown type: ' + type);
	  }

	  if (element.hidden) {
	    attr$1(gfx, 'display', 'none');
	  } else {
	    attr$1(gfx, 'display', 'block');
	  }
	};

	GraphicsFactory.prototype.remove = function(element) {
	  var gfx = this._elementRegistry.getGraphics(element);

	  // remove
	  remove$1(gfx.parentNode);
	};


	// helpers //////////

	function prependTo(newNode, parentNode, siblingNode) {
	  var node = siblingNode || parentNode.firstChild;

	  // do not prepend node to itself to prevent IE from crashing
	  // https://github.com/bpmn-io/bpmn-js/issues/746
	  if (newNode === node) {
	    return;
	  }

	  parentNode.insertBefore(newNode, node);
	}

	var CoreModule = {
	  __depends__: [ DrawModule ],
	  __init__: [ 'canvas' ],
	  canvas: [ 'type', Canvas ],
	  elementRegistry: [ 'type', ElementRegistry ],
	  elementFactory: [ 'type', ElementFactory ],
	  eventBus: [ 'type', EventBus ],
	  graphicsFactory: [ 'type', GraphicsFactory ]
	};

	/**
	 * Bootstrap an injector from a list of modules, instantiating a number of default components
	 *
	 * @ignore
	 * @param {Array<didi.Module>} bootstrapModules
	 *
	 * @return {didi.Injector} a injector to use to access the components
	 */
	function bootstrap(bootstrapModules) {

	  var modules = [],
	      components = [];

	  function hasModule(m) {
	    return modules.indexOf(m) >= 0;
	  }

	  function addModule(m) {
	    modules.push(m);
	  }

	  function visit(m) {
	    if (hasModule(m)) {
	      return;
	    }

	    (m.__depends__ || []).forEach(visit);

	    if (hasModule(m)) {
	      return;
	    }

	    addModule(m);

	    (m.__init__ || []).forEach(function(c) {
	      components.push(c);
	    });
	  }

	  bootstrapModules.forEach(visit);

	  var injector = new Injector(modules);

	  components.forEach(function(c) {

	    try {

	      // eagerly resolve component (fn or string)
	      injector[typeof c === 'string' ? 'get' : 'invoke'](c);
	    } catch (e) {
	      console.error('Failed to instantiate component');
	      console.error(e.stack);

	      throw e;
	    }
	  });

	  return injector;
	}

	/**
	 * Creates an injector from passed options.
	 *
	 * @ignore
	 * @param  {Object} options
	 * @return {didi.Injector}
	 */
	function createInjector(options) {

	  options = options || {};

	  var configModule = {
	    'config': ['value', options]
	  };

	  var modules = [ configModule, CoreModule ].concat(options.modules || []);

	  return bootstrap(modules);
	}


	/**
	 * The main diagram-js entry point that bootstraps the diagram with the given
	 * configuration.
	 *
	 * To register extensions with the diagram, pass them as Array<didi.Module> to the constructor.
	 *
	 * @class djs.Diagram
	 * @memberOf djs
	 * @constructor
	 *
	 * @example
	 *
	 * <caption>Creating a plug-in that logs whenever a shape is added to the canvas.</caption>
	 *
	 * // plug-in implemenentation
	 * function MyLoggingPlugin(eventBus) {
	 *   eventBus.on('shape.added', function(event) {
	 *     console.log('shape ', event.shape, ' was added to the diagram');
	 *   });
	 * }
	 *
	 * // export as module
	 * export default {
	 *   __init__: [ 'myLoggingPlugin' ],
	 *     myLoggingPlugin: [ 'type', MyLoggingPlugin ]
	 * };
	 *
	 *
	 * // instantiate the diagram with the new plug-in
	 *
	 * import MyLoggingModule from 'path-to-my-logging-plugin';
	 *
	 * var diagram = new Diagram({
	 *   modules: [
	 *     MyLoggingModule
	 *   ]
	 * });
	 *
	 * diagram.invoke([ 'canvas', function(canvas) {
	 *   // add shape to drawing canvas
	 *   canvas.addShape({ x: 10, y: 10 });
	 * });
	 *
	 * // 'shape ... was added to the diagram' logged to console
	 *
	 * @param {Object} options
	 * @param {Array<didi.Module>} [options.modules] external modules to instantiate with the diagram
	 * @param {didi.Injector} [injector] an (optional) injector to bootstrap the diagram with
	 */
	function Diagram(options, injector) {

	  // create injector unless explicitly specified
	  this.injector = injector = injector || createInjector(options);

	  // API

	  /**
	   * Resolves a diagram service
	   *
	   * @method Diagram#get
	   *
	   * @param {string} name the name of the diagram service to be retrieved
	   * @param {boolean} [strict=true] if false, resolve missing services to null
	   */
	  this.get = injector.get;

	  /**
	   * Executes a function into which diagram services are injected
	   *
	   * @method Diagram#invoke
	   *
	   * @param {Function|Object[]} fn the function to resolve
	   * @param {Object} locals a number of locals to use to resolve certain dependencies
	   */
	  this.invoke = injector.invoke;

	  // init

	  // indicate via event


	  /**
	   * An event indicating that all plug-ins are loaded.
	   *
	   * Use this event to fire other events to interested plug-ins
	   *
	   * @memberOf Diagram
	   *
	   * @event diagram.init
	   *
	   * @example
	   *
	   * eventBus.on('diagram.init', function() {
	   *   eventBus.fire('my-custom-event', { foo: 'BAR' });
	   * });
	   *
	   * @type {Object}
	   */
	  this.get('eventBus').fire('diagram.init');
	}


	/**
	 * Destroys the diagram
	 *
	 * @method  Diagram#destroy
	 */
	Diagram.prototype.destroy = function() {
	  this.get('eventBus').fire('diagram.destroy');
	};

	/**
	 * Clear the diagram, removing all contents.
	 */
	Diagram.prototype.clear = function() {
	  this.get('eventBus').fire('diagram.clear');
	};

	/**
	 * Moddle base element.
	 */
	function Base$1() { }

	Base$1.prototype.get = function(name) {
	  return this.$model.properties.get(this, name);
	};

	Base$1.prototype.set = function(name, value) {
	  this.$model.properties.set(this, name, value);
	};

	/**
	 * A model element factory.
	 *
	 * @param {Moddle} model
	 * @param {Properties} properties
	 */
	function Factory(model, properties) {
	  this.model = model;
	  this.properties = properties;
	}


	Factory.prototype.createType = function(descriptor) {

	  var model = this.model;

	  var props = this.properties,
	      prototype = Object.create(Base$1.prototype);

	  // initialize default values
	  forEach(descriptor.properties, function(p) {
	    if (!p.isMany && p.default !== undefined) {
	      prototype[p.name] = p.default;
	    }
	  });

	  props.defineModel(prototype, model);
	  props.defineDescriptor(prototype, descriptor);

	  var name = descriptor.ns.name;

	  /**
	   * The new type constructor
	   */
	  function ModdleElement(attrs) {
	    props.define(this, '$type', { value: name, enumerable: true });
	    props.define(this, '$attrs', { value: {} });
	    props.define(this, '$parent', { writable: true });

	    forEach(attrs, bind(function(val, key) {
	      this.set(key, val);
	    }, this));
	  }

	  ModdleElement.prototype = prototype;

	  ModdleElement.hasType = prototype.$instanceOf = this.model.hasType;

	  // static links
	  props.defineModel(ModdleElement, model);
	  props.defineDescriptor(ModdleElement, descriptor);

	  return ModdleElement;
	};

	/**
	 * Built-in moddle types
	 */
	var BUILTINS = {
	  String: true,
	  Boolean: true,
	  Integer: true,
	  Real: true,
	  Element: true
	};

	/**
	 * Converters for built in types from string representations
	 */
	var TYPE_CONVERTERS = {
	  String: function(s) { return s; },
	  Boolean: function(s) { return s === 'true'; },
	  Integer: function(s) { return parseInt(s, 10); },
	  Real: function(s) { return parseFloat(s, 10); }
	};

	/**
	 * Convert a type to its real representation
	 */
	function coerceType(type, value) {

	  var converter = TYPE_CONVERTERS[type];

	  if (converter) {
	    return converter(value);
	  } else {
	    return value;
	  }
	}

	/**
	 * Return whether the given type is built-in
	 */
	function isBuiltIn(type) {
	  return !!BUILTINS[type];
	}

	/**
	 * Return whether the given type is simple
	 */
	function isSimple(type) {
	  return !!TYPE_CONVERTERS[type];
	}

	/**
	 * Parses a namespaced attribute name of the form (ns:)localName to an object,
	 * given a default prefix to assume in case no explicit namespace is given.
	 *
	 * @param {String} name
	 * @param {String} [defaultPrefix] the default prefix to take, if none is present.
	 *
	 * @return {Object} the parsed name
	 */
	function parseName(name, defaultPrefix) {
	  var parts = name.split(/:/),
	      localName, prefix;

	  // no prefix (i.e. only local name)
	  if (parts.length === 1) {
	    localName = name;
	    prefix = defaultPrefix;
	  } else
	  // prefix + local name
	  if (parts.length === 2) {
	    localName = parts[1];
	    prefix = parts[0];
	  } else {
	    throw new Error('expected <prefix:localName> or <localName>, got ' + name);
	  }

	  name = (prefix ? prefix + ':' : '') + localName;

	  return {
	    name: name,
	    prefix: prefix,
	    localName: localName
	  };
	}

	/**
	 * A utility to build element descriptors.
	 */
	function DescriptorBuilder(nameNs) {
	  this.ns = nameNs;
	  this.name = nameNs.name;
	  this.allTypes = [];
	  this.allTypesByName = {};
	  this.properties = [];
	  this.propertiesByName = {};
	}


	DescriptorBuilder.prototype.build = function() {
	  return pick(this, [
	    'ns',
	    'name',
	    'allTypes',
	    'allTypesByName',
	    'properties',
	    'propertiesByName',
	    'bodyProperty',
	    'idProperty'
	  ]);
	};

	/**
	 * Add property at given index.
	 *
	 * @param {Object} p
	 * @param {Number} [idx]
	 * @param {Boolean} [validate=true]
	 */
	DescriptorBuilder.prototype.addProperty = function(p, idx, validate) {

	  if (typeof idx === 'boolean') {
	    validate = idx;
	    idx = undefined;
	  }

	  this.addNamedProperty(p, validate !== false);

	  var properties = this.properties;

	  if (idx !== undefined) {
	    properties.splice(idx, 0, p);
	  } else {
	    properties.push(p);
	  }
	};


	DescriptorBuilder.prototype.replaceProperty = function(oldProperty, newProperty, replace) {
	  var oldNameNs = oldProperty.ns;

	  var props = this.properties,
	      propertiesByName = this.propertiesByName,
	      rename = oldProperty.name !== newProperty.name;

	  if (oldProperty.isId) {
	    if (!newProperty.isId) {
	      throw new Error(
	        'property <' + newProperty.ns.name + '> must be id property ' +
	        'to refine <' + oldProperty.ns.name + '>');
	    }

	    this.setIdProperty(newProperty, false);
	  }

	  if (oldProperty.isBody) {

	    if (!newProperty.isBody) {
	      throw new Error(
	        'property <' + newProperty.ns.name + '> must be body property ' +
	        'to refine <' + oldProperty.ns.name + '>');
	    }

	    // TODO: Check compatibility
	    this.setBodyProperty(newProperty, false);
	  }

	  // validate existence and get location of old property
	  var idx = props.indexOf(oldProperty);
	  if (idx === -1) {
	    throw new Error('property <' + oldNameNs.name + '> not found in property list');
	  }

	  // remove old property
	  props.splice(idx, 1);

	  // replacing the named property is intentional
	  //
	  //  * validate only if this is a "rename" operation
	  //  * add at specific index unless we "replace"
	  //
	  this.addProperty(newProperty, replace ? undefined : idx, rename);

	  // make new property available under old name
	  propertiesByName[oldNameNs.name] = propertiesByName[oldNameNs.localName] = newProperty;
	};


	DescriptorBuilder.prototype.redefineProperty = function(p, targetPropertyName, replace) {

	  var nsPrefix = p.ns.prefix;
	  var parts = targetPropertyName.split('#');

	  var name = parseName(parts[0], nsPrefix);
	  var attrName = parseName(parts[1], name.prefix).name;

	  var redefinedProperty = this.propertiesByName[attrName];
	  if (!redefinedProperty) {
	    throw new Error('refined property <' + attrName + '> not found');
	  } else {
	    this.replaceProperty(redefinedProperty, p, replace);
	  }

	  delete p.redefines;
	};

	DescriptorBuilder.prototype.addNamedProperty = function(p, validate) {
	  var ns = p.ns,
	      propsByName = this.propertiesByName;

	  if (validate) {
	    this.assertNotDefined(p, ns.name);
	    this.assertNotDefined(p, ns.localName);
	  }

	  propsByName[ns.name] = propsByName[ns.localName] = p;
	};

	DescriptorBuilder.prototype.removeNamedProperty = function(p) {
	  var ns = p.ns,
	      propsByName = this.propertiesByName;

	  delete propsByName[ns.name];
	  delete propsByName[ns.localName];
	};

	DescriptorBuilder.prototype.setBodyProperty = function(p, validate) {

	  if (validate && this.bodyProperty) {
	    throw new Error(
	      'body property defined multiple times ' +
	      '(<' + this.bodyProperty.ns.name + '>, <' + p.ns.name + '>)');
	  }

	  this.bodyProperty = p;
	};

	DescriptorBuilder.prototype.setIdProperty = function(p, validate) {

	  if (validate && this.idProperty) {
	    throw new Error(
	      'id property defined multiple times ' +
	      '(<' + this.idProperty.ns.name + '>, <' + p.ns.name + '>)');
	  }

	  this.idProperty = p;
	};

	DescriptorBuilder.prototype.assertNotDefined = function(p, name) {
	  var propertyName = p.name,
	      definedProperty = this.propertiesByName[propertyName];

	  if (definedProperty) {
	    throw new Error(
	      'property <' + propertyName + '> already defined; ' +
	      'override of <' + definedProperty.definedBy.ns.name + '#' + definedProperty.ns.name + '> by ' +
	      '<' + p.definedBy.ns.name + '#' + p.ns.name + '> not allowed without redefines');
	  }
	};

	DescriptorBuilder.prototype.hasProperty = function(name) {
	  return this.propertiesByName[name];
	};

	DescriptorBuilder.prototype.addTrait = function(t, inherited) {

	  var typesByName = this.allTypesByName,
	      types = this.allTypes;

	  var typeName = t.name;

	  if (typeName in typesByName) {
	    return;
	  }

	  forEach(t.properties, bind(function(p) {

	    // clone property to allow extensions
	    p = assign({}, p, {
	      name: p.ns.localName,
	      inherited: inherited
	    });

	    Object.defineProperty(p, 'definedBy', {
	      value: t
	    });

	    var replaces = p.replaces,
	        redefines = p.redefines;

	    // add replace/redefine support
	    if (replaces || redefines) {
	      this.redefineProperty(p, replaces || redefines, replaces);
	    } else {
	      if (p.isBody) {
	        this.setBodyProperty(p);
	      }
	      if (p.isId) {
	        this.setIdProperty(p);
	      }
	      this.addProperty(p);
	    }
	  }, this));

	  types.push(t);
	  typesByName[typeName] = t;
	};

	/**
	 * A registry of Moddle packages.
	 *
	 * @param {Array<Package>} packages
	 * @param {Properties} properties
	 */
	function Registry(packages, properties) {
	  this.packageMap = {};
	  this.typeMap = {};

	  this.packages = [];

	  this.properties = properties;

	  forEach(packages, bind(this.registerPackage, this));
	}


	Registry.prototype.getPackage = function(uriOrPrefix) {
	  return this.packageMap[uriOrPrefix];
	};

	Registry.prototype.getPackages = function() {
	  return this.packages;
	};


	Registry.prototype.registerPackage = function(pkg) {

	  // copy package
	  pkg = assign({}, pkg);

	  var pkgMap = this.packageMap;

	  ensureAvailable(pkgMap, pkg, 'prefix');
	  ensureAvailable(pkgMap, pkg, 'uri');

	  // register types
	  forEach(pkg.types, bind(function(descriptor) {
	    this.registerType(descriptor, pkg);
	  }, this));

	  pkgMap[pkg.uri] = pkgMap[pkg.prefix] = pkg;
	  this.packages.push(pkg);
	};


	/**
	 * Register a type from a specific package with us
	 */
	Registry.prototype.registerType = function(type, pkg) {

	  type = assign({}, type, {
	    superClass: (type.superClass || []).slice(),
	    extends: (type.extends || []).slice(),
	    properties: (type.properties || []).slice(),
	    meta: assign((type.meta || {}))
	  });

	  var ns = parseName(type.name, pkg.prefix),
	      name = ns.name,
	      propertiesByName = {};

	  // parse properties
	  forEach(type.properties, bind(function(p) {

	    // namespace property names
	    var propertyNs = parseName(p.name, ns.prefix),
	        propertyName = propertyNs.name;

	    // namespace property types
	    if (!isBuiltIn(p.type)) {
	      p.type = parseName(p.type, propertyNs.prefix).name;
	    }

	    assign(p, {
	      ns: propertyNs,
	      name: propertyName
	    });

	    propertiesByName[propertyName] = p;
	  }, this));

	  // update ns + name
	  assign(type, {
	    ns: ns,
	    name: name,
	    propertiesByName: propertiesByName
	  });

	  forEach(type.extends, bind(function(extendsName) {
	    var extended = this.typeMap[extendsName];

	    extended.traits = extended.traits || [];
	    extended.traits.push(name);
	  }, this));

	  // link to package
	  this.definePackage(type, pkg);

	  // register
	  this.typeMap[name] = type;
	};


	/**
	 * Traverse the type hierarchy from bottom to top,
	 * calling iterator with (type, inherited) for all elements in
	 * the inheritance chain.
	 *
	 * @param {Object} nsName
	 * @param {Function} iterator
	 * @param {Boolean} [trait=false]
	 */
	Registry.prototype.mapTypes = function(nsName, iterator, trait) {

	  var type = isBuiltIn(nsName.name) ? { name: nsName.name } : this.typeMap[nsName.name];

	  var self = this;

	  /**
	   * Traverse the selected trait.
	   *
	   * @param {String} cls
	   */
	  function traverseTrait(cls) {
	    return traverseSuper(cls, true);
	  }

	  /**
	   * Traverse the selected super type or trait
	   *
	   * @param {String} cls
	   * @param {Boolean} [trait=false]
	   */
	  function traverseSuper(cls, trait) {
	    var parentNs = parseName(cls, isBuiltIn(cls) ? '' : nsName.prefix);
	    self.mapTypes(parentNs, iterator, trait);
	  }

	  if (!type) {
	    throw new Error('unknown type <' + nsName.name + '>');
	  }

	  forEach(type.superClass, trait ? traverseTrait : traverseSuper);

	  // call iterator with (type, inherited=!trait)
	  iterator(type, !trait);

	  forEach(type.traits, traverseTrait);
	};


	/**
	 * Returns the effective descriptor for a type.
	 *
	 * @param  {String} type the namespaced name (ns:localName) of the type
	 *
	 * @return {Descriptor} the resulting effective descriptor
	 */
	Registry.prototype.getEffectiveDescriptor = function(name) {

	  var nsName = parseName(name);

	  var builder = new DescriptorBuilder(nsName);

	  this.mapTypes(nsName, function(type, inherited) {
	    builder.addTrait(type, inherited);
	  });

	  var descriptor = builder.build();

	  // define package link
	  this.definePackage(descriptor, descriptor.allTypes[descriptor.allTypes.length - 1].$pkg);

	  return descriptor;
	};


	Registry.prototype.definePackage = function(target, pkg) {
	  this.properties.define(target, '$pkg', { value: pkg });
	};



	///////// helpers ////////////////////////////

	function ensureAvailable(packageMap, pkg, identifierKey) {

	  var value = pkg[identifierKey];

	  if (value in packageMap) {
	    throw new Error('package with ' + identifierKey + ' <' + value + '> already defined');
	  }
	}

	/**
	 * A utility that gets and sets properties of model elements.
	 *
	 * @param {Model} model
	 */
	function Properties(model) {
	  this.model = model;
	}


	/**
	 * Sets a named property on the target element.
	 * If the value is undefined, the property gets deleted.
	 *
	 * @param {Object} target
	 * @param {String} name
	 * @param {Object} value
	 */
	Properties.prototype.set = function(target, name, value) {

	  var property = this.model.getPropertyDescriptor(target, name);

	  var propertyName = property && property.name;

	  if (isUndefined$1(value)) {
	    // unset the property, if the specified value is undefined;
	    // delete from $attrs (for extensions) or the target itself
	    if (property) {
	      delete target[propertyName];
	    } else {
	      delete target.$attrs[name];
	    }
	  } else {
	    // set the property, defining well defined properties on the fly
	    // or simply updating them in target.$attrs (for extensions)
	    if (property) {
	      if (propertyName in target) {
	        target[propertyName] = value;
	      } else {
	        defineProperty$1(target, property, value);
	      }
	    } else {
	      target.$attrs[name] = value;
	    }
	  }
	};

	/**
	 * Returns the named property of the given element
	 *
	 * @param  {Object} target
	 * @param  {String} name
	 *
	 * @return {Object}
	 */
	Properties.prototype.get = function(target, name) {

	  var property = this.model.getPropertyDescriptor(target, name);

	  if (!property) {
	    return target.$attrs[name];
	  }

	  var propertyName = property.name;

	  // check if access to collection property and lazily initialize it
	  if (!target[propertyName] && property.isMany) {
	    defineProperty$1(target, property, []);
	  }

	  return target[propertyName];
	};


	/**
	 * Define a property on the target element
	 *
	 * @param  {Object} target
	 * @param  {String} name
	 * @param  {Object} options
	 */
	Properties.prototype.define = function(target, name, options) {
	  Object.defineProperty(target, name, options);
	};


	/**
	 * Define the descriptor for an element
	 */
	Properties.prototype.defineDescriptor = function(target, descriptor) {
	  this.define(target, '$descriptor', { value: descriptor });
	};

	/**
	 * Define the model for an element
	 */
	Properties.prototype.defineModel = function(target, model) {
	  this.define(target, '$model', { value: model });
	};


	function isUndefined$1(val) {
	  return typeof val === 'undefined';
	}

	function defineProperty$1(target, property, value) {
	  Object.defineProperty(target, property.name, {
	    enumerable: !property.isReference,
	    writable: true,
	    value: value,
	    configurable: true
	  });
	}

	//// Moddle implementation /////////////////////////////////////////////////

	/**
	 * @class Moddle
	 *
	 * A model that can be used to create elements of a specific type.
	 *
	 * @example
	 *
	 * var Moddle = require('moddle');
	 *
	 * var pkg = {
	 *   name: 'mypackage',
	 *   prefix: 'my',
	 *   types: [
	 *     { name: 'Root' }
	 *   ]
	 * };
	 *
	 * var moddle = new Moddle([pkg]);
	 *
	 * @param {Array<Package>} packages the packages to contain
	 */
	function Moddle(packages) {

	  this.properties = new Properties(this);

	  this.factory = new Factory(this, this.properties);
	  this.registry = new Registry(packages, this.properties);

	  this.typeCache = {};
	}


	/**
	 * Create an instance of the specified type.
	 *
	 * @method Moddle#create
	 *
	 * @example
	 *
	 * var foo = moddle.create('my:Foo');
	 * var bar = moddle.create('my:Bar', { id: 'BAR_1' });
	 *
	 * @param  {String|Object} descriptor the type descriptor or name know to the model
	 * @param  {Object} attrs   a number of attributes to initialize the model instance with
	 * @return {Object}         model instance
	 */
	Moddle.prototype.create = function(descriptor, attrs) {
	  var Type = this.getType(descriptor);

	  if (!Type) {
	    throw new Error('unknown type <' + descriptor + '>');
	  }

	  return new Type(attrs);
	};


	/**
	 * Returns the type representing a given descriptor
	 *
	 * @method Moddle#getType
	 *
	 * @example
	 *
	 * var Foo = moddle.getType('my:Foo');
	 * var foo = new Foo({ 'id' : 'FOO_1' });
	 *
	 * @param  {String|Object} descriptor the type descriptor or name know to the model
	 * @return {Object}         the type representing the descriptor
	 */
	Moddle.prototype.getType = function(descriptor) {

	  var cache = this.typeCache;

	  var name = isString(descriptor) ? descriptor : descriptor.ns.name;

	  var type = cache[name];

	  if (!type) {
	    descriptor = this.registry.getEffectiveDescriptor(name);
	    type = cache[name] = this.factory.createType(descriptor);
	  }

	  return type;
	};


	/**
	 * Creates an any-element type to be used within model instances.
	 *
	 * This can be used to create custom elements that lie outside the meta-model.
	 * The created element contains all the meta-data required to serialize it
	 * as part of meta-model elements.
	 *
	 * @method Moddle#createAny
	 *
	 * @example
	 *
	 * var foo = moddle.createAny('vendor:Foo', 'http://vendor', {
	 *   value: 'bar'
	 * });
	 *
	 * var container = moddle.create('my:Container', 'http://my', {
	 *   any: [ foo ]
	 * });
	 *
	 * // go ahead and serialize the stuff
	 *
	 *
	 * @param  {String} name  the name of the element
	 * @param  {String} nsUri the namespace uri of the element
	 * @param  {Object} [properties] a map of properties to initialize the instance with
	 * @return {Object} the any type instance
	 */
	Moddle.prototype.createAny = function(name, nsUri, properties) {

	  var nameNs = parseName(name);

	  var element = {
	    $type: name,
	    $instanceOf: function(type) {
	      return type === this.$type;
	    }
	  };

	  var descriptor = {
	    name: name,
	    isGeneric: true,
	    ns: {
	      prefix: nameNs.prefix,
	      localName: nameNs.localName,
	      uri: nsUri
	    }
	  };

	  this.properties.defineDescriptor(element, descriptor);
	  this.properties.defineModel(element, this);
	  this.properties.define(element, '$parent', { enumerable: false, writable: true });

	  forEach(properties, function(a, key) {
	    if (isObject(a) && a.value !== undefined) {
	      element[a.name] = a.value;
	    } else {
	      element[key] = a;
	    }
	  });

	  return element;
	};

	/**
	 * Returns a registered package by uri or prefix
	 *
	 * @return {Object} the package
	 */
	Moddle.prototype.getPackage = function(uriOrPrefix) {
	  return this.registry.getPackage(uriOrPrefix);
	};

	/**
	 * Returns a snapshot of all known packages
	 *
	 * @return {Object} the package
	 */
	Moddle.prototype.getPackages = function() {
	  return this.registry.getPackages();
	};

	/**
	 * Returns the descriptor for an element
	 */
	Moddle.prototype.getElementDescriptor = function(element) {
	  return element.$descriptor;
	};

	/**
	 * Returns true if the given descriptor or instance
	 * represents the given type.
	 *
	 * May be applied to this, if element is omitted.
	 */
	Moddle.prototype.hasType = function(element, type) {
	  if (type === undefined) {
	    type = element;
	    element = this;
	  }

	  var descriptor = element.$model.getElementDescriptor(element);

	  return (type in descriptor.allTypesByName);
	};

	/**
	 * Returns the descriptor of an elements named property
	 */
	Moddle.prototype.getPropertyDescriptor = function(element, property) {
	  return this.getElementDescriptor(element).propertiesByName[property];
	};

	/**
	 * Returns a mapped type's descriptor
	 */
	Moddle.prototype.getTypeDescriptor = function(type) {
	  return this.registry.typeMap[type];
	};

	var fromCharCode = String.fromCharCode;

	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

	var ENTITY_PATTERN = /&#(\d+);|&#x([0-9a-f]+);|&(\w+);/ig;

	var ENTITY_MAPPING = {
	  'amp': '&',
	  'apos': '\'',
	  'gt': '>',
	  'lt': '<',
	  'quot': '"'
	};

	// map UPPERCASE variants of supported special chars
	Object.keys(ENTITY_MAPPING).forEach(function(k) {
	  ENTITY_MAPPING[k.toUpperCase()] = ENTITY_MAPPING[k];
	});


	function replaceEntities(_, d, x, z) {

	  // reserved names, i.e. &nbsp;
	  if (z) {
	    if (hasOwnProperty$1.call(ENTITY_MAPPING, z)) {
	      return ENTITY_MAPPING[z];
	    } else {

	      // fall back to original value
	      return '&' + z + ';';
	    }
	  }

	  // decimal encoded char
	  if (d) {
	    return fromCharCode(d);
	  }

	  // hex encoded char
	  return fromCharCode(parseInt(x, 16));
	}


	/**
	 * A basic entity decoder that can decode a minimal
	 * sub-set of reserved names (&amp;) as well as
	 * hex (&#xaaf;) and decimal (&#1231;) encoded characters.
	 *
	 * @param {string} str
	 *
	 * @return {string} decoded string
	 */
	function decodeEntities(s) {
	  if (s.length > 3 && s.indexOf('&') !== -1) {
	    return s.replace(ENTITY_PATTERN, replaceEntities);
	  }

	  return s;
	}

	var XSI_URI = 'http://www.w3.org/2001/XMLSchema-instance';
	var XSI_PREFIX = 'xsi';
	var XSI_TYPE = 'xsi:type';

	var NON_WHITESPACE_OUTSIDE_ROOT_NODE = 'non-whitespace outside of root node';

	function error(msg) {
	  return new Error(msg);
	}

	function missingNamespaceForPrefix(prefix) {
	  return 'missing namespace for prefix <' + prefix + '>';
	}

	function getter(getFn) {
	  return {
	    'get': getFn,
	    'enumerable': true
	  };
	}

	function cloneNsMatrix(nsMatrix) {
	  var clone = {}, key;
	  for (key in nsMatrix) {
	    clone[key] = nsMatrix[key];
	  }
	  return clone;
	}

	function uriPrefix(prefix) {
	  return prefix + '$uri';
	}

	function buildNsMatrix(nsUriToPrefix) {
	  var nsMatrix = {},
	      uri,
	      prefix;

	  for (uri in nsUriToPrefix) {
	    prefix = nsUriToPrefix[uri];
	    nsMatrix[prefix] = prefix;
	    nsMatrix[uriPrefix(prefix)] = uri;
	  }

	  return nsMatrix;
	}

	function noopGetContext() {
	  return { 'line': 0, 'column': 0 };
	}

	function throwFunc(err) {
	  throw err;
	}

	/**
	 * Creates a new parser with the given options.
	 *
	 * @constructor
	 *
	 * @param  {!Object<string, ?>=} options
	 */
	function Parser(options) {

	  if (!this) {
	    return new Parser(options);
	  }

	  var proxy = options && options['proxy'];

	  var onText,
	      onOpenTag,
	      onCloseTag,
	      onCDATA,
	      onError = throwFunc,
	      onWarning,
	      onComment,
	      onQuestion,
	      onAttention;

	  var getContext = noopGetContext;

	  /**
	   * Do we need to parse the current elements attributes for namespaces?
	   *
	   * @type {boolean}
	   */
	  var maybeNS = false;

	  /**
	   * Do we process namespaces at all?
	   *
	   * @type {boolean}
	   */
	  var isNamespace = false;

	  /**
	   * The caught error returned on parse end
	   *
	   * @type {Error}
	   */
	  var returnError = null;

	  /**
	   * Should we stop parsing?
	   *
	   * @type {boolean}
	   */
	  var parseStop = false;

	  /**
	   * A map of { uri: prefix } used by the parser.
	   *
	   * This map will ensure we can normalize prefixes during processing;
	   * for each uri, only one prefix will be exposed to the handlers.
	   *
	   * @type {!Object<string, string>}}
	   */
	  var nsUriToPrefix;

	  /**
	   * Handle parse error.
	   *
	   * @param  {string|Error} err
	   */
	  function handleError(err) {
	    if (!(err instanceof Error)) {
	      err = error(err);
	    }

	    returnError = err;

	    onError(err, getContext);
	  }

	  /**
	   * Handle parse error.
	   *
	   * @param  {string|Error} err
	   */
	  function handleWarning(err) {

	    if (!onWarning) {
	      return;
	    }

	    if (!(err instanceof Error)) {
	      err = error(err);
	    }

	    onWarning(err, getContext);
	  }

	  /**
	   * Register parse listener.
	   *
	   * @param  {string}   name
	   * @param  {Function} cb
	   *
	   * @return {Parser}
	   */
	  this['on'] = function(name, cb) {

	    if (typeof cb !== 'function') {
	      throw error('required args <name, cb>');
	    }

	    switch (name) {
	    case 'openTag': onOpenTag = cb; break;
	    case 'text': onText = cb; break;
	    case 'closeTag': onCloseTag = cb; break;
	    case 'error': onError = cb; break;
	    case 'warn': onWarning = cb; break;
	    case 'cdata': onCDATA = cb; break;
	    case 'attention': onAttention = cb; break; // <!XXXXX zzzz="eeee">
	    case 'question': onQuestion = cb; break; // <? ....  ?>
	    case 'comment': onComment = cb; break;
	    default:
	      throw error('unsupported event: ' + name);
	    }

	    return this;
	  };

	  /**
	   * Set the namespace to prefix mapping.
	   *
	   * @example
	   *
	   * parser.ns({
	   *   'http://foo': 'foo',
	   *   'http://bar': 'bar'
	   * });
	   *
	   * @param  {!Object<string, string>} nsMap
	   *
	   * @return {Parser}
	   */
	  this['ns'] = function(nsMap) {

	    if (typeof nsMap === 'undefined') {
	      nsMap = {};
	    }

	    if (typeof nsMap !== 'object') {
	      throw error('required args <nsMap={}>');
	    }

	    var _nsUriToPrefix = {}, k;

	    for (k in nsMap) {
	      _nsUriToPrefix[k] = nsMap[k];
	    }

	    // FORCE default mapping for schema instance
	    _nsUriToPrefix[XSI_URI] = XSI_PREFIX;

	    isNamespace = true;
	    nsUriToPrefix = _nsUriToPrefix;

	    return this;
	  };

	  /**
	   * Parse xml string.
	   *
	   * @param  {string} xml
	   *
	   * @return {Error} returnError, if not thrown
	   */
	  this['parse'] = function(xml) {
	    if (typeof xml !== 'string') {
	      throw error('required args <xml=string>');
	    }

	    returnError = null;

	    parse(xml);

	    getContext = noopGetContext;
	    parseStop = false;

	    return returnError;
	  };

	  /**
	   * Stop parsing.
	   */
	  this['stop'] = function() {
	    parseStop = true;
	  };

	  /**
	   * Parse string, invoking configured listeners on element.
	   *
	   * @param  {string} xml
	   */
	  function parse(xml) {
	    var nsMatrixStack = isNamespace ? [] : null,
	        nsMatrix = isNamespace ? buildNsMatrix(nsUriToPrefix) : null,
	        _nsMatrix,
	        nodeStack = [],
	        anonymousNsCount = 0,
	        tagStart = false,
	        tagEnd = false,
	        i = 0, j = 0,
	        x, y, q, w, v,
	        xmlns,
	        elementName,
	        _elementName,
	        elementProxy
	        ;

	    var attrsString = '',
	        attrsStart = 0,
	        cachedAttrs // false = parsed with errors, null = needs parsing
	        ;

	    /**
	     * Parse attributes on demand and returns the parsed attributes.
	     *
	     * Return semantics: (1) `false` on attribute parse error,
	     * (2) object hash on extracted attrs.
	     *
	     * @return {boolean|Object}
	     */
	    function getAttrs() {
	      if (cachedAttrs !== null) {
	        return cachedAttrs;
	      }

	      var nsUri,
	          nsUriPrefix,
	          nsName,
	          defaultAlias = isNamespace && nsMatrix['xmlns'],
	          attrList = isNamespace && maybeNS ? [] : null,
	          i = attrsStart,
	          s = attrsString,
	          l = s.length,
	          hasNewMatrix,
	          newalias,
	          value,
	          alias,
	          name,
	          attrs = {},
	          seenAttrs = {},
	          skipAttr,
	          w,
	          j;

	      parseAttr:
	      for (; i < l; i++) {
	        skipAttr = false;
	        w = s.charCodeAt(i);

	        if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE={ \f\n\r\t\v}
	          continue;
	        }

	        // wait for non whitespace character
	        if (w < 65 || w > 122 || (w > 90 && w < 97)) {
	          if (w !== 95 && w !== 58) { // char 95"_" 58":"
	            handleWarning('illegal first char attribute name');
	            skipAttr = true;
	          }
	        }

	        // parse attribute name
	        for (j = i + 1; j < l; j++) {
	          w = s.charCodeAt(j);

	          if (
	            w > 96 && w < 123 ||
	            w > 64 && w < 91 ||
	            w > 47 && w < 59 ||
	            w === 46 || // '.'
	            w === 45 || // '-'
	            w === 95 // '_'
	          ) {
	            continue;
	          }

	          // unexpected whitespace
	          if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE
	            handleWarning('missing attribute value');
	            i = j;

	            continue parseAttr;
	          }

	          // expected "="
	          if (w === 61) { // "=" == 61
	            break;
	          }

	          handleWarning('illegal attribute name char');
	          skipAttr = true;
	        }

	        name = s.substring(i, j);

	        if (name === 'xmlns:xmlns') {
	          handleWarning('illegal declaration of xmlns');
	          skipAttr = true;
	        }

	        w = s.charCodeAt(j + 1);

	        if (w === 34) { // '"'
	          j = s.indexOf('"', i = j + 2);

	          if (j === -1) {
	            j = s.indexOf('\'', i);

	            if (j !== -1) {
	              handleWarning('attribute value quote missmatch');
	              skipAttr = true;
	            }
	          }

	        } else if (w === 39) { // "'"
	          j = s.indexOf('\'', i = j + 2);

	          if (j === -1) {
	            j = s.indexOf('"', i);

	            if (j !== -1) {
	              handleWarning('attribute value quote missmatch');
	              skipAttr = true;
	            }
	          }

	        } else {
	          handleWarning('missing attribute value quotes');
	          skipAttr = true;

	          // skip to next space
	          for (j = j + 1; j < l; j++) {
	            w = s.charCodeAt(j + 1);

	            if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE
	              break;
	            }
	          }

	        }

	        if (j === -1) {
	          handleWarning('missing closing quotes');

	          j = l;
	          skipAttr = true;
	        }

	        if (!skipAttr) {
	          value = s.substring(i, j);
	        }

	        i = j;

	        // ensure SPACE follows attribute
	        // skip illegal content otherwise
	        // example a="b"c
	        for (; j + 1 < l; j++) {
	          w = s.charCodeAt(j + 1);

	          if (w === 32 || (w < 14 && w > 8)) { // WHITESPACE
	            break;
	          }

	          // FIRST ILLEGAL CHAR
	          if (i === j) {
	            handleWarning('illegal character after attribute end');
	            skipAttr = true;
	          }
	        }

	        // advance cursor to next attribute
	        i = j + 1;

	        if (skipAttr) {
	          continue parseAttr;
	        }

	        // check attribute re-declaration
	        if (name in seenAttrs) {
	          handleWarning('attribute <' + name + '> already defined');
	          continue;
	        }

	        seenAttrs[name] = true;

	        if (!isNamespace) {
	          attrs[name] = value;
	          continue;
	        }

	        // try to extract namespace information
	        if (maybeNS) {
	          newalias = (
	            name === 'xmlns'
	              ? 'xmlns'
	              : (name.charCodeAt(0) === 120 && name.substr(0, 6) === 'xmlns:')
	                ? name.substr(6)
	                : null
	          );

	          // handle xmlns(:alias) assignment
	          if (newalias !== null) {
	            nsUri = decodeEntities(value);
	            nsUriPrefix = uriPrefix(newalias);

	            alias = nsUriToPrefix[nsUri];

	            if (!alias) {

	              // no prefix defined or prefix collision
	              if (
	                (newalias === 'xmlns') ||
	                (nsUriPrefix in nsMatrix && nsMatrix[nsUriPrefix] !== nsUri)
	              ) {

	                // alocate free ns prefix
	                do {
	                  alias = 'ns' + (anonymousNsCount++);
	                } while (typeof nsMatrix[alias] !== 'undefined');
	              } else {
	                alias = newalias;
	              }

	              nsUriToPrefix[nsUri] = alias;
	            }

	            if (nsMatrix[newalias] !== alias) {
	              if (!hasNewMatrix) {
	                nsMatrix = cloneNsMatrix(nsMatrix);
	                hasNewMatrix = true;
	              }

	              nsMatrix[newalias] = alias;
	              if (newalias === 'xmlns') {
	                nsMatrix[uriPrefix(alias)] = nsUri;
	                defaultAlias = alias;
	              }

	              nsMatrix[nsUriPrefix] = nsUri;
	            }

	            // expose xmlns(:asd)="..." in attributes
	            attrs[name] = value;
	            continue;
	          }

	          // collect attributes until all namespace
	          // declarations are processed
	          attrList.push(name, value);
	          continue;

	        } /** end if (maybeNs) */

	        // handle attributes on element without
	        // namespace declarations
	        w = name.indexOf(':');
	        if (w === -1) {
	          attrs[name] = value;
	          continue;
	        }

	        // normalize ns attribute name
	        if (!(nsName = nsMatrix[name.substring(0, w)])) {
	          handleWarning(missingNamespaceForPrefix(name.substring(0, w)));
	          continue;
	        }

	        name = defaultAlias === nsName
	          ? name.substr(w + 1)
	          : nsName + name.substr(w);

	        // end: normalize ns attribute name

	        // normalize xsi:type ns attribute value
	        if (name === XSI_TYPE) {
	          w = value.indexOf(':');

	          if (w !== -1) {
	            nsName = value.substring(0, w);

	            // handle default prefixes, i.e. xs:String gracefully
	            nsName = nsMatrix[nsName] || nsName;
	            value = nsName + value.substring(w);
	          } else {
	            value = defaultAlias + ':' + value;
	          }
	        }

	        // end: normalize xsi:type ns attribute value

	        attrs[name] = value;
	      }


	      // handle deferred, possibly namespaced attributes
	      if (maybeNS) {

	        // normalize captured attributes
	        for (i = 0, l = attrList.length; i < l; i++) {

	          name = attrList[i++];
	          value = attrList[i];

	          w = name.indexOf(':');

	          if (w !== -1) {

	            // normalize ns attribute name
	            if (!(nsName = nsMatrix[name.substring(0, w)])) {
	              handleWarning(missingNamespaceForPrefix(name.substring(0, w)));
	              continue;
	            }

	            name = defaultAlias === nsName
	              ? name.substr(w + 1)
	              : nsName + name.substr(w);

	            // end: normalize ns attribute name

	            // normalize xsi:type ns attribute value
	            if (name === XSI_TYPE) {
	              w = value.indexOf(':');

	              if (w !== -1) {
	                nsName = value.substring(0, w);

	                // handle default prefixes, i.e. xs:String gracefully
	                nsName = nsMatrix[nsName] || nsName;
	                value = nsName + value.substring(w);
	              } else {
	                value = defaultAlias + ':' + value;
	              }
	            }

	            // end: normalize xsi:type ns attribute value
	          }

	          attrs[name] = value;
	        }

	        // end: normalize captured attributes
	      }

	      return cachedAttrs = attrs;
	    }

	    /**
	     * Extract the parse context { line, column, part }
	     * from the current parser position.
	     *
	     * @return {Object} parse context
	     */
	    function getParseContext() {
	      var splitsRe = /(\r\n|\r|\n)/g;

	      var line = 0;
	      var column = 0;
	      var startOfLine = 0;
	      var endOfLine = j;
	      var match;
	      var data;

	      while (i >= startOfLine) {

	        match = splitsRe.exec(xml);

	        if (!match) {
	          break;
	        }

	        // end of line = (break idx + break chars)
	        endOfLine = match[0].length + match.index;

	        if (endOfLine > i) {
	          break;
	        }

	        // advance to next line
	        line += 1;

	        startOfLine = endOfLine;
	      }

	      // EOF errors
	      if (i == -1) {
	        column = endOfLine;
	        data = xml.substring(j);
	      } else

	      // start errors
	      if (j === 0) {
	        data = xml.substring(j, i);
	      }

	      // other errors
	      else {
	        column = i - startOfLine;
	        data = (j == -1 ? xml.substring(i) : xml.substring(i, j + 1));
	      }

	      return {
	        'data': data,
	        'line': line,
	        'column': column
	      };
	    }

	    getContext = getParseContext;


	    if (proxy) {
	      elementProxy = Object.create({}, {
	        'name': getter(function() {
	          return elementName;
	        }),
	        'originalName': getter(function() {
	          return _elementName;
	        }),
	        'attrs': getter(getAttrs),
	        'ns': getter(function() {
	          return nsMatrix;
	        })
	      });
	    }

	    // actual parse logic
	    while (j !== -1) {

	      if (xml.charCodeAt(j) === 60) { // "<"
	        i = j;
	      } else {
	        i = xml.indexOf('<', j);
	      }

	      // parse end
	      if (i === -1) {
	        if (nodeStack.length) {
	          return handleError('unexpected end of file');
	        }

	        if (j === 0) {
	          return handleError('missing start tag');
	        }

	        if (j < xml.length) {
	          if (xml.substring(j).trim()) {
	            handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);
	          }
	        }

	        return;
	      }

	      // parse text
	      if (j !== i) {

	        if (nodeStack.length) {
	          if (onText) {
	            onText(xml.substring(j, i), decodeEntities, getContext);

	            if (parseStop) {
	              return;
	            }
	          }
	        } else {
	          if (xml.substring(j, i).trim()) {
	            handleWarning(NON_WHITESPACE_OUTSIDE_ROOT_NODE);

	            if (parseStop) {
	              return;
	            }
	          }
	        }
	      }

	      w = xml.charCodeAt(i+1);

	      // parse comments + CDATA
	      if (w === 33) { // "!"
	        q = xml.charCodeAt(i+2);

	        // CDATA section
	        if (q === 91 && xml.substr(i + 3, 6) === 'CDATA[') { // 91 == "["
	          j = xml.indexOf(']]>', i);
	          if (j === -1) {
	            return handleError('unclosed cdata');
	          }

	          if (onCDATA) {
	            onCDATA(xml.substring(i + 9, j), getContext);
	            if (parseStop) {
	              return;
	            }
	          }

	          j += 3;
	          continue;
	        }

	        // comment
	        if (q === 45 && xml.charCodeAt(i + 3) === 45) { // 45 == "-"
	          j = xml.indexOf('-->', i);
	          if (j === -1) {
	            return handleError('unclosed comment');
	          }


	          if (onComment) {
	            onComment(xml.substring(i + 4, j), decodeEntities, getContext);
	            if (parseStop) {
	              return;
	            }
	          }

	          j += 3;
	          continue;
	        }
	      }

	      // parse question <? ... ?>
	      if (w === 63) { // "?"
	        j = xml.indexOf('?>', i);
	        if (j === -1) {
	          return handleError('unclosed question');
	        }

	        if (onQuestion) {
	          onQuestion(xml.substring(i, j + 2), getContext);
	          if (parseStop) {
	            return;
	          }
	        }

	        j += 2;
	        continue;
	      }

	      // find matching closing tag for attention or standard tags
	      // for that we must skip through attribute values
	      // (enclosed in single or double quotes)
	      for (x = i + 1; ; x++) {
	        v = xml.charCodeAt(x);
	        if (isNaN(v)) {
	          j = -1;
	          return handleError('unclosed tag');
	        }

	        // [10] AttValue ::= '"' ([^<&"] | Reference)* '"' | "'" ([^<&'] | Reference)* "'"
	        // skips the quoted string
	        // (double quotes) does not appear in a literal enclosed by (double quotes)
	        // (single quote) does not appear in a literal enclosed by (single quote)
	        if (v === 34) { //  '"'
	          q = xml.indexOf('"', x + 1);
	          x = q !== -1 ? q : x;
	        } else if (v === 39) { // "'"
	          q = xml.indexOf("'", x + 1);
	          x = q !== -1 ? q : x;
	        } else if (v === 62) { // '>'
	          j = x;
	          break;
	        }
	      }


	      // parse attention <! ...>
	      // previously comment and CDATA have already been parsed
	      if (w === 33) { // "!"

	        if (onAttention) {
	          onAttention(xml.substring(i, j + 1), decodeEntities, getContext);
	          if (parseStop) {
	            return;
	          }
	        }

	        j += 1;
	        continue;
	      }

	      // don't process attributes;
	      // there are none
	      cachedAttrs = {};

	      // if (xml.charCodeAt(i+1) === 47) { // </...
	      if (w === 47) { // </...
	        tagStart = false;
	        tagEnd = true;

	        if (!nodeStack.length) {
	          return handleError('missing open tag');
	        }

	        // verify open <-> close tag match
	        x = elementName = nodeStack.pop();
	        q = i + 2 + x.length;

	        if (xml.substring(i + 2, q) !== x) {
	          return handleError('closing tag mismatch');
	        }

	        // verify chars in close tag
	        for (; q < j; q++) {
	          w = xml.charCodeAt(q);

	          if (w === 32 || (w > 8 && w < 14)) { // \f\n\r\t\v space
	            continue;
	          }

	          return handleError('close tag');
	        }

	      } else {
	        if (xml.charCodeAt(j - 1) === 47) { // .../>
	          x = elementName = xml.substring(i + 1, j - 1);

	          tagStart = true;
	          tagEnd = true;

	        } else {
	          x = elementName = xml.substring(i + 1, j);

	          tagStart = true;
	          tagEnd = false;
	        }

	        if (!(w > 96 && w < 123 || w > 64 && w < 91 || w === 95 || w === 58)) { // char 95"_" 58":"
	          return handleError('illegal first char nodeName');
	        }

	        for (q = 1, y = x.length; q < y; q++) {
	          w = x.charCodeAt(q);

	          if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w == 46) {
	            continue;
	          }

	          if (w === 32 || (w < 14 && w > 8)) { // \f\n\r\t\v space
	            elementName = x.substring(0, q);

	            // maybe there are attributes
	            cachedAttrs = null;
	            break;
	          }

	          return handleError('invalid nodeName');
	        }

	        if (!tagEnd) {
	          nodeStack.push(elementName);
	        }
	      }

	      if (isNamespace) {

	        _nsMatrix = nsMatrix;

	        if (tagStart) {

	          // remember old namespace
	          // unless we're self-closing
	          if (!tagEnd) {
	            nsMatrixStack.push(_nsMatrix);
	          }

	          if (cachedAttrs === null) {

	            // quick check, whether there may be namespace
	            // declarations on the node; if that is the case
	            // we need to eagerly parse the node attributes
	            if ((maybeNS = x.indexOf('xmlns', q) !== -1)) {
	              attrsStart = q;
	              attrsString = x;

	              getAttrs();

	              maybeNS = false;
	            }
	          }
	        }

	        _elementName = elementName;

	        w = elementName.indexOf(':');
	        if (w !== -1) {
	          xmlns = nsMatrix[elementName.substring(0, w)];

	          // prefix given; namespace must exist
	          if (!xmlns) {
	            return handleError('missing namespace on <' + _elementName + '>');
	          }

	          elementName = elementName.substr(w + 1);
	        } else {
	          xmlns = nsMatrix['xmlns'];

	          // if no default namespace is defined,
	          // we'll import the element as anonymous.
	          //
	          // it is up to users to correct that to the document defined
	          // targetNamespace, or whatever their undersanding of the
	          // XML spec mandates.
	        }

	        // adjust namespace prefixs as configured
	        if (xmlns) {
	          elementName = xmlns + ':' + elementName;
	        }

	      }

	      if (tagStart) {
	        attrsStart = q;
	        attrsString = x;

	        if (onOpenTag) {
	          if (proxy) {
	            onOpenTag(elementProxy, decodeEntities, tagEnd, getContext);
	          } else {
	            onOpenTag(elementName, getAttrs, decodeEntities, tagEnd, getContext);
	          }

	          if (parseStop) {
	            return;
	          }
	        }

	      }

	      if (tagEnd) {

	        if (onCloseTag) {
	          onCloseTag(proxy ? elementProxy : elementName, decodeEntities, tagStart, getContext);

	          if (parseStop) {
	            return;
	          }
	        }

	        // restore old namespace
	        if (isNamespace) {
	          if (!tagStart) {
	            nsMatrix = nsMatrixStack.pop();
	          } else {
	            nsMatrix = _nsMatrix;
	          }
	        }
	      }

	      j += 1;
	    }
	  } /** end parse */

	}

	function hasLowerCaseAlias(pkg) {
	  return pkg.xml && pkg.xml.tagAlias === 'lowerCase';
	}

	var DEFAULT_NS_MAP = {
	  'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
	  'xml': 'http://www.w3.org/XML/1998/namespace'
	};

	var XSI_TYPE$1 = 'xsi:type';

	function serializeFormat(element) {
	  return element.xml && element.xml.serialize;
	}

	function serializeAsType(element) {
	  return serializeFormat(element) === XSI_TYPE$1;
	}

	function serializeAsProperty(element) {
	  return serializeFormat(element) === 'property';
	}

	function capitalize(str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	}

	function aliasToName(aliasNs, pkg) {

	  if (!hasLowerCaseAlias(pkg)) {
	    return aliasNs.name;
	  }

	  return aliasNs.prefix + ':' + capitalize(aliasNs.localName);
	}

	function prefixedToName(nameNs, pkg) {

	  var name = nameNs.name,
	      localName = nameNs.localName;

	  var typePrefix = pkg.xml && pkg.xml.typePrefix;

	  if (typePrefix && localName.indexOf(typePrefix) === 0) {
	    return nameNs.prefix + ':' + localName.slice(typePrefix.length);
	  } else {
	    return name;
	  }
	}

	function normalizeXsiTypeName(name, model) {

	  var nameNs = parseName(name);
	  var pkg = model.getPackage(nameNs.prefix);

	  return prefixedToName(nameNs, pkg);
	}

	function error$1(message) {
	  return new Error(message);
	}

	/**
	 * Get the moddle descriptor for a given instance or type.
	 *
	 * @param  {ModdleElement|Function} element
	 *
	 * @return {Object} the moddle descriptor
	 */
	function getModdleDescriptor(element) {
	  return element.$descriptor;
	}


	/**
	 * A parse context.
	 *
	 * @class
	 *
	 * @param {Object} options
	 * @param {ElementHandler} options.rootHandler the root handler for parsing a document
	 * @param {boolean} [options.lax=false] whether or not to ignore invalid elements
	 */
	function Context(options) {

	  /**
	   * @property {ElementHandler} rootHandler
	   */

	  /**
	   * @property {Boolean} lax
	   */

	  assign(this, options);

	  this.elementsById = {};
	  this.references = [];
	  this.warnings = [];

	  /**
	   * Add an unresolved reference.
	   *
	   * @param {Object} reference
	   */
	  this.addReference = function(reference) {
	    this.references.push(reference);
	  };

	  /**
	   * Add a processed element.
	   *
	   * @param {ModdleElement} element
	   */
	  this.addElement = function(element) {

	    if (!element) {
	      throw error$1('expected element');
	    }

	    var elementsById = this.elementsById;

	    var descriptor = getModdleDescriptor(element);

	    var idProperty = descriptor.idProperty,
	        id;

	    if (idProperty) {
	      id = element.get(idProperty.name);

	      if (id) {

	        // for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar
	        if (!/^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i.test(id)) {
	          throw new Error('illegal ID <' + id + '>');
	        }

	        if (elementsById[id]) {
	          throw error$1('duplicate ID <' + id + '>');
	        }

	        elementsById[id] = element;
	      }
	    }
	  };

	  /**
	   * Add an import warning.
	   *
	   * @param {Object} warning
	   * @param {String} warning.message
	   * @param {Error} [warning.error]
	   */
	  this.addWarning = function(warning) {
	    this.warnings.push(warning);
	  };
	}

	function BaseHandler() {}

	BaseHandler.prototype.handleEnd = function() {};
	BaseHandler.prototype.handleText = function() {};
	BaseHandler.prototype.handleNode = function() {};


	/**
	 * A simple pass through handler that does nothing except for
	 * ignoring all input it receives.
	 *
	 * This is used to ignore unknown elements and
	 * attributes.
	 */
	function NoopHandler() { }

	NoopHandler.prototype = Object.create(BaseHandler.prototype);

	NoopHandler.prototype.handleNode = function() {
	  return this;
	};

	function BodyHandler() {}

	BodyHandler.prototype = Object.create(BaseHandler.prototype);

	BodyHandler.prototype.handleText = function(text) {
	  this.body = (this.body || '') + text;
	};

	function ReferenceHandler(property, context) {
	  this.property = property;
	  this.context = context;
	}

	ReferenceHandler.prototype = Object.create(BodyHandler.prototype);

	ReferenceHandler.prototype.handleNode = function(node) {

	  if (this.element) {
	    throw error$1('expected no sub nodes');
	  } else {
	    this.element = this.createReference(node);
	  }

	  return this;
	};

	ReferenceHandler.prototype.handleEnd = function() {
	  this.element.id = this.body;
	};

	ReferenceHandler.prototype.createReference = function(node) {
	  return {
	    property: this.property.ns.name,
	    id: ''
	  };
	};

	function ValueHandler(propertyDesc, element) {
	  this.element = element;
	  this.propertyDesc = propertyDesc;
	}

	ValueHandler.prototype = Object.create(BodyHandler.prototype);

	ValueHandler.prototype.handleEnd = function() {

	  var value = this.body || '',
	      element = this.element,
	      propertyDesc = this.propertyDesc;

	  value = coerceType(propertyDesc.type, value);

	  if (propertyDesc.isMany) {
	    element.get(propertyDesc.name).push(value);
	  } else {
	    element.set(propertyDesc.name, value);
	  }
	};


	function BaseElementHandler() {}

	BaseElementHandler.prototype = Object.create(BodyHandler.prototype);

	BaseElementHandler.prototype.handleNode = function(node) {
	  var parser = this,
	      element = this.element;

	  if (!element) {
	    element = this.element = this.createElement(node);

	    this.context.addElement(element);
	  } else {
	    parser = this.handleChild(node);
	  }

	  return parser;
	};

	/**
	 * @class Reader.ElementHandler
	 *
	 */
	function ElementHandler(model, typeName, context) {
	  this.model = model;
	  this.type = model.getType(typeName);
	  this.context = context;
	}

	ElementHandler.prototype = Object.create(BaseElementHandler.prototype);

	ElementHandler.prototype.addReference = function(reference) {
	  this.context.addReference(reference);
	};

	ElementHandler.prototype.handleText = function(text) {

	  var element = this.element,
	      descriptor = getModdleDescriptor(element),
	      bodyProperty = descriptor.bodyProperty;

	  if (!bodyProperty) {
	    throw error$1('unexpected body text <' + text + '>');
	  }

	  BodyHandler.prototype.handleText.call(this, text);
	};

	ElementHandler.prototype.handleEnd = function() {

	  var value = this.body,
	      element = this.element,
	      descriptor = getModdleDescriptor(element),
	      bodyProperty = descriptor.bodyProperty;

	  if (bodyProperty && value !== undefined) {
	    value = coerceType(bodyProperty.type, value);
	    element.set(bodyProperty.name, value);
	  }
	};

	/**
	 * Create an instance of the model from the given node.
	 *
	 * @param  {Element} node the xml node
	 */
	ElementHandler.prototype.createElement = function(node) {
	  var attributes = node.attributes,
	      Type = this.type,
	      descriptor = getModdleDescriptor(Type),
	      context = this.context,
	      instance = new Type({}),
	      model = this.model,
	      propNameNs;

	  forEach(attributes, function(value, name) {

	    var prop = descriptor.propertiesByName[name],
	        values;

	    if (prop && prop.isReference) {

	      if (!prop.isMany) {
	        context.addReference({
	          element: instance,
	          property: prop.ns.name,
	          id: value
	        });
	      } else {

	        // IDREFS: parse references as whitespace-separated list
	        values = value.split(' ');

	        forEach(values, function(v) {
	          context.addReference({
	            element: instance,
	            property: prop.ns.name,
	            id: v
	          });
	        });
	      }

	    } else {
	      if (prop) {
	        value = coerceType(prop.type, value);
	      } else
	      if (name !== 'xmlns') {
	        propNameNs = parseName(name, descriptor.ns.prefix);

	        // check whether attribute is defined in a well-known namespace
	        // if that is the case we emit a warning to indicate potential misuse
	        if (model.getPackage(propNameNs.prefix)) {

	          context.addWarning({
	            message: 'unknown attribute <' + name + '>',
	            element: instance,
	            property: name,
	            value: value
	          });
	        }
	      }

	      instance.set(name, value);
	    }
	  });

	  return instance;
	};

	ElementHandler.prototype.getPropertyForNode = function(node) {

	  var name = node.name;
	  var nameNs = parseName(name);

	  var type = this.type,
	      model = this.model,
	      descriptor = getModdleDescriptor(type);

	  var propertyName = nameNs.name,
	      property = descriptor.propertiesByName[propertyName],
	      elementTypeName,
	      elementType;

	  // search for properties by name first

	  if (property && !property.isAttr) {

	    if (serializeAsType(property)) {
	      elementTypeName = node.attributes[XSI_TYPE$1];

	      // xsi type is optional, if it does not exists the
	      // default type is assumed
	      if (elementTypeName) {

	        // take possible type prefixes from XML
	        // into account, i.e.: xsi:type="t{ActualType}"
	        elementTypeName = normalizeXsiTypeName(elementTypeName, model);

	        elementType = model.getType(elementTypeName);

	        return assign({}, property, {
	          effectiveType: getModdleDescriptor(elementType).name
	        });
	      }
	    }

	    // search for properties by name first
	    return property;
	  }

	  var pkg = model.getPackage(nameNs.prefix);

	  if (pkg) {
	    elementTypeName = aliasToName(nameNs, pkg);
	    elementType = model.getType(elementTypeName);

	    // search for collection members later
	    property = find(descriptor.properties, function(p) {
	      return !p.isVirtual && !p.isReference && !p.isAttribute && elementType.hasType(p.type);
	    });

	    if (property) {
	      return assign({}, property, {
	        effectiveType: getModdleDescriptor(elementType).name
	      });
	    }
	  } else {

	    // parse unknown element (maybe extension)
	    property = find(descriptor.properties, function(p) {
	      return !p.isReference && !p.isAttribute && p.type === 'Element';
	    });

	    if (property) {
	      return property;
	    }
	  }

	  throw error$1('unrecognized element <' + nameNs.name + '>');
	};

	ElementHandler.prototype.toString = function() {
	  return 'ElementDescriptor[' + getModdleDescriptor(this.type).name + ']';
	};

	ElementHandler.prototype.valueHandler = function(propertyDesc, element) {
	  return new ValueHandler(propertyDesc, element);
	};

	ElementHandler.prototype.referenceHandler = function(propertyDesc) {
	  return new ReferenceHandler(propertyDesc, this.context);
	};

	ElementHandler.prototype.handler = function(type) {
	  if (type === 'Element') {
	    return new GenericElementHandler(this.model, type, this.context);
	  } else {
	    return new ElementHandler(this.model, type, this.context);
	  }
	};

	/**
	 * Handle the child element parsing
	 *
	 * @param  {Element} node the xml node
	 */
	ElementHandler.prototype.handleChild = function(node) {
	  var propertyDesc, type, element, childHandler;

	  propertyDesc = this.getPropertyForNode(node);
	  element = this.element;

	  type = propertyDesc.effectiveType || propertyDesc.type;

	  if (isSimple(type)) {
	    return this.valueHandler(propertyDesc, element);
	  }

	  if (propertyDesc.isReference) {
	    childHandler = this.referenceHandler(propertyDesc).handleNode(node);
	  } else {
	    childHandler = this.handler(type).handleNode(node);
	  }

	  var newElement = childHandler.element;

	  // child handles may decide to skip elements
	  // by not returning anything
	  if (newElement !== undefined) {

	    if (propertyDesc.isMany) {
	      element.get(propertyDesc.name).push(newElement);
	    } else {
	      element.set(propertyDesc.name, newElement);
	    }

	    if (propertyDesc.isReference) {
	      assign(newElement, {
	        element: element
	      });

	      this.context.addReference(newElement);
	    } else {

	      // establish child -> parent relationship
	      newElement.$parent = element;
	    }
	  }

	  return childHandler;
	};

	/**
	 * An element handler that performs special validation
	 * to ensure the node it gets initialized with matches
	 * the handlers type (namespace wise).
	 *
	 * @param {Moddle} model
	 * @param {String} typeName
	 * @param {Context} context
	 */
	function RootElementHandler(model, typeName, context) {
	  ElementHandler.call(this, model, typeName, context);
	}

	RootElementHandler.prototype = Object.create(ElementHandler.prototype);

	RootElementHandler.prototype.createElement = function(node) {

	  var name = node.name,
	      nameNs = parseName(name),
	      model = this.model,
	      type = this.type,
	      pkg = model.getPackage(nameNs.prefix),
	      typeName = pkg && aliasToName(nameNs, pkg) || name;

	  // verify the correct namespace if we parse
	  // the first element in the handler tree
	  //
	  // this ensures we don't mistakenly import wrong namespace elements
	  if (!type.hasType(typeName)) {
	    throw error$1('unexpected element <' + node.originalName + '>');
	  }

	  return ElementHandler.prototype.createElement.call(this, node);
	};


	function GenericElementHandler(model, typeName, context) {
	  this.model = model;
	  this.context = context;
	}

	GenericElementHandler.prototype = Object.create(BaseElementHandler.prototype);

	GenericElementHandler.prototype.createElement = function(node) {

	  var name = node.name,
	      ns = parseName(name),
	      prefix = ns.prefix,
	      uri = node.ns[prefix + '$uri'],
	      attributes = node.attributes;

	  return this.model.createAny(name, uri, attributes);
	};

	GenericElementHandler.prototype.handleChild = function(node) {

	  var handler = new GenericElementHandler(this.model, 'Element', this.context).handleNode(node),
	      element = this.element;

	  var newElement = handler.element,
	      children;

	  if (newElement !== undefined) {
	    children = element.$children = element.$children || [];
	    children.push(newElement);

	    // establish child -> parent relationship
	    newElement.$parent = element;
	  }

	  return handler;
	};

	GenericElementHandler.prototype.handleEnd = function() {
	  if (this.body) {
	    this.element.$body = this.body;
	  }
	};

	/**
	 * A reader for a meta-model
	 *
	 * @param {Object} options
	 * @param {Model} options.model used to read xml files
	 * @param {Boolean} options.lax whether to make parse errors warnings
	 */
	function Reader(options) {

	  if (options instanceof Moddle) {
	    options = {
	      model: options
	    };
	  }

	  assign(this, { lax: false }, options);
	}

	/**
	 * The fromXML result.
	 *
	 * @typedef {Object} ParseResult
	 *
	 * @property {ModdleElement} rootElement
	 * @property {Array<Object>} references
	 * @property {Array<Error>} warnings
	 * @property {Object} elementsById - a mapping containing each ID -> ModdleElement
	 */

	/**
	 * The fromXML result.
	 *
	 * @typedef {Error} ParseError
	 *
	 * @property {Array<Error>} warnings
	 */

	/**
	 * Parse the given XML into a moddle document tree.
	 *
	 * @param {String} xml
	 * @param {ElementHandler|Object} options or rootHandler
	 *
	 * @returns {Promise<ParseResult, ParseError>}
	 */
	Reader.prototype.fromXML = function(xml, options, done) {

	  var rootHandler = options.rootHandler;

	  if (options instanceof ElementHandler) {

	    // root handler passed via (xml, { rootHandler: ElementHandler }, ...)
	    rootHandler = options;
	    options = {};
	  } else {
	    if (typeof options === 'string') {

	      // rootHandler passed via (xml, 'someString', ...)
	      rootHandler = this.handler(options);
	      options = {};
	    } else if (typeof rootHandler === 'string') {

	      // rootHandler passed via (xml, { rootHandler: 'someString' }, ...)
	      rootHandler = this.handler(rootHandler);
	    }
	  }

	  var model = this.model,
	      lax = this.lax;

	  var context = new Context(assign({}, options, { rootHandler: rootHandler })),
	      parser = new Parser({ proxy: true }),
	      stack = createStack();

	  rootHandler.context = context;

	  // push root handler
	  stack.push(rootHandler);


	  /**
	   * Handle error.
	   *
	   * @param  {Error} err
	   * @param  {Function} getContext
	   * @param  {boolean} lax
	   *
	   * @return {boolean} true if handled
	   */
	  function handleError(err, getContext, lax) {

	    var ctx = getContext();

	    var line = ctx.line,
	        column = ctx.column,
	        data = ctx.data;

	    // we receive the full context data here,
	    // for elements trim down the information
	    // to the tag name, only
	    if (data.charAt(0) === '<' && data.indexOf(' ') !== -1) {
	      data = data.slice(0, data.indexOf(' ')) + '>';
	    }

	    var message =
	      'unparsable content ' + (data ? data + ' ' : '') + 'detected\n\t' +
	        'line: ' + line + '\n\t' +
	        'column: ' + column + '\n\t' +
	        'nested error: ' + err.message;

	    if (lax) {
	      context.addWarning({
	        message: message,
	        error: err
	      });

	      return true;
	    } else {
	      throw error$1(message);
	    }
	  }

	  function handleWarning(err, getContext) {

	    // just like handling errors in <lax=true> mode
	    return handleError(err, getContext, true);
	  }

	  /**
	   * Resolve collected references on parse end.
	   */
	  function resolveReferences() {

	    var elementsById = context.elementsById;
	    var references = context.references;

	    var i, r;

	    for (i = 0; (r = references[i]); i++) {
	      var element = r.element;
	      var reference = elementsById[r.id];
	      var property = getModdleDescriptor(element).propertiesByName[r.property];

	      if (!reference) {
	        context.addWarning({
	          message: 'unresolved reference <' + r.id + '>',
	          element: r.element,
	          property: r.property,
	          value: r.id
	        });
	      }

	      if (property.isMany) {
	        var collection = element.get(property.name),
	            idx = collection.indexOf(r);

	        // we replace an existing place holder (idx != -1) or
	        // append to the collection instead
	        if (idx === -1) {
	          idx = collection.length;
	        }

	        if (!reference) {

	          // remove unresolvable reference
	          collection.splice(idx, 1);
	        } else {

	          // add or update reference in collection
	          collection[idx] = reference;
	        }
	      } else {
	        element.set(property.name, reference);
	      }
	    }
	  }

	  function handleClose() {
	    stack.pop().handleEnd();
	  }

	  var PREAMBLE_START_PATTERN = /^<\?xml /i;

	  var ENCODING_PATTERN = / encoding="([^"]+)"/i;

	  var UTF_8_PATTERN = /^utf-8$/i;

	  function handleQuestion(question) {

	    if (!PREAMBLE_START_PATTERN.test(question)) {
	      return;
	    }

	    var match = ENCODING_PATTERN.exec(question);
	    var encoding = match && match[1];

	    if (!encoding || UTF_8_PATTERN.test(encoding)) {
	      return;
	    }

	    context.addWarning({
	      message:
	        'unsupported document encoding <' + encoding + '>, ' +
	        'falling back to UTF-8'
	    });
	  }

	  function handleOpen(node, getContext) {
	    var handler = stack.peek();

	    try {
	      stack.push(handler.handleNode(node));
	    } catch (err) {

	      if (handleError(err, getContext, lax)) {
	        stack.push(new NoopHandler());
	      }
	    }
	  }

	  function handleCData(text, getContext) {

	    try {
	      stack.peek().handleText(text);
	    } catch (err) {
	      handleWarning(err, getContext);
	    }
	  }

	  function handleText(text, getContext) {

	    // strip whitespace only nodes, i.e. before
	    // <!CDATA[ ... ]> sections and in between tags
	    text = text.trim();

	    if (!text) {
	      return;
	    }

	    handleCData(text, getContext);
	  }

	  var uriMap = model.getPackages().reduce(function(uriMap, p) {
	    uriMap[p.uri] = p.prefix;

	    return uriMap;
	  }, {
	    'http://www.w3.org/XML/1998/namespace': 'xml' // add default xml ns
	  });
	  parser
	    .ns(uriMap)
	    .on('openTag', function(obj, decodeStr, selfClosing, getContext) {

	      // gracefully handle unparsable attributes (attrs=false)
	      var attrs = obj.attrs || {};

	      var decodedAttrs = Object.keys(attrs).reduce(function(d, key) {
	        var value = decodeStr(attrs[key]);

	        d[key] = value;

	        return d;
	      }, {});

	      var node = {
	        name: obj.name,
	        originalName: obj.originalName,
	        attributes: decodedAttrs,
	        ns: obj.ns
	      };

	      handleOpen(node, getContext);
	    })
	    .on('question', handleQuestion)
	    .on('closeTag', handleClose)
	    .on('cdata', handleCData)
	    .on('text', function(text, decodeEntities, getContext) {
	      handleText(decodeEntities(text), getContext);
	    })
	    .on('error', handleError)
	    .on('warn', handleWarning);

	  // async XML parsing to make sure the execution environment
	  // (node or brower) is kept responsive and that certain optimization
	  // strategies can kick in.
	  return new Promise(function(resolve, reject) {

	    var err;

	    try {
	      parser.parse(xml);

	      resolveReferences();
	    } catch (e) {
	      err = e;
	    }

	    var rootElement = rootHandler.element;

	    if (!err && !rootElement) {
	      err = error$1('failed to parse document as <' + rootHandler.type.$descriptor.name + '>');
	    }

	    var warnings = context.warnings;
	    var references = context.references;
	    var elementsById = context.elementsById;

	    if (err) {
	      err.warnings = warnings;

	      return reject(err);
	    } else {
	      return resolve({
	        rootElement: rootElement,
	        elementsById: elementsById,
	        references: references,
	        warnings: warnings
	      });
	    }
	  });
	};

	Reader.prototype.handler = function(name) {
	  return new RootElementHandler(this.model, name);
	};


	// helpers //////////////////////////

	function createStack() {
	  var stack = [];

	  Object.defineProperty(stack, 'peek', {
	    value: function() {
	      return this[this.length - 1];
	    }
	  });

	  return stack;
	}

	var XML_PREAMBLE = '<?xml version="1.0" encoding="UTF-8"?>\n';

	var ESCAPE_ATTR_CHARS = /<|>|'|"|&|\n\r|\n/g;
	var ESCAPE_CHARS = /<|>|&/g;


	function Namespaces(parent) {

	  var prefixMap = {};
	  var uriMap = {};
	  var used = {};

	  var wellknown = [];
	  var custom = [];

	  // API

	  this.byUri = function(uri) {
	    return uriMap[uri] || (
	      parent && parent.byUri(uri)
	    );
	  };

	  this.add = function(ns, isWellknown) {

	    uriMap[ns.uri] = ns;

	    if (isWellknown) {
	      wellknown.push(ns);
	    } else {
	      custom.push(ns);
	    }

	    this.mapPrefix(ns.prefix, ns.uri);
	  };

	  this.uriByPrefix = function(prefix) {
	    return prefixMap[prefix || 'xmlns'];
	  };

	  this.mapPrefix = function(prefix, uri) {
	    prefixMap[prefix || 'xmlns'] = uri;
	  };

	  this.getNSKey = function(ns) {
	    return (ns.prefix !== undefined) ? (ns.uri + '|' + ns.prefix) : ns.uri;
	  };

	  this.logUsed = function(ns) {

	    var uri = ns.uri;
	    var nsKey = this.getNSKey(ns);

	    used[nsKey] = this.byUri(uri);

	    // Inform parent recursively about the usage of this NS
	    if (parent) {
	      parent.logUsed(ns);
	    }
	  };

	  this.getUsed = function(ns) {

	    function isUsed(ns) {
	      var nsKey = self.getNSKey(ns);

	      return used[nsKey];
	    }

	    var self = this;

	    var allNs = [].concat(wellknown, custom);

	    return allNs.filter(isUsed);
	  };

	}

	function lower(string) {
	  return string.charAt(0).toLowerCase() + string.slice(1);
	}

	function nameToAlias(name, pkg) {
	  if (hasLowerCaseAlias(pkg)) {
	    return lower(name);
	  } else {
	    return name;
	  }
	}

	function inherits(ctor, superCtor) {
	  ctor.super_ = superCtor;
	  ctor.prototype = Object.create(superCtor.prototype, {
	    constructor: {
	      value: ctor,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	}

	function nsName(ns) {
	  if (isString(ns)) {
	    return ns;
	  } else {
	    return (ns.prefix ? ns.prefix + ':' : '') + ns.localName;
	  }
	}

	function getNsAttrs(namespaces) {

	  return map(namespaces.getUsed(), function(ns) {
	    var name = 'xmlns' + (ns.prefix ? ':' + ns.prefix : '');
	    return { name: name, value: ns.uri };
	  });

	}

	function getElementNs(ns, descriptor) {
	  if (descriptor.isGeneric) {
	    return assign({ localName: descriptor.ns.localName }, ns);
	  } else {
	    return assign({ localName: nameToAlias(descriptor.ns.localName, descriptor.$pkg) }, ns);
	  }
	}

	function getPropertyNs(ns, descriptor) {
	  return assign({ localName: descriptor.ns.localName }, ns);
	}

	function getSerializableProperties(element) {
	  var descriptor = element.$descriptor;

	  return filter(descriptor.properties, function(p) {
	    var name = p.name;

	    if (p.isVirtual) {
	      return false;
	    }

	    // do not serialize defaults
	    if (!has(element, name)) {
	      return false;
	    }

	    var value = element[name];

	    // do not serialize default equals
	    if (value === p.default) {
	      return false;
	    }

	    // do not serialize null properties
	    if (value === null) {
	      return false;
	    }

	    return p.isMany ? value.length : true;
	  });
	}

	var ESCAPE_ATTR_MAP = {
	  '\n': '#10',
	  '\n\r': '#10',
	  '"': '#34',
	  '\'': '#39',
	  '<': '#60',
	  '>': '#62',
	  '&': '#38'
	};

	var ESCAPE_MAP = {
	  '<': 'lt',
	  '>': 'gt',
	  '&': 'amp'
	};

	function escape$1(str, charPattern, replaceMap) {

	  // ensure we are handling strings here
	  str = isString(str) ? str : '' + str;

	  return str.replace(charPattern, function(s) {
	    return '&' + replaceMap[s] + ';';
	  });
	}

	/**
	 * Escape a string attribute to not contain any bad values (line breaks, '"', ...)
	 *
	 * @param {String} str the string to escape
	 * @return {String} the escaped string
	 */
	function escapeAttr(str) {
	  return escape$1(str, ESCAPE_ATTR_CHARS, ESCAPE_ATTR_MAP);
	}

	function escapeBody(str) {
	  return escape$1(str, ESCAPE_CHARS, ESCAPE_MAP);
	}

	function filterAttributes(props) {
	  return filter(props, function(p) { return p.isAttr; });
	}

	function filterContained(props) {
	  return filter(props, function(p) { return !p.isAttr; });
	}


	function ReferenceSerializer(tagName) {
	  this.tagName = tagName;
	}

	ReferenceSerializer.prototype.build = function(element) {
	  this.element = element;
	  return this;
	};

	ReferenceSerializer.prototype.serializeTo = function(writer) {
	  writer
	    .appendIndent()
	    .append('<' + this.tagName + '>' + this.element.id + '</' + this.tagName + '>')
	    .appendNewLine();
	};

	function BodySerializer() {}

	BodySerializer.prototype.serializeValue =
	BodySerializer.prototype.serializeTo = function(writer) {
	  writer.append(
	    this.escape
	      ? escapeBody(this.value)
	      : this.value
	  );
	};

	BodySerializer.prototype.build = function(prop, value) {
	  this.value = value;

	  if (prop.type === 'String' && value.search(ESCAPE_CHARS) !== -1) {
	    this.escape = true;
	  }

	  return this;
	};

	function ValueSerializer(tagName) {
	  this.tagName = tagName;
	}

	inherits(ValueSerializer, BodySerializer);

	ValueSerializer.prototype.serializeTo = function(writer) {

	  writer
	    .appendIndent()
	    .append('<' + this.tagName + '>');

	  this.serializeValue(writer);

	  writer
	    .append('</' + this.tagName + '>')
	    .appendNewLine();
	};

	function ElementSerializer(parent, propertyDescriptor) {
	  this.body = [];
	  this.attrs = [];

	  this.parent = parent;
	  this.propertyDescriptor = propertyDescriptor;
	}

	ElementSerializer.prototype.build = function(element) {
	  this.element = element;

	  var elementDescriptor = element.$descriptor,
	      propertyDescriptor = this.propertyDescriptor;

	  var otherAttrs,
	      properties;

	  var isGeneric = elementDescriptor.isGeneric;

	  if (isGeneric) {
	    otherAttrs = this.parseGeneric(element);
	  } else {
	    otherAttrs = this.parseNsAttributes(element);
	  }

	  if (propertyDescriptor) {
	    this.ns = this.nsPropertyTagName(propertyDescriptor);
	  } else {
	    this.ns = this.nsTagName(elementDescriptor);
	  }

	  // compute tag name
	  this.tagName = this.addTagName(this.ns);

	  if (!isGeneric) {
	    properties = getSerializableProperties(element);

	    this.parseAttributes(filterAttributes(properties));
	    this.parseContainments(filterContained(properties));
	  }

	  this.parseGenericAttributes(element, otherAttrs);

	  return this;
	};

	ElementSerializer.prototype.nsTagName = function(descriptor) {
	  var effectiveNs = this.logNamespaceUsed(descriptor.ns);
	  return getElementNs(effectiveNs, descriptor);
	};

	ElementSerializer.prototype.nsPropertyTagName = function(descriptor) {
	  var effectiveNs = this.logNamespaceUsed(descriptor.ns);
	  return getPropertyNs(effectiveNs, descriptor);
	};

	ElementSerializer.prototype.isLocalNs = function(ns) {
	  return ns.uri === this.ns.uri;
	};

	/**
	 * Get the actual ns attribute name for the given element.
	 *
	 * @param {Object} element
	 * @param {Boolean} [element.inherited=false]
	 *
	 * @return {Object} nsName
	 */
	ElementSerializer.prototype.nsAttributeName = function(element) {

	  var ns;

	  if (isString(element)) {
	    ns = parseName(element);
	  } else {
	    ns = element.ns;
	  }

	  // return just local name for inherited attributes
	  if (element.inherited) {
	    return { localName: ns.localName };
	  }

	  // parse + log effective ns
	  var effectiveNs = this.logNamespaceUsed(ns);

	  // LOG ACTUAL namespace use
	  this.getNamespaces().logUsed(effectiveNs);

	  // strip prefix if same namespace like parent
	  if (this.isLocalNs(effectiveNs)) {
	    return { localName: ns.localName };
	  } else {
	    return assign({ localName: ns.localName }, effectiveNs);
	  }
	};

	ElementSerializer.prototype.parseGeneric = function(element) {

	  var self = this,
	      body = this.body;

	  var attributes = [];

	  forEach(element, function(val, key) {

	    var nonNsAttr;

	    if (key === '$body') {
	      body.push(new BodySerializer().build({ type: 'String' }, val));
	    } else
	    if (key === '$children') {
	      forEach(val, function(child) {
	        body.push(new ElementSerializer(self).build(child));
	      });
	    } else
	    if (key.indexOf('$') !== 0) {
	      nonNsAttr = self.parseNsAttribute(element, key, val);

	      if (nonNsAttr) {
	        attributes.push({ name: key, value: val });
	      }
	    }
	  });

	  return attributes;
	};

	ElementSerializer.prototype.parseNsAttribute = function(element, name, value) {
	  var model = element.$model;

	  var nameNs = parseName(name);

	  var ns;

	  // parse xmlns:foo="http://foo.bar"
	  if (nameNs.prefix === 'xmlns') {
	    ns = { prefix: nameNs.localName, uri: value };
	  }

	  // parse xmlns="http://foo.bar"
	  if (!nameNs.prefix && nameNs.localName === 'xmlns') {
	    ns = { uri: value };
	  }

	  if (!ns) {
	    return {
	      name: name,
	      value: value
	    };
	  }

	  if (model && model.getPackage(value)) {

	    // register well known namespace
	    this.logNamespace(ns, true, true);
	  } else {

	    // log custom namespace directly as used
	    var actualNs = this.logNamespaceUsed(ns, true);

	    this.getNamespaces().logUsed(actualNs);
	  }
	};


	/**
	 * Parse namespaces and return a list of left over generic attributes
	 *
	 * @param  {Object} element
	 * @return {Array<Object>}
	 */
	ElementSerializer.prototype.parseNsAttributes = function(element, attrs) {
	  var self = this;

	  var genericAttrs = element.$attrs;

	  var attributes = [];

	  // parse namespace attributes first
	  // and log them. push non namespace attributes to a list
	  // and process them later
	  forEach(genericAttrs, function(value, name) {

	    var nonNsAttr = self.parseNsAttribute(element, name, value);

	    if (nonNsAttr) {
	      attributes.push(nonNsAttr);
	    }
	  });

	  return attributes;
	};

	ElementSerializer.prototype.parseGenericAttributes = function(element, attributes) {

	  var self = this;

	  forEach(attributes, function(attr) {

	    // do not serialize xsi:type attribute
	    // it is set manually based on the actual implementation type
	    if (attr.name === XSI_TYPE$1) {
	      return;
	    }

	    try {
	      self.addAttribute(self.nsAttributeName(attr.name), attr.value);
	    } catch (e) {
	      console.warn(
	        'missing namespace information for ',
	        attr.name, '=', attr.value, 'on', element,
	        e);
	    }
	  });
	};

	ElementSerializer.prototype.parseContainments = function(properties) {

	  var self = this,
	      body = this.body,
	      element = this.element;

	  forEach(properties, function(p) {
	    var value = element.get(p.name),
	        isReference = p.isReference,
	        isMany = p.isMany;

	    if (!isMany) {
	      value = [ value ];
	    }

	    if (p.isBody) {
	      body.push(new BodySerializer().build(p, value[0]));
	    } else
	    if (isSimple(p.type)) {
	      forEach(value, function(v) {
	        body.push(new ValueSerializer(self.addTagName(self.nsPropertyTagName(p))).build(p, v));
	      });
	    } else
	    if (isReference) {
	      forEach(value, function(v) {
	        body.push(new ReferenceSerializer(self.addTagName(self.nsPropertyTagName(p))).build(v));
	      });
	    } else {

	      // allow serialization via type
	      // rather than element name
	      var asType = serializeAsType(p),
	          asProperty = serializeAsProperty(p);

	      forEach(value, function(v) {
	        var serializer;

	        if (asType) {
	          serializer = new TypeSerializer(self, p);
	        } else
	        if (asProperty) {
	          serializer = new ElementSerializer(self, p);
	        } else {
	          serializer = new ElementSerializer(self);
	        }

	        body.push(serializer.build(v));
	      });
	    }
	  });
	};

	ElementSerializer.prototype.getNamespaces = function(local) {

	  var namespaces = this.namespaces,
	      parent = this.parent,
	      parentNamespaces;

	  if (!namespaces) {
	    parentNamespaces = parent && parent.getNamespaces();

	    if (local || !parentNamespaces) {
	      this.namespaces = namespaces = new Namespaces(parentNamespaces);
	    } else {
	      namespaces = parentNamespaces;
	    }
	  }

	  return namespaces;
	};

	ElementSerializer.prototype.logNamespace = function(ns, wellknown, local) {
	  var namespaces = this.getNamespaces(local);

	  var nsUri = ns.uri,
	      nsPrefix = ns.prefix;

	  var existing = namespaces.byUri(nsUri);

	  if (nsPrefix !== 'xml' && (!existing || local)) {
	    namespaces.add(ns, wellknown);
	  }

	  namespaces.mapPrefix(nsPrefix, nsUri);

	  return ns;
	};

	ElementSerializer.prototype.logNamespaceUsed = function(ns, local) {
	  var element = this.element,
	      model = element.$model,
	      namespaces = this.getNamespaces(local);

	  // ns may be
	  //
	  //   * prefix only
	  //   * prefix:uri
	  //   * localName only

	  var prefix = ns.prefix,
	      uri = ns.uri,
	      newPrefix, idx,
	      wellknownUri;

	  // handle anonymous namespaces (elementForm=unqualified), cf. #23
	  if (!prefix && !uri) {
	    return { localName: ns.localName };
	  }

	  wellknownUri = DEFAULT_NS_MAP[prefix] || model && (model.getPackage(prefix) || {}).uri;

	  uri = uri || wellknownUri || namespaces.uriByPrefix(prefix);

	  if (!uri) {
	    throw new Error('no namespace uri given for prefix <' + prefix + '>');
	  }

	  ns = namespaces.byUri(uri);

	  if (!ns) {
	    newPrefix = prefix;
	    idx = 1;

	    // find a prefix that is not mapped yet
	    while (namespaces.uriByPrefix(newPrefix)) {
	      newPrefix = prefix + '_' + idx++;
	    }

	    ns = this.logNamespace({ prefix: newPrefix, uri: uri }, wellknownUri === uri);
	  }

	  if (prefix) {
	    namespaces.mapPrefix(prefix, uri);
	  }

	  return ns;
	};

	ElementSerializer.prototype.parseAttributes = function(properties) {
	  var self = this,
	      element = this.element;

	  forEach(properties, function(p) {

	    var value = element.get(p.name);

	    if (p.isReference) {

	      if (!p.isMany) {
	        value = value.id;
	      }
	      else {
	        var values = [];
	        forEach(value, function(v) {
	          values.push(v.id);
	        });

	        // IDREFS is a whitespace-separated list of references.
	        value = values.join(' ');
	      }

	    }

	    self.addAttribute(self.nsAttributeName(p), value);
	  });
	};

	ElementSerializer.prototype.addTagName = function(nsTagName) {
	  var actualNs = this.logNamespaceUsed(nsTagName);

	  this.getNamespaces().logUsed(actualNs);

	  return nsName(nsTagName);
	};

	ElementSerializer.prototype.addAttribute = function(name, value) {
	  var attrs = this.attrs;

	  if (isString(value)) {
	    value = escapeAttr(value);
	  }

	  attrs.push({ name: name, value: value });
	};

	ElementSerializer.prototype.serializeAttributes = function(writer) {
	  var attrs = this.attrs,
	      namespaces = this.namespaces;

	  if (namespaces) {
	    attrs = getNsAttrs(namespaces).concat(attrs);
	  }

	  forEach(attrs, function(a) {
	    writer
	      .append(' ')
	      .append(nsName(a.name)).append('="').append(a.value).append('"');
	  });
	};

	ElementSerializer.prototype.serializeTo = function(writer) {
	  var firstBody = this.body[0],
	      indent = firstBody && firstBody.constructor !== BodySerializer;

	  writer
	    .appendIndent()
	    .append('<' + this.tagName);

	  this.serializeAttributes(writer);

	  writer.append(firstBody ? '>' : ' />');

	  if (firstBody) {

	    if (indent) {
	      writer
	        .appendNewLine()
	        .indent();
	    }

	    forEach(this.body, function(b) {
	      b.serializeTo(writer);
	    });

	    if (indent) {
	      writer
	        .unindent()
	        .appendIndent();
	    }

	    writer.append('</' + this.tagName + '>');
	  }

	  writer.appendNewLine();
	};

	/**
	 * A serializer for types that handles serialization of data types
	 */
	function TypeSerializer(parent, propertyDescriptor) {
	  ElementSerializer.call(this, parent, propertyDescriptor);
	}

	inherits(TypeSerializer, ElementSerializer);

	TypeSerializer.prototype.parseNsAttributes = function(element) {

	  // extracted attributes
	  var attributes = ElementSerializer.prototype.parseNsAttributes.call(this, element);

	  var descriptor = element.$descriptor;

	  // only serialize xsi:type if necessary
	  if (descriptor.name === this.propertyDescriptor.type) {
	    return attributes;
	  }

	  var typeNs = this.typeNs = this.nsTagName(descriptor);
	  this.getNamespaces().logUsed(this.typeNs);

	  // add xsi:type attribute to represent the elements
	  // actual type

	  var pkg = element.$model.getPackage(typeNs.uri),
	      typePrefix = (pkg.xml && pkg.xml.typePrefix) || '';

	  this.addAttribute(
	    this.nsAttributeName(XSI_TYPE$1),
	    (typeNs.prefix ? typeNs.prefix + ':' : '') + typePrefix + descriptor.ns.localName
	  );

	  return attributes;
	};

	TypeSerializer.prototype.isLocalNs = function(ns) {
	  return ns.uri === (this.typeNs || this.ns).uri;
	};

	function SavingWriter() {
	  this.value = '';

	  this.write = function(str) {
	    this.value += str;
	  };
	}

	function FormatingWriter(out, format) {

	  var indent = [''];

	  this.append = function(str) {
	    out.write(str);

	    return this;
	  };

	  this.appendNewLine = function() {
	    if (format) {
	      out.write('\n');
	    }

	    return this;
	  };

	  this.appendIndent = function() {
	    if (format) {
	      out.write(indent.join('  '));
	    }

	    return this;
	  };

	  this.indent = function() {
	    indent.push('');
	    return this;
	  };

	  this.unindent = function() {
	    indent.pop();
	    return this;
	  };
	}

	/**
	 * A writer for meta-model backed document trees
	 *
	 * @param {Object} options output options to pass into the writer
	 */
	function Writer(options) {

	  options = assign({ format: false, preamble: true }, options || {});

	  function toXML(tree, writer) {
	    var internalWriter = writer || new SavingWriter();
	    var formatingWriter = new FormatingWriter(internalWriter, options.format);

	    if (options.preamble) {
	      formatingWriter.append(XML_PREAMBLE);
	    }

	    new ElementSerializer().build(tree).serializeTo(formatingWriter);

	    if (!writer) {
	      return internalWriter.value;
	    }
	  }

	  return {
	    toXML: toXML
	  };
	}

	/**
	 * A sub class of {@link Moddle} with support for import and export of BPMN 2.0 xml files.
	 *
	 * @class BpmnModdle
	 * @extends Moddle
	 *
	 * @param {Object|Array} packages to use for instantiating the model
	 * @param {Object} [options] additional options to pass over
	 */
	function BpmnModdle(packages, options) {
	  Moddle.call(this, packages, options);
	}

	BpmnModdle.prototype = Object.create(Moddle.prototype);

	/**
	 * The fromXML result.
	 *
	 * @typedef {Object} ParseResult
	 *
	 * @property {ModdleElement} rootElement
	 * @property {Array<Object>} references
	 * @property {Array<Error>} warnings
	 * @property {Object} elementsById - a mapping containing each ID -> ModdleElement
	 */

	/**
	 * The fromXML error.
	 *
	 * @typedef {Error} ParseError
	 *
	 * @property {Array<Error>} warnings
	 */

	/**
	 * Instantiates a BPMN model tree from a given xml string.
	 *
	 * @param {String}   xmlStr
	 * @param {String}   [typeName='bpmn:Definitions'] name of the root element
	 * @param {Object}   [options]  options to pass to the underlying reader
	 *
	 * @returns {Promise<ParseResult, ParseError>}
	 */
	BpmnModdle.prototype.fromXML = function(xmlStr, typeName, options) {

	  if (!isString(typeName)) {
	    options = typeName;
	    typeName = 'bpmn:Definitions';
	  }

	  var reader = new Reader(assign({ model: this, lax: true }, options));
	  var rootHandler = reader.handler(typeName);

	  return reader.fromXML(xmlStr, rootHandler);
	};


	/**
	 * The toXML result.
	 *
	 * @typedef {Object} SerializationResult
	 *
	 * @property {String} xml
	 */

	/**
	 * Serializes a BPMN 2.0 object tree to XML.
	 *
	 * @param {String}   element    the root element, typically an instance of `bpmn:Definitions`
	 * @param {Object}   [options]  to pass to the underlying writer
	 *
	 * @returns {Promise<SerializationResult, Error>}
	 */
	BpmnModdle.prototype.toXML = function(element, options) {

	  var writer = new Writer(options);

	  return new Promise(function(resolve, reject) {
	    try {
	      var result = writer.toXML(element);

	      return resolve({
	        xml: result
	      });
	    } catch (err) {
	      return reject(err);
	    }
	  });
	};

	var name = "BPMN20";
	var uri = "http://www.omg.org/spec/BPMN/20100524/MODEL";
	var prefix$1 = "bpmn";
	var associations = [
	];
	var types$1 = [
		{
			name: "Interface",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "operations",
					type: "Operation",
					isMany: true
				},
				{
					name: "implementationRef",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Operation",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "inMessageRef",
					type: "Message",
					isReference: true
				},
				{
					name: "outMessageRef",
					type: "Message",
					isReference: true
				},
				{
					name: "errorRef",
					type: "Error",
					isMany: true,
					isReference: true
				},
				{
					name: "implementationRef",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "EndPoint",
			superClass: [
				"RootElement"
			]
		},
		{
			name: "Auditing",
			superClass: [
				"BaseElement"
			]
		},
		{
			name: "GlobalTask",
			superClass: [
				"CallableElement"
			],
			properties: [
				{
					name: "resources",
					type: "ResourceRole",
					isMany: true
				}
			]
		},
		{
			name: "Monitoring",
			superClass: [
				"BaseElement"
			]
		},
		{
			name: "Performer",
			superClass: [
				"ResourceRole"
			]
		},
		{
			name: "Process",
			superClass: [
				"FlowElementsContainer",
				"CallableElement"
			],
			properties: [
				{
					name: "processType",
					type: "ProcessType",
					isAttr: true
				},
				{
					name: "isClosed",
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "auditing",
					type: "Auditing"
				},
				{
					name: "monitoring",
					type: "Monitoring"
				},
				{
					name: "properties",
					type: "Property",
					isMany: true
				},
				{
					name: "laneSets",
					isMany: true,
					replaces: "FlowElementsContainer#laneSets",
					type: "LaneSet"
				},
				{
					name: "flowElements",
					isMany: true,
					replaces: "FlowElementsContainer#flowElements",
					type: "FlowElement"
				},
				{
					name: "artifacts",
					type: "Artifact",
					isMany: true
				},
				{
					name: "resources",
					type: "ResourceRole",
					isMany: true
				},
				{
					name: "correlationSubscriptions",
					type: "CorrelationSubscription",
					isMany: true
				},
				{
					name: "supports",
					type: "Process",
					isMany: true,
					isReference: true
				},
				{
					name: "definitionalCollaborationRef",
					type: "Collaboration",
					isAttr: true,
					isReference: true
				},
				{
					name: "isExecutable",
					isAttr: true,
					type: "Boolean"
				}
			]
		},
		{
			name: "LaneSet",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "lanes",
					type: "Lane",
					isMany: true
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Lane",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "partitionElementRef",
					type: "BaseElement",
					isAttr: true,
					isReference: true
				},
				{
					name: "partitionElement",
					type: "BaseElement"
				},
				{
					name: "flowNodeRef",
					type: "FlowNode",
					isMany: true,
					isReference: true
				},
				{
					name: "childLaneSet",
					type: "LaneSet",
					xml: {
						serialize: "xsi:type"
					}
				}
			]
		},
		{
			name: "GlobalManualTask",
			superClass: [
				"GlobalTask"
			]
		},
		{
			name: "ManualTask",
			superClass: [
				"Task"
			]
		},
		{
			name: "UserTask",
			superClass: [
				"Task"
			],
			properties: [
				{
					name: "renderings",
					type: "Rendering",
					isMany: true
				},
				{
					name: "implementation",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Rendering",
			superClass: [
				"BaseElement"
			]
		},
		{
			name: "HumanPerformer",
			superClass: [
				"Performer"
			]
		},
		{
			name: "PotentialOwner",
			superClass: [
				"HumanPerformer"
			]
		},
		{
			name: "GlobalUserTask",
			superClass: [
				"GlobalTask"
			],
			properties: [
				{
					name: "implementation",
					isAttr: true,
					type: "String"
				},
				{
					name: "renderings",
					type: "Rendering",
					isMany: true
				}
			]
		},
		{
			name: "Gateway",
			isAbstract: true,
			superClass: [
				"FlowNode"
			],
			properties: [
				{
					name: "gatewayDirection",
					type: "GatewayDirection",
					"default": "Unspecified",
					isAttr: true
				}
			]
		},
		{
			name: "EventBasedGateway",
			superClass: [
				"Gateway"
			],
			properties: [
				{
					name: "instantiate",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "eventGatewayType",
					type: "EventBasedGatewayType",
					isAttr: true,
					"default": "Exclusive"
				}
			]
		},
		{
			name: "ComplexGateway",
			superClass: [
				"Gateway"
			],
			properties: [
				{
					name: "activationCondition",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				},
				{
					name: "default",
					type: "SequenceFlow",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ExclusiveGateway",
			superClass: [
				"Gateway"
			],
			properties: [
				{
					name: "default",
					type: "SequenceFlow",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "InclusiveGateway",
			superClass: [
				"Gateway"
			],
			properties: [
				{
					name: "default",
					type: "SequenceFlow",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ParallelGateway",
			superClass: [
				"Gateway"
			]
		},
		{
			name: "RootElement",
			isAbstract: true,
			superClass: [
				"BaseElement"
			]
		},
		{
			name: "Relationship",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "type",
					isAttr: true,
					type: "String"
				},
				{
					name: "direction",
					type: "RelationshipDirection",
					isAttr: true
				},
				{
					name: "source",
					isMany: true,
					isReference: true,
					type: "Element"
				},
				{
					name: "target",
					isMany: true,
					isReference: true,
					type: "Element"
				}
			]
		},
		{
			name: "BaseElement",
			isAbstract: true,
			properties: [
				{
					name: "id",
					isAttr: true,
					type: "String",
					isId: true
				},
				{
					name: "documentation",
					type: "Documentation",
					isMany: true
				},
				{
					name: "extensionDefinitions",
					type: "ExtensionDefinition",
					isMany: true,
					isReference: true
				},
				{
					name: "extensionElements",
					type: "ExtensionElements"
				}
			]
		},
		{
			name: "Extension",
			properties: [
				{
					name: "mustUnderstand",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "definition",
					type: "ExtensionDefinition",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ExtensionDefinition",
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "extensionAttributeDefinitions",
					type: "ExtensionAttributeDefinition",
					isMany: true
				}
			]
		},
		{
			name: "ExtensionAttributeDefinition",
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "type",
					isAttr: true,
					type: "String"
				},
				{
					name: "isReference",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "extensionDefinition",
					type: "ExtensionDefinition",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ExtensionElements",
			properties: [
				{
					name: "valueRef",
					isAttr: true,
					isReference: true,
					type: "Element"
				},
				{
					name: "values",
					type: "Element",
					isMany: true
				},
				{
					name: "extensionAttributeDefinition",
					type: "ExtensionAttributeDefinition",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "Documentation",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "text",
					type: "String",
					isBody: true
				},
				{
					name: "textFormat",
					"default": "text/plain",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Event",
			isAbstract: true,
			superClass: [
				"FlowNode",
				"InteractionNode"
			],
			properties: [
				{
					name: "properties",
					type: "Property",
					isMany: true
				}
			]
		},
		{
			name: "IntermediateCatchEvent",
			superClass: [
				"CatchEvent"
			]
		},
		{
			name: "IntermediateThrowEvent",
			superClass: [
				"ThrowEvent"
			]
		},
		{
			name: "EndEvent",
			superClass: [
				"ThrowEvent"
			]
		},
		{
			name: "StartEvent",
			superClass: [
				"CatchEvent"
			],
			properties: [
				{
					name: "isInterrupting",
					"default": true,
					isAttr: true,
					type: "Boolean"
				}
			]
		},
		{
			name: "ThrowEvent",
			isAbstract: true,
			superClass: [
				"Event"
			],
			properties: [
				{
					name: "dataInputs",
					type: "DataInput",
					isMany: true
				},
				{
					name: "dataInputAssociations",
					type: "DataInputAssociation",
					isMany: true
				},
				{
					name: "inputSet",
					type: "InputSet"
				},
				{
					name: "eventDefinitions",
					type: "EventDefinition",
					isMany: true
				},
				{
					name: "eventDefinitionRef",
					type: "EventDefinition",
					isMany: true,
					isReference: true
				}
			]
		},
		{
			name: "CatchEvent",
			isAbstract: true,
			superClass: [
				"Event"
			],
			properties: [
				{
					name: "parallelMultiple",
					isAttr: true,
					type: "Boolean",
					"default": false
				},
				{
					name: "dataOutputs",
					type: "DataOutput",
					isMany: true
				},
				{
					name: "dataOutputAssociations",
					type: "DataOutputAssociation",
					isMany: true
				},
				{
					name: "outputSet",
					type: "OutputSet"
				},
				{
					name: "eventDefinitions",
					type: "EventDefinition",
					isMany: true
				},
				{
					name: "eventDefinitionRef",
					type: "EventDefinition",
					isMany: true,
					isReference: true
				}
			]
		},
		{
			name: "BoundaryEvent",
			superClass: [
				"CatchEvent"
			],
			properties: [
				{
					name: "cancelActivity",
					"default": true,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "attachedToRef",
					type: "Activity",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "EventDefinition",
			isAbstract: true,
			superClass: [
				"RootElement"
			]
		},
		{
			name: "CancelEventDefinition",
			superClass: [
				"EventDefinition"
			]
		},
		{
			name: "ErrorEventDefinition",
			superClass: [
				"EventDefinition"
			],
			properties: [
				{
					name: "errorRef",
					type: "Error",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "TerminateEventDefinition",
			superClass: [
				"EventDefinition"
			]
		},
		{
			name: "EscalationEventDefinition",
			superClass: [
				"EventDefinition"
			],
			properties: [
				{
					name: "escalationRef",
					type: "Escalation",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "Escalation",
			properties: [
				{
					name: "structureRef",
					type: "ItemDefinition",
					isAttr: true,
					isReference: true
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "escalationCode",
					isAttr: true,
					type: "String"
				}
			],
			superClass: [
				"RootElement"
			]
		},
		{
			name: "CompensateEventDefinition",
			superClass: [
				"EventDefinition"
			],
			properties: [
				{
					name: "waitForCompletion",
					isAttr: true,
					type: "Boolean",
					"default": true
				},
				{
					name: "activityRef",
					type: "Activity",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "TimerEventDefinition",
			superClass: [
				"EventDefinition"
			],
			properties: [
				{
					name: "timeDate",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				},
				{
					name: "timeCycle",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				},
				{
					name: "timeDuration",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				}
			]
		},
		{
			name: "LinkEventDefinition",
			superClass: [
				"EventDefinition"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "target",
					type: "LinkEventDefinition",
					isAttr: true,
					isReference: true
				},
				{
					name: "source",
					type: "LinkEventDefinition",
					isMany: true,
					isReference: true
				}
			]
		},
		{
			name: "MessageEventDefinition",
			superClass: [
				"EventDefinition"
			],
			properties: [
				{
					name: "messageRef",
					type: "Message",
					isAttr: true,
					isReference: true
				},
				{
					name: "operationRef",
					type: "Operation",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ConditionalEventDefinition",
			superClass: [
				"EventDefinition"
			],
			properties: [
				{
					name: "condition",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				}
			]
		},
		{
			name: "SignalEventDefinition",
			superClass: [
				"EventDefinition"
			],
			properties: [
				{
					name: "signalRef",
					type: "Signal",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "Signal",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "structureRef",
					type: "ItemDefinition",
					isAttr: true,
					isReference: true
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "ImplicitThrowEvent",
			superClass: [
				"ThrowEvent"
			]
		},
		{
			name: "DataState",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "ItemAwareElement",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "itemSubjectRef",
					type: "ItemDefinition",
					isAttr: true,
					isReference: true
				},
				{
					name: "dataState",
					type: "DataState"
				}
			]
		},
		{
			name: "DataAssociation",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "sourceRef",
					type: "ItemAwareElement",
					isMany: true,
					isReference: true
				},
				{
					name: "targetRef",
					type: "ItemAwareElement",
					isReference: true
				},
				{
					name: "transformation",
					type: "FormalExpression",
					xml: {
						serialize: "property"
					}
				},
				{
					name: "assignment",
					type: "Assignment",
					isMany: true
				}
			]
		},
		{
			name: "DataInput",
			superClass: [
				"ItemAwareElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "isCollection",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "inputSetRef",
					type: "InputSet",
					isMany: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "inputSetWithOptional",
					type: "InputSet",
					isMany: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "inputSetWithWhileExecuting",
					type: "InputSet",
					isMany: true,
					isVirtual: true,
					isReference: true
				}
			]
		},
		{
			name: "DataOutput",
			superClass: [
				"ItemAwareElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "isCollection",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "outputSetRef",
					type: "OutputSet",
					isMany: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "outputSetWithOptional",
					type: "OutputSet",
					isMany: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "outputSetWithWhileExecuting",
					type: "OutputSet",
					isMany: true,
					isVirtual: true,
					isReference: true
				}
			]
		},
		{
			name: "InputSet",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "dataInputRefs",
					type: "DataInput",
					isMany: true,
					isReference: true
				},
				{
					name: "optionalInputRefs",
					type: "DataInput",
					isMany: true,
					isReference: true
				},
				{
					name: "whileExecutingInputRefs",
					type: "DataInput",
					isMany: true,
					isReference: true
				},
				{
					name: "outputSetRefs",
					type: "OutputSet",
					isMany: true,
					isReference: true
				}
			]
		},
		{
			name: "OutputSet",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "dataOutputRefs",
					type: "DataOutput",
					isMany: true,
					isReference: true
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "inputSetRefs",
					type: "InputSet",
					isMany: true,
					isReference: true
				},
				{
					name: "optionalOutputRefs",
					type: "DataOutput",
					isMany: true,
					isReference: true
				},
				{
					name: "whileExecutingOutputRefs",
					type: "DataOutput",
					isMany: true,
					isReference: true
				}
			]
		},
		{
			name: "Property",
			superClass: [
				"ItemAwareElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "DataInputAssociation",
			superClass: [
				"DataAssociation"
			]
		},
		{
			name: "DataOutputAssociation",
			superClass: [
				"DataAssociation"
			]
		},
		{
			name: "InputOutputSpecification",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "dataInputs",
					type: "DataInput",
					isMany: true
				},
				{
					name: "dataOutputs",
					type: "DataOutput",
					isMany: true
				},
				{
					name: "inputSets",
					type: "InputSet",
					isMany: true
				},
				{
					name: "outputSets",
					type: "OutputSet",
					isMany: true
				}
			]
		},
		{
			name: "DataObject",
			superClass: [
				"FlowElement",
				"ItemAwareElement"
			],
			properties: [
				{
					name: "isCollection",
					"default": false,
					isAttr: true,
					type: "Boolean"
				}
			]
		},
		{
			name: "InputOutputBinding",
			properties: [
				{
					name: "inputDataRef",
					type: "InputSet",
					isAttr: true,
					isReference: true
				},
				{
					name: "outputDataRef",
					type: "OutputSet",
					isAttr: true,
					isReference: true
				},
				{
					name: "operationRef",
					type: "Operation",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "Assignment",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "from",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				},
				{
					name: "to",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				}
			]
		},
		{
			name: "DataStore",
			superClass: [
				"RootElement",
				"ItemAwareElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "capacity",
					isAttr: true,
					type: "Integer"
				},
				{
					name: "isUnlimited",
					"default": true,
					isAttr: true,
					type: "Boolean"
				}
			]
		},
		{
			name: "DataStoreReference",
			superClass: [
				"ItemAwareElement",
				"FlowElement"
			],
			properties: [
				{
					name: "dataStoreRef",
					type: "DataStore",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "DataObjectReference",
			superClass: [
				"ItemAwareElement",
				"FlowElement"
			],
			properties: [
				{
					name: "dataObjectRef",
					type: "DataObject",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ConversationLink",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "sourceRef",
					type: "InteractionNode",
					isAttr: true,
					isReference: true
				},
				{
					name: "targetRef",
					type: "InteractionNode",
					isAttr: true,
					isReference: true
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "ConversationAssociation",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "innerConversationNodeRef",
					type: "ConversationNode",
					isAttr: true,
					isReference: true
				},
				{
					name: "outerConversationNodeRef",
					type: "ConversationNode",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "CallConversation",
			superClass: [
				"ConversationNode"
			],
			properties: [
				{
					name: "calledCollaborationRef",
					type: "Collaboration",
					isAttr: true,
					isReference: true
				},
				{
					name: "participantAssociations",
					type: "ParticipantAssociation",
					isMany: true
				}
			]
		},
		{
			name: "Conversation",
			superClass: [
				"ConversationNode"
			]
		},
		{
			name: "SubConversation",
			superClass: [
				"ConversationNode"
			],
			properties: [
				{
					name: "conversationNodes",
					type: "ConversationNode",
					isMany: true
				}
			]
		},
		{
			name: "ConversationNode",
			isAbstract: true,
			superClass: [
				"InteractionNode",
				"BaseElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "participantRef",
					type: "Participant",
					isMany: true,
					isReference: true
				},
				{
					name: "messageFlowRefs",
					type: "MessageFlow",
					isMany: true,
					isReference: true
				},
				{
					name: "correlationKeys",
					type: "CorrelationKey",
					isMany: true
				}
			]
		},
		{
			name: "GlobalConversation",
			superClass: [
				"Collaboration"
			]
		},
		{
			name: "PartnerEntity",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "participantRef",
					type: "Participant",
					isMany: true,
					isReference: true
				}
			]
		},
		{
			name: "PartnerRole",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "participantRef",
					type: "Participant",
					isMany: true,
					isReference: true
				}
			]
		},
		{
			name: "CorrelationProperty",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "correlationPropertyRetrievalExpression",
					type: "CorrelationPropertyRetrievalExpression",
					isMany: true
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "type",
					type: "ItemDefinition",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "Error",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "structureRef",
					type: "ItemDefinition",
					isAttr: true,
					isReference: true
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "errorCode",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "CorrelationKey",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "correlationPropertyRef",
					type: "CorrelationProperty",
					isMany: true,
					isReference: true
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Expression",
			superClass: [
				"BaseElement"
			],
			isAbstract: false,
			properties: [
				{
					name: "body",
					isBody: true,
					type: "String"
				}
			]
		},
		{
			name: "FormalExpression",
			superClass: [
				"Expression"
			],
			properties: [
				{
					name: "language",
					isAttr: true,
					type: "String"
				},
				{
					name: "evaluatesToTypeRef",
					type: "ItemDefinition",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "Message",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "itemRef",
					type: "ItemDefinition",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ItemDefinition",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "itemKind",
					type: "ItemKind",
					isAttr: true
				},
				{
					name: "structureRef",
					isAttr: true,
					type: "String"
				},
				{
					name: "isCollection",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "import",
					type: "Import",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "FlowElement",
			isAbstract: true,
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "auditing",
					type: "Auditing"
				},
				{
					name: "monitoring",
					type: "Monitoring"
				},
				{
					name: "categoryValueRef",
					type: "CategoryValue",
					isMany: true,
					isReference: true
				}
			]
		},
		{
			name: "SequenceFlow",
			superClass: [
				"FlowElement"
			],
			properties: [
				{
					name: "isImmediate",
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "conditionExpression",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				},
				{
					name: "sourceRef",
					type: "FlowNode",
					isAttr: true,
					isReference: true
				},
				{
					name: "targetRef",
					type: "FlowNode",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "FlowElementsContainer",
			isAbstract: true,
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "laneSets",
					type: "LaneSet",
					isMany: true
				},
				{
					name: "flowElements",
					type: "FlowElement",
					isMany: true
				}
			]
		},
		{
			name: "CallableElement",
			isAbstract: true,
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "ioSpecification",
					type: "InputOutputSpecification",
					xml: {
						serialize: "property"
					}
				},
				{
					name: "supportedInterfaceRef",
					type: "Interface",
					isMany: true,
					isReference: true
				},
				{
					name: "ioBinding",
					type: "InputOutputBinding",
					isMany: true,
					xml: {
						serialize: "property"
					}
				}
			]
		},
		{
			name: "FlowNode",
			isAbstract: true,
			superClass: [
				"FlowElement"
			],
			properties: [
				{
					name: "incoming",
					type: "SequenceFlow",
					isMany: true,
					isReference: true
				},
				{
					name: "outgoing",
					type: "SequenceFlow",
					isMany: true,
					isReference: true
				},
				{
					name: "lanes",
					type: "Lane",
					isMany: true,
					isVirtual: true,
					isReference: true
				}
			]
		},
		{
			name: "CorrelationPropertyRetrievalExpression",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "messagePath",
					type: "FormalExpression"
				},
				{
					name: "messageRef",
					type: "Message",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "CorrelationPropertyBinding",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "dataPath",
					type: "FormalExpression"
				},
				{
					name: "correlationPropertyRef",
					type: "CorrelationProperty",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "Resource",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "resourceParameters",
					type: "ResourceParameter",
					isMany: true
				}
			]
		},
		{
			name: "ResourceParameter",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "isRequired",
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "type",
					type: "ItemDefinition",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "CorrelationSubscription",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "correlationKeyRef",
					type: "CorrelationKey",
					isAttr: true,
					isReference: true
				},
				{
					name: "correlationPropertyBinding",
					type: "CorrelationPropertyBinding",
					isMany: true
				}
			]
		},
		{
			name: "MessageFlow",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "sourceRef",
					type: "InteractionNode",
					isAttr: true,
					isReference: true
				},
				{
					name: "targetRef",
					type: "InteractionNode",
					isAttr: true,
					isReference: true
				},
				{
					name: "messageRef",
					type: "Message",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "MessageFlowAssociation",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "innerMessageFlowRef",
					type: "MessageFlow",
					isAttr: true,
					isReference: true
				},
				{
					name: "outerMessageFlowRef",
					type: "MessageFlow",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "InteractionNode",
			isAbstract: true,
			properties: [
				{
					name: "incomingConversationLinks",
					type: "ConversationLink",
					isMany: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "outgoingConversationLinks",
					type: "ConversationLink",
					isMany: true,
					isVirtual: true,
					isReference: true
				}
			]
		},
		{
			name: "Participant",
			superClass: [
				"InteractionNode",
				"BaseElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "interfaceRef",
					type: "Interface",
					isMany: true,
					isReference: true
				},
				{
					name: "participantMultiplicity",
					type: "ParticipantMultiplicity"
				},
				{
					name: "endPointRefs",
					type: "EndPoint",
					isMany: true,
					isReference: true
				},
				{
					name: "processRef",
					type: "Process",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ParticipantAssociation",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "innerParticipantRef",
					type: "Participant",
					isAttr: true,
					isReference: true
				},
				{
					name: "outerParticipantRef",
					type: "Participant",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ParticipantMultiplicity",
			properties: [
				{
					name: "minimum",
					"default": 0,
					isAttr: true,
					type: "Integer"
				},
				{
					name: "maximum",
					"default": 1,
					isAttr: true,
					type: "Integer"
				}
			],
			superClass: [
				"BaseElement"
			]
		},
		{
			name: "Collaboration",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "isClosed",
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "participants",
					type: "Participant",
					isMany: true
				},
				{
					name: "messageFlows",
					type: "MessageFlow",
					isMany: true
				},
				{
					name: "artifacts",
					type: "Artifact",
					isMany: true
				},
				{
					name: "conversations",
					type: "ConversationNode",
					isMany: true
				},
				{
					name: "conversationAssociations",
					type: "ConversationAssociation"
				},
				{
					name: "participantAssociations",
					type: "ParticipantAssociation",
					isMany: true
				},
				{
					name: "messageFlowAssociations",
					type: "MessageFlowAssociation",
					isMany: true
				},
				{
					name: "correlationKeys",
					type: "CorrelationKey",
					isMany: true
				},
				{
					name: "choreographyRef",
					type: "Choreography",
					isMany: true,
					isReference: true
				},
				{
					name: "conversationLinks",
					type: "ConversationLink",
					isMany: true
				}
			]
		},
		{
			name: "ChoreographyActivity",
			isAbstract: true,
			superClass: [
				"FlowNode"
			],
			properties: [
				{
					name: "participantRef",
					type: "Participant",
					isMany: true,
					isReference: true
				},
				{
					name: "initiatingParticipantRef",
					type: "Participant",
					isAttr: true,
					isReference: true
				},
				{
					name: "correlationKeys",
					type: "CorrelationKey",
					isMany: true
				},
				{
					name: "loopType",
					type: "ChoreographyLoopType",
					"default": "None",
					isAttr: true
				}
			]
		},
		{
			name: "CallChoreography",
			superClass: [
				"ChoreographyActivity"
			],
			properties: [
				{
					name: "calledChoreographyRef",
					type: "Choreography",
					isAttr: true,
					isReference: true
				},
				{
					name: "participantAssociations",
					type: "ParticipantAssociation",
					isMany: true
				}
			]
		},
		{
			name: "SubChoreography",
			superClass: [
				"ChoreographyActivity",
				"FlowElementsContainer"
			],
			properties: [
				{
					name: "artifacts",
					type: "Artifact",
					isMany: true
				}
			]
		},
		{
			name: "ChoreographyTask",
			superClass: [
				"ChoreographyActivity"
			],
			properties: [
				{
					name: "messageFlowRef",
					type: "MessageFlow",
					isMany: true,
					isReference: true
				}
			]
		},
		{
			name: "Choreography",
			superClass: [
				"Collaboration",
				"FlowElementsContainer"
			]
		},
		{
			name: "GlobalChoreographyTask",
			superClass: [
				"Choreography"
			],
			properties: [
				{
					name: "initiatingParticipantRef",
					type: "Participant",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "TextAnnotation",
			superClass: [
				"Artifact"
			],
			properties: [
				{
					name: "text",
					type: "String"
				},
				{
					name: "textFormat",
					"default": "text/plain",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Group",
			superClass: [
				"Artifact"
			],
			properties: [
				{
					name: "categoryValueRef",
					type: "CategoryValue",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "Association",
			superClass: [
				"Artifact"
			],
			properties: [
				{
					name: "associationDirection",
					type: "AssociationDirection",
					isAttr: true
				},
				{
					name: "sourceRef",
					type: "BaseElement",
					isAttr: true,
					isReference: true
				},
				{
					name: "targetRef",
					type: "BaseElement",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "Category",
			superClass: [
				"RootElement"
			],
			properties: [
				{
					name: "categoryValue",
					type: "CategoryValue",
					isMany: true
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Artifact",
			isAbstract: true,
			superClass: [
				"BaseElement"
			]
		},
		{
			name: "CategoryValue",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "categorizedFlowElements",
					type: "FlowElement",
					isMany: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "value",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Activity",
			isAbstract: true,
			superClass: [
				"FlowNode"
			],
			properties: [
				{
					name: "isForCompensation",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "default",
					type: "SequenceFlow",
					isAttr: true,
					isReference: true
				},
				{
					name: "ioSpecification",
					type: "InputOutputSpecification",
					xml: {
						serialize: "property"
					}
				},
				{
					name: "boundaryEventRefs",
					type: "BoundaryEvent",
					isMany: true,
					isReference: true
				},
				{
					name: "properties",
					type: "Property",
					isMany: true
				},
				{
					name: "dataInputAssociations",
					type: "DataInputAssociation",
					isMany: true
				},
				{
					name: "dataOutputAssociations",
					type: "DataOutputAssociation",
					isMany: true
				},
				{
					name: "startQuantity",
					"default": 1,
					isAttr: true,
					type: "Integer"
				},
				{
					name: "resources",
					type: "ResourceRole",
					isMany: true
				},
				{
					name: "completionQuantity",
					"default": 1,
					isAttr: true,
					type: "Integer"
				},
				{
					name: "loopCharacteristics",
					type: "LoopCharacteristics"
				}
			]
		},
		{
			name: "ServiceTask",
			superClass: [
				"Task"
			],
			properties: [
				{
					name: "implementation",
					isAttr: true,
					type: "String"
				},
				{
					name: "operationRef",
					type: "Operation",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "SubProcess",
			superClass: [
				"Activity",
				"FlowElementsContainer",
				"InteractionNode"
			],
			properties: [
				{
					name: "triggeredByEvent",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "artifacts",
					type: "Artifact",
					isMany: true
				}
			]
		},
		{
			name: "LoopCharacteristics",
			isAbstract: true,
			superClass: [
				"BaseElement"
			]
		},
		{
			name: "MultiInstanceLoopCharacteristics",
			superClass: [
				"LoopCharacteristics"
			],
			properties: [
				{
					name: "isSequential",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "behavior",
					type: "MultiInstanceBehavior",
					"default": "All",
					isAttr: true
				},
				{
					name: "loopCardinality",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				},
				{
					name: "loopDataInputRef",
					type: "ItemAwareElement",
					isReference: true
				},
				{
					name: "loopDataOutputRef",
					type: "ItemAwareElement",
					isReference: true
				},
				{
					name: "inputDataItem",
					type: "DataInput",
					xml: {
						serialize: "property"
					}
				},
				{
					name: "outputDataItem",
					type: "DataOutput",
					xml: {
						serialize: "property"
					}
				},
				{
					name: "complexBehaviorDefinition",
					type: "ComplexBehaviorDefinition",
					isMany: true
				},
				{
					name: "completionCondition",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				},
				{
					name: "oneBehaviorEventRef",
					type: "EventDefinition",
					isAttr: true,
					isReference: true
				},
				{
					name: "noneBehaviorEventRef",
					type: "EventDefinition",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "StandardLoopCharacteristics",
			superClass: [
				"LoopCharacteristics"
			],
			properties: [
				{
					name: "testBefore",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "loopCondition",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				},
				{
					name: "loopMaximum",
					type: "Integer",
					isAttr: true
				}
			]
		},
		{
			name: "CallActivity",
			superClass: [
				"Activity"
			],
			properties: [
				{
					name: "calledElement",
					type: "String",
					isAttr: true
				}
			]
		},
		{
			name: "Task",
			superClass: [
				"Activity",
				"InteractionNode"
			]
		},
		{
			name: "SendTask",
			superClass: [
				"Task"
			],
			properties: [
				{
					name: "implementation",
					isAttr: true,
					type: "String"
				},
				{
					name: "operationRef",
					type: "Operation",
					isAttr: true,
					isReference: true
				},
				{
					name: "messageRef",
					type: "Message",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ReceiveTask",
			superClass: [
				"Task"
			],
			properties: [
				{
					name: "implementation",
					isAttr: true,
					type: "String"
				},
				{
					name: "instantiate",
					"default": false,
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "operationRef",
					type: "Operation",
					isAttr: true,
					isReference: true
				},
				{
					name: "messageRef",
					type: "Message",
					isAttr: true,
					isReference: true
				}
			]
		},
		{
			name: "ScriptTask",
			superClass: [
				"Task"
			],
			properties: [
				{
					name: "scriptFormat",
					isAttr: true,
					type: "String"
				},
				{
					name: "script",
					type: "String"
				}
			]
		},
		{
			name: "BusinessRuleTask",
			superClass: [
				"Task"
			],
			properties: [
				{
					name: "implementation",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "AdHocSubProcess",
			superClass: [
				"SubProcess"
			],
			properties: [
				{
					name: "completionCondition",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				},
				{
					name: "ordering",
					type: "AdHocOrdering",
					isAttr: true
				},
				{
					name: "cancelRemainingInstances",
					"default": true,
					isAttr: true,
					type: "Boolean"
				}
			]
		},
		{
			name: "Transaction",
			superClass: [
				"SubProcess"
			],
			properties: [
				{
					name: "protocol",
					isAttr: true,
					type: "String"
				},
				{
					name: "method",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "GlobalScriptTask",
			superClass: [
				"GlobalTask"
			],
			properties: [
				{
					name: "scriptLanguage",
					isAttr: true,
					type: "String"
				},
				{
					name: "script",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "GlobalBusinessRuleTask",
			superClass: [
				"GlobalTask"
			],
			properties: [
				{
					name: "implementation",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "ComplexBehaviorDefinition",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "condition",
					type: "FormalExpression"
				},
				{
					name: "event",
					type: "ImplicitThrowEvent"
				}
			]
		},
		{
			name: "ResourceRole",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "resourceRef",
					type: "Resource",
					isReference: true
				},
				{
					name: "resourceParameterBindings",
					type: "ResourceParameterBinding",
					isMany: true
				},
				{
					name: "resourceAssignmentExpression",
					type: "ResourceAssignmentExpression"
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "ResourceParameterBinding",
			properties: [
				{
					name: "expression",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				},
				{
					name: "parameterRef",
					type: "ResourceParameter",
					isAttr: true,
					isReference: true
				}
			],
			superClass: [
				"BaseElement"
			]
		},
		{
			name: "ResourceAssignmentExpression",
			properties: [
				{
					name: "expression",
					type: "Expression",
					xml: {
						serialize: "xsi:type"
					}
				}
			],
			superClass: [
				"BaseElement"
			]
		},
		{
			name: "Import",
			properties: [
				{
					name: "importType",
					isAttr: true,
					type: "String"
				},
				{
					name: "location",
					isAttr: true,
					type: "String"
				},
				{
					name: "namespace",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Definitions",
			superClass: [
				"BaseElement"
			],
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "targetNamespace",
					isAttr: true,
					type: "String"
				},
				{
					name: "expressionLanguage",
					"default": "http://www.w3.org/1999/XPath",
					isAttr: true,
					type: "String"
				},
				{
					name: "typeLanguage",
					"default": "http://www.w3.org/2001/XMLSchema",
					isAttr: true,
					type: "String"
				},
				{
					name: "imports",
					type: "Import",
					isMany: true
				},
				{
					name: "extensions",
					type: "Extension",
					isMany: true
				},
				{
					name: "rootElements",
					type: "RootElement",
					isMany: true
				},
				{
					name: "diagrams",
					isMany: true,
					type: "bpmndi:BPMNDiagram"
				},
				{
					name: "exporter",
					isAttr: true,
					type: "String"
				},
				{
					name: "relationships",
					type: "Relationship",
					isMany: true
				},
				{
					name: "exporterVersion",
					isAttr: true,
					type: "String"
				}
			]
		}
	];
	var enumerations = [
		{
			name: "ProcessType",
			literalValues: [
				{
					name: "None"
				},
				{
					name: "Public"
				},
				{
					name: "Private"
				}
			]
		},
		{
			name: "GatewayDirection",
			literalValues: [
				{
					name: "Unspecified"
				},
				{
					name: "Converging"
				},
				{
					name: "Diverging"
				},
				{
					name: "Mixed"
				}
			]
		},
		{
			name: "EventBasedGatewayType",
			literalValues: [
				{
					name: "Parallel"
				},
				{
					name: "Exclusive"
				}
			]
		},
		{
			name: "RelationshipDirection",
			literalValues: [
				{
					name: "None"
				},
				{
					name: "Forward"
				},
				{
					name: "Backward"
				},
				{
					name: "Both"
				}
			]
		},
		{
			name: "ItemKind",
			literalValues: [
				{
					name: "Physical"
				},
				{
					name: "Information"
				}
			]
		},
		{
			name: "ChoreographyLoopType",
			literalValues: [
				{
					name: "None"
				},
				{
					name: "Standard"
				},
				{
					name: "MultiInstanceSequential"
				},
				{
					name: "MultiInstanceParallel"
				}
			]
		},
		{
			name: "AssociationDirection",
			literalValues: [
				{
					name: "None"
				},
				{
					name: "One"
				},
				{
					name: "Both"
				}
			]
		},
		{
			name: "MultiInstanceBehavior",
			literalValues: [
				{
					name: "None"
				},
				{
					name: "One"
				},
				{
					name: "All"
				},
				{
					name: "Complex"
				}
			]
		},
		{
			name: "AdHocOrdering",
			literalValues: [
				{
					name: "Parallel"
				},
				{
					name: "Sequential"
				}
			]
		}
	];
	var xml = {
		tagAlias: "lowerCase",
		typePrefix: "t"
	};
	var BpmnPackage = {
		name: name,
		uri: uri,
		prefix: prefix$1,
		associations: associations,
		types: types$1,
		enumerations: enumerations,
		xml: xml
	};

	var name$1 = "BPMNDI";
	var uri$1 = "http://www.omg.org/spec/BPMN/20100524/DI";
	var prefix$1$1 = "bpmndi";
	var types$1$1 = [
		{
			name: "BPMNDiagram",
			properties: [
				{
					name: "plane",
					type: "BPMNPlane",
					redefines: "di:Diagram#rootElement"
				},
				{
					name: "labelStyle",
					type: "BPMNLabelStyle",
					isMany: true
				}
			],
			superClass: [
				"di:Diagram"
			]
		},
		{
			name: "BPMNPlane",
			properties: [
				{
					name: "bpmnElement",
					isAttr: true,
					isReference: true,
					type: "bpmn:BaseElement",
					redefines: "di:DiagramElement#modelElement"
				}
			],
			superClass: [
				"di:Plane"
			]
		},
		{
			name: "BPMNShape",
			properties: [
				{
					name: "bpmnElement",
					isAttr: true,
					isReference: true,
					type: "bpmn:BaseElement",
					redefines: "di:DiagramElement#modelElement"
				},
				{
					name: "isHorizontal",
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "isExpanded",
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "isMarkerVisible",
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "label",
					type: "BPMNLabel"
				},
				{
					name: "isMessageVisible",
					isAttr: true,
					type: "Boolean"
				},
				{
					name: "participantBandKind",
					type: "ParticipantBandKind",
					isAttr: true
				},
				{
					name: "choreographyActivityShape",
					type: "BPMNShape",
					isAttr: true,
					isReference: true
				}
			],
			superClass: [
				"di:LabeledShape"
			]
		},
		{
			name: "BPMNEdge",
			properties: [
				{
					name: "label",
					type: "BPMNLabel"
				},
				{
					name: "bpmnElement",
					isAttr: true,
					isReference: true,
					type: "bpmn:BaseElement",
					redefines: "di:DiagramElement#modelElement"
				},
				{
					name: "sourceElement",
					isAttr: true,
					isReference: true,
					type: "di:DiagramElement",
					redefines: "di:Edge#source"
				},
				{
					name: "targetElement",
					isAttr: true,
					isReference: true,
					type: "di:DiagramElement",
					redefines: "di:Edge#target"
				},
				{
					name: "messageVisibleKind",
					type: "MessageVisibleKind",
					isAttr: true,
					"default": "initiating"
				}
			],
			superClass: [
				"di:LabeledEdge"
			]
		},
		{
			name: "BPMNLabel",
			properties: [
				{
					name: "labelStyle",
					type: "BPMNLabelStyle",
					isAttr: true,
					isReference: true,
					redefines: "di:DiagramElement#style"
				}
			],
			superClass: [
				"di:Label"
			]
		},
		{
			name: "BPMNLabelStyle",
			properties: [
				{
					name: "font",
					type: "dc:Font"
				}
			],
			superClass: [
				"di:Style"
			]
		}
	];
	var enumerations$1 = [
		{
			name: "ParticipantBandKind",
			literalValues: [
				{
					name: "top_initiating"
				},
				{
					name: "middle_initiating"
				},
				{
					name: "bottom_initiating"
				},
				{
					name: "top_non_initiating"
				},
				{
					name: "middle_non_initiating"
				},
				{
					name: "bottom_non_initiating"
				}
			]
		},
		{
			name: "MessageVisibleKind",
			literalValues: [
				{
					name: "initiating"
				},
				{
					name: "non_initiating"
				}
			]
		}
	];
	var associations$1 = [
	];
	var BpmnDiPackage = {
		name: name$1,
		uri: uri$1,
		prefix: prefix$1$1,
		types: types$1$1,
		enumerations: enumerations$1,
		associations: associations$1
	};

	var name$2 = "DC";
	var uri$2 = "http://www.omg.org/spec/DD/20100524/DC";
	var prefix$2 = "dc";
	var types$2 = [
		{
			name: "Boolean"
		},
		{
			name: "Integer"
		},
		{
			name: "Real"
		},
		{
			name: "String"
		},
		{
			name: "Font",
			properties: [
				{
					name: "name",
					type: "String",
					isAttr: true
				},
				{
					name: "size",
					type: "Real",
					isAttr: true
				},
				{
					name: "isBold",
					type: "Boolean",
					isAttr: true
				},
				{
					name: "isItalic",
					type: "Boolean",
					isAttr: true
				},
				{
					name: "isUnderline",
					type: "Boolean",
					isAttr: true
				},
				{
					name: "isStrikeThrough",
					type: "Boolean",
					isAttr: true
				}
			]
		},
		{
			name: "Point",
			properties: [
				{
					name: "x",
					type: "Real",
					"default": "0",
					isAttr: true
				},
				{
					name: "y",
					type: "Real",
					"default": "0",
					isAttr: true
				}
			]
		},
		{
			name: "Bounds",
			properties: [
				{
					name: "x",
					type: "Real",
					"default": "0",
					isAttr: true
				},
				{
					name: "y",
					type: "Real",
					"default": "0",
					isAttr: true
				},
				{
					name: "width",
					type: "Real",
					isAttr: true
				},
				{
					name: "height",
					type: "Real",
					isAttr: true
				}
			]
		}
	];
	var associations$2 = [
	];
	var DcPackage = {
		name: name$2,
		uri: uri$2,
		prefix: prefix$2,
		types: types$2,
		associations: associations$2
	};

	var name$3 = "DI";
	var uri$3 = "http://www.omg.org/spec/DD/20100524/DI";
	var prefix$3 = "di";
	var types$3 = [
		{
			name: "DiagramElement",
			isAbstract: true,
			properties: [
				{
					name: "id",
					isAttr: true,
					isId: true,
					type: "String"
				},
				{
					name: "extension",
					type: "Extension"
				},
				{
					name: "owningDiagram",
					type: "Diagram",
					isReadOnly: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "owningElement",
					type: "DiagramElement",
					isReadOnly: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "modelElement",
					isReadOnly: true,
					isVirtual: true,
					isReference: true,
					type: "Element"
				},
				{
					name: "style",
					type: "Style",
					isReadOnly: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "ownedElement",
					type: "DiagramElement",
					isReadOnly: true,
					isMany: true,
					isVirtual: true
				}
			]
		},
		{
			name: "Node",
			isAbstract: true,
			superClass: [
				"DiagramElement"
			]
		},
		{
			name: "Edge",
			isAbstract: true,
			superClass: [
				"DiagramElement"
			],
			properties: [
				{
					name: "source",
					type: "DiagramElement",
					isReadOnly: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "target",
					type: "DiagramElement",
					isReadOnly: true,
					isVirtual: true,
					isReference: true
				},
				{
					name: "waypoint",
					isUnique: false,
					isMany: true,
					type: "dc:Point",
					xml: {
						serialize: "xsi:type"
					}
				}
			]
		},
		{
			name: "Diagram",
			isAbstract: true,
			properties: [
				{
					name: "id",
					isAttr: true,
					isId: true,
					type: "String"
				},
				{
					name: "rootElement",
					type: "DiagramElement",
					isReadOnly: true,
					isVirtual: true
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "documentation",
					isAttr: true,
					type: "String"
				},
				{
					name: "resolution",
					isAttr: true,
					type: "Real"
				},
				{
					name: "ownedStyle",
					type: "Style",
					isReadOnly: true,
					isMany: true,
					isVirtual: true
				}
			]
		},
		{
			name: "Shape",
			isAbstract: true,
			superClass: [
				"Node"
			],
			properties: [
				{
					name: "bounds",
					type: "dc:Bounds"
				}
			]
		},
		{
			name: "Plane",
			isAbstract: true,
			superClass: [
				"Node"
			],
			properties: [
				{
					name: "planeElement",
					type: "DiagramElement",
					subsettedProperty: "DiagramElement-ownedElement",
					isMany: true
				}
			]
		},
		{
			name: "LabeledEdge",
			isAbstract: true,
			superClass: [
				"Edge"
			],
			properties: [
				{
					name: "ownedLabel",
					type: "Label",
					isReadOnly: true,
					subsettedProperty: "DiagramElement-ownedElement",
					isMany: true,
					isVirtual: true
				}
			]
		},
		{
			name: "LabeledShape",
			isAbstract: true,
			superClass: [
				"Shape"
			],
			properties: [
				{
					name: "ownedLabel",
					type: "Label",
					isReadOnly: true,
					subsettedProperty: "DiagramElement-ownedElement",
					isMany: true,
					isVirtual: true
				}
			]
		},
		{
			name: "Label",
			isAbstract: true,
			superClass: [
				"Node"
			],
			properties: [
				{
					name: "bounds",
					type: "dc:Bounds"
				}
			]
		},
		{
			name: "Style",
			isAbstract: true,
			properties: [
				{
					name: "id",
					isAttr: true,
					isId: true,
					type: "String"
				}
			]
		},
		{
			name: "Extension",
			properties: [
				{
					name: "values",
					isMany: true,
					type: "Element"
				}
			]
		}
	];
	var associations$3 = [
	];
	var xml$1 = {
		tagAlias: "lowerCase"
	};
	var DiPackage = {
		name: name$3,
		uri: uri$3,
		prefix: prefix$3,
		types: types$3,
		associations: associations$3,
		xml: xml$1
	};

	var name$4 = "bpmn.io colors for BPMN";
	var uri$4 = "http://bpmn.io/schema/bpmn/biocolor/1.0";
	var prefix$4 = "bioc";
	var types$4 = [
		{
			name: "ColoredShape",
			"extends": [
				"bpmndi:BPMNShape"
			],
			properties: [
				{
					name: "stroke",
					isAttr: true,
					type: "String"
				},
				{
					name: "fill",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "ColoredEdge",
			"extends": [
				"bpmndi:BPMNEdge"
			],
			properties: [
				{
					name: "stroke",
					isAttr: true,
					type: "String"
				},
				{
					name: "fill",
					isAttr: true,
					type: "String"
				}
			]
		}
	];
	var enumerations$2 = [
	];
	var associations$4 = [
	];
	var BiocPackage = {
		name: name$4,
		uri: uri$4,
		prefix: prefix$4,
		types: types$4,
		enumerations: enumerations$2,
		associations: associations$4
	};

	var packages = {
	  bpmn: BpmnPackage,
	  bpmndi: BpmnDiPackage,
	  dc: DcPackage,
	  di: DiPackage,
	  bioc: BiocPackage
	};

	function simple(additionalPackages, options) {
	  var pks = assign({}, packages, additionalPackages);

	  return new BpmnModdle(pks, options);
	}

	function elementToString(e) {
	  if (!e) {
	    return '<null>';
	  }

	  return '<' + e.$type + (e.id ? ' id="' + e.id : '') + '" />';
	}

	var diRefs = new objectRefs(
	  { name: 'bpmnElement', enumerable: true },
	  { name: 'di', configurable: true }
	);

	/**
	 * Returns true if an element has the given meta-model type
	 *
	 * @param  {ModdleElement}  element
	 * @param  {string}         type
	 *
	 * @return {boolean}
	 */
	function is(element, type) {
	  return element.$instanceOf(type);
	}


	/**
	 * Find a suitable display candidate for definitions where the DI does not
	 * correctly specify one.
	 */
	function findDisplayCandidate(definitions) {
	  return find(definitions.rootElements, function(e) {
	    return is(e, 'bpmn:Process') || is(e, 'bpmn:Collaboration');
	  });
	}


	function BpmnTreeWalker(handler, translate) {

	  // list of containers already walked
	  var handledElements = {};

	  // list of elements to handle deferred to ensure
	  // prerequisites are drawn
	  var deferred = [];

	  // Helpers //////////////////////

	  function contextual(fn, ctx) {
	    return function(e) {
	      fn(e, ctx);
	    };
	  }

	  function handled(element) {
	    handledElements[element.id] = element;
	  }

	  function isHandled(element) {
	    return handledElements[element.id];
	  }

	  function visit(element, ctx) {

	    var gfx = element.gfx;

	    // avoid multiple rendering of elements
	    if (gfx) {
	      throw new Error(
	        translate('already rendered {element}', { element: elementToString(element) })
	      );
	    }

	    // call handler
	    return handler.element(element, ctx);
	  }

	  function visitRoot(element, diagram) {
	    return handler.root(element, diagram);
	  }

	  function visitIfDi(element, ctx) {

	    try {
	      var gfx = element.di && visit(element, ctx);

	      handled(element);

	      return gfx;
	    } catch (e) {
	      logError(e.message, { element: element, error: e });

	      console.error(translate('failed to import {element}', { element: elementToString(element) }));
	      console.error(e);
	    }
	  }

	  function logError(message, context) {
	    handler.error(message, context);
	  }

	  // DI handling //////////////////////

	  function registerDi(di) {
	    var bpmnElement = di.bpmnElement;

	    if (bpmnElement) {
	      if (bpmnElement.di) {
	        logError(
	          translate('multiple DI elements defined for {element}', {
	            element: elementToString(bpmnElement)
	          }),
	          { element: bpmnElement }
	        );
	      } else {
	        diRefs.bind(bpmnElement, 'di');
	        bpmnElement.di = di;
	      }
	    } else {
	      logError(
	        translate('no bpmnElement referenced in {element}', {
	          element: elementToString(di)
	        }),
	        { element: di }
	      );
	    }
	  }

	  function handleDiagram(diagram) {
	    handlePlane(diagram.plane);
	  }

	  function handlePlane(plane) {
	    registerDi(plane);

	    forEach(plane.planeElement, handlePlaneElement);
	  }

	  function handlePlaneElement(planeElement) {
	    registerDi(planeElement);
	  }


	  // Semantic handling //////////////////////

	  /**
	   * Handle definitions and return the rendered diagram (if any)
	   *
	   * @param {ModdleElement} definitions to walk and import
	   * @param {ModdleElement} [diagram] specific diagram to import and display
	   *
	   * @throws {Error} if no diagram to display could be found
	   */
	  function handleDefinitions(definitions, diagram) {

	    // make sure we walk the correct bpmnElement

	    var diagrams = definitions.diagrams;

	    if (diagram && diagrams.indexOf(diagram) === -1) {
	      throw new Error(translate('diagram not part of bpmn:Definitions'));
	    }

	    if (!diagram && diagrams && diagrams.length) {
	      diagram = diagrams[0];
	    }

	    // no diagram -> nothing to import
	    if (!diagram) {
	      throw new Error(translate('no diagram to display'));
	    }

	    // load DI from selected diagram only
	    handleDiagram(diagram);


	    var plane = diagram.plane;

	    if (!plane) {
	      throw new Error(translate(
	        'no plane for {element}',
	        { element: elementToString(diagram) }
	      ));
	    }

	    var rootElement = plane.bpmnElement;

	    // ensure we default to a suitable display candidate (process or collaboration),
	    // even if non is specified in DI
	    if (!rootElement) {
	      rootElement = findDisplayCandidate(definitions);

	      if (!rootElement) {
	        throw new Error(translate('no process or collaboration to display'));
	      } else {

	        logError(
	          translate('correcting missing bpmnElement on {plane} to {rootElement}', {
	            plane: elementToString(plane),
	            rootElement: elementToString(rootElement)
	          })
	        );

	        // correct DI on the fly
	        plane.bpmnElement = rootElement;
	        registerDi(plane);
	      }
	    }


	    var ctx = visitRoot(rootElement, plane);

	    if (is(rootElement, 'bpmn:Process')) {
	      handleProcess(rootElement, ctx);
	    } else if (is(rootElement, 'bpmn:Collaboration')) {
	      handleCollaboration(rootElement);

	      // force drawing of everything not yet drawn that is part of the target DI
	      handleUnhandledProcesses(definitions.rootElements, ctx);
	    } else {
	      throw new Error(
	        translate('unsupported bpmnElement for {plane}: {rootElement}', {
	          plane: elementToString(plane),
	          rootElement: elementToString(rootElement)
	        })
	      );
	    }

	    // handle all deferred elements
	    handleDeferred();
	  }

	  function handleDeferred() {

	    var fn;

	    // drain deferred until empty
	    while (deferred.length) {
	      fn = deferred.shift();

	      fn();
	    }
	  }

	  function handleProcess(process, context) {
	    handleFlowElementsContainer(process, context);
	    handleIoSpecification(process.ioSpecification, context);

	    handleArtifacts(process.artifacts, context);

	    // log process handled
	    handled(process);
	  }

	  function handleUnhandledProcesses(rootElements, ctx) {

	    // walk through all processes that have not yet been drawn and draw them
	    // if they contain lanes with DI information.
	    // we do this to pass the free-floating lane test cases in the MIWG test suite
	    var processes = filter(rootElements, function(e) {
	      return !isHandled(e) && is(e, 'bpmn:Process') && e.laneSets;
	    });

	    processes.forEach(contextual(handleProcess, ctx));
	  }

	  function handleMessageFlow(messageFlow, context) {
	    visitIfDi(messageFlow, context);
	  }

	  function handleMessageFlows(messageFlows, context) {
	    forEach(messageFlows, contextual(handleMessageFlow, context));
	  }

	  function handleDataAssociation(association, context) {
	    visitIfDi(association, context);
	  }

	  function handleDataInput(dataInput, context) {
	    visitIfDi(dataInput, context);
	  }

	  function handleDataOutput(dataOutput, context) {
	    visitIfDi(dataOutput, context);
	  }

	  function handleArtifact(artifact, context) {

	    // bpmn:TextAnnotation
	    // bpmn:Group
	    // bpmn:Association

	    visitIfDi(artifact, context);
	  }

	  function handleArtifacts(artifacts, context) {

	    forEach(artifacts, function(e) {
	      if (is(e, 'bpmn:Association')) {
	        deferred.push(function() {
	          handleArtifact(e, context);
	        });
	      } else {
	        handleArtifact(e, context);
	      }
	    });
	  }

	  function handleIoSpecification(ioSpecification, context) {

	    if (!ioSpecification) {
	      return;
	    }

	    forEach(ioSpecification.dataInputs, contextual(handleDataInput, context));
	    forEach(ioSpecification.dataOutputs, contextual(handleDataOutput, context));
	  }

	  function handleSubProcess(subProcess, context) {
	    handleFlowElementsContainer(subProcess, context);
	    handleArtifacts(subProcess.artifacts, context);
	  }

	  function handleFlowNode(flowNode, context) {
	    var childCtx = visitIfDi(flowNode, context);

	    if (is(flowNode, 'bpmn:SubProcess')) {
	      handleSubProcess(flowNode, childCtx || context);
	    }

	    if (is(flowNode, 'bpmn:Activity')) {
	      handleIoSpecification(flowNode.ioSpecification, context);
	    }

	    // defer handling of associations
	    // affected types:
	    //
	    //   * bpmn:Activity
	    //   * bpmn:ThrowEvent
	    //   * bpmn:CatchEvent
	    //
	    deferred.push(function() {
	      forEach(flowNode.dataInputAssociations, contextual(handleDataAssociation, context));
	      forEach(flowNode.dataOutputAssociations, contextual(handleDataAssociation, context));
	    });
	  }

	  function handleSequenceFlow(sequenceFlow, context) {
	    visitIfDi(sequenceFlow, context);
	  }

	  function handleDataElement(dataObject, context) {
	    visitIfDi(dataObject, context);
	  }

	  function handleLane(lane, context) {

	    deferred.push(function() {

	      var newContext = visitIfDi(lane, context);

	      if (lane.childLaneSet) {
	        handleLaneSet(lane.childLaneSet, newContext || context);
	      }

	      wireFlowNodeRefs(lane);
	    });
	  }

	  function handleLaneSet(laneSet, context) {
	    forEach(laneSet.lanes, contextual(handleLane, context));
	  }

	  function handleLaneSets(laneSets, context) {
	    forEach(laneSets, contextual(handleLaneSet, context));
	  }

	  function handleFlowElementsContainer(container, context) {
	    handleFlowElements(container.flowElements, context);

	    if (container.laneSets) {
	      handleLaneSets(container.laneSets, context);
	    }
	  }

	  function handleFlowElements(flowElements, context) {
	    forEach(flowElements, function(e) {
	      if (is(e, 'bpmn:SequenceFlow')) {
	        deferred.push(function() {
	          handleSequenceFlow(e, context);
	        });
	      } else if (is(e, 'bpmn:BoundaryEvent')) {
	        deferred.unshift(function() {
	          handleFlowNode(e, context);
	        });
	      } else if (is(e, 'bpmn:FlowNode')) {
	        handleFlowNode(e, context);
	      } else if (is(e, 'bpmn:DataObject')) ; else if (is(e, 'bpmn:DataStoreReference')) {
	        handleDataElement(e, context);
	      } else if (is(e, 'bpmn:DataObjectReference')) {
	        handleDataElement(e, context);
	      } else {
	        logError(
	          translate('unrecognized flowElement {element} in context {context}', {
	            element: elementToString(e),
	            context: (context ? elementToString(context.businessObject) : 'null')
	          }),
	          { element: e, context: context }
	        );
	      }
	    });
	  }

	  function handleParticipant(participant, context) {
	    var newCtx = visitIfDi(participant, context);

	    var process = participant.processRef;
	    if (process) {
	      handleProcess(process, newCtx || context);
	    }
	  }

	  function handleCollaboration(collaboration) {

	    forEach(collaboration.participants, contextual(handleParticipant));

	    handleArtifacts(collaboration.artifacts);

	    // handle message flows latest in the process
	    deferred.push(function() {
	      handleMessageFlows(collaboration.messageFlows);
	    });
	  }


	  function wireFlowNodeRefs(lane) {

	    // wire the virtual flowNodeRefs <-> relationship
	    forEach(lane.flowNodeRef, function(flowNode) {
	      var lanes = flowNode.get('lanes');

	      if (lanes) {
	        lanes.push(lane);
	      }
	    });
	  }

	  // API //////////////////////

	  return {
	    handleDeferred: handleDeferred,
	    handleDefinitions: handleDefinitions,
	    handleSubProcess: handleSubProcess,
	    registerDi: registerDi
	  };
	}

	/**
	 * The importBpmnDiagram result.
	 *
	 * @typedef {Object} ImportBPMNDiagramResult
	 *
	 * @property {Array<string>} warnings
	 */

	/**
	* The importBpmnDiagram error.
	*
	* @typedef {Error} ImportBPMNDiagramError
	*
	* @property {Array<string>} warnings
	*/

	/**
	 * Import the definitions into a diagram.
	 *
	 * Errors and warnings are reported through the specified callback.
	 *
	 * @param  {djs.Diagram} diagram
	 * @param  {ModdleElement<Definitions>} definitions
	 * @param  {ModdleElement<BPMNDiagram>} [bpmnDiagram] the diagram to be rendered
	 * (if not provided, the first one will be rendered)
	 *
	 * Returns {Promise<ImportBPMNDiagramResult, ImportBPMNDiagramError>}
	 */
	function importBpmnDiagram(diagram, definitions, bpmnDiagram) {

	  var importer,
	      eventBus,
	      translate;

	  var error,
	      warnings = [];

	  /**
	   * Walk the diagram semantically, importing (=drawing)
	   * all elements you encounter.
	   *
	   * @param {ModdleElement<Definitions>} definitions
	   * @param {ModdleElement<BPMNDiagram>} bpmnDiagram
	   */
	  function render(definitions, bpmnDiagram) {

	    var visitor = {

	      root: function(element) {
	        return importer.add(element);
	      },

	      element: function(element, parentShape) {
	        return importer.add(element, parentShape);
	      },

	      error: function(message, context) {
	        warnings.push({ message: message, context: context });
	      }
	    };

	    var walker = new BpmnTreeWalker(visitor, translate);

	    // traverse BPMN 2.0 document model,
	    // starting at definitions
	    walker.handleDefinitions(definitions, bpmnDiagram);
	  }

	  return new Promise(function(resolve, reject) {
	    try {
	      importer = diagram.get('bpmnImporter');
	      eventBus = diagram.get('eventBus');
	      translate = diagram.get('translate');

	      eventBus.fire('import.render.start', { definitions: definitions });

	      render(definitions, bpmnDiagram);

	      eventBus.fire('import.render.complete', {
	        error: error,
	        warnings: warnings
	      });

	      return resolve({ warnings: warnings });
	    } catch (e) {

	      e.warnings = warnings;
	      return reject(e);
	    }
	  });
	}

	// TODO(nikku): remove with future bpmn-js version

	/**
	 * Wraps APIs to check:
	 *
	 * 1) If a callback is passed -> Warn users about callback deprecation.
	 * 2) If Promise class is implemented in current environment.
	 *
	 * @private
	 */
	function wrapForCompatibility(api) {

	  return function() {

	    if (!window.Promise) {
	      throw new Error('Promises is not supported in this environment. Please polyfill Promise.');
	    }

	    var argLen = arguments.length;
	    if (argLen >= 1 && isFunction(arguments[argLen - 1])) {

	      var callback = arguments[argLen - 1];

	      console.warn(new Error(
	        'Passing callbacks to ' + api.name + ' is deprecated and will be removed in a future major release. ' +
	        'Please switch to promises: https://bpmn.io/l/moving-to-promises.html'
	      ));

	      var argsWithoutCallback = Array.prototype.slice.call(arguments, 0, -1);

	      api.apply(this, argsWithoutCallback).then(function(result) {

	        var firstKey = Object.keys(result)[0];

	        // The APIs we are wrapping all resolve a single item depending on the API.
	        // For instance, importXML resolves { warnings } and saveXML returns { xml }.
	        // That's why we can call the callback with the first item of result.
	        return callback(null, result[firstKey]);

	        // Passing a second paramter instead of catch because we don't want to
	        // catch errors thrown by callback().
	      }, function(err) {

	        return callback(err, err.warnings);
	      });
	    } else {

	      return api.apply(this, arguments);
	    }
	  };
	}

	/**
	 * This file must not be changed or exchanged.
	 *
	 * @see http://bpmn.io/license for more information.
	 */


	// inlined ../../resources/logo.svg
	var BPMNIO_LOGO_SVG = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 14.02 5.57" width="53" height="21" style="vertical-align:middle"><path fill="currentColor" d="M1.88.92v.14c0 .41-.13.68-.4.8.33.14.46.44.46.86v.33c0 .61-.33.95-.95.95H0V0h.95c.65 0 .93.3.93.92zM.63.57v1.06h.24c.24 0 .38-.1.38-.43V.98c0-.28-.1-.4-.32-.4zm0 1.63v1.22h.36c.2 0 .32-.1.32-.39v-.35c0-.37-.12-.48-.4-.48H.63zM4.18.99v.52c0 .64-.31.98-.94.98h-.3V4h-.62V0h.92c.63 0 .94.35.94.99zM2.94.57v1.35h.3c.2 0 .3-.09.3-.37v-.6c0-.29-.1-.38-.3-.38h-.3zm2.89 2.27L6.25 0h.88v4h-.6V1.12L6.1 3.99h-.6l-.46-2.82v2.82h-.55V0h.87zM8.14 1.1V4h-.56V0h.79L9 2.4V0h.56v4h-.64zm2.49 2.29v.6h-.6v-.6zM12.12 1c0-.63.33-1 .95-1 .61 0 .95.37.95 1v2.04c0 .64-.34 1-.95 1-.62 0-.95-.37-.95-1zm.62 2.08c0 .28.13.39.33.39s.32-.1.32-.4V.98c0-.29-.12-.4-.32-.4s-.33.11-.33.4z"/><path fill="currentColor" d="M0 4.53h14.02v1.04H0zM11.08 0h.63v.62h-.63zm.63 4V1h-.63v2.98z"/></svg>';

	var BPMNIO_IMG = BPMNIO_LOGO_SVG;

	function css(attrs) {
	  return attrs.join(';');
	}

	var LINK_STYLES = css([
	  'color: #404040'
	]);

	var LIGHTBOX_STYLES = css([
	  'z-index: 1001',
	  'position: fixed',
	  'top: 0',
	  'left: 0',
	  'right: 0',
	  'bottom: 0'
	]);

	var BACKDROP_STYLES = css([
	  'width: 100%',
	  'height: 100%',
	  'background: rgba(40,40,40,0.2)'
	]);

	var NOTICE_STYLES = css([
	  'position: absolute',
	  'left: 50%',
	  'top: 40%',
	  'transform: translate(-50%)',
	  'width: 260px',
	  'padding: 10px',
	  'background: white',
	  'box-shadow: 0 1px 4px rgba(0,0,0,0.3)',
	  'font-family: Helvetica, Arial, sans-serif',
	  'font-size: 14px',
	  'display: flex',
	  'line-height: 1.3'
	]);

	var LIGHTBOX_MARKUP =
	  '<div class="bjs-powered-by-lightbox" style="' + LIGHTBOX_STYLES + '">' +
	    '<div class="backdrop" style="' + BACKDROP_STYLES + '"></div>' +
	    '<div class="notice" style="' + NOTICE_STYLES + '">' +
	      '<a href="https://bpmn.io" target="_blank" rel="noopener" style="margin: 15px 20px 15px 10px; align-self: center;' + LINK_STYLES + '">' +
	        BPMNIO_IMG +
	      '</a>' +
	      '<span>' +
	        'Web-based tooling for BPMN, DMN and CMMN diagrams ' +
	        'powered by <a href="https://bpmn.io" target="_blank" rel="noopener">bpmn.io</a>.' +
	      '</span>' +
	    '</div>' +
	  '</div>';


	var lightbox;

	function open() {

	  if (!lightbox) {
	    lightbox = domify(LIGHTBOX_MARKUP);

	    delegate.bind(lightbox, '.backdrop', 'click', function(event) {
	      document.body.removeChild(lightbox);
	    });
	  }

	  document.body.appendChild(lightbox);
	}

	/**
	 * The code in the <project-logo></project-logo> area
	 * must not be changed.
	 *
	 * @see http://bpmn.io/license for more information.
	 */

	/**
	 * A base viewer for BPMN 2.0 diagrams.
	 *
	 * Have a look at {@link Viewer}, {@link NavigatedViewer} or {@link Modeler} for
	 * bundles that include actual features.
	 *
	 * @param {Object} [options] configuration options to pass to the viewer
	 * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.
	 * @param {string|number} [options.width] the width of the viewer
	 * @param {string|number} [options.height] the height of the viewer
	 * @param {Object} [options.moddleExtensions] extension packages to provide
	 * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules
	 * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules
	 */
	function BaseViewer(options) {

	  options = assign({}, DEFAULT_OPTIONS, options);

	  this._moddle = this._createModdle(options);

	  this._container = this._createContainer(options);

	  /* <project-logo> */

	  addProjectLogo(this._container);

	  /* </project-logo> */

	  this._init(this._container, this._moddle, options);
	}

	inherits_browser(BaseViewer, Diagram);

	/**
	* The importXML result.
	*
	* @typedef {Object} ImportXMLResult
	*
	* @property {Array<string>} warnings
	*/

	/**
	* The importXML error.
	*
	* @typedef {Error} ImportXMLError
	*
	* @property {Array<string>} warnings
	*/

	/**
	 * Parse and render a BPMN 2.0 diagram.
	 *
	 * Once finished the viewer reports back the result to the
	 * provided callback function with (err, warnings).
	 *
	 * ## Life-Cycle Events
	 *
	 * During import the viewer will fire life-cycle events:
	 *
	 *   * import.parse.start (about to read model from xml)
	 *   * import.parse.complete (model read; may have worked or not)
	 *   * import.render.start (graphical import start)
	 *   * import.render.complete (graphical import finished)
	 *   * import.done (everything done)
	 *
	 * You can use these events to hook into the life-cycle.
	 *
	 * @param {string} xml the BPMN 2.0 xml
	 * @param {ModdleElement<BPMNDiagram>|string} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)
	 *
	 * Returns {Promise<ImportXMLResult, ImportXMLError>}
	 */
	BaseViewer.prototype.importXML = wrapForCompatibility(function importXML(xml, bpmnDiagram) {

	  var self = this;

	  function ParseCompleteEvent(data) {

	    var event = self.get('eventBus').createEvent(data);

	    // TODO(nikku): remove with future bpmn-js version
	    Object.defineProperty(event, 'context', {
	      enumerable: true,
	      get: function() {

	        console.warn(new Error(
	          'import.parse.complete <context> is deprecated ' +
	          'and will be removed in future library versions'
	        ));

	        return {
	          warnings: data.warnings,
	          references: data.references,
	          elementsById: data.elementsById
	        };
	      }
	    });

	    return event;
	  }

	  return new Promise(function(resolve, reject) {

	    // hook in pre-parse listeners +
	    // allow xml manipulation
	    xml = self._emit('import.parse.start', { xml: xml }) || xml;

	    self._moddle.fromXML(xml, 'bpmn:Definitions').then(function(result) {
	      var definitions = result.rootElement;
	      var references = result.references;
	      var parseWarnings = result.warnings;
	      var elementsById = result.elementsById;

	      // hook in post parse listeners +
	      // allow definitions manipulation
	      definitions = self._emit('import.parse.complete', ParseCompleteEvent({
	        error: null,
	        definitions: definitions,
	        elementsById: elementsById,
	        references: references,
	        warnings: parseWarnings
	      })) || definitions;

	      self.importDefinitions(definitions, bpmnDiagram).then(function(result) {
	        var allWarnings = [].concat(parseWarnings, result.warnings || []);

	        self._emit('import.done', { error: null, warnings: allWarnings });

	        return resolve({ warnings: allWarnings });
	      }).catch(function(err) {
	        var allWarnings = [].concat(parseWarnings, err.warnings || []);

	        self._emit('import.done', { error: err, warnings: allWarnings });

	        return reject(addWarningsToError(err, allWarnings));
	      });
	    }).catch(function(err) {

	      self._emit('import.parse.complete', {
	        error: err
	      });

	      err = checkValidationError(err);

	      self._emit('import.done', { error: err, warnings: err.warnings });

	      return reject(err);
	    });
	  });
	});

	/**
	* The importDefinitions result.
	*
	* @typedef {Object} ImportDefinitionsResult
	*
	* @property {Array<string>} warnings
	*/

	/**
	* The importDefinitions error.
	*
	* @typedef {Error} ImportDefinitionsError
	*
	* @property {Array<string>} warnings
	*/

	/**
	 * Import parsed definitions and render a BPMN 2.0 diagram.
	 *
	 * Once finished the viewer reports back the result to the
	 * provided callback function with (err, warnings).
	 *
	 * ## Life-Cycle Events
	 *
	 * During import the viewer will fire life-cycle events:
	 *
	 *   * import.render.start (graphical import start)
	 *   * import.render.complete (graphical import finished)
	 *
	 * You can use these events to hook into the life-cycle.
	 *
	 * @param {ModdleElement<Definitions>} definitions parsed BPMN 2.0 definitions
	 * @param {ModdleElement<BPMNDiagram>|string} [bpmnDiagram] BPMN diagram or id of diagram to render (if not provided, the first one will be rendered)
	 *
	 * Returns {Promise<ImportDefinitionsResult, ImportDefinitionsError>}
	 */
	BaseViewer.prototype.importDefinitions = wrapForCompatibility(function importDefinitions(definitions, bpmnDiagram) {

	  var self = this;

	  return new Promise(function(resolve, reject) {

	    self._setDefinitions(definitions);

	    self.open(bpmnDiagram).then(function(result) {

	      var warnings = result.warnings;

	      return resolve({ warnings: warnings });
	    }).catch(function(err) {

	      return reject(err);
	    });
	  });
	});

	/**
	 * The open result.
	 *
	 * @typedef {Object} OpenResult
	 *
	 * @property {Array<string>} warnings
	 */

	/**
	* The open error.
	*
	* @typedef {Error} OpenError
	*
	* @property {Array<string>} warnings
	*/

	/**
	 * Open diagram of previously imported XML.
	 *
	 * Once finished the viewer reports back the result to the
	 * provided callback function with (err, warnings).
	 *
	 * ## Life-Cycle Events
	 *
	 * During switch the viewer will fire life-cycle events:
	 *
	 *   * import.render.start (graphical import start)
	 *   * import.render.complete (graphical import finished)
	 *
	 * You can use these events to hook into the life-cycle.
	 *
	 * @param {string|ModdleElement<BPMNDiagram>} [bpmnDiagramOrId] id or the diagram to open
	 *
	 * Returns {Promise<OpenResult, OpenError>}
	 */
	BaseViewer.prototype.open = wrapForCompatibility(function open(bpmnDiagramOrId) {

	  var definitions = this._definitions;
	  var bpmnDiagram = bpmnDiagramOrId;

	  var self = this;

	  return new Promise(function(resolve, reject) {
	    if (!definitions) {
	      var err1 = new Error('no XML imported');

	      return reject(addWarningsToError(err1, []));
	    }

	    if (typeof bpmnDiagramOrId === 'string') {
	      bpmnDiagram = findBPMNDiagram(definitions, bpmnDiagramOrId);

	      if (!bpmnDiagram) {
	        var err2 = new Error('BPMNDiagram <' + bpmnDiagramOrId + '> not found');

	        return reject(addWarningsToError(err2, []));
	      }
	    }

	    // clear existing rendered diagram
	    // catch synchronous exceptions during #clear()
	    try {
	      self.clear();
	    } catch (error) {

	      return reject(addWarningsToError(error, []));
	    }

	    // perform graphical import
	    importBpmnDiagram(self, definitions, bpmnDiagram).then(function(result) {

	      var warnings = result.warnings;

	      return resolve({ warnings: warnings });
	    }).catch(function(err) {

	      return reject(err);
	    });
	  });
	});

	/**
	 * The saveXML result.
	 *
	 * @typedef {Object} SaveXMLResult
	 *
	 * @property {string} xml
	 */

	/**
	 * Export the currently displayed BPMN 2.0 diagram as
	 * a BPMN 2.0 XML document.
	 *
	 * ## Life-Cycle Events
	 *
	 * During XML saving the viewer will fire life-cycle events:
	 *
	 *   * saveXML.start (before serialization)
	 *   * saveXML.serialized (after xml generation)
	 *   * saveXML.done (everything done)
	 *
	 * You can use these events to hook into the life-cycle.
	 *
	 * @param {Object} [options] export options
	 * @param {boolean} [options.format=false] output formatted XML
	 * @param {boolean} [options.preamble=true] output preamble
	 *
	 * Returns {Promise<SaveXMLResult, Error>}
	 */
	BaseViewer.prototype.saveXML = wrapForCompatibility(function saveXML(options) {

	  options = options || {};

	  var self = this;

	  var definitions = this._definitions;

	  return new Promise(function(resolve, reject) {

	    if (!definitions) {
	      var err = new Error('no definitions loaded');

	      return reject(err);
	    }

	    // allow to fiddle around with definitions
	    definitions = self._emit('saveXML.start', {
	      definitions: definitions
	    }) || definitions;

	    self._moddle.toXML(definitions, options).then(function(result) {

	      var xml = result.xml;

	      try {
	        xml = self._emit('saveXML.serialized', {
	          error: null,
	          xml: xml
	        }) || xml;

	        self._emit('saveXML.done', {
	          error: null,
	          xml: xml
	        });
	      } catch (e) {
	        console.error('error in saveXML life-cycle listener', e);
	      }

	      return resolve({ xml: xml });
	    }).catch(function(err) {

	      return reject(err);
	    });
	  });
	});

	/**
	 * The saveSVG result.
	 *
	 * @typedef {Object} SaveSVGResult
	 *
	 * @property {string} svg
	 */

	/**
	 * Export the currently displayed BPMN 2.0 diagram as
	 * an SVG image.
	 *
	 * ## Life-Cycle Events
	 *
	 * During SVG saving the viewer will fire life-cycle events:
	 *
	 *   * saveSVG.start (before serialization)
	 *   * saveSVG.done (everything done)
	 *
	 * You can use these events to hook into the life-cycle.
	 *
	 * @param {Object} [options]
	 *
	 * Returns {Promise<SaveSVGResult, Error>}
	 */
	BaseViewer.prototype.saveSVG = wrapForCompatibility(function saveSVG(options) {

	  var self = this;

	  return new Promise(function(resolve, reject) {

	    self._emit('saveSVG.start');

	    var svg, err;

	    try {
	      var canvas = self.get('canvas');

	      var contentNode = canvas.getDefaultLayer(),
	          defsNode = query('defs', canvas._svg);

	      var contents = innerSVG(contentNode),
	          defs = defsNode ? '<defs>' + innerSVG(defsNode) + '</defs>' : '';

	      var bbox = contentNode.getBBox();

	      svg =
	        '<?xml version="1.0" encoding="utf-8"?>\n' +
	        '<!-- created with bpmn-js / http://bpmn.io -->\n' +
	        '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n' +
	        '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ' +
	             'width="' + bbox.width + '" height="' + bbox.height + '" ' +
	             'viewBox="' + bbox.x + ' ' + bbox.y + ' ' + bbox.width + ' ' + bbox.height + '" version="1.1">' +
	          defs + contents +
	        '</svg>';
	    } catch (e) {
	      err = e;
	    }

	    self._emit('saveSVG.done', {
	      error: err,
	      svg: svg
	    });

	    if (!err) {
	      return resolve({ svg: svg });
	    }

	    return reject(err);
	  });
	});

	/**
	 * Get a named diagram service.
	 *
	 * @example
	 *
	 * var elementRegistry = viewer.get('elementRegistry');
	 * var startEventShape = elementRegistry.get('StartEvent_1');
	 *
	 * @param {string} name
	 *
	 * @return {Object} diagram service instance
	 *
	 * @method BaseViewer#get
	 */

	/**
	 * Invoke a function in the context of this viewer.
	 *
	 * @example
	 *
	 * viewer.invoke(function(elementRegistry) {
	 *   var startEventShape = elementRegistry.get('StartEvent_1');
	 * });
	 *
	 * @param {Function} fn to be invoked
	 *
	 * @return {Object} the functions return value
	 *
	 * @method BaseViewer#invoke
	 */


	BaseViewer.prototype._setDefinitions = function(definitions) {
	  this._definitions = definitions;
	};

	BaseViewer.prototype.getModules = function() {
	  return this._modules;
	};

	/**
	 * Remove all drawn elements from the viewer.
	 *
	 * After calling this method the viewer can still
	 * be reused for opening another diagram.
	 *
	 * @method BaseViewer#clear
	 */
	BaseViewer.prototype.clear = function() {
	  if (!this.getDefinitions()) {

	    // no diagram to clear
	    return;
	  }

	  // remove businessObject#di binding
	  //
	  // this is necessary, as we establish the bindings
	  // in the BpmnTreeWalker (and assume none are given
	  // on reimport)
	  this.get('elementRegistry').forEach(function(element) {
	    var bo = element.businessObject;

	    if (bo && bo.di) {
	      delete bo.di;
	    }
	  });

	  // remove drawn elements
	  Diagram.prototype.clear.call(this);
	};

	/**
	 * Destroy the viewer instance and remove all its
	 * remainders from the document tree.
	 */
	BaseViewer.prototype.destroy = function() {

	  // diagram destroy
	  Diagram.prototype.destroy.call(this);

	  // dom detach
	  remove(this._container);
	};

	/**
	 * Register an event listener
	 *
	 * Remove a previously added listener via {@link #off(event, callback)}.
	 *
	 * @param {string} event
	 * @param {number} [priority]
	 * @param {Function} callback
	 * @param {Object} [that]
	 */
	BaseViewer.prototype.on = function(event, priority, callback, target) {
	  return this.get('eventBus').on(event, priority, callback, target);
	};

	/**
	 * De-register an event listener
	 *
	 * @param {string} event
	 * @param {Function} callback
	 */
	BaseViewer.prototype.off = function(event, callback) {
	  this.get('eventBus').off(event, callback);
	};

	BaseViewer.prototype.attachTo = function(parentNode) {

	  if (!parentNode) {
	    throw new Error('parentNode required');
	  }

	  // ensure we detach from the
	  // previous, old parent
	  this.detach();

	  // unwrap jQuery if provided
	  if (parentNode.get && parentNode.constructor.prototype.jquery) {
	    parentNode = parentNode.get(0);
	  }

	  if (typeof parentNode === 'string') {
	    parentNode = query(parentNode);
	  }

	  parentNode.appendChild(this._container);

	  this._emit('attach', {});

	  this.get('canvas').resized();
	};

	BaseViewer.prototype.getDefinitions = function() {
	  return this._definitions;
	};

	BaseViewer.prototype.detach = function() {

	  var container = this._container,
	      parentNode = container.parentNode;

	  if (!parentNode) {
	    return;
	  }

	  this._emit('detach', {});

	  parentNode.removeChild(container);
	};

	BaseViewer.prototype._init = function(container, moddle, options) {

	  var baseModules = options.modules || this.getModules(),
	      additionalModules = options.additionalModules || [],
	      staticModules = [
	        {
	          bpmnjs: [ 'value', this ],
	          moddle: [ 'value', moddle ]
	        }
	      ];

	  var diagramModules = [].concat(staticModules, baseModules, additionalModules);

	  var diagramOptions = assign(omit(options, [ 'additionalModules' ]), {
	    canvas: assign({}, options.canvas, { container: container }),
	    modules: diagramModules
	  });

	  // invoke diagram constructor
	  Diagram.call(this, diagramOptions);

	  if (options && options.container) {
	    this.attachTo(options.container);
	  }
	};

	/**
	 * Emit an event on the underlying {@link EventBus}
	 *
	 * @param  {string} type
	 * @param  {Object} event
	 *
	 * @return {Object} event processing result (if any)
	 */
	BaseViewer.prototype._emit = function(type, event) {
	  return this.get('eventBus').fire(type, event);
	};

	BaseViewer.prototype._createContainer = function(options) {

	  var container = domify('<div class="bjs-container"></div>');

	  assign(container.style, {
	    width: ensureUnit(options.width),
	    height: ensureUnit(options.height),
	    position: options.position
	  });

	  return container;
	};

	BaseViewer.prototype._createModdle = function(options) {
	  var moddleOptions = assign({}, this._moddleExtensions, options.moddleExtensions);

	  return new simple(moddleOptions);
	};

	BaseViewer.prototype._modules = [];

	// helpers ///////////////

	function addWarningsToError(err, warningsAry) {
	  err.warnings = warningsAry;
	  return err;
	}

	function checkValidationError(err) {

	  // check if we can help the user by indicating wrong BPMN 2.0 xml
	  // (in case he or the exporting tool did not get that right)

	  var pattern = /unparsable content <([^>]+)> detected([\s\S]*)$/;
	  var match = pattern.exec(err.message);

	  if (match) {
	    err.message =
	      'unparsable content <' + match[1] + '> detected; ' +
	      'this may indicate an invalid BPMN 2.0 diagram file' + match[2];
	  }

	  return err;
	}

	var DEFAULT_OPTIONS = {
	  width: '100%',
	  height: '100%',
	  position: 'relative'
	};


	/**
	 * Ensure the passed argument is a proper unit (defaulting to px)
	 */
	function ensureUnit(val) {
	  return val + (isNumber(val) ? 'px' : '');
	}


	/**
	 * Find BPMNDiagram in definitions by ID
	 *
	 * @param {ModdleElement<Definitions>} definitions
	 * @param {string} diagramId
	 *
	 * @return {ModdleElement<BPMNDiagram>|null}
	 */
	function findBPMNDiagram(definitions, diagramId) {
	  if (!diagramId) {
	    return null;
	  }

	  return find(definitions.diagrams, function(element) {
	    return element.id === diagramId;
	  }) || null;
	}

	/**
	 * Adds the project logo to the diagram container as
	 * required by the bpmn.io license.
	 *
	 * @see http://bpmn.io/license
	 *
	 * @param {Element} container
	 */
	function addProjectLogo(container) {
	  var img = BPMNIO_IMG;

	  var linkMarkup =
	    '<a href="http://bpmn.io" ' +
	       'target="_blank" ' +
	       'class="bjs-powered-by" ' +
	       'title="Powered by bpmn.io" ' +
	       'style="position: absolute; bottom: 15px; right: 15px; z-index: 100; ' + LINK_STYLES + '">' +
	      img +
	    '</a>';

	  var linkElement = domify(linkMarkup);

	  container.appendChild(linkElement);

	  componentEvent.bind(linkElement, 'click', function(event) {
	    open();

	    event.preventDefault();
	  });
	}

	/* </project-logo> */

	/**
	 * A base modeler for BPMN 2.0 diagrams.
	 *
	 * Have a look at {@link Modeler} for a bundle that includes actual features.
	 *
	 * @param {Object} [options] configuration options to pass to the viewer
	 * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.
	 * @param {string|number} [options.width] the width of the viewer
	 * @param {string|number} [options.height] the height of the viewer
	 * @param {Object} [options.moddleExtensions] extension packages to provide
	 * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules
	 * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules
	 */
	function BaseModeler(options) {
	  BaseViewer.call(this, options);

	  // hook ID collection into the modeler
	  this.on('import.parse.complete', function(event) {
	    if (!event.error) {
	      this._collectIds(event.definitions, event.elementsById);
	    }
	  }, this);

	  this.on('diagram.destroy', function() {
	    this.get('moddle').ids.clear();
	  }, this);
	}

	inherits_browser(BaseModeler, BaseViewer);


	/**
	 * Create a moddle instance, attaching ids to it.
	 *
	 * @param {Object} options
	 */
	BaseModeler.prototype._createModdle = function(options) {
	  var moddle = BaseViewer.prototype._createModdle.call(this, options);

	  // attach ids to moddle to be able to track
	  // and validated ids in the BPMN 2.0 XML document
	  // tree
	  moddle.ids = new Ids([ 32, 36, 1 ]);

	  return moddle;
	};

	/**
	 * Collect ids processed during parsing of the
	 * definitions object.
	 *
	 * @param {ModdleElement} definitions
	 * @param {Context} context
	 */
	BaseModeler.prototype._collectIds = function(definitions, elementsById) {

	  var moddle = definitions.$model,
	      ids = moddle.ids,
	      id;

	  // remove references from previous import
	  ids.clear();

	  for (id in elementsById) {
	    ids.claim(id, elementsById[id]);
	  }
	};

	/**
	 * Is an element of the given BPMN type?
	 *
	 * @param  {djs.model.Base|ModdleElement} element
	 * @param  {string} type
	 *
	 * @return {boolean}
	 */
	function is$1(element, type) {
	  var bo = getBusinessObject(element);

	  return bo && (typeof bo.$instanceOf === 'function') && bo.$instanceOf(type);
	}


	/**
	 * Return the business object for a given element.
	 *
	 * @param  {djs.model.Base|ModdleElement} element
	 *
	 * @return {ModdleElement}
	 */
	function getBusinessObject(element) {
	  return (element && element.businessObject) || element;
	}

	var ModelUtil = /*#__PURE__*/Object.freeze({
		__proto__: null,
		is: is$1,
		getBusinessObject: getBusinessObject
	});

	function isExpanded(element) {

	  if (is$1(element, 'bpmn:CallActivity')) {
	    return false;
	  }

	  if (is$1(element, 'bpmn:SubProcess')) {
	    return getBusinessObject(element).di && !!getBusinessObject(element).di.isExpanded;
	  }

	  if (is$1(element, 'bpmn:Participant')) {
	    return !!getBusinessObject(element).processRef;
	  }

	  return true;
	}

	function isInterrupting(element) {
	  return element && getBusinessObject(element).isInterrupting !== false;
	}

	function isEventSubProcess(element) {
	  return element && !!getBusinessObject(element).triggeredByEvent;
	}

	function hasEventDefinition(element, eventType) {
	  var bo = getBusinessObject(element),
	      hasEventDefinition = false;

	  if (bo.eventDefinitions) {
	    forEach(bo.eventDefinitions, function(event) {
	      if (is$1(event, eventType)) {
	        hasEventDefinition = true;
	      }
	    });
	  }

	  return hasEventDefinition;
	}

	function hasErrorEventDefinition(element) {
	  return hasEventDefinition(element, 'bpmn:ErrorEventDefinition');
	}

	function hasEscalationEventDefinition(element) {
	  return hasEventDefinition(element, 'bpmn:EscalationEventDefinition');
	}

	function hasCompensateEventDefinition(element) {
	  return hasEventDefinition(element, 'bpmn:CompensateEventDefinition');
	}

	var DiUtil = /*#__PURE__*/Object.freeze({
		__proto__: null,
		isExpanded: isExpanded,
		isInterrupting: isInterrupting,
		isEventSubProcess: isEventSubProcess,
		hasEventDefinition: hasEventDefinition,
		hasErrorEventDefinition: hasErrorEventDefinition,
		hasEscalationEventDefinition: hasEscalationEventDefinition,
		hasCompensateEventDefinition: hasCompensateEventDefinition
	});

	function getLabelAttr(semantic) {
	  if (
	    is$1(semantic, 'bpmn:FlowElement') ||
	    is$1(semantic, 'bpmn:Participant') ||
	    is$1(semantic, 'bpmn:Lane') ||
	    is$1(semantic, 'bpmn:SequenceFlow') ||
	    is$1(semantic, 'bpmn:MessageFlow') ||
	    is$1(semantic, 'bpmn:DataInput') ||
	    is$1(semantic, 'bpmn:DataOutput')
	  ) {
	    return 'name';
	  }

	  if (is$1(semantic, 'bpmn:TextAnnotation')) {
	    return 'text';
	  }

	  if (is$1(semantic, 'bpmn:Group')) {
	    return 'categoryValueRef';
	  }
	}

	function getCategoryValue(semantic) {
	  var categoryValueRef = semantic['categoryValueRef'];

	  if (!categoryValueRef) {
	    return '';
	  }


	  return categoryValueRef.value || '';
	}

	function getLabel(element) {
	  var semantic = element.businessObject,
	      attr = getLabelAttr(semantic);

	  if (attr) {

	    if (attr === 'categoryValueRef') {

	      return getCategoryValue(semantic);
	    }

	    return semantic[attr] || '';
	  }
	}


	function setLabel(element, text, isExternal) {
	  var semantic = element.businessObject,
	      attr = getLabelAttr(semantic);

	  if (attr) {

	    if (attr === 'categoryValueRef') {
	      semantic['categoryValueRef'].value = text;
	    } else {
	      semantic[attr] = text;
	    }

	  }

	  return element;
	}

	// element utils //////////////////////

	/**
	 * Checks if eventDefinition of the given element matches with semantic type.
	 *
	 * @return {boolean} true if element is of the given semantic type
	 */
	function isTypedEvent(event, eventDefinitionType, filter) {

	  function matches(definition, filter) {
	    return every(filter, function(val, key) {

	      // we want a == conversion here, to be able to catch
	      // undefined == false and friends
	      /* jshint -W116 */
	      return definition[key] == val;
	    });
	  }

	  return some(event.eventDefinitions, function(definition) {
	    return definition.$type === eventDefinitionType && matches(event, filter);
	  });
	}

	function isThrowEvent(event) {
	  return (event.$type === 'bpmn:IntermediateThrowEvent') || (event.$type === 'bpmn:EndEvent');
	}

	function isCollection(element) {
	  var dataObject = element.dataObjectRef;

	  return element.isCollection || (dataObject && dataObject.isCollection);
	}

	function getDi(element) {
	  return element.businessObject.di;
	}

	function getSemantic(element) {
	  return element.businessObject;
	}


	// color access //////////////////////

	function getFillColor(element, defaultColor) {
	  return getDi(element).get('bioc:fill') || defaultColor || 'white';
	}

	function getStrokeColor(element, defaultColor) {
	  return getDi(element).get('bioc:stroke') || defaultColor || 'black';
	}


	// cropping path customizations //////////////////////

	function getCirclePath(shape) {

	  var cx = shape.x + shape.width / 2,
	      cy = shape.y + shape.height / 2,
	      radius = shape.width / 2;

	  var circlePath = [
	    ['M', cx, cy],
	    ['m', 0, -radius],
	    ['a', radius, radius, 0, 1, 1, 0, 2 * radius],
	    ['a', radius, radius, 0, 1, 1, 0, -2 * radius],
	    ['z']
	  ];

	  return componentsToPath(circlePath);
	}

	function getRoundRectPath(shape, borderRadius) {

	  var x = shape.x,
	      y = shape.y,
	      width = shape.width,
	      height = shape.height;

	  var roundRectPath = [
	    ['M', x + borderRadius, y],
	    ['l', width - borderRadius * 2, 0],
	    ['a', borderRadius, borderRadius, 0, 0, 1, borderRadius, borderRadius],
	    ['l', 0, height - borderRadius * 2],
	    ['a', borderRadius, borderRadius, 0, 0, 1, -borderRadius, borderRadius],
	    ['l', borderRadius * 2 - width, 0],
	    ['a', borderRadius, borderRadius, 0, 0, 1, -borderRadius, -borderRadius],
	    ['l', 0, borderRadius * 2 - height],
	    ['a', borderRadius, borderRadius, 0, 0, 1, borderRadius, -borderRadius],
	    ['z']
	  ];

	  return componentsToPath(roundRectPath);
	}

	function getDiamondPath(shape) {

	  var width = shape.width,
	      height = shape.height,
	      x = shape.x,
	      y = shape.y,
	      halfWidth = width / 2,
	      halfHeight = height / 2;

	  var diamondPath = [
	    ['M', x + halfWidth, y],
	    ['l', halfWidth, halfHeight],
	    ['l', -halfWidth, halfHeight],
	    ['l', -halfWidth, -halfHeight],
	    ['z']
	  ];

	  return componentsToPath(diamondPath);
	}

	function getRectPath(shape) {
	  var x = shape.x,
	      y = shape.y,
	      width = shape.width,
	      height = shape.height;

	  var rectPath = [
	    ['M', x, y],
	    ['l', width, 0],
	    ['l', 0, height],
	    ['l', -width, 0],
	    ['z']
	  ];

	  return componentsToPath(rectPath);
	}

	var RENDERER_IDS = new Ids();

	var TASK_BORDER_RADIUS = 10;
	var INNER_OUTER_DIST = 3;

	var DEFAULT_FILL_OPACITY = .95,
	    HIGH_FILL_OPACITY = .35;


	function BpmnRenderer(
	    config, eventBus, styles, pathMap,
	    canvas, textRenderer, priority) {

	  BaseRenderer.call(this, eventBus, priority);

	  var defaultFillColor = config && config.defaultFillColor,
	      defaultStrokeColor = config && config.defaultStrokeColor;

	  var rendererId = RENDERER_IDS.next();

	  var markers = {};

	  var computeStyle = styles.computeStyle;

	  function addMarker(id, options) {
	    var attrs = assign({
	      fill: 'black',
	      strokeWidth: 1,
	      strokeLinecap: 'round',
	      strokeDasharray: 'none'
	    }, options.attrs);

	    var ref = options.ref || { x: 0, y: 0 };

	    var scale = options.scale || 1;

	    // fix for safari / chrome / firefox bug not correctly
	    // resetting stroke dash array
	    if (attrs.strokeDasharray === 'none') {
	      attrs.strokeDasharray = [10000, 1];
	    }

	    var marker = create('marker');

	    attr$1(options.element, attrs);

	    append(marker, options.element);

	    attr$1(marker, {
	      id: id,
	      viewBox: '0 0 20 20',
	      refX: ref.x,
	      refY: ref.y,
	      markerWidth: 20 * scale,
	      markerHeight: 20 * scale,
	      orient: 'auto'
	    });

	    var defs = query('defs', canvas._svg);

	    if (!defs) {
	      defs = create('defs');

	      append(canvas._svg, defs);
	    }

	    append(defs, marker);

	    markers[id] = marker;
	  }

	  function colorEscape(str) {

	    // only allow characters and numbers
	    return str.replace(/[^0-9a-zA-z]+/g, '_');
	  }

	  function marker(type, fill, stroke) {
	    var id = type + '-' + colorEscape(fill) + '-' + colorEscape(stroke) + '-' + rendererId;

	    if (!markers[id]) {
	      createMarker(id, type, fill, stroke);
	    }

	    return 'url(#' + id + ')';
	  }

	  function createMarker(id, type, fill, stroke) {

	    if (type === 'sequenceflow-end') {
	      var sequenceflowEnd = create('path');
	      attr$1(sequenceflowEnd, { d: 'M 1 5 L 11 10 L 1 15 Z' });

	      addMarker(id, {
	        element: sequenceflowEnd,
	        ref: { x: 11, y: 10 },
	        scale: 0.5,
	        attrs: {
	          fill: stroke,
	          stroke: stroke
	        }
	      });
	    }

	    if (type === 'messageflow-start') {
	      var messageflowStart = create('circle');
	      attr$1(messageflowStart, { cx: 6, cy: 6, r: 3.5 });

	      addMarker(id, {
	        element: messageflowStart,
	        attrs: {
	          fill: fill,
	          stroke: stroke
	        },
	        ref: { x: 6, y: 6 }
	      });
	    }

	    if (type === 'messageflow-end') {
	      var messageflowEnd = create('path');
	      attr$1(messageflowEnd, { d: 'm 1 5 l 0 -3 l 7 3 l -7 3 z' });

	      addMarker(id, {
	        element: messageflowEnd,
	        attrs: {
	          fill: fill,
	          stroke: stroke,
	          strokeLinecap: 'butt'
	        },
	        ref: { x: 8.5, y: 5 }
	      });
	    }

	    if (type === 'association-start') {
	      var associationStart = create('path');
	      attr$1(associationStart, { d: 'M 11 5 L 1 10 L 11 15' });

	      addMarker(id, {
	        element: associationStart,
	        attrs: {
	          fill: 'none',
	          stroke: stroke,
	          strokeWidth: 1.5
	        },
	        ref: { x: 1, y: 10 },
	        scale: 0.5
	      });
	    }

	    if (type === 'association-end') {
	      var associationEnd = create('path');
	      attr$1(associationEnd, { d: 'M 1 5 L 11 10 L 1 15' });

	      addMarker(id, {
	        element: associationEnd,
	        attrs: {
	          fill: 'none',
	          stroke: stroke,
	          strokeWidth: 1.5
	        },
	        ref: { x: 12, y: 10 },
	        scale: 0.5
	      });
	    }

	    if (type === 'conditional-flow-marker') {
	      var conditionalflowMarker = create('path');
	      attr$1(conditionalflowMarker, { d: 'M 0 10 L 8 6 L 16 10 L 8 14 Z' });

	      addMarker(id, {
	        element: conditionalflowMarker,
	        attrs: {
	          fill: fill,
	          stroke: stroke
	        },
	        ref: { x: -1, y: 10 },
	        scale: 0.5
	      });
	    }

	    if (type === 'conditional-default-flow-marker') {
	      var conditionaldefaultflowMarker = create('path');
	      attr$1(conditionaldefaultflowMarker, { d: 'M 6 4 L 10 16' });

	      addMarker(id, {
	        element: conditionaldefaultflowMarker,
	        attrs: {
	          stroke: stroke
	        },
	        ref: { x: 0, y: 10 },
	        scale: 0.5
	      });
	    }
	  }

	  function drawCircle(parentGfx, width, height, offset, attrs) {

	    if (isObject(offset)) {
	      attrs = offset;
	      offset = 0;
	    }

	    offset = offset || 0;

	    attrs = computeStyle(attrs, {
	      stroke: 'black',
	      strokeWidth: 2,
	      fill: 'white'
	    });

	    if (attrs.fill === 'none') {
	      delete attrs.fillOpacity;
	    }

	    var cx = width / 2,
	        cy = height / 2;

	    var circle = create('circle');
	    attr$1(circle, {
	      cx: cx,
	      cy: cy,
	      r: Math.round((width + height) / 4 - offset)
	    });
	    attr$1(circle, attrs);

	    append(parentGfx, circle);

	    return circle;
	  }

	  function drawRect(parentGfx, width, height, r, offset, attrs) {

	    if (isObject(offset)) {
	      attrs = offset;
	      offset = 0;
	    }

	    offset = offset || 0;

	    attrs = computeStyle(attrs, {
	      stroke: 'black',
	      strokeWidth: 2,
	      fill: 'white'
	    });

	    var rect = create('rect');
	    attr$1(rect, {
	      x: offset,
	      y: offset,
	      width: width - offset * 2,
	      height: height - offset * 2,
	      rx: r,
	      ry: r
	    });
	    attr$1(rect, attrs);

	    append(parentGfx, rect);

	    return rect;
	  }

	  function drawDiamond(parentGfx, width, height, attrs) {

	    var x_2 = width / 2;
	    var y_2 = height / 2;

	    var points = [{ x: x_2, y: 0 }, { x: width, y: y_2 }, { x: x_2, y: height }, { x: 0, y: y_2 }];

	    var pointsString = points.map(function(point) {
	      return point.x + ',' + point.y;
	    }).join(' ');

	    attrs = computeStyle(attrs, {
	      stroke: 'black',
	      strokeWidth: 2,
	      fill: 'white'
	    });

	    var polygon = create('polygon');
	    attr$1(polygon, {
	      points: pointsString
	    });
	    attr$1(polygon, attrs);

	    append(parentGfx, polygon);

	    return polygon;
	  }

	  function drawLine(parentGfx, waypoints, attrs) {
	    attrs = computeStyle(attrs, [ 'no-fill' ], {
	      stroke: 'black',
	      strokeWidth: 2,
	      fill: 'none'
	    });

	    var line = createLine(waypoints, attrs);

	    append(parentGfx, line);

	    return line;
	  }

	  function drawPath(parentGfx, d, attrs) {

	    attrs = computeStyle(attrs, [ 'no-fill' ], {
	      strokeWidth: 2,
	      stroke: 'black'
	    });

	    var path = create('path');
	    attr$1(path, { d: d });
	    attr$1(path, attrs);

	    append(parentGfx, path);

	    return path;
	  }

	  function drawMarker(type, parentGfx, path, attrs) {
	    return drawPath(parentGfx, path, assign({ 'data-marker': type }, attrs));
	  }

	  function as(type) {
	    return function(parentGfx, element) {
	      return handlers[type](parentGfx, element);
	    };
	  }

	  function renderer(type) {
	    return handlers[type];
	  }

	  function renderEventContent(element, parentGfx) {

	    var event = getSemantic(element);
	    var isThrowing = isThrowEvent(event);

	    if (event.eventDefinitions && event.eventDefinitions.length>1) {
	      if (event.parallelMultiple) {
	        return renderer('bpmn:ParallelMultipleEventDefinition')(parentGfx, element, isThrowing);
	      }
	      else {
	        return renderer('bpmn:MultipleEventDefinition')(parentGfx, element, isThrowing);
	      }
	    }

	    if (isTypedEvent(event, 'bpmn:MessageEventDefinition')) {
	      return renderer('bpmn:MessageEventDefinition')(parentGfx, element, isThrowing);
	    }

	    if (isTypedEvent(event, 'bpmn:TimerEventDefinition')) {
	      return renderer('bpmn:TimerEventDefinition')(parentGfx, element, isThrowing);
	    }

	    if (isTypedEvent(event, 'bpmn:ConditionalEventDefinition')) {
	      return renderer('bpmn:ConditionalEventDefinition')(parentGfx, element);
	    }

	    if (isTypedEvent(event, 'bpmn:SignalEventDefinition')) {
	      return renderer('bpmn:SignalEventDefinition')(parentGfx, element, isThrowing);
	    }

	    if (isTypedEvent(event, 'bpmn:EscalationEventDefinition')) {
	      return renderer('bpmn:EscalationEventDefinition')(parentGfx, element, isThrowing);
	    }

	    if (isTypedEvent(event, 'bpmn:LinkEventDefinition')) {
	      return renderer('bpmn:LinkEventDefinition')(parentGfx, element, isThrowing);
	    }

	    if (isTypedEvent(event, 'bpmn:ErrorEventDefinition')) {
	      return renderer('bpmn:ErrorEventDefinition')(parentGfx, element, isThrowing);
	    }

	    if (isTypedEvent(event, 'bpmn:CancelEventDefinition')) {
	      return renderer('bpmn:CancelEventDefinition')(parentGfx, element, isThrowing);
	    }

	    if (isTypedEvent(event, 'bpmn:CompensateEventDefinition')) {
	      return renderer('bpmn:CompensateEventDefinition')(parentGfx, element, isThrowing);
	    }

	    if (isTypedEvent(event, 'bpmn:TerminateEventDefinition')) {
	      return renderer('bpmn:TerminateEventDefinition')(parentGfx, element, isThrowing);
	    }

	    return null;
	  }

	  function renderLabel(parentGfx, label, options) {

	    options = assign({
	      size: {
	        width: 100
	      }
	    }, options);

	    var text = textRenderer.createText(label || '', options);

	    classes$1(text).add('djs-label');

	    append(parentGfx, text);

	    return text;
	  }

	  function renderEmbeddedLabel(parentGfx, element, align) {
	    var semantic = getSemantic(element);

	    return renderLabel(parentGfx, semantic.name, {
	      box: element,
	      align: align,
	      padding: 5,
	      style: {
	        fill: getStrokeColor(element, defaultStrokeColor)
	      }
	    });
	  }

	  function renderExternalLabel(parentGfx, element) {

	    var box = {
	      width: 90,
	      height: 30,
	      x: element.width / 2 + element.x,
	      y: element.height / 2 + element.y
	    };

	    return renderLabel(parentGfx, getLabel(element), {
	      box: box,
	      fitBox: true,
	      style: assign(
	        {},
	        textRenderer.getExternalStyle(),
	        {
	          fill: getStrokeColor(element, defaultStrokeColor)
	        }
	      )
	    });
	  }

	  function renderLaneLabel(parentGfx, text, element) {
	    var textBox = renderLabel(parentGfx, text, {
	      box: {
	        height: 30,
	        width: element.height
	      },
	      align: 'center-middle',
	      style: {
	        fill: getStrokeColor(element, defaultStrokeColor)
	      }
	    });

	    var top = -1 * element.height;

	    transform$1(textBox, 0, -top, 270);
	  }

	  function createPathFromConnection(connection) {
	    var waypoints = connection.waypoints;

	    var pathData = 'm  ' + waypoints[0].x + ',' + waypoints[0].y;
	    for (var i = 1; i < waypoints.length; i++) {
	      pathData += 'L' + waypoints[i].x + ',' + waypoints[i].y + ' ';
	    }
	    return pathData;
	  }

	  var handlers = this.handlers = {
	    'bpmn:Event': function(parentGfx, element, attrs) {

	      if (!('fillOpacity' in attrs)) {
	        attrs.fillOpacity = DEFAULT_FILL_OPACITY;
	      }

	      return drawCircle(parentGfx, element.width, element.height, attrs);
	    },
	    'bpmn:StartEvent': function(parentGfx, element) {
	      var attrs = {
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      };

	      var semantic = getSemantic(element);

	      if (!semantic.isInterrupting) {
	        attrs = {
	          strokeDasharray: '6',
	          strokeLinecap: 'round',
	          fill: getFillColor(element, defaultFillColor),
	          stroke: getStrokeColor(element, defaultStrokeColor)
	        };
	      }

	      var circle = renderer('bpmn:Event')(parentGfx, element, attrs);

	      renderEventContent(element, parentGfx);

	      return circle;
	    },
	    'bpmn:MessageEventDefinition': function(parentGfx, element, isThrowing) {
	      var pathData = pathMap.getScaledPath('EVENT_MESSAGE', {
	        xScaleFactor: 0.9,
	        yScaleFactor: 0.9,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: 0.235,
	          my: 0.315
	        }
	      });

	      var fill = isThrowing ? getStrokeColor(element, defaultStrokeColor) : getFillColor(element, defaultFillColor);
	      var stroke = isThrowing ? getFillColor(element, defaultFillColor) : getStrokeColor(element, defaultStrokeColor);

	      var messagePath = drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: fill,
	        stroke: stroke
	      });

	      return messagePath;
	    },
	    'bpmn:TimerEventDefinition': function(parentGfx, element) {
	      var circle = drawCircle(parentGfx, element.width, element.height, 0.2 * element.height, {
	        strokeWidth: 2,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      var pathData = pathMap.getScaledPath('EVENT_TIMER_WH', {
	        xScaleFactor: 0.75,
	        yScaleFactor: 0.75,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: 0.5,
	          my: 0.5
	        }
	      });

	      drawPath(parentGfx, pathData, {
	        strokeWidth: 2,
	        strokeLinecap: 'square',
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      for (var i = 0;i < 12; i++) {

	        var linePathData = pathMap.getScaledPath('EVENT_TIMER_LINE', {
	          xScaleFactor: 0.75,
	          yScaleFactor: 0.75,
	          containerWidth: element.width,
	          containerHeight: element.height,
	          position: {
	            mx: 0.5,
	            my: 0.5
	          }
	        });

	        var width = element.width / 2;
	        var height = element.height / 2;

	        drawPath(parentGfx, linePathData, {
	          strokeWidth: 1,
	          strokeLinecap: 'square',
	          transform: 'rotate(' + (i * 30) + ',' + height + ',' + width + ')',
	          stroke: getStrokeColor(element, defaultStrokeColor)
	        });
	      }

	      return circle;
	    },
	    'bpmn:EscalationEventDefinition': function(parentGfx, event, isThrowing) {
	      var pathData = pathMap.getScaledPath('EVENT_ESCALATION', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: event.width,
	        containerHeight: event.height,
	        position: {
	          mx: 0.5,
	          my: 0.2
	        }
	      });

	      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

	      return drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: fill,
	        stroke: getStrokeColor(event, defaultStrokeColor)
	      });
	    },
	    'bpmn:ConditionalEventDefinition': function(parentGfx, event) {
	      var pathData = pathMap.getScaledPath('EVENT_CONDITIONAL', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: event.width,
	        containerHeight: event.height,
	        position: {
	          mx: 0.5,
	          my: 0.222
	        }
	      });

	      return drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        stroke: getStrokeColor(event, defaultStrokeColor)
	      });
	    },
	    'bpmn:LinkEventDefinition': function(parentGfx, event, isThrowing) {
	      var pathData = pathMap.getScaledPath('EVENT_LINK', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: event.width,
	        containerHeight: event.height,
	        position: {
	          mx: 0.57,
	          my: 0.263
	        }
	      });

	      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

	      return drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: fill,
	        stroke: getStrokeColor(event, defaultStrokeColor)
	      });
	    },
	    'bpmn:ErrorEventDefinition': function(parentGfx, event, isThrowing) {
	      var pathData = pathMap.getScaledPath('EVENT_ERROR', {
	        xScaleFactor: 1.1,
	        yScaleFactor: 1.1,
	        containerWidth: event.width,
	        containerHeight: event.height,
	        position: {
	          mx: 0.2,
	          my: 0.722
	        }
	      });

	      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

	      return drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: fill,
	        stroke: getStrokeColor(event, defaultStrokeColor)
	      });
	    },
	    'bpmn:CancelEventDefinition': function(parentGfx, event, isThrowing) {
	      var pathData = pathMap.getScaledPath('EVENT_CANCEL_45', {
	        xScaleFactor: 1.0,
	        yScaleFactor: 1.0,
	        containerWidth: event.width,
	        containerHeight: event.height,
	        position: {
	          mx: 0.638,
	          my: -0.055
	        }
	      });

	      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

	      var path = drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: fill,
	        stroke: getStrokeColor(event, defaultStrokeColor)
	      });

	      rotate(path, 45);

	      return path;
	    },
	    'bpmn:CompensateEventDefinition': function(parentGfx, event, isThrowing) {
	      var pathData = pathMap.getScaledPath('EVENT_COMPENSATION', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: event.width,
	        containerHeight: event.height,
	        position: {
	          mx: 0.22,
	          my: 0.5
	        }
	      });

	      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

	      return drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: fill,
	        stroke: getStrokeColor(event, defaultStrokeColor)
	      });
	    },
	    'bpmn:SignalEventDefinition': function(parentGfx, event, isThrowing) {
	      var pathData = pathMap.getScaledPath('EVENT_SIGNAL', {
	        xScaleFactor: 0.9,
	        yScaleFactor: 0.9,
	        containerWidth: event.width,
	        containerHeight: event.height,
	        position: {
	          mx: 0.5,
	          my: 0.2
	        }
	      });

	      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

	      return drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: fill,
	        stroke: getStrokeColor(event, defaultStrokeColor)
	      });
	    },
	    'bpmn:MultipleEventDefinition': function(parentGfx, event, isThrowing) {
	      var pathData = pathMap.getScaledPath('EVENT_MULTIPLE', {
	        xScaleFactor: 1.1,
	        yScaleFactor: 1.1,
	        containerWidth: event.width,
	        containerHeight: event.height,
	        position: {
	          mx: 0.222,
	          my: 0.36
	        }
	      });

	      var fill = isThrowing ? getStrokeColor(event, defaultStrokeColor) : 'none';

	      return drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: fill
	      });
	    },
	    'bpmn:ParallelMultipleEventDefinition': function(parentGfx, event) {
	      var pathData = pathMap.getScaledPath('EVENT_PARALLEL_MULTIPLE', {
	        xScaleFactor: 1.2,
	        yScaleFactor: 1.2,
	        containerWidth: event.width,
	        containerHeight: event.height,
	        position: {
	          mx: 0.458,
	          my: 0.194
	        }
	      });

	      return drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: getStrokeColor(event, defaultStrokeColor),
	        stroke: getStrokeColor(event, defaultStrokeColor)
	      });
	    },
	    'bpmn:EndEvent': function(parentGfx, element) {
	      var circle = renderer('bpmn:Event')(parentGfx, element, {
	        strokeWidth: 4,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      renderEventContent(element, parentGfx);

	      return circle;
	    },
	    'bpmn:TerminateEventDefinition': function(parentGfx, element) {
	      var circle = drawCircle(parentGfx, element.width, element.height, 8, {
	        strokeWidth: 4,
	        fill: getStrokeColor(element, defaultStrokeColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return circle;
	    },
	    'bpmn:IntermediateEvent': function(parentGfx, element) {
	      var outer = renderer('bpmn:Event')(parentGfx, element, {
	        strokeWidth: 1,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      /* inner */
	      drawCircle(parentGfx, element.width, element.height, INNER_OUTER_DIST, {
	        strokeWidth: 1,
	        fill: getFillColor(element, 'none'),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      renderEventContent(element, parentGfx);

	      return outer;
	    },
	    'bpmn:IntermediateCatchEvent': as('bpmn:IntermediateEvent'),
	    'bpmn:IntermediateThrowEvent': as('bpmn:IntermediateEvent'),

	    'bpmn:Activity': function(parentGfx, element, attrs) {

	      attrs = attrs || {};

	      if (!('fillOpacity' in attrs)) {
	        attrs.fillOpacity = DEFAULT_FILL_OPACITY;
	      }

	      return drawRect(parentGfx, element.width, element.height, TASK_BORDER_RADIUS, attrs);
	    },

	    'bpmn:Task': function(parentGfx, element) {
	      var attrs = {
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      };

	      var rect = renderer('bpmn:Activity')(parentGfx, element, attrs);

	      renderEmbeddedLabel(parentGfx, element, 'center-middle');
	      attachTaskMarkers(parentGfx, element);

	      return rect;
	    },
	    'bpmn:ServiceTask': function(parentGfx, element) {
	      var task = renderer('bpmn:Task')(parentGfx, element);

	      var pathDataBG = pathMap.getScaledPath('TASK_TYPE_SERVICE', {
	        abspos: {
	          x: 12,
	          y: 18
	        }
	      });

	      /* service bg */ drawPath(parentGfx, pathDataBG, {
	        strokeWidth: 1,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      var fillPathData = pathMap.getScaledPath('TASK_TYPE_SERVICE_FILL', {
	        abspos: {
	          x: 17.2,
	          y: 18
	        }
	      });

	      /* service fill */ drawPath(parentGfx, fillPathData, {
	        strokeWidth: 0,
	        fill: getFillColor(element, defaultFillColor)
	      });

	      var pathData = pathMap.getScaledPath('TASK_TYPE_SERVICE', {
	        abspos: {
	          x: 17,
	          y: 22
	        }
	      });

	      /* service */ drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return task;
	    },
	    'bpmn:UserTask': function(parentGfx, element) {
	      var task = renderer('bpmn:Task')(parentGfx, element);

	      var x = 15;
	      var y = 12;

	      var pathData = pathMap.getScaledPath('TASK_TYPE_USER_1', {
	        abspos: {
	          x: x,
	          y: y
	        }
	      });

	      /* user path */ drawPath(parentGfx, pathData, {
	        strokeWidth: 0.5,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      var pathData2 = pathMap.getScaledPath('TASK_TYPE_USER_2', {
	        abspos: {
	          x: x,
	          y: y
	        }
	      });

	      /* user2 path */ drawPath(parentGfx, pathData2, {
	        strokeWidth: 0.5,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      var pathData3 = pathMap.getScaledPath('TASK_TYPE_USER_3', {
	        abspos: {
	          x: x,
	          y: y
	        }
	      });

	      /* user3 path */ drawPath(parentGfx, pathData3, {
	        strokeWidth: 0.5,
	        fill: getStrokeColor(element, defaultStrokeColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return task;
	    },
	    'bpmn:ManualTask': function(parentGfx, element) {
	      var task = renderer('bpmn:Task')(parentGfx, element);

	      var pathData = pathMap.getScaledPath('TASK_TYPE_MANUAL', {
	        abspos: {
	          x: 17,
	          y: 15
	        }
	      });

	      /* manual path */ drawPath(parentGfx, pathData, {
	        strokeWidth: 0.5, // 0.25,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return task;
	    },
	    'bpmn:SendTask': function(parentGfx, element) {
	      var task = renderer('bpmn:Task')(parentGfx, element);

	      var pathData = pathMap.getScaledPath('TASK_TYPE_SEND', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: 21,
	        containerHeight: 14,
	        position: {
	          mx: 0.285,
	          my: 0.357
	        }
	      });

	      /* send path */ drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: getStrokeColor(element, defaultStrokeColor),
	        stroke: getFillColor(element, defaultFillColor)
	      });

	      return task;
	    },
	    'bpmn:ReceiveTask' : function(parentGfx, element) {
	      var semantic = getSemantic(element);

	      var task = renderer('bpmn:Task')(parentGfx, element);
	      var pathData;

	      if (semantic.instantiate) {
	        drawCircle(parentGfx, 28, 28, 20 * 0.22, { strokeWidth: 1 });

	        pathData = pathMap.getScaledPath('TASK_TYPE_INSTANTIATING_SEND', {
	          abspos: {
	            x: 7.77,
	            y: 9.52
	          }
	        });
	      } else {

	        pathData = pathMap.getScaledPath('TASK_TYPE_SEND', {
	          xScaleFactor: 0.9,
	          yScaleFactor: 0.9,
	          containerWidth: 21,
	          containerHeight: 14,
	          position: {
	            mx: 0.3,
	            my: 0.4
	          }
	        });
	      }

	      /* receive path */ drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return task;
	    },
	    'bpmn:ScriptTask': function(parentGfx, element) {
	      var task = renderer('bpmn:Task')(parentGfx, element);

	      var pathData = pathMap.getScaledPath('TASK_TYPE_SCRIPT', {
	        abspos: {
	          x: 15,
	          y: 20
	        }
	      });

	      /* script path */ drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return task;
	    },
	    'bpmn:BusinessRuleTask': function(parentGfx, element) {
	      var task = renderer('bpmn:Task')(parentGfx, element);

	      var headerPathData = pathMap.getScaledPath('TASK_TYPE_BUSINESS_RULE_HEADER', {
	        abspos: {
	          x: 8,
	          y: 8
	        }
	      });

	      var businessHeaderPath = drawPath(parentGfx, headerPathData);
	      attr$1(businessHeaderPath, {
	        strokeWidth: 1,
	        fill: getFillColor(element, '#aaaaaa'),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      var headerData = pathMap.getScaledPath('TASK_TYPE_BUSINESS_RULE_MAIN', {
	        abspos: {
	          x: 8,
	          y: 8
	        }
	      });

	      var businessPath = drawPath(parentGfx, headerData);
	      attr$1(businessPath, {
	        strokeWidth: 1,
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return task;
	    },
	    'bpmn:SubProcess': function(parentGfx, element, attrs) {
	      attrs = assign({
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      }, attrs);

	      var rect = renderer('bpmn:Activity')(parentGfx, element, attrs);

	      var expanded = isExpanded(element);

	      if (isEventSubProcess(element)) {
	        attr$1(rect, {
	          strokeDasharray: '1,2'
	        });
	      }

	      renderEmbeddedLabel(parentGfx, element, expanded ? 'center-top' : 'center-middle');

	      if (expanded) {
	        attachTaskMarkers(parentGfx, element);
	      } else {
	        attachTaskMarkers(parentGfx, element, ['SubProcessMarker']);
	      }

	      return rect;
	    },
	    'bpmn:AdHocSubProcess': function(parentGfx, element) {
	      return renderer('bpmn:SubProcess')(parentGfx, element);
	    },
	    'bpmn:Transaction': function(parentGfx, element) {
	      var outer = renderer('bpmn:SubProcess')(parentGfx, element);

	      var innerAttrs = styles.style([ 'no-fill', 'no-events' ], {
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      /* inner path */ drawRect(parentGfx, element.width, element.height, TASK_BORDER_RADIUS - 2, INNER_OUTER_DIST, innerAttrs);

	      return outer;
	    },
	    'bpmn:CallActivity': function(parentGfx, element) {
	      return renderer('bpmn:SubProcess')(parentGfx, element, {
	        strokeWidth: 5
	      });
	    },
	    'bpmn:Participant': function(parentGfx, element) {

	      var attrs = {
	        fillOpacity: DEFAULT_FILL_OPACITY,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      };

	      var lane = renderer('bpmn:Lane')(parentGfx, element, attrs);

	      var expandedPool = isExpanded(element);

	      if (expandedPool) {
	        drawLine(parentGfx, [
	          { x: 30, y: 0 },
	          { x: 30, y: element.height }
	        ], {
	          stroke: getStrokeColor(element, defaultStrokeColor)
	        });
	        var text = getSemantic(element).name;
	        renderLaneLabel(parentGfx, text, element);
	      } else {

	        // Collapsed pool draw text inline
	        var text2 = getSemantic(element).name;
	        renderLabel(parentGfx, text2, {
	          box: element, align: 'center-middle',
	          style: {
	            fill: getStrokeColor(element, defaultStrokeColor)
	          }
	        });
	      }

	      var participantMultiplicity = !!(getSemantic(element).participantMultiplicity);

	      if (participantMultiplicity) {
	        renderer('ParticipantMultiplicityMarker')(parentGfx, element);
	      }

	      return lane;
	    },
	    'bpmn:Lane': function(parentGfx, element, attrs) {
	      var rect = drawRect(parentGfx, element.width, element.height, 0, assign({
	        fill: getFillColor(element, defaultFillColor),
	        fillOpacity: HIGH_FILL_OPACITY,
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      }, attrs));

	      var semantic = getSemantic(element);

	      if (semantic.$type === 'bpmn:Lane') {
	        var text = semantic.name;
	        renderLaneLabel(parentGfx, text, element);
	      }

	      return rect;
	    },
	    'bpmn:InclusiveGateway': function(parentGfx, element) {
	      var diamond = renderer('bpmn:Gateway')(parentGfx, element);

	      /* circle path */
	      drawCircle(parentGfx, element.width, element.height, element.height * 0.24, {
	        strokeWidth: 2.5,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return diamond;
	    },
	    'bpmn:ExclusiveGateway': function(parentGfx, element) {
	      var diamond = renderer('bpmn:Gateway')(parentGfx, element);

	      var pathData = pathMap.getScaledPath('GATEWAY_EXCLUSIVE', {
	        xScaleFactor: 0.4,
	        yScaleFactor: 0.4,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: 0.32,
	          my: 0.3
	        }
	      });

	      if ((getDi(element).isMarkerVisible)) {
	        drawPath(parentGfx, pathData, {
	          strokeWidth: 1,
	          fill: getStrokeColor(element, defaultStrokeColor),
	          stroke: getStrokeColor(element, defaultStrokeColor)
	        });
	      }

	      return diamond;
	    },
	    'bpmn:ComplexGateway': function(parentGfx, element) {
	      var diamond = renderer('bpmn:Gateway')(parentGfx, element);

	      var pathData = pathMap.getScaledPath('GATEWAY_COMPLEX', {
	        xScaleFactor: 0.5,
	        yScaleFactor:0.5,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: 0.46,
	          my: 0.26
	        }
	      });

	      /* complex path */ drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: getStrokeColor(element, defaultStrokeColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return diamond;
	    },
	    'bpmn:ParallelGateway': function(parentGfx, element) {
	      var diamond = renderer('bpmn:Gateway')(parentGfx, element);

	      var pathData = pathMap.getScaledPath('GATEWAY_PARALLEL', {
	        xScaleFactor: 0.6,
	        yScaleFactor:0.6,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: 0.46,
	          my: 0.2
	        }
	      });

	      /* parallel path */ drawPath(parentGfx, pathData, {
	        strokeWidth: 1,
	        fill: getStrokeColor(element, defaultStrokeColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return diamond;
	    },
	    'bpmn:EventBasedGateway': function(parentGfx, element) {

	      var semantic = getSemantic(element);

	      var diamond = renderer('bpmn:Gateway')(parentGfx, element);

	      /* outer circle path */ drawCircle(parentGfx, element.width, element.height, element.height * 0.20, {
	        strokeWidth: 1,
	        fill: 'none',
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      var type = semantic.eventGatewayType;
	      var instantiate = !!semantic.instantiate;

	      function drawEvent() {

	        var pathData = pathMap.getScaledPath('GATEWAY_EVENT_BASED', {
	          xScaleFactor: 0.18,
	          yScaleFactor: 0.18,
	          containerWidth: element.width,
	          containerHeight: element.height,
	          position: {
	            mx: 0.36,
	            my: 0.44
	          }
	        });

	        var attrs = {
	          strokeWidth: 2,
	          fill: getFillColor(element, 'none'),
	          stroke: getStrokeColor(element, defaultStrokeColor)
	        };

	        /* event path */ drawPath(parentGfx, pathData, attrs);
	      }

	      if (type === 'Parallel') {

	        var pathData = pathMap.getScaledPath('GATEWAY_PARALLEL', {
	          xScaleFactor: 0.4,
	          yScaleFactor:0.4,
	          containerWidth: element.width,
	          containerHeight: element.height,
	          position: {
	            mx: 0.474,
	            my: 0.296
	          }
	        });

	        var parallelPath = drawPath(parentGfx, pathData);
	        attr$1(parallelPath, {
	          strokeWidth: 1,
	          fill: 'none'
	        });
	      } else if (type === 'Exclusive') {

	        if (!instantiate) {
	          var innerCircle = drawCircle(parentGfx, element.width, element.height, element.height * 0.26);
	          attr$1(innerCircle, {
	            strokeWidth: 1,
	            fill: 'none',
	            stroke: getStrokeColor(element, defaultStrokeColor)
	          });
	        }

	        drawEvent();
	      }


	      return diamond;
	    },
	    'bpmn:Gateway': function(parentGfx, element) {
	      var attrs = {
	        fill: getFillColor(element, defaultFillColor),
	        fillOpacity: DEFAULT_FILL_OPACITY,
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      };

	      return drawDiamond(parentGfx, element.width, element.height, attrs);
	    },
	    'bpmn:SequenceFlow': function(parentGfx, element) {
	      var pathData = createPathFromConnection(element);

	      var fill = getFillColor(element, defaultFillColor),
	          stroke = getStrokeColor(element, defaultStrokeColor);

	      var attrs = {
	        strokeLinejoin: 'round',
	        markerEnd: marker('sequenceflow-end', fill, stroke),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      };

	      var path = drawPath(parentGfx, pathData, attrs);

	      var sequenceFlow = getSemantic(element);

	      var source;

	      if (element.source) {
	        source = element.source.businessObject;

	        // conditional flow marker
	        if (sequenceFlow.conditionExpression && source.$instanceOf('bpmn:Activity')) {
	          attr$1(path, {
	            markerStart: marker('conditional-flow-marker', fill, stroke)
	          });
	        }

	        // default marker
	        if (source.default && (source.$instanceOf('bpmn:Gateway') || source.$instanceOf('bpmn:Activity')) &&
	            source.default === sequenceFlow) {
	          attr$1(path, {
	            markerStart: marker('conditional-default-flow-marker', fill, stroke)
	          });
	        }
	      }

	      return path;
	    },
	    'bpmn:Association': function(parentGfx, element, attrs) {

	      var semantic = getSemantic(element);

	      var fill = getFillColor(element, defaultFillColor),
	          stroke = getStrokeColor(element, defaultStrokeColor);

	      attrs = assign({
	        strokeDasharray: '0.5, 5',
	        strokeLinecap: 'round',
	        strokeLinejoin: 'round',
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      }, attrs || {});

	      if (semantic.associationDirection === 'One' ||
	          semantic.associationDirection === 'Both') {
	        attrs.markerEnd = marker('association-end', fill, stroke);
	      }

	      if (semantic.associationDirection === 'Both') {
	        attrs.markerStart = marker('association-start', fill, stroke);
	      }

	      return drawLine(parentGfx, element.waypoints, attrs);
	    },
	    'bpmn:DataInputAssociation': function(parentGfx, element) {
	      var fill = getFillColor(element, defaultFillColor),
	          stroke = getStrokeColor(element, defaultStrokeColor);

	      return renderer('bpmn:Association')(parentGfx, element, {
	        markerEnd: marker('association-end', fill, stroke)
	      });
	    },
	    'bpmn:DataOutputAssociation': function(parentGfx, element) {
	      var fill = getFillColor(element, defaultFillColor),
	          stroke = getStrokeColor(element, defaultStrokeColor);

	      return renderer('bpmn:Association')(parentGfx, element, {
	        markerEnd: marker('association-end', fill, stroke)
	      });
	    },
	    'bpmn:MessageFlow': function(parentGfx, element) {

	      var semantic = getSemantic(element),
	          di = getDi(element);

	      var fill = getFillColor(element, defaultFillColor),
	          stroke = getStrokeColor(element, defaultStrokeColor);

	      var pathData = createPathFromConnection(element);

	      var attrs = {
	        markerEnd: marker('messageflow-end', fill, stroke),
	        markerStart: marker('messageflow-start', fill, stroke),
	        strokeDasharray: '10, 12',
	        strokeLinecap: 'round',
	        strokeLinejoin: 'round',
	        strokeWidth: '1.5px',
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      };

	      var path = drawPath(parentGfx, pathData, attrs);

	      if (semantic.messageRef) {
	        var midPoint = path.getPointAtLength(path.getTotalLength() / 2);

	        var markerPathData = pathMap.getScaledPath('MESSAGE_FLOW_MARKER', {
	          abspos: {
	            x: midPoint.x,
	            y: midPoint.y
	          }
	        });

	        var messageAttrs = { strokeWidth: 1 };

	        if (di.messageVisibleKind === 'initiating') {
	          messageAttrs.fill = 'white';
	          messageAttrs.stroke = 'black';
	        } else {
	          messageAttrs.fill = '#888';
	          messageAttrs.stroke = 'white';
	        }

	        drawPath(parentGfx, markerPathData, messageAttrs);
	      }

	      return path;
	    },
	    'bpmn:DataObject': function(parentGfx, element) {
	      var pathData = pathMap.getScaledPath('DATA_OBJECT_PATH', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: 0.474,
	          my: 0.296
	        }
	      });

	      var elementObject = drawPath(parentGfx, pathData, {
	        fill: getFillColor(element, defaultFillColor),
	        fillOpacity: DEFAULT_FILL_OPACITY,
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      var semantic = getSemantic(element);

	      if (isCollection(semantic)) {
	        renderDataItemCollection(parentGfx, element);
	      }

	      return elementObject;
	    },
	    'bpmn:DataObjectReference': as('bpmn:DataObject'),
	    'bpmn:DataInput': function(parentGfx, element) {

	      var arrowPathData = pathMap.getRawPath('DATA_ARROW');

	      // page
	      var elementObject = renderer('bpmn:DataObject')(parentGfx, element);

	      /* input arrow path */ drawPath(parentGfx, arrowPathData, { strokeWidth: 1 });

	      return elementObject;
	    },
	    'bpmn:DataOutput': function(parentGfx, element) {
	      var arrowPathData = pathMap.getRawPath('DATA_ARROW');

	      // page
	      var elementObject = renderer('bpmn:DataObject')(parentGfx, element);

	      /* output arrow path */ drawPath(parentGfx, arrowPathData, {
	        strokeWidth: 1,
	        fill: 'black'
	      });

	      return elementObject;
	    },
	    'bpmn:DataStoreReference': function(parentGfx, element) {
	      var DATA_STORE_PATH = pathMap.getScaledPath('DATA_STORE', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: 0,
	          my: 0.133
	        }
	      });

	      var elementStore = drawPath(parentGfx, DATA_STORE_PATH, {
	        strokeWidth: 2,
	        fill: getFillColor(element, defaultFillColor),
	        fillOpacity: DEFAULT_FILL_OPACITY,
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      return elementStore;
	    },
	    'bpmn:BoundaryEvent': function(parentGfx, element) {

	      var semantic = getSemantic(element),
	          cancel = semantic.cancelActivity;

	      var attrs = {
	        strokeWidth: 1,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      };

	      if (!cancel) {
	        attrs.strokeDasharray = '6';
	        attrs.strokeLinecap = 'round';
	      }

	      // apply fillOpacity
	      var outerAttrs = assign({}, attrs, {
	        fillOpacity: 1
	      });

	      // apply no-fill
	      var innerAttrs = assign({}, attrs, {
	        fill: 'none'
	      });

	      var outer = renderer('bpmn:Event')(parentGfx, element, outerAttrs);

	      /* inner path */ drawCircle(parentGfx, element.width, element.height, INNER_OUTER_DIST, innerAttrs);

	      renderEventContent(element, parentGfx);

	      return outer;
	    },
	    'bpmn:Group': function(parentGfx, element) {

	      var group = drawRect(parentGfx, element.width, element.height, TASK_BORDER_RADIUS, {
	        stroke: getStrokeColor(element, defaultStrokeColor),
	        strokeWidth: 1,
	        strokeDasharray: '8,3,1,3',
	        fill: 'none',
	        pointerEvents: 'none'
	      });

	      return group;
	    },
	    'label': function(parentGfx, element) {
	      return renderExternalLabel(parentGfx, element);
	    },
	    'bpmn:TextAnnotation': function(parentGfx, element) {
	      var style = {
	        'fill': 'none',
	        'stroke': 'none'
	      };

	      var textElement = drawRect(parentGfx, element.width, element.height, 0, 0, style);

	      var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: 0.0,
	          my: 0.0
	        }
	      });

	      drawPath(parentGfx, textPathData, {
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      var text = getSemantic(element).text || '';
	      renderLabel(parentGfx, text, {
	        box: element,
	        align: 'left-top',
	        padding: 5,
	        style: {
	          fill: getStrokeColor(element, defaultStrokeColor)
	        }
	      });

	      return textElement;
	    },
	    'ParticipantMultiplicityMarker': function(parentGfx, element) {
	      var markerPath = pathMap.getScaledPath('MARKER_PARALLEL', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: ((element.width / 2) / element.width),
	          my: (element.height - 15) / element.height
	        }
	      });

	      drawMarker('participant-multiplicity', parentGfx, markerPath, {
	        strokeWidth: 2,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });
	    },
	    'SubProcessMarker': function(parentGfx, element) {
	      var markerRect = drawRect(parentGfx, 14, 14, 0, {
	        strokeWidth: 1,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });

	      // Process marker is placed in the middle of the box
	      // therefore fixed values can be used here
	      translate(markerRect, element.width / 2 - 7.5, element.height - 20);

	      var markerPath = pathMap.getScaledPath('MARKER_SUB_PROCESS', {
	        xScaleFactor: 1.5,
	        yScaleFactor: 1.5,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: (element.width / 2 - 7.5) / element.width,
	          my: (element.height - 20) / element.height
	        }
	      });

	      drawMarker('sub-process', parentGfx, markerPath, {
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });
	    },
	    'ParallelMarker': function(parentGfx, element, position) {
	      var markerPath = pathMap.getScaledPath('MARKER_PARALLEL', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: ((element.width / 2 + position.parallel) / element.width),
	          my: (element.height - 20) / element.height
	        }
	      });

	      drawMarker('parallel', parentGfx, markerPath, {
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });
	    },
	    'SequentialMarker': function(parentGfx, element, position) {
	      var markerPath = pathMap.getScaledPath('MARKER_SEQUENTIAL', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: ((element.width / 2 + position.seq) / element.width),
	          my: (element.height - 19) / element.height
	        }
	      });

	      drawMarker('sequential', parentGfx, markerPath, {
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });
	    },
	    'CompensationMarker': function(parentGfx, element, position) {
	      var markerMath = pathMap.getScaledPath('MARKER_COMPENSATION', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: ((element.width / 2 + position.compensation) / element.width),
	          my: (element.height - 13) / element.height
	        }
	      });

	      drawMarker('compensation', parentGfx, markerMath, {
	        strokeWidth: 1,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });
	    },
	    'LoopMarker': function(parentGfx, element, position) {
	      var markerPath = pathMap.getScaledPath('MARKER_LOOP', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: ((element.width / 2 + position.loop) / element.width),
	          my: (element.height - 7) / element.height
	        }
	      });

	      drawMarker('loop', parentGfx, markerPath, {
	        strokeWidth: 1,
	        fill: getFillColor(element, defaultFillColor),
	        stroke: getStrokeColor(element, defaultStrokeColor),
	        strokeLinecap: 'round',
	        strokeMiterlimit: 0.5
	      });
	    },
	    'AdhocMarker': function(parentGfx, element, position) {
	      var markerPath = pathMap.getScaledPath('MARKER_ADHOC', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: ((element.width / 2 + position.adhoc) / element.width),
	          my: (element.height - 15) / element.height
	        }
	      });

	      drawMarker('adhoc', parentGfx, markerPath, {
	        strokeWidth: 1,
	        fill: getStrokeColor(element, defaultStrokeColor),
	        stroke: getStrokeColor(element, defaultStrokeColor)
	      });
	    }
	  };

	  function attachTaskMarkers(parentGfx, element, taskMarkers) {
	    var obj = getSemantic(element);

	    var subprocess = taskMarkers && taskMarkers.indexOf('SubProcessMarker') !== -1;
	    var position;

	    if (subprocess) {
	      position = {
	        seq: -21,
	        parallel: -22,
	        compensation: -42,
	        loop: -18,
	        adhoc: 10
	      };
	    } else {
	      position = {
	        seq: -3,
	        parallel: -6,
	        compensation: -27,
	        loop: 0,
	        adhoc: 10
	      };
	    }

	    forEach(taskMarkers, function(marker) {
	      renderer(marker)(parentGfx, element, position);
	    });

	    if (obj.isForCompensation) {
	      renderer('CompensationMarker')(parentGfx, element, position);
	    }

	    if (obj.$type === 'bpmn:AdHocSubProcess') {
	      renderer('AdhocMarker')(parentGfx, element, position);
	    }

	    var loopCharacteristics = obj.loopCharacteristics,
	        isSequential = loopCharacteristics && loopCharacteristics.isSequential;

	    if (loopCharacteristics) {

	      if (isSequential === undefined) {
	        renderer('LoopMarker')(parentGfx, element, position);
	      }

	      if (isSequential === false) {
	        renderer('ParallelMarker')(parentGfx, element, position);
	      }

	      if (isSequential === true) {
	        renderer('SequentialMarker')(parentGfx, element, position);
	      }
	    }
	  }

	  function renderDataItemCollection(parentGfx, element) {

	    var yPosition = (element.height - 18) / element.height;

	    var pathData = pathMap.getScaledPath('DATA_OBJECT_COLLECTION_PATH', {
	      xScaleFactor: 1,
	      yScaleFactor: 1,
	      containerWidth: element.width,
	      containerHeight: element.height,
	      position: {
	        mx: 0.33,
	        my: yPosition
	      }
	    });

	    /* collection path */ drawPath(parentGfx, pathData, {
	      strokeWidth: 2
	    });
	  }


	  // extension API, use at your own risk
	  this._drawPath = drawPath;

	}


	inherits_browser(BpmnRenderer, BaseRenderer);

	BpmnRenderer.$inject = [
	  'config.bpmnRenderer',
	  'eventBus',
	  'styles',
	  'pathMap',
	  'canvas',
	  'textRenderer'
	];


	BpmnRenderer.prototype.canRender = function(element) {
	  return is$1(element, 'bpmn:BaseElement');
	};

	BpmnRenderer.prototype.drawShape = function(parentGfx, element) {
	  var type = element.type;
	  var h = this.handlers[type];

	  /* jshint -W040 */
	  return h(parentGfx, element);
	};

	BpmnRenderer.prototype.drawConnection = function(parentGfx, element) {
	  var type = element.type;
	  var h = this.handlers[type];

	  /* jshint -W040 */
	  return h(parentGfx, element);
	};

	BpmnRenderer.prototype.getShapePath = function(element) {

	  if (is$1(element, 'bpmn:Event')) {
	    return getCirclePath(element);
	  }

	  if (is$1(element, 'bpmn:Activity')) {
	    return getRoundRectPath(element, TASK_BORDER_RADIUS);
	  }

	  if (is$1(element, 'bpmn:Gateway')) {
	    return getDiamondPath(element);
	  }

	  return getRectPath(element);
	};

	var DEFAULT_BOX_PADDING = 0;

	var DEFAULT_LABEL_SIZE = {
	  width: 150,
	  height: 50
	};


	function parseAlign(align) {

	  var parts = align.split('-');

	  return {
	    horizontal: parts[0] || 'center',
	    vertical: parts[1] || 'top'
	  };
	}

	function parsePadding(padding) {

	  if (isObject(padding)) {
	    return assign({ top: 0, left: 0, right: 0, bottom: 0 }, padding);
	  } else {
	    return {
	      top: padding,
	      left: padding,
	      right: padding,
	      bottom: padding
	    };
	  }
	}

	function getTextBBox(text, fakeText) {

	  fakeText.textContent = text;

	  var textBBox;

	  try {
	    var bbox,
	        emptyLine = text === '';

	    // add dummy text, when line is empty to
	    // determine correct height
	    fakeText.textContent = emptyLine ? 'dummy' : text;

	    textBBox = fakeText.getBBox();

	    // take text rendering related horizontal
	    // padding into account
	    bbox = {
	      width: textBBox.width + textBBox.x * 2,
	      height: textBBox.height
	    };

	    if (emptyLine) {

	      // correct width
	      bbox.width = 0;
	    }

	    return bbox;
	  } catch (e) {
	    return { width: 0, height: 0 };
	  }
	}


	/**
	 * Layout the next line and return the layouted element.
	 *
	 * Alters the lines passed.
	 *
	 * @param  {Array<string>} lines
	 * @return {Object} the line descriptor, an object { width, height, text }
	 */
	function layoutNext(lines, maxWidth, fakeText) {

	  var originalLine = lines.shift(),
	      fitLine = originalLine;

	  var textBBox;

	  for (;;) {
	    textBBox = getTextBBox(fitLine, fakeText);

	    textBBox.width = fitLine ? textBBox.width : 0;

	    // try to fit
	    if (fitLine === ' ' || fitLine === '' || textBBox.width < Math.round(maxWidth) || fitLine.length < 2) {
	      return fit(lines, fitLine, originalLine, textBBox);
	    }

	    fitLine = shortenLine(fitLine, textBBox.width, maxWidth);
	  }
	}

	function fit(lines, fitLine, originalLine, textBBox) {
	  if (fitLine.length < originalLine.length) {
	    var remainder = originalLine.slice(fitLine.length).trim();

	    lines.unshift(remainder);
	  }

	  return {
	    width: textBBox.width,
	    height: textBBox.height,
	    text: fitLine
	  };
	}

	var SOFT_BREAK = '\u00AD';


	/**
	 * Shortens a line based on spacing and hyphens.
	 * Returns the shortened result on success.
	 *
	 * @param  {string} line
	 * @param  {number} maxLength the maximum characters of the string
	 * @return {string} the shortened string
	 */
	function semanticShorten(line, maxLength) {

	  var parts = line.split(/(\s|-|\u00AD)/g),
	      part,
	      shortenedParts = [],
	      length = 0;

	  // try to shorten via break chars
	  if (parts.length > 1) {

	    while ((part = parts.shift())) {
	      if (part.length + length < maxLength) {
	        shortenedParts.push(part);
	        length += part.length;
	      } else {

	        // remove previous part, too if hyphen does not fit anymore
	        if (part === '-' || part === SOFT_BREAK) {
	          shortenedParts.pop();
	        }

	        break;
	      }
	    }
	  }

	  var last = shortenedParts[shortenedParts.length - 1];

	  // translate trailing soft break to actual hyphen
	  if (last && last === SOFT_BREAK) {
	    shortenedParts[shortenedParts.length - 1] = '-';
	  }

	  return shortenedParts.join('');
	}


	function shortenLine(line, width, maxWidth) {
	  var length = Math.max(line.length * (maxWidth / width), 1);

	  // try to shorten semantically (i.e. based on spaces and hyphens)
	  var shortenedLine = semanticShorten(line, length);

	  if (!shortenedLine) {

	    // force shorten by cutting the long word
	    shortenedLine = line.slice(0, Math.max(Math.round(length - 1), 1));
	  }

	  return shortenedLine;
	}


	function getHelperSvg() {
	  var helperSvg = document.getElementById('helper-svg');

	  if (!helperSvg) {
	    helperSvg = create('svg');

	    attr$1(helperSvg, {
	      id: 'helper-svg',
	      width: 0,
	      height: 0,
	      style: 'visibility: hidden; position: fixed'
	    });

	    document.body.appendChild(helperSvg);
	  }

	  return helperSvg;
	}


	/**
	 * Creates a new label utility
	 *
	 * @param {Object} config
	 * @param {Dimensions} config.size
	 * @param {number} config.padding
	 * @param {Object} config.style
	 * @param {string} config.align
	 */
	function Text(config) {

	  this._config = assign({}, {
	    size: DEFAULT_LABEL_SIZE,
	    padding: DEFAULT_BOX_PADDING,
	    style: {},
	    align: 'center-top'
	  }, config || {});
	}

	/**
	 * Returns the layouted text as an SVG element.
	 *
	 * @param {string} text
	 * @param {Object} options
	 *
	 * @return {SVGElement}
	 */
	Text.prototype.createText = function(text, options) {
	  return this.layoutText(text, options).element;
	};

	/**
	 * Returns a labels layouted dimensions.
	 *
	 * @param {string} text to layout
	 * @param {Object} options
	 *
	 * @return {Dimensions}
	 */
	Text.prototype.getDimensions = function(text, options) {
	  return this.layoutText(text, options).dimensions;
	};

	/**
	 * Creates and returns a label and its bounding box.
	 *
	 * @method Text#createText
	 *
	 * @param {string} text the text to render on the label
	 * @param {Object} options
	 * @param {string} options.align how to align in the bounding box.
	 *                               Any of { 'center-middle', 'center-top' },
	 *                               defaults to 'center-top'.
	 * @param {string} options.style style to be applied to the text
	 * @param {boolean} options.fitBox indicates if box will be recalculated to
	 *                                 fit text
	 *
	 * @return {Object} { element, dimensions }
	 */
	Text.prototype.layoutText = function(text, options) {
	  var box = assign({}, this._config.size, options.box),
	      style = assign({}, this._config.style, options.style),
	      align = parseAlign(options.align || this._config.align),
	      padding = parsePadding(options.padding !== undefined ? options.padding : this._config.padding),
	      fitBox = options.fitBox || false;

	  var lineHeight = getLineHeight(style);

	  // we split text by lines and normalize
	  // {soft break} + {line break} => { line break }
	  var lines = text.split(/\u00AD?\r?\n/),
	      layouted = [];

	  var maxWidth = box.width - padding.left - padding.right;

	  // ensure correct rendering by attaching helper text node to invisible SVG
	  var helperText = create('text');
	  attr$1(helperText, { x: 0, y: 0 });
	  attr$1(helperText, style);

	  var helperSvg = getHelperSvg();

	  append(helperSvg, helperText);

	  while (lines.length) {
	    layouted.push(layoutNext(lines, maxWidth, helperText));
	  }

	  if (align.vertical === 'middle') {
	    padding.top = padding.bottom = 0;
	  }

	  var totalHeight = reduce(layouted, function(sum, line, idx) {
	    return sum + (lineHeight || line.height);
	  }, 0) + padding.top + padding.bottom;

	  var maxLineWidth = reduce(layouted, function(sum, line, idx) {
	    return line.width > sum ? line.width : sum;
	  }, 0);

	  // the y position of the next line
	  var y = padding.top;

	  if (align.vertical === 'middle') {
	    y += (box.height - totalHeight) / 2;
	  }

	  // magic number initial offset
	  y -= (lineHeight || layouted[0].height) / 4;


	  var textElement = create('text');

	  attr$1(textElement, style);

	  // layout each line taking into account that parent
	  // shape might resize to fit text size
	  forEach(layouted, function(line) {

	    var x;

	    y += (lineHeight || line.height);

	    switch (align.horizontal) {
	    case 'left':
	      x = padding.left;
	      break;

	    case 'right':
	      x = ((fitBox ? maxLineWidth : maxWidth)
	        - padding.right - line.width);
	      break;

	    default:

	      // aka center
	      x = Math.max((((fitBox ? maxLineWidth : maxWidth)
	        - line.width) / 2 + padding.left), 0);
	    }

	    var tspan = create('tspan');
	    attr$1(tspan, { x: x, y: y });

	    tspan.textContent = line.text;

	    append(textElement, tspan);
	  });

	  remove$1(helperText);

	  var dimensions = {
	    width: maxLineWidth,
	    height: totalHeight
	  };

	  return {
	    dimensions: dimensions,
	    element: textElement
	  };
	};


	function getLineHeight(style) {
	  if ('fontSize' in style && 'lineHeight' in style) {
	    return style.lineHeight * parseInt(style.fontSize, 10);
	  }
	}

	var DEFAULT_FONT_SIZE = 12;
	var LINE_HEIGHT_RATIO = 1.2;

	var MIN_TEXT_ANNOTATION_HEIGHT = 30;


	function TextRenderer(config) {

	  var defaultStyle = assign({
	    fontFamily: 'Arial, sans-serif',
	    fontSize: DEFAULT_FONT_SIZE,
	    fontWeight: 'normal',
	    lineHeight: LINE_HEIGHT_RATIO
	  }, config && config.defaultStyle || {});

	  var fontSize = parseInt(defaultStyle.fontSize, 10) - 1;

	  var externalStyle = assign({}, defaultStyle, {
	    fontSize: fontSize
	  }, config && config.externalStyle || {});

	  var textUtil = new Text({
	    style: defaultStyle
	  });

	  /**
	   * Get the new bounds of an externally rendered,
	   * layouted label.
	   *
	   * @param  {Bounds} bounds
	   * @param  {string} text
	   *
	   * @return {Bounds}
	   */
	  this.getExternalLabelBounds = function(bounds, text) {

	    var layoutedDimensions = textUtil.getDimensions(text, {
	      box: {
	        width: 90,
	        height: 30,
	        x: bounds.width / 2 + bounds.x,
	        y: bounds.height / 2 + bounds.y
	      },
	      style: externalStyle
	    });

	    // resize label shape to fit label text
	    return {
	      x: Math.round(bounds.x + bounds.width / 2 - layoutedDimensions.width / 2),
	      y: Math.round(bounds.y),
	      width: Math.ceil(layoutedDimensions.width),
	      height: Math.ceil(layoutedDimensions.height)
	    };

	  };

	  /**
	   * Get the new bounds of text annotation.
	   *
	   * @param  {Bounds} bounds
	   * @param  {string} text
	   *
	   * @return {Bounds}
	   */
	  this.getTextAnnotationBounds = function(bounds, text) {

	    var layoutedDimensions = textUtil.getDimensions(text, {
	      box: bounds,
	      style: defaultStyle,
	      align: 'left-top',
	      padding: 5
	    });

	    return {
	      x: bounds.x,
	      y: bounds.y,
	      width: bounds.width,
	      height: Math.max(MIN_TEXT_ANNOTATION_HEIGHT, Math.round(layoutedDimensions.height))
	    };
	  };

	  /**
	   * Create a layouted text element.
	   *
	   * @param {string} text
	   * @param {Object} [options]
	   *
	   * @return {SVGElement} rendered text
	   */
	  this.createText = function(text, options) {
	    return textUtil.createText(text, options || {});
	  };

	  /**
	   * Get default text style.
	   */
	  this.getDefaultStyle = function() {
	    return defaultStyle;
	  };

	  /**
	   * Get the external text style.
	   */
	  this.getExternalStyle = function() {
	    return externalStyle;
	  };

	}

	TextRenderer.$inject = [
	  'config.textRenderer'
	];

	/**
	 * Map containing SVG paths needed by BpmnRenderer.
	 */

	function PathMap() {

	  /**
	   * Contains a map of path elements
	   *
	   * <h1>Path definition</h1>
	   * A parameterized path is defined like this:
	   * <pre>
	   * 'GATEWAY_PARALLEL': {
	   *   d: 'm {mx},{my} {e.x0},0 0,{e.x1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} ' +
	          '-{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z',
	   *   height: 17.5,
	   *   width:  17.5,
	   *   heightElements: [2.5, 7.5],
	   *   widthElements: [2.5, 7.5]
	   * }
	   * </pre>
	   * <p>It's important to specify a correct <b>height and width</b> for the path as the scaling
	   * is based on the ratio between the specified height and width in this object and the
	   * height and width that is set as scale target (Note x,y coordinates will be scaled with
	   * individual ratios).</p>
	   * <p>The '<b>heightElements</b>' and '<b>widthElements</b>' array must contain the values that will be scaled.
	   * The scaling is based on the computed ratios.
	   * Coordinates on the y axis should be in the <b>heightElement</b>'s array, they will be scaled using
	   * the computed ratio coefficient.
	   * In the parameterized path the scaled values can be accessed through the 'e' object in {} brackets.
	   *   <ul>
	   *    <li>The values for the y axis can be accessed in the path string using {e.y0}, {e.y1}, ....</li>
	   *    <li>The values for the x axis can be accessed in the path string using {e.x0}, {e.x1}, ....</li>
	   *   </ul>
	   *   The numbers x0, x1 respectively y0, y1, ... map to the corresponding array index.
	   * </p>
	   */
	  this.pathMap = {
	    'EVENT_MESSAGE': {
	      d: 'm {mx},{my} l 0,{e.y1} l {e.x1},0 l 0,-{e.y1} z l {e.x0},{e.y0} l {e.x0},-{e.y0}',
	      height: 36,
	      width:  36,
	      heightElements: [6, 14],
	      widthElements: [10.5, 21]
	    },
	    'EVENT_SIGNAL': {
	      d: 'M {mx},{my} l {e.x0},{e.y0} l -{e.x1},0 Z',
	      height: 36,
	      width: 36,
	      heightElements: [18],
	      widthElements: [10, 20]
	    },
	    'EVENT_ESCALATION': {
	      d: 'M {mx},{my} l {e.x0},{e.y0} l -{e.x0},-{e.y1} l -{e.x0},{e.y1} Z',
	      height: 36,
	      width: 36,
	      heightElements: [20, 7],
	      widthElements: [8]
	    },
	    'EVENT_CONDITIONAL': {
	      d: 'M {e.x0},{e.y0} l {e.x1},0 l 0,{e.y2} l -{e.x1},0 Z ' +
	         'M {e.x2},{e.y3} l {e.x0},0 ' +
	         'M {e.x2},{e.y4} l {e.x0},0 ' +
	         'M {e.x2},{e.y5} l {e.x0},0 ' +
	         'M {e.x2},{e.y6} l {e.x0},0 ' +
	         'M {e.x2},{e.y7} l {e.x0},0 ' +
	         'M {e.x2},{e.y8} l {e.x0},0 ',
	      height: 36,
	      width:  36,
	      heightElements: [8.5, 14.5, 18, 11.5, 14.5, 17.5, 20.5, 23.5, 26.5],
	      widthElements:  [10.5, 14.5, 12.5]
	    },
	    'EVENT_LINK': {
	      d: 'm {mx},{my} 0,{e.y0} -{e.x1},0 0,{e.y1} {e.x1},0 0,{e.y0} {e.x0},-{e.y2} -{e.x0},-{e.y2} z',
	      height: 36,
	      width: 36,
	      heightElements: [4.4375, 6.75, 7.8125],
	      widthElements: [9.84375, 13.5]
	    },
	    'EVENT_ERROR': {
	      d: 'm {mx},{my} {e.x0},-{e.y0} {e.x1},-{e.y1} {e.x2},{e.y2} {e.x3},-{e.y3} -{e.x4},{e.y4} -{e.x5},-{e.y5} z',
	      height: 36,
	      width: 36,
	      heightElements: [0.023, 8.737, 8.151, 16.564, 10.591, 8.714],
	      widthElements: [0.085, 6.672, 6.97, 4.273, 5.337, 6.636]
	    },
	    'EVENT_CANCEL_45': {
	      d: 'm {mx},{my} -{e.x1},0 0,{e.x0} {e.x1},0 0,{e.y1} {e.x0},0 ' +
	        '0,-{e.y1} {e.x1},0 0,-{e.y0} -{e.x1},0 0,-{e.y1} -{e.x0},0 z',
	      height: 36,
	      width: 36,
	      heightElements: [4.75, 8.5],
	      widthElements: [4.75, 8.5]
	    },
	    'EVENT_COMPENSATION': {
	      d: 'm {mx},{my} {e.x0},-{e.y0} 0,{e.y1} z m {e.x1},-{e.y2} {e.x2},-{e.y3} 0,{e.y1} -{e.x2},-{e.y3} z',
	      height: 36,
	      width: 36,
	      heightElements: [6.5, 13, 0.4, 6.1],
	      widthElements: [9, 9.3, 8.7]
	    },
	    'EVENT_TIMER_WH': {
	      d: 'M {mx},{my} l {e.x0},-{e.y0} m -{e.x0},{e.y0} l {e.x1},{e.y1} ',
	      height: 36,
	      width:  36,
	      heightElements: [10, 2],
	      widthElements: [3, 7]
	    },
	    'EVENT_TIMER_LINE': {
	      d:  'M {mx},{my} ' +
	          'm {e.x0},{e.y0} l -{e.x1},{e.y1} ',
	      height: 36,
	      width:  36,
	      heightElements: [10, 3],
	      widthElements: [0, 0]
	    },
	    'EVENT_MULTIPLE': {
	      d:'m {mx},{my} {e.x1},-{e.y0} {e.x1},{e.y0} -{e.x0},{e.y1} -{e.x2},0 z',
	      height: 36,
	      width:  36,
	      heightElements: [6.28099, 12.56199],
	      widthElements: [3.1405, 9.42149, 12.56198]
	    },
	    'EVENT_PARALLEL_MULTIPLE': {
	      d:'m {mx},{my} {e.x0},0 0,{e.y1} {e.x1},0 0,{e.y0} -{e.x1},0 0,{e.y1} ' +
	        '-{e.x0},0 0,-{e.y1} -{e.x1},0 0,-{e.y0} {e.x1},0 z',
	      height: 36,
	      width:  36,
	      heightElements: [2.56228, 7.68683],
	      widthElements: [2.56228, 7.68683]
	    },
	    'GATEWAY_EXCLUSIVE': {
	      d:'m {mx},{my} {e.x0},{e.y0} {e.x1},{e.y0} {e.x2},0 {e.x4},{e.y2} ' +
	                    '{e.x4},{e.y1} {e.x2},0 {e.x1},{e.y3} {e.x0},{e.y3} ' +
	                    '{e.x3},0 {e.x5},{e.y1} {e.x5},{e.y2} {e.x3},0 z',
	      height: 17.5,
	      width:  17.5,
	      heightElements: [8.5, 6.5312, -6.5312, -8.5],
	      widthElements:  [6.5, -6.5, 3, -3, 5, -5]
	    },
	    'GATEWAY_PARALLEL': {
	      d:'m {mx},{my} 0,{e.y1} -{e.x1},0 0,{e.y0} {e.x1},0 0,{e.y1} {e.x0},0 ' +
	        '0,-{e.y1} {e.x1},0 0,-{e.y0} -{e.x1},0 0,-{e.y1} -{e.x0},0 z',
	      height: 30,
	      width:  30,
	      heightElements: [5, 12.5],
	      widthElements: [5, 12.5]
	    },
	    'GATEWAY_EVENT_BASED': {
	      d:'m {mx},{my} {e.x0},{e.y0} {e.x0},{e.y1} {e.x1},{e.y2} {e.x2},0 z',
	      height: 11,
	      width:  11,
	      heightElements: [-6, 6, 12, -12],
	      widthElements: [9, -3, -12]
	    },
	    'GATEWAY_COMPLEX': {
	      d:'m {mx},{my} 0,{e.y0} -{e.x0},-{e.y1} -{e.x1},{e.y2} {e.x0},{e.y1} -{e.x2},0 0,{e.y3} ' +
	        '{e.x2},0  -{e.x0},{e.y1} l {e.x1},{e.y2} {e.x0},-{e.y1} 0,{e.y0} {e.x3},0 0,-{e.y0} {e.x0},{e.y1} ' +
	        '{e.x1},-{e.y2} -{e.x0},-{e.y1} {e.x2},0 0,-{e.y3} -{e.x2},0 {e.x0},-{e.y1} -{e.x1},-{e.y2} ' +
	        '-{e.x0},{e.y1} 0,-{e.y0} -{e.x3},0 z',
	      height: 17.125,
	      width:  17.125,
	      heightElements: [4.875, 3.4375, 2.125, 3],
	      widthElements: [3.4375, 2.125, 4.875, 3]
	    },
	    'DATA_OBJECT_PATH': {
	      d:'m 0,0 {e.x1},0 {e.x0},{e.y0} 0,{e.y1} -{e.x2},0 0,-{e.y2} {e.x1},0 0,{e.y0} {e.x0},0',
	      height: 61,
	      width:  51,
	      heightElements: [10, 50, 60],
	      widthElements: [10, 40, 50, 60]
	    },
	    'DATA_OBJECT_COLLECTION_PATH': {
	      d: 'm{mx},{my} m 3,2 l 0,10 m 3,-10 l 0,10 m 3,-10 l 0,10',
	      height: 10,
	      width: 10,
	      heightElements: [],
	      widthElements: []
	    },
	    'DATA_ARROW': {
	      d:'m 5,9 9,0 0,-3 5,5 -5,5 0,-3 -9,0 z',
	      height: 61,
	      width:  51,
	      heightElements: [],
	      widthElements: []
	    },
	    'DATA_STORE': {
	      d:'m  {mx},{my} ' +
	        'l  0,{e.y2} ' +
	        'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0 ' +
	        'l  0,-{e.y2} ' +
	        'c -{e.x0},-{e.y1} -{e.x1},-{e.y1} -{e.x2},0' +
	        'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0 ' +
	        'm  -{e.x2},{e.y0}' +
	        'c  {e.x0},{e.y1} {e.x1},{e.y1} {e.x2},0' +
	        'm  -{e.x2},{e.y0}' +
	        'c  {e.x0},{e.y1} {e.x1},{e.y1}  {e.x2},0',
	      height: 61,
	      width:  61,
	      heightElements: [7, 10, 45],
	      widthElements:  [2, 58, 60]
	    },
	    'TEXT_ANNOTATION': {
	      d: 'm {mx}, {my} m 10,0 l -10,0 l 0,{e.y0} l 10,0',
	      height: 30,
	      width: 10,
	      heightElements: [30],
	      widthElements: [10]
	    },
	    'MARKER_SUB_PROCESS': {
	      d: 'm{mx},{my} m 7,2 l 0,10 m -5,-5 l 10,0',
	      height: 10,
	      width: 10,
	      heightElements: [],
	      widthElements: []
	    },
	    'MARKER_PARALLEL': {
	      d: 'm{mx},{my} m 3,2 l 0,10 m 3,-10 l 0,10 m 3,-10 l 0,10',
	      height: 10,
	      width: 10,
	      heightElements: [],
	      widthElements: []
	    },
	    'MARKER_SEQUENTIAL': {
	      d: 'm{mx},{my} m 0,3 l 10,0 m -10,3 l 10,0 m -10,3 l 10,0',
	      height: 10,
	      width: 10,
	      heightElements: [],
	      widthElements: []
	    },
	    'MARKER_COMPENSATION': {
	      d: 'm {mx},{my} 7,-5 0,10 z m 7.1,-0.3 6.9,-4.7 0,10 -6.9,-4.7 z',
	      height: 10,
	      width: 21,
	      heightElements: [],
	      widthElements: []
	    },
	    'MARKER_LOOP': {
	      d: 'm {mx},{my} c 3.526979,0 6.386161,-2.829858 6.386161,-6.320661 0,-3.490806 -2.859182,-6.320661 ' +
	        '-6.386161,-6.320661 -3.526978,0 -6.38616,2.829855 -6.38616,6.320661 0,1.745402 ' +
	        '0.714797,3.325567 1.870463,4.469381 0.577834,0.571908 1.265885,1.034728 2.029916,1.35457 ' +
	        'l -0.718163,-3.909793 m 0.718163,3.909793 -3.885211,0.802902',
	      height: 13.9,
	      width: 13.7,
	      heightElements: [],
	      widthElements: []
	    },
	    'MARKER_ADHOC': {
	      d: 'm {mx},{my} m 0.84461,2.64411 c 1.05533,-1.23780996 2.64337,-2.07882 4.29653,-1.97997996 2.05163,0.0805 ' +
	        '3.85579,1.15803 5.76082,1.79107 1.06385,0.34139996 2.24454,0.1438 3.18759,-0.43767 0.61743,-0.33642 ' +
	        '1.2775,-0.64078 1.7542,-1.17511 0,0.56023 0,1.12046 0,1.6807 -0.98706,0.96237996 -2.29792,1.62393996 ' +
	        '-3.6918,1.66181996 -1.24459,0.0927 -2.46671,-0.2491 -3.59505,-0.74812 -1.35789,-0.55965 ' +
	        '-2.75133,-1.33436996 -4.27027,-1.18121996 -1.37741,0.14601 -2.41842,1.13685996 -3.44288,1.96782996 z',
	      height: 4,
	      width: 15,
	      heightElements: [],
	      widthElements: []
	    },
	    'TASK_TYPE_SEND': {
	      d: 'm {mx},{my} l 0,{e.y1} l {e.x1},0 l 0,-{e.y1} z l {e.x0},{e.y0} l {e.x0},-{e.y0}',
	      height: 14,
	      width:  21,
	      heightElements: [6, 14],
	      widthElements: [10.5, 21]
	    },
	    'TASK_TYPE_SCRIPT': {
	      d: 'm {mx},{my} c 9.966553,-6.27276 -8.000926,-7.91932 2.968968,-14.938 l -8.802728,0 ' +
	        'c -10.969894,7.01868 6.997585,8.66524 -2.968967,14.938 z ' +
	        'm -7,-12 l 5,0 ' +
	        'm -4.5,3 l 4.5,0 ' +
	        'm -3,3 l 5,0' +
	        'm -4,3 l 5,0',
	      height: 15,
	      width:  12.6,
	      heightElements: [6, 14],
	      widthElements: [10.5, 21]
	    },
	    'TASK_TYPE_USER_1': {
	      d: 'm {mx},{my} c 0.909,-0.845 1.594,-2.049 1.594,-3.385 0,-2.554 -1.805,-4.62199999 ' +
	        '-4.357,-4.62199999 -2.55199998,0 -4.28799998,2.06799999 -4.28799998,4.62199999 0,1.348 ' +
	        '0.974,2.562 1.89599998,3.405 -0.52899998,0.187 -5.669,2.097 -5.794,4.7560005 v 6.718 ' +
	        'h 17 v -6.718 c 0,-2.2980005 -5.5279996,-4.5950005 -6.0509996,-4.7760005 z' +
	        'm -8,6 l 0,5.5 m 11,0 l 0,-5'
	    },
	    'TASK_TYPE_USER_2': {
	      d: 'm {mx},{my} m 2.162,1.009 c 0,2.4470005 -2.158,4.4310005 -4.821,4.4310005 ' +
	        '-2.66499998,0 -4.822,-1.981 -4.822,-4.4310005 '
	    },
	    'TASK_TYPE_USER_3': {
	      d: 'm {mx},{my} m -6.9,-3.80 c 0,0 2.25099998,-2.358 4.27399998,-1.177 2.024,1.181 4.221,1.537 ' +
	        '4.124,0.965 -0.098,-0.57 -0.117,-3.79099999 -4.191,-4.13599999 -3.57499998,0.001 ' +
	        '-4.20799998,3.36699999 -4.20699998,4.34799999 z'
	    },
	    'TASK_TYPE_MANUAL': {
	      d: 'm {mx},{my} c 0.234,-0.01 5.604,0.008 8.029,0.004 0.808,0 1.271,-0.172 1.417,-0.752 0.227,-0.898 ' +
	        '-0.334,-1.314 -1.338,-1.316 -2.467,-0.01 -7.886,-0.004 -8.108,-0.004 -0.014,-0.079 0.016,-0.533 0,-0.61 ' +
	        '0.195,-0.042 8.507,0.006 9.616,0.002 0.877,-0.007 1.35,-0.438 1.353,-1.208 0.003,-0.768 -0.479,-1.09 ' +
	        '-1.35,-1.091 -2.968,-0.002 -9.619,-0.013 -9.619,-0.013 v -0.591 c 0,0 5.052,-0.016 7.225,-0.016 ' +
	        '0.888,-0.002 1.354,-0.416 1.351,-1.193 -0.006,-0.761 -0.492,-1.196 -1.361,-1.196 -3.473,-0.005 ' +
	        '-10.86,-0.003 -11.0829995,-0.003 -0.022,-0.047 -0.045,-0.094 -0.069,-0.139 0.3939995,-0.319 ' +
	        '2.0409995,-1.626 2.4149995,-2.017 0.469,-0.4870005 0.519,-1.1650005 0.162,-1.6040005 -0.414,-0.511 ' +
	        '-0.973,-0.5 -1.48,-0.236 -1.4609995,0.764 -6.5999995,3.6430005 -7.7329995,4.2710005 -0.9,0.499 ' +
	        '-1.516,1.253 -1.882,2.19 -0.37000002,0.95 -0.17,2.01 -0.166,2.979 0.004,0.718 -0.27300002,1.345 ' +
	        '-0.055,2.063 0.629,2.087 2.425,3.312 4.859,3.318 4.6179995,0.014 9.2379995,-0.139 13.8569995,-0.158 ' +
	        '0.755,-0.004 1.171,-0.301 1.182,-1.033 0.012,-0.754 -0.423,-0.969 -1.183,-0.973 -1.778,-0.01 ' +
	        '-5.824,-0.004 -6.04,-0.004 10e-4,-0.084 0.003,-0.586 10e-4,-0.67 z'
	    },
	    'TASK_TYPE_INSTANTIATING_SEND': {
	      d: 'm {mx},{my} l 0,8.4 l 12.6,0 l 0,-8.4 z l 6.3,3.6 l 6.3,-3.6'
	    },
	    'TASK_TYPE_SERVICE': {
	      d: 'm {mx},{my} v -1.71335 c 0.352326,-0.0705 0.703932,-0.17838 1.047628,-0.32133 ' +
	        '0.344416,-0.14465 0.665822,-0.32133 0.966377,-0.52145 l 1.19431,1.18005 1.567487,-1.57688 ' +
	        '-1.195028,-1.18014 c 0.403376,-0.61394 0.683079,-1.29908 0.825447,-2.01824 l 1.622133,-0.01 ' +
	        'v -2.2196 l -1.636514,0.01 c -0.07333,-0.35153 -0.178319,-0.70024 -0.323564,-1.04372 ' +
	        '-0.145244,-0.34406 -0.321407,-0.6644 -0.522735,-0.96217 l 1.131035,-1.13631 -1.583305,-1.56293 ' +
	        '-1.129598,1.13589 c -0.614052,-0.40108 -1.302883,-0.68093 -2.022633,-0.82247 l 0.0093,-1.61852 ' +
	        'h -2.241173 l 0.0042,1.63124 c -0.353763,0.0736 -0.705369,0.17977 -1.049785,0.32371 -0.344415,0.14437 ' +
	        '-0.665102,0.32092 -0.9635006,0.52046 l -1.1698628,-1.15823 -1.5667691,1.5792 1.1684265,1.15669 ' +
	        'c -0.4026573,0.61283 -0.68308,1.29797 -0.8247287,2.01713 l -1.6588041,0.003 v 2.22174 ' +
	        'l 1.6724648,-0.006 c 0.073327,0.35077 0.1797598,0.70243 0.3242851,1.04472 0.1452428,0.34448 ' +
	        '0.3214064,0.6644 0.5227339,0.96066 l -1.1993431,1.19723 1.5840256,1.56011 1.1964668,-1.19348 ' +
	        'c 0.6140517,0.40346 1.3028827,0.68232 2.0233517,0.82331 l 7.19e-4,1.69892 h 2.226848 z ' +
	        'm 0.221462,-3.9957 c -1.788948,0.7502 -3.8576,-0.0928 -4.6097055,-1.87438 -0.7521065,-1.78321 ' +
	        '0.090598,-3.84627 1.8802645,-4.59604 1.78823,-0.74936 3.856881,0.0929 4.608987,1.87437 ' +
	        '0.752106,1.78165 -0.0906,3.84612 -1.879546,4.59605 z'
	    },
	    'TASK_TYPE_SERVICE_FILL': {
	      d: 'm {mx},{my} c -1.788948,0.7502 -3.8576,-0.0928 -4.6097055,-1.87438 -0.7521065,-1.78321 ' +
	        '0.090598,-3.84627 1.8802645,-4.59604 1.78823,-0.74936 3.856881,0.0929 4.608987,1.87437 ' +
	        '0.752106,1.78165 -0.0906,3.84612 -1.879546,4.59605 z'
	    },
	    'TASK_TYPE_BUSINESS_RULE_HEADER': {
	      d: 'm {mx},{my} 0,4 20,0 0,-4 z'
	    },
	    'TASK_TYPE_BUSINESS_RULE_MAIN': {
	      d: 'm {mx},{my} 0,12 20,0 0,-12 z' +
	        'm 0,8 l 20,0 ' +
	        'm -13,-4 l 0,8'
	    },
	    'MESSAGE_FLOW_MARKER': {
	      d: 'm {mx},{my} m -10.5 ,-7 l 0,14 l 21,0 l 0,-14 z l 10.5,6 l 10.5,-6'
	    }
	  };

	  this.getRawPath = function getRawPath(pathId) {
	    return this.pathMap[pathId].d;
	  };

	  /**
	   * Scales the path to the given height and width.
	   * <h1>Use case</h1>
	   * <p>Use case is to scale the content of elements (event, gateways) based
	   * on the element bounding box's size.
	   * </p>
	   * <h1>Why not transform</h1>
	   * <p>Scaling a path with transform() will also scale the stroke and IE does not support
	   * the option 'non-scaling-stroke' to prevent this.
	   * Also there are use cases where only some parts of a path should be
	   * scaled.</p>
	   *
	   * @param {string} pathId The ID of the path.
	   * @param {Object} param <p>
	   *   Example param object scales the path to 60% size of the container (data.width, data.height).
	   *   <pre>
	   *   {
	   *     xScaleFactor: 0.6,
	   *     yScaleFactor:0.6,
	   *     containerWidth: data.width,
	   *     containerHeight: data.height,
	   *     position: {
	   *       mx: 0.46,
	   *       my: 0.2,
	   *     }
	   *   }
	   *   </pre>
	   *   <ul>
	   *    <li>targetpathwidth = xScaleFactor * containerWidth</li>
	   *    <li>targetpathheight = yScaleFactor * containerHeight</li>
	   *    <li>Position is used to set the starting coordinate of the path. M is computed:
	    *    <ul>
	    *      <li>position.x * containerWidth</li>
	    *      <li>position.y * containerHeight</li>
	    *    </ul>
	    *    Center of the container <pre> position: {
	   *       mx: 0.5,
	   *       my: 0.5,
	   *     }</pre>
	   *     Upper left corner of the container
	   *     <pre> position: {
	   *       mx: 0.0,
	   *       my: 0.0,
	   *     }</pre>
	   *    </li>
	   *   </ul>
	   * </p>
	   *
	   */
	  this.getScaledPath = function getScaledPath(pathId, param) {
	    var rawPath = this.pathMap[pathId];

	    // positioning
	    // compute the start point of the path
	    var mx, my;

	    if (param.abspos) {
	      mx = param.abspos.x;
	      my = param.abspos.y;
	    } else {
	      mx = param.containerWidth * param.position.mx;
	      my = param.containerHeight * param.position.my;
	    }

	    var coordinates = {}; // map for the scaled coordinates
	    if (param.position) {

	      // path
	      var heightRatio = (param.containerHeight / rawPath.height) * param.yScaleFactor;
	      var widthRatio = (param.containerWidth / rawPath.width) * param.xScaleFactor;


	      // Apply height ratio
	      for (var heightIndex = 0; heightIndex < rawPath.heightElements.length; heightIndex++) {
	        coordinates['y' + heightIndex] = rawPath.heightElements[heightIndex] * heightRatio;
	      }

	      // Apply width ratio
	      for (var widthIndex = 0; widthIndex < rawPath.widthElements.length; widthIndex++) {
	        coordinates['x' + widthIndex] = rawPath.widthElements[widthIndex] * widthRatio;
	      }
	    }

	    // Apply value to raw path
	    var path = format(
	      rawPath.d, {
	        mx: mx,
	        my: my,
	        e: coordinates
	      }
	    );
	    return path;
	  };
	}

	// helpers //////////////////////

	// copied from https://github.com/adobe-webplatform/Snap.svg/blob/master/src/svg.js
	var tokenRegex = /\{([^}]+)\}/g,
	    objNotationRegex = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g; // matches .xxxxx or ["xxxxx"] to run over object properties

	function replacer(all, key, obj) {
	  var res = obj;
	  key.replace(objNotationRegex, function(all, name, quote, quotedName, isFunc) {
	    name = name || quotedName;
	    if (res) {
	      if (name in res) {
	        res = res[name];
	      }
	      typeof res == 'function' && isFunc && (res = res());
	    }
	  });
	  res = (res == null || res == obj ? all : res) + '';

	  return res;
	}

	function format(str, obj) {
	  return String(str).replace(tokenRegex, function(all, key) {
	    return replacer(all, key, obj);
	  });
	}

	var DrawModule$1 = {
	  __init__: [ 'bpmnRenderer' ],
	  bpmnRenderer: [ 'type', BpmnRenderer ],
	  textRenderer: [ 'type', TextRenderer ],
	  pathMap: [ 'type', PathMap ]
	};

	/**
	 * A simple translation stub to be used for multi-language support
	 * in diagrams. Can be easily replaced with a more sophisticated
	 * solution.
	 *
	 * @example
	 *
	 * // use it inside any diagram component by injecting `translate`.
	 *
	 * function MyService(translate) {
	 *   alert(translate('HELLO {you}', { you: 'You!' }));
	 * }
	 *
	 * @param {string} template to interpolate
	 * @param {Object} [replacements] a map with substitutes
	 *
	 * @return {string} the translated string
	 */
	function translate$1(template, replacements) {

	  replacements = replacements || {};

	  return template.replace(/{([^}]+)}/g, function(_, key) {
	    return replacements[key] || '{' + key + '}';
	  });
	}

	var translate$2 = {
	  translate: [ 'value', translate$1 ]
	};

	var translate$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': translate$2
	});

	var DEFAULT_LABEL_SIZE$1 = {
	  width: 90,
	  height: 20
	};

	var FLOW_LABEL_INDENT = 15;


	/**
	 * Returns true if the given semantic has an external label
	 *
	 * @param {BpmnElement} semantic
	 * @return {boolean} true if has label
	 */
	function isLabelExternal(semantic) {
	  return is$1(semantic, 'bpmn:Event') ||
	         is$1(semantic, 'bpmn:Gateway') ||
	         is$1(semantic, 'bpmn:DataStoreReference') ||
	         is$1(semantic, 'bpmn:DataObjectReference') ||
	         is$1(semantic, 'bpmn:DataInput') ||
	         is$1(semantic, 'bpmn:DataOutput') ||
	         is$1(semantic, 'bpmn:SequenceFlow') ||
	         is$1(semantic, 'bpmn:MessageFlow') ||
	         is$1(semantic, 'bpmn:Group');
	}

	/**
	 * Returns true if the given element has an external label
	 *
	 * @param {djs.model.shape} element
	 * @return {boolean} true if has label
	 */
	function hasExternalLabel(element) {
	  return isLabel(element.label);
	}

	/**
	 * Get the position for sequence flow labels
	 *
	 * @param  {Array<Point>} waypoints
	 * @return {Point} the label position
	 */
	function getFlowLabelPosition(waypoints) {

	  // get the waypoints mid
	  var mid = waypoints.length / 2 - 1;

	  var first = waypoints[Math.floor(mid)];
	  var second = waypoints[Math.ceil(mid + 0.01)];

	  // get position
	  var position = getWaypointsMid(waypoints);

	  // calculate angle
	  var angle = Math.atan((second.y - first.y) / (second.x - first.x));

	  var x = position.x,
	      y = position.y;

	  if (Math.abs(angle) < Math.PI / 2) {
	    y -= FLOW_LABEL_INDENT;
	  } else {
	    x += FLOW_LABEL_INDENT;
	  }

	  return { x: x, y: y };
	}


	/**
	 * Get the middle of a number of waypoints
	 *
	 * @param  {Array<Point>} waypoints
	 * @return {Point} the mid point
	 */
	function getWaypointsMid(waypoints) {

	  var mid = waypoints.length / 2 - 1;

	  var first = waypoints[Math.floor(mid)];
	  var second = waypoints[Math.ceil(mid + 0.01)];

	  return {
	    x: first.x + (second.x - first.x) / 2,
	    y: first.y + (second.y - first.y) / 2
	  };
	}


	function getExternalLabelMid(element) {

	  if (element.waypoints) {
	    return getFlowLabelPosition(element.waypoints);
	  } else if (is$1(element, 'bpmn:Group')) {
	    return {
	      x: element.x + element.width / 2,
	      y: element.y + DEFAULT_LABEL_SIZE$1.height / 2
	    };
	  } else {
	    return {
	      x: element.x + element.width / 2,
	      y: element.y + element.height + DEFAULT_LABEL_SIZE$1.height / 2
	    };
	  }
	}


	/**
	 * Returns the bounds of an elements label, parsed from the elements DI or
	 * generated from its bounds.
	 *
	 * @param {BpmnElement} semantic
	 * @param {djs.model.Base} element
	 */
	function getExternalLabelBounds(semantic, element) {

	  var mid,
	      size,
	      bounds,
	      di = semantic.di,
	      label = di.label;

	  if (label && label.bounds) {
	    bounds = label.bounds;

	    size = {
	      width: Math.max(DEFAULT_LABEL_SIZE$1.width, bounds.width),
	      height: bounds.height
	    };

	    mid = {
	      x: bounds.x + bounds.width / 2,
	      y: bounds.y + bounds.height / 2
	    };
	  } else {

	    mid = getExternalLabelMid(element);

	    size = DEFAULT_LABEL_SIZE$1;
	  }

	  return assign({
	    x: mid.x - size.width / 2,
	    y: mid.y - size.height / 2
	  }, size);
	}

	function isLabel(element) {
	  return element && !!element.labelTarget;
	}

	/**
	 * Computes the distance between two points
	 *
	 * @param  {Point}  p
	 * @param  {Point}  q
	 *
	 * @return {number}  distance
	 */
	function pointDistance(a, b) {
	  if (!a || !b) {
	    return -1;
	  }

	  return Math.sqrt(
	    Math.pow(a.x - b.x, 2) +
	    Math.pow(a.y - b.y, 2)
	  );
	}


	/**
	 * Returns true if the point r is on the line between p and q
	 *
	 * @param  {Point}  p
	 * @param  {Point}  q
	 * @param  {Point}  r
	 * @param  {number} [accuracy=5] accuracy for points on line check (lower is better)
	 *
	 * @return {boolean}
	 */
	function pointsOnLine(p, q, r, accuracy) {

	  if (typeof accuracy === 'undefined') {
	    accuracy = 5;
	  }

	  if (!p || !q || !r) {
	    return false;
	  }

	  var val = (q.x - p.x) * (r.y - p.y) - (q.y - p.y) * (r.x - p.x),
	      dist = pointDistance(p, q);

	  // @see http://stackoverflow.com/a/907491/412190
	  return Math.abs(val / dist) <= accuracy;
	}


	var ALIGNED_THRESHOLD = 2;

	/**
	 * Check whether two points are horizontally or vertically aligned.
	 *
	 * @param {Array<Point>|Point}
	 * @param {Point}
	 *
	 * @return {string|boolean}
	 */
	function pointsAligned(a, b) {
	  var points;

	  if (isArray(a)) {
	    points = a;
	  } else {
	    points = [ a, b ];
	  }

	  if (pointsAlignedHorizontally(points)) {
	    return 'h';
	  }

	  if (pointsAlignedVertically(points)) {
	    return 'v';
	  }

	  return false;
	}

	function pointsAlignedHorizontally(a, b) {
	  var points;

	  if (isArray(a)) {
	    points = a;
	  } else {
	    points = [ a, b ];
	  }

	  var firstPoint = points.slice().shift();

	  return every(points, function(point) {
	    return Math.abs(firstPoint.y - point.y) <= ALIGNED_THRESHOLD;
	  });
	}

	function pointsAlignedVertically(a, b) {
	  var points;

	  if (isArray(a)) {
	    points = a;
	  } else {
	    points = [ a, b ];
	  }

	  var firstPoint = points.slice().shift();

	  return every(points, function(point) {
	    return Math.abs(firstPoint.x - point.x) <= ALIGNED_THRESHOLD;
	  });
	}



	/**
	 * Returns true if the point p is inside the rectangle rect
	 *
	 * @param  {Point}  p
	 * @param  {Rect} rect
	 * @param  {number} tolerance
	 *
	 * @return {boolean}
	 */
	function pointInRect(p, rect, tolerance) {
	  tolerance = tolerance || 0;

	  return p.x > rect.x - tolerance &&
	         p.y > rect.y - tolerance &&
	         p.x < rect.x + rect.width + tolerance &&
	         p.y < rect.y + rect.height + tolerance;
	}

	/**
	 * Returns a point in the middle of points p and q
	 *
	 * @param  {Point}  p
	 * @param  {Point}  q
	 *
	 * @return {Point} middle point
	 */
	function getMidPoint(p, q) {
	  return {
	    x: Math.round(p.x + ((q.x - p.x) / 2.0)),
	    y: Math.round(p.y + ((q.y - p.y) / 2.0))
	  };
	}

	/**
	 * This file contains source code adapted from Snap.svg (licensed Apache-2.0).
	 *
	 * @see https://github.com/adobe-webplatform/Snap.svg/blob/master/src/path.js
	 */

	/* eslint no-fallthrough: "off" */

	var p2s = /,?([a-z]),?/gi,
	    toFloat = parseFloat,
	    math = Math,
	    PI = math.PI,
	    mmin = math.min,
	    mmax = math.max,
	    pow = math.pow,
	    abs = math.abs,
	    pathCommand = /([a-z])[\s,]*((-?\d*\.?\d*(?:e[-+]?\d+)?[\s]*,?[\s]*)+)/ig,
	    pathValues = /(-?\d*\.?\d*(?:e[-+]?\\d+)?)[\s]*,?[\s]*/ig;

	var isArray$2 = Array.isArray || function(o) { return o instanceof Array; };

	function hasProperty(obj, property) {
	  return Object.prototype.hasOwnProperty.call(obj, property);
	}

	function clone$1(obj) {

	  if (typeof obj == 'function' || Object(obj) !== obj) {
	    return obj;
	  }

	  var res = new obj.constructor;

	  for (var key in obj) {
	    if (hasProperty(obj, key)) {
	      res[key] = clone$1(obj[key]);
	    }
	  }

	  return res;
	}

	function repush(array, item) {
	  for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {
	    return array.push(array.splice(i, 1)[0]);
	  }
	}

	function cacher(f) {

	  function newf() {

	    var arg = Array.prototype.slice.call(arguments, 0),
	        args = arg.join('\u2400'),
	        cache = newf.cache = newf.cache || {},
	        count = newf.count = newf.count || [];

	    if (hasProperty(cache, args)) {
	      repush(count, args);
	      return cache[args];
	    }

	    count.length >= 1e3 && delete cache[count.shift()];
	    count.push(args);
	    cache[args] = f.apply(0, arg);

	    return cache[args];
	  }
	  return newf;
	}

	function parsePathString(pathString) {

	  if (!pathString) {
	    return null;
	  }

	  var pth = paths(pathString);

	  if (pth.arr) {
	    return clone$1(pth.arr);
	  }

	  var paramCounts = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 },
	      data = [];

	  if (isArray$2(pathString) && isArray$2(pathString[0])) { // rough assumption
	    data = clone$1(pathString);
	  }

	  if (!data.length) {

	    String(pathString).replace(pathCommand, function(a, b, c) {
	      var params = [],
	          name = b.toLowerCase();

	      c.replace(pathValues, function(a, b) {
	        b && params.push(+b);
	      });

	      if (name == 'm' && params.length > 2) {
	        data.push([b].concat(params.splice(0, 2)));
	        name = 'l';
	        b = b == 'm' ? 'l' : 'L';
	      }

	      while (params.length >= paramCounts[name]) {
	        data.push([b].concat(params.splice(0, paramCounts[name])));
	        if (!paramCounts[name]) {
	          break;
	        }
	      }
	    });
	  }

	  data.toString = paths.toString;
	  pth.arr = clone$1(data);

	  return data;
	}

	function paths(ps) {
	  var p = paths.ps = paths.ps || {};

	  if (p[ps]) {
	    p[ps].sleep = 100;
	  } else {
	    p[ps] = {
	      sleep: 100
	    };
	  }

	  setTimeout(function() {
	    for (var key in p) {
	      if (hasProperty(p, key) && key != ps) {
	        p[key].sleep--;
	        !p[key].sleep && delete p[key];
	      }
	    }
	  });

	  return p[ps];
	}

	function rectBBox(x, y, width, height) {

	  if (arguments.length === 1) {
	    y = x.y;
	    width = x.width;
	    height = x.height;
	    x = x.x;
	  }

	  return {
	    x: x,
	    y: y,
	    width: width,
	    height: height,
	    x2: x + width,
	    y2: y + height
	  };
	}

	function pathToString() {
	  return this.join(',').replace(p2s, '$1');
	}

	function pathClone(pathArray) {
	  var res = clone$1(pathArray);
	  res.toString = pathToString;
	  return res;
	}

	function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
	  var t1 = 1 - t,
	      t13 = pow(t1, 3),
	      t12 = pow(t1, 2),
	      t2 = t * t,
	      t3 = t2 * t,
	      x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,
	      y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;

	  return {
	    x: fixError(x),
	    y: fixError(y)
	  };
	}

	function bezierBBox(points) {

	  var bbox = curveBBox.apply(null, points);

	  return rectBBox(
	    bbox.x0,
	    bbox.y0,
	    bbox.x1 - bbox.x0,
	    bbox.y1 - bbox.y0
	  );
	}

	function isPointInsideBBox(bbox, x, y) {
	  return x >= bbox.x &&
	    x <= bbox.x + bbox.width &&
	    y >= bbox.y &&
	    y <= bbox.y + bbox.height;
	}

	function isBBoxIntersect(bbox1, bbox2) {
	  bbox1 = rectBBox(bbox1);
	  bbox2 = rectBBox(bbox2);
	  return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)
	    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)
	    || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)
	    || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)
	    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)
	    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)
	    || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)
	    || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)
	    || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x
	        || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)
	    && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y
	        || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);
	}

	function base3(t, p1, p2, p3, p4) {
	  var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,
	      t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
	  return t * t2 - 3 * p1 + 3 * p2;
	}

	function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {

	  if (z == null) {
	    z = 1;
	  }

	  z = z > 1 ? 1 : z < 0 ? 0 : z;

	  var z2 = z / 2,
	      n = 12,
	      Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],
	      Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],
	      sum = 0;

	  for (var i = 0; i < n; i++) {
	    var ct = z2 * Tvalues[i] + z2,
	        xbase = base3(ct, x1, x2, x3, x4),
	        ybase = base3(ct, y1, y2, y3, y4),
	        comb = xbase * xbase + ybase * ybase;

	    sum += Cvalues[i] * math.sqrt(comb);
	  }

	  return z2 * sum;
	}


	function intersectLines(x1, y1, x2, y2, x3, y3, x4, y4) {

	  if (
	    mmax(x1, x2) < mmin(x3, x4) ||
	      mmin(x1, x2) > mmax(x3, x4) ||
	      mmax(y1, y2) < mmin(y3, y4) ||
	      mmin(y1, y2) > mmax(y3, y4)
	  ) {
	    return;
	  }

	  var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),
	      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),
	      denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);

	  if (!denominator) {
	    return;
	  }

	  var px = fixError(nx / denominator),
	      py = fixError(ny / denominator),
	      px2 = +px.toFixed(2),
	      py2 = +py.toFixed(2);

	  if (
	    px2 < +mmin(x1, x2).toFixed(2) ||
	      px2 > +mmax(x1, x2).toFixed(2) ||
	      px2 < +mmin(x3, x4).toFixed(2) ||
	      px2 > +mmax(x3, x4).toFixed(2) ||
	      py2 < +mmin(y1, y2).toFixed(2) ||
	      py2 > +mmax(y1, y2).toFixed(2) ||
	      py2 < +mmin(y3, y4).toFixed(2) ||
	      py2 > +mmax(y3, y4).toFixed(2)
	  ) {
	    return;
	  }

	  return { x: px, y: py };
	}

	function fixError(number) {
	  return Math.round(number * 100000000000) / 100000000000;
	}

	function findBezierIntersections(bez1, bez2, justCount) {
	  var bbox1 = bezierBBox(bez1),
	      bbox2 = bezierBBox(bez2);

	  if (!isBBoxIntersect(bbox1, bbox2)) {
	    return justCount ? 0 : [];
	  }

	  // As an optimization, lines will have only 1 segment

	  var l1 = bezlen.apply(0, bez1),
	      l2 = bezlen.apply(0, bez2),
	      n1 = isLine(bez1) ? 1 : ~~(l1 / 5) || 1,
	      n2 = isLine(bez2) ? 1 : ~~(l2 / 5) || 1,
	      dots1 = [],
	      dots2 = [],
	      xy = {},
	      res = justCount ? 0 : [];

	  for (var i = 0; i < n1 + 1; i++) {
	    var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));
	    dots1.push({ x: p.x, y: p.y, t: i / n1 });
	  }

	  for (i = 0; i < n2 + 1; i++) {
	    p = findDotsAtSegment.apply(0, bez2.concat(i / n2));
	    dots2.push({ x: p.x, y: p.y, t: i / n2 });
	  }

	  for (i = 0; i < n1; i++) {

	    for (var j = 0; j < n2; j++) {
	      var di = dots1[i],
	          di1 = dots1[i + 1],
	          dj = dots2[j],
	          dj1 = dots2[j + 1],
	          ci = abs(di1.x - di.x) < .01 ? 'y' : 'x',
	          cj = abs(dj1.x - dj.x) < .01 ? 'y' : 'x',
	          is = intersectLines(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y),
	          key;

	      if (is) {
	        key = is.x.toFixed(9) + '#' + is.y.toFixed(9);

	        if (xy[key]) {
	          continue;
	        }

	        xy[key] = true;

	        var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),
	            t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);

	        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {

	          if (justCount) {
	            res++;
	          } else {
	            res.push({
	              x: is.x,
	              y: is.y,
	              t1: t1,
	              t2: t2
	            });
	          }
	        }
	      }
	    }
	  }

	  return res;
	}


	/**
	 * Find or counts the intersections between two SVG paths.
	 *
	 * Returns a number in counting mode and a list of intersections otherwise.
	 *
	 * A single intersection entry contains the intersection coordinates (x, y)
	 * as well as additional information regarding the intersecting segments
	 * on each path (segment1, segment2) and the relative location of the
	 * intersection on these segments (t1, t2).
	 *
	 * The path may be an SVG path string or a list of path components
	 * such as `[ [ 'M', 0, 10 ], [ 'L', 20, 0 ] ]`.
	 *
	 * @example
	 *
	 * var intersections = findPathIntersections(
	 *   'M0,0L100,100',
	 *   [ [ 'M', 0, 100 ], [ 'L', 100, 0 ] ]
	 * );
	 *
	 * // intersections = [
	 * //   { x: 50, y: 50, segment1: 1, segment2: 1, t1: 0.5, t2: 0.5 }
	 * // ]
	 *
	 * @param {String|Array<PathDef>} path1
	 * @param {String|Array<PathDef>} path2
	 * @param {Boolean} [justCount=false]
	 *
	 * @return {Array<Intersection>|Number}
	 */
	function findPathIntersections(path1, path2, justCount) {
	  path1 = pathToCurve(path1);
	  path2 = pathToCurve(path2);

	  var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,
	      res = justCount ? 0 : [];

	  for (var i = 0, ii = path1.length; i < ii; i++) {
	    var pi = path1[i];

	    if (pi[0] == 'M') {
	      x1 = x1m = pi[1];
	      y1 = y1m = pi[2];
	    } else {

	      if (pi[0] == 'C') {
	        bez1 = [x1, y1].concat(pi.slice(1));
	        x1 = bez1[6];
	        y1 = bez1[7];
	      } else {
	        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];
	        x1 = x1m;
	        y1 = y1m;
	      }

	      for (var j = 0, jj = path2.length; j < jj; j++) {
	        var pj = path2[j];

	        if (pj[0] == 'M') {
	          x2 = x2m = pj[1];
	          y2 = y2m = pj[2];
	        } else {

	          if (pj[0] == 'C') {
	            bez2 = [x2, y2].concat(pj.slice(1));
	            x2 = bez2[6];
	            y2 = bez2[7];
	          } else {
	            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];
	            x2 = x2m;
	            y2 = y2m;
	          }

	          var intr = findBezierIntersections(bez1, bez2, justCount);

	          if (justCount) {
	            res += intr;
	          } else {

	            for (var k = 0, kk = intr.length; k < kk; k++) {
	              intr[k].segment1 = i;
	              intr[k].segment2 = j;
	              intr[k].bez1 = bez1;
	              intr[k].bez2 = bez2;
	            }

	            res = res.concat(intr);
	          }
	        }
	      }
	    }
	  }

	  return res;
	}


	function pathToAbsolute(pathArray) {
	  var pth = paths(pathArray);

	  if (pth.abs) {
	    return pathClone(pth.abs);
	  }

	  if (!isArray$2(pathArray) || !isArray$2(pathArray && pathArray[0])) { // rough assumption
	    pathArray = parsePathString(pathArray);
	  }

	  if (!pathArray || !pathArray.length) {
	    return [['M', 0, 0]];
	  }

	  var res = [],
	      x = 0,
	      y = 0,
	      mx = 0,
	      my = 0,
	      start = 0,
	      pa0;

	  if (pathArray[0][0] == 'M') {
	    x = +pathArray[0][1];
	    y = +pathArray[0][2];
	    mx = x;
	    my = y;
	    start++;
	    res[0] = ['M', x, y];
	  }

	  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
	    res.push(r = []);
	    pa = pathArray[i];
	    pa0 = pa[0];

	    if (pa0 != pa0.toUpperCase()) {
	      r[0] = pa0.toUpperCase();

	      switch (r[0]) {
	      case 'A':
	        r[1] = pa[1];
	        r[2] = pa[2];
	        r[3] = pa[3];
	        r[4] = pa[4];
	        r[5] = pa[5];
	        r[6] = +pa[6] + x;
	        r[7] = +pa[7] + y;
	        break;
	      case 'V':
	        r[1] = +pa[1] + y;
	        break;
	      case 'H':
	        r[1] = +pa[1] + x;
	        break;
	      case 'M':
	        mx = +pa[1] + x;
	        my = +pa[2] + y;
	      default:
	        for (var j = 1, jj = pa.length; j < jj; j++) {
	          r[j] = +pa[j] + ((j % 2) ? x : y);
	        }
	      }
	    } else {
	      for (var k = 0, kk = pa.length; k < kk; k++) {
	        r[k] = pa[k];
	      }
	    }
	    pa0 = pa0.toUpperCase();

	    switch (r[0]) {
	    case 'Z':
	      x = +mx;
	      y = +my;
	      break;
	    case 'H':
	      x = r[1];
	      break;
	    case 'V':
	      y = r[1];
	      break;
	    case 'M':
	      mx = r[r.length - 2];
	      my = r[r.length - 1];
	    default:
	      x = r[r.length - 2];
	      y = r[r.length - 1];
	    }
	  }

	  res.toString = pathToString;
	  pth.abs = pathClone(res);

	  return res;
	}

	function isLine(bez) {
	  return (
	    bez[0] === bez[2] &&
	    bez[1] === bez[3] &&
	    bez[4] === bez[6] &&
	    bez[5] === bez[7]
	  );
	}

	function lineToCurve(x1, y1, x2, y2) {
	  return [
	    x1, y1, x2,
	    y2, x2, y2
	  ];
	}

	function qubicToCurve(x1, y1, ax, ay, x2, y2) {
	  var _13 = 1 / 3,
	      _23 = 2 / 3;

	  return [
	    _13 * x1 + _23 * ax,
	    _13 * y1 + _23 * ay,
	    _13 * x2 + _23 * ax,
	    _13 * y2 + _23 * ay,
	    x2,
	    y2
	  ];
	}

	function arcToCurve(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {

	  // for more information of where this math came from visit:
	  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
	  var _120 = PI * 120 / 180,
	      rad = PI / 180 * (+angle || 0),
	      res = [],
	      xy,
	      rotate = cacher(function(x, y, rad) {
	        var X = x * math.cos(rad) - y * math.sin(rad),
	            Y = x * math.sin(rad) + y * math.cos(rad);

	        return { x: X, y: Y };
	      });

	  if (!recursive) {
	    xy = rotate(x1, y1, -rad);
	    x1 = xy.x;
	    y1 = xy.y;
	    xy = rotate(x2, y2, -rad);
	    x2 = xy.x;
	    y2 = xy.y;

	    var x = (x1 - x2) / 2,
	        y = (y1 - y2) / 2;

	    var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);

	    if (h > 1) {
	      h = math.sqrt(h);
	      rx = h * rx;
	      ry = h * ry;
	    }

	    var rx2 = rx * rx,
	        ry2 = ry * ry,
	        k = (large_arc_flag == sweep_flag ? -1 : 1) *
	            math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),
	        cx = k * rx * y / ry + (x1 + x2) / 2,
	        cy = k * -ry * x / rx + (y1 + y2) / 2,
	        f1 = math.asin(((y1 - cy) / ry).toFixed(9)),
	        f2 = math.asin(((y2 - cy) / ry).toFixed(9));

	    f1 = x1 < cx ? PI - f1 : f1;
	    f2 = x2 < cx ? PI - f2 : f2;
	    f1 < 0 && (f1 = PI * 2 + f1);
	    f2 < 0 && (f2 = PI * 2 + f2);

	    if (sweep_flag && f1 > f2) {
	      f1 = f1 - PI * 2;
	    }
	    if (!sweep_flag && f2 > f1) {
	      f2 = f2 - PI * 2;
	    }
	  } else {
	    f1 = recursive[0];
	    f2 = recursive[1];
	    cx = recursive[2];
	    cy = recursive[3];
	  }

	  var df = f2 - f1;

	  if (abs(df) > _120) {
	    var f2old = f2,
	        x2old = x2,
	        y2old = y2;

	    f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
	    x2 = cx + rx * math.cos(f2);
	    y2 = cy + ry * math.sin(f2);
	    res = arcToCurve(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
	  }

	  df = f2 - f1;

	  var c1 = math.cos(f1),
	      s1 = math.sin(f1),
	      c2 = math.cos(f2),
	      s2 = math.sin(f2),
	      t = math.tan(df / 4),
	      hx = 4 / 3 * rx * t,
	      hy = 4 / 3 * ry * t,
	      m1 = [x1, y1],
	      m2 = [x1 + hx * s1, y1 - hy * c1],
	      m3 = [x2 + hx * s2, y2 - hy * c2],
	      m4 = [x2, y2];

	  m2[0] = 2 * m1[0] - m2[0];
	  m2[1] = 2 * m1[1] - m2[1];

	  if (recursive) {
	    return [m2, m3, m4].concat(res);
	  } else {
	    res = [m2, m3, m4].concat(res).join().split(',');
	    var newres = [];

	    for (var i = 0, ii = res.length; i < ii; i++) {
	      newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
	    }

	    return newres;
	  }
	}

	// Returns bounding box of cubic bezier curve.
	// Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
	// Original version: NISHIO Hirokazu
	// Modifications: https://github.com/timo22345
	function curveBBox(x0, y0, x1, y1, x2, y2, x3, y3) {
	  var tvalues = [],
	      bounds = [[], []],
	      a, b, c, t, t1, t2, b2ac, sqrtb2ac;

	  for (var i = 0; i < 2; ++i) {

	    if (i == 0) {
	      b = 6 * x0 - 12 * x1 + 6 * x2;
	      a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
	      c = 3 * x1 - 3 * x0;
	    } else {
	      b = 6 * y0 - 12 * y1 + 6 * y2;
	      a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
	      c = 3 * y1 - 3 * y0;
	    }

	    if (abs(a) < 1e-12) {

	      if (abs(b) < 1e-12) {
	        continue;
	      }

	      t = -c / b;

	      if (0 < t && t < 1) {
	        tvalues.push(t);
	      }

	      continue;
	    }

	    b2ac = b * b - 4 * c * a;
	    sqrtb2ac = math.sqrt(b2ac);

	    if (b2ac < 0) {
	      continue;
	    }

	    t1 = (-b + sqrtb2ac) / (2 * a);

	    if (0 < t1 && t1 < 1) {
	      tvalues.push(t1);
	    }

	    t2 = (-b - sqrtb2ac) / (2 * a);

	    if (0 < t2 && t2 < 1) {
	      tvalues.push(t2);
	    }
	  }

	  var j = tvalues.length,
	      jlen = j,
	      mt;

	  while (j--) {
	    t = tvalues[j];
	    mt = 1 - t;
	    bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);
	    bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);
	  }

	  bounds[0][jlen] = x0;
	  bounds[1][jlen] = y0;
	  bounds[0][jlen + 1] = x3;
	  bounds[1][jlen + 1] = y3;
	  bounds[0].length = bounds[1].length = jlen + 2;

	  return {
	    x0: mmin.apply(0, bounds[0]),
	    y0: mmin.apply(0, bounds[1]),
	    x1: mmax.apply(0, bounds[0]),
	    y1: mmax.apply(0, bounds[1])
	  };
	}

	function pathToCurve(path) {

	  var pth = paths(path);

	  // return cached curve, if existing
	  if (pth.curve) {
	    return pathClone(pth.curve);
	  }

	  var curvedPath = pathToAbsolute(path),
	      attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },
	      processPath = function(path, d, pathCommand) {
	        var nx, ny;

	        if (!path) {
	          return ['C', d.x, d.y, d.x, d.y, d.x, d.y];
	        }

	        !(path[0] in { T: 1, Q: 1 }) && (d.qx = d.qy = null);

	        switch (path[0]) {
	        case 'M':
	          d.X = path[1];
	          d.Y = path[2];
	          break;
	        case 'A':
	          path = ['C'].concat(arcToCurve.apply(0, [d.x, d.y].concat(path.slice(1))));
	          break;
	        case 'S':
	          if (pathCommand == 'C' || pathCommand == 'S') {
	            // In 'S' case we have to take into account, if the previous command is C/S.
	            nx = d.x * 2 - d.bx;
	            // And reflect the previous
	            ny = d.y * 2 - d.by;
	            // command's control point relative to the current point.
	          }
	          else {
	            // or some else or nothing
	            nx = d.x;
	            ny = d.y;
	          }
	          path = ['C', nx, ny].concat(path.slice(1));
	          break;
	        case 'T':
	          if (pathCommand == 'Q' || pathCommand == 'T') {
	            // In 'T' case we have to take into account, if the previous command is Q/T.
	            d.qx = d.x * 2 - d.qx;
	            // And make a reflection similar
	            d.qy = d.y * 2 - d.qy;
	            // to case 'S'.
	          }
	          else {
	            // or something else or nothing
	            d.qx = d.x;
	            d.qy = d.y;
	          }
	          path = ['C'].concat(qubicToCurve(d.x, d.y, d.qx, d.qy, path[1], path[2]));
	          break;
	        case 'Q':
	          d.qx = path[1];
	          d.qy = path[2];
	          path = ['C'].concat(qubicToCurve(d.x, d.y, path[1], path[2], path[3], path[4]));
	          break;
	        case 'L':
	          path = ['C'].concat(lineToCurve(d.x, d.y, path[1], path[2]));
	          break;
	        case 'H':
	          path = ['C'].concat(lineToCurve(d.x, d.y, path[1], d.y));
	          break;
	        case 'V':
	          path = ['C'].concat(lineToCurve(d.x, d.y, d.x, path[1]));
	          break;
	        case 'Z':
	          path = ['C'].concat(lineToCurve(d.x, d.y, d.X, d.Y));
	          break;
	        }

	        return path;
	      },

	      fixArc = function(pp, i) {

	        if (pp[i].length > 7) {
	          pp[i].shift();
	          var pi = pp[i];

	          while (pi.length) {
	            pathCommands[i] = 'A'; // if created multiple C:s, their original seg is saved
	            pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));
	          }

	          pp.splice(i, 1);
	          ii = curvedPath.length;
	        }
	      },

	      pathCommands = [], // path commands of original path p
	      pfirst = '', // temporary holder for original path command
	      pathCommand = ''; // holder for previous path command of original path

	  for (var i = 0, ii = curvedPath.length; i < ii; i++) {
	    curvedPath[i] && (pfirst = curvedPath[i][0]); // save current path command

	    if (pfirst != 'C') // C is not saved yet, because it may be result of conversion
	    {
	      pathCommands[i] = pfirst; // Save current path command
	      i && (pathCommand = pathCommands[i - 1]); // Get previous path command pathCommand
	    }
	    curvedPath[i] = processPath(curvedPath[i], attrs, pathCommand); // Previous path command is inputted to processPath

	    if (pathCommands[i] != 'A' && pfirst == 'C') pathCommands[i] = 'C'; // A is the only command
	    // which may produce multiple C:s
	    // so we have to make sure that C is also C in original path

	    fixArc(curvedPath, i); // fixArc adds also the right amount of A:s to pathCommands

	    var seg = curvedPath[i],
	        seglen = seg.length;

	    attrs.x = seg[seglen - 2];
	    attrs.y = seg[seglen - 1];
	    attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;
	    attrs.by = toFloat(seg[seglen - 3]) || attrs.y;
	  }

	  // cache curve
	  pth.curve = pathClone(curvedPath);

	  return curvedPath;
	}

	var intersect = findPathIntersections;

	function roundBounds(bounds) {
	  return {
	    x: Math.round(bounds.x),
	    y: Math.round(bounds.y),
	    width: Math.round(bounds.width),
	    height: Math.round(bounds.height)
	  };
	}


	function roundPoint(point) {

	  return {
	    x: Math.round(point.x),
	    y: Math.round(point.y)
	  };
	}


	/**
	 * Convert the given bounds to a { top, left, bottom, right } descriptor.
	 *
	 * @param {Bounds|Point} bounds
	 *
	 * @return {Object}
	 */
	function asTRBL(bounds) {
	  return {
	    top: bounds.y,
	    right: bounds.x + (bounds.width || 0),
	    bottom: bounds.y + (bounds.height || 0),
	    left: bounds.x
	  };
	}


	/**
	 * Convert a { top, left, bottom, right } to an objects bounds.
	 *
	 * @param {Object} trbl
	 *
	 * @return {Bounds}
	 */
	function asBounds(trbl) {
	  return {
	    x: trbl.left,
	    y: trbl.top,
	    width: trbl.right - trbl.left,
	    height: trbl.bottom - trbl.top
	  };
	}


	/**
	 * Get the mid of the given bounds or point.
	 *
	 * @param {Bounds|Point} bounds
	 *
	 * @return {Point}
	 */
	function getMid(bounds) {
	  return roundPoint({
	    x: bounds.x + (bounds.width || 0) / 2,
	    y: bounds.y + (bounds.height || 0) / 2
	  });
	}


	// orientation utils //////////////////////

	/**
	 * Get orientation of the given rectangle with respect to
	 * the reference rectangle.
	 *
	 * A padding (positive or negative) may be passed to influence
	 * horizontal / vertical orientation and intersection.
	 *
	 * @param {Bounds} rect
	 * @param {Bounds} reference
	 * @param {Point|number} padding
	 *
	 * @return {string} the orientation; one of top, top-left, left, ..., bottom, right or intersect.
	 */
	function getOrientation(rect, reference, padding) {

	  padding = padding || 0;

	  // make sure we can use an object, too
	  // for individual { x, y } padding
	  if (!isObject(padding)) {
	    padding = { x: padding, y: padding };
	  }


	  var rectOrientation = asTRBL(rect),
	      referenceOrientation = asTRBL(reference);

	  var top = rectOrientation.bottom + padding.y <= referenceOrientation.top,
	      right = rectOrientation.left - padding.x >= referenceOrientation.right,
	      bottom = rectOrientation.top - padding.y >= referenceOrientation.bottom,
	      left = rectOrientation.right + padding.x <= referenceOrientation.left;

	  var vertical = top ? 'top' : (bottom ? 'bottom' : null),
	      horizontal = left ? 'left' : (right ? 'right' : null);

	  if (horizontal && vertical) {
	    return vertical + '-' + horizontal;
	  } else {
	    return horizontal || vertical || 'intersect';
	  }
	}


	// intersection utils //////////////////////

	/**
	 * Get intersection between an element and a line path.
	 *
	 * @param {PathDef} elementPath
	 * @param {PathDef} linePath
	 * @param {boolean} cropStart crop from start or end
	 *
	 * @return {Point}
	 */
	function getElementLineIntersection(elementPath, linePath, cropStart) {

	  var intersections = getIntersections(elementPath, linePath);

	  // recognize intersections
	  // only one -> choose
	  // two close together -> choose first
	  // two or more distinct -> pull out appropriate one
	  // none -> ok (fallback to point itself)
	  if (intersections.length === 1) {
	    return roundPoint(intersections[0]);
	  } else if (intersections.length === 2 && pointDistance(intersections[0], intersections[1]) < 1) {
	    return roundPoint(intersections[0]);
	  } else if (intersections.length > 1) {

	    // sort by intersections based on connection segment +
	    // distance from start
	    intersections = sortBy(intersections, function(i) {
	      var distance = Math.floor(i.t2 * 100) || 1;

	      distance = 100 - distance;

	      distance = (distance < 10 ? '0' : '') + distance;

	      // create a sort string that makes sure we sort
	      // line segment ASC + line segment position DESC (for cropStart)
	      // line segment ASC + line segment position ASC (for cropEnd)
	      return i.segment2 + '#' + distance;
	    });

	    return roundPoint(intersections[cropStart ? 0 : intersections.length - 1]);
	  }

	  return null;
	}


	function getIntersections(a, b) {
	  return intersect(a, b);
	}


	function filterRedundantWaypoints(waypoints) {

	  // alter copy of waypoints, not original
	  waypoints = waypoints.slice();

	  var idx = 0,
	      point,
	      previousPoint,
	      nextPoint;

	  while (waypoints[idx]) {
	    point = waypoints[idx];
	    previousPoint = waypoints[idx - 1];
	    nextPoint = waypoints[idx + 1];

	    if (pointDistance(point, nextPoint) === 0 ||
	        pointsOnLine(previousPoint, nextPoint, point)) {

	      // remove point, if overlapping with {nextPoint}
	      // or on line with {previousPoint} -> {point} -> {nextPoint}
	      waypoints.splice(idx, 1);
	    } else {
	      idx++;
	    }
	  }

	  return waypoints;
	}

	function elementData(semantic, attrs) {
	  return assign({
	    id: semantic.id,
	    type: semantic.$type,
	    businessObject: semantic
	  }, attrs);
	}

	function getWaypoints(bo, source, target) {

	  var waypoints = bo.di.waypoint;

	  if (!waypoints || waypoints.length < 2) {
	    return [ getMid(source), getMid(target) ];
	  }

	  return waypoints.map(function(p) {
	    return { x: p.x, y: p.y };
	  });
	}

	function notYetDrawn(translate, semantic, refSemantic, property) {
	  return new Error(translate('element {element} referenced by {referenced}#{property} not yet drawn', {
	    element: elementToString(refSemantic),
	    referenced: elementToString(semantic),
	    property: property
	  }));
	}


	/**
	 * An importer that adds bpmn elements to the canvas
	 *
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 * @param {ElementFactory} elementFactory
	 * @param {ElementRegistry} elementRegistry
	 * @param {Function} translate
	 * @param {TextRenderer} textRenderer
	 */
	function BpmnImporter(
	    eventBus, canvas, elementFactory,
	    elementRegistry, translate, textRenderer) {

	  this._eventBus = eventBus;
	  this._canvas = canvas;
	  this._elementFactory = elementFactory;
	  this._elementRegistry = elementRegistry;
	  this._translate = translate;
	  this._textRenderer = textRenderer;
	}

	BpmnImporter.$inject = [
	  'eventBus',
	  'canvas',
	  'elementFactory',
	  'elementRegistry',
	  'translate',
	  'textRenderer'
	];


	/**
	 * Add bpmn element (semantic) to the canvas onto the
	 * specified parent shape.
	 */
	BpmnImporter.prototype.add = function(semantic, parentElement) {

	  var di = semantic.di,
	      element,
	      translate = this._translate,
	      hidden;

	  var parentIndex;

	  // ROOT ELEMENT
	  // handle the special case that we deal with a
	  // invisible root element (process or collaboration)
	  if (is$1(di, 'bpmndi:BPMNPlane')) {

	    // add a virtual element (not being drawn)
	    element = this._elementFactory.createRoot(elementData(semantic));

	    this._canvas.setRootElement(element);
	  }

	  // SHAPE
	  else if (is$1(di, 'bpmndi:BPMNShape')) {

	    var collapsed = !isExpanded(semantic),
	        isFrame = isFrameElement$1(semantic);
	    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);

	    var bounds = semantic.di.bounds;

	    element = this._elementFactory.createShape(elementData(semantic, {
	      collapsed: collapsed,
	      hidden: hidden,
	      x: Math.round(bounds.x),
	      y: Math.round(bounds.y),
	      width: Math.round(bounds.width),
	      height: Math.round(bounds.height),
	      isFrame: isFrame
	    }));

	    if (is$1(semantic, 'bpmn:BoundaryEvent')) {
	      this._attachBoundary(semantic, element);
	    }

	    // insert lanes behind other flow nodes (cf. #727)
	    if (is$1(semantic, 'bpmn:Lane')) {
	      parentIndex = 0;
	    }

	    if (is$1(semantic, 'bpmn:DataStoreReference')) {

	      // check whether data store is inside our outside of its semantic parent
	      if (!isPointInsideBBox$1(parentElement, getMid(bounds))) {
	        parentElement = this._canvas.getRootElement();
	      }
	    }

	    this._canvas.addShape(element, parentElement, parentIndex);
	  }

	  // CONNECTION
	  else if (is$1(di, 'bpmndi:BPMNEdge')) {

	    var source = this._getSource(semantic),
	        target = this._getTarget(semantic);

	    hidden = parentElement && (parentElement.hidden || parentElement.collapsed);

	    element = this._elementFactory.createConnection(elementData(semantic, {
	      hidden: hidden,
	      source: source,
	      target: target,
	      waypoints: getWaypoints(semantic, source, target)
	    }));

	    if (is$1(semantic, 'bpmn:DataAssociation')) {

	      // render always on top; this ensures DataAssociations
	      // are rendered correctly across different "hacks" people
	      // love to model such as cross participant / sub process
	      // associations
	      parentElement = null;
	    }

	    // insert sequence flows behind other flow nodes (cf. #727)
	    if (is$1(semantic, 'bpmn:SequenceFlow')) {
	      parentIndex = 0;
	    }

	    this._canvas.addConnection(element, parentElement, parentIndex);
	  } else {
	    throw new Error(translate('unknown di {di} for element {semantic}', {
	      di: elementToString(di),
	      semantic: elementToString(semantic)
	    }));
	  }

	  // (optional) LABEL
	  if (isLabelExternal(semantic) && getLabel(element)) {
	    this.addLabel(semantic, element);
	  }


	  this._eventBus.fire('bpmnElement.added', { element: element });

	  return element;
	};


	/**
	 * Attach the boundary element to the given host
	 *
	 * @param {ModdleElement} boundarySemantic
	 * @param {djs.model.Base} boundaryElement
	 */
	BpmnImporter.prototype._attachBoundary = function(boundarySemantic, boundaryElement) {
	  var translate = this._translate;
	  var hostSemantic = boundarySemantic.attachedToRef;

	  if (!hostSemantic) {
	    throw new Error(translate('missing {semantic}#attachedToRef', {
	      semantic: elementToString(boundarySemantic)
	    }));
	  }

	  var host = this._elementRegistry.get(hostSemantic.id),
	      attachers = host && host.attachers;

	  if (!host) {
	    throw notYetDrawn(translate, boundarySemantic, hostSemantic, 'attachedToRef');
	  }

	  // wire element.host <> host.attachers
	  boundaryElement.host = host;

	  if (!attachers) {
	    host.attachers = attachers = [];
	  }

	  if (attachers.indexOf(boundaryElement) === -1) {
	    attachers.push(boundaryElement);
	  }
	};


	/**
	 * add label for an element
	 */
	BpmnImporter.prototype.addLabel = function(semantic, element) {
	  var bounds,
	      text,
	      label;

	  bounds = getExternalLabelBounds(semantic, element);

	  text = getLabel(element);

	  if (text) {

	    // get corrected bounds from actual layouted text
	    bounds = this._textRenderer.getExternalLabelBounds(bounds, text);
	  }

	  label = this._elementFactory.createLabel(elementData(semantic, {
	    id: semantic.id + '_label',
	    labelTarget: element,
	    type: 'label',
	    hidden: element.hidden || !getLabel(element),
	    x: Math.round(bounds.x),
	    y: Math.round(bounds.y),
	    width: Math.round(bounds.width),
	    height: Math.round(bounds.height)
	  }));

	  return this._canvas.addShape(label, element.parent);
	};

	/**
	 * Return the drawn connection end based on the given side.
	 *
	 * @throws {Error} if the end is not yet drawn
	 */
	BpmnImporter.prototype._getEnd = function(semantic, side) {

	  var element,
	      refSemantic,
	      type = semantic.$type,
	      translate = this._translate;

	  refSemantic = semantic[side + 'Ref'];

	  // handle mysterious isMany DataAssociation#sourceRef
	  if (side === 'source' && type === 'bpmn:DataInputAssociation') {
	    refSemantic = refSemantic && refSemantic[0];
	  }

	  // fix source / target for DataInputAssociation / DataOutputAssociation
	  if (side === 'source' && type === 'bpmn:DataOutputAssociation' ||
	      side === 'target' && type === 'bpmn:DataInputAssociation') {

	    refSemantic = semantic.$parent;
	  }

	  element = refSemantic && this._getElement(refSemantic);

	  if (element) {
	    return element;
	  }

	  if (refSemantic) {
	    throw notYetDrawn(translate, semantic, refSemantic, side + 'Ref');
	  } else {
	    throw new Error(translate('{semantic}#{side} Ref not specified', {
	      semantic: elementToString(semantic),
	      side: side
	    }));
	  }
	};

	BpmnImporter.prototype._getSource = function(semantic) {
	  return this._getEnd(semantic, 'source');
	};

	BpmnImporter.prototype._getTarget = function(semantic) {
	  return this._getEnd(semantic, 'target');
	};


	BpmnImporter.prototype._getElement = function(semantic) {
	  return this._elementRegistry.get(semantic.id);
	};


	// helpers ////////////////////

	function isPointInsideBBox$1(bbox, point) {
	  var x = point.x,
	      y = point.y;

	  return x >= bbox.x &&
	    x <= bbox.x + bbox.width &&
	    y >= bbox.y &&
	    y <= bbox.y + bbox.height;
	}

	function isFrameElement$1(semantic) {
	  return is$1(semantic, 'bpmn:Group');
	}

	var ImportModule = {
	  __depends__: [
	    translate$2
	  ],
	  bpmnImporter: [ 'type', BpmnImporter ]
	};

	var CoreModule$1 = {
	  __depends__: [
	    DrawModule$1,
	    ImportModule
	  ]
	};

	function __stopPropagation(event) {
	  if (!event || typeof event.stopPropagation !== 'function') {
	    return;
	  }

	  event.stopPropagation();
	}


	function getOriginal(event) {
	  return event.originalEvent || event.srcEvent;
	}


	function stopPropagation(event, immediate) {
	  __stopPropagation(event);
	  __stopPropagation(getOriginal(event));
	}


	function toPoint(event) {

	  if (event.pointers && event.pointers.length) {
	    event = event.pointers[0];
	  }

	  if (event.touches && event.touches.length) {
	    event = event.touches[0];
	  }

	  return event ? {
	    x: event.clientX,
	    y: event.clientY
	  } : null;
	}

	function isMac() {
	  return (/mac/i).test(navigator.platform);
	}

	function isButton(event, button) {
	  return (getOriginal(event) || event).button === button;
	}

	function isPrimaryButton(event) {

	  // button === 0 -> left áka primary mouse button
	  return isButton(event, 0);
	}

	function isAuxiliaryButton(event) {

	  // button === 1 -> auxiliary áka wheel button
	  return isButton(event, 1);
	}

	function hasPrimaryModifier(event) {
	  var originalEvent = getOriginal(event) || event;

	  if (!isPrimaryButton(event)) {
	    return false;
	  }

	  // Use cmd as primary modifier key for mac OS
	  if (isMac()) {
	    return originalEvent.metaKey;
	  } else {
	    return originalEvent.ctrlKey;
	  }
	}


	function hasSecondaryModifier(event) {
	  var originalEvent = getOriginal(event) || event;

	  return isPrimaryButton(event) && originalEvent.shiftKey;
	}

	function allowAll(event) { return true; }

	function allowPrimaryAndAuxiliary(event) {
	  return isPrimaryButton(event) || isAuxiliaryButton(event);
	}

	var LOW_PRIORITY = 500;


	/**
	 * A plugin that provides interaction events for diagram elements.
	 *
	 * It emits the following events:
	 *
	 *   * element.click
	 *   * element.contextmenu
	 *   * element.dblclick
	 *   * element.hover
	 *   * element.mousedown
	 *   * element.mousemove
	 *   * element.mouseup
	 *   * element.out
	 *
	 * Each event is a tuple { element, gfx, originalEvent }.
	 *
	 * Canceling the event via Event#preventDefault()
	 * prevents the original DOM operation.
	 *
	 * @param {EventBus} eventBus
	 */
	function InteractionEvents(eventBus, elementRegistry, styles) {

	  var self = this;

	  /**
	   * Fire an interaction event.
	   *
	   * @param {string} type local event name, e.g. element.click.
	   * @param {DOMEvent} event native event
	   * @param {djs.model.Base} [element] the diagram element to emit the event on;
	   *                                   defaults to the event target
	   */
	  function fire(type, event, element) {

	    if (isIgnored(type, event)) {
	      return;
	    }

	    var target, gfx, returnValue;

	    if (!element) {
	      target = event.delegateTarget || event.target;

	      if (target) {
	        gfx = target;
	        element = elementRegistry.get(gfx);
	      }
	    } else {
	      gfx = elementRegistry.getGraphics(element);
	    }

	    if (!gfx || !element) {
	      return;
	    }

	    returnValue = eventBus.fire(type, {
	      element: element,
	      gfx: gfx,
	      originalEvent: event
	    });

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  }

	  // TODO(nikku): document this
	  var handlers = {};

	  function mouseHandler(localEventName) {
	    return handlers[localEventName];
	  }

	  function isIgnored(localEventName, event) {

	    var filter = ignoredFilters[localEventName] || isPrimaryButton;

	    // only react on left mouse button interactions
	    // except for interaction events that are enabled
	    // for secundary mouse button
	    return !filter(event);
	  }

	  var bindings = {
	    click: 'element.click',
	    contextmenu: 'element.contextmenu',
	    dblclick: 'element.dblclick',
	    mousedown: 'element.mousedown',
	    mousemove: 'element.mousemove',
	    mouseover: 'element.hover',
	    mouseout: 'element.out',
	    mouseup: 'element.mouseup',
	  };

	  var ignoredFilters = {
	    'element.contextmenu': allowAll,
	    'element.mousedown': allowPrimaryAndAuxiliary,
	    'element.mouseup': allowPrimaryAndAuxiliary,
	    'element.click': allowPrimaryAndAuxiliary,
	    'element.dblclick': allowPrimaryAndAuxiliary
	  };


	  // manual event trigger //////////

	  /**
	   * Trigger an interaction event (based on a native dom event)
	   * on the target shape or connection.
	   *
	   * @param {string} eventName the name of the triggered DOM event
	   * @param {MouseEvent} event
	   * @param {djs.model.Base} targetElement
	   */
	  function triggerMouseEvent(eventName, event, targetElement) {

	    // i.e. element.mousedown...
	    var localEventName = bindings[eventName];

	    if (!localEventName) {
	      throw new Error('unmapped DOM event name <' + eventName + '>');
	    }

	    return fire(localEventName, event, targetElement);
	  }


	  var ELEMENT_SELECTOR = 'svg, .djs-element';

	  // event handling ///////

	  function registerEvent(node, event, localEvent, ignoredFilter) {

	    var handler = handlers[localEvent] = function(event) {
	      fire(localEvent, event);
	    };

	    if (ignoredFilter) {
	      ignoredFilters[localEvent] = ignoredFilter;
	    }

	    handler.$delegate = delegate.bind(node, ELEMENT_SELECTOR, event, handler);
	  }

	  function unregisterEvent(node, event, localEvent) {

	    var handler = mouseHandler(localEvent);

	    if (!handler) {
	      return;
	    }

	    delegate.unbind(node, event, handler.$delegate);
	  }

	  function registerEvents(svg) {
	    forEach(bindings, function(val, key) {
	      registerEvent(svg, key, val);
	    });
	  }

	  function unregisterEvents(svg) {
	    forEach(bindings, function(val, key) {
	      unregisterEvent(svg, key, val);
	    });
	  }

	  eventBus.on('canvas.destroy', function(event) {
	    unregisterEvents(event.svg);
	  });

	  eventBus.on('canvas.init', function(event) {
	    registerEvents(event.svg);
	  });


	  // hit box updating ////////////////

	  eventBus.on([ 'shape.added', 'connection.added' ], function(event) {
	    var element = event.element,
	        gfx = event.gfx;

	    eventBus.fire('interactionEvents.createHit', { element: element, gfx: gfx });
	  });

	  // Update djs-hit on change.
	  // A low priortity is necessary, because djs-hit of labels has to be updated
	  // after the label bounds have been updated in the renderer.
	  eventBus.on([
	    'shape.changed',
	    'connection.changed'
	  ], LOW_PRIORITY, function(event) {

	    var element = event.element,
	        gfx = event.gfx;

	    eventBus.fire('interactionEvents.updateHit', { element: element, gfx: gfx });
	  });

	  eventBus.on('interactionEvents.createHit', LOW_PRIORITY, function(event) {
	    var element = event.element,
	        gfx = event.gfx;

	    self.createDefaultHit(element, gfx);
	  });

	  eventBus.on('interactionEvents.updateHit', function(event) {
	    var element = event.element,
	        gfx = event.gfx;

	    self.updateDefaultHit(element, gfx);
	  });


	  // hit styles ////////////

	  var STROKE_HIT_STYLE = createHitStyle('djs-hit djs-hit-stroke');

	  var CLICK_STROKE_HIT_STYLE = createHitStyle('djs-hit djs-hit-click-stroke');

	  var ALL_HIT_STYLE = createHitStyle('djs-hit djs-hit-all');

	  var HIT_TYPES = {
	    'all': ALL_HIT_STYLE,
	    'click-stroke': CLICK_STROKE_HIT_STYLE,
	    'stroke': STROKE_HIT_STYLE
	  };

	  function createHitStyle(classNames, attrs) {

	    attrs = assign({
	      stroke: 'white',
	      strokeWidth: 15
	    }, attrs || {});

	    return styles.cls(classNames, [ 'no-fill', 'no-border' ], attrs);
	  }


	  // style helpers ///////////////

	  function applyStyle(hit, type) {

	    var attrs = HIT_TYPES[type];

	    if (!attrs) {
	      throw new Error('invalid hit type <' + type + '>');
	    }

	    attr$1(hit, attrs);

	    return hit;
	  }

	  function appendHit(gfx, hit) {
	    append(gfx, hit);
	  }


	  // API

	  /**
	   * Remove hints on the given graphics.
	   *
	   * @param {SVGElement} gfx
	   */
	  this.removeHits = function(gfx) {
	    var hits = all('.djs-hit', gfx);

	    forEach(hits, remove$1);
	  };

	  /**
	   * Create default hit for the given element.
	   *
	   * @param {djs.model.Base} element
	   * @param {SVGElement} gfx
	   *
	   * @return {SVGElement} created hit
	   */
	  this.createDefaultHit = function(element, gfx) {
	    var waypoints = element.waypoints,
	        isFrame = element.isFrame,
	        boxType;

	    if (waypoints) {
	      return this.createWaypointsHit(gfx, waypoints);
	    } else {

	      boxType = isFrame ? 'stroke' : 'all';

	      return this.createBoxHit(gfx, boxType, {
	        width: element.width,
	        height: element.height
	      });
	    }
	  };

	  /**
	   * Create hits for the given waypoints.
	   *
	   * @param {SVGElement} gfx
	   * @param {Array<Point>} waypoints
	   *
	   * @return {SVGElement}
	   */
	  this.createWaypointsHit = function(gfx, waypoints) {

	    var hit = createLine(waypoints);

	    applyStyle(hit, 'stroke');

	    appendHit(gfx, hit);

	    return hit;
	  };

	  /**
	   * Create hits for a box.
	   *
	   * @param {SVGElement} gfx
	   * @param {string} hitType
	   * @param {Object} attrs
	   *
	   * @return {SVGElement}
	   */
	  this.createBoxHit = function(gfx, type, attrs) {

	    attrs = assign({
	      x: 0,
	      y: 0
	    }, attrs);

	    var hit = create('rect');

	    applyStyle(hit, type);

	    attr$1(hit, attrs);

	    appendHit(gfx, hit);

	    return hit;
	  };

	  /**
	   * Update default hit of the element.
	   *
	   * @param  {djs.model.Base} element
	   * @param  {SVGElement} gfx
	   *
	   * @return {SVGElement} updated hit
	   */
	  this.updateDefaultHit = function(element, gfx) {

	    var hit = query('.djs-hit', gfx);

	    if (!hit) {
	      return;
	    }

	    if (element.waypoints) {
	      updateLine(hit, element.waypoints);
	    } else {
	      attr$1(hit, {
	        width: element.width,
	        height: element.height
	      });
	    }

	    return hit;
	  };

	  this.fire = fire;

	  this.triggerMouseEvent = triggerMouseEvent;

	  this.mouseHandler = mouseHandler;

	  this.registerEvent = registerEvent;
	  this.unregisterEvent = unregisterEvent;
	}


	InteractionEvents.$inject = [
	  'eventBus',
	  'elementRegistry',
	  'styles'
	];


	/**
	 * An event indicating that the mouse hovered over an element
	 *
	 * @event element.hover
	 *
	 * @type {Object}
	 * @property {djs.model.Base} element
	 * @property {SVGElement} gfx
	 * @property {Event} originalEvent
	 */

	/**
	 * An event indicating that the mouse has left an element
	 *
	 * @event element.out
	 *
	 * @type {Object}
	 * @property {djs.model.Base} element
	 * @property {SVGElement} gfx
	 * @property {Event} originalEvent
	 */

	/**
	 * An event indicating that the mouse has clicked an element
	 *
	 * @event element.click
	 *
	 * @type {Object}
	 * @property {djs.model.Base} element
	 * @property {SVGElement} gfx
	 * @property {Event} originalEvent
	 */

	/**
	 * An event indicating that the mouse has double clicked an element
	 *
	 * @event element.dblclick
	 *
	 * @type {Object}
	 * @property {djs.model.Base} element
	 * @property {SVGElement} gfx
	 * @property {Event} originalEvent
	 */

	/**
	 * An event indicating that the mouse has gone down on an element.
	 *
	 * @event element.mousedown
	 *
	 * @type {Object}
	 * @property {djs.model.Base} element
	 * @property {SVGElement} gfx
	 * @property {Event} originalEvent
	 */

	/**
	 * An event indicating that the mouse has gone up on an element.
	 *
	 * @event element.mouseup
	 *
	 * @type {Object}
	 * @property {djs.model.Base} element
	 * @property {SVGElement} gfx
	 * @property {Event} originalEvent
	 */

	/**
	 * An event indicating that the context menu action is triggered
	 * via mouse or touch controls.
	 *
	 * @event element.contextmenu
	 *
	 * @type {Object}
	 * @property {djs.model.Base} element
	 * @property {SVGElement} gfx
	 * @property {Event} originalEvent
	 */

	var InteractionEventsModule = {
	  __init__: [ 'interactionEvents' ],
	  interactionEvents: [ 'type', InteractionEvents ]
	};

	var LOW_PRIORITY$1 = 500;


	/**
	 * @class
	 *
	 * A plugin that adds an outline to shapes and connections that may be activated and styled
	 * via CSS classes.
	 *
	 * @param {EventBus} eventBus
	 * @param {Styles} styles
	 * @param {ElementRegistry} elementRegistry
	 */
	function Outline(eventBus, styles, elementRegistry) {

	  this.offset = 6;

	  var OUTLINE_STYLE = styles.cls('djs-outline', [ 'no-fill' ]);

	  var self = this;

	  function createOutline(gfx, bounds) {
	    var outline = create('rect');

	    attr$1(outline, assign({
	      x: 10,
	      y: 10,
	      width: 100,
	      height: 100
	    }, OUTLINE_STYLE));

	    append(gfx, outline);

	    return outline;
	  }

	  // A low priortity is necessary, because outlines of labels have to be updated
	  // after the label bounds have been updated in the renderer.
	  eventBus.on([ 'shape.added', 'shape.changed' ], LOW_PRIORITY$1, function(event) {
	    var element = event.element,
	        gfx = event.gfx;

	    var outline = query('.djs-outline', gfx);

	    if (!outline) {
	      outline = createOutline(gfx);
	    }

	    self.updateShapeOutline(outline, element);
	  });

	  eventBus.on([ 'connection.added', 'connection.changed' ], function(event) {
	    var element = event.element,
	        gfx = event.gfx;

	    var outline = query('.djs-outline', gfx);

	    if (!outline) {
	      outline = createOutline(gfx);
	    }

	    self.updateConnectionOutline(outline, element);
	  });
	}


	/**
	 * Updates the outline of a shape respecting the dimension of the
	 * element and an outline offset.
	 *
	 * @param  {SVGElement} outline
	 * @param  {djs.model.Base} element
	 */
	Outline.prototype.updateShapeOutline = function(outline, element) {

	  attr$1(outline, {
	    x: -this.offset,
	    y: -this.offset,
	    width: element.width + this.offset * 2,
	    height: element.height + this.offset * 2
	  });

	};


	/**
	 * Updates the outline of a connection respecting the bounding box of
	 * the connection and an outline offset.
	 *
	 * @param  {SVGElement} outline
	 * @param  {djs.model.Base} element
	 */
	Outline.prototype.updateConnectionOutline = function(outline, connection) {

	  var bbox = getBBox(connection);

	  attr$1(outline, {
	    x: bbox.x - this.offset,
	    y: bbox.y - this.offset,
	    width: bbox.width + this.offset * 2,
	    height: bbox.height + this.offset * 2
	  });

	};


	Outline.$inject = ['eventBus', 'styles', 'elementRegistry'];

	var OutlineModule = {
	  __init__: [ 'outline' ],
	  outline: [ 'type', Outline ]
	};

	/**
	 * A service that offers the current selection in a diagram.
	 * Offers the api to control the selection, too.
	 *
	 * @class
	 *
	 * @param {EventBus} eventBus the event bus
	 */
	function Selection(eventBus) {

	  this._eventBus = eventBus;

	  this._selectedElements = [];

	  var self = this;

	  eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {
	    var element = e.element;
	    self.deselect(element);
	  });

	  eventBus.on([ 'diagram.clear' ], function(e) {
	    self.select(null);
	  });
	}

	Selection.$inject = [ 'eventBus' ];


	Selection.prototype.deselect = function(element) {
	  var selectedElements = this._selectedElements;

	  var idx = selectedElements.indexOf(element);

	  if (idx !== -1) {
	    var oldSelection = selectedElements.slice();

	    selectedElements.splice(idx, 1);

	    this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });
	  }
	};


	Selection.prototype.get = function() {
	  return this._selectedElements;
	};

	Selection.prototype.isSelected = function(element) {
	  return this._selectedElements.indexOf(element) !== -1;
	};


	/**
	 * This method selects one or more elements on the diagram.
	 *
	 * By passing an additional add parameter you can decide whether or not the element(s)
	 * should be added to the already existing selection or not.
	 *
	 * @method Selection#select
	 *
	 * @param  {Object|Object[]} elements element or array of elements to be selected
	 * @param  {boolean} [add] whether the element(s) should be appended to the current selection, defaults to false
	 */
	Selection.prototype.select = function(elements, add) {
	  var selectedElements = this._selectedElements,
	      oldSelection = selectedElements.slice();

	  if (!isArray(elements)) {
	    elements = elements ? [ elements ] : [];
	  }

	  // selection may be cleared by passing an empty array or null
	  // to the method
	  if (add) {
	    forEach(elements, function(element) {
	      if (selectedElements.indexOf(element) !== -1) {

	        // already selected
	        return;
	      } else {
	        selectedElements.push(element);
	      }
	    });
	  } else {
	    this._selectedElements = selectedElements = elements.slice();
	  }

	  this._eventBus.fire('selection.changed', { oldSelection: oldSelection, newSelection: selectedElements });
	};

	var MARKER_HOVER = 'hover',
	    MARKER_SELECTED = 'selected';


	/**
	 * A plugin that adds a visible selection UI to shapes and connections
	 * by appending the <code>hover</code> and <code>selected</code> classes to them.
	 *
	 * @class
	 *
	 * Makes elements selectable, too.
	 *
	 * @param {EventBus} events
	 * @param {SelectionService} selection
	 * @param {Canvas} canvas
	 */
	function SelectionVisuals(events, canvas, selection, styles) {

	  this._multiSelectionBox = null;

	  function addMarker(e, cls) {
	    canvas.addMarker(e, cls);
	  }

	  function removeMarker(e, cls) {
	    canvas.removeMarker(e, cls);
	  }

	  events.on('element.hover', function(event) {
	    addMarker(event.element, MARKER_HOVER);
	  });

	  events.on('element.out', function(event) {
	    removeMarker(event.element, MARKER_HOVER);
	  });

	  events.on('selection.changed', function(event) {

	    function deselect(s) {
	      removeMarker(s, MARKER_SELECTED);
	    }

	    function select(s) {
	      addMarker(s, MARKER_SELECTED);
	    }

	    var oldSelection = event.oldSelection,
	        newSelection = event.newSelection;

	    forEach(oldSelection, function(e) {
	      if (newSelection.indexOf(e) === -1) {
	        deselect(e);
	      }
	    });

	    forEach(newSelection, function(e) {
	      if (oldSelection.indexOf(e) === -1) {
	        select(e);
	      }
	    });
	  });
	}

	SelectionVisuals.$inject = [
	  'eventBus',
	  'canvas',
	  'selection',
	  'styles'
	];

	function SelectionBehavior(eventBus, selection, canvas, elementRegistry) {

	  // Select elements on create
	  eventBus.on('create.end', 500, function(event) {
	    var context = event.context,
	        canExecute = context.canExecute,
	        elements = context.elements,
	        hints = context.hints || {},
	        autoSelect = hints.autoSelect;

	    if (canExecute) {
	      if (autoSelect === false) {

	        // Select no elements
	        return;
	      }

	      if (isArray(autoSelect)) {
	        selection.select(autoSelect);
	      } else {

	        // Select all elements by default
	        selection.select(elements.filter(isShown));
	      }
	    }
	  });

	  // Select connection targets on connect
	  eventBus.on('connect.end', 500, function(event) {
	    var context = event.context,
	        canExecute = context.canExecute,
	        hover = context.hover;

	    if (canExecute && hover) {
	      selection.select(hover);
	    }
	  });

	  // Select shapes on move
	  eventBus.on('shape.move.end', 500, function(event) {
	    var previousSelection = event.previousSelection || [];

	    var shape = elementRegistry.get(event.context.shape.id);

	    // Always select main shape on move
	    var isSelected = find(previousSelection, function(selectedShape) {
	      return shape.id === selectedShape.id;
	    });

	    if (!isSelected) {
	      selection.select(shape);
	    }
	  });

	  // Select elements on click
	  eventBus.on('element.click', function(event) {

	    if (!isPrimaryButton(event)) {
	      return;
	    }

	    var element = event.element;

	    if (element === canvas.getRootElement()) {
	      element = null;
	    }

	    var isSelected = selection.isSelected(element),
	        isMultiSelect = selection.get().length > 1;

	    // Add to selection if CTRL or SHIFT pressed
	    var add = hasPrimaryModifier(event) || hasSecondaryModifier(event);

	    if (isSelected && isMultiSelect) {
	      if (add) {

	        // Deselect element
	        return selection.deselect(element);
	      } else {

	        // Select element only
	        return selection.select(element);
	      }
	    } else if (!isSelected) {

	      // Select element
	      selection.select(element, add);
	    } else {

	      // Deselect element
	      selection.deselect(element);
	    }
	  });
	}

	SelectionBehavior.$inject = [
	  'eventBus',
	  'selection',
	  'canvas',
	  'elementRegistry'
	];


	function isShown(element) {
	  return !element.hidden;
	}

	var SelectionModule = {
	  __init__: [ 'selectionVisuals', 'selectionBehavior' ],
	  __depends__: [
	    InteractionEventsModule,
	    OutlineModule
	  ],
	  selection: [ 'type', Selection ],
	  selectionVisuals: [ 'type', SelectionVisuals ],
	  selectionBehavior: [ 'type', SelectionBehavior ]
	};

	/**
	 * Util that provides unique IDs.
	 *
	 * @class djs.util.IdGenerator
	 * @constructor
	 * @memberOf djs.util
	 *
	 * The ids can be customized via a given prefix and contain a random value to avoid collisions.
	 *
	 * @param {string} prefix a prefix to prepend to generated ids (for better readability)
	 */
	function IdGenerator(prefix) {

	  this._counter = 0;
	  this._prefix = (prefix ? prefix + '-' : '') + Math.floor(Math.random() * 1000000000) + '-';
	}

	/**
	 * Returns a next unique ID.
	 *
	 * @method djs.util.IdGenerator#next
	 *
	 * @returns {string} the id
	 */
	IdGenerator.prototype.next = function() {
	  return this._prefix + (++this._counter);
	};

	// document wide unique overlay ids
	var ids = new IdGenerator('ov');

	var LOW_PRIORITY$2 = 500;


	/**
	 * A service that allows users to attach overlays to diagram elements.
	 *
	 * The overlay service will take care of overlay positioning during updates.
	 *
	 * @example
	 *
	 * // add a pink badge on the top left of the shape
	 * overlays.add(someShape, {
	 *   position: {
	 *     top: -5,
	 *     left: -5
	 *   },
	 *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
	 * });
	 *
	 * // or add via shape id
	 *
	 * overlays.add('some-element-id', {
	 *   position: {
	 *     top: -5,
	 *     left: -5
	 *   }
	 *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
	 * });
	 *
	 * // or add with optional type
	 *
	 * overlays.add(someShape, 'badge', {
	 *   position: {
	 *     top: -5,
	 *     left: -5
	 *   }
	 *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
	 * });
	 *
	 *
	 * // remove an overlay
	 *
	 * var id = overlays.add(...);
	 * overlays.remove(id);
	 *
	 *
	 * You may configure overlay defaults during tool by providing a `config` module
	 * with `overlays.defaults` as an entry:
	 *
	 * {
	 *   overlays: {
	 *     defaults: {
	 *       show: {
	 *         minZoom: 0.7,
	 *         maxZoom: 5.0
	 *       },
	 *       scale: {
	 *         min: 1
	 *       }
	 *     }
	 * }
	 *
	 * @param {Object} config
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 * @param {ElementRegistry} elementRegistry
	 */
	function Overlays(config, eventBus, canvas, elementRegistry) {

	  this._eventBus = eventBus;
	  this._canvas = canvas;
	  this._elementRegistry = elementRegistry;

	  this._ids = ids;

	  this._overlayDefaults = assign({

	    // no show constraints
	    show: null,

	    // always scale
	    scale: true
	  }, config && config.defaults);

	  /**
	   * Mapping overlayId -> overlay
	   */
	  this._overlays = {};

	  /**
	   * Mapping elementId -> overlay container
	   */
	  this._overlayContainers = [];

	  // root html element for all overlays
	  this._overlayRoot = createRoot(canvas.getContainer());

	  this._init();
	}


	Overlays.$inject = [
	  'config.overlays',
	  'eventBus',
	  'canvas',
	  'elementRegistry'
	];


	/**
	 * Returns the overlay with the specified id or a list of overlays
	 * for an element with a given type.
	 *
	 * @example
	 *
	 * // return the single overlay with the given id
	 * overlays.get('some-id');
	 *
	 * // return all overlays for the shape
	 * overlays.get({ element: someShape });
	 *
	 * // return all overlays on shape with type 'badge'
	 * overlays.get({ element: someShape, type: 'badge' });
	 *
	 * // shape can also be specified as id
	 * overlays.get({ element: 'element-id', type: 'badge' });
	 *
	 *
	 * @param {Object} search
	 * @param {string} [search.id]
	 * @param {string|djs.model.Base} [search.element]
	 * @param {string} [search.type]
	 *
	 * @return {Object|Array<Object>} the overlay(s)
	 */
	Overlays.prototype.get = function(search) {

	  if (isString(search)) {
	    search = { id: search };
	  }

	  if (isString(search.element)) {
	    search.element = this._elementRegistry.get(search.element);
	  }

	  if (search.element) {
	    var container = this._getOverlayContainer(search.element, true);

	    // return a list of overlays when searching by element (+type)
	    if (container) {
	      return search.type ? filter(container.overlays, matchPattern({ type: search.type })) : container.overlays.slice();
	    } else {
	      return [];
	    }
	  } else
	  if (search.type) {
	    return filter(this._overlays, matchPattern({ type: search.type }));
	  } else {

	    // return single element when searching by id
	    return search.id ? this._overlays[search.id] : null;
	  }
	};

	/**
	 * Adds a HTML overlay to an element.
	 *
	 * @param {string|djs.model.Base}   element   attach overlay to this shape
	 * @param {string}                  [type]    optional type to assign to the overlay
	 * @param {Object}                  overlay   the overlay configuration
	 *
	 * @param {string|DOMElement}       overlay.html                 html element to use as an overlay
	 * @param {Object}                  [overlay.show]               show configuration
	 * @param {number}                  [overlay.show.minZoom]       minimal zoom level to show the overlay
	 * @param {number}                  [overlay.show.maxZoom]       maximum zoom level to show the overlay
	 * @param {Object}                  overlay.position             where to attach the overlay
	 * @param {number}                  [overlay.position.left]      relative to element bbox left attachment
	 * @param {number}                  [overlay.position.top]       relative to element bbox top attachment
	 * @param {number}                  [overlay.position.bottom]    relative to element bbox bottom attachment
	 * @param {number}                  [overlay.position.right]     relative to element bbox right attachment
	 * @param {boolean|Object}          [overlay.scale=true]         false to preserve the same size regardless of
	 *                                                               diagram zoom
	 * @param {number}                  [overlay.scale.min]
	 * @param {number}                  [overlay.scale.max]
	 *
	 * @return {string}                 id that may be used to reference the overlay for update or removal
	 */
	Overlays.prototype.add = function(element, type, overlay) {

	  if (isObject(type)) {
	    overlay = type;
	    type = null;
	  }

	  if (!element.id) {
	    element = this._elementRegistry.get(element);
	  }

	  if (!overlay.position) {
	    throw new Error('must specifiy overlay position');
	  }

	  if (!overlay.html) {
	    throw new Error('must specifiy overlay html');
	  }

	  if (!element) {
	    throw new Error('invalid element specified');
	  }

	  var id = this._ids.next();

	  overlay = assign({}, this._overlayDefaults, overlay, {
	    id: id,
	    type: type,
	    element: element,
	    html: overlay.html
	  });

	  this._addOverlay(overlay);

	  return id;
	};


	/**
	 * Remove an overlay with the given id or all overlays matching the given filter.
	 *
	 * @see Overlays#get for filter options.
	 *
	 * @param {string} [id]
	 * @param {Object} [filter]
	 */
	Overlays.prototype.remove = function(filter) {

	  var overlays = this.get(filter) || [];

	  if (!isArray(overlays)) {
	    overlays = [ overlays ];
	  }

	  var self = this;

	  forEach(overlays, function(overlay) {

	    var container = self._getOverlayContainer(overlay.element, true);

	    if (overlay) {
	      remove(overlay.html);
	      remove(overlay.htmlContainer);

	      delete overlay.htmlContainer;
	      delete overlay.element;

	      delete self._overlays[overlay.id];
	    }

	    if (container) {
	      var idx = container.overlays.indexOf(overlay);
	      if (idx !== -1) {
	        container.overlays.splice(idx, 1);
	      }
	    }
	  });

	};


	Overlays.prototype.show = function() {
	  setVisible(this._overlayRoot);
	};


	Overlays.prototype.hide = function() {
	  setVisible(this._overlayRoot, false);
	};

	Overlays.prototype.clear = function() {
	  this._overlays = {};

	  this._overlayContainers = [];

	  clear(this._overlayRoot);
	};

	Overlays.prototype._updateOverlayContainer = function(container) {
	  var element = container.element,
	      html = container.html;

	  // update container left,top according to the elements x,y coordinates
	  // this ensures we can attach child elements relative to this container

	  var x = element.x,
	      y = element.y;

	  if (element.waypoints) {
	    var bbox = getBBox(element);
	    x = bbox.x;
	    y = bbox.y;
	  }

	  setPosition(html, x, y);

	  attr(container.html, 'data-container-id', element.id);
	};


	Overlays.prototype._updateOverlay = function(overlay) {

	  var position = overlay.position,
	      htmlContainer = overlay.htmlContainer,
	      element = overlay.element;

	  // update overlay html relative to shape because
	  // it is already positioned on the element

	  // update relative
	  var left = position.left,
	      top = position.top;

	  if (position.right !== undefined) {

	    var width;

	    if (element.waypoints) {
	      width = getBBox(element).width;
	    } else {
	      width = element.width;
	    }

	    left = position.right * -1 + width;
	  }

	  if (position.bottom !== undefined) {

	    var height;

	    if (element.waypoints) {
	      height = getBBox(element).height;
	    } else {
	      height = element.height;
	    }

	    top = position.bottom * -1 + height;
	  }

	  setPosition(htmlContainer, left || 0, top || 0);
	};


	Overlays.prototype._createOverlayContainer = function(element) {
	  var html = domify('<div class="djs-overlays" style="position: absolute" />');

	  this._overlayRoot.appendChild(html);

	  var container = {
	    html: html,
	    element: element,
	    overlays: []
	  };

	  this._updateOverlayContainer(container);

	  this._overlayContainers.push(container);

	  return container;
	};


	Overlays.prototype._updateRoot = function(viewbox) {
	  var scale = viewbox.scale || 1;

	  var matrix = 'matrix(' +
	  [
	    scale,
	    0,
	    0,
	    scale,
	    -1 * viewbox.x * scale,
	    -1 * viewbox.y * scale
	  ].join(',') +
	  ')';

	  setTransform(this._overlayRoot, matrix);
	};


	Overlays.prototype._getOverlayContainer = function(element, raw) {
	  var container = find(this._overlayContainers, function(c) {
	    return c.element === element;
	  });


	  if (!container && !raw) {
	    return this._createOverlayContainer(element);
	  }

	  return container;
	};


	Overlays.prototype._addOverlay = function(overlay) {

	  var id = overlay.id,
	      element = overlay.element,
	      html = overlay.html,
	      htmlContainer,
	      overlayContainer;

	  // unwrap jquery (for those who need it)
	  if (html.get && html.constructor.prototype.jquery) {
	    html = html.get(0);
	  }

	  // create proper html elements from
	  // overlay HTML strings
	  if (isString(html)) {
	    html = domify(html);
	  }

	  overlayContainer = this._getOverlayContainer(element);

	  htmlContainer = domify('<div class="djs-overlay" data-overlay-id="' + id + '" style="position: absolute">');

	  htmlContainer.appendChild(html);

	  if (overlay.type) {
	    classes(htmlContainer).add('djs-overlay-' + overlay.type);
	  }

	  overlay.htmlContainer = htmlContainer;

	  overlayContainer.overlays.push(overlay);
	  overlayContainer.html.appendChild(htmlContainer);

	  this._overlays[id] = overlay;

	  this._updateOverlay(overlay);
	  this._updateOverlayVisibilty(overlay, this._canvas.viewbox());
	};


	Overlays.prototype._updateOverlayVisibilty = function(overlay, viewbox) {
	  var show = overlay.show,
	      minZoom = show && show.minZoom,
	      maxZoom = show && show.maxZoom,
	      htmlContainer = overlay.htmlContainer,
	      visible = true;

	  if (show) {
	    if (
	      (isDefined(minZoom) && minZoom > viewbox.scale) ||
	      (isDefined(maxZoom) && maxZoom < viewbox.scale)
	    ) {
	      visible = false;
	    }

	    setVisible(htmlContainer, visible);
	  }

	  this._updateOverlayScale(overlay, viewbox);
	};


	Overlays.prototype._updateOverlayScale = function(overlay, viewbox) {
	  var shouldScale = overlay.scale,
	      minScale,
	      maxScale,
	      htmlContainer = overlay.htmlContainer;

	  var scale, transform = '';

	  if (shouldScale !== true) {

	    if (shouldScale === false) {
	      minScale = 1;
	      maxScale = 1;
	    } else {
	      minScale = shouldScale.min;
	      maxScale = shouldScale.max;
	    }

	    if (isDefined(minScale) && viewbox.scale < minScale) {
	      scale = (1 / viewbox.scale || 1) * minScale;
	    }

	    if (isDefined(maxScale) && viewbox.scale > maxScale) {
	      scale = (1 / viewbox.scale || 1) * maxScale;
	    }
	  }

	  if (isDefined(scale)) {
	    transform = 'scale(' + scale + ',' + scale + ')';
	  }

	  setTransform(htmlContainer, transform);
	};


	Overlays.prototype._updateOverlaysVisibilty = function(viewbox) {

	  var self = this;

	  forEach(this._overlays, function(overlay) {
	    self._updateOverlayVisibilty(overlay, viewbox);
	  });
	};


	Overlays.prototype._init = function() {

	  var eventBus = this._eventBus;

	  var self = this;


	  // scroll/zoom integration

	  function updateViewbox(viewbox) {
	    self._updateRoot(viewbox);
	    self._updateOverlaysVisibilty(viewbox);

	    self.show();
	  }

	  eventBus.on('canvas.viewbox.changing', function(event) {
	    self.hide();
	  });

	  eventBus.on('canvas.viewbox.changed', function(event) {
	    updateViewbox(event.viewbox);
	  });


	  // remove integration

	  eventBus.on([ 'shape.remove', 'connection.remove' ], function(e) {
	    var element = e.element;
	    var overlays = self.get({ element: element });

	    forEach(overlays, function(o) {
	      self.remove(o.id);
	    });

	    var container = self._getOverlayContainer(element);

	    if (container) {
	      remove(container.html);
	      var i = self._overlayContainers.indexOf(container);
	      if (i !== -1) {
	        self._overlayContainers.splice(i, 1);
	      }
	    }
	  });


	  // move integration

	  eventBus.on('element.changed', LOW_PRIORITY$2, function(e) {
	    var element = e.element;

	    var container = self._getOverlayContainer(element, true);

	    if (container) {
	      forEach(container.overlays, function(overlay) {
	        self._updateOverlay(overlay);
	      });

	      self._updateOverlayContainer(container);
	    }
	  });


	  // marker integration, simply add them on the overlays as classes, too.

	  eventBus.on('element.marker.update', function(e) {
	    var container = self._getOverlayContainer(e.element, true);
	    if (container) {
	      classes(container.html)[e.add ? 'add' : 'remove'](e.marker);
	    }
	  });


	  // clear overlays with diagram

	  eventBus.on('diagram.clear', this.clear, this);
	};



	// helpers /////////////////////////////

	function createRoot(parentNode) {
	  var root = domify(
	    '<div class="djs-overlay-container" style="position: absolute; width: 0; height: 0;" />'
	  );

	  parentNode.insertBefore(root, parentNode.firstChild);

	  return root;
	}

	function setPosition(el, x, y) {
	  assign(el.style, { left: x + 'px', top: y + 'px' });
	}

	function setVisible(el, visible) {
	  el.style.display = visible === false ? 'none' : '';
	}

	function setTransform(el, transform) {

	  el.style['transform-origin'] = 'top left';

	  [ '', '-ms-', '-webkit-' ].forEach(function(prefix) {
	    el.style[prefix + 'transform'] = transform;
	  });
	}

	var OverlaysModule = {
	  __init__: [ 'overlays' ],
	  overlays: [ 'type', Overlays ]
	};

	/**
	 * A viewer for BPMN 2.0 diagrams.
	 *
	 * Have a look at {@link NavigatedViewer} or {@link Modeler} for bundles that include
	 * additional features.
	 *
	 *
	 * ## Extending the Viewer
	 *
	 * In order to extend the viewer pass extension modules to bootstrap via the
	 * `additionalModules` option. An extension module is an object that exposes
	 * named services.
	 *
	 * The following example depicts the integration of a simple
	 * logging component that integrates with interaction events:
	 *
	 *
	 * ```javascript
	 *
	 * // logging component
	 * function InteractionLogger(eventBus) {
	 *   eventBus.on('element.hover', function(event) {
	 *     console.log()
	 *   })
	 * }
	 *
	 * InteractionLogger.$inject = [ 'eventBus' ]; // minification save
	 *
	 * // extension module
	 * var extensionModule = {
	 *   __init__: [ 'interactionLogger' ],
	 *   interactionLogger: [ 'type', InteractionLogger ]
	 * };
	 *
	 * // extend the viewer
	 * var bpmnViewer = new Viewer({ additionalModules: [ extensionModule ] });
	 * bpmnViewer.importXML(...);
	 * ```
	 *
	 * @param {Object} [options] configuration options to pass to the viewer
	 * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.
	 * @param {string|number} [options.width] the width of the viewer
	 * @param {string|number} [options.height] the height of the viewer
	 * @param {Object} [options.moddleExtensions] extension packages to provide
	 * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules
	 * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules
	 */
	function Viewer(options) {
	  BaseViewer.call(this, options);
	}

	inherits_browser(Viewer, BaseViewer);

	// modules the viewer is composed of
	Viewer.prototype._modules = [
	  CoreModule$1,
	  translate$2,
	  SelectionModule,
	  OverlaysModule
	];

	// default moddle extensions the viewer is composed of
	Viewer.prototype._moddleExtensions = {};

	/**
	 * Returns true if event was triggered with any modifier
	 * @param {KeyboardEvent} event
	 */
	function hasModifier(event) {
	  return (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey);
	}

	/**
	 * @param {KeyboardEvent} event
	 */
	function isCmd(event) {

	  // ensure we don't react to AltGr
	  // (mapped to CTRL + ALT)
	  if (event.altKey) {
	    return false;
	  }

	  return event.ctrlKey || event.metaKey;
	}

	/**
	 * Checks if key pressed is one of provided keys.
	 *
	 * @param {string|Array<string>} keys
	 * @param {KeyboardEvent} event
	 */
	function isKey(keys, event) {
	  keys = isArray(keys) ? keys : [ keys ];

	  return keys.indexOf(event.key) !== -1 || keys.indexOf(event.keyCode) !== -1;
	}

	/**
	 * @param {KeyboardEvent} event
	 */
	function isShift(event) {
	  return event.shiftKey;
	}

	var KEYDOWN_EVENT = 'keyboard.keydown',
	    KEYUP_EVENT = 'keyboard.keyup';

	var DEFAULT_PRIORITY$1 = 1000;


	/**
	 * A keyboard abstraction that may be activated and
	 * deactivated by users at will, consuming key events
	 * and triggering diagram actions.
	 *
	 * For keys pressed down, keyboard fires `keyboard.keydown` event.
	 * The event context contains one field which is `KeyboardEvent` event.
	 *
	 * The implementation fires the following key events that allow
	 * other components to hook into key handling:
	 *
	 *  - keyboard.bind
	 *  - keyboard.unbind
	 *  - keyboard.init
	 *  - keyboard.destroy
	 *
	 * All events contain one field which is node.
	 *
	 * A default binding for the keyboard may be specified via the
	 * `keyboard.bindTo` configuration option.
	 *
	 * @param {Config} config
	 * @param {EventBus} eventBus
	 */
	function Keyboard(config, eventBus) {
	  var self = this;

	  this._config = config || {};
	  this._eventBus = eventBus;

	  this._keydownHandler = this._keydownHandler.bind(this);
	  this._keyupHandler = this._keyupHandler.bind(this);

	  // properly clean dom registrations
	  eventBus.on('diagram.destroy', function() {
	    self._fire('destroy');

	    self.unbind();
	  });

	  eventBus.on('diagram.init', function() {
	    self._fire('init');
	  });

	  eventBus.on('attach', function() {
	    if (config && config.bindTo) {
	      self.bind(config.bindTo);
	    }
	  });

	  eventBus.on('detach', function() {
	    self.unbind();
	  });
	}

	Keyboard.$inject = [
	  'config.keyboard',
	  'eventBus'
	];

	Keyboard.prototype._keydownHandler = function(event) {
	  this._keyHandler(event, KEYDOWN_EVENT);
	};

	Keyboard.prototype._keyupHandler = function(event) {
	  this._keyHandler(event, KEYUP_EVENT);
	};

	Keyboard.prototype._keyHandler = function(event, type) {
	  var target = event.target,
	      eventBusResult;

	  if (isInput(target)) {
	    return;
	  }

	  var context = {
	    keyEvent: event
	  };

	  eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);

	  if (eventBusResult) {
	    event.preventDefault();
	  }
	};

	Keyboard.prototype.bind = function(node) {

	  // make sure that the keyboard is only bound once to the DOM
	  this.unbind();

	  this._node = node;

	  // bind key events
	  componentEvent.bind(node, 'keydown', this._keydownHandler, true);
	  componentEvent.bind(node, 'keyup', this._keyupHandler, true);

	  this._fire('bind');
	};

	Keyboard.prototype.getBinding = function() {
	  return this._node;
	};

	Keyboard.prototype.unbind = function() {
	  var node = this._node;

	  if (node) {
	    this._fire('unbind');

	    // unbind key events
	    componentEvent.unbind(node, 'keydown', this._keydownHandler, true);
	    componentEvent.unbind(node, 'keyup', this._keyupHandler, true);
	  }

	  this._node = null;
	};

	Keyboard.prototype._fire = function(event) {
	  this._eventBus.fire('keyboard.' + event, { node: this._node });
	};

	/**
	 * Add a listener function that is notified with `KeyboardEvent` whenever
	 * the keyboard is bound and the user presses a key. If no priority is
	 * provided, the default value of 1000 is used.
	 *
	 * @param {number} [priority]
	 * @param {Function} listener
	 * @param {string} type
	 */
	Keyboard.prototype.addListener = function(priority, listener, type) {
	  if (isFunction(priority)) {
	    type = listener;
	    listener = priority;
	    priority = DEFAULT_PRIORITY$1;
	  }

	  this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);
	};

	Keyboard.prototype.removeListener = function(listener, type) {
	  this._eventBus.off(type || KEYDOWN_EVENT, listener);
	};

	Keyboard.prototype.hasModifier = hasModifier;
	Keyboard.prototype.isCmd = isCmd;
	Keyboard.prototype.isShift = isShift;
	Keyboard.prototype.isKey = isKey;



	// helpers ///////

	function isInput(target) {
	  return target && (matchesSelector(target, 'input, textarea') || target.contentEditable === 'true');
	}

	var LOW_PRIORITY$3 = 500;

	var KEYCODE_C = 67;
	var KEYCODE_V = 86;
	var KEYCODE_Y = 89;
	var KEYCODE_Z = 90;

	var KEYS_COPY = ['c', 'C', KEYCODE_C ];
	var KEYS_PASTE = [ 'v', 'V', KEYCODE_V ];
	var KEYS_REDO = [ 'y', 'Y', KEYCODE_Y ];
	var KEYS_UNDO = [ 'z', 'Z', KEYCODE_Z ];


	/**
	 * Adds default keyboard bindings.
	 *
	 * This does not pull in any features will bind only actions that
	 * have previously been registered against the editorActions component.
	 *
	 * @param {EventBus} eventBus
	 * @param {Keyboard} keyboard
	 */
	function KeyboardBindings(eventBus, keyboard) {

	  var self = this;

	  eventBus.on('editorActions.init', LOW_PRIORITY$3, function(event) {

	    var editorActions = event.editorActions;

	    self.registerBindings(keyboard, editorActions);
	  });
	}

	KeyboardBindings.$inject = [
	  'eventBus',
	  'keyboard'
	];


	/**
	 * Register available keyboard bindings.
	 *
	 * @param {Keyboard} keyboard
	 * @param {EditorActions} editorActions
	 */
	KeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {

	  /**
	   * Add keyboard binding if respective editor action
	   * is registered.
	   *
	   * @param {string} action name
	   * @param {Function} fn that implements the key binding
	   */
	  function addListener(action, fn) {

	    if (editorActions.isRegistered(action)) {
	      keyboard.addListener(fn);
	    }
	  }


	  // undo
	  // (CTRL|CMD) + Z
	  addListener('undo', function(context) {

	    var event = context.keyEvent;

	    if (isCmd(event) && !isShift(event) && isKey(KEYS_UNDO, event)) {
	      editorActions.trigger('undo');

	      return true;
	    }
	  });

	  // redo
	  // CTRL + Y
	  // CMD + SHIFT + Z
	  addListener('redo', function(context) {

	    var event = context.keyEvent;

	    if (isCmd(event) && (isKey(KEYS_REDO, event) || (isKey(KEYS_UNDO, event) && isShift(event)))) {
	      editorActions.trigger('redo');

	      return true;
	    }
	  });

	  // copy
	  // CTRL/CMD + C
	  addListener('copy', function(context) {

	    var event = context.keyEvent;

	    if (isCmd(event) && isKey(KEYS_COPY, event)) {
	      editorActions.trigger('copy');

	      return true;
	    }
	  });

	  // paste
	  // CTRL/CMD + V
	  addListener('paste', function(context) {

	    var event = context.keyEvent;

	    if (isCmd(event) && isKey(KEYS_PASTE, event)) {
	      editorActions.trigger('paste');

	      return true;
	    }
	  });

	  // zoom in one step
	  // CTRL/CMD + +
	  addListener('stepZoom', function(context) {

	    var event = context.keyEvent;

	    // quirk: it has to be triggered by `=` as well to work on international keyboard layout
	    // cf: https://github.com/bpmn-io/bpmn-js/issues/1362#issuecomment-722989754
	    if (isKey([ '+', 'Add', '=' ], event) && isCmd(event)) {
	      editorActions.trigger('stepZoom', { value: 1 });

	      return true;
	    }
	  });

	  // zoom out one step
	  // CTRL + -
	  addListener('stepZoom', function(context) {

	    var event = context.keyEvent;

	    if (isKey([ '-', 'Subtract' ], event) && isCmd(event)) {
	      editorActions.trigger('stepZoom', { value: -1 });

	      return true;
	    }
	  });

	  // zoom to the default level
	  // CTRL + 0
	  addListener('zoom', function(context) {

	    var event = context.keyEvent;

	    if (isKey('0', event) && isCmd(event)) {
	      editorActions.trigger('zoom', { value: 1 });

	      return true;
	    }
	  });

	  // delete selected element
	  // DEL
	  addListener('removeSelection', function(context) {

	    var event = context.keyEvent;

	    if (isKey(['Backspace', 'Delete', 'Del' ], event)) {
	      editorActions.trigger('removeSelection');

	      return true;
	    }
	  });
	};

	var KeyboardModule = {
	  __init__: [ 'keyboard', 'keyboardBindings' ],
	  keyboard: [ 'type', Keyboard ],
	  keyboardBindings: [ 'type', KeyboardBindings ]
	};

	var DEFAULT_CONFIG = {
	  moveSpeed: 50,
	  moveSpeedAccelerated: 200
	};


	/**
	 * A feature that allows users to move the canvas using the keyboard.
	 *
	 * @param {Object} config
	 * @param {number} [config.moveSpeed=50]
	 * @param {number} [config.moveSpeedAccelerated=200]
	 * @param {Keyboard} keyboard
	 * @param {Canvas} canvas
	 */
	function KeyboardMove(
	    config,
	    keyboard,
	    canvas
	) {

	  var self = this;

	  this._config = assign({}, DEFAULT_CONFIG, config || {});

	  keyboard.addListener(arrowsListener);


	  function arrowsListener(context) {

	    var event = context.keyEvent,
	        config = self._config;

	    if (!keyboard.isCmd(event)) {
	      return;
	    }

	    if (keyboard.isKey([
	      'ArrowLeft', 'Left',
	      'ArrowUp', 'Up',
	      'ArrowDown', 'Down',
	      'ArrowRight', 'Right'
	    ], event)) {

	      var speed = (
	        keyboard.isShift(event) ?
	          config.moveSpeedAccelerated :
	          config.moveSpeed
	      );

	      var direction;

	      switch (event.key) {
	      case 'ArrowLeft':
	      case 'Left':
	        direction = 'left';
	        break;
	      case 'ArrowUp':
	      case 'Up':
	        direction = 'up';
	        break;
	      case 'ArrowRight':
	      case 'Right':
	        direction = 'right';
	        break;
	      case 'ArrowDown':
	      case 'Down':
	        direction = 'down';
	        break;
	      }

	      self.moveCanvas({
	        speed: speed,
	        direction: direction
	      });

	      return true;
	    }
	  }

	  this.moveCanvas = function(opts) {

	    var dx = 0,
	        dy = 0,
	        speed = opts.speed;

	    var actualSpeed = speed / Math.min(Math.sqrt(canvas.viewbox().scale), 1);

	    switch (opts.direction) {
	    case 'left': // Left
	      dx = actualSpeed;
	      break;
	    case 'up': // Up
	      dy = actualSpeed;
	      break;
	    case 'right': // Right
	      dx = -actualSpeed;
	      break;
	    case 'down': // Down
	      dy = -actualSpeed;
	      break;
	    }

	    canvas.scroll({
	      dx: dx,
	      dy: dy
	    });
	  };

	}


	KeyboardMove.$inject = [
	  'config.keyboardMove',
	  'keyboard',
	  'canvas'
	];

	var KeyboardMoveModule = {
	  __depends__: [
	    KeyboardModule
	  ],
	  __init__: [ 'keyboardMove' ],
	  keyboardMove: [ 'type', KeyboardMove ]
	};

	var CURSOR_CLS_PATTERN = /^djs-cursor-.*$/;


	function set$1(mode) {
	  var classes$1 = classes(document.body);

	  classes$1.removeMatching(CURSOR_CLS_PATTERN);

	  if (mode) {
	    classes$1.add('djs-cursor-' + mode);
	  }
	}

	function unset() {
	  set$1(null);
	}

	var TRAP_PRIORITY = 5000;

	/**
	 * Installs a click trap that prevents a ghost click following a dragging operation.
	 *
	 * @return {Function} a function to immediately remove the installed trap.
	 */
	function install(eventBus, eventName) {

	  eventName = eventName || 'element.click';

	  function trap() {
	    return false;
	  }

	  eventBus.once(eventName, TRAP_PRIORITY, trap);

	  return function() {
	    eventBus.off(eventName, trap);
	  };
	}

	function center(bounds) {
	  return {
	    x: bounds.x + (bounds.width / 2),
	    y: bounds.y + (bounds.height / 2)
	  };
	}


	function delta(a, b) {
	  return {
	    x: a.x - b.x,
	    y: a.y - b.y
	  };
	}

	var THRESHOLD = 15;


	/**
	 * Move the canvas via mouse.
	 *
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 */
	function MoveCanvas(eventBus, canvas) {

	  var context;


	  // listen for move on element mouse down;
	  // allow others to hook into the event before us though
	  // (dragging / element moving will do this)
	  eventBus.on('element.mousedown', 500, function(e) {
	    return handleStart(e.originalEvent);
	  });


	  function handleMove(event) {

	    var start = context.start,
	        button = context.button,
	        position = toPoint(event),
	        delta$1 = delta(position, start);

	    if (!context.dragging && length(delta$1) > THRESHOLD) {
	      context.dragging = true;

	      if (button === 0) {
	        install(eventBus);
	      }

	      set$1('grab');
	    }

	    if (context.dragging) {

	      var lastPosition = context.last || context.start;

	      delta$1 = delta(position, lastPosition);

	      canvas.scroll({
	        dx: delta$1.x,
	        dy: delta$1.y
	      });

	      context.last = position;
	    }

	    // prevent select
	    event.preventDefault();
	  }


	  function handleEnd(event) {
	    componentEvent.unbind(document, 'mousemove', handleMove);
	    componentEvent.unbind(document, 'mouseup', handleEnd);

	    context = null;

	    unset();
	  }

	  function handleStart(event) {

	    // event is already handled by '.djs-draggable'
	    if (closest(event.target, '.djs-draggable')) {
	      return;
	    }

	    var button = event.button;

	    // reject right mouse button or modifier key
	    if (button >= 2 || event.ctrlKey || event.shiftKey || event.altKey) {
	      return;
	    }

	    context = {
	      button: button,
	      start: toPoint(event)
	    };

	    componentEvent.bind(document, 'mousemove', handleMove);
	    componentEvent.bind(document, 'mouseup', handleEnd);

	    // we've handled the event
	    return true;
	  }

	  this.isActive = function() {
	    return !!context;
	  };

	}


	MoveCanvas.$inject = [
	  'eventBus',
	  'canvas'
	];



	// helpers ///////

	function length(point) {
	  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
	}

	var MoveCanvasModule = {
	  __init__: [ 'moveCanvas' ],
	  moveCanvas: [ 'type', MoveCanvas ]
	};

	/**
	 * Get the logarithm of x with base 10
	 * @param  {Integer} value
	 */
	function log10(x) {
	  return Math.log(x) / Math.log(10);
	}

	/**
	 * Get step size for given range and number of steps.
	 *
	 * @param {Object} range
	 * @param {number} range.min
	 * @param {number} range.max
	 */
	function getStepSize(range, steps) {

	  var minLinearRange = log10(range.min),
	      maxLinearRange = log10(range.max);

	  var absoluteLinearRange = Math.abs(minLinearRange) + Math.abs(maxLinearRange);

	  return absoluteLinearRange / steps;
	}

	function cap(range, scale) {
	  return Math.max(range.min, Math.min(range.max, scale));
	}

	var sign = Math.sign || function(n) {
	  return n >= 0 ? 1 : -1;
	};

	var RANGE = { min: 0.2, max: 4 },
	    NUM_STEPS = 10;

	var DELTA_THRESHOLD = 0.1;

	var DEFAULT_SCALE = 0.75;

	/**
	 * An implementation of zooming and scrolling within the
	 * {@link Canvas} via the mouse wheel.
	 *
	 * Mouse wheel zooming / scrolling may be disabled using
	 * the {@link toggle(enabled)} method.
	 *
	 * @param {Object} [config]
	 * @param {boolean} [config.enabled=true] default enabled state
	 * @param {number} [config.scale=.75] scroll sensivity
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 */
	function ZoomScroll(config, eventBus, canvas) {

	  config = config || {};

	  this._enabled = false;

	  this._canvas = canvas;
	  this._container = canvas._container;

	  this._handleWheel = bind(this._handleWheel, this);

	  this._totalDelta = 0;
	  this._scale = config.scale || DEFAULT_SCALE;

	  var self = this;

	  eventBus.on('canvas.init', function(e) {
	    self._init(config.enabled !== false);
	  });
	}

	ZoomScroll.$inject = [
	  'config.zoomScroll',
	  'eventBus',
	  'canvas'
	];

	ZoomScroll.prototype.scroll = function scroll(delta) {
	  this._canvas.scroll(delta);
	};


	ZoomScroll.prototype.reset = function reset() {
	  this._canvas.zoom('fit-viewport');
	};

	/**
	 * Zoom depending on delta.
	 *
	 * @param {number} delta
	 * @param {Object} position
	 */
	ZoomScroll.prototype.zoom = function zoom(delta, position) {

	  // zoom with half the step size of stepZoom
	  var stepSize = getStepSize(RANGE, NUM_STEPS * 2);

	  // add until threshold reached
	  this._totalDelta += delta;

	  if (Math.abs(this._totalDelta) > DELTA_THRESHOLD) {
	    this._zoom(delta, position, stepSize);

	    // reset
	    this._totalDelta = 0;
	  }
	};


	ZoomScroll.prototype._handleWheel = function handleWheel(event) {

	  // event is already handled by '.djs-scrollable'
	  if (closest(event.target, '.djs-scrollable', true)) {
	    return;
	  }

	  var element = this._container;

	  event.preventDefault();

	  // pinch to zoom is mapped to wheel + ctrlKey = true
	  // in modern browsers (!)

	  var isZoom = event.ctrlKey;

	  var isHorizontalScroll = event.shiftKey;

	  var factor = -1 * this._scale,
	      delta;

	  if (isZoom) {
	    factor *= event.deltaMode === 0 ? 0.020 : 0.32;
	  } else {
	    factor *= event.deltaMode === 0 ? 1.0 : 16.0;
	  }

	  if (isZoom) {
	    var elementRect = element.getBoundingClientRect();

	    var offset = {
	      x: event.clientX - elementRect.left,
	      y: event.clientY - elementRect.top
	    };

	    delta = (
	      Math.sqrt(
	        Math.pow(event.deltaY, 2) +
	        Math.pow(event.deltaX, 2)
	      ) * sign(event.deltaY) * factor
	    );

	    // zoom in relative to diagram {x,y} coordinates
	    this.zoom(delta, offset);
	  } else {

	    if (isHorizontalScroll) {
	      delta = {
	        dx: factor * event.deltaY,
	        dy: 0
	      };
	    } else {
	      delta = {
	        dx: factor * event.deltaX,
	        dy: factor * event.deltaY
	      };
	    }

	    this.scroll(delta);
	  }
	};

	/**
	 * Zoom with fixed step size.
	 *
	 * @param {number} delta - Zoom delta (1 for zooming in, -1 for out).
	 * @param {Object} position
	 */
	ZoomScroll.prototype.stepZoom = function stepZoom(delta, position) {

	  var stepSize = getStepSize(RANGE, NUM_STEPS);

	  this._zoom(delta, position, stepSize);
	};


	/**
	 * Zoom in/out given a step size.
	 *
	 * @param {number} delta
	 * @param {Object} position
	 * @param {number} stepSize
	 */
	ZoomScroll.prototype._zoom = function(delta, position, stepSize) {
	  var canvas = this._canvas;

	  var direction = delta > 0 ? 1 : -1;

	  var currentLinearZoomLevel = log10(canvas.zoom());

	  // snap to a proximate zoom step
	  var newLinearZoomLevel = Math.round(currentLinearZoomLevel / stepSize) * stepSize;

	  // increase or decrease one zoom step in the given direction
	  newLinearZoomLevel += stepSize * direction;

	  // calculate the absolute logarithmic zoom level based on the linear zoom level
	  // (e.g. 2 for an absolute x2 zoom)
	  var newLogZoomLevel = Math.pow(10, newLinearZoomLevel);

	  canvas.zoom(cap(RANGE, newLogZoomLevel), position);
	};


	/**
	 * Toggle the zoom scroll ability via mouse wheel.
	 *
	 * @param  {boolean} [newEnabled] new enabled state
	 */
	ZoomScroll.prototype.toggle = function toggle(newEnabled) {

	  var element = this._container;
	  var handleWheel = this._handleWheel;

	  var oldEnabled = this._enabled;

	  if (typeof newEnabled === 'undefined') {
	    newEnabled = !oldEnabled;
	  }

	  // only react on actual changes
	  if (oldEnabled !== newEnabled) {

	    // add or remove wheel listener based on
	    // changed enabled state
	    componentEvent[newEnabled ? 'bind' : 'unbind'](element, 'wheel', handleWheel, false);
	  }

	  this._enabled = newEnabled;

	  return newEnabled;
	};


	ZoomScroll.prototype._init = function(newEnabled) {
	  this.toggle(newEnabled);
	};

	var ZoomScrollModule = {
	  __init__: [ 'zoomScroll' ],
	  zoomScroll: [ 'type', ZoomScroll ]
	};

	/**
	 * A viewer that includes mouse navigation facilities
	 *
	 * @param {Object} options
	 */
	function NavigatedViewer(options) {
	  Viewer.call(this, options);
	}

	inherits_browser(NavigatedViewer, Viewer);


	NavigatedViewer.prototype._navigationModules = [
	  KeyboardMoveModule,
	  MoveCanvasModule,
	  ZoomScrollModule
	];

	NavigatedViewer.prototype._modules = [].concat(
	  Viewer.prototype._modules,
	  NavigatedViewer.prototype._navigationModules
	);

	/*! Hammer.JS - v2.0.7 - 2016-04-22
	 * http://hammerjs.github.io/
	 *
	 * Copyright (c) 2016 Jorik Tangelder;
	 * Licensed under the MIT license */

	var hammer = createCommonjsModule(function (module) {
	(function(window, document, exportName, undefined$1) {

	var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
	var TEST_ELEMENT = document.createElement('div');

	var TYPE_FUNCTION = 'function';

	var round = Math.round;
	var abs = Math.abs;
	var now = Date.now;

	/**
	 * set a timeout with a given scope
	 * @param {Function} fn
	 * @param {Number} timeout
	 * @param {Object} context
	 * @returns {number}
	 */
	function setTimeoutContext(fn, timeout, context) {
	    return setTimeout(bindFn(fn, context), timeout);
	}

	/**
	 * if the argument is an array, we want to execute the fn on each entry
	 * if it aint an array we don't want to do a thing.
	 * this is used by all the methods that accept a single and array argument.
	 * @param {*|Array} arg
	 * @param {String} fn
	 * @param {Object} [context]
	 * @returns {Boolean}
	 */
	function invokeArrayArg(arg, fn, context) {
	    if (Array.isArray(arg)) {
	        each(arg, context[fn], context);
	        return true;
	    }
	    return false;
	}

	/**
	 * walk objects and arrays
	 * @param {Object} obj
	 * @param {Function} iterator
	 * @param {Object} context
	 */
	function each(obj, iterator, context) {
	    var i;

	    if (!obj) {
	        return;
	    }

	    if (obj.forEach) {
	        obj.forEach(iterator, context);
	    } else if (obj.length !== undefined$1) {
	        i = 0;
	        while (i < obj.length) {
	            iterator.call(context, obj[i], i, obj);
	            i++;
	        }
	    } else {
	        for (i in obj) {
	            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
	        }
	    }
	}

	/**
	 * wrap a method with a deprecation warning and stack trace
	 * @param {Function} method
	 * @param {String} name
	 * @param {String} message
	 * @returns {Function} A new function wrapping the supplied method.
	 */
	function deprecate(method, name, message) {
	    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
	    return function() {
	        var e = new Error('get-stack-trace');
	        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
	            .replace(/^\s+at\s+/gm, '')
	            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

	        var log = window.console && (window.console.warn || window.console.log);
	        if (log) {
	            log.call(window.console, deprecationMessage, stack);
	        }
	        return method.apply(this, arguments);
	    };
	}

	/**
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} target
	 * @param {...Object} objects_to_assign
	 * @returns {Object} target
	 */
	var assign;
	if (typeof Object.assign !== 'function') {
	    assign = function assign(target) {
	        if (target === undefined$1 || target === null) {
	            throw new TypeError('Cannot convert undefined or null to object');
	        }

	        var output = Object(target);
	        for (var index = 1; index < arguments.length; index++) {
	            var source = arguments[index];
	            if (source !== undefined$1 && source !== null) {
	                for (var nextKey in source) {
	                    if (source.hasOwnProperty(nextKey)) {
	                        output[nextKey] = source[nextKey];
	                    }
	                }
	            }
	        }
	        return output;
	    };
	} else {
	    assign = Object.assign;
	}

	/**
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} dest
	 * @param {Object} src
	 * @param {Boolean} [merge=false]
	 * @returns {Object} dest
	 */
	var extend = deprecate(function extend(dest, src, merge) {
	    var keys = Object.keys(src);
	    var i = 0;
	    while (i < keys.length) {
	        if (!merge || (merge && dest[keys[i]] === undefined$1)) {
	            dest[keys[i]] = src[keys[i]];
	        }
	        i++;
	    }
	    return dest;
	}, 'extend', 'Use `assign`.');

	/**
	 * merge the values from src in the dest.
	 * means that properties that exist in dest will not be overwritten by src
	 * @param {Object} dest
	 * @param {Object} src
	 * @returns {Object} dest
	 */
	var merge = deprecate(function merge(dest, src) {
	    return extend(dest, src, true);
	}, 'merge', 'Use `assign`.');

	/**
	 * simple class inheritance
	 * @param {Function} child
	 * @param {Function} base
	 * @param {Object} [properties]
	 */
	function inherit(child, base, properties) {
	    var baseP = base.prototype,
	        childP;

	    childP = child.prototype = Object.create(baseP);
	    childP.constructor = child;
	    childP._super = baseP;

	    if (properties) {
	        assign(childP, properties);
	    }
	}

	/**
	 * simple function bind
	 * @param {Function} fn
	 * @param {Object} context
	 * @returns {Function}
	 */
	function bindFn(fn, context) {
	    return function boundFn() {
	        return fn.apply(context, arguments);
	    };
	}

	/**
	 * let a boolean value also be a function that must return a boolean
	 * this first item in args will be used as the context
	 * @param {Boolean|Function} val
	 * @param {Array} [args]
	 * @returns {Boolean}
	 */
	function boolOrFn(val, args) {
	    if (typeof val == TYPE_FUNCTION) {
	        return val.apply(args ? args[0] || undefined$1 : undefined$1, args);
	    }
	    return val;
	}

	/**
	 * use the val2 when val1 is undefined
	 * @param {*} val1
	 * @param {*} val2
	 * @returns {*}
	 */
	function ifUndefined(val1, val2) {
	    return (val1 === undefined$1) ? val2 : val1;
	}

	/**
	 * addEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function addEventListeners(target, types, handler) {
	    each(splitStr(types), function(type) {
	        target.addEventListener(type, handler, false);
	    });
	}

	/**
	 * removeEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function removeEventListeners(target, types, handler) {
	    each(splitStr(types), function(type) {
	        target.removeEventListener(type, handler, false);
	    });
	}

	/**
	 * find if a node is in the given parent
	 * @method hasParent
	 * @param {HTMLElement} node
	 * @param {HTMLElement} parent
	 * @return {Boolean} found
	 */
	function hasParent(node, parent) {
	    while (node) {
	        if (node == parent) {
	            return true;
	        }
	        node = node.parentNode;
	    }
	    return false;
	}

	/**
	 * small indexOf wrapper
	 * @param {String} str
	 * @param {String} find
	 * @returns {Boolean} found
	 */
	function inStr(str, find) {
	    return str.indexOf(find) > -1;
	}

	/**
	 * split string on whitespace
	 * @param {String} str
	 * @returns {Array} words
	 */
	function splitStr(str) {
	    return str.trim().split(/\s+/g);
	}

	/**
	 * find if a array contains the object using indexOf or a simple polyFill
	 * @param {Array} src
	 * @param {String} find
	 * @param {String} [findByKey]
	 * @return {Boolean|Number} false when not found, or the index
	 */
	function inArray(src, find, findByKey) {
	    if (src.indexOf && !findByKey) {
	        return src.indexOf(find);
	    } else {
	        var i = 0;
	        while (i < src.length) {
	            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
	                return i;
	            }
	            i++;
	        }
	        return -1;
	    }
	}

	/**
	 * convert array-like objects to real arrays
	 * @param {Object} obj
	 * @returns {Array}
	 */
	function toArray(obj) {
	    return Array.prototype.slice.call(obj, 0);
	}

	/**
	 * unique array with objects based on a key (like 'id') or just by the array's value
	 * @param {Array} src [{id:1},{id:2},{id:1}]
	 * @param {String} [key]
	 * @param {Boolean} [sort=False]
	 * @returns {Array} [{id:1},{id:2}]
	 */
	function uniqueArray(src, key, sort) {
	    var results = [];
	    var values = [];
	    var i = 0;

	    while (i < src.length) {
	        var val = key ? src[i][key] : src[i];
	        if (inArray(values, val) < 0) {
	            results.push(src[i]);
	        }
	        values[i] = val;
	        i++;
	    }

	    if (sort) {
	        if (!key) {
	            results = results.sort();
	        } else {
	            results = results.sort(function sortUniqueArray(a, b) {
	                return a[key] > b[key];
	            });
	        }
	    }

	    return results;
	}

	/**
	 * get the prefixed property
	 * @param {Object} obj
	 * @param {String} property
	 * @returns {String|Undefined} prefixed
	 */
	function prefixed(obj, property) {
	    var prefix, prop;
	    var camelProp = property[0].toUpperCase() + property.slice(1);

	    var i = 0;
	    while (i < VENDOR_PREFIXES.length) {
	        prefix = VENDOR_PREFIXES[i];
	        prop = (prefix) ? prefix + camelProp : property;

	        if (prop in obj) {
	            return prop;
	        }
	        i++;
	    }
	    return undefined$1;
	}

	/**
	 * get a unique id
	 * @returns {number} uniqueId
	 */
	var _uniqueId = 1;
	function uniqueId() {
	    return _uniqueId++;
	}

	/**
	 * get the window object of an element
	 * @param {HTMLElement} element
	 * @returns {DocumentView|Window}
	 */
	function getWindowForElement(element) {
	    var doc = element.ownerDocument || element;
	    return (doc.defaultView || doc.parentWindow || window);
	}

	var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

	var SUPPORT_TOUCH = ('ontouchstart' in window);
	var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined$1;
	var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

	var INPUT_TYPE_TOUCH = 'touch';
	var INPUT_TYPE_PEN = 'pen';
	var INPUT_TYPE_MOUSE = 'mouse';
	var INPUT_TYPE_KINECT = 'kinect';

	var COMPUTE_INTERVAL = 25;

	var INPUT_START = 1;
	var INPUT_MOVE = 2;
	var INPUT_END = 4;
	var INPUT_CANCEL = 8;

	var DIRECTION_NONE = 1;
	var DIRECTION_LEFT = 2;
	var DIRECTION_RIGHT = 4;
	var DIRECTION_UP = 8;
	var DIRECTION_DOWN = 16;

	var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
	var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
	var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

	var PROPS_XY = ['x', 'y'];
	var PROPS_CLIENT_XY = ['clientX', 'clientY'];

	/**
	 * create new input type manager
	 * @param {Manager} manager
	 * @param {Function} callback
	 * @returns {Input}
	 * @constructor
	 */
	function Input(manager, callback) {
	    var self = this;
	    this.manager = manager;
	    this.callback = callback;
	    this.element = manager.element;
	    this.target = manager.options.inputTarget;

	    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
	    // so when disabled the input events are completely bypassed.
	    this.domHandler = function(ev) {
	        if (boolOrFn(manager.options.enable, [manager])) {
	            self.handler(ev);
	        }
	    };

	    this.init();

	}

	Input.prototype = {
	    /**
	     * should handle the inputEvent data and trigger the callback
	     * @virtual
	     */
	    handler: function() { },

	    /**
	     * bind the events
	     */
	    init: function() {
	        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    },

	    /**
	     * unbind the events
	     */
	    destroy: function() {
	        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    }
	};

	/**
	 * create new input type manager
	 * called by the Manager constructor
	 * @param {Hammer} manager
	 * @returns {Input}
	 */
	function createInputInstance(manager) {
	    var Type;
	    var inputClass = manager.options.inputClass;

	    if (inputClass) {
	        Type = inputClass;
	    } else if (SUPPORT_POINTER_EVENTS) {
	        Type = PointerEventInput;
	    } else if (SUPPORT_ONLY_TOUCH) {
	        Type = TouchInput;
	    } else if (!SUPPORT_TOUCH) {
	        Type = MouseInput;
	    } else {
	        Type = TouchMouseInput;
	    }
	    return new (Type)(manager, inputHandler);
	}

	/**
	 * handle input events
	 * @param {Manager} manager
	 * @param {String} eventType
	 * @param {Object} input
	 */
	function inputHandler(manager, eventType, input) {
	    var pointersLen = input.pointers.length;
	    var changedPointersLen = input.changedPointers.length;
	    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
	    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

	    input.isFirst = !!isFirst;
	    input.isFinal = !!isFinal;

	    if (isFirst) {
	        manager.session = {};
	    }

	    // source event is the normalized value of the domEvents
	    // like 'touchstart, mouseup, pointerdown'
	    input.eventType = eventType;

	    // compute scale, rotation etc
	    computeInputData(manager, input);

	    // emit secret event
	    manager.emit('hammer.input', input);

	    manager.recognize(input);
	    manager.session.prevInput = input;
	}

	/**
	 * extend the data with some usable properties like scale, rotate, velocity etc
	 * @param {Object} manager
	 * @param {Object} input
	 */
	function computeInputData(manager, input) {
	    var session = manager.session;
	    var pointers = input.pointers;
	    var pointersLength = pointers.length;

	    // store the first input to calculate the distance and direction
	    if (!session.firstInput) {
	        session.firstInput = simpleCloneInputData(input);
	    }

	    // to compute scale and rotation we need to store the multiple touches
	    if (pointersLength > 1 && !session.firstMultiple) {
	        session.firstMultiple = simpleCloneInputData(input);
	    } else if (pointersLength === 1) {
	        session.firstMultiple = false;
	    }

	    var firstInput = session.firstInput;
	    var firstMultiple = session.firstMultiple;
	    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

	    var center = input.center = getCenter(pointers);
	    input.timeStamp = now();
	    input.deltaTime = input.timeStamp - firstInput.timeStamp;

	    input.angle = getAngle(offsetCenter, center);
	    input.distance = getDistance(offsetCenter, center);

	    computeDeltaXY(session, input);
	    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

	    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
	    input.overallVelocityX = overallVelocity.x;
	    input.overallVelocityY = overallVelocity.y;
	    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

	    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
	    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

	    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
	        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

	    computeIntervalInputData(session, input);

	    // find the correct target
	    var target = manager.element;
	    if (hasParent(input.srcEvent.target, target)) {
	        target = input.srcEvent.target;
	    }
	    input.target = target;
	}

	function computeDeltaXY(session, input) {
	    var center = input.center;
	    var offset = session.offsetDelta || {};
	    var prevDelta = session.prevDelta || {};
	    var prevInput = session.prevInput || {};

	    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
	        prevDelta = session.prevDelta = {
	            x: prevInput.deltaX || 0,
	            y: prevInput.deltaY || 0
	        };

	        offset = session.offsetDelta = {
	            x: center.x,
	            y: center.y
	        };
	    }

	    input.deltaX = prevDelta.x + (center.x - offset.x);
	    input.deltaY = prevDelta.y + (center.y - offset.y);
	}

	/**
	 * velocity is calculated every x ms
	 * @param {Object} session
	 * @param {Object} input
	 */
	function computeIntervalInputData(session, input) {
	    var last = session.lastInterval || input,
	        deltaTime = input.timeStamp - last.timeStamp,
	        velocity, velocityX, velocityY, direction;

	    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined$1)) {
	        var deltaX = input.deltaX - last.deltaX;
	        var deltaY = input.deltaY - last.deltaY;

	        var v = getVelocity(deltaTime, deltaX, deltaY);
	        velocityX = v.x;
	        velocityY = v.y;
	        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
	        direction = getDirection(deltaX, deltaY);

	        session.lastInterval = input;
	    } else {
	        // use latest velocity info if it doesn't overtake a minimum period
	        velocity = last.velocity;
	        velocityX = last.velocityX;
	        velocityY = last.velocityY;
	        direction = last.direction;
	    }

	    input.velocity = velocity;
	    input.velocityX = velocityX;
	    input.velocityY = velocityY;
	    input.direction = direction;
	}

	/**
	 * create a simple clone from the input used for storage of firstInput and firstMultiple
	 * @param {Object} input
	 * @returns {Object} clonedInputData
	 */
	function simpleCloneInputData(input) {
	    // make a simple copy of the pointers because we will get a reference if we don't
	    // we only need clientXY for the calculations
	    var pointers = [];
	    var i = 0;
	    while (i < input.pointers.length) {
	        pointers[i] = {
	            clientX: round(input.pointers[i].clientX),
	            clientY: round(input.pointers[i].clientY)
	        };
	        i++;
	    }

	    return {
	        timeStamp: now(),
	        pointers: pointers,
	        center: getCenter(pointers),
	        deltaX: input.deltaX,
	        deltaY: input.deltaY
	    };
	}

	/**
	 * get the center of all the pointers
	 * @param {Array} pointers
	 * @return {Object} center contains `x` and `y` properties
	 */
	function getCenter(pointers) {
	    var pointersLength = pointers.length;

	    // no need to loop when only one touch
	    if (pointersLength === 1) {
	        return {
	            x: round(pointers[0].clientX),
	            y: round(pointers[0].clientY)
	        };
	    }

	    var x = 0, y = 0, i = 0;
	    while (i < pointersLength) {
	        x += pointers[i].clientX;
	        y += pointers[i].clientY;
	        i++;
	    }

	    return {
	        x: round(x / pointersLength),
	        y: round(y / pointersLength)
	    };
	}

	/**
	 * calculate the velocity between two points. unit is in px per ms.
	 * @param {Number} deltaTime
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Object} velocity `x` and `y`
	 */
	function getVelocity(deltaTime, x, y) {
	    return {
	        x: x / deltaTime || 0,
	        y: y / deltaTime || 0
	    };
	}

	/**
	 * get the direction between two points
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Number} direction
	 */
	function getDirection(x, y) {
	    if (x === y) {
	        return DIRECTION_NONE;
	    }

	    if (abs(x) >= abs(y)) {
	        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
	    }
	    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
	}

	/**
	 * calculate the absolute distance between two points
	 * @param {Object} p1 {x, y}
	 * @param {Object} p2 {x, y}
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} distance
	 */
	function getDistance(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];

	    return Math.sqrt((x * x) + (y * y));
	}

	/**
	 * calculate the angle between two coordinates
	 * @param {Object} p1
	 * @param {Object} p2
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} angle
	 */
	function getAngle(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];
	    return Math.atan2(y, x) * 180 / Math.PI;
	}

	/**
	 * calculate the rotation degrees between two pointersets
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} rotation
	 */
	function getRotation(start, end) {
	    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
	}

	/**
	 * calculate the scale factor between two pointersets
	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} scale
	 */
	function getScale(start, end) {
	    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
	}

	var MOUSE_INPUT_MAP = {
	    mousedown: INPUT_START,
	    mousemove: INPUT_MOVE,
	    mouseup: INPUT_END
	};

	var MOUSE_ELEMENT_EVENTS = 'mousedown';
	var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

	/**
	 * Mouse events input
	 * @constructor
	 * @extends Input
	 */
	function MouseInput() {
	    this.evEl = MOUSE_ELEMENT_EVENTS;
	    this.evWin = MOUSE_WINDOW_EVENTS;

	    this.pressed = false; // mousedown state

	    Input.apply(this, arguments);
	}

	inherit(MouseInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function MEhandler(ev) {
	        var eventType = MOUSE_INPUT_MAP[ev.type];

	        // on start we want to have the left mouse button down
	        if (eventType & INPUT_START && ev.button === 0) {
	            this.pressed = true;
	        }

	        if (eventType & INPUT_MOVE && ev.which !== 1) {
	            eventType = INPUT_END;
	        }

	        // mouse must be down
	        if (!this.pressed) {
	            return;
	        }

	        if (eventType & INPUT_END) {
	            this.pressed = false;
	        }

	        this.callback(this.manager, eventType, {
	            pointers: [ev],
	            changedPointers: [ev],
	            pointerType: INPUT_TYPE_MOUSE,
	            srcEvent: ev
	        });
	    }
	});

	var POINTER_INPUT_MAP = {
	    pointerdown: INPUT_START,
	    pointermove: INPUT_MOVE,
	    pointerup: INPUT_END,
	    pointercancel: INPUT_CANCEL,
	    pointerout: INPUT_CANCEL
	};

	// in IE10 the pointer types is defined as an enum
	var IE10_POINTER_TYPE_ENUM = {
	    2: INPUT_TYPE_TOUCH,
	    3: INPUT_TYPE_PEN,
	    4: INPUT_TYPE_MOUSE,
	    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
	};

	var POINTER_ELEMENT_EVENTS = 'pointerdown';
	var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

	// IE10 has prefixed support, and case-sensitive
	if (window.MSPointerEvent && !window.PointerEvent) {
	    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
	    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
	}

	/**
	 * Pointer events input
	 * @constructor
	 * @extends Input
	 */
	function PointerEventInput() {
	    this.evEl = POINTER_ELEMENT_EVENTS;
	    this.evWin = POINTER_WINDOW_EVENTS;

	    Input.apply(this, arguments);

	    this.store = (this.manager.session.pointerEvents = []);
	}

	inherit(PointerEventInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function PEhandler(ev) {
	        var store = this.store;
	        var removePointer = false;

	        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
	        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
	        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

	        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

	        // get index of the event in the store
	        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

	        // start and mouse must be down
	        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
	            if (storeIndex < 0) {
	                store.push(ev);
	                storeIndex = store.length - 1;
	            }
	        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	            removePointer = true;
	        }

	        // it not found, so the pointer hasn't been down (so it's probably a hover)
	        if (storeIndex < 0) {
	            return;
	        }

	        // update the event in the store
	        store[storeIndex] = ev;

	        this.callback(this.manager, eventType, {
	            pointers: store,
	            changedPointers: [ev],
	            pointerType: pointerType,
	            srcEvent: ev
	        });

	        if (removePointer) {
	            // remove from the store
	            store.splice(storeIndex, 1);
	        }
	    }
	});

	var SINGLE_TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};

	var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
	var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

	/**
	 * Touch events input
	 * @constructor
	 * @extends Input
	 */
	function SingleTouchInput() {
	    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
	    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
	    this.started = false;

	    Input.apply(this, arguments);
	}

	inherit(SingleTouchInput, Input, {
	    handler: function TEhandler(ev) {
	        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

	        // should we handle the touch events?
	        if (type === INPUT_START) {
	            this.started = true;
	        }

	        if (!this.started) {
	            return;
	        }

	        var touches = normalizeSingleTouches.call(this, ev, type);

	        // when done, reset the started state
	        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
	            this.started = false;
	        }

	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});

	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function normalizeSingleTouches(ev, type) {
	    var all = toArray(ev.touches);
	    var changed = toArray(ev.changedTouches);

	    if (type & (INPUT_END | INPUT_CANCEL)) {
	        all = uniqueArray(all.concat(changed), 'identifier', true);
	    }

	    return [all, changed];
	}

	var TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};

	var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

	/**
	 * Multi-user touch events input
	 * @constructor
	 * @extends Input
	 */
	function TouchInput() {
	    this.evTarget = TOUCH_TARGET_EVENTS;
	    this.targetIds = {};

	    Input.apply(this, arguments);
	}

	inherit(TouchInput, Input, {
	    handler: function MTEhandler(ev) {
	        var type = TOUCH_INPUT_MAP[ev.type];
	        var touches = getTouches.call(this, ev, type);
	        if (!touches) {
	            return;
	        }

	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});

	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function getTouches(ev, type) {
	    var allTouches = toArray(ev.touches);
	    var targetIds = this.targetIds;

	    // when there is only one touch, the process can be simplified
	    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
	        targetIds[allTouches[0].identifier] = true;
	        return [allTouches, allTouches];
	    }

	    var i,
	        targetTouches,
	        changedTouches = toArray(ev.changedTouches),
	        changedTargetTouches = [],
	        target = this.target;

	    // get target touches from touches
	    targetTouches = allTouches.filter(function(touch) {
	        return hasParent(touch.target, target);
	    });

	    // collect touches
	    if (type === INPUT_START) {
	        i = 0;
	        while (i < targetTouches.length) {
	            targetIds[targetTouches[i].identifier] = true;
	            i++;
	        }
	    }

	    // filter changed touches to only contain touches that exist in the collected target ids
	    i = 0;
	    while (i < changedTouches.length) {
	        if (targetIds[changedTouches[i].identifier]) {
	            changedTargetTouches.push(changedTouches[i]);
	        }

	        // cleanup removed touches
	        if (type & (INPUT_END | INPUT_CANCEL)) {
	            delete targetIds[changedTouches[i].identifier];
	        }
	        i++;
	    }

	    if (!changedTargetTouches.length) {
	        return;
	    }

	    return [
	        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
	        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
	        changedTargetTouches
	    ];
	}

	/**
	 * Combined touch and mouse input
	 *
	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	 * This because touch devices also emit mouse events while doing a touch.
	 *
	 * @constructor
	 * @extends Input
	 */

	var DEDUP_TIMEOUT = 2500;
	var DEDUP_DISTANCE = 25;

	function TouchMouseInput() {
	    Input.apply(this, arguments);

	    var handler = bindFn(this.handler, this);
	    this.touch = new TouchInput(this.manager, handler);
	    this.mouse = new MouseInput(this.manager, handler);

	    this.primaryTouch = null;
	    this.lastTouches = [];
	}

	inherit(TouchMouseInput, Input, {
	    /**
	     * handle mouse and touch events
	     * @param {Hammer} manager
	     * @param {String} inputEvent
	     * @param {Object} inputData
	     */
	    handler: function TMEhandler(manager, inputEvent, inputData) {
	        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
	            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

	        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
	            return;
	        }

	        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
	        if (isTouch) {
	            recordTouches.call(this, inputEvent, inputData);
	        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
	            return;
	        }

	        this.callback(manager, inputEvent, inputData);
	    },

	    /**
	     * remove the event listeners
	     */
	    destroy: function destroy() {
	        this.touch.destroy();
	        this.mouse.destroy();
	    }
	});

	function recordTouches(eventType, eventData) {
	    if (eventType & INPUT_START) {
	        this.primaryTouch = eventData.changedPointers[0].identifier;
	        setLastTouch.call(this, eventData);
	    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	        setLastTouch.call(this, eventData);
	    }
	}

	function setLastTouch(eventData) {
	    var touch = eventData.changedPointers[0];

	    if (touch.identifier === this.primaryTouch) {
	        var lastTouch = {x: touch.clientX, y: touch.clientY};
	        this.lastTouches.push(lastTouch);
	        var lts = this.lastTouches;
	        var removeLastTouch = function() {
	            var i = lts.indexOf(lastTouch);
	            if (i > -1) {
	                lts.splice(i, 1);
	            }
	        };
	        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
	    }
	}

	function isSyntheticEvent(eventData) {
	    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
	    for (var i = 0; i < this.lastTouches.length; i++) {
	        var t = this.lastTouches[i];
	        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
	        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
	            return true;
	        }
	    }
	    return false;
	}

	var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
	var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined$1;

	// magical touchAction value
	var TOUCH_ACTION_COMPUTE = 'compute';
	var TOUCH_ACTION_AUTO = 'auto';
	var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
	var TOUCH_ACTION_NONE = 'none';
	var TOUCH_ACTION_PAN_X = 'pan-x';
	var TOUCH_ACTION_PAN_Y = 'pan-y';
	var TOUCH_ACTION_MAP = getTouchActionProps();

	/**
	 * Touch Action
	 * sets the touchAction property or uses the js alternative
	 * @param {Manager} manager
	 * @param {String} value
	 * @constructor
	 */
	function TouchAction(manager, value) {
	    this.manager = manager;
	    this.set(value);
	}

	TouchAction.prototype = {
	    /**
	     * set the touchAction value on the element or enable the polyfill
	     * @param {String} value
	     */
	    set: function(value) {
	        // find out the touch-action by the event handlers
	        if (value == TOUCH_ACTION_COMPUTE) {
	            value = this.compute();
	        }

	        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
	            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
	        }
	        this.actions = value.toLowerCase().trim();
	    },

	    /**
	     * just re-set the touchAction value
	     */
	    update: function() {
	        this.set(this.manager.options.touchAction);
	    },

	    /**
	     * compute the value for the touchAction property based on the recognizer's settings
	     * @returns {String} value
	     */
	    compute: function() {
	        var actions = [];
	        each(this.manager.recognizers, function(recognizer) {
	            if (boolOrFn(recognizer.options.enable, [recognizer])) {
	                actions = actions.concat(recognizer.getTouchAction());
	            }
	        });
	        return cleanTouchActions(actions.join(' '));
	    },

	    /**
	     * this method is called on each input cycle and provides the preventing of the browser behavior
	     * @param {Object} input
	     */
	    preventDefaults: function(input) {
	        var srcEvent = input.srcEvent;
	        var direction = input.offsetDirection;

	        // if the touch action did prevented once this session
	        if (this.manager.session.prevented) {
	            srcEvent.preventDefault();
	            return;
	        }

	        var actions = this.actions;
	        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
	        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
	        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

	        if (hasNone) {
	            //do not prevent defaults if this is a tap gesture

	            var isTapPointer = input.pointers.length === 1;
	            var isTapMovement = input.distance < 2;
	            var isTapTouchTime = input.deltaTime < 250;

	            if (isTapPointer && isTapMovement && isTapTouchTime) {
	                return;
	            }
	        }

	        if (hasPanX && hasPanY) {
	            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
	            return;
	        }

	        if (hasNone ||
	            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
	            (hasPanX && direction & DIRECTION_VERTICAL)) {
	            return this.preventSrc(srcEvent);
	        }
	    },

	    /**
	     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	     * @param {Object} srcEvent
	     */
	    preventSrc: function(srcEvent) {
	        this.manager.session.prevented = true;
	        srcEvent.preventDefault();
	    }
	};

	/**
	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	 * @param {String} actions
	 * @returns {*}
	 */
	function cleanTouchActions(actions) {
	    // none
	    if (inStr(actions, TOUCH_ACTION_NONE)) {
	        return TOUCH_ACTION_NONE;
	    }

	    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

	    // if both pan-x and pan-y are set (different recognizers
	    // for different directions, e.g. horizontal pan but vertical swipe?)
	    // we need none (as otherwise with pan-x pan-y combined none of these
	    // recognizers will work, since the browser would handle all panning
	    if (hasPanX && hasPanY) {
	        return TOUCH_ACTION_NONE;
	    }

	    // pan-x OR pan-y
	    if (hasPanX || hasPanY) {
	        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
	    }

	    // manipulation
	    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
	        return TOUCH_ACTION_MANIPULATION;
	    }

	    return TOUCH_ACTION_AUTO;
	}

	function getTouchActionProps() {
	    if (!NATIVE_TOUCH_ACTION) {
	        return false;
	    }
	    var touchMap = {};
	    var cssSupports = window.CSS && window.CSS.supports;
	    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

	        // If css.supports is not supported but there is native touch-action assume it supports
	        // all values. This is the case for IE 10 and 11.
	        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
	    });
	    return touchMap;
	}

	/**
	 * Recognizer flow explained; *
	 * All recognizers have the initial state of POSSIBLE when a input session starts.
	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
	 *
	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	 * which determines with state it should be.
	 *
	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	 * POSSIBLE to give it another change on the next cycle.
	 *
	 *               Possible
	 *                  |
	 *            +-----+---------------+
	 *            |                     |
	 *      +-----+-----+               |
	 *      |           |               |
	 *   Failed      Cancelled          |
	 *                          +-------+------+
	 *                          |              |
	 *                      Recognized       Began
	 *                                         |
	 *                                      Changed
	 *                                         |
	 *                                  Ended/Recognized
	 */
	var STATE_POSSIBLE = 1;
	var STATE_BEGAN = 2;
	var STATE_CHANGED = 4;
	var STATE_ENDED = 8;
	var STATE_RECOGNIZED = STATE_ENDED;
	var STATE_CANCELLED = 16;
	var STATE_FAILED = 32;

	/**
	 * Recognizer
	 * Every recognizer needs to extend from this class.
	 * @constructor
	 * @param {Object} options
	 */
	function Recognizer(options) {
	    this.options = assign({}, this.defaults, options || {});

	    this.id = uniqueId();

	    this.manager = null;

	    // default is enable true
	    this.options.enable = ifUndefined(this.options.enable, true);

	    this.state = STATE_POSSIBLE;

	    this.simultaneous = {};
	    this.requireFail = [];
	}

	Recognizer.prototype = {
	    /**
	     * @virtual
	     * @type {Object}
	     */
	    defaults: {},

	    /**
	     * set options
	     * @param {Object} options
	     * @return {Recognizer}
	     */
	    set: function(options) {
	        assign(this.options, options);

	        // also update the touchAction, in case something changed about the directions/enabled state
	        this.manager && this.manager.touchAction.update();
	        return this;
	    },

	    /**
	     * recognize simultaneous with an other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    recognizeWith: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
	            return this;
	        }

	        var simultaneous = this.simultaneous;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (!simultaneous[otherRecognizer.id]) {
	            simultaneous[otherRecognizer.id] = otherRecognizer;
	            otherRecognizer.recognizeWith(this);
	        }
	        return this;
	    },

	    /**
	     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRecognizeWith: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
	            return this;
	        }

	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        delete this.simultaneous[otherRecognizer.id];
	        return this;
	    },

	    /**
	     * recognizer can only run when an other is failing
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    requireFailure: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
	            return this;
	        }

	        var requireFail = this.requireFail;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (inArray(requireFail, otherRecognizer) === -1) {
	            requireFail.push(otherRecognizer);
	            otherRecognizer.requireFailure(this);
	        }
	        return this;
	    },

	    /**
	     * drop the requireFailure link. it does not remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRequireFailure: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
	            return this;
	        }

	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        var index = inArray(this.requireFail, otherRecognizer);
	        if (index > -1) {
	            this.requireFail.splice(index, 1);
	        }
	        return this;
	    },

	    /**
	     * has require failures boolean
	     * @returns {boolean}
	     */
	    hasRequireFailures: function() {
	        return this.requireFail.length > 0;
	    },

	    /**
	     * if the recognizer can recognize simultaneous with an other recognizer
	     * @param {Recognizer} otherRecognizer
	     * @returns {Boolean}
	     */
	    canRecognizeWith: function(otherRecognizer) {
	        return !!this.simultaneous[otherRecognizer.id];
	    },

	    /**
	     * You should use `tryEmit` instead of `emit` directly to check
	     * that all the needed recognizers has failed before emitting.
	     * @param {Object} input
	     */
	    emit: function(input) {
	        var self = this;
	        var state = this.state;

	        function emit(event) {
	            self.manager.emit(event, input);
	        }

	        // 'panstart' and 'panmove'
	        if (state < STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }

	        emit(self.options.event); // simple 'eventName' events

	        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
	            emit(input.additionalEvent);
	        }

	        // panend and pancancel
	        if (state >= STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }
	    },

	    /**
	     * Check that all the require failure recognizers has failed,
	     * if true, it emits a gesture event,
	     * otherwise, setup the state to FAILED.
	     * @param {Object} input
	     */
	    tryEmit: function(input) {
	        if (this.canEmit()) {
	            return this.emit(input);
	        }
	        // it's failing anyway
	        this.state = STATE_FAILED;
	    },

	    /**
	     * can we emit?
	     * @returns {boolean}
	     */
	    canEmit: function() {
	        var i = 0;
	        while (i < this.requireFail.length) {
	            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    },

	    /**
	     * update the recognizer
	     * @param {Object} inputData
	     */
	    recognize: function(inputData) {
	        // make a new copy of the inputData
	        // so we can change the inputData without messing up the other recognizers
	        var inputDataClone = assign({}, inputData);

	        // is is enabled and allow recognizing?
	        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
	            this.reset();
	            this.state = STATE_FAILED;
	            return;
	        }

	        // reset when we've reached the end
	        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
	            this.state = STATE_POSSIBLE;
	        }

	        this.state = this.process(inputDataClone);

	        // the recognizer has recognized a gesture
	        // so trigger an event
	        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
	            this.tryEmit(inputDataClone);
	        }
	    },

	    /**
	     * return the state of the recognizer
	     * the actual recognizing happens in this method
	     * @virtual
	     * @param {Object} inputData
	     * @returns {Const} STATE
	     */
	    process: function(inputData) { }, // jshint ignore:line

	    /**
	     * return the preferred touch-action
	     * @virtual
	     * @returns {Array}
	     */
	    getTouchAction: function() { },

	    /**
	     * called when the gesture isn't allowed to recognize
	     * like when another is being recognized or it is disabled
	     * @virtual
	     */
	    reset: function() { }
	};

	/**
	 * get a usable string, used as event postfix
	 * @param {Const} state
	 * @returns {String} state
	 */
	function stateStr(state) {
	    if (state & STATE_CANCELLED) {
	        return 'cancel';
	    } else if (state & STATE_ENDED) {
	        return 'end';
	    } else if (state & STATE_CHANGED) {
	        return 'move';
	    } else if (state & STATE_BEGAN) {
	        return 'start';
	    }
	    return '';
	}

	/**
	 * direction cons to string
	 * @param {Const} direction
	 * @returns {String}
	 */
	function directionStr(direction) {
	    if (direction == DIRECTION_DOWN) {
	        return 'down';
	    } else if (direction == DIRECTION_UP) {
	        return 'up';
	    } else if (direction == DIRECTION_LEFT) {
	        return 'left';
	    } else if (direction == DIRECTION_RIGHT) {
	        return 'right';
	    }
	    return '';
	}

	/**
	 * get a recognizer by name if it is bound to a manager
	 * @param {Recognizer|String} otherRecognizer
	 * @param {Recognizer} recognizer
	 * @returns {Recognizer}
	 */
	function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
	    var manager = recognizer.manager;
	    if (manager) {
	        return manager.get(otherRecognizer);
	    }
	    return otherRecognizer;
	}

	/**
	 * This recognizer is just used as a base for the simple attribute recognizers.
	 * @constructor
	 * @extends Recognizer
	 */
	function AttrRecognizer() {
	    Recognizer.apply(this, arguments);
	}

	inherit(AttrRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof AttrRecognizer
	     */
	    defaults: {
	        /**
	         * @type {Number}
	         * @default 1
	         */
	        pointers: 1
	    },

	    /**
	     * Used to check if it the recognizer receives valid input, like input.distance > 10.
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {Boolean} recognized
	     */
	    attrTest: function(input) {
	        var optionPointers = this.options.pointers;
	        return optionPointers === 0 || input.pointers.length === optionPointers;
	    },

	    /**
	     * Process the input and return the state for the recognizer
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {*} State
	     */
	    process: function(input) {
	        var state = this.state;
	        var eventType = input.eventType;

	        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
	        var isValid = this.attrTest(input);

	        // on cancel input and we've recognized before, return STATE_CANCELLED
	        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
	            return state | STATE_CANCELLED;
	        } else if (isRecognized || isValid) {
	            if (eventType & INPUT_END) {
	                return state | STATE_ENDED;
	            } else if (!(state & STATE_BEGAN)) {
	                return STATE_BEGAN;
	            }
	            return state | STATE_CHANGED;
	        }
	        return STATE_FAILED;
	    }
	});

	/**
	 * Pan
	 * Recognized when the pointer is down and moved in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PanRecognizer() {
	    AttrRecognizer.apply(this, arguments);

	    this.pX = null;
	    this.pY = null;
	}

	inherit(PanRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PanRecognizer
	     */
	    defaults: {
	        event: 'pan',
	        threshold: 10,
	        pointers: 1,
	        direction: DIRECTION_ALL
	    },

	    getTouchAction: function() {
	        var direction = this.options.direction;
	        var actions = [];
	        if (direction & DIRECTION_HORIZONTAL) {
	            actions.push(TOUCH_ACTION_PAN_Y);
	        }
	        if (direction & DIRECTION_VERTICAL) {
	            actions.push(TOUCH_ACTION_PAN_X);
	        }
	        return actions;
	    },

	    directionTest: function(input) {
	        var options = this.options;
	        var hasMoved = true;
	        var distance = input.distance;
	        var direction = input.direction;
	        var x = input.deltaX;
	        var y = input.deltaY;

	        // lock to axis?
	        if (!(direction & options.direction)) {
	            if (options.direction & DIRECTION_HORIZONTAL) {
	                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
	                hasMoved = x != this.pX;
	                distance = Math.abs(input.deltaX);
	            } else {
	                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
	                hasMoved = y != this.pY;
	                distance = Math.abs(input.deltaY);
	            }
	        }
	        input.direction = direction;
	        return hasMoved && distance > options.threshold && direction & options.direction;
	    },

	    attrTest: function(input) {
	        return AttrRecognizer.prototype.attrTest.call(this, input) &&
	            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
	    },

	    emit: function(input) {

	        this.pX = input.deltaX;
	        this.pY = input.deltaY;

	        var direction = directionStr(input.direction);

	        if (direction) {
	            input.additionalEvent = this.options.event + direction;
	        }
	        this._super.emit.call(this, input);
	    }
	});

	/**
	 * Pinch
	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PinchRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(PinchRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'pinch',
	        threshold: 0,
	        pointers: 2
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_NONE];
	    },

	    attrTest: function(input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
	    },

	    emit: function(input) {
	        if (input.scale !== 1) {
	            var inOut = input.scale < 1 ? 'in' : 'out';
	            input.additionalEvent = this.options.event + inOut;
	        }
	        this._super.emit.call(this, input);
	    }
	});

	/**
	 * Press
	 * Recognized when the pointer is down for x ms without any movement.
	 * @constructor
	 * @extends Recognizer
	 */
	function PressRecognizer() {
	    Recognizer.apply(this, arguments);

	    this._timer = null;
	    this._input = null;
	}

	inherit(PressRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PressRecognizer
	     */
	    defaults: {
	        event: 'press',
	        pointers: 1,
	        time: 251, // minimal time of the pointer to be pressed
	        threshold: 9 // a minimal movement is ok, but keep it low
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_AUTO];
	    },

	    process: function(input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTime = input.deltaTime > options.time;

	        this._input = input;

	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
	            this.reset();
	        } else if (input.eventType & INPUT_START) {
	            this.reset();
	            this._timer = setTimeoutContext(function() {
	                this.state = STATE_RECOGNIZED;
	                this.tryEmit();
	            }, options.time, this);
	        } else if (input.eventType & INPUT_END) {
	            return STATE_RECOGNIZED;
	        }
	        return STATE_FAILED;
	    },

	    reset: function() {
	        clearTimeout(this._timer);
	    },

	    emit: function(input) {
	        if (this.state !== STATE_RECOGNIZED) {
	            return;
	        }

	        if (input && (input.eventType & INPUT_END)) {
	            this.manager.emit(this.options.event + 'up', input);
	        } else {
	            this._input.timeStamp = now();
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});

	/**
	 * Rotate
	 * Recognized when two or more pointer are moving in a circular motion.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function RotateRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(RotateRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof RotateRecognizer
	     */
	    defaults: {
	        event: 'rotate',
	        threshold: 0,
	        pointers: 2
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_NONE];
	    },

	    attrTest: function(input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
	    }
	});

	/**
	 * Swipe
	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function SwipeRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(SwipeRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof SwipeRecognizer
	     */
	    defaults: {
	        event: 'swipe',
	        threshold: 10,
	        velocity: 0.3,
	        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
	        pointers: 1
	    },

	    getTouchAction: function() {
	        return PanRecognizer.prototype.getTouchAction.call(this);
	    },

	    attrTest: function(input) {
	        var direction = this.options.direction;
	        var velocity;

	        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
	            velocity = input.overallVelocity;
	        } else if (direction & DIRECTION_HORIZONTAL) {
	            velocity = input.overallVelocityX;
	        } else if (direction & DIRECTION_VERTICAL) {
	            velocity = input.overallVelocityY;
	        }

	        return this._super.attrTest.call(this, input) &&
	            direction & input.offsetDirection &&
	            input.distance > this.options.threshold &&
	            input.maxPointers == this.options.pointers &&
	            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
	    },

	    emit: function(input) {
	        var direction = directionStr(input.offsetDirection);
	        if (direction) {
	            this.manager.emit(this.options.event + direction, input);
	        }

	        this.manager.emit(this.options.event, input);
	    }
	});

	/**
	 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	 * a single tap.
	 *
	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	 * multi-taps being recognized.
	 * @constructor
	 * @extends Recognizer
	 */
	function TapRecognizer() {
	    Recognizer.apply(this, arguments);

	    // previous time and center,
	    // used for tap counting
	    this.pTime = false;
	    this.pCenter = false;

	    this._timer = null;
	    this._input = null;
	    this.count = 0;
	}

	inherit(TapRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'tap',
	        pointers: 1,
	        taps: 1,
	        interval: 300, // max time between the multi-tap taps
	        time: 250, // max time of the pointer to be down (like finger on the screen)
	        threshold: 9, // a minimal movement is ok, but keep it low
	        posThreshold: 10 // a multi-tap can be a bit off the initial position
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_MANIPULATION];
	    },

	    process: function(input) {
	        var options = this.options;

	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTouchTime = input.deltaTime < options.time;

	        this.reset();

	        if ((input.eventType & INPUT_START) && (this.count === 0)) {
	            return this.failTimeout();
	        }

	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (validMovement && validTouchTime && validPointers) {
	            if (input.eventType != INPUT_END) {
	                return this.failTimeout();
	            }

	            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
	            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

	            this.pTime = input.timeStamp;
	            this.pCenter = input.center;

	            if (!validMultiTap || !validInterval) {
	                this.count = 1;
	            } else {
	                this.count += 1;
	            }

	            this._input = input;

	            // if tap count matches we have recognized it,
	            // else it has began recognizing...
	            var tapCount = this.count % options.taps;
	            if (tapCount === 0) {
	                // no failing requirements, immediately trigger the tap event
	                // or wait as long as the multitap interval to trigger
	                if (!this.hasRequireFailures()) {
	                    return STATE_RECOGNIZED;
	                } else {
	                    this._timer = setTimeoutContext(function() {
	                        this.state = STATE_RECOGNIZED;
	                        this.tryEmit();
	                    }, options.interval, this);
	                    return STATE_BEGAN;
	                }
	            }
	        }
	        return STATE_FAILED;
	    },

	    failTimeout: function() {
	        this._timer = setTimeoutContext(function() {
	            this.state = STATE_FAILED;
	        }, this.options.interval, this);
	        return STATE_FAILED;
	    },

	    reset: function() {
	        clearTimeout(this._timer);
	    },

	    emit: function() {
	        if (this.state == STATE_RECOGNIZED) {
	            this._input.tapCount = this.count;
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});

	/**
	 * Simple way to create a manager with a default set of recognizers.
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Hammer(element, options) {
	    options = options || {};
	    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
	    return new Manager(element, options);
	}

	/**
	 * @const {string}
	 */
	Hammer.VERSION = '2.0.7';

	/**
	 * default settings
	 * @namespace
	 */
	Hammer.defaults = {
	    /**
	     * set if DOM events are being triggered.
	     * But this is slower and unused by simple implementations, so disabled by default.
	     * @type {Boolean}
	     * @default false
	     */
	    domEvents: false,

	    /**
	     * The value for the touchAction property/fallback.
	     * When set to `compute` it will magically set the correct value based on the added recognizers.
	     * @type {String}
	     * @default compute
	     */
	    touchAction: TOUCH_ACTION_COMPUTE,

	    /**
	     * @type {Boolean}
	     * @default true
	     */
	    enable: true,

	    /**
	     * EXPERIMENTAL FEATURE -- can be removed/changed
	     * Change the parent input target element.
	     * If Null, then it is being set the to main element.
	     * @type {Null|EventTarget}
	     * @default null
	     */
	    inputTarget: null,

	    /**
	     * force an input class
	     * @type {Null|Function}
	     * @default null
	     */
	    inputClass: null,

	    /**
	     * Default recognizer setup when calling `Hammer()`
	     * When creating a new Manager these will be skipped.
	     * @type {Array}
	     */
	    preset: [
	        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
	        [RotateRecognizer, {enable: false}],
	        [PinchRecognizer, {enable: false}, ['rotate']],
	        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
	        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
	        [TapRecognizer],
	        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
	        [PressRecognizer]
	    ],

	    /**
	     * Some CSS properties can be used to improve the working of Hammer.
	     * Add them to this method and they will be set when creating a new Manager.
	     * @namespace
	     */
	    cssProps: {
	        /**
	         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userSelect: 'none',

	        /**
	         * Disable the Windows Phone grippers when pressing an element.
	         * @type {String}
	         * @default 'none'
	         */
	        touchSelect: 'none',

	        /**
	         * Disables the default callout shown when you touch and hold a touch target.
	         * On iOS, when you touch and hold a touch target such as a link, Safari displays
	         * a callout containing information about the link. This property allows you to disable that callout.
	         * @type {String}
	         * @default 'none'
	         */
	        touchCallout: 'none',

	        /**
	         * Specifies whether zooming is enabled. Used by IE10>
	         * @type {String}
	         * @default 'none'
	         */
	        contentZooming: 'none',

	        /**
	         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userDrag: 'none',

	        /**
	         * Overrides the highlight color shown when the user taps a link or a JavaScript
	         * clickable element in iOS. This property obeys the alpha value, if specified.
	         * @type {String}
	         * @default 'rgba(0,0,0,0)'
	         */
	        tapHighlightColor: 'rgba(0,0,0,0)'
	    }
	};

	var STOP = 1;
	var FORCED_STOP = 2;

	/**
	 * Manager
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Manager(element, options) {
	    this.options = assign({}, Hammer.defaults, options || {});

	    this.options.inputTarget = this.options.inputTarget || element;

	    this.handlers = {};
	    this.session = {};
	    this.recognizers = [];
	    this.oldCssProps = {};

	    this.element = element;
	    this.input = createInputInstance(this);
	    this.touchAction = new TouchAction(this, this.options.touchAction);

	    toggleCssProps(this, true);

	    each(this.options.recognizers, function(item) {
	        var recognizer = this.add(new (item[0])(item[1]));
	        item[2] && recognizer.recognizeWith(item[2]);
	        item[3] && recognizer.requireFailure(item[3]);
	    }, this);
	}

	Manager.prototype = {
	    /**
	     * set options
	     * @param {Object} options
	     * @returns {Manager}
	     */
	    set: function(options) {
	        assign(this.options, options);

	        // Options that need a little more setup
	        if (options.touchAction) {
	            this.touchAction.update();
	        }
	        if (options.inputTarget) {
	            // Clean up existing event listeners and reinitialize
	            this.input.destroy();
	            this.input.target = options.inputTarget;
	            this.input.init();
	        }
	        return this;
	    },

	    /**
	     * stop recognizing for this session.
	     * This session will be discarded, when a new [input]start event is fired.
	     * When forced, the recognizer cycle is stopped immediately.
	     * @param {Boolean} [force]
	     */
	    stop: function(force) {
	        this.session.stopped = force ? FORCED_STOP : STOP;
	    },

	    /**
	     * run the recognizers!
	     * called by the inputHandler function on every movement of the pointers (touches)
	     * it walks through all the recognizers and tries to detect the gesture that is being made
	     * @param {Object} inputData
	     */
	    recognize: function(inputData) {
	        var session = this.session;
	        if (session.stopped) {
	            return;
	        }

	        // run the touch-action polyfill
	        this.touchAction.preventDefaults(inputData);

	        var recognizer;
	        var recognizers = this.recognizers;

	        // this holds the recognizer that is being recognized.
	        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
	        // if no recognizer is detecting a thing, it is set to `null`
	        var curRecognizer = session.curRecognizer;

	        // reset when the last recognizer is recognized
	        // or when we're in a new session
	        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
	            curRecognizer = session.curRecognizer = null;
	        }

	        var i = 0;
	        while (i < recognizers.length) {
	            recognizer = recognizers[i];

	            // find out if we are allowed try to recognize the input for this one.
	            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
	            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
	            //      that is being recognized.
	            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
	            //      this can be setup with the `recognizeWith()` method on the recognizer.
	            if (session.stopped !== FORCED_STOP && ( // 1
	                    !curRecognizer || recognizer == curRecognizer || // 2
	                    recognizer.canRecognizeWith(curRecognizer))) { // 3
	                recognizer.recognize(inputData);
	            } else {
	                recognizer.reset();
	            }

	            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
	            // current active recognizer. but only if we don't already have an active recognizer
	            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
	                curRecognizer = session.curRecognizer = recognizer;
	            }
	            i++;
	        }
	    },

	    /**
	     * get a recognizer by its event name.
	     * @param {Recognizer|String} recognizer
	     * @returns {Recognizer|Null}
	     */
	    get: function(recognizer) {
	        if (recognizer instanceof Recognizer) {
	            return recognizer;
	        }

	        var recognizers = this.recognizers;
	        for (var i = 0; i < recognizers.length; i++) {
	            if (recognizers[i].options.event == recognizer) {
	                return recognizers[i];
	            }
	        }
	        return null;
	    },

	    /**
	     * add a recognizer to the manager
	     * existing recognizers with the same event name will be removed
	     * @param {Recognizer} recognizer
	     * @returns {Recognizer|Manager}
	     */
	    add: function(recognizer) {
	        if (invokeArrayArg(recognizer, 'add', this)) {
	            return this;
	        }

	        // remove existing
	        var existing = this.get(recognizer.options.event);
	        if (existing) {
	            this.remove(existing);
	        }

	        this.recognizers.push(recognizer);
	        recognizer.manager = this;

	        this.touchAction.update();
	        return recognizer;
	    },

	    /**
	     * remove a recognizer by name or instance
	     * @param {Recognizer|String} recognizer
	     * @returns {Manager}
	     */
	    remove: function(recognizer) {
	        if (invokeArrayArg(recognizer, 'remove', this)) {
	            return this;
	        }

	        recognizer = this.get(recognizer);

	        // let's make sure this recognizer exists
	        if (recognizer) {
	            var recognizers = this.recognizers;
	            var index = inArray(recognizers, recognizer);

	            if (index !== -1) {
	                recognizers.splice(index, 1);
	                this.touchAction.update();
	            }
	        }

	        return this;
	    },

	    /**
	     * bind event
	     * @param {String} events
	     * @param {Function} handler
	     * @returns {EventEmitter} this
	     */
	    on: function(events, handler) {
	        if (events === undefined$1) {
	            return;
	        }
	        if (handler === undefined$1) {
	            return;
	        }

	        var handlers = this.handlers;
	        each(splitStr(events), function(event) {
	            handlers[event] = handlers[event] || [];
	            handlers[event].push(handler);
	        });
	        return this;
	    },

	    /**
	     * unbind event, leave emit blank to remove all handlers
	     * @param {String} events
	     * @param {Function} [handler]
	     * @returns {EventEmitter} this
	     */
	    off: function(events, handler) {
	        if (events === undefined$1) {
	            return;
	        }

	        var handlers = this.handlers;
	        each(splitStr(events), function(event) {
	            if (!handler) {
	                delete handlers[event];
	            } else {
	                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
	            }
	        });
	        return this;
	    },

	    /**
	     * emit event to the listeners
	     * @param {String} event
	     * @param {Object} data
	     */
	    emit: function(event, data) {
	        // we also want to trigger dom events
	        if (this.options.domEvents) {
	            triggerDomEvent(event, data);
	        }

	        // no handlers, so skip it all
	        var handlers = this.handlers[event] && this.handlers[event].slice();
	        if (!handlers || !handlers.length) {
	            return;
	        }

	        data.type = event;
	        data.preventDefault = function() {
	            data.srcEvent.preventDefault();
	        };

	        var i = 0;
	        while (i < handlers.length) {
	            handlers[i](data);
	            i++;
	        }
	    },

	    /**
	     * destroy the manager and unbinds all events
	     * it doesn't unbind dom events, that is the user own responsibility
	     */
	    destroy: function() {
	        this.element && toggleCssProps(this, false);

	        this.handlers = {};
	        this.session = {};
	        this.input.destroy();
	        this.element = null;
	    }
	};

	/**
	 * add/remove the css properties as defined in manager.options.cssProps
	 * @param {Manager} manager
	 * @param {Boolean} add
	 */
	function toggleCssProps(manager, add) {
	    var element = manager.element;
	    if (!element.style) {
	        return;
	    }
	    var prop;
	    each(manager.options.cssProps, function(value, name) {
	        prop = prefixed(element.style, name);
	        if (add) {
	            manager.oldCssProps[prop] = element.style[prop];
	            element.style[prop] = value;
	        } else {
	            element.style[prop] = manager.oldCssProps[prop] || '';
	        }
	    });
	    if (!add) {
	        manager.oldCssProps = {};
	    }
	}

	/**
	 * trigger dom event
	 * @param {String} event
	 * @param {Object} data
	 */
	function triggerDomEvent(event, data) {
	    var gestureEvent = document.createEvent('Event');
	    gestureEvent.initEvent(event, true, true);
	    gestureEvent.gesture = data;
	    data.target.dispatchEvent(gestureEvent);
	}

	assign(Hammer, {
	    INPUT_START: INPUT_START,
	    INPUT_MOVE: INPUT_MOVE,
	    INPUT_END: INPUT_END,
	    INPUT_CANCEL: INPUT_CANCEL,

	    STATE_POSSIBLE: STATE_POSSIBLE,
	    STATE_BEGAN: STATE_BEGAN,
	    STATE_CHANGED: STATE_CHANGED,
	    STATE_ENDED: STATE_ENDED,
	    STATE_RECOGNIZED: STATE_RECOGNIZED,
	    STATE_CANCELLED: STATE_CANCELLED,
	    STATE_FAILED: STATE_FAILED,

	    DIRECTION_NONE: DIRECTION_NONE,
	    DIRECTION_LEFT: DIRECTION_LEFT,
	    DIRECTION_RIGHT: DIRECTION_RIGHT,
	    DIRECTION_UP: DIRECTION_UP,
	    DIRECTION_DOWN: DIRECTION_DOWN,
	    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
	    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
	    DIRECTION_ALL: DIRECTION_ALL,

	    Manager: Manager,
	    Input: Input,
	    TouchAction: TouchAction,

	    TouchInput: TouchInput,
	    MouseInput: MouseInput,
	    PointerEventInput: PointerEventInput,
	    TouchMouseInput: TouchMouseInput,
	    SingleTouchInput: SingleTouchInput,

	    Recognizer: Recognizer,
	    AttrRecognizer: AttrRecognizer,
	    Tap: TapRecognizer,
	    Pan: PanRecognizer,
	    Swipe: SwipeRecognizer,
	    Pinch: PinchRecognizer,
	    Rotate: RotateRecognizer,
	    Press: PressRecognizer,

	    on: addEventListeners,
	    off: removeEventListeners,
	    each: each,
	    merge: merge,
	    extend: extend,
	    assign: assign,
	    inherit: inherit,
	    bindFn: bindFn,
	    prefixed: prefixed
	});

	// this prevents errors when Hammer is loaded in the presence of an AMD
	//  style loader but by script tag, not by the loader.
	var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
	freeGlobal.Hammer = Hammer;

	if (typeof undefined$1 === 'function' && undefined$1.amd) {
	    undefined$1(function() {
	        return Hammer;
	    });
	} else if ( module.exports) {
	    module.exports = Hammer;
	} else {
	    window[exportName] = Hammer;
	}

	})(window, document, 'Hammer');
	});

	var MIN_ZOOM = 0.2,
	    MAX_ZOOM = 4;

	var mouseEvents = [
	  'mousedown',
	  'mouseup',
	  'mouseover',
	  'mouseout',
	  'click',
	  'dblclick'
	];

	function get$1(service, injector) {
	  return injector.get(service, false);
	}

	function stopEvent(event) {

	  event.preventDefault();

	  if (typeof event.stopPropagation === 'function') {
	    event.stopPropagation();
	  } else if (event.srcEvent && typeof event.srcEvent.stopPropagation === 'function') {

	    // iPhone & iPad
	    event.srcEvent.stopPropagation();
	  }

	  if (typeof event.stopImmediatePropagation === 'function') {
	    event.stopImmediatePropagation();
	  }
	}


	function createTouchRecognizer(node) {

	  function stopMouse(event) {

	    forEach(mouseEvents, function(e) {
	      componentEvent.bind(node, e, stopEvent, true);
	    });
	  }

	  function allowMouse(event) {
	    setTimeout(function() {
	      forEach(mouseEvents, function(e) {
	        componentEvent.unbind(node, e, stopEvent, true);
	      });
	    }, 500);
	  }

	  componentEvent.bind(node, 'touchstart', stopMouse, true);
	  componentEvent.bind(node, 'touchend', allowMouse, true);
	  componentEvent.bind(node, 'touchcancel', allowMouse, true);

	  // A touch event recognizer that handles
	  // touch events only (we know, we can already handle
	  // mouse events out of the box)

	  var recognizer = new hammer.Manager(node, {
	    inputClass: hammer.TouchInput,
	    recognizers: [],
	    domEvents: true
	  });


	  var tap = new hammer.Tap();
	  var pan = new hammer.Pan({ threshold: 10 });
	  var press = new hammer.Press();
	  var pinch = new hammer.Pinch();

	  var doubleTap = new hammer.Tap({ event: 'doubletap', taps: 2 });

	  pinch.requireFailure(pan);
	  pinch.requireFailure(press);

	  recognizer.add([ pan, press, pinch, doubleTap, tap ]);

	  recognizer.reset = function(force) {
	    var recognizers = this.recognizers,
	        session = this.session;

	    if (session.stopped) {
	      return;
	    }

	    recognizer.stop(force);

	    setTimeout(function() {
	      var i, r;
	      for (i = 0; (r = recognizers[i]); i++) {
	        r.reset();
	        r.state = 8; // FAILED STATE
	      }

	      session.curRecognizer = null;
	    }, 0);
	  };

	  recognizer.on('hammer.input', function(event) {
	    if (event.srcEvent.defaultPrevented) {
	      recognizer.reset(true);
	    }
	  });

	  return recognizer;
	}

	/**
	 * A plugin that provides touch events for elements.
	 *
	 * @param {EventBus} eventBus
	 * @param {InteractionEvents} interactionEvents
	 */
	function TouchInteractionEvents(
	    injector, canvas, eventBus,
	    elementRegistry, interactionEvents) {

	  // optional integrations
	  var dragging = get$1('dragging', injector),
	      move = get$1('move', injector),
	      contextPad = get$1('contextPad', injector),
	      palette = get$1('palette', injector);

	  // the touch recognizer
	  var recognizer;

	  function handler(type) {

	    return function(event) {

	      interactionEvents.fire(type, event);
	    };
	  }

	  function getGfx(target) {
	    var node = closest(target, 'svg, .djs-element', true);
	    return node;
	  }

	  function initEvents(svg) {

	    // touch recognizer
	    recognizer = createTouchRecognizer(svg);

	    recognizer.on('doubletap', handler('element.dblclick'));

	    recognizer.on('tap', handler('element.click'));

	    function startGrabCanvas(event) {

	      var lx = 0, ly = 0;

	      function update(e) {

	        var dx = e.deltaX - lx,
	            dy = e.deltaY - ly;

	        canvas.scroll({ dx: dx, dy: dy });

	        lx = e.deltaX;
	        ly = e.deltaY;
	      }

	      function end(e) {
	        recognizer.off('panmove', update);
	        recognizer.off('panend', end);
	        recognizer.off('pancancel', end);
	      }

	      recognizer.on('panmove', update);
	      recognizer.on('panend', end);
	      recognizer.on('pancancel', end);
	    }

	    function startGrab(event) {

	      var gfx = getGfx(event.target),
	          element = gfx && elementRegistry.get(gfx);

	      // recognizer
	      if (move && canvas.getRootElement() !== element) {
	        return move.start(event, element, true);
	      } else {
	        startGrabCanvas();
	      }
	    }

	    function startZoom(e) {

	      var zoom = canvas.zoom(),
	          mid = e.center;

	      function update(e) {

	        var ratio = 1 - (1 - e.scale) / 1.50,
	            newZoom = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, ratio * zoom));

	        canvas.zoom(newZoom, mid);

	        stopEvent(e);
	      }

	      function end(e) {
	        recognizer.off('pinchmove', update);
	        recognizer.off('pinchend', end);
	        recognizer.off('pinchcancel', end);

	        recognizer.reset(true);
	      }

	      recognizer.on('pinchmove', update);
	      recognizer.on('pinchend', end);
	      recognizer.on('pinchcancel', end);
	    }

	    recognizer.on('panstart', startGrab);
	    recognizer.on('press', startGrab);

	    recognizer.on('pinchstart', startZoom);
	  }

	  if (dragging) {

	    // simulate hover during dragging
	    eventBus.on('drag.move', function(event) {

	      var originalEvent = event.originalEvent;

	      if (!originalEvent || originalEvent instanceof MouseEvent) {
	        return;
	      }

	      var position = toPoint(originalEvent);

	      // this gets really expensive ...
	      var node = document.elementFromPoint(position.x, position.y),
	          gfx = getGfx(node),
	          element = gfx && elementRegistry.get(gfx);

	      if (element !== event.hover) {
	        if (event.hover) {
	          dragging.out(event);
	        }

	        if (element) {
	          dragging.hover({ element: element, gfx: gfx });

	          event.hover = element;
	          event.hoverGfx = gfx;
	        }
	      }
	    });
	  }

	  if (contextPad) {

	    eventBus.on('contextPad.create', function(event) {
	      var node = event.pad.html;

	      // touch recognizer
	      var padRecognizer = createTouchRecognizer(node);

	      padRecognizer.on('panstart', function(event) {
	        contextPad.trigger('dragstart', event, true);
	      });

	      padRecognizer.on('press', function(event) {
	        contextPad.trigger('dragstart', event, true);
	      });

	      padRecognizer.on('tap', function(event) {
	        contextPad.trigger('click', event);
	      });
	    });
	  }

	  if (palette) {
	    eventBus.on('palette.create', function(event) {
	      var node = event.container;

	      // touch recognizer
	      var padRecognizer = createTouchRecognizer(node);

	      padRecognizer.on('panstart', function(event) {
	        palette.trigger('dragstart', event, true);
	      });

	      padRecognizer.on('press', function(event) {
	        palette.trigger('dragstart', event, true);
	      });

	      padRecognizer.on('tap', function(event) {
	        palette.trigger('click', event);
	      });
	    });
	  }

	  eventBus.on('canvas.init', function(event) {
	    initEvents(event.svg);
	  });
	}


	TouchInteractionEvents.$inject = [
	  'injector',
	  'canvas',
	  'eventBus',
	  'elementRegistry',
	  'interactionEvents',
	  'touchFix'
	];

	function TouchFix(canvas, eventBus) {

	  var self = this;

	  eventBus.on('canvas.init', function(e) {
	    self.addBBoxMarker(e.svg);
	  });
	}

	TouchFix.$inject = [ 'canvas', 'eventBus' ];


	/**
	 * Safari mobile (iOS 7) does not fire touchstart event in <SVG> element
	 * if there is no shape between 0,0 and viewport elements origin.
	 *
	 * So touchstart event is only fired when the <g class="viewport"> element was hit.
	 * Putting an element over and below the 'viewport' fixes that behavior.
	 */
	TouchFix.prototype.addBBoxMarker = function(svg) {

	  var markerStyle = {
	    fill: 'none',
	    class: 'outer-bound-marker'
	  };

	  var rect1 = create('rect');
	  attr$1(rect1, {
	    x: -10000,
	    y: 10000,
	    width: 10,
	    height: 10
	  });
	  attr$1(rect1, markerStyle);

	  append(svg, rect1);

	  var rect2 = create('rect');
	  attr$1(rect2, {
	    x: 10000,
	    y: 10000,
	    width: 10,
	    height: 10
	  });
	  attr$1(rect2, markerStyle);

	  append(svg, rect2);
	};

	var TouchModule = {
	  __depends__: [ InteractionEventsModule ],
	  __init__: [ 'touchInteractionEvents' ],
	  touchInteractionEvents: [ 'type', TouchInteractionEvents ],
	  touchFix: [ 'type', TouchFix ]
	};

	var TouchModule$1 = {
	  __depends__: [
	    TouchModule
	  ]
	};

	function last(arr) {
	  return arr && arr[arr.length - 1];
	}

	function sortTopOrMiddle(element) {
	  return element.y;
	}

	function sortLeftOrCenter(element) {
	  return element.x;
	}

	/**
	 * Sorting functions for different types of alignment
	 *
	 * @type {Object}
	 *
	 * @return {Function}
	 */
	var ALIGNMENT_SORTING = {
	  left: sortLeftOrCenter,
	  center: sortLeftOrCenter,
	  right: function(element) {
	    return element.x + element.width;
	  },
	  top: sortTopOrMiddle,
	  middle: sortTopOrMiddle,
	  bottom: function(element) {
	    return element.y + element.height;
	  }
	};


	function AlignElements(modeling) {
	  this._modeling = modeling;
	}

	AlignElements.$inject = [ 'modeling' ];


	/**
	 * Get the relevant "axis" and "dimension" related to the current type of alignment
	 *
	 * @param  {string} type left|right|center|top|bottom|middle
	 *
	 * @return {Object} { axis, dimension }
	 */
	AlignElements.prototype._getOrientationDetails = function(type) {
	  var vertical = [ 'top', 'bottom', 'middle' ],
	      axis = 'x',
	      dimension = 'width';

	  if (vertical.indexOf(type) !== -1) {
	    axis = 'y';
	    dimension = 'height';
	  }

	  return {
	    axis: axis,
	    dimension: dimension
	  };
	};

	AlignElements.prototype._isType = function(type, types) {
	  return types.indexOf(type) !== -1;
	};

	/**
	 * Get a point on the relevant axis where elements should align to
	 *
	 * @param  {string} type left|right|center|top|bottom|middle
	 * @param  {Array} sortedElements
	 *
	 * @return {Object}
	 */
	AlignElements.prototype._alignmentPosition = function(type, sortedElements) {
	  var orientation = this._getOrientationDetails(type),
	      axis = orientation.axis,
	      dimension = orientation.dimension,
	      alignment = {},
	      centers = {},
	      hasSharedCenters = false,
	      centeredElements,
	      firstElement,
	      lastElement;

	  function getMiddleOrTop(first, last) {
	    return Math.round((first[axis] + last[axis] + last[dimension]) / 2);
	  }

	  if (this._isType(type, [ 'left', 'top' ])) {
	    alignment[type] = sortedElements[0][axis];

	  } else if (this._isType(type, [ 'right', 'bottom' ])) {
	    lastElement = last(sortedElements);

	    alignment[type] = lastElement[axis] + lastElement[dimension];

	  } else if (this._isType(type, [ 'center', 'middle' ])) {

	    // check if there is a center shared by more than one shape
	    // if not, just take the middle of the range
	    forEach(sortedElements, function(element) {
	      var center = element[axis] + Math.round(element[dimension] / 2);

	      if (centers[center]) {
	        centers[center].elements.push(element);
	      } else {
	        centers[center] = {
	          elements: [ element ],
	          center: center
	        };
	      }
	    });

	    centeredElements = sortBy(centers, function(center) {
	      if (center.elements.length > 1) {
	        hasSharedCenters = true;
	      }

	      return center.elements.length;
	    });

	    if (hasSharedCenters) {
	      alignment[type] = last(centeredElements).center;

	      return alignment;
	    }

	    firstElement = sortedElements[0];

	    sortedElements = sortBy(sortedElements, function(element) {
	      return element[axis] + element[dimension];
	    });

	    lastElement = last(sortedElements);

	    alignment[type] = getMiddleOrTop(firstElement, lastElement);
	  }

	  return alignment;
	};

	/**
	 * Executes the alignment of a selection of elements
	 *
	 * @param  {Array} elements [description]
	 * @param  {string} type left|right|center|top|bottom|middle
	 */
	AlignElements.prototype.trigger = function(elements, type) {
	  var modeling = this._modeling;

	  var filteredElements = filter(elements, function(element) {
	    return !(element.waypoints || element.host || element.labelTarget);
	  });

	  if (filteredElements.length < 2) {
	    return;
	  }

	  var sortFn = ALIGNMENT_SORTING[type];

	  var sortedElements = sortBy(filteredElements, sortFn);

	  var alignment = this._alignmentPosition(type, sortedElements);

	  modeling.alignElements(sortedElements, alignment);
	};

	var AlignElementsModule = {
	  __init__: [ 'alignElements' ],
	  alignElements: [ 'type', AlignElements ]
	};

	// padding to detect element placement
	var PLACEMENT_DETECTION_PAD = 10;

	var DEFAULT_DISTANCE = 50;

	var DEFAULT_MAX_DISTANCE = 250;


	/**
	 * Get free position starting from given position.
	 *
	 * @param {djs.model.Shape} source
	 * @param {djs.model.Shape} element
	 * @param {Point} position
	 * @param {Function} getNextPosition
	 *
	 * @return {Point}
	 */
	function findFreePosition(source, element, position, getNextPosition) {
	  var connectedAtPosition;

	  while ((connectedAtPosition = getConnectedAtPosition(source, position, element))) {
	    position = getNextPosition(element, position, connectedAtPosition);
	  }

	  return position;
	}

	/**
	 * Returns function that returns next position.
	 *
	 * @param {Object} nextPositionDirection
	 * @param {Object} [nextPositionDirection.x]
	 * @param {Object} [nextPositionDirection.y]
	 *
	 * @returns {Function}
	 */
	function generateGetNextPosition(nextPositionDirection) {
	  return function(element, previousPosition, connectedAtPosition) {
	    var nextPosition = {
	      x: previousPosition.x,
	      y: previousPosition.y
	    };

	    [ 'x', 'y' ].forEach(function(axis) {

	      var nextPositionDirectionForAxis = nextPositionDirection[ axis ];

	      if (!nextPositionDirectionForAxis) {
	        return;
	      }

	      var dimension = axis === 'x' ? 'width' : 'height';

	      var margin = nextPositionDirectionForAxis.margin,
	          minDistance = nextPositionDirectionForAxis.minDistance;

	      if (margin < 0) {
	        nextPosition[ axis ] = Math.min(
	          connectedAtPosition[ axis ] + margin - element[ dimension ] / 2,
	          previousPosition[ axis ] - minDistance + margin
	        );
	      } else {
	        nextPosition[ axis ] = Math.max(
	          connectedAtPosition[ axis ] + connectedAtPosition[ dimension ] + margin + element[ dimension ] / 2,
	          previousPosition[ axis ] + minDistance + margin
	        );
	      }
	    });

	    return nextPosition;
	  };
	}

	/**
	 * Return target at given position, if defined.
	 *
	 * This takes connected elements from host and attachers
	 * into account, too.
	 */
	function getConnectedAtPosition(source, position, element) {

	  var bounds = {
	    x: position.x - (element.width / 2),
	    y: position.y - (element.height / 2),
	    width: element.width,
	    height: element.height
	  };

	  var closure = getAutoPlaceClosure(source);

	  return find(closure, function(target) {

	    if (target === element) {
	      return false;
	    }

	    var orientation = getOrientation(target, bounds, PLACEMENT_DETECTION_PAD);

	    return orientation === 'intersect';
	  });
	}

	/**
	* Compute optimal distance between source and target based on existing connections to and from source.
	* Assumes left-to-right and top-to-down modeling.
	*
	* @param {djs.model.Shape} source
	* @param {Object} [hints]
	* @param {number} [hints.defaultDistance]
	* @param {string} [hints.direction]
	* @param {Function} [hints.filter]
	* @param {Function} [hints.getWeight]
	* @param {number} [hints.maxDistance]
	* @param {string} [hints.reference]
	*
	* @return {number}
	*/
	function getConnectedDistance(source, hints) {
	  if (!hints) {
	    hints = {};
	  }

	  // targets > sources by default
	  function getDefaultWeight(connection) {
	    return connection.source === source ? 1 : -1;
	  }

	  var defaultDistance = hints.defaultDistance || DEFAULT_DISTANCE,
	      direction = hints.direction || 'e',
	      filter = hints.filter,
	      getWeight = hints.getWeight || getDefaultWeight,
	      maxDistance = hints.maxDistance || DEFAULT_MAX_DISTANCE,
	      reference = hints.reference || 'start';

	  if (!filter) {
	    filter = noneFilter;
	  }

	  function getDistance(a, b) {
	    if (direction === 'n') {
	      if (reference === 'start') {
	        return asTRBL(a).top - asTRBL(b).bottom;
	      } else if (reference === 'center') {
	        return asTRBL(a).top - getMid(b).y;
	      } else {
	        return asTRBL(a).top - asTRBL(b).top;
	      }
	    } else if (direction === 'w') {
	      if (reference === 'start') {
	        return asTRBL(a).left - asTRBL(b).right;
	      } else if (reference === 'center') {
	        return asTRBL(a).left - getMid(b).x;
	      } else {
	        return asTRBL(a).left - asTRBL(b).left;
	      }
	    } else if (direction === 's') {
	      if (reference === 'start') {
	        return asTRBL(b).top - asTRBL(a).bottom;
	      } else if (reference === 'center') {
	        return getMid(b).y - asTRBL(a).bottom;
	      } else {
	        return asTRBL(b).bottom - asTRBL(a).bottom;
	      }
	    } else {
	      if (reference === 'start') {
	        return asTRBL(b).left - asTRBL(a).right;
	      } else if (reference === 'center') {
	        return getMid(b).x - asTRBL(a).right;
	      } else {
	        return asTRBL(b).right - asTRBL(a).right;
	      }
	    }
	  }

	  var sourcesDistances = source.incoming
	    .filter(filter)
	    .map(function(connection) {
	      var weight = getWeight(connection);

	      var distance = weight < 0
	        ? getDistance(connection.source, source)
	        : getDistance(source, connection.source);

	      return {
	        id: connection.source.id,
	        distance: distance,
	        weight: weight
	      };
	    });

	  var targetsDistances = source.outgoing
	    .filter(filter)
	    .map(function(connection) {
	      var weight = getWeight(connection);

	      var distance = weight > 0
	        ? getDistance(source, connection.target)
	        : getDistance(connection.target, source);

	      return {
	        id: connection.target.id,
	        distance: distance,
	        weight: weight
	      };
	    });

	  var distances = sourcesDistances.concat(targetsDistances).reduce(function(accumulator, currentValue) {
	    accumulator[ currentValue.id + '__weight_' + currentValue.weight ] = currentValue;

	    return accumulator;
	  }, {});

	  var distancesGrouped = reduce(distances, function(accumulator, currentValue) {
	    var distance = currentValue.distance,
	        weight = currentValue.weight;

	    if (distance < 0 || distance > maxDistance) {
	      return accumulator;
	    }

	    if (!accumulator[ String(distance) ]) {
	      accumulator[ String(distance) ] = 0;
	    }

	    accumulator[ String(distance) ] += 1 * weight;

	    if (!accumulator.distance || accumulator[ accumulator.distance ] < accumulator[ String(distance) ]) {
	      accumulator.distance = distance;
	    }

	    return accumulator;
	  }, {});

	  return distancesGrouped.distance || defaultDistance;
	}

	/**
	 * Returns all connected elements around the given source.
	 *
	 * This includes:
	 *
	 *   - connected elements
	 *   - host connected elements
	 *   - attachers connected elements
	 *
	 * @param  {djs.model.Shape} source
	 *
	 * @return {Array<djs.model.Shape>}
	 */
	function getAutoPlaceClosure(source) {

	  var allConnected = getConnected(source);

	  if (source.host) {
	    allConnected = allConnected.concat(getConnected(source.host));
	  }

	  if (source.attachers) {
	    allConnected = allConnected.concat(source.attachers.reduce(function(shapes, attacher) {
	      return shapes.concat(getConnected(attacher));
	    }, []));
	  }

	  return allConnected;
	}

	function getConnected(element) {
	  return getTargets(element).concat(getSources(element));
	}

	function getSources(shape) {
	  return shape.incoming.map(function(connection) {
	    return connection.source;
	  });
	}

	function getTargets(shape) {
	  return shape.outgoing.map(function(connection) {
	    return connection.target;
	  });
	}

	function noneFilter() {
	  return true;
	}

	var LOW_PRIORITY$4 = 100;


	/**
	 * A service that places elements connected to existing ones
	 * to an appropriate position in an _automated_ fashion.
	 *
	 * @param {EventBus} eventBus
	 * @param {Modeling} modeling
	 */
	function AutoPlace(eventBus, modeling) {

	  eventBus.on('autoPlace', LOW_PRIORITY$4, function(context) {
	    var shape = context.shape,
	        source = context.source;

	    return getNewShapePosition(source, shape);
	  });

	  /**
	   * Append shape to source at appropriate position.
	   *
	   * @param {djs.model.Shape} source
	   * @param {djs.model.Shape} shape
	   *
	   * @return {djs.model.Shape} appended shape
	   */
	  this.append = function(source, shape, hints) {

	    eventBus.fire('autoPlace.start', {
	      source: source,
	      shape: shape
	    });

	    // allow others to provide the position
	    var position = eventBus.fire('autoPlace', {
	      source: source,
	      shape: shape
	    });

	    var newShape = modeling.appendShape(source, shape, position, source.parent, hints);

	    eventBus.fire('autoPlace.end', {
	      source: source,
	      shape: newShape
	    });

	    return newShape;
	  };

	}

	AutoPlace.$inject = [
	  'eventBus',
	  'modeling'
	];

	// helpers //////////

	/**
	 * Find the new position for the target element to
	 * connect to source.
	 *
	 * @param  {djs.model.Shape} source
	 * @param  {djs.model.Shape} element
	 * @param  {Object} [hints]
	 * @param  {Object} [hints.defaultDistance]
	 *
	 * @returns {Point}
	 */
	function getNewShapePosition(source, element, hints) {
	  if (!hints) {
	    hints = {};
	  }

	  var distance = hints.defaultDistance || DEFAULT_DISTANCE;

	  var sourceMid = getMid(source),
	      sourceTrbl = asTRBL(source);

	  // simply put element right next to source
	  return {
	    x: sourceTrbl.right + distance + element.width / 2,
	    y: sourceMid.y
	  };
	}

	/**
	 * Select element after auto placement.
	 *
	 * @param {EventBus} eventBus
	 * @param {Selection} selection
	 */
	function AutoPlaceSelectionBehavior(eventBus, selection) {

	  eventBus.on('autoPlace.end', 500, function(e) {
	    selection.select(e.shape);
	  });

	}

	AutoPlaceSelectionBehavior.$inject = [
	  'eventBus',
	  'selection'
	];

	var AutoPlaceModule = {
	  __init__: [ 'autoPlaceSelectionBehavior' ],
	  autoPlace: [ 'type', AutoPlace ],
	  autoPlaceSelectionBehavior: [ 'type', AutoPlaceSelectionBehavior ]
	};

	/**
	 * Return true if element has any of the given types.
	 *
	 * @param {djs.model.Base} element
	 * @param {Array<string>} types
	 *
	 * @return {boolean}
	 */
	function isAny(element, types) {
	  return some(types, function(t) {
	    return is$1(element, t);
	  });
	}


	/**
	 * Return the parent of the element with any of the given types.
	 *
	 * @param {djs.model.Base} element
	 * @param {string|Array<string>} anyType
	 *
	 * @return {djs.model.Base}
	 */
	function getParent$1(element, anyType) {

	  if (typeof anyType === 'string') {
	    anyType = [ anyType ];
	  }

	  while ((element = element.parent)) {
	    if (isAny(element, anyType)) {
	      return element;
	    }
	  }

	  return null;
	}

	var ModelingUtil = /*#__PURE__*/Object.freeze({
		__proto__: null,
		isAny: isAny,
		getParent: getParent$1
	});

	/**
	 * Find the new position for the target element to
	 * connect to source.
	 *
	 * @param  {djs.model.Shape} source
	 * @param  {djs.model.Shape} element
	 *
	 * @return {Point}
	 */
	function getNewShapePosition$1(source, element) {

	  if (is$1(element, 'bpmn:TextAnnotation')) {
	    return getTextAnnotationPosition(source, element);
	  }

	  if (isAny(element, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ])) {
	    return getDataElementPosition(source, element);
	  }

	  if (is$1(element, 'bpmn:FlowNode')) {
	    return getFlowNodePosition(source, element);
	  }
	}

	/**
	 * Always try to place element right of source;
	 * compute actual distance from previous nodes in flow.
	 */
	function getFlowNodePosition(source, element) {

	  var sourceTrbl = asTRBL(source);
	  var sourceMid = getMid(source);

	  var horizontalDistance = getConnectedDistance(source, {
	    filter: function(connection) {
	      return is$1(connection, 'bpmn:SequenceFlow');
	    }
	  });

	  var margin = 30,
	      minDistance = 80,
	      orientation = 'left';

	  if (is$1(source, 'bpmn:BoundaryEvent')) {
	    orientation = getOrientation(source, source.host, -25);

	    if (orientation.indexOf('top') !== -1) {
	      margin *= -1;
	    }
	  }

	  var position = {
	    x: sourceTrbl.right + horizontalDistance + element.width / 2,
	    y: sourceMid.y + getVerticalDistance(orientation, minDistance)
	  };

	  var nextPositionDirection = {
	    y: {
	      margin: margin,
	      minDistance: minDistance
	    }
	  };

	  return findFreePosition(source, element, position, generateGetNextPosition(nextPositionDirection));
	}


	function getVerticalDistance(orientation, minDistance) {
	  if (orientation.indexOf('top') != -1) {
	    return -1 * minDistance;
	  } else if (orientation.indexOf('bottom') != -1) {
	    return minDistance;
	  } else {
	    return 0;
	  }
	}


	/**
	 * Always try to place text annotations top right of source.
	 */
	function getTextAnnotationPosition(source, element) {

	  var sourceTrbl = asTRBL(source);

	  var position = {
	    x: sourceTrbl.right + element.width / 2,
	    y: sourceTrbl.top - 50 - element.height / 2
	  };

	  var nextPositionDirection = {
	    y: {
	      margin: -30,
	      minDistance: 20
	    }
	  };

	  return findFreePosition(source, element, position, generateGetNextPosition(nextPositionDirection));
	}


	/**
	 * Always put element bottom right of source.
	 */
	function getDataElementPosition(source, element) {

	  var sourceTrbl = asTRBL(source);

	  var position = {
	    x: sourceTrbl.right - 10 + element.width / 2,
	    y: sourceTrbl.bottom + 40 + element.width / 2
	  };

	  var nextPositionDirection = {
	    x: {
	      margin: 30,
	      minDistance: 30
	    }
	  };

	  return findFreePosition(source, element, position, generateGetNextPosition(nextPositionDirection));
	}

	/**
	 * BPMN auto-place behavior.
	 *
	 * @param {EventBus} eventBus
	 */
	function AutoPlace$1(eventBus) {
	  eventBus.on('autoPlace', function(context) {
	    var shape = context.shape,
	        source = context.source;

	    return getNewShapePosition$1(source, shape);
	  });
	}

	AutoPlace$1.$inject = [ 'eventBus' ];

	var AutoPlaceModule$1 = {
	  __depends__: [ AutoPlaceModule ],
	  __init__: [ 'bpmnAutoPlace' ],
	  bpmnAutoPlace: [ 'type', AutoPlace$1 ]
	};

	var DEFAULT_PRIORITY$2 = 1000;

	/**
	 * A utility that can be used to plug-in into the command execution for
	 * extension and/or validation.
	 *
	 * @param {EventBus} eventBus
	 *
	 * @example
	 *
	 * import inherits from 'inherits';
	 *
	 * import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';
	 *
	 * function CommandLogger(eventBus) {
	 *   CommandInterceptor.call(this, eventBus);
	 *
	 *   this.preExecute(function(event) {
	 *     console.log('command pre-execute', event);
	 *   });
	 * }
	 *
	 * inherits(CommandLogger, CommandInterceptor);
	 *
	 */
	function CommandInterceptor(eventBus) {
	  this._eventBus = eventBus;
	}

	CommandInterceptor.$inject = [ 'eventBus' ];

	function unwrapEvent(fn, that) {
	  return function(event) {
	    return fn.call(that || null, event.context, event.command, event);
	  };
	}

	/**
	 * Register an interceptor for a command execution
	 *
	 * @param {string|Array<string>} [events] list of commands to register on
	 * @param {string} [hook] command hook, i.e. preExecute, executed to listen on
	 * @param {number} [priority] the priority on which to hook into the execution
	 * @param {Function} handlerFn interceptor to be invoked with (event)
	 * @param {boolean} unwrap if true, unwrap the event and pass (context, command, event) to the
	 *                          listener instead
	 * @param {Object} [that] Pass context (`this`) to the handler function
	 */
	CommandInterceptor.prototype.on = function(events, hook, priority, handlerFn, unwrap, that) {

	  if (isFunction(hook) || isNumber(hook)) {
	    that = unwrap;
	    unwrap = handlerFn;
	    handlerFn = priority;
	    priority = hook;
	    hook = null;
	  }

	  if (isFunction(priority)) {
	    that = unwrap;
	    unwrap = handlerFn;
	    handlerFn = priority;
	    priority = DEFAULT_PRIORITY$2;
	  }

	  if (isObject(unwrap)) {
	    that = unwrap;
	    unwrap = false;
	  }

	  if (!isFunction(handlerFn)) {
	    throw new Error('handlerFn must be a function');
	  }

	  if (!isArray(events)) {
	    events = [ events ];
	  }

	  var eventBus = this._eventBus;

	  forEach(events, function(event) {

	    // concat commandStack(.event)?(.hook)?
	    var fullEvent = [ 'commandStack', event, hook ].filter(function(e) { return e; }).join('.');

	    eventBus.on(fullEvent, priority, unwrap ? unwrapEvent(handlerFn, that) : handlerFn, that);
	  });
	};


	var hooks = [
	  'canExecute',
	  'preExecute',
	  'preExecuted',
	  'execute',
	  'executed',
	  'postExecute',
	  'postExecuted',
	  'revert',
	  'reverted'
	];

	/*
	 * Install hook shortcuts
	 *
	 * This will generate the CommandInterceptor#(preExecute|...|reverted) methods
	 * which will in term forward to CommandInterceptor#on.
	 */
	forEach(hooks, function(hook) {

	  /**
	   * {canExecute|preExecute|preExecuted|execute|executed|postExecute|postExecuted|revert|reverted}
	   *
	   * A named hook for plugging into the command execution
	   *
	   * @param {string|Array<string>} [events] list of commands to register on
	   * @param {number} [priority] the priority on which to hook into the execution
	   * @param {Function} handlerFn interceptor to be invoked with (event)
	   * @param {boolean} [unwrap=false] if true, unwrap the event and pass (context, command, event) to the
	   *                          listener instead
	   * @param {Object} [that] Pass context (`this`) to the handler function
	   */
	  CommandInterceptor.prototype[hook] = function(events, priority, handlerFn, unwrap, that) {

	    if (isFunction(events) || isNumber(events)) {
	      that = unwrap;
	      unwrap = handlerFn;
	      handlerFn = priority;
	      priority = events;
	      events = null;
	    }

	    this.on(events, hook, priority, handlerFn, unwrap, that);
	  };
	});

	/**
	 * An auto resize component that takes care of expanding a parent element
	 * if child elements are created or moved close the parents edge.
	 *
	 * @param {EventBus} eventBus
	 * @param {ElementRegistry} elementRegistry
	 * @param {Modeling} modeling
	 * @param {Rules} rules
	 */
	function AutoResize(eventBus, elementRegistry, modeling, rules) {

	  CommandInterceptor.call(this, eventBus);

	  this._elementRegistry = elementRegistry;
	  this._modeling = modeling;
	  this._rules = rules;

	  var self = this;

	  this.postExecuted([ 'shape.create' ], function(event) {
	    var context = event.context,
	        hints = context.hints || {},
	        shape = context.shape,
	        parent = context.parent || context.newParent;

	    if (hints.autoResize === false) {
	      return;
	    }

	    self._expand([ shape ], parent);
	  });

	  this.postExecuted([ 'elements.move' ], function(event) {
	    var context = event.context,
	        elements = flatten(values(context.closure.topLevel)),
	        hints = context.hints;

	    var autoResize = hints ? hints.autoResize : true;

	    if (autoResize === false) {
	      return;
	    }

	    var expandings = groupBy(elements, function(element) {
	      return element.parent.id;
	    });

	    forEach(expandings, function(elements, parentId) {

	      // optionally filter elements to be considered when resizing
	      if (isArray(autoResize)) {
	        elements = elements.filter(function(element) {
	          return find(autoResize, matchPattern({ id: element.id }));
	        });
	      }

	      self._expand(elements, parentId);
	    });
	  });

	  this.postExecuted([ 'shape.toggleCollapse' ], function(event) {
	    var context = event.context,
	        hints = context.hints,
	        shape = context.shape;

	    if (hints && hints.autoResize === false) {
	      return;
	    }

	    if (shape.collapsed) {
	      return;
	    }

	    self._expand(shape.children || [], shape);
	  });

	  this.postExecuted([ 'shape.resize' ], function(event) {
	    var context = event.context,
	        hints = context.hints,
	        shape = context.shape,
	        parent = shape.parent;

	    if (hints && hints.autoResize === false) {
	      return;
	    }

	    if (parent) {
	      self._expand([ shape ], parent);
	    }
	  });

	}

	AutoResize.$inject = [
	  'eventBus',
	  'elementRegistry',
	  'modeling',
	  'rules'
	];

	inherits_browser(AutoResize, CommandInterceptor);


	/**
	 * Calculate the new bounds of the target shape, given
	 * a number of elements have been moved or added into the parent.
	 *
	 * This method considers the current size, the added elements as well as
	 * the provided padding for the new bounds.
	 *
	 * @param {Array<djs.model.Shape>} elements
	 * @param {djs.model.Shape} target
	 */
	AutoResize.prototype._getOptimalBounds = function(elements, target) {

	  var offset = this.getOffset(target),
	      padding = this.getPadding(target);

	  var elementsTrbl = asTRBL(getBBox(elements)),
	      targetTrbl = asTRBL(target);

	  var newTrbl = {};

	  if (elementsTrbl.top - targetTrbl.top < padding.top) {
	    newTrbl.top = elementsTrbl.top - offset.top;
	  }

	  if (elementsTrbl.left - targetTrbl.left < padding.left) {
	    newTrbl.left = elementsTrbl.left - offset.left;
	  }

	  if (targetTrbl.right - elementsTrbl.right < padding.right) {
	    newTrbl.right = elementsTrbl.right + offset.right;
	  }

	  if (targetTrbl.bottom - elementsTrbl.bottom < padding.bottom) {
	    newTrbl.bottom = elementsTrbl.bottom + offset.bottom;
	  }

	  return asBounds(assign({}, targetTrbl, newTrbl));
	};


	/**
	 * Expand the target shape respecting rules, offset and padding
	 *
	 * @param {Array<djs.model.Shape>} elements
	 * @param {djs.model.Shape|string} target|targetId
	 */
	AutoResize.prototype._expand = function(elements, target) {

	  if (typeof target === 'string') {
	    target = this._elementRegistry.get(target);
	  }

	  var allowed = this._rules.allowed('element.autoResize', {
	    elements: elements,
	    target: target
	  });

	  if (!allowed) {
	    return;
	  }

	  // calculate the new bounds
	  var newBounds = this._getOptimalBounds(elements, target);

	  if (!boundsChanged(newBounds, target)) {
	    return;
	  }

	  var resizeDirections = getResizeDirections(pick(target, [ 'x', 'y', 'width', 'height' ]), newBounds);

	  // resize the parent shape
	  this.resize(target, newBounds, {
	    autoResize: resizeDirections
	  });

	  var parent = target.parent;

	  // recursively expand parent elements
	  if (parent) {
	    this._expand([ target ], parent);
	  }
	};


	/**
	 * Get the amount to expand the given shape in each direction.
	 *
	 * @param {djs.model.Shape} shape
	 *
	 * @return {TRBL}
	 */
	AutoResize.prototype.getOffset = function(shape) {
	  return { top: 60, bottom: 60, left: 100, right: 100 };
	};


	/**
	 * Get the activation threshold for each side for which
	 * resize triggers.
	 *
	 * @param {djs.model.Shape} shape
	 *
	 * @return {TRBL}
	 */
	AutoResize.prototype.getPadding = function(shape) {
	  return { top: 2, bottom: 2, left: 15, right: 15 };
	};


	/**
	 * Perform the actual resize operation.
	 *
	 * @param {djs.model.Shape} shape
	 * @param {Bounds} newBounds
	 * @param {Object} [hints]
	 * @param {string} [hints.autoResize]
	 */
	AutoResize.prototype.resize = function(shape, newBounds, hints) {
	  this._modeling.resizeShape(shape, newBounds, null, hints);
	};


	function boundsChanged(newBounds, oldBounds) {
	  return (
	    newBounds.x !== oldBounds.x ||
	    newBounds.y !== oldBounds.y ||
	    newBounds.width !== oldBounds.width ||
	    newBounds.height !== oldBounds.height
	  );
	}

	/**
	 * Get directions of resize as {n|w|s|e} e.g. "nw".
	 *
	 * @param {Bounds} oldBounds
	 * @param {Bounds} newBounds
	 *
	 * @returns {string} Resize directions as {n|w|s|e}.
	 */
	function getResizeDirections(oldBounds, newBounds) {
	  var directions = '';

	  oldBounds = asTRBL(oldBounds);
	  newBounds = asTRBL(newBounds);

	  if (oldBounds.top > newBounds.top) {
	    directions = directions.concat('n');
	  }

	  if (oldBounds.right < newBounds.right) {
	    directions = directions.concat('w');
	  }

	  if (oldBounds.bottom < newBounds.bottom) {
	    directions = directions.concat('s');
	  }

	  if (oldBounds.left > newBounds.left) {
	    directions = directions.concat('e');
	  }

	  return directions;
	}

	/**
	 * Sub class of the AutoResize module which implements a BPMN
	 * specific resize function.
	 */
	function BpmnAutoResize(injector) {

	  injector.invoke(AutoResize, this);
	}

	BpmnAutoResize.$inject = [
	  'injector'
	];

	inherits_browser(BpmnAutoResize, AutoResize);


	/**
	 * Resize shapes and lanes.
	 *
	 * @param {djs.model.Shape} target
	 * @param {Bounds} newBounds
	 * @param {Object} hints
	 */
	BpmnAutoResize.prototype.resize = function(target, newBounds, hints) {

	  if (is$1(target, 'bpmn:Participant')) {
	    this._modeling.resizeLane(target, newBounds, null, hints);
	  } else {
	    this._modeling.resizeShape(target, newBounds, null, hints);
	  }
	};

	/**
	 * A basic provider that may be extended to implement modeling rules.
	 *
	 * Extensions should implement the init method to actually add their custom
	 * modeling checks. Checks may be added via the #addRule(action, fn) method.
	 *
	 * @param {EventBus} eventBus
	 */
	function RuleProvider(eventBus) {
	  CommandInterceptor.call(this, eventBus);

	  this.init();
	}

	RuleProvider.$inject = [ 'eventBus' ];

	inherits_browser(RuleProvider, CommandInterceptor);


	/**
	 * Adds a modeling rule for the given action, implemented through
	 * a callback function.
	 *
	 * The function will receive the modeling specific action context
	 * to perform its check. It must return `false` to disallow the
	 * action from happening or `true` to allow the action.
	 *
	 * A rule provider may pass over the evaluation to lower priority
	 * rules by returning return nothing (or <code>undefined</code>).
	 *
	 * @example
	 *
	 * ResizableRules.prototype.init = function() {
	 *
	 *   \/**
	 *    * Return `true`, `false` or nothing to denote
	 *    * _allowed_, _not allowed_ and _continue evaluating_.
	 *    *\/
	 *   this.addRule('shape.resize', function(context) {
	 *
	 *     var shape = context.shape;
	 *
	 *     if (!context.newBounds) {
	 *       // check general resizability
	 *       if (!shape.resizable) {
	 *         return false;
	 *       }
	 *
	 *       // not returning anything (read: undefined)
	 *       // will continue the evaluation of other rules
	 *       // (with lower priority)
	 *       return;
	 *     } else {
	 *       // element must have minimum size of 10*10 points
	 *       return context.newBounds.width > 10 && context.newBounds.height > 10;
	 *     }
	 *   });
	 * };
	 *
	 * @param {string|Array<string>} actions the identifier for the modeling action to check
	 * @param {number} [priority] the priority at which this rule is being applied
	 * @param {Function} fn the callback function that performs the actual check
	 */
	RuleProvider.prototype.addRule = function(actions, priority, fn) {

	  var self = this;

	  if (typeof actions === 'string') {
	    actions = [ actions ];
	  }

	  actions.forEach(function(action) {

	    self.canExecute(action, priority, function(context, action, event) {
	      return fn(context);
	    }, true);
	  });
	};

	/**
	 * Implement this method to add new rules during provider initialization.
	 */
	RuleProvider.prototype.init = function() {};

	/**
	 * This is a base rule provider for the element.autoResize rule.
	 */
	function AutoResizeProvider(eventBus) {

	  RuleProvider.call(this, eventBus);

	  var self = this;

	  this.addRule('element.autoResize', function(context) {
	    return self.canResize(context.elements, context.target);
	  });
	}

	AutoResizeProvider.$inject = [ 'eventBus' ];

	inherits_browser(AutoResizeProvider, RuleProvider);

	/**
	 * Needs to be implemented by sub classes to allow actual auto resize
	 *
	 * @param  {Array<djs.model.Shape>} elements
	 * @param  {djs.model.Shape} target
	 *
	 * @return {boolean}
	 */
	AutoResizeProvider.prototype.canResize = function(elements, target) {
	  return false;
	};

	/**
	 * This module is a provider for automatically resizing parent BPMN elements
	 */
	function BpmnAutoResizeProvider(eventBus, modeling) {
	  AutoResizeProvider.call(this, eventBus);

	  this._modeling = modeling;
	}

	inherits_browser(BpmnAutoResizeProvider, AutoResizeProvider);

	BpmnAutoResizeProvider.$inject = [
	  'eventBus',
	  'modeling'
	];


	/**
	 * Check if the given target can be expanded
	 *
	 * @param  {djs.model.Shape} target
	 *
	 * @return {boolean}
	 */
	BpmnAutoResizeProvider.prototype.canResize = function(elements, target) {

	  if (!is$1(target, 'bpmn:Participant') && !is$1(target, 'bpmn:Lane') && !(is$1(target, 'bpmn:SubProcess'))) {
	    return false;
	  }

	  var canResize = true;

	  forEach(elements, function(element) {

	    if (is$1(element, 'bpmn:Lane') || element.labelTarget) {
	      canResize = false;
	      return;
	    }
	  });

	  return canResize;
	};

	var AutoResizeModule = {
	  __init__: [
	    'bpmnAutoResize',
	    'bpmnAutoResizeProvider'
	  ],
	  bpmnAutoResize: [ 'type', BpmnAutoResize ],
	  bpmnAutoResizeProvider: [ 'type', BpmnAutoResizeProvider ]
	};

	var HIGH_PRIORITY = 1500;


	/**
	 * Browsers may swallow certain events (hover, out ...) if users are to
	 * fast with the mouse.
	 *
	 * @see http://stackoverflow.com/questions/7448468/why-cant-i-reliably-capture-a-mouseout-event
	 *
	 * The fix implemented in this component ensure that we
	 *
	 * 1) have a hover state after a successful drag.move event
	 * 2) have an out event when dragging leaves an element
	 *
	 * @param {ElementRegistry} elementRegistry
	 * @param {EventBus} eventBus
	 * @param {Injector} injector
	 */
	function HoverFix(elementRegistry, eventBus, injector) {

	  var self = this;

	  var dragging = injector.get('dragging', false);

	  /**
	   * Make sure we are god damn hovering!
	   *
	   * @param {Event} dragging event
	   */
	  function ensureHover(event) {

	    if (event.hover) {
	      return;
	    }

	    var originalEvent = event.originalEvent;

	    var gfx = self._findTargetGfx(originalEvent);

	    var element = gfx && elementRegistry.get(gfx);

	    if (gfx && element) {

	      // 1) cancel current mousemove
	      event.stopPropagation();

	      // 2) emit fake hover for new target
	      dragging.hover({ element: element, gfx: gfx });

	      // 3) re-trigger move event
	      dragging.move(originalEvent);
	    }
	  }


	  if (dragging) {

	    /**
	     * We wait for a specific sequence of events before
	     * emitting a fake drag.hover event.
	     *
	     * Event Sequence:
	     *
	     * drag.start
	     * drag.move >> ensure we are hovering
	     */
	    eventBus.on('drag.start', function(event) {

	      eventBus.once('drag.move', HIGH_PRIORITY, function(event) {

	        ensureHover(event);

	      });

	    });
	  }


	  /**
	   * We make sure that element.out is always fired, even if the
	   * browser swallows an element.out event.
	   *
	   * Event sequence:
	   *
	   * element.hover
	   * (element.out >> sometimes swallowed)
	   * element.hover >> ensure we fired element.out
	   */
	  (function() {
	    var hoverGfx;
	    var hover;

	    eventBus.on('element.hover', function(event) {

	      // (1) remember current hover element
	      hoverGfx = event.gfx;
	      hover = event.element;
	    });

	    eventBus.on('element.hover', HIGH_PRIORITY, function(event) {

	      // (3) am I on an element still?
	      if (hover) {

	        // (4) that is a problem, gotta "simulate the out"
	        eventBus.fire('element.out', {
	          element: hover,
	          gfx: hoverGfx
	        });
	      }

	    });

	    eventBus.on('element.out', function() {

	      // (2) unset hover state if we correctly outed us *GG*
	      hoverGfx = null;
	      hover = null;
	    });

	  })();

	  this._findTargetGfx = function(event) {
	    var position,
	        target;

	    if (!(event instanceof MouseEvent)) {
	      return;
	    }

	    position = toPoint(event);

	    // damn expensive operation, ouch!
	    target = document.elementFromPoint(position.x, position.y);

	    return getGfx(target);
	  };

	}

	HoverFix.$inject = [
	  'elementRegistry',
	  'eventBus',
	  'injector'
	];


	// helpers /////////////////////

	function getGfx(target) {
	  return closest(target, 'svg, .djs-element', true);
	}

	var HoverFixModule = {
	  __init__: [
	    'hoverFix'
	  ],
	  hoverFix: [ 'type', HoverFix ],
	};

	var round$1 = Math.round;

	var DRAG_ACTIVE_CLS = 'djs-drag-active';


	function preventDefault(event) {
	  event.preventDefault();
	}

	function isTouchEvent(event) {

	  // check for TouchEvent being available first
	  // (i.e. not available on desktop Firefox)
	  return typeof TouchEvent !== 'undefined' && event instanceof TouchEvent;
	}

	function getLength(point) {
	  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));
	}

	/**
	 * A helper that fires canvas localized drag events and realizes
	 * the general "drag-and-drop" look and feel.
	 *
	 * Calling {@link Dragging#activate} activates dragging on a canvas.
	 *
	 * It provides the following:
	 *
	 *   * emits life cycle events, namespaced with a prefix assigned
	 *     during dragging activation
	 *   * sets and restores the cursor
	 *   * sets and restores the selection if elements still exist
	 *   * ensures there can be only one drag operation active at a time
	 *
	 * Dragging may be canceled manually by calling {@link Dragging#cancel}
	 * or by pressing ESC.
	 *
	 *
	 * ## Life-cycle events
	 *
	 * Dragging can be in three different states, off, initialized
	 * and active.
	 *
	 * (1) off: no dragging operation is in progress
	 * (2) initialized: a new drag operation got initialized but not yet
	 *                  started (i.e. because of no initial move)
	 * (3) started: dragging is in progress
	 *
	 * Eventually dragging will be off again after a drag operation has
	 * been ended or canceled via user click or ESC key press.
	 *
	 * To indicate transitions between these states dragging emits generic
	 * life-cycle events with the `drag.` prefix _and_ events namespaced
	 * to a prefix choosen by a user during drag initialization.
	 *
	 * The following events are emitted (appropriately prefixed) via
	 * the {@link EventBus}.
	 *
	 * * `init`
	 * * `start`
	 * * `move`
	 * * `end`
	 * * `ended` (dragging already in off state)
	 * * `cancel` (only if previously started)
	 * * `canceled` (dragging already in off state, only if previously started)
	 * * `cleanup`
	 *
	 *
	 * @example
	 *
	 * function MyDragComponent(eventBus, dragging) {
	 *
	 *   eventBus.on('mydrag.start', function(event) {
	 *     console.log('yes, we start dragging');
	 *   });
	 *
	 *   eventBus.on('mydrag.move', function(event) {
	 *     console.log('canvas local coordinates', event.x, event.y, event.dx, event.dy);
	 *
	 *     // local drag data is passed with the event
	 *     event.context.foo; // "BAR"
	 *
	 *     // the original mouse event, too
	 *     event.originalEvent; // MouseEvent(...)
	 *   });
	 *
	 *   eventBus.on('element.click', function(event) {
	 *     dragging.init(event, 'mydrag', {
	 *       cursor: 'grabbing',
	 *       data: {
	 *         context: {
	 *           foo: "BAR"
	 *         }
	 *       }
	 *     });
	 *   });
	 * }
	 */
	function Dragging(eventBus, canvas, selection, elementRegistry) {

	  var defaultOptions = {
	    threshold: 5,
	    trapClick: true
	  };

	  // the currently active drag operation
	  // dragging is active as soon as this context exists.
	  //
	  // it is visually _active_ only when a context.active flag is set to true.
	  var context;

	  /* convert a global event into local coordinates */
	  function toLocalPoint(globalPosition) {

	    var viewbox = canvas.viewbox();

	    var clientRect = canvas._container.getBoundingClientRect();

	    return {
	      x: viewbox.x + (globalPosition.x - clientRect.left) / viewbox.scale,
	      y: viewbox.y + (globalPosition.y - clientRect.top) / viewbox.scale
	    };
	  }

	  // helpers

	  function fire(type, dragContext) {
	    dragContext = dragContext || context;

	    var event = eventBus.createEvent(
	      assign(
	        {},
	        dragContext.payload,
	        dragContext.data,
	        { isTouch: dragContext.isTouch }
	      )
	    );

	    // default integration
	    if (eventBus.fire('drag.' + type, event) === false) {
	      return false;
	    }

	    return eventBus.fire(dragContext.prefix + '.' + type, event);
	  }

	  function restoreSelection(previousSelection) {
	    var existingSelection = previousSelection.filter(function(element) {
	      return elementRegistry.get(element.id);
	    });

	    existingSelection.length && selection.select(existingSelection);
	  }

	  // event listeners

	  function move(event, activate) {
	    var payload = context.payload,
	        displacement = context.displacement;

	    var globalStart = context.globalStart,
	        globalCurrent = toPoint(event),
	        globalDelta = delta(globalCurrent, globalStart);

	    var localStart = context.localStart,
	        localCurrent = toLocalPoint(globalCurrent),
	        localDelta = delta(localCurrent, localStart);


	    // activate context explicitly or once threshold is reached
	    if (!context.active && (activate || getLength(globalDelta) > context.threshold)) {

	      // fire start event with original
	      // starting coordinates

	      assign(payload, {
	        x: round$1(localStart.x + displacement.x),
	        y: round$1(localStart.y + displacement.y),
	        dx: 0,
	        dy: 0
	      }, { originalEvent: event });

	      if (false === fire('start')) {
	        return cancel();
	      }

	      context.active = true;

	      // unset selection and remember old selection
	      // the previous (old) selection will always passed
	      // with the event via the event.previousSelection property
	      if (!context.keepSelection) {
	        payload.previousSelection = selection.get();
	        selection.select(null);
	      }

	      // allow custom cursor
	      if (context.cursor) {
	        set$1(context.cursor);
	      }

	      // indicate dragging via marker on root element
	      canvas.addMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);
	    }

	    stopPropagation(event);

	    if (context.active) {

	      // update payload with actual coordinates
	      assign(payload, {
	        x: round$1(localCurrent.x + displacement.x),
	        y: round$1(localCurrent.y + displacement.y),
	        dx: round$1(localDelta.x),
	        dy: round$1(localDelta.y)
	      }, { originalEvent: event });

	      // emit move event
	      fire('move');
	    }
	  }

	  function end(event) {
	    var previousContext,
	        returnValue = true;

	    if (context.active) {

	      if (event) {
	        context.payload.originalEvent = event;

	        // suppress original event (click, ...)
	        // because we just ended a drag operation
	        stopPropagation(event);
	      }

	      // implementations may stop restoring the
	      // original state (selections, ...) by preventing the
	      // end events default action
	      returnValue = fire('end');
	    }

	    if (returnValue === false) {
	      fire('rejected');
	    }

	    previousContext = cleanup(returnValue !== true);

	    // last event to be fired when all drag operations are done
	    // at this point in time no drag operation is in progress anymore
	    fire('ended', previousContext);
	  }


	  // cancel active drag operation if the user presses
	  // the ESC key on the keyboard

	  function checkCancel(event) {

	    if (event.which === 27) {
	      preventDefault(event);

	      cancel();
	    }
	  }


	  // prevent ghost click that might occur after a finished
	  // drag and drop session

	  function trapClickAndEnd(event) {

	    var untrap;

	    // trap the click in case we are part of an active
	    // drag operation. This will effectively prevent
	    // the ghost click that cannot be canceled otherwise.
	    if (context.active) {

	      untrap = install(eventBus);

	      // remove trap after minimal delay
	      setTimeout(untrap, 400);

	      // prevent default action (click)
	      preventDefault(event);
	    }

	    end(event);
	  }

	  function trapTouch(event) {
	    move(event);
	  }

	  // update the drag events hover (djs.model.Base) and hoverGfx (Snap<SVGElement>)
	  // properties during hover and out and fire {prefix}.hover and {prefix}.out properties
	  // respectively

	  function hover(event) {
	    var payload = context.payload;

	    payload.hoverGfx = event.gfx;
	    payload.hover = event.element;

	    fire('hover');
	  }

	  function out(event) {
	    fire('out');

	    var payload = context.payload;

	    payload.hoverGfx = null;
	    payload.hover = null;
	  }


	  // life-cycle methods

	  function cancel(restore) {
	    var previousContext;

	    if (!context) {
	      return;
	    }

	    var wasActive = context.active;

	    if (wasActive) {
	      fire('cancel');
	    }

	    previousContext = cleanup(restore);

	    if (wasActive) {

	      // last event to be fired when all drag operations are done
	      // at this point in time no drag operation is in progress anymore
	      fire('canceled', previousContext);
	    }
	  }

	  function cleanup(restore) {
	    var previousContext,
	        endDrag;

	    fire('cleanup');

	    // reset cursor
	    unset();

	    if (context.trapClick) {
	      endDrag = trapClickAndEnd;
	    } else {
	      endDrag = end;
	    }

	    // reset dom listeners
	    componentEvent.unbind(document, 'mousemove', move);

	    componentEvent.unbind(document, 'dragstart', preventDefault);
	    componentEvent.unbind(document, 'selectstart', preventDefault);

	    componentEvent.unbind(document, 'mousedown', endDrag, true);
	    componentEvent.unbind(document, 'mouseup', endDrag, true);

	    componentEvent.unbind(document, 'keyup', checkCancel);

	    componentEvent.unbind(document, 'touchstart', trapTouch, true);
	    componentEvent.unbind(document, 'touchcancel', cancel, true);
	    componentEvent.unbind(document, 'touchmove', move, true);
	    componentEvent.unbind(document, 'touchend', end, true);

	    eventBus.off('element.hover', hover);
	    eventBus.off('element.out', out);

	    // remove drag marker on root element
	    canvas.removeMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);

	    // restore selection, unless it has changed
	    var previousSelection = context.payload.previousSelection;

	    if (restore !== false && previousSelection && !selection.get().length) {
	      restoreSelection(previousSelection);
	    }

	    previousContext = context;

	    context = null;

	    return previousContext;
	  }

	  /**
	   * Initialize a drag operation.
	   *
	   * If `localPosition` is given, drag events will be emitted
	   * relative to it.
	   *
	   * @param {MouseEvent|TouchEvent} [event]
	   * @param {Point} [localPosition] actual diagram local position this drag operation should start at
	   * @param {string} prefix
	   * @param {Object} [options]
	   */
	  function init(event, relativeTo, prefix, options) {

	    // only one drag operation may be active, at a time
	    if (context) {
	      cancel(false);
	    }

	    if (typeof relativeTo === 'string') {
	      options = prefix;
	      prefix = relativeTo;
	      relativeTo = null;
	    }

	    options = assign({}, defaultOptions, options || {});

	    var data = options.data || {},
	        originalEvent,
	        globalStart,
	        localStart,
	        endDrag,
	        isTouch;

	    if (options.trapClick) {
	      endDrag = trapClickAndEnd;
	    } else {
	      endDrag = end;
	    }

	    if (event) {
	      originalEvent = getOriginal(event) || event;
	      globalStart = toPoint(event);

	      stopPropagation(event);

	      // prevent default browser dragging behavior
	      if (originalEvent.type === 'dragstart') {
	        preventDefault(originalEvent);
	      }
	    } else {
	      originalEvent = null;
	      globalStart = { x: 0, y: 0 };
	    }

	    localStart = toLocalPoint(globalStart);

	    if (!relativeTo) {
	      relativeTo = localStart;
	    }

	    isTouch = isTouchEvent(originalEvent);

	    context = assign({
	      prefix: prefix,
	      data: data,
	      payload: {},
	      globalStart: globalStart,
	      displacement: delta(relativeTo, localStart),
	      localStart: localStart,
	      isTouch: isTouch
	    }, options);

	    // skip dom registration if trigger
	    // is set to manual (during testing)
	    if (!options.manual) {

	      // add dom listeners

	      if (isTouch) {
	        componentEvent.bind(document, 'touchstart', trapTouch, true);
	        componentEvent.bind(document, 'touchcancel', cancel, true);
	        componentEvent.bind(document, 'touchmove', move, true);
	        componentEvent.bind(document, 'touchend', end, true);
	      } else {

	        // assume we use the mouse to interact per default
	        componentEvent.bind(document, 'mousemove', move);

	        // prevent default browser drag and text selection behavior
	        componentEvent.bind(document, 'dragstart', preventDefault);
	        componentEvent.bind(document, 'selectstart', preventDefault);

	        componentEvent.bind(document, 'mousedown', endDrag, true);
	        componentEvent.bind(document, 'mouseup', endDrag, true);
	      }

	      componentEvent.bind(document, 'keyup', checkCancel);

	      eventBus.on('element.hover', hover);
	      eventBus.on('element.out', out);
	    }

	    fire('init');

	    if (options.autoActivate) {
	      move(event, true);
	    }
	  }

	  // cancel on diagram destruction
	  eventBus.on('diagram.destroy', cancel);


	  // API

	  this.init = init;
	  this.move = move;
	  this.hover = hover;
	  this.out = out;
	  this.end = end;

	  this.cancel = cancel;

	  // for introspection

	  this.context = function() {
	    return context;
	  };

	  this.setOptions = function(options) {
	    assign(defaultOptions, options);
	  };
	}

	Dragging.$inject = [
	  'eventBus',
	  'canvas',
	  'selection',
	  'elementRegistry'
	];

	var DraggingModule = {
	  __depends__: [
	    HoverFixModule,
	    SelectionModule,
	  ],
	  dragging: [ 'type', Dragging ],
	};

	/**
	 * Initiates canvas scrolling if current cursor point is close to a border.
	 * Cancelled when current point moves back inside the scrolling borders
	 * or cancelled manually.
	 *
	 * Default options :
	 *   scrollThresholdIn: [ 20, 20, 20, 20 ],
	 *   scrollThresholdOut: [ 0, 0, 0, 0 ],
	 *   scrollRepeatTimeout: 15,
	 *   scrollStep: 10
	 *
	 * Threshold order:
	 *   [ left, top, right, bottom ]
	 */
	function AutoScroll(config, eventBus, canvas) {

	  this._canvas = canvas;

	  this._opts = assign({
	    scrollThresholdIn: [ 20, 20, 20, 20 ],
	    scrollThresholdOut: [ 0, 0, 0, 0 ],
	    scrollRepeatTimeout: 15,
	    scrollStep: 10
	  }, config);

	  var self = this;

	  eventBus.on('drag.move', function(e) {
	    var point = self._toBorderPoint(e);

	    self.startScroll(point);
	  });

	  eventBus.on([ 'drag.cleanup' ], function() {
	    self.stopScroll();
	  });
	}

	AutoScroll.$inject = [
	  'config.autoScroll',
	  'eventBus',
	  'canvas'
	];


	/**
	 * Starts scrolling loop.
	 * Point is given in global scale in canvas container box plane.
	 *
	 * @param  {Object} point { x: X, y: Y }
	 */
	AutoScroll.prototype.startScroll = function(point) {

	  var canvas = this._canvas;
	  var opts = this._opts;
	  var self = this;

	  var clientRect = canvas.getContainer().getBoundingClientRect();

	  var diff = [
	    point.x,
	    point.y,
	    clientRect.width - point.x,
	    clientRect.height - point.y
	  ];

	  this.stopScroll();

	  var dx = 0,
	      dy = 0;

	  for (var i = 0; i < 4; i++) {
	    if (between(diff[i], opts.scrollThresholdOut[i], opts.scrollThresholdIn[i])) {
	      if (i === 0) {
	        dx = opts.scrollStep;
	      } else if (i == 1) {
	        dy = opts.scrollStep;
	      } else if (i == 2) {
	        dx = -opts.scrollStep;
	      } else if (i == 3) {
	        dy = -opts.scrollStep;
	      }
	    }
	  }

	  if (dx !== 0 || dy !== 0) {
	    canvas.scroll({ dx: dx, dy: dy });

	    this._scrolling = setTimeout(function() {
	      self.startScroll(point);
	    }, opts.scrollRepeatTimeout);
	  }
	};

	function between(val, start, end) {
	  if (start < val && val < end) {
	    return true;
	  }

	  return false;
	}


	/**
	 * Stops scrolling loop.
	 */
	AutoScroll.prototype.stopScroll = function() {
	  clearTimeout(this._scrolling);
	};


	/**
	 * Overrides defaults options.
	 *
	 * @param  {Object} options
	 */
	AutoScroll.prototype.setOptions = function(options) {
	  this._opts = assign({}, this._opts, options);
	};


	/**
	 * Converts event to a point in canvas container plane in global scale.
	 *
	 * @param  {Event} event
	 * @return {Point}
	 */
	AutoScroll.prototype._toBorderPoint = function(event) {
	  var clientRect = this._canvas._container.getBoundingClientRect();

	  var globalPosition = toPoint(event.originalEvent);

	  return {
	    x: globalPosition.x - clientRect.left,
	    y: globalPosition.y - clientRect.top
	  };
	};

	var AutoScrollModule = {
	  __depends__: [
	    DraggingModule,
	  ],
	  __init__: [ 'autoScroll' ],
	  autoScroll: [ 'type', AutoScroll ]
	};

	/**
	 * A service that provides rules for certain diagram actions.
	 *
	 * The default implementation will hook into the {@link CommandStack}
	 * to perform the actual rule evaluation. Make sure to provide the
	 * `commandStack` service with this module if you plan to use it.
	 *
	 * Together with this implementation you may use the {@link RuleProvider}
	 * to implement your own rule checkers.
	 *
	 * This module is ment to be easily replaced, thus the tiny foot print.
	 *
	 * @param {Injector} injector
	 */
	function Rules(injector) {
	  this._commandStack = injector.get('commandStack', false);
	}

	Rules.$inject = [ 'injector' ];


	/**
	 * Returns whether or not a given modeling action can be executed
	 * in the specified context.
	 *
	 * This implementation will respond with allow unless anyone
	 * objects.
	 *
	 * @param {string} action the action to be checked
	 * @param {Object} [context] the context to check the action in
	 *
	 * @return {boolean} returns true, false or null depending on whether the
	 *                   operation is allowed, not allowed or should be ignored.
	 */
	Rules.prototype.allowed = function(action, context) {
	  var allowed = true;

	  var commandStack = this._commandStack;

	  if (commandStack) {
	    allowed = commandStack.canExecute(action, context);
	  }

	  // map undefined to true, i.e. no rules
	  return allowed === undefined ? true : allowed;
	};

	var RulesModule = {
	  __init__: [ 'rules' ],
	  rules: [ 'type', Rules ]
	};

	var round$2 = Math.round,
	    max = Math.max;


	function circlePath(center, r) {
	  var x = center.x,
	      y = center.y;

	  return [
	    ['M', x, y],
	    ['m', 0, -r],
	    ['a', r, r, 0, 1, 1, 0, 2 * r],
	    ['a', r, r, 0, 1, 1, 0, -2 * r],
	    ['z']
	  ];
	}

	function linePath(points) {
	  var segments = [];

	  points.forEach(function(p, idx) {
	    segments.push([ idx === 0 ? 'M' : 'L', p.x, p.y ]);
	  });

	  return segments;
	}


	var INTERSECTION_THRESHOLD = 10;

	function getBendpointIntersection(waypoints, reference) {

	  var i, w;

	  for (i = 0; (w = waypoints[i]); i++) {

	    if (pointDistance(w, reference) <= INTERSECTION_THRESHOLD) {
	      return {
	        point: waypoints[i],
	        bendpoint: true,
	        index: i
	      };
	    }
	  }

	  return null;
	}

	function getPathIntersection(waypoints, reference) {

	  var intersections = intersect(circlePath(reference, INTERSECTION_THRESHOLD), linePath(waypoints));

	  var a = intersections[0],
	      b = intersections[intersections.length - 1],
	      idx;

	  if (!a) {

	    // no intersection
	    return null;
	  }

	  if (a !== b) {

	    if (a.segment2 !== b.segment2) {

	      // we use the bendpoint in between both segments
	      // as the intersection point

	      idx = max(a.segment2, b.segment2) - 1;

	      return {
	        point: waypoints[idx],
	        bendpoint: true,
	        index: idx
	      };
	    }

	    return {
	      point: {
	        x: (round$2(a.x + b.x) / 2),
	        y: (round$2(a.y + b.y) / 2)
	      },
	      index: a.segment2
	    };
	  }

	  return {
	    point: {
	      x: round$2(a.x),
	      y: round$2(a.y)
	    },
	    index: a.segment2
	  };
	}

	/**
	 * Returns the closest point on the connection towards a given reference point.
	 *
	 * @param  {Array<Point>} waypoints
	 * @param  {Point} reference
	 *
	 * @return {Object} intersection data (segment, point)
	 */
	function getApproxIntersection(waypoints, reference) {
	  return getBendpointIntersection(waypoints, reference) || getPathIntersection(waypoints, reference);
	}

	var BENDPOINT_CLS = 'djs-bendpoint';
	var SEGMENT_DRAGGER_CLS = 'djs-segment-dragger';

	function toCanvasCoordinates(canvas, event) {

	  var position = toPoint(event),
	      clientRect = canvas._container.getBoundingClientRect(),
	      offset;

	  // canvas relative position

	  offset = {
	    x: clientRect.left,
	    y: clientRect.top
	  };

	  // update actual event payload with canvas relative measures

	  var viewbox = canvas.viewbox();

	  return {
	    x: viewbox.x + (position.x - offset.x) / viewbox.scale,
	    y: viewbox.y + (position.y - offset.y) / viewbox.scale
	  };
	}

	function getConnectionIntersection(canvas, waypoints, event) {
	  var localPosition = toCanvasCoordinates(canvas, event),
	      intersection = getApproxIntersection(waypoints, localPosition);

	  return intersection;
	}

	function addBendpoint(parentGfx, cls) {
	  var groupGfx = create('g');
	  classes$1(groupGfx).add(BENDPOINT_CLS);

	  append(parentGfx, groupGfx);

	  var visual = create('circle');
	  attr$1(visual, {
	    cx: 0,
	    cy: 0,
	    r: 4
	  });
	  classes$1(visual).add('djs-visual');

	  append(groupGfx, visual);

	  var hit = create('circle');
	  attr$1(hit, {
	    cx: 0,
	    cy: 0,
	    r: 10
	  });
	  classes$1(hit).add('djs-hit');

	  append(groupGfx, hit);

	  if (cls) {
	    classes$1(groupGfx).add(cls);
	  }

	  return groupGfx;
	}

	function createParallelDragger(parentGfx, segmentStart, segmentEnd, alignment) {
	  var draggerGfx = create('g');

	  append(parentGfx, draggerGfx);

	  var width = 14,
	      height = 3,
	      padding = 11,
	      hitWidth = calculateHitWidth(segmentStart, segmentEnd, alignment),
	      hitHeight = height + padding;

	  var visual = create('rect');
	  attr$1(visual, {
	    x: -width / 2,
	    y: -height / 2,
	    width: width,
	    height: height
	  });
	  classes$1(visual).add('djs-visual');

	  append(draggerGfx, visual);

	  var hit = create('rect');
	  attr$1(hit, {
	    x: -hitWidth / 2,
	    y: -hitHeight / 2,
	    width: hitWidth,
	    height: hitHeight
	  });
	  classes$1(hit).add('djs-hit');

	  append(draggerGfx, hit);

	  rotate(draggerGfx, alignment === 'v' ? 90 : 0);

	  return draggerGfx;
	}


	function addSegmentDragger(parentGfx, segmentStart, segmentEnd) {

	  var groupGfx = create('g'),
	      mid = getMidPoint(segmentStart, segmentEnd),
	      alignment = pointsAligned(segmentStart, segmentEnd);

	  append(parentGfx, groupGfx);

	  createParallelDragger(groupGfx, segmentStart, segmentEnd, alignment);

	  classes$1(groupGfx).add(SEGMENT_DRAGGER_CLS);
	  classes$1(groupGfx).add(alignment === 'h' ? 'horizontal' : 'vertical');

	  translate(groupGfx, mid.x, mid.y);

	  return groupGfx;
	}

	/**
	 * Calculates region for segment move which is 2/3 of the full segment length
	 * @param {number} segmentLength
	 *
	 * @return {number}
	 */
	function calculateSegmentMoveRegion(segmentLength) {
	  return Math.abs(Math.round(segmentLength * 2 / 3));
	}

	// helper //////////

	function calculateHitWidth(segmentStart, segmentEnd, alignment) {
	  var segmentLengthXAxis = segmentEnd.x - segmentStart.x,
	      segmentLengthYAxis = segmentEnd.y - segmentStart.y;

	  return alignment === 'h' ?
	    calculateSegmentMoveRegion(segmentLengthXAxis) :
	    calculateSegmentMoveRegion(segmentLengthYAxis);
	}

	/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */

	var css_escape = createCommonjsModule(function (module, exports) {
	(function(root, factory) {
		// https://github.com/umdjs/umd/blob/master/returnExports.js
		{
			// For Node.js.
			module.exports = factory(root);
		}
	}(typeof commonjsGlobal != 'undefined' ? commonjsGlobal : commonjsGlobal, function(root) {

		if (root.CSS && root.CSS.escape) {
			return root.CSS.escape;
		}

		// https://drafts.csswg.org/cssom/#serialize-an-identifier
		var cssEscape = function(value) {
			if (arguments.length == 0) {
				throw new TypeError('`CSS.escape` requires an argument.');
			}
			var string = String(value);
			var length = string.length;
			var index = -1;
			var codeUnit;
			var result = '';
			var firstCodeUnit = string.charCodeAt(0);
			while (++index < length) {
				codeUnit = string.charCodeAt(index);
				// Note: there’s no need to special-case astral symbols, surrogate
				// pairs, or lone surrogates.

				// If the character is NULL (U+0000), then the REPLACEMENT CHARACTER
				// (U+FFFD).
				if (codeUnit == 0x0000) {
					result += '\uFFFD';
					continue;
				}

				if (
					// If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
					// U+007F, […]
					(codeUnit >= 0x0001 && codeUnit <= 0x001F) || codeUnit == 0x007F ||
					// If the character is the first character and is in the range [0-9]
					// (U+0030 to U+0039), […]
					(index == 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||
					// If the character is the second character and is in the range [0-9]
					// (U+0030 to U+0039) and the first character is a `-` (U+002D), […]
					(
						index == 1 &&
						codeUnit >= 0x0030 && codeUnit <= 0x0039 &&
						firstCodeUnit == 0x002D
					)
				) {
					// https://drafts.csswg.org/cssom/#escape-a-character-as-code-point
					result += '\\' + codeUnit.toString(16) + ' ';
					continue;
				}

				if (
					// If the character is the first character and is a `-` (U+002D), and
					// there is no second character, […]
					index == 0 &&
					length == 1 &&
					codeUnit == 0x002D
				) {
					result += '\\' + string.charAt(index);
					continue;
				}

				// If the character is not handled by one of the above rules and is
				// greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or
				// is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to
				// U+005A), or [a-z] (U+0061 to U+007A), […]
				if (
					codeUnit >= 0x0080 ||
					codeUnit == 0x002D ||
					codeUnit == 0x005F ||
					codeUnit >= 0x0030 && codeUnit <= 0x0039 ||
					codeUnit >= 0x0041 && codeUnit <= 0x005A ||
					codeUnit >= 0x0061 && codeUnit <= 0x007A
				) {
					// the character itself
					result += string.charAt(index);
					continue;
				}

				// Otherwise, the escaped character.
				// https://drafts.csswg.org/cssom/#escape-a-character
				result += '\\' + string.charAt(index);

			}
			return result;
		};

		if (!root.CSS) {
			root.CSS = {};
		}

		root.CSS.escape = cssEscape;
		return cssEscape;

	}));
	});

	var HTML_ESCAPE_MAP = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  '\'': '&#39;'
	};

	function escapeHTML(str) {
	  str = '' + str;

	  return str && str.replace(/[&<>"']/g, function(match) {
	    return HTML_ESCAPE_MAP[match];
	  });
	}

	/**
	 * A service that adds editable bendpoints to connections.
	 */
	function Bendpoints(
	    eventBus, canvas, interactionEvents,
	    bendpointMove, connectionSegmentMove) {

	  /**
	   * Returns true if intersection point is inside middle region of segment, adjusted by
	   * optional threshold
	   */
	  function isIntersectionMiddle(intersection, waypoints, treshold) {
	    var idx = intersection.index,
	        p = intersection.point,
	        p0, p1, mid, aligned, xDelta, yDelta;

	    if (idx <= 0 || intersection.bendpoint) {
	      return false;
	    }

	    p0 = waypoints[idx - 1];
	    p1 = waypoints[idx];
	    mid = getMidPoint(p0, p1),
	    aligned = pointsAligned(p0, p1);
	    xDelta = Math.abs(p.x - mid.x);
	    yDelta = Math.abs(p.y - mid.y);

	    return aligned && xDelta <= treshold && yDelta <= treshold;
	  }

	  /**
	   * Calculates the threshold from a connection's middle which fits the two-third-region
	   */
	  function calculateIntersectionThreshold(connection, intersection) {
	    var waypoints = connection.waypoints,
	        relevantSegment, alignment, segmentLength, threshold;

	    if (intersection.index <= 0 || intersection.bendpoint) {
	      return null;
	    }

	    // segment relative to connection intersection
	    relevantSegment = {
	      start: waypoints[intersection.index - 1],
	      end: waypoints[intersection.index]
	    };

	    alignment = pointsAligned(relevantSegment.start, relevantSegment.end);

	    if (!alignment) {
	      return null;
	    }

	    if (alignment === 'h') {
	      segmentLength = relevantSegment.end.x - relevantSegment.start.x;
	    } else {
	      segmentLength = relevantSegment.end.y - relevantSegment.start.y;
	    }

	    // calculate threshold relative to 2/3 of segment length
	    threshold = calculateSegmentMoveRegion(segmentLength) / 2;

	    return threshold;
	  }

	  function activateBendpointMove(event, connection) {
	    var waypoints = connection.waypoints,
	        intersection = getConnectionIntersection(canvas, waypoints, event),
	        threshold;

	    if (!intersection) {
	      return;
	    }

	    threshold = calculateIntersectionThreshold(connection, intersection);

	    if (isIntersectionMiddle(intersection, waypoints, threshold)) {
	      connectionSegmentMove.start(event, connection, intersection.index);
	    } else {
	      bendpointMove.start(event, connection, intersection.index, !intersection.bendpoint);
	    }

	    // we've handled the event
	    return true;
	  }

	  function bindInteractionEvents(node, eventName, element) {

	    componentEvent.bind(node, eventName, function(event) {
	      interactionEvents.triggerMouseEvent(eventName, event, element);
	      event.stopPropagation();
	    });
	  }

	  function getBendpointsContainer(element, create$1) {

	    var layer = canvas.getLayer('overlays'),
	        gfx = query('.djs-bendpoints[data-element-id="' + css_escape(element.id) + '"]', layer);

	    if (!gfx && create$1) {
	      gfx = create('g');
	      attr$1(gfx, { 'data-element-id': element.id });
	      classes$1(gfx).add('djs-bendpoints');

	      append(layer, gfx);

	      bindInteractionEvents(gfx, 'mousedown', element);
	      bindInteractionEvents(gfx, 'click', element);
	      bindInteractionEvents(gfx, 'dblclick', element);
	    }

	    return gfx;
	  }

	  function getSegmentDragger(idx, parentGfx) {
	    return query(
	      '.djs-segment-dragger[data-segment-idx="' + idx + '"]',
	      parentGfx
	    );
	  }

	  function createBendpoints(gfx, connection) {
	    connection.waypoints.forEach(function(p, idx) {
	      var bendpoint = addBendpoint(gfx);

	      append(gfx, bendpoint);

	      translate(bendpoint, p.x, p.y);
	    });

	    // add floating bendpoint
	    addBendpoint(gfx, 'floating');
	  }

	  function createSegmentDraggers(gfx, connection) {

	    var waypoints = connection.waypoints;

	    var segmentStart,
	        segmentEnd,
	        segmentDraggerGfx;

	    for (var i = 1; i < waypoints.length; i++) {

	      segmentStart = waypoints[i - 1];
	      segmentEnd = waypoints[i];

	      if (pointsAligned(segmentStart, segmentEnd)) {
	        segmentDraggerGfx = addSegmentDragger(gfx, segmentStart, segmentEnd);

	        attr$1(segmentDraggerGfx, { 'data-segment-idx': i });

	        bindInteractionEvents(segmentDraggerGfx, 'mousemove', connection);
	      }
	    }
	  }

	  function clearBendpoints(gfx) {
	    forEach(all('.' + BENDPOINT_CLS, gfx), function(node) {
	      remove$1(node);
	    });
	  }

	  function clearSegmentDraggers(gfx) {
	    forEach(all('.' + SEGMENT_DRAGGER_CLS, gfx), function(node) {
	      remove$1(node);
	    });
	  }

	  function addHandles(connection) {

	    var gfx = getBendpointsContainer(connection);

	    if (!gfx) {
	      gfx = getBendpointsContainer(connection, true);

	      createBendpoints(gfx, connection);
	      createSegmentDraggers(gfx, connection);
	    }

	    return gfx;
	  }

	  function updateHandles(connection) {

	    var gfx = getBendpointsContainer(connection);

	    if (gfx) {
	      clearSegmentDraggers(gfx);
	      clearBendpoints(gfx);
	      createSegmentDraggers(gfx, connection);
	      createBendpoints(gfx, connection);
	    }
	  }

	  function updateFloatingBendpointPosition(parentGfx, intersection) {
	    var floating = query('.floating', parentGfx),
	        point = intersection.point;

	    if (!floating) {
	      return;
	    }

	    translate(floating, point.x, point.y);

	  }

	  function updateSegmentDraggerPosition(parentGfx, intersection, waypoints) {

	    var draggerGfx = getSegmentDragger(intersection.index, parentGfx),
	        segmentStart = waypoints[intersection.index - 1],
	        segmentEnd = waypoints[intersection.index],
	        point = intersection.point,
	        mid = getMidPoint(segmentStart, segmentEnd),
	        alignment = pointsAligned(segmentStart, segmentEnd),
	        draggerVisual, relativePosition;

	    if (!draggerGfx) {
	      return;
	    }

	    draggerVisual = getDraggerVisual(draggerGfx);

	    relativePosition = {
	      x: point.x - mid.x,
	      y: point.y - mid.y
	    };

	    if (alignment === 'v') {

	      // rotate position
	      relativePosition = {
	        x: relativePosition.y,
	        y: relativePosition.x
	      };
	    }

	    translate(draggerVisual, relativePosition.x, relativePosition.y);
	  }

	  eventBus.on('connection.changed', function(event) {
	    updateHandles(event.element);
	  });

	  eventBus.on('connection.remove', function(event) {
	    var gfx = getBendpointsContainer(event.element);

	    if (gfx) {
	      remove$1(gfx);
	    }
	  });

	  eventBus.on('element.marker.update', function(event) {

	    var element = event.element,
	        bendpointsGfx;

	    if (!element.waypoints) {
	      return;
	    }

	    bendpointsGfx = addHandles(element);

	    if (event.add) {
	      classes$1(bendpointsGfx).add(event.marker);
	    } else {
	      classes$1(bendpointsGfx).remove(event.marker);
	    }
	  });

	  eventBus.on('element.mousemove', function(event) {

	    var element = event.element,
	        waypoints = element.waypoints,
	        bendpointsGfx,
	        intersection;

	    if (waypoints) {
	      bendpointsGfx = getBendpointsContainer(element, true);

	      intersection = getConnectionIntersection(canvas, waypoints, event.originalEvent);

	      if (!intersection) {
	        return;
	      }

	      updateFloatingBendpointPosition(bendpointsGfx, intersection);

	      if (!intersection.bendpoint) {
	        updateSegmentDraggerPosition(bendpointsGfx, intersection, waypoints);
	      }

	    }
	  });

	  eventBus.on('element.mousedown', function(event) {

	    if (!isPrimaryButton(event)) {
	      return;
	    }

	    var originalEvent = event.originalEvent,
	        element = event.element;

	    if (!element.waypoints) {
	      return;
	    }

	    return activateBendpointMove(originalEvent, element);
	  });

	  eventBus.on('selection.changed', function(event) {
	    var newSelection = event.newSelection,
	        primary = newSelection[0];

	    if (primary && primary.waypoints) {
	      addHandles(primary);
	    }
	  });

	  eventBus.on('element.hover', function(event) {
	    var element = event.element;

	    if (element.waypoints) {
	      addHandles(element);
	      interactionEvents.registerEvent(event.gfx, 'mousemove', 'element.mousemove');
	    }
	  });

	  eventBus.on('element.out', function(event) {
	    interactionEvents.unregisterEvent(event.gfx, 'mousemove', 'element.mousemove');
	  });

	  // update bendpoint container data attribute on element ID change
	  eventBus.on('element.updateId', function(context) {
	    var element = context.element,
	        newId = context.newId;

	    if (element.waypoints) {
	      var bendpointContainer = getBendpointsContainer(element);

	      if (bendpointContainer) {
	        attr$1(bendpointContainer, { 'data-element-id': newId });
	      }
	    }
	  });

	  // API

	  this.addHandles = addHandles;
	  this.updateHandles = updateHandles;
	  this.getBendpointsContainer = getBendpointsContainer;
	  this.getSegmentDragger = getSegmentDragger;
	}

	Bendpoints.$inject = [
	  'eventBus',
	  'canvas',
	  'interactionEvents',
	  'bendpointMove',
	  'connectionSegmentMove'
	];



	// helper /////////////

	function getDraggerVisual(draggerGfx) {
	  return query('.djs-visual', draggerGfx);
	}

	var round$3 = Math.round;

	var RECONNECT_START = 'reconnectStart',
	    RECONNECT_END = 'reconnectEnd',
	    UPDATE_WAYPOINTS = 'updateWaypoints';


	/**
	 * Move bendpoints through drag and drop to add/remove bendpoints or reconnect connection.
	 */
	function BendpointMove(injector, eventBus, canvas, dragging, rules, modeling) {
	  this._injector = injector;

	  this.start = function(event, connection, bendpointIndex, insert) {
	    var gfx = canvas.getGraphics(connection),
	        source = connection.source,
	        target = connection.target,
	        waypoints = connection.waypoints,
	        type;

	    if (!insert && bendpointIndex === 0) {
	      type = RECONNECT_START;
	    } else
	    if (!insert && bendpointIndex === waypoints.length - 1) {
	      type = RECONNECT_END;
	    } else {
	      type = UPDATE_WAYPOINTS;
	    }

	    var command = type === UPDATE_WAYPOINTS ? 'connection.updateWaypoints' : 'connection.reconnect';

	    var allowed = rules.allowed(command, {
	      connection: connection,
	      source: source,
	      target: target
	    });

	    if (allowed === false) {
	      allowed = rules.allowed(command, {
	        connection: connection,
	        source: target,
	        target: source
	      });
	    }

	    if (allowed === false) {
	      return;
	    }

	    dragging.init(event, 'bendpoint.move', {
	      data: {
	        connection: connection,
	        connectionGfx: gfx,
	        context: {
	          allowed: allowed,
	          bendpointIndex: bendpointIndex,
	          connection: connection,
	          source: source,
	          target: target,
	          insert: insert,
	          type: type
	        }
	      }
	    });
	  };

	  eventBus.on('bendpoint.move.hover', function(event) {
	    var context = event.context,
	        connection = context.connection,
	        source = connection.source,
	        target = connection.target,
	        hover = event.hover,
	        type = context.type;

	    // cache hover state
	    context.hover = hover;

	    var allowed;

	    if (!hover) {
	      return;
	    }

	    var command = type === UPDATE_WAYPOINTS ? 'connection.updateWaypoints' : 'connection.reconnect';

	    allowed = context.allowed = rules.allowed(command, {
	      connection: connection,
	      source: type === RECONNECT_START ? hover : source,
	      target: type === RECONNECT_END ? hover : target
	    });

	    if (allowed) {
	      context.source = type === RECONNECT_START ? hover : source;
	      context.target = type === RECONNECT_END ? hover : target;

	      return;
	    }

	    if (allowed === false) {
	      allowed = context.allowed = rules.allowed(command, {
	        connection: connection,
	        source: type === RECONNECT_END ? hover : target,
	        target: type === RECONNECT_START ? hover : source
	      });
	    }

	    if (allowed) {
	      context.source = type === RECONNECT_END ? hover : target;
	      context.target = type === RECONNECT_START ? hover : source;
	    }
	  });

	  eventBus.on([ 'bendpoint.move.out', 'bendpoint.move.cleanup' ], function(event) {
	    var context = event.context,
	        type = context.type;

	    context.hover = null;
	    context.source = null;
	    context.target = null;

	    if (type !== UPDATE_WAYPOINTS) {
	      context.allowed = false;
	    }
	  });

	  eventBus.on('bendpoint.move.end', function(event) {
	    var context = event.context,
	        allowed = context.allowed,
	        bendpointIndex = context.bendpointIndex,
	        connection = context.connection,
	        insert = context.insert,
	        newWaypoints = connection.waypoints.slice(),
	        source = context.source,
	        target = context.target,
	        type = context.type,
	        hints = context.hints || {};

	    // ensure integer values (important if zoom level was > 1 during move)
	    var docking = {
	      x: round$3(event.x),
	      y: round$3(event.y)
	    };

	    if (!allowed) {
	      return false;
	    }

	    if (type === UPDATE_WAYPOINTS) {
	      if (insert) {

	        // insert new bendpoint
	        newWaypoints.splice(bendpointIndex, 0, docking);
	      } else {

	        // swap previous waypoint with moved one
	        newWaypoints[bendpointIndex] = docking;
	      }

	      // pass hints about actual moved bendpoint
	      // useful for connection/label layout
	      hints.bendpointMove = {
	        insert: insert,
	        bendpointIndex: bendpointIndex
	      };

	      newWaypoints = this.cropWaypoints(connection, newWaypoints);

	      modeling.updateWaypoints(connection, filterRedundantWaypoints(newWaypoints), hints);
	    } else {
	      if (type === RECONNECT_START) {
	        hints.docking = 'source';

	        if (isReverse(context)) {
	          hints.docking = 'target';

	          hints.newWaypoints = newWaypoints.reverse();
	        }
	      } else if (type === RECONNECT_END) {
	        hints.docking = 'target';

	        if (isReverse(context)) {
	          hints.docking = 'source';

	          hints.newWaypoints = newWaypoints.reverse();
	        }
	      }

	      modeling.reconnect(connection, source, target, docking, hints);
	    }
	  }, this);
	}

	BendpointMove.$inject = [
	  'injector',
	  'eventBus',
	  'canvas',
	  'dragging',
	  'rules',
	  'modeling'
	];

	BendpointMove.prototype.cropWaypoints = function(connection, newWaypoints) {
	  var connectionDocking = this._injector.get('connectionDocking', false);

	  if (!connectionDocking) {
	    return newWaypoints;
	  }

	  var waypoints = connection.waypoints;

	  connection.waypoints = newWaypoints;

	  connection.waypoints = connectionDocking.getCroppedWaypoints(connection);

	  newWaypoints = connection.waypoints;

	  connection.waypoints = waypoints;

	  return newWaypoints;
	};


	// helpers //////////

	function isReverse(context) {
	  var hover = context.hover,
	      source = context.source,
	      target = context.target,
	      type = context.type;

	  if (type === RECONNECT_START) {
	    return hover && target && hover === target && source !== target;
	  }

	  if (type === RECONNECT_END) {
	    return hover && source && hover === source && source !== target;
	  }
	}

	var RECONNECT_START$1 = 'reconnectStart',
	    RECONNECT_END$1 = 'reconnectEnd',
	    UPDATE_WAYPOINTS$1 = 'updateWaypoints';

	var MARKER_OK = 'connect-ok',
	    MARKER_NOT_OK = 'connect-not-ok',
	    MARKER_CONNECT_HOVER = 'connect-hover',
	    MARKER_CONNECT_UPDATING = 'djs-updating',
	    MARKER_ELEMENT_HIDDEN = 'djs-element-hidden';

	var HIGH_PRIORITY$1 = 1100;

	/**
	 * Preview connection while moving bendpoints.
	 */
	function BendpointMovePreview(bendpointMove, injector, eventBus, canvas) {
	  this._injector = injector;

	  var connectionPreview = injector.get('connectionPreview', false);

	  eventBus.on('bendpoint.move.start', function(event) {
	    var context = event.context,
	        bendpointIndex = context.bendpointIndex,
	        connection = context.connection,
	        insert = context.insert,
	        waypoints = connection.waypoints,
	        newWaypoints = waypoints.slice();

	    context.waypoints = waypoints;

	    if (insert) {

	      // insert placeholder for new bendpoint
	      newWaypoints.splice(bendpointIndex, 0, { x: event.x, y: event.y });
	    }

	    connection.waypoints = newWaypoints;

	    // add dragger gfx
	    var draggerGfx = context.draggerGfx = addBendpoint(canvas.getLayer('overlays'));

	    classes$1(draggerGfx).add('djs-dragging');

	    canvas.addMarker(connection, MARKER_ELEMENT_HIDDEN);
	    canvas.addMarker(connection, MARKER_CONNECT_UPDATING);
	  });

	  eventBus.on('bendpoint.move.hover', function(event) {
	    var context = event.context,
	        allowed = context.allowed,
	        hover = context.hover,
	        type = context.type;

	    if (hover) {
	      canvas.addMarker(hover, MARKER_CONNECT_HOVER);

	      if (type === UPDATE_WAYPOINTS$1) {
	        return;
	      }

	      if (allowed) {
	        canvas.removeMarker(hover, MARKER_NOT_OK);
	        canvas.addMarker(hover, MARKER_OK);
	      } else if (allowed === false) {
	        canvas.removeMarker(hover, MARKER_OK);
	        canvas.addMarker(hover, MARKER_NOT_OK);
	      }
	    }
	  });

	  eventBus.on([
	    'bendpoint.move.out',
	    'bendpoint.move.cleanup'
	  ], HIGH_PRIORITY$1, function(event) {
	    var context = event.context,
	        hover = context.hover,
	        target = context.target;

	    if (hover) {
	      canvas.removeMarker(hover, MARKER_CONNECT_HOVER);
	      canvas.removeMarker(hover, target ? MARKER_OK : MARKER_NOT_OK);
	    }
	  });

	  eventBus.on('bendpoint.move.move', function(event) {
	    var context = event.context,
	        allowed = context.allowed,
	        bendpointIndex = context.bendpointIndex,
	        draggerGfx = context.draggerGfx,
	        hover = context.hover,
	        type = context.type,
	        connection = context.connection,
	        source = connection.source,
	        target = connection.target,
	        newWaypoints = connection.waypoints.slice(),
	        bendpoint = { x: event.x, y: event.y },
	        hints = context.hints || {},
	        drawPreviewHints = {};

	    if (connectionPreview) {
	      if (hints.connectionStart) {
	        drawPreviewHints.connectionStart = hints.connectionStart;
	      }

	      if (hints.connectionEnd) {
	        drawPreviewHints.connectionEnd = hints.connectionEnd;
	      }


	      if (type === RECONNECT_START$1) {
	        if (isReverse(context)) {
	          drawPreviewHints.connectionEnd = drawPreviewHints.connectionEnd || bendpoint;

	          drawPreviewHints.source = target;
	          drawPreviewHints.target = hover || source;

	          newWaypoints = newWaypoints.reverse();
	        } else {
	          drawPreviewHints.connectionStart = drawPreviewHints.connectionStart || bendpoint;

	          drawPreviewHints.source = hover || source;
	          drawPreviewHints.target = target;
	        }
	      } else if (type === RECONNECT_END$1) {
	        if (isReverse(context)) {
	          drawPreviewHints.connectionStart = drawPreviewHints.connectionStart || bendpoint;

	          drawPreviewHints.source = hover || target;
	          drawPreviewHints.target = source;

	          newWaypoints = newWaypoints.reverse();
	        } else {
	          drawPreviewHints.connectionEnd = drawPreviewHints.connectionEnd || bendpoint;

	          drawPreviewHints.source = source;
	          drawPreviewHints.target = hover || target;
	        }

	      } else {
	        drawPreviewHints.noCropping = true;
	        drawPreviewHints.noLayout = true;
	        newWaypoints[ bendpointIndex ] = bendpoint;
	      }

	      if (type === UPDATE_WAYPOINTS$1) {
	        newWaypoints = bendpointMove.cropWaypoints(connection, newWaypoints);
	      }

	      drawPreviewHints.waypoints = newWaypoints;

	      connectionPreview.drawPreview(context, allowed, drawPreviewHints);
	    }

	    translate(draggerGfx, event.x, event.y);
	  }, this);

	  eventBus.on([
	    'bendpoint.move.end',
	    'bendpoint.move.cancel'
	  ], HIGH_PRIORITY$1, function(event) {
	    var context = event.context,
	        connection = context.connection,
	        draggerGfx = context.draggerGfx,
	        hover = context.hover,
	        target = context.target,
	        waypoints = context.waypoints;

	    connection.waypoints = waypoints;

	    // remove dragger gfx
	    remove$1(draggerGfx);

	    canvas.removeMarker(connection, MARKER_CONNECT_UPDATING);
	    canvas.removeMarker(connection, MARKER_ELEMENT_HIDDEN);

	    if (hover) {
	      canvas.removeMarker(hover, MARKER_OK);
	      canvas.removeMarker(hover, target ? MARKER_OK : MARKER_NOT_OK);
	    }

	    if (connectionPreview) {
	      connectionPreview.cleanUp(context);
	    }
	  });
	}

	BendpointMovePreview.$inject = [
	  'bendpointMove',
	  'injector',
	  'eventBus',
	  'canvas'
	];

	var MARKER_CONNECT_HOVER$1 = 'connect-hover',
	    MARKER_CONNECT_UPDATING$1 = 'djs-updating';


	function axisAdd(point, axis, delta) {
	  return axisSet(point, axis, point[axis] + delta);
	}

	function axisSet(point, axis, value) {
	  return {
	    x: (axis === 'x' ? value : point.x),
	    y: (axis === 'y' ? value : point.y)
	  };
	}

	function axisFenced(position, segmentStart, segmentEnd, axis) {

	  var maxValue = Math.max(segmentStart[axis], segmentEnd[axis]),
	      minValue = Math.min(segmentStart[axis], segmentEnd[axis]);

	  var padding = 20;

	  var fencedValue = Math.min(Math.max(minValue + padding, position[axis]), maxValue - padding);

	  return axisSet(segmentStart, axis, fencedValue);
	}

	function flipAxis(axis) {
	  return axis === 'x' ? 'y' : 'x';
	}

	/**
	 * Get the docking point on the given element.
	 *
	 * Compute a reasonable docking, if non exists.
	 *
	 * @param  {Point} point
	 * @param  {djs.model.Shape} referenceElement
	 * @param  {string} moveAxis (x|y)
	 *
	 * @return {Point}
	 */
	function getDocking(point, referenceElement, moveAxis) {

	  var referenceMid,
	      inverseAxis;

	  if (point.original) {
	    return point.original;
	  } else {
	    referenceMid = getMid(referenceElement);
	    inverseAxis = flipAxis(moveAxis);

	    return axisSet(point, inverseAxis, referenceMid[inverseAxis]);
	  }
	}

	/**
	 * A component that implements moving of bendpoints
	 */
	function ConnectionSegmentMove(
	    injector, eventBus, canvas,
	    dragging, graphicsFactory, modeling) {

	  // optional connection docking integration
	  var connectionDocking = injector.get('connectionDocking', false);


	  // API

	  this.start = function(event, connection, idx) {

	    var context,
	        gfx = canvas.getGraphics(connection),
	        segmentStartIndex = idx - 1,
	        segmentEndIndex = idx,
	        waypoints = connection.waypoints,
	        segmentStart = waypoints[segmentStartIndex],
	        segmentEnd = waypoints[segmentEndIndex],
	        intersection = getConnectionIntersection(canvas, waypoints, event),
	        direction, axis, dragPosition;

	    direction = pointsAligned(segmentStart, segmentEnd);

	    // do not move diagonal connection
	    if (!direction) {
	      return;
	    }

	    // the axis where we are going to move things
	    axis = direction === 'v' ? 'x' : 'y';

	    if (segmentStartIndex === 0) {
	      segmentStart = getDocking(segmentStart, connection.source, axis);
	    }

	    if (segmentEndIndex === waypoints.length - 1) {
	      segmentEnd = getDocking(segmentEnd, connection.target, axis);
	    }

	    if (intersection) {
	      dragPosition = intersection.point;
	    } else {

	      // set to segment center as default
	      dragPosition = {
	        x: (segmentStart.x + segmentEnd.x) / 2,
	        y: (segmentStart.y + segmentEnd.y) / 2
	      };
	    }

	    context = {
	      connection: connection,
	      segmentStartIndex: segmentStartIndex,
	      segmentEndIndex: segmentEndIndex,
	      segmentStart: segmentStart,
	      segmentEnd: segmentEnd,
	      axis: axis,
	      dragPosition: dragPosition
	    };

	    dragging.init(event, dragPosition, 'connectionSegment.move', {
	      cursor: axis === 'x' ? 'resize-ew' : 'resize-ns',
	      data: {
	        connection: connection,
	        connectionGfx: gfx,
	        context: context
	      }
	    });
	  };

	  /**
	   * Crop connection if connection cropping is provided.
	   *
	   * @param {Connection} connection
	   * @param {Array<Point>} newWaypoints
	   *
	   * @return {Array<Point>} cropped connection waypoints
	   */
	  function cropConnection(connection, newWaypoints) {

	    // crop connection, if docking service is provided only
	    if (!connectionDocking) {
	      return newWaypoints;
	    }

	    var oldWaypoints = connection.waypoints,
	        croppedWaypoints;

	    // temporary set new waypoints
	    connection.waypoints = newWaypoints;

	    croppedWaypoints = connectionDocking.getCroppedWaypoints(connection);

	    // restore old waypoints
	    connection.waypoints = oldWaypoints;

	    return croppedWaypoints;
	  }

	  // DRAGGING IMPLEMENTATION

	  function redrawConnection(data) {
	    graphicsFactory.update('connection', data.connection, data.connectionGfx);
	  }

	  function updateDragger(context, segmentOffset, event) {

	    var newWaypoints = context.newWaypoints,
	        segmentStartIndex = context.segmentStartIndex + segmentOffset,
	        segmentStart = newWaypoints[segmentStartIndex],
	        segmentEndIndex = context.segmentEndIndex + segmentOffset,
	        segmentEnd = newWaypoints[segmentEndIndex],
	        axis = flipAxis(context.axis);

	    // make sure the dragger does not move
	    // outside the connection
	    var draggerPosition = axisFenced(event, segmentStart, segmentEnd, axis);

	    // update dragger
	    translate(context.draggerGfx, draggerPosition.x, draggerPosition.y);
	  }

	  /**
	   * Filter waypoints for redundant ones (i.e. on the same axis).
	   * Returns the filtered waypoints and the offset related to the segment move.
	   *
	   * @param {Array<Point>} waypoints
	   * @param {Integer} segmentStartIndex of moved segment start
	   *
	   * @return {Object} { filteredWaypoints, segmentOffset }
	   */
	  function filterRedundantWaypoints(waypoints, segmentStartIndex) {

	    var segmentOffset = 0;

	    var filteredWaypoints = waypoints.filter(function(r, idx) {
	      if (pointsOnLine(waypoints[idx - 1], waypoints[idx + 1], r)) {

	        // remove point and increment offset
	        segmentOffset = idx <= segmentStartIndex ? segmentOffset - 1 : segmentOffset;
	        return false;
	      }

	      // dont remove point
	      return true;
	    });

	    return {
	      waypoints: filteredWaypoints,
	      segmentOffset: segmentOffset
	    };
	  }

	  eventBus.on('connectionSegment.move.start', function(event) {

	    var context = event.context,
	        connection = event.connection,
	        layer = canvas.getLayer('overlays');

	    context.originalWaypoints = connection.waypoints.slice();

	    // add dragger gfx
	    context.draggerGfx = addSegmentDragger(layer, context.segmentStart, context.segmentEnd);
	    classes$1(context.draggerGfx).add('djs-dragging');

	    canvas.addMarker(connection, MARKER_CONNECT_UPDATING$1);
	  });

	  eventBus.on('connectionSegment.move.move', function(event) {

	    var context = event.context,
	        connection = context.connection,
	        segmentStartIndex = context.segmentStartIndex,
	        segmentEndIndex = context.segmentEndIndex,
	        segmentStart = context.segmentStart,
	        segmentEnd = context.segmentEnd,
	        axis = context.axis;

	    var newWaypoints = context.originalWaypoints.slice(),
	        newSegmentStart = axisAdd(segmentStart, axis, event['d' + axis]),
	        newSegmentEnd = axisAdd(segmentEnd, axis, event['d' + axis]);

	    // original waypoint count and added / removed
	    // from start waypoint delta. We use the later
	    // to retrieve the updated segmentStartIndex / segmentEndIndex
	    var waypointCount = newWaypoints.length,
	        segmentOffset = 0;

	    // move segment start / end by axis delta
	    newWaypoints[segmentStartIndex] = newSegmentStart;
	    newWaypoints[segmentEndIndex] = newSegmentEnd;

	    var sourceToSegmentOrientation,
	        targetToSegmentOrientation;

	    // handle first segment
	    if (segmentStartIndex < 2) {
	      sourceToSegmentOrientation = getOrientation(connection.source, newSegmentStart);

	      // first bendpoint, remove first segment if intersecting
	      if (segmentStartIndex === 1) {

	        if (sourceToSegmentOrientation === 'intersect') {
	          newWaypoints.shift();
	          newWaypoints[0] = newSegmentStart;
	          segmentOffset--;
	        }
	      }

	      // docking point, add segment if not intersecting anymore
	      else {
	        if (sourceToSegmentOrientation !== 'intersect') {
	          newWaypoints.unshift(segmentStart);
	          segmentOffset++;
	        }
	      }
	    }

	    // handle last segment
	    if (segmentEndIndex > waypointCount - 3) {
	      targetToSegmentOrientation = getOrientation(connection.target, newSegmentEnd);

	      // last bendpoint, remove last segment if intersecting
	      if (segmentEndIndex === waypointCount - 2) {

	        if (targetToSegmentOrientation === 'intersect') {
	          newWaypoints.pop();
	          newWaypoints[newWaypoints.length - 1] = newSegmentEnd;
	        }
	      }

	      // last bendpoint, remove last segment if intersecting
	      else {
	        if (targetToSegmentOrientation !== 'intersect') {
	          newWaypoints.push(segmentEnd);
	        }
	      }
	    }

	    // update connection waypoints
	    context.newWaypoints = connection.waypoints = cropConnection(connection, newWaypoints);

	    // update dragger position
	    updateDragger(context, segmentOffset, event);

	    // save segmentOffset in context
	    context.newSegmentStartIndex = segmentStartIndex + segmentOffset;

	    // redraw connection
	    redrawConnection(event);
	  });

	  eventBus.on('connectionSegment.move.hover', function(event) {

	    event.context.hover = event.hover;
	    canvas.addMarker(event.hover, MARKER_CONNECT_HOVER$1);
	  });

	  eventBus.on([
	    'connectionSegment.move.out',
	    'connectionSegment.move.cleanup'
	  ], function(event) {

	    // remove connect marker
	    // if it was added
	    var hover = event.context.hover;

	    if (hover) {
	      canvas.removeMarker(hover, MARKER_CONNECT_HOVER$1);
	    }
	  });

	  eventBus.on('connectionSegment.move.cleanup', function(event) {

	    var context = event.context,
	        connection = context.connection;

	    // remove dragger gfx
	    if (context.draggerGfx) {
	      remove$1(context.draggerGfx);
	    }

	    canvas.removeMarker(connection, MARKER_CONNECT_UPDATING$1);
	  });

	  eventBus.on([
	    'connectionSegment.move.cancel',
	    'connectionSegment.move.end'
	  ], function(event) {
	    var context = event.context,
	        connection = context.connection;

	    connection.waypoints = context.originalWaypoints;

	    redrawConnection(event);
	  });

	  eventBus.on('connectionSegment.move.end', function(event) {

	    var context = event.context,
	        connection = context.connection,
	        newWaypoints = context.newWaypoints,
	        newSegmentStartIndex = context.newSegmentStartIndex;

	    // ensure we have actual pixel values bendpoint
	    // coordinates (important when zoom level was > 1 during move)
	    newWaypoints = newWaypoints.map(function(p) {
	      return {
	        original: p.original,
	        x: Math.round(p.x),
	        y: Math.round(p.y)
	      };
	    });

	    // apply filter redunant waypoints
	    var filtered = filterRedundantWaypoints(newWaypoints, newSegmentStartIndex);

	    // get filtered waypoints
	    var filteredWaypoints = filtered.waypoints,
	        croppedWaypoints = cropConnection(connection, filteredWaypoints),
	        segmentOffset = filtered.segmentOffset;

	    var hints = {
	      segmentMove: {
	        segmentStartIndex: context.segmentStartIndex,
	        newSegmentStartIndex: newSegmentStartIndex + segmentOffset
	      }
	    };

	    modeling.updateWaypoints(connection, croppedWaypoints, hints);
	  });
	}

	ConnectionSegmentMove.$inject = [
	  'injector',
	  'eventBus',
	  'canvas',
	  'dragging',
	  'graphicsFactory',
	  'modeling'
	];

	var abs$1 = Math.abs,
	    round$4 = Math.round;


	/**
	 * Snap value to a collection of reference values.
	 *
	 * @param  {number} value
	 * @param  {Array<number>} values
	 * @param  {number} [tolerance=10]
	 *
	 * @return {number} the value we snapped to or null, if none snapped
	 */
	function snapTo(value, values, tolerance) {
	  tolerance = tolerance === undefined ? 10 : tolerance;

	  var idx, snapValue;

	  for (idx = 0; idx < values.length; idx++) {
	    snapValue = values[idx];

	    if (abs$1(snapValue - value) <= tolerance) {
	      return snapValue;
	    }
	  }
	}


	function topLeft(bounds) {
	  return {
	    x: bounds.x,
	    y: bounds.y
	  };
	}

	function bottomRight(bounds) {
	  return {
	    x: bounds.x + bounds.width,
	    y: bounds.y + bounds.height
	  };
	}

	function mid(bounds, defaultValue) {

	  if (!bounds || isNaN(bounds.x) || isNaN(bounds.y)) {
	    return defaultValue;
	  }

	  return {
	    x: round$4(bounds.x + bounds.width / 2),
	    y: round$4(bounds.y + bounds.height / 2)
	  };
	}


	/**
	 * Retrieve the snap state of the given event.
	 *
	 * @param  {Event} event
	 * @param  {string} axis
	 *
	 * @return {boolean} the snapped state
	 *
	 */
	function isSnapped(event, axis) {
	  var snapped = event.snapped;

	  if (!snapped) {
	    return false;
	  }

	  if (typeof axis === 'string') {
	    return snapped[axis];
	  }

	  return snapped.x && snapped.y;
	}


	/**
	 * Set the given event as snapped.
	 *
	 * This method may change the x and/or y position of the shape
	 * from the given event!
	 *
	 * @param {Event} event
	 * @param {string} axis
	 * @param {number|boolean} value
	 *
	 * @return {number} old value
	 */
	function setSnapped(event, axis, value) {
	  if (typeof axis !== 'string') {
	    throw new Error('axis must be in [x, y]');
	  }

	  if (typeof value !== 'number' && value !== false) {
	    throw new Error('value must be Number or false');
	  }

	  var delta,
	      previousValue = event[axis];

	  var snapped = event.snapped = (event.snapped || {});


	  if (value === false) {
	    snapped[axis] = false;
	  } else {
	    snapped[axis] = true;

	    delta = value - previousValue;

	    event[axis] += delta;
	    event['d' + axis] += delta;
	  }

	  return previousValue;
	}

	/**
	 * Get children of a shape.
	 *
	 * @param {djs.model.Shape} parent
	 *
	 * @returns {Array<djs.model.Shape|djs.model.Connection>}
	 */
	function getChildren$1(parent) {
	  return parent.children || [];
	}

	var abs$2= Math.abs,
	    round$5 = Math.round;

	var TOLERANCE = 10;


	function BendpointSnapping(eventBus) {

	  function snapTo(values, value) {

	    if (isArray(values)) {
	      var i = values.length;

	      while (i--) if (abs$2(values[i] - value) <= TOLERANCE) {
	        return values[i];
	      }
	    } else {
	      values = +values;
	      var rem = value % values;

	      if (rem < TOLERANCE) {
	        return value - rem;
	      }

	      if (rem > values - TOLERANCE) {
	        return value - rem + values;
	      }
	    }

	    return value;
	  }

	  function mid(element) {
	    if (element.width) {
	      return {
	        x: round$5(element.width / 2 + element.x),
	        y: round$5(element.height / 2 + element.y)
	      };
	    }
	  }

	  // connection segment snapping //////////////////////

	  function getConnectionSegmentSnaps(context) {

	    var snapPoints = context.snapPoints,
	        connection = context.connection,
	        waypoints = connection.waypoints,
	        segmentStart = context.segmentStart,
	        segmentStartIndex = context.segmentStartIndex,
	        segmentEnd = context.segmentEnd,
	        segmentEndIndex = context.segmentEndIndex,
	        axis = context.axis;

	    if (snapPoints) {
	      return snapPoints;
	    }

	    var referenceWaypoints = [
	      waypoints[segmentStartIndex - 1],
	      segmentStart,
	      segmentEnd,
	      waypoints[segmentEndIndex + 1]
	    ];

	    if (segmentStartIndex < 2) {
	      referenceWaypoints.unshift(mid(connection.source));
	    }

	    if (segmentEndIndex > waypoints.length - 3) {
	      referenceWaypoints.unshift(mid(connection.target));
	    }

	    context.snapPoints = snapPoints = { horizontal: [] , vertical: [] };

	    forEach(referenceWaypoints, function(p) {

	      // we snap on existing bendpoints only,
	      // not placeholders that are inserted during add
	      if (p) {
	        p = p.original || p;

	        if (axis === 'y') {
	          snapPoints.horizontal.push(p.y);
	        }

	        if (axis === 'x') {
	          snapPoints.vertical.push(p.x);
	        }
	      }
	    });

	    return snapPoints;
	  }

	  eventBus.on('connectionSegment.move.move', 1500, function(event) {
	    var context = event.context,
	        snapPoints = getConnectionSegmentSnaps(context),
	        x = event.x,
	        y = event.y,
	        sx, sy;

	    if (!snapPoints) {
	      return;
	    }

	    // snap
	    sx = snapTo(snapPoints.vertical, x);
	    sy = snapTo(snapPoints.horizontal, y);


	    // correction x/y
	    var cx = (x - sx),
	        cy = (y - sy);

	    // update delta
	    assign(event, {
	      dx: event.dx - cx,
	      dy: event.dy - cy,
	      x: sx,
	      y: sy
	    });

	    // only set snapped if actually snapped
	    if (cx || snapPoints.vertical.indexOf(x) !== -1) {
	      setSnapped(event, 'x', sx);
	    }

	    if (cy || snapPoints.horizontal.indexOf(y) !== -1) {
	      setSnapped(event, 'y', sy);
	    }
	  });


	  // bendpoint snapping //////////////////////

	  function getBendpointSnaps(context) {

	    var snapPoints = context.snapPoints,
	        waypoints = context.connection.waypoints,
	        bendpointIndex = context.bendpointIndex;

	    if (snapPoints) {
	      return snapPoints;
	    }

	    var referenceWaypoints = [ waypoints[bendpointIndex - 1], waypoints[bendpointIndex + 1] ];

	    context.snapPoints = snapPoints = { horizontal: [] , vertical: [] };

	    forEach(referenceWaypoints, function(p) {

	      // we snap on existing bendpoints only,
	      // not placeholders that are inserted during add
	      if (p) {
	        p = p.original || p;

	        snapPoints.horizontal.push(p.y);
	        snapPoints.vertical.push(p.x);
	      }
	    });

	    return snapPoints;
	  }


	  eventBus.on([ 'bendpoint.move.move', 'bendpoint.move.end' ], 1500, function(event) {

	    var context = event.context,
	        snapPoints = getBendpointSnaps(context),
	        hover = context.hover,
	        hoverMid = hover && mid(hover),
	        x = event.x,
	        y = event.y,
	        sx, sy;

	    if (!snapPoints) {
	      return;
	    }

	    // snap to hover mid
	    sx = snapTo(hoverMid ? snapPoints.vertical.concat([ hoverMid.x ]) : snapPoints.vertical, x);
	    sy = snapTo(hoverMid ? snapPoints.horizontal.concat([ hoverMid.y ]) : snapPoints.horizontal, y);

	    // correction x/y
	    var cx = (x - sx),
	        cy = (y - sy);

	    // update delta
	    assign(event, {
	      dx: event.dx - cx,
	      dy: event.dy - cy,
	      x: event.x - cx,
	      y: event.y - cy
	    });

	    // only set snapped if actually snapped
	    if (cx || snapPoints.vertical.indexOf(x) !== -1) {
	      setSnapped(event, 'x', sx);
	    }

	    if (cy || snapPoints.horizontal.indexOf(y) !== -1) {
	      setSnapped(event, 'y', sy);
	    }
	  });
	}


	BendpointSnapping.$inject = [ 'eventBus' ];

	var BendpointsModule = {
	  __depends__: [
	    DraggingModule,
	    RulesModule
	  ],
	  __init__: [ 'bendpoints', 'bendpointSnapping', 'bendpointMovePreview' ],
	  bendpoints: [ 'type', Bendpoints ],
	  bendpointMove: [ 'type', BendpointMove ],
	  bendpointMovePreview: [ 'type', BendpointMovePreview ],
	  connectionSegmentMove: [ 'type', ConnectionSegmentMove ],
	  bendpointSnapping: [ 'type', BendpointSnapping ]
	};

	function Connect(eventBus, dragging, modeling, rules) {

	  // rules

	  function canConnect(source, target) {
	    return rules.allowed('connection.create', {
	      source: source,
	      target: target
	    });
	  }

	  function canConnectReverse(source, target) {
	    return canConnect(target, source);
	  }


	  // event handlers

	  eventBus.on('connect.hover', function(event) {
	    var context = event.context,
	        start = context.start,
	        hover = event.hover,
	        canExecute;

	    // cache hover state
	    context.hover = hover;

	    canExecute = context.canExecute = canConnect(start, hover);

	    // ignore hover
	    if (isNil(canExecute)) {
	      return;
	    }

	    if (canExecute !== false) {
	      context.source = start;
	      context.target = hover;

	      return;
	    }

	    canExecute = context.canExecute = canConnectReverse(start, hover);

	    // ignore hover
	    if (isNil(canExecute)) {
	      return;
	    }

	    if (canExecute !== false) {
	      context.source = hover;
	      context.target = start;
	    }
	  });

	  eventBus.on([ 'connect.out', 'connect.cleanup' ], function(event) {
	    var context = event.context;

	    context.hover = null;
	    context.source = null;
	    context.target = null;

	    context.canExecute = false;
	  });

	  eventBus.on('connect.end', function(event) {
	    var context = event.context,
	        canExecute = context.canExecute,
	        connectionStart = context.connectionStart,
	        connectionEnd = {
	          x: event.x,
	          y: event.y
	        },
	        source = context.source,
	        target = context.target;

	    if (!canExecute) {
	      return false;
	    }

	    var attrs = null,
	        hints = {
	          connectionStart: isReverse$1(context) ? connectionEnd : connectionStart,
	          connectionEnd: isReverse$1(context) ? connectionStart : connectionEnd
	        };

	    if (isObject(canExecute)) {
	      attrs = canExecute;
	    }

	    modeling.connect(source, target, attrs, hints);
	  });


	  // API

	  /**
	   * Start connect operation.
	   *
	   * @param {DOMEvent} event
	   * @param {djs.model.Base} start
	   * @param {Point} [connectionStart]
	   * @param {boolean} [autoActivate=false]
	   */
	  this.start = function(event, start, connectionStart, autoActivate) {
	    if (!isObject(connectionStart)) {
	      autoActivate = connectionStart;
	      connectionStart = getMid(start);
	    }

	    dragging.init(event, 'connect', {
	      autoActivate: autoActivate,
	      data: {
	        shape: start,
	        context: {
	          start: start,
	          connectionStart: connectionStart
	        }
	      }
	    });
	  };
	}

	Connect.$inject = [
	  'eventBus',
	  'dragging',
	  'modeling',
	  'rules'
	];


	// helpers //////////

	function isReverse$1(context) {
	  var hover = context.hover,
	      source = context.source,
	      target = context.target;

	  return hover && source && hover === source && source !== target;
	}

	var HIGH_PRIORITY$2 = 1100,
	    LOW_PRIORITY$5 = 900;

	var MARKER_OK$1 = 'connect-ok',
	    MARKER_NOT_OK$1 = 'connect-not-ok';

	/**
	 * Shows connection preview during connect.
	 *
	 * @param {didi.Injector} injector
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 */
	function ConnectPreview(injector, eventBus, canvas) {
	  var connectionPreview = injector.get('connectionPreview', false);

	  connectionPreview && eventBus.on('connect.move', function(event) {
	    var context = event.context,
	        canConnect = context.canExecute,
	        hover = context.hover,
	        source = context.source,
	        start = context.start,
	        startPosition = context.startPosition,
	        connectionStart = context.connectionStart,
	        connectionEnd = context.connectionEnd,
	        target = context.target;

	    if (!connectionStart) {
	      connectionStart = isReverse$1(context) ? {
	        x: event.x,
	        y: event.y
	      } : startPosition;
	    }

	    if (!connectionEnd) {
	      connectionEnd = isReverse$1(context) ? startPosition : {
	        x: event.x,
	        y: event.y
	      };
	    }

	    connectionPreview.drawPreview(context, canConnect, {
	      source: source || start,
	      target: target || hover,
	      connectionStart: connectionStart,
	      connectionEnd: connectionEnd
	    });
	  });

	  eventBus.on('connect.hover', LOW_PRIORITY$5, function(event) {
	    var context = event.context,
	        hover = event.hover,
	        canExecute = context.canExecute;

	    // ignore hover
	    if (canExecute === null) {
	      return;
	    }

	    canvas.addMarker(hover, canExecute ? MARKER_OK$1 : MARKER_NOT_OK$1);
	  });

	  eventBus.on([
	    'connect.out',
	    'connect.cleanup'
	  ], HIGH_PRIORITY$2, function(event) {
	    var hover = event.hover;

	    if (hover) {
	      canvas.removeMarker(hover, MARKER_OK$1);
	      canvas.removeMarker(hover, MARKER_NOT_OK$1);
	    }
	  });

	  connectionPreview && eventBus.on('connect.cleanup', function(event) {
	    connectionPreview.cleanUp(event.context);
	  });
	}

	ConnectPreview.$inject = [
	  'injector',
	  'eventBus',
	  'canvas'
	];

	var ConnectModule = {
	  __depends__: [
	    SelectionModule,
	    RulesModule,
	    DraggingModule
	  ],
	  __init__: [
	    'connectPreview'
	  ],
	  connect: [ 'type', Connect ],
	  connectPreview: [ 'type', ConnectPreview ]
	};

	var MARKER_CONNECTION_PREVIEW = 'djs-connection-preview';

	/**
	 * Draws connection preview. Optionally, this can use layouter and connection docking to draw
	 * better looking previews.
	 *
	 * @param {didi.Injector} injector
	 * @param {Canvas} canvas
	 * @param {GraphicsFactory} graphicsFactory
	 * @param {ElementFactory} elementFactory
	 */
	function ConnectionPreview(
	    injector,
	    canvas,
	    graphicsFactory,
	    elementFactory
	) {
	  this._canvas = canvas;
	  this._graphicsFactory = graphicsFactory;
	  this._elementFactory = elementFactory;

	  // optional components
	  this._connectionDocking = injector.get('connectionDocking', false);
	  this._layouter = injector.get('layouter', false);
	}

	ConnectionPreview.$inject = [
	  'injector',
	  'canvas',
	  'graphicsFactory',
	  'elementFactory'
	];

	/**
	 * Draw connection preview.
	 *
	 * Provide at least one of <source, connectionStart> and <target, connectionEnd> to create a preview.
	 * In the clean up stage, call `connectionPreview#cleanUp` with the context to remove preview.
	 *
	 * @param {Object} context
	 * @param {Object|boolean} canConnect
	 * @param {Object} hints
	 * @param {djs.model.shape} [hints.source] source element
	 * @param {djs.model.shape} [hints.target] target element
	 * @param {Point} [hints.connectionStart] connection preview start
	 * @param {Point} [hints.connectionEnd] connection preview end
	 * @param {Array<Point>} [hints.waypoints] provided waypoints for preview
	 * @param {boolean} [hints.noLayout] true if preview should not be laid out
	 * @param {boolean} [hints.noCropping] true if preview should not be cropped
	 * @param {boolean} [hints.noNoop] true if simple connection should not be drawn
	 */
	ConnectionPreview.prototype.drawPreview = function(context, canConnect, hints) {

	  hints = hints || {};

	  var connectionPreviewGfx = context.connectionPreviewGfx,
	      getConnection = context.getConnection,
	      source = hints.source,
	      target = hints.target,
	      waypoints = hints.waypoints,
	      connectionStart = hints.connectionStart,
	      connectionEnd = hints.connectionEnd,
	      noLayout = hints.noLayout,
	      noCropping = hints.noCropping,
	      noNoop = hints.noNoop,
	      connection;

	  var self = this;

	  if (!connectionPreviewGfx) {
	    connectionPreviewGfx = context.connectionPreviewGfx = this.createConnectionPreviewGfx();
	  }

	  clear$1(connectionPreviewGfx);

	  if (!getConnection) {
	    getConnection = context.getConnection = cacheReturnValues(function(canConnect, source, target) {
	      return self.getConnection(canConnect, source, target);
	    });
	  }

	  if (canConnect) {
	    connection = getConnection(canConnect, source, target);
	  }

	  if (!connection) {
	    !noNoop && this.drawNoopPreview(connectionPreviewGfx, hints);
	    return;
	  }

	  connection.waypoints = waypoints || [];

	  // optional layout
	  if (this._layouter && !noLayout) {
	    connection.waypoints = this._layouter.layoutConnection(connection, {
	      source: source,
	      target: target,
	      connectionStart: connectionStart,
	      connectionEnd: connectionEnd,
	      waypoints: hints.waypoints || connection.waypoints
	    });
	  }

	  // fallback if no waypoints were provided nor created with layouter
	  if (!connection.waypoints || !connection.waypoints.length) {
	    connection.waypoints = [
	      source ? getMid(source) : connectionStart,
	      target ? getMid(target) : connectionEnd
	    ];
	  }

	  // optional cropping
	  if (this._connectionDocking && (source || target) && !noCropping) {
	    connection.waypoints = this._connectionDocking.getCroppedWaypoints(connection, source, target);
	  }

	  this._graphicsFactory.drawConnection(connectionPreviewGfx, connection);
	};

	/**
	 * Draw simple connection between source and target or provided points.
	 *
	 * @param {SVGElement} connectionPreviewGfx container for the connection
	 * @param {Object} hints
	 * @param {djs.model.shape} [hints.source] source element
	 * @param {djs.model.shape} [hints.target] target element
	 * @param {Point} [hints.connectionStart] required if source is not provided
	 * @param {Point} [hints.connectionEnd] required if target is not provided
	 */
	ConnectionPreview.prototype.drawNoopPreview = function(connectionPreviewGfx, hints) {
	  var source = hints.source,
	      target = hints.target,
	      start = hints.connectionStart || getMid(source),
	      end = hints.connectionEnd || getMid(target);

	  var waypoints = this.cropWaypoints(start, end, source, target);

	  var connection = this.createNoopConnection(waypoints[0], waypoints[1]);

	  append(connectionPreviewGfx, connection);
	};

	/**
	 * Return cropped waypoints.
	 *
	 * @param {Point} start
	 * @param {Point} end
	 * @param {djs.model.shape} source
	 * @param {djs.model.shape} target
	 *
	 * @returns {Array}
	 */
	ConnectionPreview.prototype.cropWaypoints = function(start, end, source, target) {
	  var graphicsFactory = this._graphicsFactory,
	      sourcePath = source && graphicsFactory.getShapePath(source),
	      targetPath = target && graphicsFactory.getShapePath(target),
	      connectionPath = graphicsFactory.getConnectionPath({ waypoints: [ start, end ] });

	  start = (source && getElementLineIntersection(sourcePath, connectionPath, true)) || start;
	  end = (target && getElementLineIntersection(targetPath, connectionPath, false)) || end;

	  return [ start, end ];
	};

	/**
	 * Remove connection preview container if it exists.
	 *
	 * @param {Object} [context]
	 * @param {SVGElement} [context.connectionPreviewGfx] preview container
	 */
	ConnectionPreview.prototype.cleanUp = function(context) {
	  if (context && context.connectionPreviewGfx) {
	    remove$1(context.connectionPreviewGfx);
	  }
	};

	/**
	 * Get connection that connects source and target.
	 *
	 * @param {Object|boolean} canConnect
	 *
	 * @returns {djs.model.connection}
	 */
	ConnectionPreview.prototype.getConnection = function(canConnect) {
	  var attrs = ensureConnectionAttrs(canConnect);

	  return this._elementFactory.createConnection(attrs);
	};


	/**
	 * Add and return preview graphics.
	 *
	 * @returns {SVGElement}
	 */
	ConnectionPreview.prototype.createConnectionPreviewGfx = function() {
	  var gfx = create('g');

	  attr$1(gfx, {
	    pointerEvents: 'none'
	  });

	  classes$1(gfx).add(MARKER_CONNECTION_PREVIEW);

	  append(this._canvas.getDefaultLayer(), gfx);

	  return gfx;
	};

	/**
	 * Create and return simple connection.
	 *
	 * @param {Point} start
	 * @param {Point} end
	 *
	 * @returns {SVGElement}
	 */
	ConnectionPreview.prototype.createNoopConnection = function(start, end) {
	  var connection = create('polyline');

	  attr$1(connection, {
	    'stroke': '#333',
	    'strokeDasharray': [ 1 ],
	    'strokeWidth': 2,
	    'pointer-events': 'none'
	  });

	  attr$1(connection, { 'points': [ start.x, start.y, end.x, end.y ] });

	  return connection;
	};

	// helpers //////////

	/**
	 * Returns function that returns cached return values referenced by stringified first argument.
	 *
	 * @param {Function} fn
	 *
	 * @return {Function}
	 */
	function cacheReturnValues(fn) {
	  var returnValues = {};

	  /**
	   * Return cached return value referenced by stringified first argument.
	   *
	   * @returns {*}
	   */
	  return function(firstArgument) {
	    var key = JSON.stringify(firstArgument);

	    var returnValue = returnValues[key];

	    if (!returnValue) {
	      returnValue = returnValues[key] = fn.apply(null, arguments);
	    }

	    return returnValue;
	  };
	}

	/**
	 * Ensure connection attributes is object.
	 *
	 * @param {Object|boolean} canConnect
	 *
	 * @returns {Object}
	 */
	function ensureConnectionAttrs(canConnect) {
	  if (isObject(canConnect)) {
	    return canConnect;
	  } else {
	    return {};
	  }
	}

	var ConnectionPreviewModule = {
	  __init__: [ 'connectionPreview' ],
	  connectionPreview: [ 'type', ConnectionPreview ]
	};

	var min = Math.min,
	    max$1 = Math.max;

	function preventDefault$1(e) {
	  e.preventDefault();
	}

	function stopPropagation$1(e) {
	  e.stopPropagation();
	}

	function isTextNode(node) {
	  return node.nodeType === Node.TEXT_NODE;
	}

	function toArray(nodeList) {
	  return [].slice.call(nodeList);
	}

	/**
	 * Initializes a container for a content editable div.
	 *
	 * Structure:
	 *
	 * container
	 *   parent
	 *     content
	 *     resize-handle
	 *
	 * @param {object} options
	 * @param {DOMElement} options.container The DOM element to append the contentContainer to
	 * @param {Function} options.keyHandler Handler for key events
	 * @param {Function} options.resizeHandler Handler for resize events
	 */
	function TextBox(options) {
	  this.container = options.container;

	  this.parent = domify(
	    '<div class="djs-direct-editing-parent">' +
	      '<div class="djs-direct-editing-content" contenteditable="true"></div>' +
	    '</div>'
	  );

	  this.content = query('[contenteditable]', this.parent);

	  this.keyHandler = options.keyHandler || function() {};
	  this.resizeHandler = options.resizeHandler || function() {};

	  this.autoResize = bind(this.autoResize, this);
	  this.handlePaste = bind(this.handlePaste, this);
	}


	/**
	 * Create a text box with the given position, size, style and text content
	 *
	 * @param {Object} bounds
	 * @param {Number} bounds.x absolute x position
	 * @param {Number} bounds.y absolute y position
	 * @param {Number} [bounds.width] fixed width value
	 * @param {Number} [bounds.height] fixed height value
	 * @param {Number} [bounds.maxWidth] maximum width value
	 * @param {Number} [bounds.maxHeight] maximum height value
	 * @param {Number} [bounds.minWidth] minimum width value
	 * @param {Number} [bounds.minHeight] minimum height value
	 * @param {Object} [style]
	 * @param {String} value text content
	 *
	 * @return {DOMElement} The created content DOM element
	 */
	TextBox.prototype.create = function(bounds, style, value, options) {
	  var self = this;

	  var parent = this.parent,
	      content = this.content,
	      container = this.container;

	  options = this.options = options || {};

	  style = this.style = style || {};

	  var parentStyle = pick(style, [
	    'width',
	    'height',
	    'maxWidth',
	    'maxHeight',
	    'minWidth',
	    'minHeight',
	    'left',
	    'top',
	    'backgroundColor',
	    'position',
	    'overflow',
	    'border',
	    'wordWrap',
	    'textAlign',
	    'outline',
	    'transform'
	  ]);

	  assign(parent.style, {
	    width: bounds.width + 'px',
	    height: bounds.height + 'px',
	    maxWidth: bounds.maxWidth + 'px',
	    maxHeight: bounds.maxHeight + 'px',
	    minWidth: bounds.minWidth + 'px',
	    minHeight: bounds.minHeight + 'px',
	    left: bounds.x + 'px',
	    top: bounds.y + 'px',
	    backgroundColor: '#ffffff',
	    position: 'absolute',
	    overflow: 'visible',
	    border: '1px solid #ccc',
	    boxSizing: 'border-box',
	    wordWrap: 'normal',
	    textAlign: 'center',
	    outline: 'none'
	  }, parentStyle);

	  var contentStyle = pick(style, [
	    'fontFamily',
	    'fontSize',
	    'fontWeight',
	    'lineHeight',
	    'padding',
	    'paddingTop',
	    'paddingRight',
	    'paddingBottom',
	    'paddingLeft'
	  ]);

	  assign(content.style, {
	    boxSizing: 'border-box',
	    width: '100%',
	    outline: 'none',
	    wordWrap: 'break-word'
	  }, contentStyle);

	  if (options.centerVertically) {
	    assign(content.style, {
	      position: 'absolute',
	      top: '50%',
	      transform: 'translate(0, -50%)'
	    }, contentStyle);
	  }

	  content.innerText = value;

	  componentEvent.bind(content, 'keydown', this.keyHandler);
	  componentEvent.bind(content, 'mousedown', stopPropagation$1);
	  componentEvent.bind(content, 'paste', self.handlePaste);

	  if (options.autoResize) {
	    componentEvent.bind(content, 'input', this.autoResize);
	  }

	  if (options.resizable) {
	    this.resizable(style);
	  }

	  container.appendChild(parent);

	  // set selection to end of text
	  this.setSelection(content.lastChild, content.lastChild && content.lastChild.length);

	  return parent;
	};

	/**
	 * Intercept paste events to remove formatting from pasted text.
	 */
	TextBox.prototype.handlePaste = function(e) {
	  var options = this.options,
	      style = this.style;

	  e.preventDefault();

	  var text;

	  if (e.clipboardData) {

	    // Chrome, Firefox, Safari
	    text = e.clipboardData.getData('text/plain');
	  } else {

	    // Internet Explorer
	    text = window.clipboardData.getData('Text');
	  }

	  this.insertText(text);

	  if (options.autoResize) {
	    var hasResized = this.autoResize(style);

	    if (hasResized) {
	      this.resizeHandler(hasResized);
	    }
	  }
	};

	TextBox.prototype.insertText = function(text) {

	  // insertText command not supported by Internet Explorer
	  var success = document.execCommand('insertText', false, text);

	  if (success) {
	    return;
	  }

	  this._insertTextIE(text);
	};

	TextBox.prototype._insertTextIE = function(text) {

	  // Internet Explorer
	  var range = this.getSelection(),
	      startContainer = range.startContainer,
	      endContainer = range.endContainer,
	      startOffset = range.startOffset,
	      endOffset = range.endOffset,
	      commonAncestorContainer = range.commonAncestorContainer;

	  var childNodesArray = toArray(commonAncestorContainer.childNodes);

	  var container,
	      offset;

	  if (isTextNode(commonAncestorContainer)) {
	    var containerTextContent = startContainer.textContent;

	    startContainer.textContent =
	      containerTextContent.substring(0, startOffset)
	      + text
	      + containerTextContent.substring(endOffset);

	    container = startContainer;
	    offset = startOffset + text.length;

	  } else if (startContainer === this.content && endContainer === this.content) {
	    var textNode = document.createTextNode(text);

	    this.content.insertBefore(textNode, childNodesArray[startOffset]);

	    container = textNode;
	    offset = textNode.textContent.length;
	  } else {
	    var startContainerChildIndex = childNodesArray.indexOf(startContainer),
	        endContainerChildIndex = childNodesArray.indexOf(endContainer);

	    childNodesArray.forEach(function(childNode, index) {

	      if (index === startContainerChildIndex) {
	        childNode.textContent =
	          startContainer.textContent.substring(0, startOffset) +
	          text +
	          endContainer.textContent.substring(endOffset);
	      } else if (index > startContainerChildIndex && index <= endContainerChildIndex) {
	        remove(childNode);
	      }
	    });

	    container = startContainer;
	    offset = startOffset + text.length;
	  }

	  if (container && offset !== undefined) {

	    // is necessary in Internet Explorer
	    setTimeout(function() {
	      self.setSelection(container, offset);
	    });
	  }
	};

	/**
	 * Automatically resize element vertically to fit its content.
	 */
	TextBox.prototype.autoResize = function() {
	  var parent = this.parent,
	      content = this.content;

	  var fontSize = parseInt(this.style.fontSize) || 12;

	  if (content.scrollHeight > parent.offsetHeight ||
	      content.scrollHeight < parent.offsetHeight - fontSize) {
	    var bounds = parent.getBoundingClientRect();

	    var height = content.scrollHeight;
	    parent.style.height = height + 'px';

	    this.resizeHandler({
	      width: bounds.width,
	      height: bounds.height,
	      dx: 0,
	      dy: height - bounds.height
	    });
	  }
	};

	/**
	 * Make an element resizable by adding a resize handle.
	 */
	TextBox.prototype.resizable = function() {
	  var self = this;

	  var parent = this.parent,
	      resizeHandle = this.resizeHandle;

	  var minWidth = parseInt(this.style.minWidth) || 0,
	      minHeight = parseInt(this.style.minHeight) || 0,
	      maxWidth = parseInt(this.style.maxWidth) || Infinity,
	      maxHeight = parseInt(this.style.maxHeight) || Infinity;

	  if (!resizeHandle) {
	    resizeHandle = this.resizeHandle = domify(
	      '<div class="djs-direct-editing-resize-handle"></div>'
	    );

	    var startX, startY, startWidth, startHeight;

	    var onMouseDown = function(e) {
	      preventDefault$1(e);
	      stopPropagation$1(e);

	      startX = e.clientX;
	      startY = e.clientY;

	      var bounds = parent.getBoundingClientRect();

	      startWidth = bounds.width;
	      startHeight = bounds.height;

	      componentEvent.bind(document, 'mousemove', onMouseMove);
	      componentEvent.bind(document, 'mouseup', onMouseUp);
	    };

	    var onMouseMove = function(e) {
	      preventDefault$1(e);
	      stopPropagation$1(e);

	      var newWidth = min(max$1(startWidth + e.clientX - startX, minWidth), maxWidth);
	      var newHeight = min(max$1(startHeight + e.clientY - startY, minHeight), maxHeight);

	      parent.style.width = newWidth + 'px';
	      parent.style.height = newHeight + 'px';

	      self.resizeHandler({
	        width: startWidth,
	        height: startHeight,
	        dx: e.clientX - startX,
	        dy: e.clientY - startY
	      });
	    };

	    var onMouseUp = function(e) {
	      preventDefault$1(e);
	      stopPropagation$1(e);

	      componentEvent.unbind(document,'mousemove', onMouseMove, false);
	      componentEvent.unbind(document, 'mouseup', onMouseUp, false);
	    };

	    componentEvent.bind(resizeHandle, 'mousedown', onMouseDown);
	  }

	  assign(resizeHandle.style, {
	    position: 'absolute',
	    bottom: '0px',
	    right: '0px',
	    cursor: 'nwse-resize',
	    width: '0',
	    height: '0',
	    borderTop: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid transparent',
	    borderRight: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid #ccc',
	    borderBottom: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid #ccc',
	    borderLeft: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid transparent'
	  });

	  parent.appendChild(resizeHandle);
	};


	/**
	 * Clear content and style of the textbox, unbind listeners and
	 * reset CSS style.
	 */
	TextBox.prototype.destroy = function() {
	  var parent = this.parent,
	      content = this.content,
	      resizeHandle = this.resizeHandle;

	  // clear content
	  content.innerText = '';

	  // clear styles
	  parent.removeAttribute('style');
	  content.removeAttribute('style');

	  componentEvent.unbind(content, 'keydown', this.keyHandler);
	  componentEvent.unbind(content, 'mousedown', stopPropagation$1);
	  componentEvent.unbind(content, 'input', this.autoResize);
	  componentEvent.unbind(content, 'paste', this.handlePaste);

	  if (resizeHandle) {
	    resizeHandle.removeAttribute('style');

	    remove(resizeHandle);
	  }

	  remove(parent);
	};


	TextBox.prototype.getValue = function() {
	  return this.content.innerText.trim();
	};


	TextBox.prototype.getSelection = function() {
	  var selection = window.getSelection(),
	      range = selection.getRangeAt(0);

	  return range;
	};


	TextBox.prototype.setSelection = function(container, offset) {
	  var range = document.createRange();

	  if (container === null) {
	    range.selectNodeContents(this.content);
	  } else {
	    range.setStart(container, offset);
	    range.setEnd(container, offset);
	  }

	  var selection = window.getSelection();

	  selection.removeAllRanges();
	  selection.addRange(range);
	};

	/**
	 * A direct editing component that allows users
	 * to edit an elements text directly in the diagram
	 *
	 * @param {EventBus} eventBus the event bus
	 */
	function DirectEditing(eventBus, canvas) {

	  this._eventBus = eventBus;

	  this._providers = [];
	  this._textbox = new TextBox({
	    container: canvas.getContainer(),
	    keyHandler: bind(this._handleKey, this),
	    resizeHandler: bind(this._handleResize, this)
	  });
	}

	DirectEditing.$inject = [ 'eventBus', 'canvas' ];


	/**
	 * Register a direct editing provider

	 * @param {Object} provider the provider, must expose an #activate(element) method that returns
	 *                          an activation context ({ bounds: {x, y, width, height }, text }) if
	 *                          direct editing is available for the given element.
	 *                          Additionally the provider must expose a #update(element, value) method
	 *                          to receive direct editing updates.
	 */
	DirectEditing.prototype.registerProvider = function(provider) {
	  this._providers.push(provider);
	};


	/**
	 * Returns true if direct editing is currently active
	 *
	 * @return {Boolean}
	 */
	DirectEditing.prototype.isActive = function() {
	  return !!this._active;
	};


	/**
	 * Cancel direct editing, if it is currently active
	 */
	DirectEditing.prototype.cancel = function() {
	  if (!this._active) {
	    return;
	  }

	  this._fire('cancel');
	  this.close();
	};


	DirectEditing.prototype._fire = function(event, context) {
	  this._eventBus.fire('directEditing.' + event, context || { active: this._active });
	};

	DirectEditing.prototype.close = function() {
	  this._textbox.destroy();

	  this._fire('deactivate');

	  this._active = null;

	  this.resizable = undefined;
	};


	DirectEditing.prototype.complete = function() {

	  var active = this._active;

	  if (!active) {
	    return;
	  }

	  var containerBounds,
	      previousBounds = active.context.bounds,
	      newBounds = this.$textbox.getBoundingClientRect(),
	      newText = this.getValue(),
	      previousText = active.context.text;

	  if (
	    newText !== previousText ||
	    newBounds.height !== previousBounds.height ||
	    newBounds.width !== previousBounds.width
	  ) {
	    containerBounds = this._textbox.container.getBoundingClientRect();

	    active.provider.update(active.element, newText, active.context.text, {
	      x: newBounds.left - containerBounds.left,
	      y: newBounds.top - containerBounds.top,
	      width: newBounds.width,
	      height: newBounds.height
	    });
	  }

	  this._fire('complete');

	  this.close();
	};


	DirectEditing.prototype.getValue = function() {
	  return this._textbox.getValue();
	};


	DirectEditing.prototype._handleKey = function(e) {

	  // stop bubble
	  e.stopPropagation();

	  var key = e.keyCode || e.charCode;

	  // ESC
	  if (key === 27) {
	    e.preventDefault();
	    return this.cancel();
	  }

	  // Enter
	  if (key === 13 && !e.shiftKey) {
	    e.preventDefault();
	    return this.complete();
	  }
	};


	DirectEditing.prototype._handleResize = function(event) {
	  this._fire('resize', event);
	};


	/**
	 * Activate direct editing on the given element
	 *
	 * @param {Object} ElementDescriptor the descriptor for a shape or connection
	 * @return {Boolean} true if the activation was possible
	 */
	DirectEditing.prototype.activate = function(element) {
	  if (this.isActive()) {
	    this.cancel();
	  }

	  // the direct editing context
	  var context;

	  var provider = find(this._providers, function(p) {
	    return (context = p.activate(element)) ? p : null;
	  });

	  // check if activation took place
	  if (context) {
	    this.$textbox = this._textbox.create(
	      context.bounds,
	      context.style,
	      context.text,
	      context.options
	    );

	    this._active = {
	      element: element,
	      context: context,
	      provider: provider
	    };

	    if (context.options && context.options.resizable) {
	      this.resizable = true;
	    }

	    this._fire('activate');
	  }

	  return !!context;
	};

	var DirectEditingModule = {
	  __depends__: [
	    InteractionEventsModule
	  ],
	  __init__: [ 'directEditing' ],
	  directEditing: [ 'type', DirectEditing ]
	};

	var entrySelector = '.entry';

	var DEFAULT_PRIORITY$3 = 1000;


	/**
	 * A context pad that displays element specific, contextual actions next
	 * to a diagram element.
	 *
	 * @param {Object} config
	 * @param {boolean|Object} [config.scale={ min: 1.0, max: 1.5 }]
	 * @param {number} [config.scale.min]
	 * @param {number} [config.scale.max]
	 * @param {EventBus} eventBus
	 * @param {Overlays} overlays
	 */
	function ContextPad(config, eventBus, overlays) {

	  this._eventBus = eventBus;
	  this._overlays = overlays;

	  var scale = isDefined(config && config.scale) ? config.scale : {
	    min: 1,
	    max: 1.5
	  };

	  this._overlaysConfig = {
	    position: {
	      right: -9,
	      top: -6
	    },
	    scale: scale
	  };

	  this._current = null;

	  this._init();
	}

	ContextPad.$inject = [
	  'config.contextPad',
	  'eventBus',
	  'overlays'
	];


	/**
	 * Registers events needed for interaction with other components
	 */
	ContextPad.prototype._init = function() {

	  var eventBus = this._eventBus;

	  var self = this;

	  eventBus.on('selection.changed', function(e) {

	    var selection = e.newSelection;

	    if (selection.length === 1) {
	      self.open(selection[0]);
	    } else {
	      self.close();
	    }
	  });

	  eventBus.on('elements.delete', function(event) {
	    var elements = event.elements;

	    forEach(elements, function(e) {
	      if (self.isOpen(e)) {
	        self.close();
	      }
	    });
	  });

	  eventBus.on('element.changed', function(event) {
	    var element = event.element,
	        current = self._current;

	    // force reopen if element for which we are currently opened changed
	    if (current && current.element === element) {
	      self.open(element, true);
	    }
	  });
	};


	/**
	 * Register a provider with the context pad
	 *
	 * @param  {number} [priority=1000]
	 * @param  {ContextPadProvider} provider
	 *
	 * @example
	 * const contextPadProvider = {
	  *   getContextPadEntries: function(element) {
	  *     return function(entries) {
	  *       return {
	  *         ...entries,
	  *         'entry-1': {
	  *           label: 'My Entry',
	  *           action: function() { alert("I have been clicked!"); }
	  *         }
	  *       };
	  *     }
	  *   }
	  * };
	  *
	 * contextPad.registerProvider(800, contextPadProvider);
	 */
	ContextPad.prototype.registerProvider = function(priority, provider) {
	  if (!provider) {
	    provider = priority;
	    priority = DEFAULT_PRIORITY$3;
	  }

	  this._eventBus.on('contextPad.getProviders', priority, function(event) {
	    event.providers.push(provider);
	  });
	};


	/**
	 * Returns the context pad entries for a given element
	 *
	 * @param {djs.element.Base} element
	 *
	 * @return {Array<ContextPadEntryDescriptor>} list of entries
	 */
	ContextPad.prototype.getEntries = function(element) {
	  var providers = this._getProviders();

	  var entries = {};

	  // loop through all providers and their entries.
	  // group entries by id so that overriding an entry is possible
	  forEach(providers, function(provider) {
	    var entriesOrUpdater = provider.getContextPadEntries(element);

	    if (isFunction(entriesOrUpdater)) {
	      entries = entriesOrUpdater(entries);
	    } else {
	      forEach(entriesOrUpdater, function(entry, id) {
	        entries[id] = entry;
	      });
	    }
	  });

	  return entries;
	};


	/**
	 * Trigger an action available on the opened context pad
	 *
	 * @param  {string} action
	 * @param  {Event} event
	 * @param  {boolean} [autoActivate=false]
	 */
	ContextPad.prototype.trigger = function(action, event, autoActivate) {

	  var element = this._current.element,
	      entries = this._current.entries,
	      entry,
	      handler,
	      originalEvent,
	      button = event.delegateTarget || event.target;

	  if (!button) {
	    return event.preventDefault();
	  }

	  entry = entries[attr(button, 'data-action')];
	  handler = entry.action;

	  originalEvent = event.originalEvent || event;

	  // simple action (via callback function)
	  if (isFunction(handler)) {
	    if (action === 'click') {
	      return handler(originalEvent, element, autoActivate);
	    }
	  } else {
	    if (handler[action]) {
	      return handler[action](originalEvent, element, autoActivate);
	    }
	  }

	  // silence other actions
	  event.preventDefault();
	};


	/**
	 * Open the context pad for the given element
	 *
	 * @param {djs.model.Base} element
	 * @param {boolean} force if true, force reopening the context pad
	 */
	ContextPad.prototype.open = function(element, force) {
	  if (!force && this.isOpen(element)) {
	    return;
	  }

	  this.close();
	  this._updateAndOpen(element);
	};

	ContextPad.prototype._getProviders = function() {

	  var event = this._eventBus.createEvent({
	    type: 'contextPad.getProviders',
	    providers: []
	  });

	  this._eventBus.fire(event);

	  return event.providers;
	};

	ContextPad.prototype._updateAndOpen = function(element) {

	  var entries = this.getEntries(element),
	      pad = this.getPad(element),
	      html = pad.html;

	  forEach(entries, function(entry, id) {
	    var grouping = entry.group || 'default',
	        control = domify(entry.html || '<div class="entry" draggable="true"></div>'),
	        container;

	    attr(control, 'data-action', id);

	    container = query('[data-group=' + grouping + ']', html);
	    if (!container) {
	      container = domify('<div class="group" data-group="' + grouping + '"></div>');
	      html.appendChild(container);
	    }

	    container.appendChild(control);

	    if (entry.className) {
	      addClasses(control, entry.className);
	    }

	    if (entry.title) {
	      attr(control, 'title', entry.title);
	    }

	    if (entry.imageUrl) {
	      control.appendChild(domify('<img src="' + entry.imageUrl + '">'));
	    }
	  });

	  classes(html).add('open');

	  this._current = {
	    element: element,
	    pad: pad,
	    entries: entries
	  };

	  this._eventBus.fire('contextPad.open', { current: this._current });
	};


	ContextPad.prototype.getPad = function(element) {
	  if (this.isOpen()) {
	    return this._current.pad;
	  }

	  var self = this;

	  var overlays = this._overlays;

	  var html = domify('<div class="djs-context-pad"></div>');

	  var overlaysConfig = assign({
	    html: html
	  }, this._overlaysConfig);

	  delegate.bind(html, entrySelector, 'click', function(event) {
	    self.trigger('click', event);
	  });

	  delegate.bind(html, entrySelector, 'dragstart', function(event) {
	    self.trigger('dragstart', event);
	  });

	  // stop propagation of mouse events
	  componentEvent.bind(html, 'mousedown', function(event) {
	    event.stopPropagation();
	  });

	  this._overlayId = overlays.add(element, 'context-pad', overlaysConfig);

	  var pad = overlays.get(this._overlayId);

	  this._eventBus.fire('contextPad.create', { element: element, pad: pad });

	  return pad;
	};


	/**
	 * Close the context pad
	 */
	ContextPad.prototype.close = function() {
	  if (!this.isOpen()) {
	    return;
	  }

	  this._overlays.remove(this._overlayId);

	  this._overlayId = null;

	  this._eventBus.fire('contextPad.close', { current: this._current });

	  this._current = null;
	};

	/**
	 * Check if pad is open. If element is given, will check
	 * if pad is opened with given element.
	 *
	 * @param {Element} element
	 * @return {boolean}
	 */
	ContextPad.prototype.isOpen = function(element) {
	  return !!this._current && (!element ? true : this._current.element === element);
	};




	// helpers //////////////////////

	function addClasses(element, classNames) {

	  var classes$1 = classes(element);

	  var actualClassNames = isArray(classNames) ? classNames : classNames.split(/\s+/g);
	  actualClassNames.forEach(function(cls) {
	    classes$1.add(cls);
	  });
	}

	var ContextPadModule = {
	  __depends__: [
	    InteractionEventsModule,
	    OverlaysModule
	  ],
	  contextPad: [ 'type', ContextPad ]
	};

	var MARKER_TYPES = [
	  'marker-start',
	  'marker-mid',
	  'marker-end'
	];

	var NODES_CAN_HAVE_MARKER = [
	  'circle',
	  'ellipse',
	  'line',
	  'path',
	  'polygon',
	  'polyline',
	  'rect'
	];


	/**
	 * Adds support for previews of moving/resizing elements.
	 */
	function PreviewSupport(elementRegistry, eventBus, canvas, styles) {
	  this._elementRegistry = elementRegistry;
	  this._canvas = canvas;
	  this._styles = styles;

	  this._clonedMarkers = {};

	  var self = this;

	  eventBus.on('drag.cleanup', function() {
	    forEach(self._clonedMarkers, function(clonedMarker) {
	      remove$1(clonedMarker);
	    });

	    self._clonedMarkers = {};
	  });
	}

	PreviewSupport.$inject = [
	  'elementRegistry',
	  'eventBus',
	  'canvas',
	  'styles'
	];


	/**
	 * Returns graphics of an element.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {SVGElement}
	 */
	PreviewSupport.prototype.getGfx = function(element) {
	  return this._elementRegistry.getGraphics(element);
	};

	/**
	 * Adds a move preview of a given shape to a given svg group.
	 *
	 * @param {djs.model.Base} element
	 * @param {SVGElement} group
	 * @param {SVGElement} [gfx]
	 *
	 * @return {SVGElement} dragger
	 */
	PreviewSupport.prototype.addDragger = function(element, group, gfx) {
	  gfx = gfx || this.getGfx(element);

	  var dragger = clone(gfx);
	  var bbox = gfx.getBoundingClientRect();

	  this._cloneMarkers(getVisual(dragger));

	  attr$1(dragger, this._styles.cls('djs-dragger', [], {
	    x: bbox.top,
	    y: bbox.left
	  }));

	  append(group, dragger);

	  return dragger;
	};

	/**
	 * Adds a resize preview of a given shape to a given svg group.
	 *
	 * @param {djs.model.Base} element
	 * @param {SVGElement} group
	 *
	 * @return {SVGElement} frame
	 */
	PreviewSupport.prototype.addFrame = function(shape, group) {

	  var frame = create('rect', {
	    class: 'djs-resize-overlay',
	    width:  shape.width,
	    height: shape.height,
	    x: shape.x,
	    y: shape.y
	  });

	  append(group, frame);

	  return frame;
	};

	/**
	 * Clone all markers referenced by a node and its child nodes.
	 *
	 * @param {SVGElement} gfx
	 */
	PreviewSupport.prototype._cloneMarkers = function(gfx) {
	  var self = this;

	  if (gfx.childNodes) {

	    // TODO: use forEach once we drop PhantomJS
	    for (var i = 0; i < gfx.childNodes.length; i++) {

	      // recursively clone markers of child nodes
	      self._cloneMarkers(gfx.childNodes[ i ]);
	    }
	  }

	  if (!canHaveMarker(gfx)) {
	    return;
	  }

	  MARKER_TYPES.forEach(function(markerType) {
	    if (attr$1(gfx, markerType)) {
	      var marker = getMarker(gfx, markerType, self._canvas.getContainer());

	      self._cloneMarker(gfx, marker, markerType);
	    }
	  });
	};

	/**
	 * Clone marker referenced by an element.
	 *
	 * @param {SVGElement} gfx
	 * @param {SVGElement} marker
	 * @param {string} markerType
	 */
	PreviewSupport.prototype._cloneMarker = function(gfx, marker, markerType) {
	  var markerId = marker.id;

	  var clonedMarker = this._clonedMarkers[ markerId ];

	  if (!clonedMarker) {
	    clonedMarker = clone(marker);

	    var clonedMarkerId = markerId + '-clone';

	    clonedMarker.id = clonedMarkerId;

	    classes$1(clonedMarker)
	      .add('djs-dragger')
	      .add('djs-dragger-marker');

	    this._clonedMarkers[ markerId ] = clonedMarker;

	    var defs = query('defs', this._canvas._svg);

	    if (!defs) {
	      defs = create('defs');

	      append(this._canvas._svg, defs);
	    }

	    append(defs, clonedMarker);
	  }

	  var reference = idToReference(this._clonedMarkers[ markerId ].id);

	  attr$1(gfx, markerType, reference);
	};

	// helpers //////////

	/**
	 * Get marker of given type referenced by node.
	 *
	 * @param {Node} node
	 * @param {string} markerType
	 * @param {Node} [parentNode]
	 *
	 * @param {Node}
	 */
	function getMarker(node, markerType, parentNode) {
	  var id = referenceToId(attr$1(node, markerType));

	  return query('marker#' + id, parentNode || document);
	}

	/**
	 * Get ID of fragment within current document from its functional IRI reference.
	 * References may use single or double quotes.
	 *
	 * @param {string} reference
	 *
	 * @returns {string}
	 */
	function referenceToId(reference) {
	  return reference.match(/url\(['"]?#([^'"]*)['"]?\)/)[1];
	}

	/**
	 * Get functional IRI reference for given ID of fragment within current document.
	 *
	 * @param {string} id
	 *
	 * @returns {string}
	 */
	function idToReference(id) {
	  return 'url(#' + id + ')';
	}

	/**
	 * Check wether node type can have marker attributes.
	 *
	 * @param {Node} node
	 *
	 * @returns {boolean}
	 */
	function canHaveMarker(node) {
	  return NODES_CAN_HAVE_MARKER.indexOf(node.nodeName) !== -1;
	}

	var PreviewSupportModule = {
	  __init__: [ 'previewSupport' ],
	  previewSupport: [ 'type', PreviewSupport ]
	};

	var MARKER_OK$2 = 'drop-ok',
	    MARKER_NOT_OK$2 = 'drop-not-ok',
	    MARKER_ATTACH = 'attach-ok',
	    MARKER_NEW_PARENT = 'new-parent';

	var PREFIX = 'create';

	var HIGH_PRIORITY$3 = 2000;


	/**
	 * Create new elements through drag and drop.
	 *
	 * @param {Canvas} canvas
	 * @param {Dragging} dragging
	 * @param {EventBus} eventBus
	 * @param {Modeling} modeling
	 * @param {Rules} rules
	 */
	function Create(
	    canvas,
	    dragging,
	    eventBus,
	    modeling,
	    rules
	) {

	  // rules //////////

	  /**
	   * Check wether elements can be created.
	   *
	   * @param {Array<djs.model.Base>} elements
	   * @param {djs.model.Base} target
	   * @param {Point} position
	   * @param {djs.model.Base} [source]
	   *
	   * @returns {boolean|null|Object}
	   */
	  function canCreate(elements, target, position, source, hints) {
	    if (!target) {
	      return false;
	    }

	    // ignore child elements and external labels
	    elements = filter(elements, function(element) {
	      var labelTarget = element.labelTarget;

	      return !element.parent && !(isLabel$1(element) && elements.indexOf(labelTarget) !== -1);
	    });

	    var shape = find(elements, function(element) {
	      return !isConnection(element);
	    });

	    var attach = false,
	        connect = false,
	        create = false;

	    // (1) attaching single shapes
	    if (isSingleShape(elements)) {
	      attach = rules.allowed('shape.attach', {
	        position: position,
	        shape: shape,
	        target: target
	      });
	    }

	    if (!attach) {

	      // (2) creating elements
	      if (isSingleShape(elements)) {
	        create = rules.allowed('shape.create', {
	          position: position,
	          shape: shape,
	          source: source,
	          target: target
	        });
	      } else {
	        create = rules.allowed('elements.create', {
	          elements: elements,
	          position: position,
	          target: target
	        });
	      }

	    }

	    var connectionTarget = hints.connectionTarget;

	    // (3) appending single shapes
	    if (create || attach) {
	      if (shape && source) {
	        connect = rules.allowed('connection.create', {
	          source: connectionTarget === source ? shape : source,
	          target: connectionTarget === source ? source : shape,
	          hints: {
	            targetParent: target,
	            targetAttach: attach
	          }
	        });
	      }

	      return {
	        attach: attach,
	        connect: connect
	      };
	    }

	    // ignore wether or not elements can be created
	    if (create === null || attach === null) {
	      return null;
	    }

	    return false;
	  }

	  function setMarker(element, marker) {
	    [ MARKER_ATTACH, MARKER_OK$2, MARKER_NOT_OK$2, MARKER_NEW_PARENT ].forEach(function(m) {

	      if (m === marker) {
	        canvas.addMarker(element, m);
	      } else {
	        canvas.removeMarker(element, m);
	      }
	    });
	  }

	  // event handling //////////

	  eventBus.on([ 'create.move', 'create.hover' ], function(event) {
	    var context = event.context,
	        elements = context.elements,
	        hover = event.hover,
	        source = context.source,
	        hints = context.hints || {};

	    if (!hover) {
	      context.canExecute = false;
	      context.target = null;

	      return;
	    }

	    ensureConstraints(event);

	    var position = {
	      x: event.x,
	      y: event.y
	    };

	    var canExecute = context.canExecute = hover && canCreate(elements, hover, position, source, hints);

	    if (hover && canExecute !== null) {
	      context.target = hover;

	      if (canExecute && canExecute.attach) {
	        setMarker(hover, MARKER_ATTACH);
	      } else {
	        setMarker(hover, canExecute ? MARKER_NEW_PARENT : MARKER_NOT_OK$2);
	      }
	    }
	  });

	  eventBus.on([ 'create.end', 'create.out', 'create.cleanup' ], function(event) {
	    var hover = event.hover;

	    if (hover) {
	      setMarker(hover, null);
	    }
	  });

	  eventBus.on('create.end', function(event) {
	    var context = event.context,
	        source = context.source,
	        shape = context.shape,
	        elements = context.elements,
	        target = context.target,
	        canExecute = context.canExecute,
	        attach = canExecute && canExecute.attach,
	        connect = canExecute && canExecute.connect,
	        hints = context.hints || {};

	    if (canExecute === false || !target) {
	      return false;
	    }

	    ensureConstraints(event);

	    var position = {
	      x: event.x,
	      y: event.y
	    };

	    if (connect) {
	      shape = modeling.appendShape(source, shape, position, target, {
	        attach: attach,
	        connection: connect === true ? {} : connect,
	        connectionTarget: hints.connectionTarget
	      });
	    } else {
	      elements = modeling.createElements(elements, position, target, assign({}, hints, {
	        attach: attach
	      }));

	      // update shape
	      shape = find(elements, function(element) {
	        return !isConnection(element);
	      });
	    }

	    // update elements and shape
	    assign(context, {
	      elements: elements,
	      shape: shape
	    });

	    assign(event, {
	      elements: elements,
	      shape: shape
	    });
	  });

	  function cancel() {
	    var context = dragging.context();

	    if (context && context.prefix === PREFIX) {
	      dragging.cancel();
	    }
	  }

	  // cancel on <elements.changed> that is not result of <drag.end>
	  eventBus.on('create.init', function() {
	    eventBus.on('elements.changed', cancel);

	    eventBus.once([ 'create.cancel', 'create.end' ], HIGH_PRIORITY$3, function() {
	      eventBus.off('elements.changed', cancel);
	    });
	  });

	  // API //////////

	  this.start = function(event, elements, context) {
	    if (!isArray(elements)) {
	      elements = [ elements ];
	    }

	    var shape = find(elements, function(element) {
	      return !isConnection(element);
	    });

	    if (!shape) {

	      // at least one shape is required
	      return;
	    }

	    context = assign({
	      elements: elements,
	      hints: {},
	      shape: shape
	    }, context || {});

	    // make sure each element has x and y
	    forEach(elements, function(element) {
	      if (!isNumber(element.x)) {
	        element.x = 0;
	      }

	      if (!isNumber(element.y)) {
	        element.y = 0;
	      }
	    });

	    var bbox = getBBox(elements);

	    // center elements around cursor
	    forEach(elements, function(element) {
	      if (isConnection(element)) {
	        element.waypoints = map(element.waypoints, function(waypoint) {
	          return {
	            x: waypoint.x - bbox.x - bbox.width / 2,
	            y: waypoint.y - bbox.y - bbox.height / 2
	          };
	        });
	      }

	      assign(element, {
	        x: element.x - bbox.x - bbox.width / 2,
	        y: element.y - bbox.y - bbox.height / 2
	      });
	    });

	    dragging.init(event, PREFIX, {
	      cursor: 'grabbing',
	      autoActivate: true,
	      data: {
	        shape: shape,
	        elements: elements,
	        context: context
	      }
	    });
	  };
	}

	Create.$inject = [
	  'canvas',
	  'dragging',
	  'eventBus',
	  'modeling',
	  'rules'
	];

	// helpers //////////

	function ensureConstraints(event) {
	  var context = event.context,
	      createConstraints = context.createConstraints;

	  if (!createConstraints) {
	    return;
	  }

	  if (createConstraints.left) {
	    event.x = Math.max(event.x, createConstraints.left);
	  }

	  if (createConstraints.right) {
	    event.x = Math.min(event.x, createConstraints.right);
	  }

	  if (createConstraints.top) {
	    event.y = Math.max(event.y, createConstraints.top);
	  }

	  if (createConstraints.bottom) {
	    event.y = Math.min(event.y, createConstraints.bottom);
	  }
	}

	function isConnection(element) {
	  return !!element.waypoints;
	}

	function isSingleShape(elements) {
	  return elements && elements.length === 1 && !isConnection(elements[0]);
	}

	function isLabel$1(element) {
	  return !!element.labelTarget;
	}

	var LOW_PRIORITY$6 = 750;


	function CreatePreview(
	    canvas,
	    eventBus,
	    graphicsFactory,
	    previewSupport,
	    styles
	) {
	  function createDragGroup(elements) {
	    var dragGroup = create('g');

	    attr$1(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));

	    var childrenGfx = create('g');

	    elements.forEach(function(element) {

	      // create graphics
	      var gfx;

	      if (element.hidden) {
	        return;
	      }

	      if (element.waypoints) {
	        gfx = graphicsFactory._createContainer('connection', childrenGfx);

	        graphicsFactory.drawConnection(getVisual(gfx), element);
	      } else {
	        gfx = graphicsFactory._createContainer('shape', childrenGfx);

	        graphicsFactory.drawShape(getVisual(gfx), element);

	        translate(gfx, element.x, element.y);
	      }

	      // add preview
	      previewSupport.addDragger(element, dragGroup, gfx);
	    });

	    return dragGroup;
	  }

	  eventBus.on('create.move', LOW_PRIORITY$6, function(event) {

	    var hover = event.hover,
	        context = event.context,
	        elements = context.elements,
	        dragGroup = context.dragGroup;

	    // lazily create previews
	    if (!dragGroup) {
	      dragGroup = context.dragGroup = createDragGroup(elements);
	    }

	    var defaultLayer;

	    if (hover) {
	      if (!dragGroup.parentNode) {
	        defaultLayer = canvas.getDefaultLayer();

	        append(defaultLayer, dragGroup);
	      }

	      translate(dragGroup, event.x, event.y);
	    } else {
	      remove$1(dragGroup);
	    }
	  });

	  eventBus.on('create.cleanup', function(event) {
	    var context = event.context,
	        dragGroup = context.dragGroup;

	    if (dragGroup) {
	      remove$1(dragGroup);
	    }
	  });
	}

	CreatePreview.$inject = [
	  'canvas',
	  'eventBus',
	  'graphicsFactory',
	  'previewSupport',
	  'styles'
	];

	var CreateModule = {
	  __depends__: [
	    DraggingModule,
	    PreviewSupportModule,
	    RulesModule,
	    SelectionModule
	  ],
	  __init__: [
	    'create',
	    'createPreview'
	  ],
	  create: [ 'type', Create ],
	  createPreview: [ 'type', CreatePreview ]
	};

	var DATA_REF = 'data-id';

	var CLOSE_EVENTS = [
	  'contextPad.close',
	  'canvas.viewbox.changing',
	  'commandStack.changed'
	];

	var DEFAULT_PRIORITY$4 = 1000;


	/**
	 * A popup menu that can be used to display a list of actions anywhere in the canvas.
	 *
	 * @param {Object} config
	 * @param {boolean|Object} [config.scale={ min: 1.0, max: 1.5 }]
	 * @param {number} [config.scale.min]
	 * @param {number} [config.scale.max]
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 *
	 * @class
	 * @constructor
	 */
	function PopupMenu(config, eventBus, canvas) {

	  var scale = isDefined(config && config.scale) ? config.scale : {
	    min: 1,
	    max: 1.5
	  };

	  this._config = {
	    scale: scale
	  };

	  this._eventBus = eventBus;
	  this._canvas = canvas;
	  this._providers = {};
	  this._current = {};
	}

	PopupMenu.$inject = [
	  'config.popupMenu',
	  'eventBus',
	  'canvas'
	];

	/**
	 * Registers a popup menu provider
	 *
	 * @param  {string} id
	 * @param {number} [priority=1000]
	 * @param  {Object} provider
	 *
	 * @example
	 * const popupMenuProvider = {
	 *   getPopupMenuEntries: function(element) {
	 *     return {
	 *       'entry-1': {
	 *         label: 'My Entry',
	 *         action: function() { alert("I have been clicked!"); }
	 *       }
	 *     }
	 *   }
	 * };
	 *
	 * popupMenu.registerProvider('myMenuID', popupMenuProvider);
	 */
	PopupMenu.prototype.registerProvider = function(id, priority, provider) {
	  if (!provider) {
	    provider = priority;
	    priority = DEFAULT_PRIORITY$4;
	  }

	  this._eventBus.on('popupMenu.getProviders.' + id, priority, function(event) {
	    event.providers.push(provider);
	  });
	};

	/**
	 * Determine if the popup menu has entries.
	 *
	 * @return {boolean} true if empty
	 */
	PopupMenu.prototype.isEmpty = function(element, providerId) {
	  if (!element) {
	    throw new Error('element parameter is missing');
	  }

	  if (!providerId) {
	    throw new Error('providerId parameter is missing');
	  }

	  var providers = this._getProviders(providerId);

	  if (!providers) {
	    return true;
	  }

	  var entries = this._getEntries(element, providers),
	      headerEntries = this._getHeaderEntries(element, providers);

	  var hasEntries = size(entries) > 0,
	      hasHeaderEntries = headerEntries && size(headerEntries) > 0;

	  return !hasEntries && !hasHeaderEntries;
	};


	/**
	 * Create entries and open popup menu at given position
	 *
	 * @param  {Object} element
	 * @param  {string} id provider id
	 * @param  {Object} position
	 *
	 * @return {Object} popup menu instance
	 */
	PopupMenu.prototype.open = function(element, id, position) {

	  var providers = this._getProviders(id);

	  if (!element) {
	    throw new Error('Element is missing');
	  }

	  if (!providers || !providers.length) {
	    throw new Error('No registered providers for: ' + id);
	  }

	  if (!position) {
	    throw new Error('the position argument is missing');
	  }

	  if (this.isOpen()) {
	    this.close();
	  }

	  this._emit('open');

	  var current = this._current = {
	    className: id,
	    element: element,
	    position: position
	  };

	  var entries = this._getEntries(element, providers),
	      headerEntries = this._getHeaderEntries(element, providers);

	  current.entries = assign({}, entries, headerEntries);

	  current.container = this._createContainer();

	  if (size(headerEntries)) {
	    current.container.appendChild(
	      this._createEntries(headerEntries, 'djs-popup-header')
	    );
	  }

	  if (size(entries)) {
	    current.container.appendChild(
	      this._createEntries(entries, 'djs-popup-body')
	    );
	  }

	  var canvas = this._canvas,
	      parent = canvas.getContainer();

	  this._attachContainer(current.container, parent, position.cursor);
	  this._bindAutoClose();
	};


	/**
	 * Removes the popup menu and unbinds the event handlers.
	 */
	PopupMenu.prototype.close = function() {

	  if (!this.isOpen()) {
	    return;
	  }

	  this._emit('close');

	  this._unbindAutoClose();
	  remove(this._current.container);
	  this._current.container = null;
	};


	/**
	 * Determine if an open popup menu exist.
	 *
	 * @return {boolean} true if open
	 */
	PopupMenu.prototype.isOpen = function() {
	  return !!this._current.container;
	};


	/**
	 * Trigger an action associated with an entry.
	 *
	 * @param {Object} event
	 *
	 * @return the result of the action callback, if any
	 */
	PopupMenu.prototype.trigger = function(event) {

	  // silence other actions
	  event.preventDefault();

	  var element = event.delegateTarget || event.target,
	      entryId = attr(element, DATA_REF);

	  var entry = this._getEntry(entryId);

	  if (entry.action) {
	    return entry.action.call(null, event, entry);
	  }
	};

	PopupMenu.prototype._getProviders = function(id) {

	  var event = this._eventBus.createEvent({
	    type: 'popupMenu.getProviders.' + id,
	    providers: []
	  });

	  this._eventBus.fire(event);

	  return event.providers;
	};

	PopupMenu.prototype._getEntries = function(element, providers) {

	  var entries = {};

	  forEach(providers, function(provider) {

	    // handle legacy method
	    if (!provider.getPopupMenuEntries) {
	      forEach(provider.getEntries(element), function(entry) {
	        var id = entry.id;

	        if (!id) {
	          throw new Error('every entry must have the id property set');
	        }

	        entries[id] = omit(entry, [ 'id' ]);
	      });

	      return;
	    }

	    var entriesOrUpdater = provider.getPopupMenuEntries(element);

	    if (isFunction(entriesOrUpdater)) {
	      entries = entriesOrUpdater(entries);
	    } else {
	      forEach(entriesOrUpdater, function(entry, id) {
	        entries[id] = entry;
	      });
	    }
	  });

	  return entries;
	};

	PopupMenu.prototype._getHeaderEntries = function(element, providers) {

	  var entries = {};

	  forEach(providers, function(provider) {

	    // handle legacy method
	    if (!provider.getPopupMenuHeaderEntries) {
	      if (!provider.getHeaderEntries) {
	        return;
	      }

	      forEach(provider.getHeaderEntries(element), function(entry) {
	        var id = entry.id;

	        if (!id) {
	          throw new Error('every entry must have the id property set');
	        }

	        entries[id] = omit(entry, [ 'id' ]);
	      });

	      return;
	    }

	    var entriesOrUpdater = provider.getPopupMenuHeaderEntries(element);

	    if (isFunction(entriesOrUpdater)) {
	      entries = entriesOrUpdater(entries);
	    } else {
	      forEach(entriesOrUpdater, function(entry, id) {
	        entries[id] = entry;
	      });
	    }
	  });

	  return entries;


	};

	/**
	 * Gets an entry instance (either entry or headerEntry) by id.
	 *
	 * @param  {string} entryId
	 *
	 * @return {Object} entry instance
	 */
	PopupMenu.prototype._getEntry = function(entryId) {

	  var entry = this._current.entries[entryId];

	  if (!entry) {
	    throw new Error('entry not found');
	  }

	  return entry;
	};

	PopupMenu.prototype._emit = function(eventName) {
	  this._eventBus.fire('popupMenu.' + eventName);
	};

	/**
	 * Creates the popup menu container.
	 *
	 * @return {Object} a DOM container
	 */
	PopupMenu.prototype._createContainer = function() {
	  var container = domify('<div class="djs-popup">'),
	      position = this._current.position,
	      className = this._current.className;

	  assign(container.style, {
	    position: 'absolute',
	    left: position.x + 'px',
	    top: position.y + 'px',
	    visibility: 'hidden'
	  });

	  classes(container).add(className);

	  return container;
	};


	/**
	 * Attaches the container to the DOM.
	 *
	 * @param {Object} container
	 * @param {Object} parent
	 */
	PopupMenu.prototype._attachContainer = function(container, parent, cursor) {
	  var self = this;

	  // Event handler
	  delegate.bind(container, '.entry' ,'click', function(event) {
	    self.trigger(event);
	  });

	  this._updateScale(container);

	  // Attach to DOM
	  parent.appendChild(container);

	  if (cursor) {
	    this._assureIsInbounds(container, cursor);
	  }
	};


	/**
	 * Updates popup style.transform with respect to the config and zoom level.
	 *
	 * @method _updateScale
	 *
	 * @param {Object} container
	 */
	PopupMenu.prototype._updateScale = function(container) {
	  var zoom = this._canvas.zoom();

	  var scaleConfig = this._config.scale,
	      minScale,
	      maxScale,
	      scale = zoom;

	  if (scaleConfig !== true) {

	    if (scaleConfig === false) {
	      minScale = 1;
	      maxScale = 1;
	    } else {
	      minScale = scaleConfig.min;
	      maxScale = scaleConfig.max;
	    }

	    if (isDefined(minScale) && zoom < minScale) {
	      scale = minScale;
	    }

	    if (isDefined(maxScale) && zoom > maxScale) {
	      scale = maxScale;
	    }

	  }

	  setTransform$1(container, 'scale(' + scale + ')');
	};


	/**
	 * Make sure that the menu is always fully shown
	 *
	 * @method function
	 *
	 * @param  {Object} container
	 * @param  {Position} cursor {x, y}
	 */
	PopupMenu.prototype._assureIsInbounds = function(container, cursor) {
	  var canvas = this._canvas,
	      clientRect = canvas._container.getBoundingClientRect();

	  var containerX = container.offsetLeft,
	      containerY = container.offsetTop,
	      containerWidth = container.scrollWidth,
	      containerHeight = container.scrollHeight,
	      overAxis = {},
	      left, top;

	  var cursorPosition = {
	    x: cursor.x - clientRect.left,
	    y: cursor.y - clientRect.top
	  };

	  if (containerX + containerWidth > clientRect.width) {
	    overAxis.x = true;
	  }

	  if (containerY + containerHeight > clientRect.height) {
	    overAxis.y = true;
	  }

	  if (overAxis.x && overAxis.y) {
	    left = cursorPosition.x - containerWidth + 'px';
	    top = cursorPosition.y - containerHeight + 'px';
	  } else if (overAxis.x) {
	    left = cursorPosition.x - containerWidth + 'px';
	    top = cursorPosition.y + 'px';
	  } else if (overAxis.y && cursorPosition.y < containerHeight) {
	    left = cursorPosition.x + 'px';
	    top = 10 + 'px';
	  } else if (overAxis.y) {
	    left = cursorPosition.x + 'px';
	    top = cursorPosition.y - containerHeight + 'px';
	  }

	  assign(container.style, { left: left, top: top }, { visibility: 'visible', 'z-index': 1000 });
	};


	/**
	 * Creates a list of entries and returns them as a DOM container.
	 *
	 * @param {Array<Object>} entries an array of entry objects
	 * @param {string} className the class name of the entry container
	 *
	 * @return {Object} a DOM container
	 */
	PopupMenu.prototype._createEntries = function(entries, className) {

	  var entriesContainer = domify('<div>'),
	      self = this;

	  classes(entriesContainer).add(className);

	  forEach(entries, function(entry, id) {
	    var entryContainer = self._createEntry(entry, id);
	    entriesContainer.appendChild(entryContainer);
	  });

	  return entriesContainer;
	};


	/**
	 * Creates a single entry and returns it as a DOM container.
	 *
	 * @param  {Object} entry
	 *
	 * @return {Object} a DOM container
	 */
	PopupMenu.prototype._createEntry = function(entry, id) {

	  var entryContainer = domify('<div>'),
	      entryClasses = classes(entryContainer);

	  entryClasses.add('entry');

	  if (entry.className) {
	    entry.className.split(' ').forEach(function(className) {
	      entryClasses.add(className);
	    });
	  }

	  attr(entryContainer, DATA_REF, id);

	  if (entry.label) {
	    var label = domify('<span>');
	    label.textContent = entry.label;
	    entryContainer.appendChild(label);
	  }

	  if (entry.imageUrl) {
	    entryContainer.appendChild(domify('<img src="' + entry.imageUrl + '" />'));
	  }

	  if (entry.active === true) {
	    entryClasses.add('active');
	  }

	  if (entry.disabled === true) {
	    entryClasses.add('disabled');
	  }

	  if (entry.title) {
	    entryContainer.title = entry.title;
	  }

	  return entryContainer;
	};


	/**
	 * Set up listener to close popup automatically on certain events.
	 */
	PopupMenu.prototype._bindAutoClose = function() {
	  this._eventBus.once(CLOSE_EVENTS, this.close, this);
	};


	/**
	 * Remove the auto-closing listener.
	 */
	PopupMenu.prototype._unbindAutoClose = function() {
	  this._eventBus.off(CLOSE_EVENTS, this.close, this);
	};



	// helpers /////////////////////////////

	function setTransform$1(element, transform) {
	  element.style['transform-origin'] = 'top left';

	  [ '', '-ms-', '-webkit-' ].forEach(function(prefix) {
	    element.style[prefix + 'transform'] = transform;
	  });
	}

	var PopupMenuModule = {
	  __init__: [ 'popupMenu' ],
	  popupMenu: [ 'type', PopupMenu ]
	};

	/**
	 * A clip board stub
	 */
	function Clipboard() {}


	Clipboard.prototype.get = function() {
	  return this._data;
	};

	Clipboard.prototype.set = function(data) {
	  this._data = data;
	};

	Clipboard.prototype.clear = function() {
	  var data = this._data;

	  delete this._data;

	  return data;
	};

	Clipboard.prototype.isEmpty = function() {
	  return !this._data;
	};

	var ClipboardModule = {
	  clipboard: [ 'type', Clipboard ]
	};

	function Mouse(eventBus) {
	  var self = this;

	  this._lastMoveEvent = null;

	  function setLastMoveEvent(mousemoveEvent) {
	    self._lastMoveEvent = mousemoveEvent;
	  }

	  eventBus.on('canvas.init', function(context) {
	    var svg = self._svg = context.svg;

	    svg.addEventListener('mousemove', setLastMoveEvent);
	  });

	  eventBus.on('canvas.destroy', function() {
	    self._lastMouseEvent = null;

	    self._svg.removeEventListener('mousemove', setLastMoveEvent);
	  });
	}

	Mouse.$inject = [ 'eventBus' ];

	Mouse.prototype.getLastMoveEvent = function() {
	  return this._lastMoveEvent || createMoveEvent(0, 0);
	};

	// helpers //////////

	function createMoveEvent(x, y) {
	  var event = document.createEvent('MouseEvent');

	  var screenX = x,
	      screenY = y,
	      clientX = x,
	      clientY = y;

	  if (event.initMouseEvent) {
	    event.initMouseEvent(
	      'mousemove',
	      true,
	      true,
	      window,
	      0,
	      screenX,
	      screenY,
	      clientX,
	      clientY,
	      false,
	      false,
	      false,
	      false,
	      0,
	      null
	    );
	  }

	  return event;
	}

	var MouseModule = {
	  __init__: [ 'mouse' ],
	  mouse: [ 'type', Mouse ]
	};

	/**
	 * @typedef {Function} <copyPaste.canCopyElements> listener
	 *
	 * @param {Object} context
	 * @param {Array<djs.model.Base>} context.elements
	 *
	 * @returns {Array<djs.model.Base>|boolean} - Return elements to be copied or false to disallow
	 * copying.
	 */

	/**
	 * @typedef {Function} <copyPaste.copyElement> listener
	 *
	 * @param {Object} context
	 * @param {Object} context.descriptor
	 * @param {djs.model.Base} context.element
	 * @param {Array<djs.model.Base>} context.elements
	 */

	/**
	 * @typedef {Function} <copyPaste.elementsCopied> listener
	 *
	 * @param {Object} context
	 * @param {Object} context.elements
	 * @param {Object} context.tree
	 */

	/**
	 * @typedef {Function} <copyPaste.pasteElement> listener
	 *
	 * @param {Object} context
	 * @param {Object} context.cache - Already created elements.
	 * @param {Object} context.descriptor
	 */

	/**
	 * @typedef {Function} <copyPaste.pasteElements> listener
	 *
	 * @param {Object} context
	 * @param {Object} context.hints - Add hints before pasting.
	 */

	/**
	 * Copy and paste elements.
	 *
	 * @param {Canvas} canvas
	 * @param {Create} create
	 * @param {Clipboard} clipboard
	 * @param {ElementFactory} elementFactory
	 * @param {EventBus} eventBus
	 * @param {Modeling} modeling
	 * @param {Mouse} mouse
	 * @param {Rules} rules
	 */
	function CopyPaste(
	    canvas,
	    create,
	    clipboard,
	    elementFactory,
	    eventBus,
	    modeling,
	    mouse,
	    rules
	) {

	  this._canvas = canvas;
	  this._create = create;
	  this._clipboard = clipboard;
	  this._elementFactory = elementFactory;
	  this._eventBus = eventBus;
	  this._modeling = modeling;
	  this._mouse = mouse;
	  this._rules = rules;

	  eventBus.on('copyPaste.copyElement', function(context) {
	    var descriptor = context.descriptor,
	        element = context.element,
	        elements = context.elements;

	    // default priority (priority = 1)
	    descriptor.priority = 1;

	    descriptor.id = element.id;

	    var parentCopied = find(elements, function(e) {
	      return e === element.parent;
	    });

	    // do NOT reference parent if parent wasn't copied
	    if (parentCopied) {
	      descriptor.parent = element.parent.id;
	    }

	    // attachers (priority = 2)
	    if (isAttacher(element)) {
	      descriptor.priority = 2;

	      descriptor.host = element.host.id;
	    }

	    // connections (priority = 3)
	    if (isConnection$1(element)) {
	      descriptor.priority = 3;

	      descriptor.source = element.source.id;
	      descriptor.target = element.target.id;

	      descriptor.waypoints = copyWaypoints(element);
	    }

	    // labels (priority = 4)
	    if (isLabel$2(element)) {
	      descriptor.priority = 4;

	      descriptor.labelTarget = element.labelTarget.id;
	    }

	    forEach([ 'x', 'y', 'width', 'height' ], function(property) {
	      if (isNumber(element[ property ])) {
	        descriptor[ property ] = element[ property ];
	      }
	    });

	    descriptor.hidden = element.hidden;
	    descriptor.collapsed = element.collapsed;

	  });

	  eventBus.on('copyPaste.pasteElements', function(context) {
	    var hints = context.hints;

	    assign(hints, {
	      createElementsBehavior: false
	    });
	  });
	}

	CopyPaste.$inject = [
	  'canvas',
	  'create',
	  'clipboard',
	  'elementFactory',
	  'eventBus',
	  'modeling',
	  'mouse',
	  'rules'
	];


	/**
	 * Copy elements.
	 *
	 * @param {Array<djs.model.Base>} elements
	 *
	 * @returns {Object}
	 */
	CopyPaste.prototype.copy = function(elements) {
	  var allowed,
	      tree;

	  if (!isArray(elements)) {
	    elements = elements ? [ elements ] : [];
	  }

	  allowed = this._eventBus.fire('copyPaste.canCopyElements', {
	    elements: elements
	  });

	  if (allowed === false) {
	    tree = {};
	  } else {
	    tree = this.createTree(isArray(allowed) ? allowed : elements);
	  }

	  // we set an empty tree, selection of elements
	  // to copy was empty.
	  this._clipboard.set(tree);

	  this._eventBus.fire('copyPaste.elementsCopied', {
	    elements: elements,
	    tree: tree
	  });

	  return tree;
	};

	/**
	 * Paste elements.
	 *
	 * @param {Object} [context]
	 * @param {djs.model.base} [context.element] - Parent.
	 * @param {Point} [context.point] - Position.
	 * @param {Object} [context.hints] - Hints.
	 */
	CopyPaste.prototype.paste = function(context) {
	  var tree = this._clipboard.get();

	  if (this._clipboard.isEmpty()) {
	    return;
	  }

	  var hints = context && context.hints || {};

	  this._eventBus.fire('copyPaste.pasteElements', {
	    hints: hints
	  });

	  var elements = this._createElements(tree);

	  // paste directly
	  if (context && context.element && context.point) {
	    return this._paste(elements, context.element, context.point, hints);
	  }

	  this._create.start(this._mouse.getLastMoveEvent(), elements, {
	    hints: hints || {}
	  });
	};

	/**
	 * Paste elements directly.
	 *
	 * @param {Array<djs.model.Base>} elements
	 * @param {djs.model.base} target
	 * @param {Point} position
	 * @param {Object} [hints]
	 */
	CopyPaste.prototype._paste = function(elements, target, position, hints) {

	  // make sure each element has x and y
	  forEach(elements, function(element) {
	    if (!isNumber(element.x)) {
	      element.x = 0;
	    }

	    if (!isNumber(element.y)) {
	      element.y = 0;
	    }
	  });

	  var bbox = getBBox(elements);

	  // center elements around cursor
	  forEach(elements, function(element) {
	    if (isConnection$1(element)) {
	      element.waypoints = map(element.waypoints, function(waypoint) {
	        return {
	          x: waypoint.x - bbox.x - bbox.width / 2,
	          y: waypoint.y - bbox.y - bbox.height / 2
	        };
	      });
	    }

	    assign(element, {
	      x: element.x - bbox.x - bbox.width / 2,
	      y: element.y - bbox.y - bbox.height / 2
	    });
	  });

	  return this._modeling.createElements(elements, position, target, assign({}, hints));
	};

	/**
	 * Create elements from tree.
	 */
	CopyPaste.prototype._createElements = function(tree) {
	  var self = this;

	  var eventBus = this._eventBus;

	  var cache = {};

	  var elements = [];

	  forEach(tree, function(branch, depth) {

	    // sort by priority
	    branch = sortBy(branch, 'priority');

	    forEach(branch, function(descriptor) {

	      // remove priority
	      var attrs = assign({}, omit(descriptor, [ 'priority' ]));

	      if (cache[ descriptor.parent ]) {
	        attrs.parent = cache[ descriptor.parent ];
	      } else {
	        delete attrs.parent;
	      }

	      eventBus.fire('copyPaste.pasteElement', {
	        cache: cache,
	        descriptor: attrs
	      });

	      var element;

	      if (isConnection$1(attrs)) {
	        attrs.source = cache[ descriptor.source ];
	        attrs.target = cache[ descriptor.target ];

	        element = cache[ descriptor.id ] = self.createConnection(attrs);

	        elements.push(element);

	        return;
	      }

	      if (isLabel$2(attrs)) {
	        attrs.labelTarget = cache[ attrs.labelTarget ];

	        element = cache[ descriptor.id ] = self.createLabel(attrs);

	        elements.push(element);

	        return;
	      }

	      if (attrs.host) {
	        attrs.host = cache[ attrs.host ];
	      }

	      element = cache[ descriptor.id ] = self.createShape(attrs);

	      elements.push(element);
	    });

	  });

	  return elements;
	};

	CopyPaste.prototype.createConnection = function(attrs) {
	  var connection = this._elementFactory.createConnection(omit(attrs, [ 'id' ]));

	  return connection;
	};

	CopyPaste.prototype.createLabel = function(attrs) {
	  var label = this._elementFactory.createLabel(omit(attrs, [ 'id' ]));

	  return label;
	};

	CopyPaste.prototype.createShape = function(attrs) {
	  var shape = this._elementFactory.createShape(omit(attrs, [ 'id' ]));

	  return shape;
	};

	/**
	 * Check wether element has relations to other elements e.g. attachers, labels and connections.
	 *
	 * @param  {Object} element
	 * @param  {Array<djs.model.Base>} elements
	 *
	 * @returns {boolean}
	 */
	CopyPaste.prototype.hasRelations = function(element, elements) {
	  var labelTarget,
	      source,
	      target;

	  if (isConnection$1(element)) {
	    source = find(elements, matchPattern({ id: element.source.id }));
	    target = find(elements, matchPattern({ id: element.target.id }));

	    if (!source || !target) {
	      return false;
	    }
	  }

	  if (isLabel$2(element)) {
	    labelTarget = find(elements, matchPattern({ id: element.labelTarget.id }));

	    if (!labelTarget) {
	      return false;
	    }
	  }

	  return true;
	};

	/**
	 * Create a tree-like structure from elements.
	 *
	 * @example
	 * tree: {
	  *  0: [
	  *    { id: 'Shape_1', priority: 1, ... },
	  *    { id: 'Shape_2', priority: 1, ... },
	  *    { id: 'Connection_1', source: 'Shape_1', target: 'Shape_2', priority: 3, ... },
	  *    ...
	  *  ],
	  *  1: [
	  *    { id: 'Shape_3', parent: 'Shape1', priority: 1, ... },
	  *    ...
	  *  ]
	  * };
	  *
	  * @param  {Array<djs.model.base>} elements
	  *
	  * @return {Object}
	  */
	CopyPaste.prototype.createTree = function(elements) {
	  var rules = this._rules,
	      self = this;

	  var tree = {},
	      elementsData = [];

	  var parents = getParents(elements);

	  function canCopy(element, elements) {
	    return rules.allowed('element.copy', {
	      element: element,
	      elements: elements
	    });
	  }

	  function addElementData(element, depth) {

	    // (1) check wether element has already been added
	    var foundElementData = find(elementsData, function(elementsData) {
	      return element === elementsData.element;
	    });

	    // (2) add element if not already added
	    if (!foundElementData) {
	      elementsData.push({
	        element: element,
	        depth: depth
	      });

	      return;
	    }

	    // (3) update depth
	    if (foundElementData.depth < depth) {
	      elementsData = removeElementData(foundElementData, elementsData);

	      elementsData.push({
	        element: foundElementData.element,
	        depth: depth
	      });
	    }
	  }

	  function removeElementData(elementData, elementsData) {
	    var index = elementsData.indexOf(elementData);

	    if (index !== -1) {
	      elementsData.splice(index, 1);
	    }

	    return elementsData;
	  }

	  // (1) add elements
	  eachElement(parents, function(element, _index, depth) {

	    // do NOT add external labels directly
	    if (isLabel$2(element)) {
	      return;
	    }

	    // always copy external labels
	    forEach(element.labels, function(label) {
	      addElementData(label, depth);
	    });

	    function addRelatedElements(elements) {
	      elements && elements.length && forEach(elements, function(element) {

	        // add external labels
	        forEach(element.labels, function(label) {
	          addElementData(label, depth);
	        });

	        addElementData(element, depth);
	      });
	    }

	    forEach([ element.attachers, element.incoming, element.outgoing ], addRelatedElements);

	    addElementData(element, depth);

	    return element.children;
	  });

	  elements = map(elementsData, function(elementData) {
	    return elementData.element;
	  });

	  // (2) copy elements
	  elementsData = map(elementsData, function(elementData) {
	    elementData.descriptor = {};

	    self._eventBus.fire('copyPaste.copyElement', {
	      descriptor: elementData.descriptor,
	      element: elementData.element,
	      elements: elements
	    });

	    return elementData;
	  });

	  // (3) sort elements by priority
	  elementsData = sortBy(elementsData, function(elementData) {
	    return elementData.descriptor.priority;
	  });

	  elements = map(elementsData, function(elementData) {
	    return elementData.element;
	  });

	  // (4) create tree
	  forEach(elementsData, function(elementData) {
	    var depth = elementData.depth;

	    if (!self.hasRelations(elementData.element, elements)) {
	      removeElement(elementData.element, elements);

	      return;
	    }

	    if (!canCopy(elementData.element, elements)) {
	      removeElement(elementData.element, elements);

	      return;
	    }

	    if (!tree[depth]) {
	      tree[depth] = [];
	    }

	    tree[depth].push(elementData.descriptor);
	  });

	  return tree;
	};

	// helpers //////////

	function isAttacher(element) {
	  return !!element.host;
	}

	function isConnection$1(element) {
	  return !!element.waypoints;
	}

	function isLabel$2(element) {
	  return !!element.labelTarget;
	}

	function copyWaypoints(element) {
	  return map(element.waypoints, function(waypoint) {

	    waypoint = copyWaypoint(waypoint);

	    if (waypoint.original) {
	      waypoint.original = copyWaypoint(waypoint.original);
	    }

	    return waypoint;
	  });
	}

	function copyWaypoint(waypoint) {
	  return assign({}, waypoint);
	}

	function removeElement(element, elements) {
	  var index = elements.indexOf(element);

	  if (index === -1) {
	    return elements;
	  }

	  return elements.splice(index, 1);
	}

	var CopyPasteModule = {
	  __depends__: [
	    ClipboardModule,
	    CreateModule,
	    MouseModule,
	    RulesModule
	  ],
	  __init__: [ 'copyPaste' ],
	  copyPaste: [ 'type', CopyPaste ]
	};

	function copyProperties(source, target, properties) {
	  if (!isArray(properties)) {
	    properties = [ properties ];
	  }

	  forEach(properties, function(property) {
	    if (!isUndefined(source[property])) {
	      target[property] = source[property];
	    }
	  });
	}

	function removeProperties(element, properties) {
	  if (!isArray(properties)) {
	    properties = [ properties ];
	  }

	  forEach(properties, function(property) {
	    if (element[property]) {
	      delete element[property];
	    }
	  });
	}

	var LOW_PRIORITY$7 = 750;


	function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {

	  eventBus.on('copyPaste.copyElement', LOW_PRIORITY$7, function(context) {
	    var descriptor = context.descriptor,
	        element = context.element;

	    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);

	    descriptor.type = element.type;

	    copyProperties(businessObject, descriptor, 'name');

	    descriptor.di = {};

	    // fill and stroke will be set to DI
	    copyProperties(businessObject.di, descriptor.di, [
	      'fill',
	      'stroke'
	    ]);

	    copyProperties(businessObject.di, descriptor, 'isExpanded');

	    if (isLabel$3(descriptor)) {
	      return descriptor;
	    }

	    // default sequence flow
	    if (businessObject.default) {
	      descriptor.default = businessObject.default.id;
	    }
	  });

	  eventBus.on('moddleCopy.canCopyProperty', function(context) {
	    var parent = context.parent,
	        property = context.property,
	        propertyName = context.propertyName,
	        bpmnProcess;

	    if (
	      propertyName === 'processRef' &&
	      is$1(parent, 'bpmn:Participant') &&
	      is$1(property, 'bpmn:Process')
	    ) {
	      bpmnProcess = bpmnFactory.create('bpmn:Process');

	      // return copy of process
	      return moddleCopy.copyElement(property, bpmnProcess);
	    }
	  });

	  var references;

	  function resolveReferences(descriptor, cache) {
	    var businessObject = getBusinessObject(descriptor);

	    // default sequence flows
	    if (descriptor.default) {

	      // relationship cannot be resolved immediately
	      references[ descriptor.default ] = {
	        element: businessObject,
	        property: 'default'
	      };
	    }

	    // boundary events
	    if (descriptor.host) {

	      // relationship can be resolved immediately
	      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);
	    }

	    references = omit(references, reduce(references, function(array, reference, key) {
	      var element = reference.element,
	          property = reference.property;

	      if (key === descriptor.id) {
	        element[ property ] = businessObject;

	        array.push(descriptor.id);
	      }

	      return array;
	    }, []));
	  }

	  eventBus.on('copyPaste.pasteElements', function() {
	    references = {};
	  });

	  eventBus.on('copyPaste.pasteElement', function(context) {
	    var cache = context.cache,
	        descriptor = context.descriptor,
	        oldBusinessObject = descriptor.oldBusinessObject,
	        newBusinessObject;

	    // do NOT copy business object if external label
	    if (isLabel$3(descriptor)) {
	      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);

	      return;
	    }

	    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);

	    descriptor.businessObject = moddleCopy.copyElement(
	      oldBusinessObject,
	      newBusinessObject
	    );

	    // resolve references e.g. default sequence flow
	    resolveReferences(descriptor, cache);

	    copyProperties(descriptor, newBusinessObject, [
	      'isExpanded',
	      'name'
	    ]);

	    removeProperties(descriptor, 'oldBusinessObject');
	  });

	}


	BpmnCopyPaste.$inject = [
	  'bpmnFactory',
	  'eventBus',
	  'moddleCopy'
	];

	// helpers //////////

	function isLabel$3(element) {
	  return !!element.labelTarget;
	}

	var DISALLOWED_PROPERTIES = [
	  'artifacts',
	  'dataInputAssociations',
	  'dataOutputAssociations',
	  'default',
	  'flowElements',
	  'lanes',
	  'incoming',
	  'outgoing'
	];

	/**
	 * @typedef {Function} <moddleCopy.canCopyProperties> listener
	 *
	 * @param {Object} context
	 * @param {Array<string>} context.propertyNames
	 * @param {ModdleElement} context.sourceElement
	 * @param {ModdleElement} context.targetElement
	 *
	 * @returns {Array<string>|boolean} - Return properties to be copied or false to disallow
	 * copying.
	 */

	/**
	 * @typedef {Function} <moddleCopy.canCopyProperty> listener
	 *
	 * @param {Object} context
	 * @param {ModdleElement} context.parent
	 * @param {*} context.property
	 * @param {string} context.propertyName
	 *
	 * @returns {*|boolean} - Return copied property or false to disallow
	 * copying.
	 */

	/**
	 * @typedef {Function} <moddleCopy.canSetCopiedProperty> listener
	 *
	 * @param {Object} context
	 * @param {ModdleElement} context.parent
	 * @param {*} context.property
	 * @param {string} context.propertyName
	 *
	 * @returns {boolean} - Return false to disallow
	 * setting copied property.
	 */

	/**
	 * Utility for copying model properties from source element to target element.
	 *
	 * @param {EventBus} eventBus
	 * @param {BpmnFactory} bpmnFactory
	 * @param {BpmnModdle} moddle
	 */
	function ModdleCopy(eventBus, bpmnFactory, moddle) {
	  this._bpmnFactory = bpmnFactory;
	  this._eventBus = eventBus;
	  this._moddle = moddle;

	  // copy extension elements last
	  eventBus.on('moddleCopy.canCopyProperties', function(context) {
	    var propertyNames = context.propertyNames;

	    if (!propertyNames || !propertyNames.length) {
	      return;
	    }

	    return sortBy(propertyNames, function(propertyName) {
	      return propertyName === 'extensionElements';
	    });
	  });

	  // default check whether property can be copied
	  eventBus.on('moddleCopy.canCopyProperty', function(context) {
	    var parent = context.parent,
	        parentDescriptor = isObject(parent) && parent.$descriptor,
	        propertyName = context.propertyName;

	    if (propertyName && DISALLOWED_PROPERTIES.indexOf(propertyName) !== -1) {

	      // disallow copying property
	      return false;
	    }

	    if (propertyName &&
	      parentDescriptor &&
	      !find(parentDescriptor.properties, matchPattern({ name: propertyName }))) {

	      // disallow copying property
	      return false;
	    }
	  });

	  // do NOT allow to copy empty extension elements
	  eventBus.on('moddleCopy.canSetCopiedProperty', function(context) {
	    var property = context.property;

	    if (is$2(property, 'bpmn:ExtensionElements') && (!property.values || !property.values.length)) {

	      // disallow setting copied property
	      return false;
	    }
	  });
	}

	ModdleCopy.$inject = [
	  'eventBus',
	  'bpmnFactory',
	  'moddle'
	];

	/**
	 * Copy model properties of source element to target element.
	 *
	 * @param {ModdleElement} sourceElement
	 * @param {ModdleElement} targetElement
	 * @param {Array<string>} [propertyNames]
	 *
	 * @param {ModdleElement}
	 */
	ModdleCopy.prototype.copyElement = function(sourceElement, targetElement, propertyNames) {
	  var self = this;

	  if (propertyNames && !isArray(propertyNames)) {
	    propertyNames = [ propertyNames ];
	  }

	  propertyNames = propertyNames || getPropertyNames(sourceElement.$descriptor);

	  var canCopyProperties = this._eventBus.fire('moddleCopy.canCopyProperties', {
	    propertyNames: propertyNames,
	    sourceElement: sourceElement,
	    targetElement: targetElement
	  });

	  if (canCopyProperties === false) {
	    return targetElement;
	  }

	  if (isArray(canCopyProperties)) {
	    propertyNames = canCopyProperties;
	  }

	  // copy properties
	  forEach(propertyNames, function(propertyName) {
	    var sourceProperty;

	    if (has(sourceElement, propertyName)) {
	      sourceProperty = sourceElement.get(propertyName);
	    }

	    var copiedProperty = self.copyProperty(sourceProperty, targetElement, propertyName);

	    var canSetProperty = self._eventBus.fire('moddleCopy.canSetCopiedProperty', {
	      parent: targetElement,
	      property: copiedProperty,
	      propertyName: propertyName
	    });

	    if (canSetProperty === false) {
	      return;
	    }

	    if (isDefined(copiedProperty)) {
	      targetElement.set(propertyName, copiedProperty);
	    }
	  });

	  return targetElement;
	};

	/**
	 * Copy model property.
	 *
	 * @param {*} property
	 * @param {ModdleElement} parent
	 * @param {string} propertyName
	 *
	 * @returns {*}
	 */
	ModdleCopy.prototype.copyProperty = function(property, parent, propertyName) {
	  var self = this;

	  // allow others to copy property
	  var copiedProperty = this._eventBus.fire('moddleCopy.canCopyProperty', {
	    parent: parent,
	    property: property,
	    propertyName: propertyName
	  });

	  // return if copying is NOT allowed
	  if (copiedProperty === false) {
	    return;
	  }

	  if (copiedProperty) {
	    if (isObject(copiedProperty) && copiedProperty.$type && !copiedProperty.$parent) {
	      copiedProperty.$parent = parent;
	    }

	    return copiedProperty;
	  }

	  var propertyDescriptor = this._moddle.getPropertyDescriptor(parent, propertyName);

	  // do NOT copy Ids and references
	  if (propertyDescriptor.isId || propertyDescriptor.isReference) {
	    return;
	  }

	  // copy arrays
	  if (isArray(property)) {
	    return reduce(property, function(childProperties, childProperty) {

	      // recursion
	      copiedProperty = self.copyProperty(childProperty, parent, propertyName);

	      // copying might NOT be allowed
	      if (copiedProperty) {
	        copiedProperty.$parent = parent;

	        return childProperties.concat(copiedProperty);
	      }

	      return childProperties;
	    }, []);
	  }

	  // copy model elements
	  if (isObject(property) && property.$type) {
	    if (this._moddle.getElementDescriptor(property).isGeneric) {
	      return;
	    }

	    copiedProperty = self._bpmnFactory.create(property.$type);

	    copiedProperty.$parent = parent;

	    // recursion
	    copiedProperty = self.copyElement(property, copiedProperty);

	    return copiedProperty;
	  }

	  // copy primitive properties
	  return property;
	};

	// helpers //////////

	function getPropertyNames(descriptor, keepDefaultProperties) {
	  return reduce(descriptor.properties, function(properties, property) {

	    if (keepDefaultProperties && property.default) {
	      return properties;
	    }

	    return properties.concat(property.name);
	  }, []);
	}

	function is$2(element, type) {
	  return element && (typeof element.$instanceOf === 'function') && element.$instanceOf(type);
	}

	var CopyPasteModule$1 = {
	  __depends__: [
	    CopyPasteModule
	  ],
	  __init__: [ 'bpmnCopyPaste', 'moddleCopy' ],
	  bpmnCopyPaste: [ 'type', BpmnCopyPaste ],
	  moddleCopy: [ 'type', ModdleCopy ]
	};

	var round$6 = Math.round;

	/**
	 * Service that allow replacing of elements.
	 */
	function Replace(modeling) {

	  this._modeling = modeling;
	}

	Replace.$inject = [ 'modeling' ];

	/**
	 * @param {Element} oldElement - Element to be replaced
	 * @param {Object}  newElementData - Containing information about the new element,
	 *                                   for example the new bounds and type.
	 * @param {Object}  options - Custom options that will be attached to the context. It can be used to inject data
	 *                            that is needed in the command chain. For example it could be used in
	 *                            eventbus.on('commandStack.shape.replace.postExecute') to change shape attributes after
	 *                            shape creation.
	 */
	Replace.prototype.replaceElement = function(oldElement, newElementData, options) {

	  if (oldElement.waypoints) {

	    // TODO(nikku): we do not replace connections, yet
	    return null;
	  }

	  var modeling = this._modeling;

	  var width = newElementData.width || oldElement.width,
	      height = newElementData.height || oldElement.height,
	      x = newElementData.x || oldElement.x,
	      y = newElementData.y || oldElement.y,
	      centerX = round$6(x + width / 2),
	      centerY = round$6(y + height / 2);

	  // modeling API requires center coordinates,
	  // account for that when handling shape bounds

	  return modeling.replaceShape(
	    oldElement,
	    assign(
	      {},
	      newElementData,
	      {
	        x: centerX,
	        y: centerY,
	        width: width,
	        height: height
	      }
	    ),
	    options
	  );
	};

	var ReplaceModule = {
	  __init__: [ 'replace' ],
	  replace: [ 'type', Replace ]
	};

	function copyProperties$1(source, target, properties) {
	  if (!isArray(properties)) {
	    properties = [ properties ];
	  }

	  forEach(properties, function(property) {
	    if (!isUndefined(source[property])) {
	      target[property] = source[property];
	    }
	  });
	}

	var CUSTOM_PROPERTIES = [
	  'cancelActivity',
	  'instantiate',
	  'eventGatewayType',
	  'triggeredByEvent',
	  'isInterrupting'
	];


	function toggeling(element, target) {

	  var oldCollapsed = (
	    element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element)
	  );

	  var targetCollapsed;

	  if (target && (has(target, 'collapsed') || has(target, 'isExpanded'))) {

	    // property is explicitly set so use it
	    targetCollapsed = (
	      has(target, 'collapsed') ? target.collapsed : !target.isExpanded
	    );
	  } else {

	    // keep old state
	    targetCollapsed = oldCollapsed;
	  }

	  if (oldCollapsed !== targetCollapsed) {
	    element.collapsed = oldCollapsed;
	    return true;
	  }

	  return false;
	}



	/**
	 * This module takes care of replacing BPMN elements
	 */
	function BpmnReplace(
	    bpmnFactory,
	    elementFactory,
	    moddleCopy,
	    modeling,
	    replace,
	    rules,
	    selection
	) {

	  /**
	   * Prepares a new business object for the replacement element
	   * and triggers the replace operation.
	   *
	   * @param  {djs.model.Base} element
	   * @param  {Object} target
	   * @param  {Object} [hints]
	   *
	   * @return {djs.model.Base} the newly created element
	   */
	  function replaceElement(element, target, hints) {

	    hints = hints || {};

	    var type = target.type,
	        oldBusinessObject = element.businessObject;

	    if (isSubProcess(oldBusinessObject)) {
	      if (type === 'bpmn:SubProcess') {
	        if (toggeling(element, target)) {

	          // expanding or collapsing process
	          modeling.toggleCollapse(element);

	          return element;
	        }
	      }
	    }

	    var newBusinessObject = bpmnFactory.create(type);

	    var newElement = {
	      type: type,
	      businessObject: newBusinessObject
	    };

	    var elementProps = getPropertyNames(oldBusinessObject.$descriptor),
	        newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),
	        copyProps = intersection(elementProps, newElementProps);

	    // initialize special properties defined in target definition
	    assign(newBusinessObject, pick(target, CUSTOM_PROPERTIES));

	    var properties = filter(copyProps, function(propertyName) {

	      // copying event definitions, unless we replace
	      if (propertyName === 'eventDefinitions') {
	        return hasEventDefinition$1(element, target.eventDefinitionType);
	      }

	      // retain loop characteristics if the target element
	      // is not an event sub process
	      if (propertyName === 'loopCharacteristics') {
	        return !isEventSubProcess(newBusinessObject);
	      }

	      // so the applied properties from 'target' don't get lost
	      if (has(newBusinessObject, propertyName)) {
	        return false;
	      }

	      if (propertyName === 'processRef' && target.isExpanded === false) {
	        return false;
	      }

	      if (propertyName === 'triggeredByEvent') {
	        return false;
	      }

	      return true;
	    });

	    newBusinessObject = moddleCopy.copyElement(
	      oldBusinessObject,
	      newBusinessObject,
	      properties
	    );

	    // initialize custom BPMN extensions
	    if (target.eventDefinitionType) {

	      // only initialize with new eventDefinition
	      // if we did not set an event definition yet,
	      // i.e. because we copied it
	      if (!hasEventDefinition$1(newBusinessObject, target.eventDefinitionType)) {
	        newElement.eventDefinitionType = target.eventDefinitionType;
	        newElement.eventDefinitionAttrs = target.eventDefinitionAttrs;
	      }
	    }

	    if (is$1(oldBusinessObject, 'bpmn:Activity')) {

	      if (isSubProcess(oldBusinessObject)) {

	        // no toggeling, so keep old state
	        newElement.isExpanded = isExpanded(oldBusinessObject);
	      }

	      // else if property is explicitly set, use it
	      else if (target && has(target, 'isExpanded')) {
	        newElement.isExpanded = target.isExpanded;
	      }

	      // TODO: need also to respect min/max Size
	      // copy size, from an expanded subprocess to an expanded alternative subprocess
	      // except bpmn:Task, because Task is always expanded
	      if ((isExpanded(oldBusinessObject) && !is$1(oldBusinessObject, 'bpmn:Task')) && newElement.isExpanded) {
	        newElement.width = element.width;
	        newElement.height = element.height;
	      }
	    }

	    // remove children if not expanding sub process
	    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {
	      hints.moveChildren = false;
	    }

	    // transform collapsed/expanded pools
	    if (is$1(oldBusinessObject, 'bpmn:Participant')) {

	      // create expanded pool
	      if (target.isExpanded === true) {
	        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');
	      } else {

	        // remove children when transforming to collapsed pool
	        hints.moveChildren = false;
	      }

	      // apply same width and default height
	      newElement.width = element.width;
	      newElement.height = elementFactory._getDefaultSize(newBusinessObject).height;
	    }

	    if (!rules.allowed('shape.resize', { shape: newBusinessObject })) {
	      newElement.height = elementFactory._getDefaultSize(newBusinessObject).height;
	      newElement.width = elementFactory._getDefaultSize(newBusinessObject).width;
	    }

	    newBusinessObject.name = oldBusinessObject.name;

	    // retain default flow's reference between inclusive <-> exclusive gateways and activities
	    if (
	      isAny(oldBusinessObject, [
	        'bpmn:ExclusiveGateway',
	        'bpmn:InclusiveGateway',
	        'bpmn:Activity'
	      ]) &&
	      isAny(newBusinessObject, [
	        'bpmn:ExclusiveGateway',
	        'bpmn:InclusiveGateway',
	        'bpmn:Activity'
	      ])
	    ) {
	      newBusinessObject.default = oldBusinessObject.default;
	    }

	    if (
	      target.host &&
	      !is$1(oldBusinessObject, 'bpmn:BoundaryEvent') &&
	      is$1(newBusinessObject, 'bpmn:BoundaryEvent')
	    ) {
	      newElement.host = target.host;
	    }

	    // The DataStoreReference element is 14px wider than the DataObjectReference element
	    // This ensures that they stay centered on the x axis when replaced
	    if (
	      newElement.type === 'bpmn:DataStoreReference' ||
	      newElement.type === 'bpmn:DataObjectReference'
	    ) {
	      newElement.x = element.x + (element.width - newElement.width) / 2;
	    }

	    newElement.di = {};

	    // fill and stroke will be set to DI
	    copyProperties$1(oldBusinessObject.di, newElement.di, [
	      'fill',
	      'stroke'
	    ]);

	    newElement = replace.replaceElement(element, newElement, hints);

	    if (hints.select !== false) {
	      selection.select(newElement);
	    }

	    return newElement;
	  }

	  this.replaceElement = replaceElement;
	}

	BpmnReplace.$inject = [
	  'bpmnFactory',
	  'elementFactory',
	  'moddleCopy',
	  'modeling',
	  'replace',
	  'rules',
	  'selection'
	];


	function isSubProcess(bo) {
	  return is$1(bo, 'bpmn:SubProcess');
	}

	function hasEventDefinition$1(element, type) {

	  var bo = getBusinessObject(element);

	  return type && bo.get('eventDefinitions').some(function(definition) {
	    return is$1(definition, type);
	  });
	}

	/**
	 * Compute intersection between two arrays.
	 */
	function intersection(a1, a2) {
	  return a1.filter(function(el) {
	    return a2.indexOf(el) !== -1;
	  });
	}

	var ReplaceModule$1 = {
	  __depends__: [
	    CopyPasteModule$1,
	    ReplaceModule,
	    SelectionModule
	  ],
	  bpmnReplace: [ 'type', BpmnReplace ]
	};

	/**
	 * Returns true, if an element is from a different type
	 * than a target definition. Takes into account the type,
	 * event definition type and triggeredByEvent property.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {boolean}
	 */
	function isDifferentType(element) {

	  return function(entry) {
	    var target = entry.target;

	    var businessObject = getBusinessObject(element),
	        eventDefinition = businessObject.eventDefinitions && businessObject.eventDefinitions[0];

	    var isTypeEqual = businessObject.$type === target.type;

	    var isEventDefinitionEqual = (
	      (eventDefinition && eventDefinition.$type) === target.eventDefinitionType
	    );

	    var isTriggeredByEventEqual = (
	      businessObject.triggeredByEvent === target.triggeredByEvent
	    );

	    var isExpandedEqual = (
	      target.isExpanded === undefined ||
	      target.isExpanded === isExpanded(businessObject)
	    );

	    return !isTypeEqual || !isEventDefinitionEqual || !isTriggeredByEventEqual || !isExpandedEqual;
	  };
	}

	var START_EVENT = [
	  {
	    label: 'Start Event',
	    actionName: 'replace-with-none-start',
	    className: 'bpmn-icon-start-event-none',
	    target: {
	      type: 'bpmn:StartEvent'
	    }
	  },
	  {
	    label: 'Intermediate Throw Event',
	    actionName: 'replace-with-none-intermediate-throwing',
	    className: 'bpmn-icon-intermediate-event-none',
	    target: {
	      type: 'bpmn:IntermediateThrowEvent'
	    }
	  },
	  {
	    label: 'End Event',
	    actionName: 'replace-with-none-end',
	    className: 'bpmn-icon-end-event-none',
	    target: {
	      type: 'bpmn:EndEvent'
	    }
	  },
	  {
	    label: 'Message Start Event',
	    actionName: 'replace-with-message-start',
	    className: 'bpmn-icon-start-event-message',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:MessageEventDefinition'
	    }
	  },
	  {
	    label: 'Timer Start Event',
	    actionName: 'replace-with-timer-start',
	    className: 'bpmn-icon-start-event-timer',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:TimerEventDefinition'
	    }
	  },
	  {
	    label: 'Conditional Start Event',
	    actionName: 'replace-with-conditional-start',
	    className: 'bpmn-icon-start-event-condition',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:ConditionalEventDefinition'
	    }
	  },
	  {
	    label: 'Signal Start Event',
	    actionName: 'replace-with-signal-start',
	    className: 'bpmn-icon-start-event-signal',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:SignalEventDefinition'
	    }
	  }
	];

	var START_EVENT_SUB_PROCESS = [
	  {
	    label: 'Start Event',
	    actionName: 'replace-with-none-start',
	    className: 'bpmn-icon-start-event-none',
	    target: {
	      type: 'bpmn:StartEvent'
	    }
	  },
	  {
	    label: 'Intermediate Throw Event',
	    actionName: 'replace-with-none-intermediate-throwing',
	    className: 'bpmn-icon-intermediate-event-none',
	    target: {
	      type: 'bpmn:IntermediateThrowEvent'
	    }
	  },
	  {
	    label: 'End Event',
	    actionName: 'replace-with-none-end',
	    className: 'bpmn-icon-end-event-none',
	    target: {
	      type: 'bpmn:EndEvent'
	    }
	  }
	];

	var INTERMEDIATE_EVENT = [
	  {
	    label: 'Start Event',
	    actionName: 'replace-with-none-start',
	    className: 'bpmn-icon-start-event-none',
	    target: {
	      type: 'bpmn:StartEvent'
	    }
	  },
	  {
	    label: 'Intermediate Throw Event',
	    actionName: 'replace-with-none-intermediate-throw',
	    className: 'bpmn-icon-intermediate-event-none',
	    target: {
	      type: 'bpmn:IntermediateThrowEvent'
	    }
	  },
	  {
	    label: 'End Event',
	    actionName: 'replace-with-none-end',
	    className: 'bpmn-icon-end-event-none',
	    target: {
	      type: 'bpmn:EndEvent'
	    }
	  },
	  {
	    label: 'Message Intermediate Catch Event',
	    actionName: 'replace-with-message-intermediate-catch',
	    className: 'bpmn-icon-intermediate-event-catch-message',
	    target: {
	      type: 'bpmn:IntermediateCatchEvent',
	      eventDefinitionType: 'bpmn:MessageEventDefinition'
	    }
	  },
	  {
	    label: 'Message Intermediate Throw Event',
	    actionName: 'replace-with-message-intermediate-throw',
	    className: 'bpmn-icon-intermediate-event-throw-message',
	    target: {
	      type: 'bpmn:IntermediateThrowEvent',
	      eventDefinitionType: 'bpmn:MessageEventDefinition'
	    }
	  },
	  {
	    label: 'Timer Intermediate Catch Event',
	    actionName: 'replace-with-timer-intermediate-catch',
	    className: 'bpmn-icon-intermediate-event-catch-timer',
	    target: {
	      type: 'bpmn:IntermediateCatchEvent',
	      eventDefinitionType: 'bpmn:TimerEventDefinition'
	    }
	  },
	  {
	    label: 'Escalation Intermediate Throw Event',
	    actionName: 'replace-with-escalation-intermediate-throw',
	    className: 'bpmn-icon-intermediate-event-throw-escalation',
	    target: {
	      type: 'bpmn:IntermediateThrowEvent',
	      eventDefinitionType: 'bpmn:EscalationEventDefinition'
	    }
	  },
	  {
	    label: 'Conditional Intermediate Catch Event',
	    actionName: 'replace-with-conditional-intermediate-catch',
	    className: 'bpmn-icon-intermediate-event-catch-condition',
	    target: {
	      type: 'bpmn:IntermediateCatchEvent',
	      eventDefinitionType: 'bpmn:ConditionalEventDefinition'
	    }
	  },
	  {
	    label: 'Link Intermediate Catch Event',
	    actionName: 'replace-with-link-intermediate-catch',
	    className: 'bpmn-icon-intermediate-event-catch-link',
	    target: {
	      type: 'bpmn:IntermediateCatchEvent',
	      eventDefinitionType: 'bpmn:LinkEventDefinition',
	      eventDefinitionAttrs: {
	        name: ''
	      }
	    }
	  },
	  {
	    label: 'Link Intermediate Throw Event',
	    actionName: 'replace-with-link-intermediate-throw',
	    className: 'bpmn-icon-intermediate-event-throw-link',
	    target: {
	      type: 'bpmn:IntermediateThrowEvent',
	      eventDefinitionType: 'bpmn:LinkEventDefinition',
	      eventDefinitionAttrs: {
	        name: ''
	      }
	    }
	  },
	  {
	    label: 'Compensation Intermediate Throw Event',
	    actionName: 'replace-with-compensation-intermediate-throw',
	    className: 'bpmn-icon-intermediate-event-throw-compensation',
	    target: {
	      type: 'bpmn:IntermediateThrowEvent',
	      eventDefinitionType: 'bpmn:CompensateEventDefinition'
	    }
	  },
	  {
	    label: 'Signal Intermediate Catch Event',
	    actionName: 'replace-with-signal-intermediate-catch',
	    className: 'bpmn-icon-intermediate-event-catch-signal',
	    target: {
	      type: 'bpmn:IntermediateCatchEvent',
	      eventDefinitionType: 'bpmn:SignalEventDefinition'
	    }
	  },
	  {
	    label: 'Signal Intermediate Throw Event',
	    actionName: 'replace-with-signal-intermediate-throw',
	    className: 'bpmn-icon-intermediate-event-throw-signal',
	    target: {
	      type: 'bpmn:IntermediateThrowEvent',
	      eventDefinitionType: 'bpmn:SignalEventDefinition'
	    }
	  }
	];

	var END_EVENT = [
	  {
	    label: 'Start Event',
	    actionName: 'replace-with-none-start',
	    className: 'bpmn-icon-start-event-none',
	    target: {
	      type: 'bpmn:StartEvent'
	    }
	  },
	  {
	    label: 'Intermediate Throw Event',
	    actionName: 'replace-with-none-intermediate-throw',
	    className: 'bpmn-icon-intermediate-event-none',
	    target: {
	      type: 'bpmn:IntermediateThrowEvent'
	    }
	  },
	  {
	    label: 'End Event',
	    actionName: 'replace-with-none-end',
	    className: 'bpmn-icon-end-event-none',
	    target: {
	      type: 'bpmn:EndEvent'
	    }
	  },
	  {
	    label: 'Message End Event',
	    actionName: 'replace-with-message-end',
	    className: 'bpmn-icon-end-event-message',
	    target: {
	      type: 'bpmn:EndEvent',
	      eventDefinitionType: 'bpmn:MessageEventDefinition'
	    }
	  },
	  {
	    label: 'Escalation End Event',
	    actionName: 'replace-with-escalation-end',
	    className: 'bpmn-icon-end-event-escalation',
	    target: {
	      type: 'bpmn:EndEvent',
	      eventDefinitionType: 'bpmn:EscalationEventDefinition'
	    }
	  },
	  {
	    label: 'Error End Event',
	    actionName: 'replace-with-error-end',
	    className: 'bpmn-icon-end-event-error',
	    target: {
	      type: 'bpmn:EndEvent',
	      eventDefinitionType: 'bpmn:ErrorEventDefinition'
	    }
	  },
	  {
	    label: 'Cancel End Event',
	    actionName: 'replace-with-cancel-end',
	    className: 'bpmn-icon-end-event-cancel',
	    target: {
	      type: 'bpmn:EndEvent',
	      eventDefinitionType: 'bpmn:CancelEventDefinition'
	    }
	  },
	  {
	    label: 'Compensation End Event',
	    actionName: 'replace-with-compensation-end',
	    className: 'bpmn-icon-end-event-compensation',
	    target: {
	      type: 'bpmn:EndEvent',
	      eventDefinitionType: 'bpmn:CompensateEventDefinition'
	    }
	  },
	  {
	    label: 'Signal End Event',
	    actionName: 'replace-with-signal-end',
	    className: 'bpmn-icon-end-event-signal',
	    target: {
	      type: 'bpmn:EndEvent',
	      eventDefinitionType: 'bpmn:SignalEventDefinition'
	    }
	  },
	  {
	    label: 'Terminate End Event',
	    actionName: 'replace-with-terminate-end',
	    className: 'bpmn-icon-end-event-terminate',
	    target: {
	      type: 'bpmn:EndEvent',
	      eventDefinitionType: 'bpmn:TerminateEventDefinition'
	    }
	  }
	];

	var GATEWAY = [
	  {
	    label: 'Exclusive Gateway',
	    actionName: 'replace-with-exclusive-gateway',
	    className: 'bpmn-icon-gateway-xor',
	    target: {
	      type: 'bpmn:ExclusiveGateway'
	    }
	  },
	  {
	    label: 'Parallel Gateway',
	    actionName: 'replace-with-parallel-gateway',
	    className: 'bpmn-icon-gateway-parallel',
	    target: {
	      type: 'bpmn:ParallelGateway'
	    }
	  },
	  {
	    label: 'Inclusive Gateway',
	    actionName: 'replace-with-inclusive-gateway',
	    className: 'bpmn-icon-gateway-or',
	    target: {
	      type: 'bpmn:InclusiveGateway'
	    }
	  },
	  {
	    label: 'Complex Gateway',
	    actionName: 'replace-with-complex-gateway',
	    className: 'bpmn-icon-gateway-complex',
	    target: {
	      type: 'bpmn:ComplexGateway'
	    }
	  },
	  {
	    label: 'Event based Gateway',
	    actionName: 'replace-with-event-based-gateway',
	    className: 'bpmn-icon-gateway-eventbased',
	    target: {
	      type: 'bpmn:EventBasedGateway',
	      instantiate: false,
	      eventGatewayType: 'Exclusive'
	    }
	  }

	  // Gateways deactivated until https://github.com/bpmn-io/bpmn-js/issues/194
	  // {
	  //   label: 'Event based instantiating Gateway',
	  //   actionName: 'replace-with-exclusive-event-based-gateway',
	  //   className: 'bpmn-icon-exclusive-event-based',
	  //   target: {
	  //     type: 'bpmn:EventBasedGateway'
	  //   },
	  //   options: {
	  //     businessObject: { instantiate: true, eventGatewayType: 'Exclusive' }
	  //   }
	  // },
	  // {
	  //   label: 'Parallel Event based instantiating Gateway',
	  //   actionName: 'replace-with-parallel-event-based-instantiate-gateway',
	  //   className: 'bpmn-icon-parallel-event-based-instantiate-gateway',
	  //   target: {
	  //     type: 'bpmn:EventBasedGateway'
	  //   },
	  //   options: {
	  //     businessObject: { instantiate: true, eventGatewayType: 'Parallel' }
	  //   }
	  // }
	];

	var SUBPROCESS_EXPANDED = [
	  {
	    label: 'Transaction',
	    actionName: 'replace-with-transaction',
	    className: 'bpmn-icon-transaction',
	    target: {
	      type: 'bpmn:Transaction',
	      isExpanded: true
	    }
	  },
	  {
	    label: 'Event Sub Process',
	    actionName: 'replace-with-event-subprocess',
	    className: 'bpmn-icon-event-subprocess-expanded',
	    target: {
	      type: 'bpmn:SubProcess',
	      triggeredByEvent: true,
	      isExpanded: true
	    }
	  },
	  {
	    label: 'Sub Process (collapsed)',
	    actionName: 'replace-with-collapsed-subprocess',
	    className: 'bpmn-icon-subprocess-collapsed',
	    target: {
	      type: 'bpmn:SubProcess',
	      isExpanded: false
	    }
	  }
	];

	var TRANSACTION = [
	  {
	    label: 'Sub Process',
	    actionName: 'replace-with-subprocess',
	    className: 'bpmn-icon-subprocess-expanded',
	    target: {
	      type: 'bpmn:SubProcess',
	      isExpanded: true
	    }
	  },
	  {
	    label: 'Event Sub Process',
	    actionName: 'replace-with-event-subprocess',
	    className: 'bpmn-icon-event-subprocess-expanded',
	    target: {
	      type: 'bpmn:SubProcess',
	      triggeredByEvent: true,
	      isExpanded: true
	    }
	  }
	];

	var EVENT_SUB_PROCESS = [
	  {
	    label: 'Sub Process',
	    actionName: 'replace-with-subprocess',
	    className: 'bpmn-icon-subprocess-expanded',
	    target: {
	      type: 'bpmn:SubProcess',
	      isExpanded: true
	    }
	  },
	  {
	    label: 'Transaction',
	    actionName: 'replace-with-transaction',
	    className: 'bpmn-icon-transaction',
	    target: {
	      type: 'bpmn:Transaction',
	      isExpanded: true
	    }
	  }
	];

	var TASK = [
	  {
	    label: 'Task',
	    actionName: 'replace-with-task',
	    className: 'bpmn-icon-task',
	    target: {
	      type: 'bpmn:Task'
	    }
	  },
	  {
	    label: 'Send Task',
	    actionName: 'replace-with-send-task',
	    className: 'bpmn-icon-send',
	    target: {
	      type: 'bpmn:SendTask'
	    }
	  },
	  {
	    label: 'Receive Task',
	    actionName: 'replace-with-receive-task',
	    className: 'bpmn-icon-receive',
	    target: {
	      type: 'bpmn:ReceiveTask'
	    }
	  },
	  {
	    label: 'User Task',
	    actionName: 'replace-with-user-task',
	    className: 'bpmn-icon-user',
	    target: {
	      type: 'bpmn:UserTask'
	    }
	  },
	  {
	    label: 'Manual Task',
	    actionName: 'replace-with-manual-task',
	    className: 'bpmn-icon-manual',
	    target: {
	      type: 'bpmn:ManualTask'
	    }
	  },
	  {
	    label: 'Business Rule Task',
	    actionName: 'replace-with-rule-task',
	    className: 'bpmn-icon-business-rule',
	    target: {
	      type: 'bpmn:BusinessRuleTask'
	    }
	  },
	  {
	    label: 'Service Task',
	    actionName: 'replace-with-service-task',
	    className: 'bpmn-icon-service',
	    target: {
	      type: 'bpmn:ServiceTask'
	    }
	  },
	  {
	    label: 'Script Task',
	    actionName: 'replace-with-script-task',
	    className: 'bpmn-icon-script',
	    target: {
	      type: 'bpmn:ScriptTask'
	    }
	  },
	  {
	    label: 'Call Activity',
	    actionName: 'replace-with-call-activity',
	    className: 'bpmn-icon-call-activity',
	    target: {
	      type: 'bpmn:CallActivity'
	    }
	  },
	  {
	    label: 'Sub Process (collapsed)',
	    actionName: 'replace-with-collapsed-subprocess',
	    className: 'bpmn-icon-subprocess-collapsed',
	    target: {
	      type: 'bpmn:SubProcess',
	      isExpanded: false
	    }
	  },
	  {
	    label: 'Sub Process (expanded)',
	    actionName: 'replace-with-expanded-subprocess',
	    className: 'bpmn-icon-subprocess-expanded',
	    target: {
	      type: 'bpmn:SubProcess',
	      isExpanded: true
	    }
	  }
	];

	var DATA_OBJECT_REFERENCE = [
	  {
	    label: 'Data Store Reference',
	    actionName: 'replace-with-data-store-reference',
	    className: 'bpmn-icon-data-store',
	    target: {
	      type: 'bpmn:DataStoreReference'
	    }
	  }
	];

	var DATA_STORE_REFERENCE = [
	  {
	    label: 'Data Object Reference',
	    actionName: 'replace-with-data-object-reference',
	    className: 'bpmn-icon-data-object',
	    target: {
	      type: 'bpmn:DataObjectReference'
	    }
	  }
	];

	var BOUNDARY_EVENT = [
	  {
	    label: 'Message Boundary Event',
	    actionName: 'replace-with-message-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-message',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:MessageEventDefinition'
	    }
	  },
	  {
	    label: 'Timer Boundary Event',
	    actionName: 'replace-with-timer-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-timer',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:TimerEventDefinition'
	    }
	  },
	  {
	    label: 'Escalation Boundary Event',
	    actionName: 'replace-with-escalation-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-escalation',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:EscalationEventDefinition'
	    }
	  },
	  {
	    label: 'Conditional Boundary Event',
	    actionName: 'replace-with-conditional-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-condition',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:ConditionalEventDefinition'
	    }
	  },
	  {
	    label: 'Error Boundary Event',
	    actionName: 'replace-with-error-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-error',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:ErrorEventDefinition'
	    }
	  },
	  {
	    label: 'Cancel Boundary Event',
	    actionName: 'replace-with-cancel-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-cancel',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:CancelEventDefinition'
	    }
	  },
	  {
	    label: 'Signal Boundary Event',
	    actionName: 'replace-with-signal-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-signal',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:SignalEventDefinition'
	    }
	  },
	  {
	    label: 'Compensation Boundary Event',
	    actionName: 'replace-with-compensation-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-compensation',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:CompensateEventDefinition'
	    }
	  },
	  {
	    label: 'Message Boundary Event (non-interrupting)',
	    actionName: 'replace-with-non-interrupting-message-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-message',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:MessageEventDefinition',
	      cancelActivity: false
	    }
	  },
	  {
	    label: 'Timer Boundary Event (non-interrupting)',
	    actionName: 'replace-with-non-interrupting-timer-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-timer',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:TimerEventDefinition',
	      cancelActivity: false
	    }
	  },
	  {
	    label: 'Escalation Boundary Event (non-interrupting)',
	    actionName: 'replace-with-non-interrupting-escalation-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-escalation',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:EscalationEventDefinition',
	      cancelActivity: false
	    }
	  },
	  {
	    label: 'Conditional Boundary Event (non-interrupting)',
	    actionName: 'replace-with-non-interrupting-conditional-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-condition',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:ConditionalEventDefinition',
	      cancelActivity: false
	    }
	  },
	  {
	    label: 'Signal Boundary Event (non-interrupting)',
	    actionName: 'replace-with-non-interrupting-signal-boundary',
	    className: 'bpmn-icon-intermediate-event-catch-non-interrupting-signal',
	    target: {
	      type: 'bpmn:BoundaryEvent',
	      eventDefinitionType: 'bpmn:SignalEventDefinition',
	      cancelActivity: false
	    }
	  }
	];

	var EVENT_SUB_PROCESS_START_EVENT = [
	  {
	    label: 'Message Start Event',
	    actionName: 'replace-with-message-start',
	    className: 'bpmn-icon-start-event-message',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:MessageEventDefinition'
	    }
	  },
	  {
	    label: 'Timer Start Event',
	    actionName: 'replace-with-timer-start',
	    className: 'bpmn-icon-start-event-timer',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:TimerEventDefinition'
	    }
	  },
	  {
	    label: 'Conditional Start Event',
	    actionName: 'replace-with-conditional-start',
	    className: 'bpmn-icon-start-event-condition',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:ConditionalEventDefinition'
	    }
	  },
	  {
	    label: 'Signal Start Event',
	    actionName: 'replace-with-signal-start',
	    className: 'bpmn-icon-start-event-signal',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:SignalEventDefinition'
	    }
	  },
	  {
	    label: 'Error Start Event',
	    actionName: 'replace-with-error-start',
	    className: 'bpmn-icon-start-event-error',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:ErrorEventDefinition'
	    }
	  },
	  {
	    label: 'Escalation Start Event',
	    actionName: 'replace-with-escalation-start',
	    className: 'bpmn-icon-start-event-escalation',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:EscalationEventDefinition'
	    }
	  },
	  {
	    label: 'Compensation Start Event',
	    actionName: 'replace-with-compensation-start',
	    className: 'bpmn-icon-start-event-compensation',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:CompensateEventDefinition'
	    }
	  },
	  {
	    label: 'Message Start Event (non-interrupting)',
	    actionName: 'replace-with-non-interrupting-message-start',
	    className: 'bpmn-icon-start-event-non-interrupting-message',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:MessageEventDefinition',
	      isInterrupting: false
	    }
	  },
	  {
	    label: 'Timer Start Event (non-interrupting)',
	    actionName: 'replace-with-non-interrupting-timer-start',
	    className: 'bpmn-icon-start-event-non-interrupting-timer',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:TimerEventDefinition',
	      isInterrupting: false
	    }
	  },
	  {
	    label: 'Conditional Start Event (non-interrupting)',
	    actionName: 'replace-with-non-interrupting-conditional-start',
	    className: 'bpmn-icon-start-event-non-interrupting-condition',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:ConditionalEventDefinition',
	      isInterrupting: false
	    }
	  },
	  {
	    label: 'Signal Start Event (non-interrupting)',
	    actionName: 'replace-with-non-interrupting-signal-start',
	    className: 'bpmn-icon-start-event-non-interrupting-signal',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:SignalEventDefinition',
	      isInterrupting: false
	    }
	  },
	  {
	    label: 'Escalation Start Event (non-interrupting)',
	    actionName: 'replace-with-non-interrupting-escalation-start',
	    className: 'bpmn-icon-start-event-non-interrupting-escalation',
	    target: {
	      type: 'bpmn:StartEvent',
	      eventDefinitionType: 'bpmn:EscalationEventDefinition',
	      isInterrupting: false
	    }
	  }
	];

	var SEQUENCE_FLOW = [
	  {
	    label: 'Sequence Flow',
	    actionName: 'replace-with-sequence-flow',
	    className: 'bpmn-icon-connection'
	  },
	  {
	    label: 'Default Flow',
	    actionName: 'replace-with-default-flow',
	    className: 'bpmn-icon-default-flow'
	  },
	  {
	    label: 'Conditional Flow',
	    actionName: 'replace-with-conditional-flow',
	    className: 'bpmn-icon-conditional-flow'
	  }
	];

	var PARTICIPANT = [
	  {
	    label: 'Expanded Pool',
	    actionName: 'replace-with-expanded-pool',
	    className: 'bpmn-icon-participant',
	    target: {
	      type: 'bpmn:Participant',
	      isExpanded: true
	    }
	  },
	  {
	    label: function(element) {
	      var label = 'Empty Pool';

	      if (element.children && element.children.length) {
	        label += ' (removes content)';
	      }

	      return label;
	    },
	    actionName: 'replace-with-collapsed-pool',

	    // TODO(@janstuemmel): maybe design new icon
	    className: 'bpmn-icon-lane',
	    target: {
	      type: 'bpmn:Participant',
	      isExpanded: false
	    }
	  }
	];

	/**
	 * This module is an element agnostic replace menu provider for the popup menu.
	 */
	function ReplaceMenuProvider(
	    bpmnFactory, popupMenu, modeling, moddle,
	    bpmnReplace, rules, translate) {

	  this._bpmnFactory = bpmnFactory;
	  this._popupMenu = popupMenu;
	  this._modeling = modeling;
	  this._moddle = moddle;
	  this._bpmnReplace = bpmnReplace;
	  this._rules = rules;
	  this._translate = translate;

	  this.register();
	}

	ReplaceMenuProvider.$inject = [
	  'bpmnFactory',
	  'popupMenu',
	  'modeling',
	  'moddle',
	  'bpmnReplace',
	  'rules',
	  'translate'
	];


	/**
	 * Register replace menu provider in the popup menu
	 */
	ReplaceMenuProvider.prototype.register = function() {
	  this._popupMenu.registerProvider('bpmn-replace', this);
	};


	/**
	 * Get all entries from replaceOptions for the given element and apply filters
	 * on them. Get for example only elements, which are different from the current one.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {Array<Object>} a list of menu entry items
	 */
	ReplaceMenuProvider.prototype.getEntries = function(element) {

	  var businessObject = element.businessObject;

	  var rules = this._rules;

	  var entries;

	  if (!rules.allowed('shape.replace', { element: element })) {
	    return [];
	  }

	  var differentType = isDifferentType(element);

	  if (is$1(businessObject, 'bpmn:DataObjectReference')) {
	    return this._createEntries(element, DATA_OBJECT_REFERENCE);
	  }

	  if (is$1(businessObject, 'bpmn:DataStoreReference')) {
	    return this._createEntries(element, DATA_STORE_REFERENCE);
	  }

	  // start events outside sub processes
	  if (is$1(businessObject, 'bpmn:StartEvent') && !is$1(businessObject.$parent, 'bpmn:SubProcess')) {

	    entries = filter(START_EVENT, differentType);

	    return this._createEntries(element, entries);
	  }

	  // expanded/collapsed pools
	  if (is$1(businessObject, 'bpmn:Participant')) {

	    entries = filter(PARTICIPANT, function(entry) {
	      return isExpanded(businessObject) !== entry.target.isExpanded;
	    });

	    return this._createEntries(element, entries);
	  }

	  // start events inside event sub processes
	  if (is$1(businessObject, 'bpmn:StartEvent') && isEventSubProcess(businessObject.$parent)) {
	    entries = filter(EVENT_SUB_PROCESS_START_EVENT, function(entry) {

	      var target = entry.target;

	      var isInterrupting = target.isInterrupting !== false;

	      var isInterruptingEqual = getBusinessObject(element).isInterrupting === isInterrupting;

	      // filters elements which types and event definition are equal but have have different interrupting types
	      return differentType(entry) || !differentType(entry) && !isInterruptingEqual;

	    });

	    return this._createEntries(element, entries);
	  }

	  // start events inside sub processes
	  if (is$1(businessObject, 'bpmn:StartEvent') && !isEventSubProcess(businessObject.$parent)
	      && is$1(businessObject.$parent, 'bpmn:SubProcess')) {
	    entries = filter(START_EVENT_SUB_PROCESS, differentType);

	    return this._createEntries(element, entries);
	  }

	  // end events
	  if (is$1(businessObject, 'bpmn:EndEvent')) {

	    entries = filter(END_EVENT, function(entry) {
	      var target = entry.target;

	      // hide cancel end events outside transactions
	      if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' && !is$1(businessObject.$parent, 'bpmn:Transaction')) {
	        return false;
	      }

	      return differentType(entry);
	    });

	    return this._createEntries(element, entries);
	  }

	  // boundary events
	  if (is$1(businessObject, 'bpmn:BoundaryEvent')) {

	    entries = filter(BOUNDARY_EVENT, function(entry) {

	      var target = entry.target;

	      if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' &&
	         !is$1(businessObject.attachedToRef, 'bpmn:Transaction')) {
	        return false;
	      }
	      var cancelActivity = target.cancelActivity !== false;

	      var isCancelActivityEqual = businessObject.cancelActivity == cancelActivity;

	      return differentType(entry) || !differentType(entry) && !isCancelActivityEqual;
	    });

	    return this._createEntries(element, entries);
	  }

	  // intermediate events
	  if (is$1(businessObject, 'bpmn:IntermediateCatchEvent') ||
	      is$1(businessObject, 'bpmn:IntermediateThrowEvent')) {

	    entries = filter(INTERMEDIATE_EVENT, differentType);

	    return this._createEntries(element, entries);
	  }

	  // gateways
	  if (is$1(businessObject, 'bpmn:Gateway')) {

	    entries = filter(GATEWAY, differentType);

	    return this._createEntries(element, entries);
	  }

	  // transactions
	  if (is$1(businessObject, 'bpmn:Transaction')) {

	    entries = filter(TRANSACTION, differentType);

	    return this._createEntries(element, entries);
	  }

	  // expanded event sub processes
	  if (isEventSubProcess(businessObject) && isExpanded(businessObject)) {

	    entries = filter(EVENT_SUB_PROCESS, differentType);

	    return this._createEntries(element, entries);
	  }

	  // expanded sub processes
	  if (is$1(businessObject, 'bpmn:SubProcess') && isExpanded(businessObject)) {

	    entries = filter(SUBPROCESS_EXPANDED, differentType);

	    return this._createEntries(element, entries);
	  }

	  // collapsed ad hoc sub processes
	  if (is$1(businessObject, 'bpmn:AdHocSubProcess') && !isExpanded(businessObject)) {

	    entries = filter(TASK, function(entry) {

	      var target = entry.target;

	      var isTargetSubProcess = target.type === 'bpmn:SubProcess';

	      var isTargetExpanded = target.isExpanded === true;

	      return isDifferentType(element) && (!isTargetSubProcess || isTargetExpanded);
	    });

	    return this._createEntries(element, entries);
	  }

	  // sequence flows
	  if (is$1(businessObject, 'bpmn:SequenceFlow')) {
	    return this._createSequenceFlowEntries(element, SEQUENCE_FLOW);
	  }

	  // flow nodes
	  if (is$1(businessObject, 'bpmn:FlowNode')) {
	    entries = filter(TASK, differentType);

	    // collapsed SubProcess can not be replaced with itself
	    if (is$1(businessObject, 'bpmn:SubProcess') && !isExpanded(businessObject)) {
	      entries = filter(entries, function(entry) {
	        return entry.label !== 'Sub Process (collapsed)';
	      });
	    }

	    return this._createEntries(element, entries);
	  }

	  return [];
	};


	/**
	 * Get a list of header items for the given element. This includes buttons
	 * for multi instance markers and for the ad hoc marker.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {Array<Object>} a list of menu entry items
	 */
	ReplaceMenuProvider.prototype.getHeaderEntries = function(element) {

	  var headerEntries = [];

	  if (is$1(element, 'bpmn:Activity') && !isEventSubProcess(element)) {
	    headerEntries = headerEntries.concat(this._getLoopEntries(element));
	  }

	  if (is$1(element, 'bpmn:DataObjectReference')) {
	    headerEntries = headerEntries.concat(this._getDataObjectIsCollection(element));
	  }

	  if (is$1(element, 'bpmn:Participant')) {
	    headerEntries = headerEntries.concat(this._getParticipantMultiplicity(element));
	  }

	  if (is$1(element, 'bpmn:SubProcess') &&
	      !is$1(element, 'bpmn:Transaction') &&
	      !isEventSubProcess(element)) {
	    headerEntries.push(this._getAdHocEntry(element));
	  }

	  return headerEntries;
	};


	/**
	 * Creates an array of menu entry objects for a given element and filters the replaceOptions
	 * according to a filter function.
	 *
	 * @param  {djs.model.Base} element
	 * @param  {Object} replaceOptions
	 *
	 * @return {Array<Object>} a list of menu items
	 */
	ReplaceMenuProvider.prototype._createEntries = function(element, replaceOptions) {
	  var menuEntries = [];

	  var self = this;

	  forEach(replaceOptions, function(definition) {
	    var entry = self._createMenuEntry(definition, element);

	    menuEntries.push(entry);
	  });

	  return menuEntries;
	};

	/**
	 * Creates an array of menu entry objects for a given sequence flow.
	 *
	 * @param  {djs.model.Base} element
	 * @param  {Object} replaceOptions

	 * @return {Array<Object>} a list of menu items
	 */
	ReplaceMenuProvider.prototype._createSequenceFlowEntries = function(element, replaceOptions) {

	  var businessObject = getBusinessObject(element);

	  var menuEntries = [];

	  var modeling = this._modeling,
	      moddle = this._moddle;

	  var self = this;

	  forEach(replaceOptions, function(entry) {

	    switch (entry.actionName) {
	    case 'replace-with-default-flow':
	      if (businessObject.sourceRef.default !== businessObject &&
	            (is$1(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||
	             is$1(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||
	             is$1(businessObject.sourceRef, 'bpmn:ComplexGateway') ||
	             is$1(businessObject.sourceRef, 'bpmn:Activity'))) {

	        menuEntries.push(self._createMenuEntry(entry, element, function() {
	          modeling.updateProperties(element.source, { default: businessObject });
	        }));
	      }
	      break;
	    case 'replace-with-conditional-flow':
	      if (!businessObject.conditionExpression && is$1(businessObject.sourceRef, 'bpmn:Activity')) {

	        menuEntries.push(self._createMenuEntry(entry, element, function() {
	          var conditionExpression = moddle.create('bpmn:FormalExpression', { body: '' });

	          modeling.updateProperties(element, { conditionExpression: conditionExpression });
	        }));
	      }
	      break;
	    default:

	      // default flows
	      if (is$1(businessObject.sourceRef, 'bpmn:Activity') && businessObject.conditionExpression) {
	        return menuEntries.push(self._createMenuEntry(entry, element, function() {
	          modeling.updateProperties(element, { conditionExpression: undefined });
	        }));
	      }

	      // conditional flows
	      if ((is$1(businessObject.sourceRef, 'bpmn:ExclusiveGateway') ||
	           is$1(businessObject.sourceRef, 'bpmn:InclusiveGateway') ||
	           is$1(businessObject.sourceRef, 'bpmn:ComplexGateway') ||
	           is$1(businessObject.sourceRef, 'bpmn:Activity')) &&
	           businessObject.sourceRef.default === businessObject) {

	        return menuEntries.push(self._createMenuEntry(entry, element, function() {
	          modeling.updateProperties(element.source, { default: undefined });
	        }));
	      }
	    }
	  });

	  return menuEntries;
	};


	/**
	 * Creates and returns a single menu entry item.
	 *
	 * @param  {Object} definition a single replace options definition object
	 * @param  {djs.model.Base} element
	 * @param  {Function} [action] an action callback function which gets called when
	 *                             the menu entry is being triggered.
	 *
	 * @return {Object} menu entry item
	 */
	ReplaceMenuProvider.prototype._createMenuEntry = function(definition, element, action) {
	  var translate = this._translate;
	  var replaceElement = this._bpmnReplace.replaceElement;

	  var replaceAction = function() {
	    return replaceElement(element, definition.target);
	  };

	  var label = definition.label;
	  if (label && typeof label === 'function') {
	    label = label(element);
	  }

	  action = action || replaceAction;

	  var menuEntry = {
	    label: translate(label),
	    className: definition.className,
	    id: definition.actionName,
	    action: action
	  };

	  return menuEntry;
	};

	/**
	 * Get a list of menu items containing buttons for multi instance markers
	 *
	 * @param  {djs.model.Base} element
	 *
	 * @return {Array<Object>} a list of menu items
	 */
	ReplaceMenuProvider.prototype._getLoopEntries = function(element) {

	  var self = this;
	  var translate = this._translate;

	  function toggleLoopEntry(event, entry) {
	    var loopCharacteristics;

	    if (entry.active) {
	      loopCharacteristics = undefined;
	    } else {
	      loopCharacteristics = self._moddle.create(entry.options.loopCharacteristics);

	      if (entry.options.isSequential) {
	        loopCharacteristics.isSequential = entry.options.isSequential;
	      }
	    }
	    self._modeling.updateProperties(element, { loopCharacteristics: loopCharacteristics });
	  }

	  var businessObject = getBusinessObject(element),
	      loopCharacteristics = businessObject.loopCharacteristics;

	  var isSequential,
	      isLoop,
	      isParallel;

	  if (loopCharacteristics) {
	    isSequential = loopCharacteristics.isSequential;
	    isLoop = loopCharacteristics.isSequential === undefined;
	    isParallel = loopCharacteristics.isSequential !== undefined && !loopCharacteristics.isSequential;
	  }


	  var loopEntries = [
	    {
	      id: 'toggle-parallel-mi',
	      className: 'bpmn-icon-parallel-mi-marker',
	      title: translate('Parallel Multi Instance'),
	      active: isParallel,
	      action: toggleLoopEntry,
	      options: {
	        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',
	        isSequential: false
	      }
	    },
	    {
	      id: 'toggle-sequential-mi',
	      className: 'bpmn-icon-sequential-mi-marker',
	      title: translate('Sequential Multi Instance'),
	      active: isSequential,
	      action: toggleLoopEntry,
	      options: {
	        loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',
	        isSequential: true
	      }
	    },
	    {
	      id: 'toggle-loop',
	      className: 'bpmn-icon-loop-marker',
	      title: translate('Loop'),
	      active: isLoop,
	      action: toggleLoopEntry,
	      options: {
	        loopCharacteristics: 'bpmn:StandardLoopCharacteristics'
	      }
	    }
	  ];
	  return loopEntries;
	};

	/**
	 * Get a list of menu items containing a button for the collection marker
	 *
	 * @param  {djs.model.Base} element
	 *
	 * @return {Array<Object>} a list of menu items
	 */
	ReplaceMenuProvider.prototype._getDataObjectIsCollection = function(element) {

	  var self = this;
	  var translate = this._translate;

	  function toggleIsCollection(event, entry) {
	    self._modeling.updateModdleProperties(
	      element,
	      dataObject,
	      { isCollection: !entry.active });
	  }

	  var dataObject = element.businessObject.dataObjectRef,
	      isCollection = dataObject.isCollection;

	  var dataObjectEntries = [
	    {
	      id: 'toggle-is-collection',
	      className: 'bpmn-icon-parallel-mi-marker',
	      title: translate('Collection'),
	      active: isCollection,
	      action: toggleIsCollection,
	    }
	  ];
	  return dataObjectEntries;
	};

	/**
	 * Get a list of menu items containing a button for the participant multiplicity marker
	 *
	 * @param  {djs.model.Base} element
	 *
	 * @return {Array<Object>} a list of menu items
	 */
	ReplaceMenuProvider.prototype._getParticipantMultiplicity = function(element) {

	  var self = this;
	  var bpmnFactory = this._bpmnFactory;
	  var translate = this._translate;

	  function toggleParticipantMultiplicity(event, entry) {
	    var isActive = entry.active;
	    var participantMultiplicity;

	    if (!isActive) {
	      participantMultiplicity = bpmnFactory.create('bpmn:ParticipantMultiplicity');
	    }

	    self._modeling.updateProperties(
	      element,
	      { participantMultiplicity: participantMultiplicity });
	  }

	  var participantMultiplicity = element.businessObject.participantMultiplicity;

	  var participantEntries = [
	    {
	      id: 'toggle-participant-multiplicity',
	      className: 'bpmn-icon-parallel-mi-marker',
	      title: translate('Participant Multiplicity'),
	      active: !!participantMultiplicity,
	      action: toggleParticipantMultiplicity,
	    }
	  ];
	  return participantEntries;
	};


	/**
	 * Get the menu items containing a button for the ad hoc marker
	 *
	 * @param  {djs.model.Base} element
	 *
	 * @return {Object} a menu item
	 */
	ReplaceMenuProvider.prototype._getAdHocEntry = function(element) {
	  var translate = this._translate;
	  var businessObject = getBusinessObject(element);

	  var isAdHoc = is$1(businessObject, 'bpmn:AdHocSubProcess');

	  var replaceElement = this._bpmnReplace.replaceElement;

	  var adHocEntry = {
	    id: 'toggle-adhoc',
	    className: 'bpmn-icon-ad-hoc-marker',
	    title: translate('Ad-hoc'),
	    active: isAdHoc,
	    action: function(event, entry) {
	      if (isAdHoc) {
	        return replaceElement(element, { type: 'bpmn:SubProcess' }, {
	          autoResize: false,
	          layoutConnection: false
	        });
	      } else {
	        return replaceElement(element, { type: 'bpmn:AdHocSubProcess' }, {
	          autoResize: false,
	          layoutConnection: false
	        });
	      }
	    }
	  };

	  return adHocEntry;
	};

	var PopupMenuModule$1 = {
	  __depends__: [
	    PopupMenuModule,
	    ReplaceModule$1
	  ],
	  __init__: [ 'replaceMenuProvider' ],
	  replaceMenuProvider: [ 'type', ReplaceMenuProvider ]
	};

	var max$2 = Math.max,
	    min$1 = Math.min;

	var DEFAULT_CHILD_BOX_PADDING = 20;


	/**
	 * Substract a TRBL from another
	 *
	 * @param  {TRBL} trblA
	 * @param  {TRBL} trblB
	 *
	 * @return {TRBL}
	 */
	function substractTRBL(trblA, trblB) {
	  return {
	    top: trblA.top - trblB.top,
	    right: trblA.right - trblB.right,
	    bottom: trblA.bottom - trblB.bottom,
	    left: trblA.left - trblB.left
	  };
	}

	/**
	 * Resize the given bounds by the specified delta from a given anchor point.
	 *
	 * @param {Bounds} bounds the bounding box that should be resized
	 * @param {string} direction in which the element is resized (nw, ne, se, sw)
	 * @param {Point} delta of the resize operation
	 *
	 * @return {Bounds} resized bounding box
	 */
	function resizeBounds(bounds, direction, delta) {
	  var dx = delta.x,
	      dy = delta.y;

	  var newBounds = {
	    x: bounds.x,
	    y: bounds.y,
	    width: bounds.width,
	    height: bounds.height
	  };

	  if (direction.indexOf('n') !== -1) {
	    newBounds.y = bounds.y + dy;
	    newBounds.height = bounds.height - dy;
	  } else if (direction.indexOf('s') !== -1) {
	    newBounds.height = bounds.height + dy;
	  }

	  if (direction.indexOf('e') !== -1) {
	    newBounds.width = bounds.width + dx;
	  } else if (direction.indexOf('w') !== -1) {
	    newBounds.x = bounds.x + dx;
	    newBounds.width = bounds.width - dx;
	  }

	  return newBounds;
	}


	/**
	 * Resize the given bounds by applying the passed
	 * { top, right, bottom, left } delta.
	 *
	 * @param {Bounds} bounds
	 * @param {TRBL} trblResize
	 *
	 * @return {Bounds}
	 */
	function resizeTRBL(bounds, resize) {
	  return {
	    x: bounds.x + (resize.left || 0),
	    y: bounds.y + (resize.top || 0),
	    width: bounds.width - (resize.left || 0) + (resize.right || 0),
	    height: bounds.height - (resize.top || 0) + (resize.bottom || 0)
	  };
	}


	function applyConstraints(attr, trbl, resizeConstraints) {

	  var value = trbl[attr],
	      minValue = resizeConstraints.min && resizeConstraints.min[attr],
	      maxValue = resizeConstraints.max && resizeConstraints.max[attr];

	  if (isNumber(minValue)) {
	    value = (/top|left/.test(attr) ? min$1 : max$2)(value, minValue);
	  }

	  if (isNumber(maxValue)) {
	    value = (/top|left/.test(attr) ? max$2 : min$1)(value, maxValue);
	  }

	  return value;
	}

	function ensureConstraints$1(currentBounds, resizeConstraints) {

	  if (!resizeConstraints) {
	    return currentBounds;
	  }

	  var currentTrbl = asTRBL(currentBounds);

	  return asBounds({
	    top: applyConstraints('top', currentTrbl, resizeConstraints),
	    right: applyConstraints('right', currentTrbl, resizeConstraints),
	    bottom: applyConstraints('bottom', currentTrbl, resizeConstraints),
	    left: applyConstraints('left', currentTrbl, resizeConstraints)
	  });
	}


	function getMinResizeBounds(direction, currentBounds, minDimensions, childrenBounds) {

	  var currentBox = asTRBL(currentBounds);

	  var minBox = {
	    top: /n/.test(direction) ? currentBox.bottom - minDimensions.height : currentBox.top,
	    left: /w/.test(direction) ? currentBox.right - minDimensions.width : currentBox.left,
	    bottom: /s/.test(direction) ? currentBox.top + minDimensions.height : currentBox.bottom,
	    right: /e/.test(direction) ? currentBox.left + minDimensions.width : currentBox.right
	  };

	  var childrenBox = childrenBounds ? asTRBL(childrenBounds) : minBox;

	  var combinedBox = {
	    top: min$1(minBox.top, childrenBox.top),
	    left: min$1(minBox.left, childrenBox.left),
	    bottom: max$2(minBox.bottom, childrenBox.bottom),
	    right: max$2(minBox.right, childrenBox.right)
	  };

	  return asBounds(combinedBox);
	}

	function asPadding(mayBePadding, defaultValue) {
	  if (typeof mayBePadding !== 'undefined') {
	    return mayBePadding;
	  } else {
	    return DEFAULT_CHILD_BOX_PADDING;
	  }
	}

	function addPadding(bbox, padding) {
	  var left, right, top, bottom;

	  if (typeof padding === 'object') {
	    left = asPadding(padding.left);
	    right = asPadding(padding.right);
	    top = asPadding(padding.top);
	    bottom = asPadding(padding.bottom);
	  } else {
	    left = right = top = bottom = asPadding(padding);
	  }

	  return {
	    x: bbox.x - left,
	    y: bbox.y - top,
	    width: bbox.width + left + right,
	    height: bbox.height + top + bottom
	  };
	}


	/**
	 * Is the given element part of the resize
	 * targets min boundary box?
	 *
	 * This is the default implementation which excludes
	 * connections and labels.
	 *
	 * @param {djs.model.Base} element
	 */
	function isBBoxChild(element) {

	  // exclude connections
	  if (element.waypoints) {
	    return false;
	  }

	  // exclude labels
	  if (element.type === 'label') {
	    return false;
	  }

	  return true;
	}

	/**
	 * Return children bounding computed from a shapes children
	 * or a list of prefiltered children.
	 *
	 * @param  {djs.model.Shape|Array<djs.model.Shape>} shapeOrChildren
	 * @param  {number|Object} padding
	 *
	 * @return {Bounds}
	 */
	function computeChildrenBBox(shapeOrChildren, padding) {

	  var elements;

	  // compute based on shape
	  if (shapeOrChildren.length === undefined) {

	    // grab all the children that are part of the
	    // parents children box
	    elements = filter(shapeOrChildren.children, isBBoxChild);

	  } else {
	    elements = shapeOrChildren;
	  }

	  if (elements.length) {
	    return addPadding(getBBox(elements), padding);
	  }
	}

	var abs$3 = Math.abs;


	function getTRBLResize(oldBounds, newBounds) {
	  return substractTRBL(asTRBL(newBounds), asTRBL(oldBounds));
	}


	var LANE_PARENTS = [
	  'bpmn:Participant',
	  'bpmn:Process',
	  'bpmn:SubProcess'
	];

	var LANE_INDENTATION = 30;


	/**
	 * Collect all lane shapes in the given paren
	 *
	 * @param  {djs.model.Shape} shape
	 * @param  {Array<djs.model.Base>} [collectedShapes]
	 *
	 * @return {Array<djs.model.Base>}
	 */
	function collectLanes(shape, collectedShapes) {

	  collectedShapes = collectedShapes || [];

	  shape.children.filter(function(s) {
	    if (is$1(s, 'bpmn:Lane')) {
	      collectLanes(s, collectedShapes);

	      collectedShapes.push(s);
	    }
	  });

	  return collectedShapes;
	}


	/**
	 * Return the lane children of the given element.
	 *
	 * @param {djs.model.Shape} shape
	 *
	 * @return {Array<djs.model.Shape>}
	 */
	function getChildLanes(shape) {
	  return shape.children.filter(function(c) {
	    return is$1(c, 'bpmn:Lane');
	  });
	}


	/**
	 * Return the root element containing the given lane shape
	 *
	 * @param {djs.model.Shape} shape
	 *
	 * @return {djs.model.Shape}
	 */
	function getLanesRoot(shape) {
	  return getParent$1(shape, LANE_PARENTS) || shape;
	}


	/**
	 * Compute the required resize operations for lanes
	 * adjacent to the given shape, assuming it will be
	 * resized to the given new bounds.
	 *
	 * @param {djs.model.Shape} shape
	 * @param {Bounds} newBounds
	 *
	 * @return {Array<Object>}
	 */
	function computeLanesResize(shape, newBounds) {

	  var rootElement = getLanesRoot(shape);

	  var initialShapes = is$1(rootElement, 'bpmn:Process') ? [] : [ rootElement ];

	  var allLanes = collectLanes(rootElement, initialShapes),
	      shapeTrbl = asTRBL(shape),
	      shapeNewTrbl = asTRBL(newBounds),
	      trblResize = getTRBLResize(shape, newBounds),
	      resizeNeeded = [];

	  allLanes.forEach(function(other) {

	    if (other === shape) {
	      return;
	    }

	    var topResize = 0,
	        rightResize = trblResize.right,
	        bottomResize = 0,
	        leftResize = trblResize.left;

	    var otherTrbl = asTRBL(other);

	    if (trblResize.top) {
	      if (abs$3(otherTrbl.bottom - shapeTrbl.top) < 10) {
	        bottomResize = shapeNewTrbl.top - otherTrbl.bottom;
	      }

	      if (abs$3(otherTrbl.top - shapeTrbl.top) < 5) {
	        topResize = shapeNewTrbl.top - otherTrbl.top;
	      }
	    }

	    if (trblResize.bottom) {
	      if (abs$3(otherTrbl.top - shapeTrbl.bottom) < 10) {
	        topResize = shapeNewTrbl.bottom - otherTrbl.top;
	      }

	      if (abs$3(otherTrbl.bottom - shapeTrbl.bottom) < 5) {
	        bottomResize = shapeNewTrbl.bottom - otherTrbl.bottom;
	      }
	    }

	    if (topResize || rightResize || bottomResize || leftResize) {

	      resizeNeeded.push({
	        shape: other,
	        newBounds: resizeTRBL(other, {
	          top: topResize,
	          right: rightResize,
	          bottom: bottomResize,
	          left: leftResize
	        })
	      });
	    }

	  });

	  return resizeNeeded;
	}

	/**
	 * A provider for BPMN 2.0 elements context pad
	 */
	function ContextPadProvider(
	    config, injector, eventBus,
	    contextPad, modeling, elementFactory,
	    connect, create, popupMenu,
	    canvas, rules, translate) {

	  config = config || {};

	  contextPad.registerProvider(this);

	  this._contextPad = contextPad;

	  this._modeling = modeling;

	  this._elementFactory = elementFactory;
	  this._connect = connect;
	  this._create = create;
	  this._popupMenu = popupMenu;
	  this._canvas = canvas;
	  this._rules = rules;
	  this._translate = translate;

	  if (config.autoPlace !== false) {
	    this._autoPlace = injector.get('autoPlace', false);
	  }

	  eventBus.on('create.end', 250, function(event) {
	    var context = event.context,
	        shape = context.shape;

	    if (!hasPrimaryModifier(event) || !contextPad.isOpen(shape)) {
	      return;
	    }

	    var entries = contextPad.getEntries(shape);

	    if (entries.replace) {
	      entries.replace.action.click(event, shape);
	    }
	  });
	}

	ContextPadProvider.$inject = [
	  'config.contextPad',
	  'injector',
	  'eventBus',
	  'contextPad',
	  'modeling',
	  'elementFactory',
	  'connect',
	  'create',
	  'popupMenu',
	  'canvas',
	  'rules',
	  'translate'
	];


	ContextPadProvider.prototype.getContextPadEntries = function(element) {

	  var contextPad = this._contextPad,
	      modeling = this._modeling,

	      elementFactory = this._elementFactory,
	      connect = this._connect,
	      create = this._create,
	      popupMenu = this._popupMenu,
	      canvas = this._canvas,
	      rules = this._rules,
	      autoPlace = this._autoPlace,
	      translate = this._translate;

	  var actions = {};

	  if (element.type === 'label') {
	    return actions;
	  }

	  var businessObject = element.businessObject;

	  function startConnect(event, element) {
	    connect.start(event, element);
	  }

	  function removeElement(e) {
	    modeling.removeElements([ element ]);
	  }

	  function getReplaceMenuPosition(element) {

	    var Y_OFFSET = 5;

	    var diagramContainer = canvas.getContainer(),
	        pad = contextPad.getPad(element).html;

	    var diagramRect = diagramContainer.getBoundingClientRect(),
	        padRect = pad.getBoundingClientRect();

	    var top = padRect.top - diagramRect.top;
	    var left = padRect.left - diagramRect.left;

	    var pos = {
	      x: left,
	      y: top + padRect.height + Y_OFFSET
	    };

	    return pos;
	  }


	  /**
	   * Create an append action
	   *
	   * @param {string} type
	   * @param {string} className
	   * @param {string} [title]
	   * @param {Object} [options]
	   *
	   * @return {Object} descriptor
	   */
	  function appendAction(type, className, title, options) {

	    if (typeof title !== 'string') {
	      options = title;
	      title = translate('Append {type}', { type: type.replace(/^bpmn:/, '') });
	    }

	    function appendStart(event, element) {

	      var shape = elementFactory.createShape(assign({ type: type }, options));
	      create.start(event, shape, {
	        source: element
	      });
	    }


	    var append = autoPlace ? function(event, element) {
	      var shape = elementFactory.createShape(assign({ type: type }, options));

	      autoPlace.append(element, shape);
	    } : appendStart;


	    return {
	      group: 'model',
	      className: className,
	      title: title,
	      action: {
	        dragstart: appendStart,
	        click: append
	      }
	    };
	  }

	  function splitLaneHandler(count) {

	    return function(event, element) {

	      // actual split
	      modeling.splitLane(element, count);

	      // refresh context pad after split to
	      // get rid of split icons
	      contextPad.open(element, true);
	    };
	  }


	  if (isAny(businessObject, [ 'bpmn:Lane', 'bpmn:Participant' ]) && isExpanded(businessObject)) {

	    var childLanes = getChildLanes(element);

	    assign(actions, {
	      'lane-insert-above': {
	        group: 'lane-insert-above',
	        className: 'bpmn-icon-lane-insert-above',
	        title: translate('Add Lane above'),
	        action: {
	          click: function(event, element) {
	            modeling.addLane(element, 'top');
	          }
	        }
	      }
	    });

	    if (childLanes.length < 2) {

	      if (element.height >= 120) {
	        assign(actions, {
	          'lane-divide-two': {
	            group: 'lane-divide',
	            className: 'bpmn-icon-lane-divide-two',
	            title: translate('Divide into two Lanes'),
	            action: {
	              click: splitLaneHandler(2)
	            }
	          }
	        });
	      }

	      if (element.height >= 180) {
	        assign(actions, {
	          'lane-divide-three': {
	            group: 'lane-divide',
	            className: 'bpmn-icon-lane-divide-three',
	            title: translate('Divide into three Lanes'),
	            action: {
	              click: splitLaneHandler(3)
	            }
	          }
	        });
	      }
	    }

	    assign(actions, {
	      'lane-insert-below': {
	        group: 'lane-insert-below',
	        className: 'bpmn-icon-lane-insert-below',
	        title: translate('Add Lane below'),
	        action: {
	          click: function(event, element) {
	            modeling.addLane(element, 'bottom');
	          }
	        }
	      }
	    });

	  }

	  if (is$1(businessObject, 'bpmn:FlowNode')) {

	    if (is$1(businessObject, 'bpmn:EventBasedGateway')) {

	      assign(actions, {
	        'append.receive-task': appendAction(
	          'bpmn:ReceiveTask',
	          'bpmn-icon-receive-task',
	          translate('Append ReceiveTask')
	        ),
	        'append.message-intermediate-event': appendAction(
	          'bpmn:IntermediateCatchEvent',
	          'bpmn-icon-intermediate-event-catch-message',
	          translate('Append MessageIntermediateCatchEvent'),
	          { eventDefinitionType: 'bpmn:MessageEventDefinition' }
	        ),
	        'append.timer-intermediate-event': appendAction(
	          'bpmn:IntermediateCatchEvent',
	          'bpmn-icon-intermediate-event-catch-timer',
	          translate('Append TimerIntermediateCatchEvent'),
	          { eventDefinitionType: 'bpmn:TimerEventDefinition' }
	        ),
	        'append.condition-intermediate-event': appendAction(
	          'bpmn:IntermediateCatchEvent',
	          'bpmn-icon-intermediate-event-catch-condition',
	          translate('Append ConditionIntermediateCatchEvent'),
	          { eventDefinitionType: 'bpmn:ConditionalEventDefinition' }
	        ),
	        'append.signal-intermediate-event': appendAction(
	          'bpmn:IntermediateCatchEvent',
	          'bpmn-icon-intermediate-event-catch-signal',
	          translate('Append SignalIntermediateCatchEvent'),
	          { eventDefinitionType: 'bpmn:SignalEventDefinition' }
	        )
	      });
	    } else

	    if (isEventType(businessObject, 'bpmn:BoundaryEvent', 'bpmn:CompensateEventDefinition')) {

	      assign(actions, {
	        'append.compensation-activity':
	            appendAction(
	              'bpmn:Task',
	              'bpmn-icon-task',
	              translate('Append compensation activity'),
	              {
	                isForCompensation: true
	              }
	            )
	      });
	    } else

	    if (!is$1(businessObject, 'bpmn:EndEvent') &&
	        !businessObject.isForCompensation &&
	        !isEventType(businessObject, 'bpmn:IntermediateThrowEvent', 'bpmn:LinkEventDefinition') &&
	        !isEventSubProcess(businessObject)) {

	      assign(actions, {
	        'append.end-event': appendAction(
	          'bpmn:EndEvent',
	          'bpmn-icon-end-event-none',
	          translate('Append EndEvent')
	        ),
	        'append.gateway': appendAction(
	          'bpmn:ExclusiveGateway',
	          'bpmn-icon-gateway-none',
	          translate('Append Gateway')
	        ),
	        'append.append-task': appendAction(
	          'bpmn:Task',
	          'bpmn-icon-task',
	          translate('Append Task')
	        ),
	        'append.intermediate-event': appendAction(
	          'bpmn:IntermediateThrowEvent',
	          'bpmn-icon-intermediate-event-none',
	          translate('Append Intermediate/Boundary Event')
	        )
	      });
	    }
	  }

	  if (!popupMenu.isEmpty(element, 'bpmn-replace')) {

	    // Replace menu entry
	    assign(actions, {
	      'replace': {
	        group: 'edit',
	        className: 'bpmn-icon-screw-wrench',
	        title: translate('Change type'),
	        action: {
	          click: function(event, element) {

	            var position = assign(getReplaceMenuPosition(element), {
	              cursor: { x: event.x, y: event.y }
	            });

	            popupMenu.open(element, 'bpmn-replace', position);
	          }
	        }
	      }
	    });
	  }

	  if (isAny(businessObject, [
	    'bpmn:FlowNode',
	    'bpmn:InteractionNode',
	    'bpmn:DataObjectReference',
	    'bpmn:DataStoreReference'
	  ])) {

	    assign(actions, {
	      'append.text-annotation': appendAction('bpmn:TextAnnotation', 'bpmn-icon-text-annotation'),

	      'connect': {
	        group: 'connect',
	        className: 'bpmn-icon-connection-multi',
	        title: translate('Connect using ' +
	                  (businessObject.isForCompensation ? '' : 'Sequence/MessageFlow or ') +
	                  'Association'),
	        action: {
	          click: startConnect,
	          dragstart: startConnect
	        }
	      }
	    });
	  }

	  if (isAny(businessObject, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ])) {
	    assign(actions, {
	      'connect': {
	        group: 'connect',
	        className: 'bpmn-icon-connection-multi',
	        title: translate('Connect using DataInputAssociation'),
	        action: {
	          click: startConnect,
	          dragstart: startConnect
	        }
	      }
	    });
	  }

	  if (is$1(businessObject, 'bpmn:Group')) {
	    assign(actions, {
	      'append.text-annotation': appendAction('bpmn:TextAnnotation', 'bpmn-icon-text-annotation')
	    });
	  }

	  // delete element entry, only show if allowed by rules
	  var deleteAllowed = rules.allowed('elements.delete', { elements: [ element ] });

	  if (isArray(deleteAllowed)) {

	    // was the element returned as a deletion candidate?
	    deleteAllowed = deleteAllowed[0] === element;
	  }

	  if (deleteAllowed) {
	    assign(actions, {
	      'delete': {
	        group: 'edit',
	        className: 'bpmn-icon-trash',
	        title: translate('Remove'),
	        action: {
	          click: removeElement
	        }
	      }
	    });
	  }

	  return actions;
	};


	// helpers /////////

	function isEventType(eventBo, type, definition) {

	  var isType = eventBo.$instanceOf(type);
	  var isDefinition = false;

	  var definitions = eventBo.eventDefinitions || [];
	  forEach(definitions, function(def) {
	    if (def.$type === definition) {
	      isDefinition = true;
	    }
	  });

	  return isType && isDefinition;
	}

	var ContextPadModule$1 = {
	  __depends__: [
	    DirectEditingModule,
	    ContextPadModule,
	    SelectionModule,
	    ConnectModule,
	    CreateModule,
	    PopupMenuModule$1
	  ],
	  __init__: [ 'contextPadProvider' ],
	  contextPadProvider: [ 'type', ContextPadProvider ]
	};

	var AXIS_DIMENSIONS = {
	  horizontal: [ 'x', 'width' ],
	  vertical: [ 'y', 'height' ]
	};

	var THRESHOLD$1 = 5;


	/**
	 * Groups and filters elements and then trigger even distribution.
	 */
	function DistributeElements(modeling) {
	  this._modeling = modeling;

	  this._filters = [];

	  // register filter for filtering big elements
	  this.registerFilter(function(elements, axis, dimension) {
	    var elementsSize = 0,
	        numOfShapes = 0,
	        avgDimension;

	    forEach(elements, function(element) {
	      if (element.waypoints || element.labelTarget) {
	        return;
	      }

	      elementsSize += element[dimension];

	      numOfShapes += 1;
	    });

	    avgDimension = Math.round(elementsSize / numOfShapes);

	    return filter(elements, function(element) {
	      return element[dimension] < (avgDimension + 50);
	    });
	  });

	}

	DistributeElements.$inject = [ 'modeling' ];


	/**
	 * Registers filter functions that allow external parties to filter
	 * out certain elements.
	 *
	 * @param  {Function} filterFn
	 */
	DistributeElements.prototype.registerFilter = function(filterFn) {
	  if (typeof filterFn !== 'function') {
	    throw new Error('the filter has to be a function');
	  }

	  this._filters.push(filterFn);
	};

	/**
	 * Distributes the elements with a given orientation
	 *
	 * @param  {Array} elements    [description]
	 * @param  {string} orientation [description]
	 */
	DistributeElements.prototype.trigger = function(elements, orientation) {
	  var modeling = this._modeling;

	  var groups,
	      distributableElements;

	  if (elements.length < 3) {
	    return;
	  }

	  this._setOrientation(orientation);

	  distributableElements = this._filterElements(elements);

	  groups = this._createGroups(distributableElements);

	  // nothing to distribute
	  if (groups.length <= 2) {
	    return;
	  }

	  modeling.distributeElements(groups, this._axis, this._dimension);

	  return groups;
	};

	/**
	 * Filters the elements with provided filters by external parties
	 *
	 * @param  {Array[Elements]} elements
	 *
	 * @return {Array[Elements]}
	 */
	DistributeElements.prototype._filterElements = function(elements) {
	  var filters = this._filters,
	      axis = this._axis,
	      dimension = this._dimension,
	      distributableElements = [].concat(elements);

	  if (!filters.length) {
	    return elements;
	  }

	  forEach(filters, function(filterFn) {
	    distributableElements = filterFn(distributableElements, axis, dimension);
	  });

	  return distributableElements;
	};


	/**
	 * Create range (min, max) groups. Also tries to group elements
	 * together that share the same range.
	 *
	 * @example
	 * 	var distributableElements = [
	 * 		{
	 * 			range: {
	 * 				min: 100,
	 * 				max: 200
	 * 			},
	 * 			elements: [ { id: 'shape1', .. }]
	 * 		}
	 * 	]
	 *
	 * @param  {Array} elements
	 *
	 * @return {Array[Objects]}
	 */
	DistributeElements.prototype._createGroups = function(elements) {
	  var rangeGroups = [],
	      self = this,
	      axis = this._axis,
	      dimension = this._dimension;

	  if (!axis) {
	    throw new Error('must have a defined "axis" and "dimension"');
	  }

	  // sort by 'left->right' or 'top->bottom'
	  var sortedElements = sortBy(elements, axis);

	  forEach(sortedElements, function(element, idx) {
	    var elementRange = self._findRange(element, axis, dimension),
	        range;

	    var previous = rangeGroups[rangeGroups.length - 1];

	    if (previous && self._hasIntersection(previous.range, elementRange)) {
	      rangeGroups[rangeGroups.length - 1].elements.push(element);
	    } else {
	      range = { range: elementRange, elements: [ element ] };

	      rangeGroups.push(range);
	    }
	  });

	  return rangeGroups;
	};


	/**
	 * Maps a direction to the according axis and dimension
	 *
	 * @param  {string} direction 'horizontal' or 'vertical'
	 */
	DistributeElements.prototype._setOrientation = function(direction) {
	  var orientation = AXIS_DIMENSIONS[direction];

	  this._axis = orientation[0];
	  this._dimension = orientation[1];
	};


	/**
	 * Checks if the two ranges intercept each other
	 *
	 * @param  {Object} rangeA {min, max}
	 * @param  {Object} rangeB {min, max}
	 *
	 * @return {boolean}
	 */
	DistributeElements.prototype._hasIntersection = function(rangeA, rangeB) {
	  return Math.max(rangeA.min, rangeA.max) >= Math.min(rangeB.min, rangeB.max) &&
	         Math.min(rangeA.min, rangeA.max) <= Math.max(rangeB.min, rangeB.max);
	};


	/**
	 * Returns the min and max values for an element
	 *
	 * @param  {[type]} element   [description]
	 * @param  {[type]} axis      [description]
	 * @param  {[type]} dimension [description]
	 *
	 * @return {[type]}           [description]
	 */
	DistributeElements.prototype._findRange = function(element) {
	  var axis = element[this._axis],
	      dimension = element[this._dimension];

	  return {
	    min: axis + THRESHOLD$1,
	    max: axis + dimension - THRESHOLD$1
	  };
	};

	var DistributeElementsModule = {
	  __init__: [ 'distributeElements' ],
	  distributeElements: [ 'type', DistributeElements ]
	};

	/**
	 * Registers element exclude filters for elements that
	 * currently do not support distribution.
	 */
	function BpmnDistributeElements(distributeElements) {

	  distributeElements.registerFilter(function(elements) {
	    return filter(elements, function(element) {
	      var cannotDistribute = isAny(element, [
	        'bpmn:Association',
	        'bpmn:BoundaryEvent',
	        'bpmn:DataInputAssociation',
	        'bpmn:DataOutputAssociation',
	        'bpmn:Lane',
	        'bpmn:MessageFlow',
	        'bpmn:Participant',
	        'bpmn:SequenceFlow',
	        'bpmn:TextAnnotation'
	      ]);

	      return !(element.labelTarget || cannotDistribute);
	    });
	  });
	}

	BpmnDistributeElements.$inject = [ 'distributeElements' ];

	var DistributeElementsModule$1 = {
	  __depends__: [
	    DistributeElementsModule
	  ],
	  __init__: [ 'bpmnDistributeElements' ],
	  bpmnDistributeElements: [ 'type', BpmnDistributeElements ]
	};

	var NOT_REGISTERED_ERROR = 'is not a registered action',
	    IS_REGISTERED_ERROR = 'is already registered';


	/**
	 * An interface that provides access to modeling actions by decoupling
	 * the one who requests the action to be triggered and the trigger itself.
	 *
	 * It's possible to add new actions by registering them with ´registerAction´
	 * and likewise unregister existing ones with ´unregisterAction´.
	 *
	 *
	 * ## Life-Cycle and configuration
	 *
	 * The editor actions will wait for diagram initialization before
	 * registering default actions _and_ firing an `editorActions.init` event.
	 *
	 * Interested parties may listen to the `editorActions.init` event with
	 * low priority to check, which actions got registered. Other components
	 * may use the event to register their own actions via `registerAction`.
	 *
	 * @param {EventBus} eventBus
	 * @param {Injector} injector
	 */
	function EditorActions(eventBus, injector) {

	  // initialize actions
	  this._actions = {};

	  var self = this;

	  eventBus.on('diagram.init', function() {

	    // all diagram modules got loaded; check which ones
	    // are available and register the respective default actions
	    self._registerDefaultActions(injector);

	    // ask interested parties to register available editor
	    // actions on diagram initialization
	    eventBus.fire('editorActions.init', {
	      editorActions: self
	    });
	  });

	}

	EditorActions.$inject = [
	  'eventBus',
	  'injector'
	];

	/**
	 * Register default actions.
	 *
	 * @param {Injector} injector
	 */
	EditorActions.prototype._registerDefaultActions = function(injector) {

	  // (1) retrieve optional components to integrate with

	  var commandStack = injector.get('commandStack', false);
	  var modeling = injector.get('modeling', false);
	  var selection = injector.get('selection', false);
	  var zoomScroll = injector.get('zoomScroll', false);
	  var copyPaste = injector.get('copyPaste', false);
	  var canvas = injector.get('canvas', false);
	  var rules = injector.get('rules', false);
	  var keyboardMove = injector.get('keyboardMove', false);
	  var keyboardMoveSelection = injector.get('keyboardMoveSelection', false);

	  // (2) check components and register actions

	  if (commandStack) {
	    this.register('undo', function() {
	      commandStack.undo();
	    });

	    this.register('redo', function() {
	      commandStack.redo();
	    });
	  }

	  if (copyPaste && selection) {
	    this.register('copy', function() {
	      var selectedElements = selection.get();

	      copyPaste.copy(selectedElements);
	    });
	  }

	  if (copyPaste) {
	    this.register('paste', function() {
	      copyPaste.paste();
	    });
	  }

	  if (zoomScroll) {
	    this.register('stepZoom', function(opts) {
	      zoomScroll.stepZoom(opts.value);
	    });
	  }

	  if (canvas) {
	    this.register('zoom', function(opts) {
	      canvas.zoom(opts.value);
	    });
	  }

	  if (modeling && selection && rules) {
	    this.register('removeSelection', function() {

	      var selectedElements = selection.get();

	      if (!selectedElements.length) {
	        return;
	      }

	      var allowed = rules.allowed('elements.delete', { elements: selectedElements }),
	          removableElements;

	      if (allowed === false) {
	        return;
	      }
	      else if (isArray(allowed)) {
	        removableElements = allowed;
	      }
	      else {
	        removableElements = selectedElements;
	      }

	      if (removableElements.length) {
	        modeling.removeElements(removableElements.slice());
	      }
	    });
	  }

	  if (keyboardMove) {
	    this.register('moveCanvas', function(opts) {
	      keyboardMove.moveCanvas(opts);
	    });
	  }

	  if (keyboardMoveSelection) {
	    this.register('moveSelection', function(opts) {
	      keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);
	    });
	  }

	};


	/**
	 * Triggers a registered action
	 *
	 * @param  {string} action
	 * @param  {Object} opts
	 *
	 * @return {Unknown} Returns what the registered listener returns
	 */
	EditorActions.prototype.trigger = function(action, opts) {
	  if (!this._actions[action]) {
	    throw error$2(action, NOT_REGISTERED_ERROR);
	  }

	  return this._actions[action](opts);
	};


	/**
	 * Registers a collections of actions.
	 * The key of the object will be the name of the action.
	 *
	 * @example
	 * ´´´
	 * var actions = {
	 *   spaceTool: function() {
	 *     spaceTool.activateSelection();
	 *   },
	 *   lassoTool: function() {
	 *     lassoTool.activateSelection();
	 *   }
	 * ];
	 *
	 * editorActions.register(actions);
	 *
	 * editorActions.isRegistered('spaceTool'); // true
	 * ´´´
	 *
	 * @param  {Object} actions
	 */
	EditorActions.prototype.register = function(actions, listener) {
	  var self = this;

	  if (typeof actions === 'string') {
	    return this._registerAction(actions, listener);
	  }

	  forEach(actions, function(listener, action) {
	    self._registerAction(action, listener);
	  });
	};

	/**
	 * Registers a listener to an action key
	 *
	 * @param  {string} action
	 * @param  {Function} listener
	 */
	EditorActions.prototype._registerAction = function(action, listener) {
	  if (this.isRegistered(action)) {
	    throw error$2(action, IS_REGISTERED_ERROR);
	  }

	  this._actions[action] = listener;
	};

	/**
	 * Unregister an existing action
	 *
	 * @param {string} action
	 */
	EditorActions.prototype.unregister = function(action) {
	  if (!this.isRegistered(action)) {
	    throw error$2(action, NOT_REGISTERED_ERROR);
	  }

	  this._actions[action] = undefined;
	};

	/**
	 * Returns the number of actions that are currently registered
	 *
	 * @return {number}
	 */
	EditorActions.prototype.getActions = function() {
	  return Object.keys(this._actions);
	};

	/**
	 * Checks wether the given action is registered
	 *
	 * @param {string} action
	 *
	 * @return {boolean}
	 */
	EditorActions.prototype.isRegistered = function(action) {
	  return !!this._actions[action];
	};


	function error$2(action, message) {
	  return new Error(action + ' ' + message);
	}

	var EditorActionsModule = {
	  __init__: [ 'editorActions' ],
	  editorActions: [ 'type', EditorActions ]
	};

	/**
	 * Registers and executes BPMN specific editor actions.
	 *
	 * @param {Injector} injector
	 */
	function BpmnEditorActions(injector) {
	  injector.invoke(EditorActions, this);
	}

	inherits_browser(BpmnEditorActions, EditorActions);

	BpmnEditorActions.$inject = [
	  'injector'
	];

	/**
	 * Register default actions.
	 *
	 * @param {Injector} injector
	 */
	BpmnEditorActions.prototype._registerDefaultActions = function(injector) {

	  // (0) invoke super method

	  EditorActions.prototype._registerDefaultActions.call(this, injector);

	  // (1) retrieve optional components to integrate with

	  var canvas = injector.get('canvas', false);
	  var elementRegistry = injector.get('elementRegistry', false);
	  var selection = injector.get('selection', false);
	  var spaceTool = injector.get('spaceTool', false);
	  var lassoTool = injector.get('lassoTool', false);
	  var handTool = injector.get('handTool', false);
	  var globalConnect = injector.get('globalConnect', false);
	  var distributeElements = injector.get('distributeElements', false);
	  var alignElements = injector.get('alignElements', false);
	  var directEditing = injector.get('directEditing', false);
	  var searchPad = injector.get('searchPad', false);
	  var modeling = injector.get('modeling', false);

	  // (2) check components and register actions

	  if (canvas && elementRegistry && selection) {
	    this._registerAction('selectElements', function() {

	      // select all elements except for the invisible
	      // root element
	      var rootElement = canvas.getRootElement();

	      var elements = elementRegistry.filter(function(element) {
	        return element !== rootElement;
	      });

	      selection.select(elements);

	      return elements;
	    });
	  }

	  if (spaceTool) {
	    this._registerAction('spaceTool', function() {
	      spaceTool.toggle();
	    });
	  }

	  if (lassoTool) {
	    this._registerAction('lassoTool', function() {
	      lassoTool.toggle();
	    });
	  }

	  if (handTool) {
	    this._registerAction('handTool', function() {
	      handTool.toggle();
	    });
	  }

	  if (globalConnect) {
	    this._registerAction('globalConnectTool', function() {
	      globalConnect.toggle();
	    });
	  }

	  if (selection && distributeElements) {
	    this._registerAction('distributeElements', function(opts) {
	      var currentSelection = selection.get(),
	          type = opts.type;

	      if (currentSelection.length) {
	        distributeElements.trigger(currentSelection, type);
	      }
	    });
	  }

	  if (selection && alignElements) {
	    this._registerAction('alignElements', function(opts) {
	      var currentSelection = selection.get(),
	          aligneableElements = [],
	          type = opts.type;

	      if (currentSelection.length) {
	        aligneableElements = filter(currentSelection, function(element) {
	          return !is$1(element, 'bpmn:Lane');
	        });

	        alignElements.trigger(aligneableElements, type);
	      }
	    });
	  }

	  if (selection && modeling) {
	    this._registerAction('setColor', function(opts) {
	      var currentSelection = selection.get();

	      if (currentSelection.length) {
	        modeling.setColor(currentSelection, opts);
	      }
	    });
	  }

	  if (selection && directEditing) {
	    this._registerAction('directEditing', function() {
	      var currentSelection = selection.get();

	      if (currentSelection.length) {
	        directEditing.activate(currentSelection[0]);
	      }
	    });
	  }

	  if (searchPad) {
	    this._registerAction('find', function() {
	      searchPad.toggle();
	    });
	  }

	  if (canvas && modeling) {
	    this._registerAction('moveToOrigin', function() {
	      var rootElement = canvas.getRootElement(),
	          boundingBox,
	          elements;

	      if (is$1(rootElement, 'bpmn:Collaboration')) {
	        elements = elementRegistry.filter(function(element) {
	          return is$1(element.parent, 'bpmn:Collaboration');
	        });
	      } else {
	        elements = elementRegistry.filter(function(element) {
	          return element !== rootElement && !is$1(element.parent, 'bpmn:SubProcess');
	        });
	      }

	      boundingBox = getBBox(elements);

	      modeling.moveElements(
	        elements,
	        { x: -boundingBox.x, y: -boundingBox.y },
	        rootElement
	      );
	    });
	  }

	};

	var EditorActionsModule$1 = {
	  __depends__: [
	    EditorActionsModule
	  ],
	  editorActions: [ 'type', BpmnEditorActions ]
	};

	function BpmnGridSnapping(eventBus) {
	  eventBus.on([
	    'create.init',
	    'shape.move.init'
	  ], function(event) {
	    var context = event.context,
	        shape = event.shape;

	    if (isAny(shape, [
	      'bpmn:Participant',
	      'bpmn:SubProcess',
	      'bpmn:TextAnnotation'
	    ])) {
	      if (!context.gridSnappingContext) {
	        context.gridSnappingContext = {};
	      }

	      context.gridSnappingContext.snapLocation = 'top-left';
	    }
	  });
	}

	BpmnGridSnapping.$inject = [ 'eventBus' ];

	var SPACING = 10;

	function quantize(value, quantum, fn) {
	  if (!fn) {
	    fn = 'round';
	  }

	  return Math[ fn ](value / quantum) * quantum;
	}

	var LOWER_PRIORITY = 1200;
	var LOW_PRIORITY$8 = 800;

	/**
	 * Basic grid snapping that covers connecting, creating, moving, resizing shapes, moving bendpoints
	 * and connection segments.
	 */
	function GridSnapping(elementRegistry, eventBus, config) {

	  var active = !config || config.active !== false;

	  this._eventBus = eventBus;

	  var self = this;

	  eventBus.on('diagram.init', LOW_PRIORITY$8, function() {
	    self.setActive(active);
	  });

	  eventBus.on([
	    'create.move',
	    'create.end',
	    'bendpoint.move.move',
	    'bendpoint.move.end',
	    'connect.move',
	    'connect.end',
	    'connectionSegment.move.move',
	    'connectionSegment.move.end',
	    'resize.move',
	    'resize.end',
	    'shape.move.move',
	    'shape.move.end'
	  ], LOWER_PRIORITY, function(event) {
	    var originalEvent = event.originalEvent;

	    if (!self.active || (originalEvent && isCmd(originalEvent))) {
	      return;
	    }

	    var context = event.context,
	        gridSnappingContext = context.gridSnappingContext;

	    if (!gridSnappingContext) {
	      gridSnappingContext = context.gridSnappingContext = {};
	    }

	    [ 'x', 'y' ].forEach(function(axis) {
	      var options = {};

	      // allow snapping with offset
	      var snapOffset = getSnapOffset(event, axis, elementRegistry);

	      if (snapOffset) {
	        options.offset = snapOffset;
	      }

	      // allow snapping with min and max
	      var snapConstraints = getSnapConstraints(event, axis);

	      if (snapConstraints) {
	        assign(options, snapConstraints);
	      }

	      if (!isSnapped(event, axis)) {
	        self.snapEvent(event, axis, options);
	      }
	    });
	  });
	}

	/**
	 * Snap an events x or y with optional min, max and offset.
	 *
	 * @param {Object} event
	 * @param {string} axis
	 * @param {number} [options.min]
	 * @param {number} [options.max]
	 * @param {number} [options.offset]
	 */
	GridSnapping.prototype.snapEvent = function(event, axis, options) {
	  var snappedValue = this.snapValue(event[ axis ], options);

	  setSnapped(event, axis, snappedValue);
	};

	/**
	 * Expose grid spacing for third parties (i.e. extensions).
	 *
	 * @return {number} spacing of grid dots
	 */
	GridSnapping.prototype.getGridSpacing = function() {
	  return SPACING;
	};

	/**
	 * Snap value with optional min, max and offset.
	 *
	 * @param {number} value
	 * @param {Object} options
	 * @param {number} [options.min]
	 * @param {number} [options.max]
	 * @param {number} [options.offset]
	 */
	GridSnapping.prototype.snapValue = function(value, options) {
	  var offset = 0;

	  if (options && options.offset) {
	    offset = options.offset;
	  }

	  value += offset;

	  value = quantize(value, SPACING);

	  var min, max;

	  if (options && options.min) {
	    min = options.min;

	    if (isNumber(min)) {
	      min = quantize(min + offset, SPACING, 'ceil');

	      value = Math.max(value, min);
	    }
	  }

	  if (options && options.max) {
	    max = options.max;

	    if (isNumber(max)) {
	      max = quantize(max + offset, SPACING, 'floor');

	      value = Math.min(value, max);
	    }
	  }

	  value -= offset;

	  return value;
	};

	GridSnapping.prototype.isActive = function() {
	  return this.active;
	};

	GridSnapping.prototype.setActive = function(active) {
	  this.active = active;

	  this._eventBus.fire('gridSnapping.toggle', { active: active });
	};

	GridSnapping.prototype.toggleActive = function() {
	  this.setActive(!this.active);
	};

	GridSnapping.$inject = [
	  'elementRegistry',
	  'eventBus',
	  'config.gridSnapping'
	];

	// helpers //////////

	/**
	 * Get minimum and maximum snap constraints.
	 * Constraints are cached.
	 *
	 * @param {Object} event
	 * @param {Object} event.context
	 * @param {string} axis
	 *
	 * @returns {boolean|Object}
	 */
	function getSnapConstraints(event, axis) {
	  var context = event.context,
	      createConstraints = context.createConstraints,
	      resizeConstraints = context.resizeConstraints || {},
	      gridSnappingContext = context.gridSnappingContext,
	      snapConstraints = gridSnappingContext.snapConstraints;

	  // cache snap constraints
	  if (snapConstraints && snapConstraints[ axis ]) {
	    return snapConstraints[ axis ];
	  }

	  if (!snapConstraints) {
	    snapConstraints = gridSnappingContext.snapConstraints = {};
	  }

	  if (!snapConstraints[ axis ]) {
	    snapConstraints[ axis ] = {};
	  }

	  var direction = context.direction;

	  // create
	  if (createConstraints) {
	    if (isHorizontal(axis)) {
	      snapConstraints.x.min = createConstraints.left;
	      snapConstraints.x.max = createConstraints.right;
	    } else {
	      snapConstraints.y.min = createConstraints.top;
	      snapConstraints.y.max = createConstraints.bottom;
	    }
	  }

	  // resize
	  var minResizeConstraints = resizeConstraints.min,
	      maxResizeConstraints = resizeConstraints.max;

	  if (minResizeConstraints) {
	    if (isHorizontal(axis)) {

	      if (isWest(direction)) {
	        snapConstraints.x.max = minResizeConstraints.left;
	      } else {
	        snapConstraints.x.min = minResizeConstraints.right;
	      }

	    } else {

	      if (isNorth(direction)) {
	        snapConstraints.y.max = minResizeConstraints.top;
	      } else {
	        snapConstraints.y.min = minResizeConstraints.bottom;
	      }

	    }
	  }

	  if (maxResizeConstraints) {
	    if (isHorizontal(axis)) {

	      if (isWest(direction)) {
	        snapConstraints.x.min = maxResizeConstraints.left;
	      } else {
	        snapConstraints.x.max = maxResizeConstraints.right;
	      }

	    } else {

	      if (isNorth(direction)) {
	        snapConstraints.y.min = maxResizeConstraints.top;
	      } else {
	        snapConstraints.y.max = maxResizeConstraints.bottom;
	      }

	    }
	  }

	  return snapConstraints[ axis ];
	}

	/**
	 * Get snap offset.
	 * Offset is cached.
	 *
	 * @param {Object} event
	 * @param {string} axis
	 * @param {ElementRegistry} elementRegistry
	 *
	 * @returns {number}
	 */
	function getSnapOffset(event, axis, elementRegistry) {
	  var context = event.context,
	      shape = event.shape,
	      gridSnappingContext = context.gridSnappingContext,
	      snapLocation = gridSnappingContext.snapLocation,
	      snapOffset = gridSnappingContext.snapOffset;

	  // cache snap offset
	  if (snapOffset && isNumber(snapOffset[ axis ])) {
	    return snapOffset[ axis ];
	  }

	  if (!snapOffset) {
	    snapOffset = gridSnappingContext.snapOffset = {};
	  }

	  if (!isNumber(snapOffset[ axis ])) {
	    snapOffset[ axis ] = 0;
	  }

	  if (!shape) {
	    return snapOffset[ axis ];
	  }

	  if (!elementRegistry.get(shape.id)) {

	    if (isHorizontal(axis)) {
	      snapOffset[ axis ] += shape[ axis ] + shape.width / 2;
	    } else {
	      snapOffset[ axis ] += shape[ axis ] + shape.height / 2;
	    }
	  }

	  if (!snapLocation) {
	    return snapOffset[ axis ];
	  }

	  if (axis === 'x') {
	    if (/left/.test(snapLocation)) {
	      snapOffset[ axis ] -= shape.width / 2;
	    } else if (/right/.test(snapLocation)) {
	      snapOffset[ axis ] += shape.width / 2;
	    }
	  } else {
	    if (/top/.test(snapLocation)) {
	      snapOffset[ axis ] -= shape.height / 2;
	    } else if (/bottom/.test(snapLocation)) {
	      snapOffset[ axis ] += shape.height / 2;
	    }
	  }

	  return snapOffset[ axis ];
	}

	function isHorizontal(axis) {
	  return axis === 'x';
	}

	function isNorth(direction) {
	  return direction.indexOf('n') !== -1;
	}

	function isWest(direction) {
	  return direction.indexOf('w') !== -1;
	}

	/**
	 * Integrates resizing with grid snapping.
	 */
	function ResizeBehavior(eventBus, gridSnapping) {
	  CommandInterceptor.call(this, eventBus);

	  this._gridSnapping = gridSnapping;

	  var self = this;

	  this.preExecute('shape.resize', function(event) {
	    var context = event.context,
	        hints = context.hints || {},
	        autoResize = hints.autoResize;

	    if (!autoResize) {
	      return;
	    }

	    var shape = context.shape,
	        newBounds = context.newBounds;

	    if (isString(autoResize)) {
	      context.newBounds = self.snapComplex(newBounds, autoResize);
	    } else {
	      context.newBounds = self.snapSimple(shape, newBounds);
	    }
	  });
	}

	ResizeBehavior.$inject = [
	  'eventBus',
	  'gridSnapping',
	  'modeling'
	];

	inherits_browser(ResizeBehavior, CommandInterceptor);

	/**
	 * Snap width and height in relation to center.
	 *
	 * @param {djs.model.shape} shape
	 * @param {Bounds} newBounds
	 *
	 * @returns {Bounds} Snapped bounds.
	 */
	ResizeBehavior.prototype.snapSimple = function(shape, newBounds) {
	  var gridSnapping = this._gridSnapping;

	  newBounds.width = gridSnapping.snapValue(newBounds.width, {
	    min: newBounds.width
	  });

	  newBounds.height = gridSnapping.snapValue(newBounds.height, {
	    min: newBounds.height
	  });

	  newBounds.x = shape.x + (shape.width / 2) - (newBounds.width / 2);
	  newBounds.y = shape.y + (shape.height / 2) - (newBounds.height / 2);

	  return newBounds;
	};

	/**
	 * Snap x, y, width and height according to given directions.
	 *
	 * @param {Bounds} newBounds
	 * @param {string} directions - Directions as {n|w|s|e}.
	 *
	 * @returns {Bounds} Snapped bounds.
	 */
	ResizeBehavior.prototype.snapComplex = function(newBounds, directions) {
	  if (/w|e/.test(directions)) {
	    newBounds = this.snapHorizontally(newBounds, directions);
	  }

	  if (/n|s/.test(directions)) {
	    newBounds = this.snapVertically(newBounds, directions);
	  }

	  return newBounds;
	};

	/**
	 * Snap in one or both directions horizontally.
	 *
	 * @param {Bounds} newBounds
	 * @param {string} directions - Directions as {n|w|s|e}.
	 *
	 * @returns {Bounds} Snapped bounds.
	 */
	ResizeBehavior.prototype.snapHorizontally = function(newBounds, directions) {
	  var gridSnapping = this._gridSnapping,
	      west = /w/.test(directions),
	      east = /e/.test(directions);

	  var snappedNewBounds = {};

	  snappedNewBounds.width = gridSnapping.snapValue(newBounds.width, {
	    min: newBounds.width
	  });

	  if (east) {

	    // handle <we>
	    if (west) {
	      snappedNewBounds.x = gridSnapping.snapValue(newBounds.x, {
	        max: newBounds.x
	      });

	      snappedNewBounds.width += gridSnapping.snapValue(newBounds.x - snappedNewBounds.x, {
	        min: newBounds.x - snappedNewBounds.x
	      });
	    }

	    // handle <e>
	    else {
	      newBounds.x = newBounds.x + newBounds.width - snappedNewBounds.width;
	    }
	  }

	  // assign snapped x and width
	  assign(newBounds, snappedNewBounds);

	  return newBounds;
	};

	/**
	 * Snap in one or both directions vertically.
	 *
	 * @param {Bounds} newBounds
	 * @param {string} directions - Directions as {n|w|s|e}.
	 *
	 * @returns {Bounds} Snapped bounds.
	 */
	ResizeBehavior.prototype.snapVertically = function(newBounds, directions) {
	  var gridSnapping = this._gridSnapping,
	      north = /n/.test(directions),
	      south = /s/.test(directions);

	  var snappedNewBounds = {};

	  snappedNewBounds.height = gridSnapping.snapValue(newBounds.height, {
	    min: newBounds.height
	  });

	  if (north) {

	    // handle <ns>
	    if (south) {
	      snappedNewBounds.y = gridSnapping.snapValue(newBounds.y, {
	        max: newBounds.y
	      });

	      snappedNewBounds.height += gridSnapping.snapValue(newBounds.y - snappedNewBounds.y, {
	        min: newBounds.y - snappedNewBounds.y
	      });
	    }

	    // handle <n>
	    else {
	      newBounds.y = newBounds.y + newBounds.height - snappedNewBounds.height;
	    }
	  }

	  // assign snapped y and height
	  assign(newBounds, snappedNewBounds);

	  return newBounds;
	};

	var HIGH_PRIORITY$4 = 2000;

	/**
	 * Integrates space tool with grid snapping.
	 */
	function SpaceToolBehavior(eventBus, gridSnapping) {
	  eventBus.on([
	    'spaceTool.move',
	    'spaceTool.end'
	  ], HIGH_PRIORITY$4, function(event) {
	    var context = event.context;

	    if (!context.initialized) {
	      return;
	    }

	    var axis = context.axis;

	    var snapped;

	    if (axis === 'x') {

	      // snap delta x to multiple of 10
	      snapped = gridSnapping.snapValue(event.dx);

	      event.x = event.x + snapped - event.dx;
	      event.dx = snapped;
	    } else {

	      // snap delta y to multiple of 10
	      snapped = gridSnapping.snapValue(event.dy);

	      event.y = event.y + snapped - event.dy;
	      event.dy = snapped;
	    }
	  });
	}

	SpaceToolBehavior.$inject = [
	  'eventBus',
	  'gridSnapping'
	];

	var GridSnappingBehaviorModule = {
	  __init__: [
	    'gridSnappingResizeBehavior',
	    'gridSnappingSpaceToolBehavior'
	  ],
	  gridSnappingResizeBehavior: [ 'type', ResizeBehavior ],
	  gridSnappingSpaceToolBehavior: [ 'type', SpaceToolBehavior ]
	};

	var GridSnappingModule = {
	  __depends__: [ GridSnappingBehaviorModule ],
	  __init__: [ 'gridSnapping' ],
	  gridSnapping: [ 'type', GridSnapping ]
	};

	var HIGH_PRIORITY$5 = 2000;


	function AutoPlaceBehavior(eventBus, gridSnapping) {
	  eventBus.on('autoPlace', HIGH_PRIORITY$5, function(context) {
	    var source = context.source,
	        sourceMid = getMid(source),
	        shape = context.shape;

	    var position = getNewShapePosition$1(source, shape);

	    [ 'x', 'y' ].forEach(function(axis) {
	      var options = {};

	      // do not snap if x/y equal
	      if (position[ axis ] === sourceMid[ axis ]) {
	        return;
	      }

	      if (position[ axis ] > sourceMid[ axis ]) {
	        options.min = position[ axis ];
	      } else {
	        options.max = position[ axis ];
	      }

	      if (is$1(shape, 'bpmn:TextAnnotation')) {

	        if (isHorizontal$1(axis)) {
	          options.offset = -shape.width / 2;
	        } else {
	          options.offset = -shape.height / 2;
	        }

	      }

	      position[ axis ] = gridSnapping.snapValue(position[ axis ], options);

	    });

	    // must be returned to be considered by auto place
	    return position;
	  });
	}

	AutoPlaceBehavior.$inject = [
	  'eventBus',
	  'gridSnapping'
	];

	// helpers //////////

	function isHorizontal$1(axis) {
	  return axis === 'x';
	}

	var HIGHER_PRIORITY = 1750;


	function CreateParticipantBehavior(canvas, eventBus, gridSnapping) {
	  eventBus.on([
	    'create.start',
	    'shape.move.start'
	  ], HIGHER_PRIORITY, function(event) {
	    var context = event.context,
	        shape = context.shape,
	        rootElement = canvas.getRootElement();

	    if (!is$1(shape, 'bpmn:Participant') ||
	      !is$1(rootElement, 'bpmn:Process') ||
	      !rootElement.children.length) {
	      return;
	    }

	    var createConstraints = context.createConstraints;

	    if (!createConstraints) {
	      return;
	    }

	    shape.width = gridSnapping.snapValue(shape.width, { min: shape.width });
	    shape.height = gridSnapping.snapValue(shape.height, { min: shape.height });
	  });
	}

	CreateParticipantBehavior.$inject = [
	  'canvas',
	  'eventBus',
	  'gridSnapping'
	];

	var HIGH_PRIORITY$6 = 3000;


	/**
	 * Snaps connections with Manhattan layout.
	 */
	function LayoutConnectionBehavior(eventBus, gridSnapping, modeling) {
	  CommandInterceptor.call(this, eventBus);

	  this._gridSnapping = gridSnapping;

	  var self = this;

	  this.postExecuted([
	    'connection.create',
	    'connection.layout'
	  ], HIGH_PRIORITY$6, function(event) {
	    var context = event.context,
	        connection = context.connection,
	        hints = context.hints || {},
	        waypoints = connection.waypoints;

	    if (hints.connectionStart || hints.connectionEnd || hints.createElementsBehavior === false) {
	      return;
	    }

	    if (!hasMiddleSegments(waypoints)) {
	      return;
	    }

	    modeling.updateWaypoints(connection, self.snapMiddleSegments(waypoints));
	  });
	}

	LayoutConnectionBehavior.$inject = [
	  'eventBus',
	  'gridSnapping',
	  'modeling'
	];

	inherits_browser(LayoutConnectionBehavior, CommandInterceptor);

	/**
	 * Snap middle segments of a given connection.
	 *
	 * @param {Array<Point>} waypoints
	 *
	 * @returns {Array<Point>}
	 */
	LayoutConnectionBehavior.prototype.snapMiddleSegments = function(waypoints) {
	  var gridSnapping = this._gridSnapping,
	      snapped;

	  waypoints = waypoints.slice();

	  for (var i = 1; i < waypoints.length - 2; i++) {

	    snapped = snapSegment(gridSnapping, waypoints[i], waypoints[i + 1]);

	    waypoints[i] = snapped[0];
	    waypoints[i + 1] = snapped[1];
	  }

	  return waypoints;
	};


	// helpers //////////

	/**
	 * Check whether a connection has a middle segments.
	 *
	 * @param {Array} waypoints
	 *
	 * @returns {boolean}
	 */
	function hasMiddleSegments(waypoints) {
	  return waypoints.length > 3;
	}

	/**
	 * Check whether an alignment is horizontal.
	 *
	 * @param {string} aligned
	 *
	 * @returns {boolean}
	 */
	function horizontallyAligned(aligned) {
	  return aligned === 'h';
	}

	/**
	 * Check whether an alignment is vertical.
	 *
	 * @param {string} aligned
	 *
	 * @returns {boolean}
	 */
	function verticallyAligned(aligned) {
	  return aligned === 'v';
	}

	/**
	 * Get middle segments from a given connection.
	 *
	 * @param {Array} waypoints
	 *
	 * @returns {Array}
	 */
	function snapSegment(gridSnapping, segmentStart, segmentEnd) {

	  var aligned = pointsAligned(segmentStart, segmentEnd);

	  var snapped = {};

	  if (horizontallyAligned(aligned)) {

	    // snap horizontally
	    snapped.y = gridSnapping.snapValue(segmentStart.y);
	  }

	  if (verticallyAligned(aligned)) {

	    // snap vertically
	    snapped.x = gridSnapping.snapValue(segmentStart.x);
	  }

	  if ('x' in snapped || 'y' in snapped) {
	    segmentStart = assign({}, segmentStart, snapped);
	    segmentEnd = assign({}, segmentEnd, snapped);
	  }

	  return [ segmentStart, segmentEnd ];
	}

	var GridSnappingBehaviorModule$1 = {
	  __init__: [
	    'gridSnappingAutoPlaceBehavior',
	    'gridSnappingCreateParticipantBehavior',
	    'gridSnappingLayoutConnectionBehavior',
	  ],
	  gridSnappingAutoPlaceBehavior: [ 'type', AutoPlaceBehavior ],
	  gridSnappingCreateParticipantBehavior: [ 'type', CreateParticipantBehavior ],
	  gridSnappingLayoutConnectionBehavior: [ 'type', LayoutConnectionBehavior ]
	};

	var GridSnappingModule$1 = {
	  __depends__: [
	    GridSnappingModule,
	    GridSnappingBehaviorModule$1
	  ],
	  __init__: [ 'bpmnGridSnapping' ],
	  bpmnGridSnapping: [ 'type', BpmnGridSnapping ]
	};

	var LABEL_WIDTH = 30,
	    LABEL_HEIGHT = 30;


	/**
	 * BPMN-specific hit zones and interaction fixes.
	 *
	 * @param {EventBus} eventBus
	 * @param {InteractionEvents} interactionEvents
	 */
	function BpmnInteractionEvents(eventBus, interactionEvents) {

	  this._interactionEvents = interactionEvents;

	  var self = this;

	  eventBus.on([
	    'interactionEvents.createHit',
	    'interactionEvents.updateHit'
	  ], function(context) {
	    var element = context.element,
	        gfx = context.gfx;

	    if (is$1(element, 'bpmn:Lane')) {
	      return self.createParticipantHit(element, gfx);
	    } else

	    if (is$1(element, 'bpmn:Participant')) {
	      if (isExpanded(element)) {
	        return self.createParticipantHit(element, gfx);
	      } else {
	        return self.createDefaultHit(element, gfx);
	      }
	    } else

	    if (is$1(element, 'bpmn:SubProcess')) {
	      if (isExpanded(element)) {
	        return self.createSubProcessHit(element, gfx);
	      } else {
	        return self.createDefaultHit(element, gfx);
	      }
	    }
	  });

	}

	BpmnInteractionEvents.$inject = [
	  'eventBus',
	  'interactionEvents'
	];


	BpmnInteractionEvents.prototype.createDefaultHit = function(element, gfx) {
	  this._interactionEvents.removeHits(gfx);

	  this._interactionEvents.createDefaultHit(element, gfx);

	  // indicate that we created a hit
	  return true;
	};

	BpmnInteractionEvents.prototype.createParticipantHit = function(element, gfx) {

	  // remove existing hits
	  this._interactionEvents.removeHits(gfx);

	  // add outline hit
	  this._interactionEvents.createBoxHit(gfx, 'click-stroke', {
	    width: element.width,
	    height: element.height
	  });

	  // add label hit
	  this._interactionEvents.createBoxHit(gfx, 'all', {
	    width: LABEL_WIDTH,
	    height: element.height
	  });

	  // indicate that we created a hit
	  return true;
	};

	BpmnInteractionEvents.prototype.createSubProcessHit = function(element, gfx) {

	  // remove existing hits
	  this._interactionEvents.removeHits(gfx);

	  // add outline hit
	  this._interactionEvents.createBoxHit(gfx, 'click-stroke', {
	    width: element.width,
	    height: element.height
	  });

	  // add label hit
	  this._interactionEvents.createBoxHit(gfx, 'all', {
	    width: element.width,
	    height: LABEL_HEIGHT
	  });

	  // indicate that we created a hit
	  return true;
	};

	var InteractionEventsModule$1 = {
	  __init__: [ 'bpmnInteractionEvents' ],
	  bpmnInteractionEvents: [ 'type', BpmnInteractionEvents ]
	};

	/**
	 * BPMN 2.0 specific keyboard bindings.
	 *
	 * @param {Injector} injector
	 */
	function BpmnKeyboardBindings(injector) {
	  injector.invoke(KeyboardBindings, this);
	}

	inherits_browser(BpmnKeyboardBindings, KeyboardBindings);

	BpmnKeyboardBindings.$inject = [
	  'injector'
	];


	/**
	 * Register available keyboard bindings.
	 *
	 * @param {Keyboard} keyboard
	 * @param {EditorActions} editorActions
	 */
	BpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActions) {

	  // inherit default bindings
	  KeyboardBindings.prototype.registerBindings.call(this, keyboard, editorActions);

	  /**
	   * Add keyboard binding if respective editor action
	   * is registered.
	   *
	   * @param {string} action name
	   * @param {Function} fn that implements the key binding
	   */
	  function addListener(action, fn) {

	    if (editorActions.isRegistered(action)) {
	      keyboard.addListener(fn);
	    }
	  }

	  // select all elements
	  // CTRL + A
	  addListener('selectElements', function(context) {

	    var event = context.keyEvent;

	    if (keyboard.isKey(['a', 'A'], event) && keyboard.isCmd(event)) {
	      editorActions.trigger('selectElements');

	      return true;
	    }
	  });

	  // search labels
	  // CTRL + F
	  addListener('find', function(context) {

	    var event = context.keyEvent;

	    if (keyboard.isKey(['f', 'F'], event) && keyboard.isCmd(event)) {
	      editorActions.trigger('find');

	      return true;
	    }
	  });

	  // activate space tool
	  // S
	  addListener('spaceTool', function(context) {

	    var event = context.keyEvent;

	    if (keyboard.hasModifier(event)) {
	      return;
	    }

	    if (keyboard.isKey(['s', 'S'], event)) {
	      editorActions.trigger('spaceTool');

	      return true;
	    }
	  });

	  // activate lasso tool
	  // L
	  addListener('lassoTool', function(context) {

	    var event = context.keyEvent;

	    if (keyboard.hasModifier(event)) {
	      return;
	    }

	    if (keyboard.isKey(['l', 'L'], event)) {
	      editorActions.trigger('lassoTool');

	      return true;
	    }
	  });

	  // activate hand tool
	  // H
	  addListener('handTool', function(context) {

	    var event = context.keyEvent;

	    if (keyboard.hasModifier(event)) {
	      return;
	    }

	    if (keyboard.isKey(['h', 'H'], event)) {
	      editorActions.trigger('handTool');

	      return true;
	    }
	  });

	  // activate global connect tool
	  // C
	  addListener('globalConnectTool', function(context) {

	    var event = context.keyEvent;

	    if (keyboard.hasModifier(event)) {
	      return;
	    }

	    if (keyboard.isKey(['c', 'C'], event)) {
	      editorActions.trigger('globalConnectTool');

	      return true;
	    }
	  });

	  // activate direct editing
	  // E
	  addListener('directEditing', function(context) {

	    var event = context.keyEvent;

	    if (keyboard.hasModifier(event)) {
	      return;
	    }

	    if (keyboard.isKey(['e', 'E'], event)) {
	      editorActions.trigger('directEditing');

	      return true;
	    }
	  });

	};

	var KeyboardModule$1 = {
	  __depends__: [
	    KeyboardModule
	  ],
	  __init__: [ 'keyboardBindings' ],
	  keyboardBindings: [ 'type', BpmnKeyboardBindings ]
	};

	var DEFAULT_CONFIG$1 = {
	  moveSpeed: 1,
	  moveSpeedAccelerated: 10
	};

	var HIGHER_PRIORITY$1 = 1500;

	var LEFT = 'left';
	var UP = 'up';
	var RIGHT = 'right';
	var DOWN = 'down';

	var KEY_TO_DIRECTION = {
	  ArrowLeft: LEFT,
	  Left: LEFT,
	  ArrowUp: UP,
	  Up: UP,
	  ArrowRight: RIGHT,
	  Right: RIGHT,
	  ArrowDown: DOWN,
	  Down: DOWN
	};

	var DIRECTIONS_DELTA = {
	  left: function(speed) {
	    return {
	      x: -speed,
	      y: 0
	    };
	  },
	  up: function(speed) {
	    return {
	      x: 0,
	      y: -speed
	    };
	  },
	  right: function(speed) {
	    return {
	      x: speed,
	      y: 0
	    };
	  },
	  down: function(speed) {
	    return {
	      x: 0,
	      y: speed
	    };
	  }
	};


	/**
	 * Enables to move selection with keyboard arrows.
	 * Use with Shift for modified speed (default=1, with Shift=10).
	 * Pressed Cmd/Ctrl turns the feature off.
	 *
	 * @param {Object} config
	 * @param {number} [config.moveSpeed=1]
	 * @param {number} [config.moveSpeedAccelerated=10]
	 * @param {Keyboard} keyboard
	 * @param {Modeling} modeling
	 * @param {Selection} selection
	 */
	function KeyboardMoveSelection(
	    config,
	    keyboard,
	    modeling,
	    rules,
	    selection
	) {

	  var self = this;

	  this._config = assign({}, DEFAULT_CONFIG$1, config || {});

	  keyboard.addListener(HIGHER_PRIORITY$1, function(event) {

	    var keyEvent = event.keyEvent;

	    var direction = KEY_TO_DIRECTION[keyEvent.key];

	    if (!direction) {
	      return;
	    }

	    if (keyboard.isCmd(keyEvent)) {
	      return;
	    }

	    var accelerated = keyboard.isShift(keyEvent);

	    self.moveSelection(direction, accelerated);

	    return true;
	  });


	  /**
	   * Move selected elements in the given direction,
	   * optionally specifying accelerated movement.
	   *
	   * @param {string} direction
	   * @param {boolean} [accelerated=false]
	   */
	  this.moveSelection = function(direction, accelerated) {

	    var selectedElements = selection.get();

	    if (!selectedElements.length) {
	      return;
	    }

	    var speed = this._config[
	      accelerated ?
	        'moveSpeedAccelerated' :
	        'moveSpeed'
	    ];

	    var delta = DIRECTIONS_DELTA[direction](speed);

	    var canMove = rules.allowed('elements.move', {
	      shapes: selectedElements
	    });

	    if (canMove) {
	      modeling.moveElements(selectedElements, delta);
	    }
	  };

	}

	KeyboardMoveSelection.$inject = [
	  'config.keyboardMoveSelection',
	  'keyboard',
	  'modeling',
	  'rules',
	  'selection'
	];

	var KeyboardMoveSelectionModule = {
	  __depends__: [
	    KeyboardModule,
	    SelectionModule
	  ],
	  __init__: [
	    'keyboardMoveSelection'
	  ],
	  keyboardMoveSelection: [ 'type', KeyboardMoveSelection ]
	};

	/**
	 * Adds change support to the diagram, including
	 *
	 * <ul>
	 *   <li>redrawing shapes and connections on change</li>
	 * </ul>
	 *
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 * @param {ElementRegistry} elementRegistry
	 * @param {GraphicsFactory} graphicsFactory
	 */
	function ChangeSupport(
	    eventBus, canvas, elementRegistry,
	    graphicsFactory) {


	  // redraw shapes / connections on change

	  eventBus.on('element.changed', function(event) {

	    var element = event.element;

	    // element might have been deleted and replaced by new element with same ID
	    // thus check for parent of element except for root element
	    if (element.parent || element === canvas.getRootElement()) {
	      event.gfx = elementRegistry.getGraphics(element);
	    }

	    // shape + gfx may have been deleted
	    if (!event.gfx) {
	      return;
	    }

	    eventBus.fire(getType(element) + '.changed', event);
	  });

	  eventBus.on('elements.changed', function(event) {

	    var elements = event.elements;

	    elements.forEach(function(e) {
	      eventBus.fire('element.changed', { element: e });
	    });

	    graphicsFactory.updateContainments(elements);
	  });

	  eventBus.on('shape.changed', function(event) {
	    graphicsFactory.update('shape', event.element, event.gfx);
	  });

	  eventBus.on('connection.changed', function(event) {
	    graphicsFactory.update('connection', event.element, event.gfx);
	  });
	}

	ChangeSupport.$inject = [
	  'eventBus',
	  'canvas',
	  'elementRegistry',
	  'graphicsFactory'
	];

	var ChangeSupportModule = {
	  __init__: [ 'changeSupport'],
	  changeSupport: [ 'type', ChangeSupport ]
	};

	var DEFAULT_MIN_WIDTH = 10;


	/**
	 * A component that provides resizing of shapes on the canvas.
	 *
	 * The following components are part of shape resize:
	 *
	 *  * adding resize handles,
	 *  * creating a visual during resize
	 *  * checking resize rules
	 *  * committing a change once finished
	 *
	 *
	 * ## Customizing
	 *
	 * It's possible to customize the resizing behaviour by intercepting 'resize.start'
	 * and providing the following parameters through the 'context':
	 *
	 *   * minDimensions ({ width, height }): minimum shape dimensions
	 *
	 *   * childrenBoxPadding ({ left, top, bottom, right } || number):
	 *     gap between the minimum bounding box and the container
	 *
	 * f.ex:
	 *
	 * ```javascript
	 * eventBus.on('resize.start', 1500, function(event) {
	 *   var context = event.context,
	 *
	 *  context.minDimensions = { width: 140, height: 120 };
	 *
	 *  // Passing general padding
	 *  context.childrenBoxPadding = 30;
	 *
	 *  // Passing padding to a specific side
	 *  context.childrenBoxPadding.left = 20;
	 * });
	 * ```
	 */
	function Resize(eventBus, rules, modeling, dragging) {

	  this._dragging = dragging;
	  this._rules = rules;

	  var self = this;


	  /**
	   * Handle resize move by specified delta.
	   *
	   * @param {Object} context
	   * @param {Point} delta
	   */
	  function handleMove(context, delta) {

	    var shape = context.shape,
	        direction = context.direction,
	        resizeConstraints = context.resizeConstraints,
	        newBounds;

	    context.delta = delta;

	    newBounds = resizeBounds(shape, direction, delta);

	    // ensure constraints during resize
	    context.newBounds = ensureConstraints$1(newBounds, resizeConstraints);

	    // update + cache executable state
	    context.canExecute = self.canResize(context);
	  }

	  /**
	   * Handle resize start.
	   *
	   * @param  {Object} context
	   */
	  function handleStart(context) {

	    var resizeConstraints = context.resizeConstraints,

	        // evaluate minBounds for backwards compatibility
	        minBounds = context.minBounds;

	    if (resizeConstraints !== undefined) {
	      return;
	    }

	    if (minBounds === undefined) {
	      minBounds = self.computeMinResizeBox(context);
	    }

	    context.resizeConstraints = {
	      min: asTRBL(minBounds)
	    };
	  }

	  /**
	   * Handle resize end.
	   *
	   * @param  {Object} context
	   */
	  function handleEnd(context) {
	    var shape = context.shape,
	        canExecute = context.canExecute,
	        newBounds = context.newBounds;

	    if (canExecute) {

	      // ensure we have actual pixel values for new bounds
	      // (important when zoom level was > 1 during move)
	      newBounds = roundBounds(newBounds);

	      if (!boundsChanged$1(shape, newBounds)) {

	        // no resize necessary
	        return;
	      }

	      // perform the actual resize
	      modeling.resizeShape(shape, newBounds);
	    }
	  }


	  eventBus.on('resize.start', function(event) {
	    handleStart(event.context);
	  });

	  eventBus.on('resize.move', function(event) {
	    var delta = {
	      x: event.dx,
	      y: event.dy
	    };

	    handleMove(event.context, delta);
	  });

	  eventBus.on('resize.end', function(event) {
	    handleEnd(event.context);
	  });

	}


	Resize.prototype.canResize = function(context) {
	  var rules = this._rules;

	  var ctx = pick(context, [ 'newBounds', 'shape', 'delta', 'direction' ]);

	  return rules.allowed('shape.resize', ctx);
	};

	/**
	 * Activate a resize operation.
	 *
	 * You may specify additional contextual information and must specify a
	 * resize direction during activation of the resize event.
	 *
	 * @param {MouseEvent} event
	 * @param {djs.model.Shape} shape
	 * @param {Object|string} contextOrDirection
	 */
	Resize.prototype.activate = function(event, shape, contextOrDirection) {
	  var dragging = this._dragging,
	      context,
	      direction;

	  if (typeof contextOrDirection === 'string') {
	    contextOrDirection = {
	      direction: contextOrDirection
	    };
	  }

	  context = assign({ shape: shape }, contextOrDirection);

	  direction = context.direction;

	  if (!direction) {
	    throw new Error('must provide a direction (n|w|s|e|nw|se|ne|sw)');
	  }

	  dragging.init(event, getReferencePoint(shape, direction), 'resize', {
	    autoActivate: true,
	    cursor: getCursor(direction),
	    data: {
	      shape: shape,
	      context: context
	    }
	  });
	};

	Resize.prototype.computeMinResizeBox = function(context) {
	  var shape = context.shape,
	      direction = context.direction,
	      minDimensions,
	      childrenBounds;

	  minDimensions = context.minDimensions || {
	    width: DEFAULT_MIN_WIDTH,
	    height: DEFAULT_MIN_WIDTH
	  };

	  // get children bounds
	  childrenBounds = computeChildrenBBox(shape, context.childrenBoxPadding);

	  // get correct minimum bounds from given resize direction
	  // basically ensures that the minBounds is max(childrenBounds, minDimensions)
	  return getMinResizeBounds(direction, shape, minDimensions, childrenBounds);
	};


	Resize.$inject = [
	  'eventBus',
	  'rules',
	  'modeling',
	  'dragging'
	];

	// helpers //////////

	function boundsChanged$1(shape, newBounds) {
	  return shape.x !== newBounds.x ||
	    shape.y !== newBounds.y ||
	    shape.width !== newBounds.width ||
	    shape.height !== newBounds.height;
	}

	function getReferencePoint(shape, direction) {
	  var mid = getMid(shape),
	      trbl = asTRBL(shape);

	  var referencePoint = {
	    x: mid.x,
	    y: mid.y
	  };

	  if (direction.indexOf('n') !== -1) {
	    referencePoint.y = trbl.top;
	  } else if (direction.indexOf('s') !== -1) {
	    referencePoint.y = trbl.bottom;
	  }

	  if (direction.indexOf('e') !== -1) {
	    referencePoint.x = trbl.right;
	  } else if (direction.indexOf('w') !== -1) {
	    referencePoint.x = trbl.left;
	  }

	  return referencePoint;
	}

	function getCursor(direction) {
	  var prefix = 'resize-';

	  if (direction === 'n' || direction === 's') {
	    return prefix + 'ns';
	  } else if (direction === 'e' || direction === 'w') {
	    return prefix + 'ew';
	  } else if (direction === 'nw' || direction === 'se') {
	    return prefix + 'nwse';
	  } else {
	    return prefix + 'nesw';
	  }
	}

	var MARKER_RESIZING = 'djs-resizing',
	    MARKER_RESIZE_NOT_OK = 'resize-not-ok';

	var LOW_PRIORITY$9 = 500;


	/**
	 * Provides previews for resizing shapes when resizing.
	 *
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 * @param {PreviewSupport} previewSupport
	 */
	function ResizePreview(eventBus, canvas, previewSupport) {

	  /**
	   * Update resizer frame.
	   *
	   * @param {Object} context
	   */
	  function updateFrame(context) {

	    var shape = context.shape,
	        bounds = context.newBounds,
	        frame = context.frame;

	    if (!frame) {
	      frame = context.frame = previewSupport.addFrame(shape, canvas.getDefaultLayer());

	      canvas.addMarker(shape, MARKER_RESIZING);
	    }

	    if (bounds.width > 5) {
	      attr$1(frame, { x: bounds.x, width: bounds.width });
	    }

	    if (bounds.height > 5) {
	      attr$1(frame, { y: bounds.y, height: bounds.height });
	    }

	    if (context.canExecute) {
	      classes$1(frame).remove(MARKER_RESIZE_NOT_OK);
	    } else {
	      classes$1(frame).add(MARKER_RESIZE_NOT_OK);
	    }
	  }

	  /**
	   * Remove resizer frame.
	   *
	   * @param {Object} context
	   */
	  function removeFrame(context) {
	    var shape = context.shape,
	        frame = context.frame;

	    if (frame) {
	      remove$1(context.frame);
	    }

	    canvas.removeMarker(shape, MARKER_RESIZING);
	  }

	  // add and update previews
	  eventBus.on('resize.move', LOW_PRIORITY$9, function(event) {
	    updateFrame(event.context);
	  });

	  // remove previews
	  eventBus.on('resize.cleanup', function(event) {
	    removeFrame(event.context);
	  });

	}

	ResizePreview.$inject = [
	  'eventBus',
	  'canvas',
	  'previewSupport'
	];

	var HANDLE_OFFSET = -6,
	    HANDLE_SIZE = 4,
	    HANDLE_HIT_SIZE = 20;

	var CLS_RESIZER = 'djs-resizer';

	var directions = [ 'n', 'w', 's', 'e', 'nw', 'ne', 'se', 'sw' ];


	/**
	 * This component is responsible for adding resize handles.
	 *
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 * @param {Selection} selection
	 * @param {Resize} resize
	 */
	function ResizeHandles(eventBus, canvas, selection, resize) {

	  this._resize = resize;
	  this._canvas = canvas;

	  var self = this;

	  eventBus.on('selection.changed', function(e) {
	    var newSelection = e.newSelection;

	    // remove old selection markers
	    self.removeResizers();

	    // add new selection markers ONLY if single selection
	    if (newSelection.length === 1) {
	      forEach(newSelection, bind(self.addResizer, self));
	    }
	  });

	  eventBus.on('shape.changed', function(e) {
	    var shape = e.element;

	    if (selection.isSelected(shape)) {
	      self.removeResizers();

	      self.addResizer(shape);
	    }
	  });
	}


	ResizeHandles.prototype.makeDraggable = function(element, gfx, direction) {
	  var resize = this._resize;

	  function startResize(event) {

	    // only trigger on left mouse button
	    if (isPrimaryButton(event)) {
	      resize.activate(event, element, direction);
	    }
	  }

	  componentEvent.bind(gfx, 'mousedown', startResize);
	  componentEvent.bind(gfx, 'touchstart', startResize);
	};


	ResizeHandles.prototype._createResizer = function(element, x, y, direction) {
	  var resizersParent = this._getResizersParent();

	  var offset = getHandleOffset(direction);

	  var group = create('g');

	  classes$1(group).add(CLS_RESIZER);
	  classes$1(group).add(CLS_RESIZER + '-' + element.id);
	  classes$1(group).add(CLS_RESIZER + '-' + direction);

	  append(resizersParent, group);

	  var visual = create('rect');

	  attr$1(visual, {
	    x: -HANDLE_SIZE / 2 + offset.x,
	    y: -HANDLE_SIZE / 2 + offset.y,
	    width: HANDLE_SIZE,
	    height: HANDLE_SIZE
	  });

	  classes$1(visual).add(CLS_RESIZER + '-visual');

	  append(group, visual);

	  var hit = create('rect');

	  attr$1(hit, {
	    x: -HANDLE_HIT_SIZE / 2 + offset.x,
	    y: -HANDLE_HIT_SIZE / 2 + offset.y,
	    width: HANDLE_HIT_SIZE,
	    height: HANDLE_HIT_SIZE
	  });

	  classes$1(hit).add(CLS_RESIZER + '-hit');

	  append(group, hit);

	  transform$1(group, x, y);

	  return group;
	};

	ResizeHandles.prototype.createResizer = function(element, direction) {
	  var point = getReferencePoint(element, direction);

	  var resizer = this._createResizer(element, point.x, point.y, direction);

	  this.makeDraggable(element, resizer, direction);
	};

	// resize handles implementation ///////////////////////////////

	/**
	 * Add resizers for a given element.
	 *
	 * @param {djs.model.Shape} shape
	 */
	ResizeHandles.prototype.addResizer = function(shape) {
	  var self = this;

	  var resize = this._resize;

	  if (!resize.canResize({ shape: shape })) {
	    return;
	  }

	  forEach(directions, function(direction) {
	    self.createResizer(shape, direction);
	  });
	};

	/**
	 * Remove all resizers
	 */
	ResizeHandles.prototype.removeResizers = function() {
	  var resizersParent = this._getResizersParent();

	  clear$1(resizersParent);
	};

	ResizeHandles.prototype._getResizersParent = function() {
	  return this._canvas.getLayer('resizers');
	};

	ResizeHandles.$inject = [
	  'eventBus',
	  'canvas',
	  'selection',
	  'resize'
	];

	// helpers //////////

	function getHandleOffset(direction) {
	  var offset = {
	    x: 0,
	    y: 0
	  };

	  if (direction.indexOf('e') !== -1) {
	    offset.x = -HANDLE_OFFSET;
	  } else if (direction.indexOf('w') !== -1) {
	    offset.x = HANDLE_OFFSET;
	  }

	  if (direction.indexOf('s') !== -1) {
	    offset.y = -HANDLE_OFFSET;
	  } else if (direction.indexOf('n') !== -1) {
	    offset.y = HANDLE_OFFSET;
	  }

	  return offset;
	}

	var ResizeModule = {
	  __depends__: [
	    RulesModule,
	    DraggingModule,
	    PreviewSupportModule
	  ],
	  __init__: [
	    'resize',
	    'resizePreview',
	    'resizeHandles'
	  ],
	  resize: [ 'type', Resize ],
	  resizePreview: [ 'type', ResizePreview ],
	  resizeHandles: [ 'type', ResizeHandles ]
	};

	/**
	 * Creates a new bpmn:CategoryValue inside a new bpmn:Category
	 *
	 * @param {ModdleElement} definitions
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement} categoryValue.
	 */
	function createCategoryValue(definitions, bpmnFactory) {
	  var categoryValue = bpmnFactory.create('bpmn:CategoryValue'),
	      category = bpmnFactory.create('bpmn:Category', {
	        categoryValue: [ categoryValue ]
	      });

	  // add to correct place
	  add$1(definitions.get('rootElements'), category);
	  getBusinessObject(category).$parent = definitions;
	  getBusinessObject(categoryValue).$parent = category;

	  return categoryValue;

	}

	function LabelEditingProvider(
	    eventBus, bpmnFactory, canvas, directEditing,
	    modeling, resizeHandles, textRenderer) {

	  this._bpmnFactory = bpmnFactory;
	  this._canvas = canvas;
	  this._modeling = modeling;
	  this._textRenderer = textRenderer;

	  directEditing.registerProvider(this);

	  // listen to dblclick on non-root elements
	  eventBus.on('element.dblclick', function(event) {
	    activateDirectEdit(event.element, true);
	  });

	  // complete on followup canvas operation
	  eventBus.on([
	    'autoPlace.start',
	    'canvas.viewbox.changing',
	    'drag.init',
	    'element.mousedown',
	    'popupMenu.open'
	  ], function(event) {

	    if (directEditing.isActive()) {
	      directEditing.complete();
	    }
	  });

	  // cancel on command stack changes
	  eventBus.on([ 'commandStack.changed' ], function(e) {
	    if (directEditing.isActive()) {
	      directEditing.cancel();
	    }
	  });


	  eventBus.on('directEditing.activate', function(event) {
	    resizeHandles.removeResizers();
	  });

	  eventBus.on('create.end', 500, function(event) {

	    var context = event.context,
	        element = context.shape,
	        canExecute = event.context.canExecute,
	        isTouch = event.isTouch;

	    // TODO(nikku): we need to find a way to support the
	    // direct editing on mobile devices; right now this will
	    // break for desworkflowediting on mobile devices
	    // as it breaks the user interaction workflow

	    // TODO(nre): we should temporarily focus the edited element
	    // here and release the focused viewport after the direct edit
	    // operation is finished
	    if (isTouch) {
	      return;
	    }

	    if (!canExecute) {
	      return;
	    }

	    if (context.hints && context.hints.createElementsBehavior === false) {
	      return;
	    }

	    activateDirectEdit(element);
	  });

	  eventBus.on('autoPlace.end', 500, function(event) {
	    activateDirectEdit(event.shape);
	  });


	  function activateDirectEdit(element, force) {
	    if (force ||
	        isAny(element, [ 'bpmn:Task', 'bpmn:TextAnnotation', 'bpmn:Group' ]) ||
	        isCollapsedSubProcess(element)) {

	      directEditing.activate(element);
	    }
	  }

	}

	LabelEditingProvider.$inject = [
	  'eventBus',
	  'bpmnFactory',
	  'canvas',
	  'directEditing',
	  'modeling',
	  'resizeHandles',
	  'textRenderer'
	];


	/**
	 * Activate direct editing for activities and text annotations.
	 *
	 * @param  {djs.model.Base} element
	 *
	 * @return {Object} an object with properties bounds (position and size), text and options
	 */
	LabelEditingProvider.prototype.activate = function(element) {

	  // text
	  var text = getLabel(element);

	  if (text === undefined) {
	    return;
	  }

	  var context = {
	    text: text
	  };

	  // bounds
	  var bounds = this.getEditingBBox(element);

	  assign(context, bounds);

	  var options = {};

	  // tasks
	  if (
	    isAny(element, [
	      'bpmn:Task',
	      'bpmn:Participant',
	      'bpmn:Lane',
	      'bpmn:CallActivity'
	    ]) ||
	    isCollapsedSubProcess(element)
	  ) {
	    assign(options, {
	      centerVertically: true
	    });
	  }

	  // external labels
	  if (isLabelExternal(element)) {
	    assign(options, {
	      autoResize: true
	    });
	  }

	  // text annotations
	  if (is$1(element, 'bpmn:TextAnnotation')) {
	    assign(options, {
	      resizable: true,
	      autoResize: true
	    });
	  }

	  assign(context, {
	    options: options
	  });

	  return context;
	};


	/**
	 * Get the editing bounding box based on the element's size and position
	 *
	 * @param  {djs.model.Base} element
	 *
	 * @return {Object} an object containing information about position
	 *                  and size (fixed or minimum and/or maximum)
	 */
	LabelEditingProvider.prototype.getEditingBBox = function(element) {
	  var canvas = this._canvas;

	  var target = element.label || element;

	  var bbox = canvas.getAbsoluteBBox(target);

	  var mid = {
	    x: bbox.x + bbox.width / 2,
	    y: bbox.y + bbox.height / 2
	  };

	  // default position
	  var bounds = { x: bbox.x, y: bbox.y };

	  var zoom = canvas.zoom();

	  var defaultStyle = this._textRenderer.getDefaultStyle(),
	      externalStyle = this._textRenderer.getExternalStyle();

	  // take zoom into account
	  var externalFontSize = externalStyle.fontSize * zoom,
	      externalLineHeight = externalStyle.lineHeight,
	      defaultFontSize = defaultStyle.fontSize * zoom,
	      defaultLineHeight = defaultStyle.lineHeight;

	  var style = {
	    fontFamily: this._textRenderer.getDefaultStyle().fontFamily,
	    fontWeight: this._textRenderer.getDefaultStyle().fontWeight
	  };

	  // adjust for expanded pools AND lanes
	  if (is$1(element, 'bpmn:Lane') || isExpandedPool(element)) {

	    assign(bounds, {
	      width: bbox.height,
	      height: 30 * zoom,
	      x: bbox.x - bbox.height / 2 + (15 * zoom),
	      y: mid.y - (30 * zoom) / 2
	    });

	    assign(style, {
	      fontSize: defaultFontSize + 'px',
	      lineHeight: defaultLineHeight,
	      paddingTop: (7 * zoom) + 'px',
	      paddingBottom: (7 * zoom) + 'px',
	      paddingLeft: (5 * zoom) + 'px',
	      paddingRight: (5 * zoom) + 'px',
	      transform: 'rotate(-90deg)'
	    });
	  }


	  // internal labels for tasks and collapsed call activities,
	  // sub processes and participants
	  if (isAny(element, [ 'bpmn:Task', 'bpmn:CallActivity']) ||
	      isCollapsedPool(element) ||
	      isCollapsedSubProcess(element)) {

	    assign(bounds, {
	      width: bbox.width,
	      height: bbox.height
	    });

	    assign(style, {
	      fontSize: defaultFontSize + 'px',
	      lineHeight: defaultLineHeight,
	      paddingTop: (7 * zoom) + 'px',
	      paddingBottom: (7 * zoom) + 'px',
	      paddingLeft: (5 * zoom) + 'px',
	      paddingRight: (5 * zoom) + 'px'
	    });
	  }


	  // internal labels for expanded sub processes
	  if (isExpandedSubProcess(element)) {
	    assign(bounds, {
	      width: bbox.width,
	      x: bbox.x
	    });

	    assign(style, {
	      fontSize: defaultFontSize + 'px',
	      lineHeight: defaultLineHeight,
	      paddingTop: (7 * zoom) + 'px',
	      paddingBottom: (7 * zoom) + 'px',
	      paddingLeft: (5 * zoom) + 'px',
	      paddingRight: (5 * zoom) + 'px'
	    });
	  }

	  var width = 90 * zoom,
	      paddingTop = 7 * zoom,
	      paddingBottom = 4 * zoom;

	  // external labels for events, data elements, gateways, groups and connections
	  if (target.labelTarget) {
	    assign(bounds, {
	      width: width,
	      height: bbox.height + paddingTop + paddingBottom,
	      x: mid.x - width / 2,
	      y: bbox.y - paddingTop
	    });

	    assign(style, {
	      fontSize: externalFontSize + 'px',
	      lineHeight: externalLineHeight,
	      paddingTop: paddingTop + 'px',
	      paddingBottom: paddingBottom + 'px'
	    });
	  }

	  // external label not yet created
	  if (isLabelExternal(target)
	      && !hasExternalLabel(target)
	      && !isLabel(target)) {

	    var externalLabelMid = getExternalLabelMid(element);

	    var absoluteBBox = canvas.getAbsoluteBBox({
	      x: externalLabelMid.x,
	      y: externalLabelMid.y,
	      width: 0,
	      height: 0
	    });

	    var height = externalFontSize + paddingTop + paddingBottom;

	    assign(bounds, {
	      width: width,
	      height: height,
	      x: absoluteBBox.x - width / 2,
	      y: absoluteBBox.y - height / 2
	    });

	    assign(style, {
	      fontSize: externalFontSize + 'px',
	      lineHeight: externalLineHeight,
	      paddingTop: paddingTop + 'px',
	      paddingBottom: paddingBottom + 'px'
	    });
	  }

	  // text annotations
	  if (is$1(element, 'bpmn:TextAnnotation')) {
	    assign(bounds, {
	      width: bbox.width,
	      height: bbox.height,
	      minWidth: 30 * zoom,
	      minHeight: 10 * zoom
	    });

	    assign(style, {
	      textAlign: 'left',
	      paddingTop: (5 * zoom) + 'px',
	      paddingBottom: (7 * zoom) + 'px',
	      paddingLeft: (7 * zoom) + 'px',
	      paddingRight: (5 * zoom) + 'px',
	      fontSize: defaultFontSize + 'px',
	      lineHeight: defaultLineHeight
	    });
	  }

	  return { bounds: bounds, style: style };
	};


	LabelEditingProvider.prototype.update = function(
	    element, newLabel,
	    activeContextText, bounds) {

	  var newBounds,
	      bbox;

	  if (is$1(element, 'bpmn:TextAnnotation')) {

	    bbox = this._canvas.getAbsoluteBBox(element);

	    newBounds = {
	      x: element.x,
	      y: element.y,
	      width: element.width / bbox.width * bounds.width,
	      height: element.height / bbox.height * bounds.height
	    };
	  }

	  if (is$1(element, 'bpmn:Group')) {

	    var businessObject = getBusinessObject(element);

	    // initialize categoryValue if not existing
	    if (!businessObject.categoryValueRef) {

	      var rootElement = this._canvas.getRootElement(),
	          definitions = getBusinessObject(rootElement).$parent;

	      var categoryValue = createCategoryValue(definitions, this._bpmnFactory);

	      getBusinessObject(element).categoryValueRef = categoryValue;
	    }

	  }

	  if (isEmptyText(newLabel)) {
	    newLabel = null;
	  }

	  this._modeling.updateLabel(element, newLabel, newBounds);
	};



	// helpers //////////////////////

	function isCollapsedSubProcess(element) {
	  return is$1(element, 'bpmn:SubProcess') && !isExpanded(element);
	}

	function isExpandedSubProcess(element) {
	  return is$1(element, 'bpmn:SubProcess') && isExpanded(element);
	}

	function isCollapsedPool(element) {
	  return is$1(element, 'bpmn:Participant') && !isExpanded(element);
	}

	function isExpandedPool(element) {
	  return is$1(element, 'bpmn:Participant') && isExpanded(element);
	}

	function isEmptyText(label) {
	  return !label || !label.trim();
	}

	var MARKER_HIDDEN = 'djs-element-hidden',
	    MARKER_LABEL_HIDDEN = 'djs-label-hidden';


	function LabelEditingPreview(
	    eventBus, canvas, elementRegistry,
	    pathMap) {

	  var self = this;

	  var defaultLayer = canvas.getDefaultLayer();

	  var element, absoluteElementBBox, gfx;

	  eventBus.on('directEditing.activate', function(context) {
	    var activeProvider = context.active;

	    element = activeProvider.element.label || activeProvider.element;

	    // text annotation
	    if (is$1(element, 'bpmn:TextAnnotation')) {
	      absoluteElementBBox = canvas.getAbsoluteBBox(element);

	      gfx = create('g');

	      var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: element.height,
	        position: {
	          mx: 0.0,
	          my: 0.0
	        }
	      });

	      var path = self.path = create('path');

	      attr$1(path, {
	        d: textPathData,
	        strokeWidth: 2,
	        stroke: getStrokeColor$1(element)
	      });

	      append(gfx, path);

	      append(defaultLayer, gfx);

	      translate(gfx, element.x, element.y);
	    }

	    if (is$1(element, 'bpmn:TextAnnotation') ||
	        element.labelTarget) {
	      canvas.addMarker(element, MARKER_HIDDEN);
	    } else if (is$1(element, 'bpmn:Task') ||
	               is$1(element, 'bpmn:CallActivity') ||
	               is$1(element, 'bpmn:SubProcess') ||
	               is$1(element, 'bpmn:Participant')) {
	      canvas.addMarker(element, MARKER_LABEL_HIDDEN);
	    }
	  });

	  eventBus.on('directEditing.resize', function(context) {

	    // text annotation
	    if (is$1(element, 'bpmn:TextAnnotation')) {
	      var height = context.height,
	          dy = context.dy;

	      var newElementHeight = Math.max(element.height / absoluteElementBBox.height * (height + dy), 0);

	      var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {
	        xScaleFactor: 1,
	        yScaleFactor: 1,
	        containerWidth: element.width,
	        containerHeight: newElementHeight,
	        position: {
	          mx: 0.0,
	          my: 0.0
	        }
	      });

	      attr$1(self.path, {
	        d: textPathData
	      });
	    }
	  });

	  eventBus.on([ 'directEditing.complete', 'directEditing.cancel' ], function(context) {
	    var activeProvider = context.active;

	    if (activeProvider) {
	      canvas.removeMarker(activeProvider.element.label || activeProvider.element, MARKER_HIDDEN);
	      canvas.removeMarker(element, MARKER_LABEL_HIDDEN);
	    }

	    element = undefined;
	    absoluteElementBBox = undefined;

	    if (gfx) {
	      remove$1(gfx);

	      gfx = undefined;
	    }
	  });
	}

	LabelEditingPreview.$inject = [
	  'eventBus',
	  'canvas',
	  'elementRegistry',
	  'pathMap'
	];


	// helpers ///////////////////

	function getStrokeColor$1(element, defaultColor) {
	  var bo = getBusinessObject(element);

	  return bo.di.get('stroke') || defaultColor || 'black';
	}

	var LabelEditingModule = {
	  __depends__: [
	    ChangeSupportModule,
	    ResizeModule,
	    DirectEditingModule
	  ],
	  __init__: [
	    'labelEditingProvider',
	    'labelEditingPreview'
	  ],
	  labelEditingProvider: [ 'type', LabelEditingProvider ],
	  labelEditingPreview: [ 'type', LabelEditingPreview ]
	};

	var ALIGNMENTS = [
	  'top',
	  'bottom',
	  'left',
	  'right'
	];

	var ELEMENT_LABEL_DISTANCE = 10;

	/**
	 * A component that makes sure that external labels are added
	 * together with respective elements and properly updated (DI wise)
	 * during move.
	 *
	 * @param {EventBus} eventBus
	 * @param {Modeling} modeling
	 */
	function AdaptiveLabelPositioningBehavior(eventBus, modeling) {

	  CommandInterceptor.call(this, eventBus);

	  this.postExecuted([
	    'connection.create',
	    'connection.layout',
	    'connection.updateWaypoints'
	  ], function(event) {
	    var context = event.context,
	        connection = context.connection,
	        source = connection.source,
	        target = connection.target,
	        hints = context.hints || {};

	    if (hints.createElementsBehavior !== false) {
	      checkLabelAdjustment(source);
	      checkLabelAdjustment(target);
	    }
	  });


	  this.postExecuted([
	    'label.create'
	  ], function(event) {
	    var context = event.context,
	        shape = context.shape,
	        hints = context.hints || {};

	    if (hints.createElementsBehavior !== false) {
	      checkLabelAdjustment(shape.labelTarget);
	    }
	  });


	  this.postExecuted([
	    'elements.create'
	  ], function(event) {
	    var context = event.context,
	        elements = context.elements,
	        hints = context.hints || {};

	    if (hints.createElementsBehavior !== false) {
	      elements.forEach(function(element) {
	        checkLabelAdjustment(element);
	      });
	    }
	  });

	  function checkLabelAdjustment(element) {

	    // skip non-existing labels
	    if (!hasExternalLabel(element)) {
	      return;
	    }

	    var optimalPosition = getOptimalPosition(element);

	    // no optimal position found
	    if (!optimalPosition) {
	      return;
	    }

	    adjustLabelPosition(element, optimalPosition);
	  }

	  function adjustLabelPosition(element, orientation) {

	    var elementMid = getMid(element),
	        label = element.label,
	        labelMid = getMid(label);

	    // ignore labels that are being created
	    if (!label.parent) {
	      return;
	    }

	    var elementTrbl = asTRBL(element);

	    var newLabelMid;

	    switch (orientation) {
	    case 'top':
	      newLabelMid = {
	        x: elementMid.x,
	        y: elementTrbl.top - ELEMENT_LABEL_DISTANCE - label.height / 2
	      };

	      break;

	    case 'left':

	      newLabelMid = {
	        x: elementTrbl.left - ELEMENT_LABEL_DISTANCE - label.width / 2,
	        y: elementMid.y
	      };

	      break;

	    case 'bottom':

	      newLabelMid = {
	        x: elementMid.x,
	        y: elementTrbl.bottom + ELEMENT_LABEL_DISTANCE + label.height / 2
	      };

	      break;

	    case 'right':

	      newLabelMid = {
	        x: elementTrbl.right + ELEMENT_LABEL_DISTANCE + label.width / 2,
	        y: elementMid.y
	      };

	      break;
	    }

	    var delta$1 = delta(newLabelMid, labelMid);

	    modeling.moveShape(label, delta$1);
	  }

	}

	inherits_browser(AdaptiveLabelPositioningBehavior, CommandInterceptor);

	AdaptiveLabelPositioningBehavior.$inject = [
	  'eventBus',
	  'modeling'
	];


	// helpers //////////////////////

	/**
	 * Return alignments which are taken by a boundary's host element
	 *
	 * @param {Shape} element
	 *
	 * @return {Array<string>}
	 */
	function getTakenHostAlignments(element) {

	  var hostElement = element.host,
	      elementMid = getMid(element),
	      hostOrientation = getOrientation(elementMid, hostElement);

	  var freeAlignments;

	  // check whether there is a multi-orientation, e.g. 'top-left'
	  if (hostOrientation.indexOf('-') >= 0) {
	    freeAlignments = hostOrientation.split('-');
	  } else {
	    freeAlignments = [ hostOrientation ];
	  }

	  var takenAlignments = ALIGNMENTS.filter(function(alignment) {

	    return freeAlignments.indexOf(alignment) === -1;
	  });

	  return takenAlignments;

	}

	/**
	 * Return alignments which are taken by related connections
	 *
	 * @param {Shape} element
	 *
	 * @return {Array<string>}
	 */
	function getTakenConnectionAlignments(element) {

	  var elementMid = getMid(element);

	  var takenAlignments = [].concat(
	    element.incoming.map(function(c) {
	      return c.waypoints[c.waypoints.length - 2 ];
	    }),
	    element.outgoing.map(function(c) {
	      return c.waypoints[1];
	    })
	  ).map(function(point) {
	    return getApproximateOrientation(elementMid, point);
	  });

	  return takenAlignments;
	}

	/**
	 * Return the optimal label position around an element
	 * or _undefined_, if none was found.
	 *
	 * @param  {Shape} element
	 *
	 * @return {string} positioning identifier
	 */
	function getOptimalPosition(element) {

	  var labelMid = getMid(element.label);

	  var elementMid = getMid(element);

	  var labelOrientation = getApproximateOrientation(elementMid, labelMid);

	  if (!isAligned(labelOrientation)) {
	    return;
	  }

	  var takenAlignments = getTakenConnectionAlignments(element);

	  if (element.host) {
	    var takenHostAlignments = getTakenHostAlignments(element);

	    takenAlignments = takenAlignments.concat(takenHostAlignments);
	  }

	  var freeAlignments = ALIGNMENTS.filter(function(alignment) {

	    return takenAlignments.indexOf(alignment) === -1;
	  });

	  // NOTHING TO DO; label already aligned a.O.K.
	  if (freeAlignments.indexOf(labelOrientation) !== -1) {
	    return;
	  }

	  return freeAlignments[0];
	}

	function getApproximateOrientation(p0, p1) {
	  return getOrientation(p1, p0, 5);
	}

	function isAligned(orientation) {
	  return ALIGNMENTS.indexOf(orientation) !== -1;
	}

	function AppendBehavior(eventBus, elementFactory, bpmnRules) {

	  CommandInterceptor.call(this, eventBus);

	  // assign correct shape position unless already set

	  this.preExecute('shape.append', function(context) {

	    var source = context.source,
	        shape = context.shape;

	    if (!context.position) {

	      if (is$1(shape, 'bpmn:TextAnnotation')) {
	        context.position = {
	          x: source.x + source.width / 2 + 75,
	          y: source.y - (50) - shape.height / 2
	        };
	      } else {
	        context.position = {
	          x: source.x + source.width + 80 + shape.width / 2,
	          y: source.y + source.height / 2
	        };
	      }
	    }
	  }, true);
	}

	inherits_browser(AppendBehavior, CommandInterceptor);

	AppendBehavior.$inject = [
	  'eventBus',
	  'elementFactory',
	  'bpmnRules'
	];

	function AssociationBehavior(injector, modeling) {
	  injector.invoke(CommandInterceptor, this);

	  this.postExecute('shape.move', function(context) {
	    var newParent = context.newParent,
	        shape = context.shape;

	    var associations = filter(shape.incoming.concat(shape.outgoing), function(connection) {
	      return is$1(connection, 'bpmn:Association');
	    });

	    forEach(associations, function(association) {
	      modeling.moveConnection(association, { x: 0, y: 0 }, newParent);
	    });
	  }, true);
	}

	inherits_browser(AssociationBehavior, CommandInterceptor);

	AssociationBehavior.$inject = [
	  'injector',
	  'modeling'
	];

	var LOW_PRIORITY$a = 500;


	/**
	 * Replace intermediate event with boundary event when creating or moving results in attached event.
	 */
	function AttachEventBehavior(bpmnReplace, injector) {
	  injector.invoke(CommandInterceptor, this);

	  this._bpmnReplace = bpmnReplace;

	  var self = this;

	  this.postExecuted('elements.create', LOW_PRIORITY$a, function(context) {
	    var elements = context.elements;

	    elements = elements.filter(function(shape) {
	      var host = shape.host;

	      return shouldReplace(shape, host);
	    });

	    if (elements.length !== 1) {
	      return;
	    }

	    elements.map(function(element) {
	      return elements.indexOf(element);
	    }).forEach(function(index) {
	      var host = elements[ index ];

	      context.elements[ index ] = self.replaceShape(elements[ index ], host);
	    });
	  }, true);


	  this.preExecute('elements.move', LOW_PRIORITY$a, function(context) {
	    var shapes = context.shapes,
	        host = context.newHost;

	    if (shapes.length !== 1) {
	      return;
	    }

	    var shape = shapes[0];

	    if (shouldReplace(shape, host)) {
	      context.shapes = [ self.replaceShape(shape, host) ];
	    }
	  }, true);
	}

	AttachEventBehavior.$inject = [
	  'bpmnReplace',
	  'injector'
	];

	inherits_browser(AttachEventBehavior, CommandInterceptor);

	AttachEventBehavior.prototype.replaceShape = function(shape, host) {
	  var eventDefinition = getEventDefinition(shape);

	  var boundaryEvent = {
	    type: 'bpmn:BoundaryEvent',
	    host: host
	  };

	  if (eventDefinition) {
	    boundaryEvent.eventDefinitionType = eventDefinition.$type;
	  }

	  return this._bpmnReplace.replaceElement(shape, boundaryEvent, { layoutConnection: false });
	};


	// helpers //////////

	function getEventDefinition(element) {
	  var businessObject = getBusinessObject(element),
	      eventDefinitions = businessObject.eventDefinitions;

	  return eventDefinitions && eventDefinitions[0];
	}

	function shouldReplace(shape, host) {
	  return !isLabel(shape) &&
	    isAny(shape, [ 'bpmn:IntermediateThrowEvent', 'bpmn:IntermediateCatchEvent' ]) && !!host;
	}

	/**
	 * BPMN specific boundary event behavior
	 */
	function BoundaryEventBehavior(eventBus, modeling) {

	  CommandInterceptor.call(this, eventBus);

	  function getBoundaryEvents(element) {
	    return filter(element.attachers, function(attacher) {
	      return is$1(attacher, 'bpmn:BoundaryEvent');
	    });
	  }

	  // remove after connecting to event-based gateway
	  this.postExecute('connection.create', function(event) {
	    var source = event.context.source,
	        target = event.context.target,
	        boundaryEvents = getBoundaryEvents(target);

	    if (
	      is$1(source, 'bpmn:EventBasedGateway') &&
	      is$1(target, 'bpmn:ReceiveTask') &&
	      boundaryEvents.length > 0
	    ) {
	      modeling.removeElements(boundaryEvents);
	    }

	  });

	  // remove after replacing connected gateway with event-based gateway
	  this.postExecute('connection.reconnect', function(event) {
	    var oldSource = event.context.oldSource,
	        newSource = event.context.newSource;

	    if (is$1(oldSource, 'bpmn:Gateway') &&
	        is$1(newSource, 'bpmn:EventBasedGateway')) {
	      forEach(newSource.outgoing, function(connection) {
	        var target = connection.target,
	            attachedboundaryEvents = getBoundaryEvents(target);

	        if (is$1(target, 'bpmn:ReceiveTask') &&
	            attachedboundaryEvents.length > 0) {
	          modeling.removeElements(attachedboundaryEvents);
	        }
	      });
	    }
	  });
	}

	BoundaryEventBehavior.$inject = [
	  'eventBus',
	  'modeling'
	];

	inherits_browser(BoundaryEventBehavior, CommandInterceptor);

	var LOW_PRIORITY$b = 500;


	/**
	 * Add referenced root elements (error, escalation, message, signal) if they don't exist.
	 * Copy referenced root elements on copy & paste.
	 */
	function RootElementReferenceBehavior(
	    bpmnjs, eventBus, injector, moddleCopy, bpmnFactory
	) {
	  injector.invoke(CommandInterceptor, this);

	  function canHaveRootElementReference(element) {
	    return isAny(element, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ]) ||
	      hasAnyEventDefinition(element, [
	        'bpmn:ErrorEventDefinition',
	        'bpmn:EscalationEventDefinition',
	        'bpmn:MessageEventDefinition',
	        'bpmn:SignalEventDefinition'
	      ]);
	  }

	  function hasRootElement(rootElement) {
	    var definitions = bpmnjs.getDefinitions(),
	        rootElements = definitions.get('rootElements');

	    return !!find(rootElements, matchPattern({ id: rootElement.id }));
	  }

	  function getRootElementReferencePropertyName(eventDefinition) {
	    if (is$1(eventDefinition, 'bpmn:ErrorEventDefinition')) {
	      return 'errorRef';
	    } else if (is$1(eventDefinition, 'bpmn:EscalationEventDefinition')) {
	      return 'escalationRef';
	    } else if (is$1(eventDefinition, 'bpmn:MessageEventDefinition')) {
	      return 'messageRef';
	    } else if (is$1(eventDefinition, 'bpmn:SignalEventDefinition')) {
	      return 'signalRef';
	    }
	  }

	  function getRootElement(businessObject) {
	    if (isAny(businessObject, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ])) {
	      return businessObject.get('messageRef');
	    }

	    var eventDefinitions = businessObject.get('eventDefinitions'),
	        eventDefinition = eventDefinitions[ 0 ];

	    return eventDefinition.get(getRootElementReferencePropertyName(eventDefinition));
	  }

	  function setRootElement(businessObject, rootElement) {
	    if (isAny(businessObject, [ 'bpmn:ReceiveTask', 'bpmn:SendTask' ])) {
	      return businessObject.set('messageRef', rootElement);
	    }

	    var eventDefinitions = businessObject.get('eventDefinitions'),
	        eventDefinition = eventDefinitions[ 0 ];

	    return eventDefinition.set(getRootElementReferencePropertyName(eventDefinition), rootElement);
	  }

	  // create shape
	  this.executed('shape.create', function(context) {
	    var shape = context.shape;

	    if (!canHaveRootElementReference(shape)) {
	      return;
	    }

	    var businessObject = getBusinessObject(shape),
	        rootElement = getRootElement(businessObject),
	        rootElements;

	    if (rootElement && !hasRootElement(rootElement)) {
	      rootElements = bpmnjs.getDefinitions().get('rootElements');

	      // add root element
	      add$1(rootElements, rootElement);

	      context.addedRootElement = rootElement;
	    }
	  }, true);

	  this.reverted('shape.create', function(context) {
	    var addedRootElement = context.addedRootElement;

	    if (!addedRootElement) {
	      return;
	    }

	    var rootElements = bpmnjs.getDefinitions().get('rootElements');

	    // remove root element
	    remove$2(rootElements, addedRootElement);
	  }, true);

	  eventBus.on('copyPaste.copyElement', function(context) {
	    var descriptor = context.descriptor,
	        element = context.element;

	    if (!canHaveRootElementReference(element)) {
	      return;
	    }

	    var businessObject = getBusinessObject(element),
	        rootElement = getRootElement(businessObject);

	    if (rootElement) {
	      descriptor.referencedRootElement = rootElement;
	    }
	  });

	  eventBus.on('copyPaste.pasteElement', LOW_PRIORITY$b, function(context) {
	    var descriptor = context.descriptor,
	        businessObject = descriptor.businessObject;

	    if (!canHaveRootElementReference(businessObject)) {
	      return;
	    }

	    var referencedRootElement = descriptor.referencedRootElement;

	    if (!referencedRootElement) {
	      return;
	    }

	    if (!hasRootElement(referencedRootElement)) {
	      referencedRootElement = moddleCopy.copyElement(
	        referencedRootElement,
	        bpmnFactory.create(referencedRootElement.$type)
	      );
	    }

	    setRootElement(businessObject, referencedRootElement);
	  });
	}

	RootElementReferenceBehavior.$inject = [
	  'bpmnjs',
	  'eventBus',
	  'injector',
	  'moddleCopy',
	  'bpmnFactory'
	];

	inherits_browser(RootElementReferenceBehavior, CommandInterceptor);

	// helpers //////////

	function hasAnyEventDefinition(element, types) {
	  if (!isArray(types)) {
	    types = [ types ];
	  }

	  return some(types, function(type) {
	    return hasEventDefinition(element, type);
	  });
	}

	function CreateBehavior(injector) {
	  injector.invoke(CommandInterceptor, this);

	  this.preExecute('shape.create', 1500, function(event) {
	    var context = event.context,
	        parent = context.parent,
	        shape = context.shape;

	    if (is$1(parent, 'bpmn:Lane') && !is$1(shape, 'bpmn:Lane')) {
	      context.parent = getParent$1(parent, 'bpmn:Participant');
	    }
	  });

	}


	CreateBehavior.$inject = [ 'injector' ];

	inherits_browser(CreateBehavior, CommandInterceptor);

	var HIGH_PRIORITY$7 = 1500;
	var HIGHEST_PRIORITY = 2000;


	/**
	 * Correct hover targets in certain situations to improve diagram interaction.
	 *
	 * @param {ElementRegistry} elementRegistry
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 */
	function FixHoverBehavior(elementRegistry, eventBus, canvas) {

	  eventBus.on([
	    'create.hover',
	    'create.move',
	    'create.out',
	    'create.end',
	    'shape.move.hover',
	    'shape.move.move',
	    'shape.move.out',
	    'shape.move.end'
	  ], HIGH_PRIORITY$7, function(event) {
	    var context = event.context,
	        shape = context.shape || event.shape,
	        hover = event.hover;

	    // ensure elements are not dropped onto a bpmn:Lane but onto
	    // the underlying bpmn:Participant
	    if (is$1(hover, 'bpmn:Lane') && !isAny(shape, [ 'bpmn:Lane', 'bpmn:Participant' ])) {
	      event.hover = getLanesRoot(hover);
	      event.hoverGfx = elementRegistry.getGraphics(event.hover);
	    }

	    var rootElement = canvas.getRootElement();

	    // ensure bpmn:Group and label elements are dropped
	    // always onto the root
	    if (hover !== rootElement && (shape.labelTarget || is$1(shape, 'bpmn:Group'))) {
	      event.hover = rootElement;
	      event.hoverGfx = elementRegistry.getGraphics(event.hover);
	    }
	  });

	  eventBus.on([
	    'connect.hover',
	    'connect.out',
	    'connect.end',
	    'connect.cleanup',
	    'global-connect.hover',
	    'global-connect.out',
	    'global-connect.end',
	    'global-connect.cleanup'
	  ], HIGH_PRIORITY$7, function(event) {
	    var hover = event.hover;

	    // ensure connections start/end on bpmn:Participant,
	    // not the underlying bpmn:Lane
	    if (is$1(hover, 'bpmn:Lane')) {
	      event.hover = getLanesRoot(hover) || hover;
	      event.hoverGfx = elementRegistry.getGraphics(event.hover);
	    }
	  });


	  eventBus.on([
	    'bendpoint.move.hover'
	  ], HIGH_PRIORITY$7, function(event) {
	    var context = event.context,
	        hover = event.hover,
	        type = context.type;

	    // ensure reconnect start/end on bpmn:Participant,
	    // not the underlying bpmn:Lane
	    if (is$1(hover, 'bpmn:Lane') && /reconnect/.test(type)) {
	      event.hover = getLanesRoot(hover) || hover;
	      event.hoverGfx = elementRegistry.getGraphics(event.hover);
	    }
	  });


	  eventBus.on([
	    'connect.start'
	  ], HIGH_PRIORITY$7, function(event) {
	    var context = event.context,
	        start = context.start;

	    // ensure connect start on bpmn:Participant,
	    // not the underlying bpmn:Lane
	    if (is$1(start, 'bpmn:Lane')) {
	      context.start = getLanesRoot(start) || start;
	    }
	  });


	  // allow movement of participants from lanes
	  eventBus.on('shape.move.start', HIGHEST_PRIORITY, function(event) {
	    var shape = event.shape;

	    if (is$1(shape, 'bpmn:Lane')) {
	      event.shape = getLanesRoot(shape) || shape;
	    }
	  });

	}

	FixHoverBehavior.$inject = [
	  'elementRegistry',
	  'eventBus',
	  'canvas'
	];

	/**
	 * BPMN specific create data object behavior
	 */
	function CreateDataObjectBehavior(eventBus, bpmnFactory, moddle) {

	  CommandInterceptor.call(this, eventBus);

	  this.preExecute('shape.create', function(event) {

	    var context = event.context,
	        shape = context.shape;

	    if (is$1(shape, 'bpmn:DataObjectReference') && shape.type !== 'label') {

	      // create a DataObject every time a DataObjectReference is created
	      var dataObject = bpmnFactory.create('bpmn:DataObject');

	      // set the reference to the DataObject
	      shape.businessObject.dataObjectRef = dataObject;
	    }
	  });

	}

	CreateDataObjectBehavior.$inject = [
	  'eventBus',
	  'bpmnFactory',
	  'moddle'
	];

	inherits_browser(CreateDataObjectBehavior, CommandInterceptor);

	var HORIZONTAL_PARTICIPANT_PADDING = 20,
	    VERTICAL_PARTICIPANT_PADDING = 20;

	var PARTICIPANT_BORDER_WIDTH = 30;

	var HIGH_PRIORITY$8 = 2000;


	/**
	 * BPMN-specific behavior for creating participants.
	 */
	function CreateParticipantBehavior$1(canvas, eventBus, modeling) {
	  CommandInterceptor.call(this, eventBus);

	  // fit participant
	  eventBus.on([
	    'create.start',
	    'shape.move.start'
	  ], HIGH_PRIORITY$8, function(event) {
	    var context = event.context,
	        shape = context.shape,
	        rootElement = canvas.getRootElement();

	    if (!is$1(shape, 'bpmn:Participant') ||
	      !is$1(rootElement, 'bpmn:Process') ||
	      !rootElement.children.length) {
	      return;
	    }

	    // ignore connections, groups and labels
	    var children = rootElement.children.filter(function(element) {
	      return !is$1(element, 'bpmn:Group') &&
	        !isLabel(element) &&
	        !isConnection$2(element);
	    });

	    // ensure for available children to calculate bounds
	    if (!children.length) {
	      return;
	    }

	    var childrenBBox = getBBox(children);

	    var participantBounds = getParticipantBounds(shape, childrenBBox);

	    // assign width and height
	    assign(shape, participantBounds);

	    // assign create constraints
	    context.createConstraints = getParticipantCreateConstraints(shape, childrenBBox);
	  });

	  // force hovering process when creating first participant
	  eventBus.on('create.start', HIGH_PRIORITY$8, function(event) {
	    var context = event.context,
	        shape = context.shape,
	        rootElement = canvas.getRootElement(),
	        rootElementGfx = canvas.getGraphics(rootElement);

	    function ensureHoveringProcess(event) {
	      event.element = rootElement;
	      event.gfx = rootElementGfx;
	    }

	    if (is$1(shape, 'bpmn:Participant') && is$1(rootElement, 'bpmn:Process')) {
	      eventBus.on('element.hover', HIGH_PRIORITY$8, ensureHoveringProcess);

	      eventBus.once('create.cleanup', function() {
	        eventBus.off('element.hover', ensureHoveringProcess);
	      });
	    }
	  });

	  function ensureCollaboration(context) {
	    var parent = context.parent,
	        collaboration;

	    var rootElement = canvas.getRootElement();

	    if (is$1(rootElement, 'bpmn:Collaboration')) {
	      collaboration = rootElement;
	    } else {

	      // update root element by making collaboration
	      collaboration = modeling.makeCollaboration();

	      // re-use process when creating first participant
	      context.process = parent;
	    }

	    context.parent = collaboration;
	  }

	  // turn process into collaboration before adding participant
	  this.preExecute('shape.create', function(context) {
	    var parent = context.parent,
	        shape = context.shape;

	    if (is$1(shape, 'bpmn:Participant') && is$1(parent, 'bpmn:Process')) {
	      ensureCollaboration(context);
	    }
	  }, true);

	  this.execute('shape.create', function(context) {
	    var process = context.process,
	        shape = context.shape;

	    if (process) {
	      context.oldProcessRef = shape.businessObject.processRef;

	      // re-use process when creating first participant
	      shape.businessObject.processRef = process.businessObject;
	    }
	  }, true);

	  this.revert('shape.create', function(context) {
	    var process = context.process,
	        shape = context.shape;

	    if (process) {

	      // re-use process when creating first participant
	      shape.businessObject.processRef = context.oldProcessRef;
	    }
	  }, true);

	  this.postExecute('shape.create', function(context) {
	    var process = context.process,
	        shape = context.shape;

	    if (process) {

	      // move children from process to participant
	      var processChildren = process.children.slice();

	      modeling.moveElements(processChildren, { x: 0, y: 0 }, shape);
	    }

	  }, true);

	  // turn process into collaboration when creating participants
	  this.preExecute('elements.create', HIGH_PRIORITY$8, function(context) {
	    var elements = context.elements,
	        parent = context.parent,
	        participant;

	    var hasParticipants = findParticipant(elements);

	    if (hasParticipants && is$1(parent, 'bpmn:Process')) {
	      ensureCollaboration(context);

	      participant = findParticipant(elements);

	      context.oldProcessRef = participant.businessObject.processRef;

	      // re-use process when creating first participant
	      participant.businessObject.processRef = parent.businessObject;
	    }
	  }, true);

	  this.revert('elements.create', function(context) {
	    var elements = context.elements,
	        process = context.process,
	        participant;

	    if (process) {
	      participant = findParticipant(elements);

	      // re-use process when creating first participant
	      participant.businessObject.processRef = context.oldProcessRef;
	    }
	  }, true);

	  this.postExecute('elements.create', function(context) {
	    var elements = context.elements,
	        process = context.process,
	        participant;

	    if (process) {
	      participant = findParticipant(elements);

	      // move children from process to first participant
	      var processChildren = process.children.slice();

	      modeling.moveElements(processChildren, { x: 0, y: 0 }, participant);
	    }

	  }, true);

	}

	CreateParticipantBehavior$1.$inject = [
	  'canvas',
	  'eventBus',
	  'modeling'
	];

	inherits_browser(CreateParticipantBehavior$1, CommandInterceptor);

	// helpers //////////

	function getParticipantBounds(shape, childrenBBox) {
	  childrenBBox = {
	    width: childrenBBox.width + HORIZONTAL_PARTICIPANT_PADDING * 2 + PARTICIPANT_BORDER_WIDTH,
	    height: childrenBBox.height + VERTICAL_PARTICIPANT_PADDING * 2
	  };

	  var width = Math.max(shape.width, childrenBBox.width),
	      height = Math.max(shape.height, childrenBBox.height);

	  return {
	    x: -width / 2,
	    y: -height / 2,
	    width: width,
	    height: height
	  };
	}

	function getParticipantCreateConstraints(shape, childrenBBox) {
	  childrenBBox = asTRBL(childrenBBox);

	  return {
	    bottom: childrenBBox.top + shape.height / 2 - VERTICAL_PARTICIPANT_PADDING,
	    left: childrenBBox.right - shape.width / 2 + HORIZONTAL_PARTICIPANT_PADDING,
	    top: childrenBBox.bottom - shape.height / 2 + VERTICAL_PARTICIPANT_PADDING,
	    right: childrenBBox.left + shape.width / 2 - HORIZONTAL_PARTICIPANT_PADDING - PARTICIPANT_BORDER_WIDTH
	  };
	}

	function isConnection$2(element) {
	  return !!element.waypoints;
	}

	function findParticipant(elements) {
	  return find(elements, function(element) {
	    return is$1(element, 'bpmn:Participant');
	  });
	}

	var TARGET_REF_PLACEHOLDER_NAME = '__targetRef_placeholder';


	/**
	 * This behavior makes sure we always set a fake
	 * DataInputAssociation#targetRef as demanded by the BPMN 2.0
	 * XSD schema.
	 *
	 * The reference is set to a bpmn:Property{ name: '__targetRef_placeholder' }
	 * which is created on the fly and cleaned up afterwards if not needed
	 * anymore.
	 *
	 * @param {EventBus} eventBus
	 * @param {BpmnFactory} bpmnFactory
	 */
	function DataInputAssociationBehavior(eventBus, bpmnFactory) {

	  CommandInterceptor.call(this, eventBus);


	  this.executed([
	    'connection.create',
	    'connection.delete',
	    'connection.move',
	    'connection.reconnect'
	  ], ifDataInputAssociation(fixTargetRef));

	  this.reverted([
	    'connection.create',
	    'connection.delete',
	    'connection.move',
	    'connection.reconnect'
	  ], ifDataInputAssociation(fixTargetRef));


	  function usesTargetRef(element, targetRef, removedConnection) {

	    var inputAssociations = element.get('dataInputAssociations');

	    return find(inputAssociations, function(association) {
	      return association !== removedConnection &&
	             association.targetRef === targetRef;
	    });
	  }

	  function getTargetRef(element, create) {

	    var properties = element.get('properties');

	    var targetRefProp = find(properties, function(p) {
	      return p.name === TARGET_REF_PLACEHOLDER_NAME;
	    });

	    if (!targetRefProp && create) {
	      targetRefProp = bpmnFactory.create('bpmn:Property', {
	        name: TARGET_REF_PLACEHOLDER_NAME
	      });

	      add$1(properties, targetRefProp);
	    }

	    return targetRefProp;
	  }

	  function cleanupTargetRef(element, connection) {

	    var targetRefProp = getTargetRef(element);

	    if (!targetRefProp) {
	      return;
	    }

	    if (!usesTargetRef(element, targetRefProp, connection)) {
	      remove$2(element.get('properties'), targetRefProp);
	    }
	  }

	  /**
	   * Make sure targetRef is set to a valid property or
	   * `null` if the connection is detached.
	   *
	   * @param {Event} event
	   */
	  function fixTargetRef(event) {

	    var context = event.context,
	        connection = context.connection,
	        connectionBo = connection.businessObject,
	        target = connection.target,
	        targetBo = target && target.businessObject,
	        newTarget = context.newTarget,
	        newTargetBo = newTarget && newTarget.businessObject,
	        oldTarget = context.oldTarget || context.target,
	        oldTargetBo = oldTarget && oldTarget.businessObject;

	    var dataAssociation = connection.businessObject,
	        targetRefProp;

	    if (oldTargetBo && oldTargetBo !== targetBo) {
	      cleanupTargetRef(oldTargetBo, connectionBo);
	    }

	    if (newTargetBo && newTargetBo !== targetBo) {
	      cleanupTargetRef(newTargetBo, connectionBo);
	    }

	    if (targetBo) {
	      targetRefProp = getTargetRef(targetBo, true);
	      dataAssociation.targetRef = targetRefProp;
	    } else {
	      dataAssociation.targetRef = null;
	    }
	  }
	}

	DataInputAssociationBehavior.$inject = [
	  'eventBus',
	  'bpmnFactory'
	];

	inherits_browser(DataInputAssociationBehavior, CommandInterceptor);


	/**
	 * Only call the given function when the event
	 * touches a bpmn:DataInputAssociation.
	 *
	 * @param {Function} fn
	 * @return {Function}
	 */
	function ifDataInputAssociation(fn) {

	  return function(event) {
	    var context = event.context,
	        connection = context.connection;

	    if (is$1(connection, 'bpmn:DataInputAssociation')) {
	      return fn(event);
	    }
	  };
	}

	function UpdateSemanticParentHandler(bpmnUpdater) {
	  this._bpmnUpdater = bpmnUpdater;
	}

	UpdateSemanticParentHandler.$inject = [ 'bpmnUpdater' ];


	UpdateSemanticParentHandler.prototype.execute = function(context) {
	  var dataStoreBo = context.dataStoreBo,
	      newSemanticParent = context.newSemanticParent,
	      newDiParent = context.newDiParent;

	  context.oldSemanticParent = dataStoreBo.$parent;
	  context.oldDiParent = dataStoreBo.di.$parent;

	  // update semantic parent
	  this._bpmnUpdater.updateSemanticParent(dataStoreBo, newSemanticParent);

	  // update DI parent
	  this._bpmnUpdater.updateDiParent(dataStoreBo.di, newDiParent);
	};

	UpdateSemanticParentHandler.prototype.revert = function(context) {
	  var dataStoreBo = context.dataStoreBo,
	      oldSemanticParent = context.oldSemanticParent,
	      oldDiParent = context.oldDiParent;

	  // update semantic parent
	  this._bpmnUpdater.updateSemanticParent(dataStoreBo, oldSemanticParent);

	  // update DI parent
	  this._bpmnUpdater.updateDiParent(dataStoreBo.di, oldDiParent);
	};

	/**
	 * BPMN specific data store behavior
	 */
	function DataStoreBehavior(
	    canvas, commandStack, elementRegistry,
	    eventBus) {

	  CommandInterceptor.call(this, eventBus);

	  commandStack.registerHandler('dataStore.updateContainment', UpdateSemanticParentHandler);

	  function getFirstParticipant() {
	    return elementRegistry.filter(function(element) {
	      return is$1(element, 'bpmn:Participant');
	    })[0];
	  }

	  function getDataStores(element) {
	    return element.children.filter(function(child) {
	      return is$1(child, 'bpmn:DataStoreReference') && !child.labelTarget;
	    });
	  }

	  function updateDataStoreParent(dataStore, newDataStoreParent) {
	    var dataStoreBo = dataStore.businessObject || dataStore;

	    newDataStoreParent = newDataStoreParent || getFirstParticipant();

	    if (newDataStoreParent) {
	      var newDataStoreParentBo = newDataStoreParent.businessObject || newDataStoreParent;

	      commandStack.execute('dataStore.updateContainment', {
	        dataStoreBo: dataStoreBo,
	        newSemanticParent: newDataStoreParentBo.processRef || newDataStoreParentBo,
	        newDiParent: newDataStoreParentBo.di
	      });
	    }
	  }


	  // disable auto-resize for data stores
	  this.preExecute('shape.create', function(event) {

	    var context = event.context,
	        shape = context.shape;

	    if (is$1(shape, 'bpmn:DataStoreReference') &&
	        shape.type !== 'label') {

	      if (!context.hints) {
	        context.hints = {};
	      }

	      // prevent auto resizing
	      context.hints.autoResize = false;
	    }
	  });


	  // disable auto-resize for data stores
	  this.preExecute('elements.move', function(event) {
	    var context = event.context,
	        shapes = context.shapes;

	    var dataStoreReferences = shapes.filter(function(shape) {
	      return is$1(shape, 'bpmn:DataStoreReference');
	    });

	    if (dataStoreReferences.length) {
	      if (!context.hints) {
	        context.hints = {};
	      }

	      // prevent auto resizing for data store references
	      context.hints.autoResize = shapes.filter(function(shape) {
	        return !is$1(shape, 'bpmn:DataStoreReference');
	      });
	    }
	  });


	  // update parent on data store created
	  this.postExecute('shape.create', function(event) {
	    var context = event.context,
	        shape = context.shape,
	        parent = shape.parent;


	    if (is$1(shape, 'bpmn:DataStoreReference') &&
	        shape.type !== 'label' &&
	        is$1(parent, 'bpmn:Collaboration')) {

	      updateDataStoreParent(shape);
	    }
	  });


	  // update parent on data store moved
	  this.postExecute('shape.move', function(event) {
	    var context = event.context,
	        shape = context.shape,
	        oldParent = context.oldParent,
	        parent = shape.parent;

	    if (is$1(oldParent, 'bpmn:Collaboration')) {

	      // do nothing if not necessary
	      return;
	    }

	    if (is$1(shape, 'bpmn:DataStoreReference') &&
	        shape.type !== 'label' &&
	        is$1(parent, 'bpmn:Collaboration')) {

	      var participant = is$1(oldParent, 'bpmn:Participant') ?
	        oldParent :
	        getAncestor(oldParent, 'bpmn:Participant');

	      updateDataStoreParent(shape, participant);
	    }
	  });


	  // update data store parents on participant or subprocess deleted
	  this.postExecute('shape.delete', function(event) {
	    var context = event.context,
	        shape = context.shape,
	        rootElement = canvas.getRootElement();

	    if (isAny(shape, [ 'bpmn:Participant', 'bpmn:SubProcess' ])
	        && is$1(rootElement, 'bpmn:Collaboration')) {
	      getDataStores(rootElement)
	        .filter(function(dataStore) {
	          return isDescendant(dataStore, shape);
	        })
	        .forEach(function(dataStore) {
	          updateDataStoreParent(dataStore);
	        });
	    }
	  });

	  // update data store parents on collaboration -> process
	  this.postExecute('canvas.updateRoot', function(event) {
	    var context = event.context,
	        oldRoot = context.oldRoot,
	        newRoot = context.newRoot;

	    var dataStores = getDataStores(oldRoot);

	    dataStores.forEach(function(dataStore) {

	      if (is$1(newRoot, 'bpmn:Process')) {
	        updateDataStoreParent(dataStore, newRoot);
	      }

	    });
	  });
	}

	DataStoreBehavior.$inject = [
	  'canvas',
	  'commandStack',
	  'elementRegistry',
	  'eventBus',
	];

	inherits_browser(DataStoreBehavior, CommandInterceptor);


	// helpers //////////

	function isDescendant(descendant, ancestor) {
	  var descendantBo = descendant.businessObject || descendant,
	      ancestorBo = ancestor.businessObject || ancestor;

	  while (descendantBo.$parent) {
	    if (descendantBo.$parent === ancestorBo.processRef || ancestorBo) {
	      return true;
	    }

	    descendantBo = descendantBo.$parent;
	  }

	  return false;
	}

	function getAncestor(element, type) {

	  while (element.parent) {
	    if (is$1(element.parent, type)) {
	      return element.parent;
	    }

	    element = element.parent;
	  }
	}

	var LOW_PRIORITY$c = 500;


	/**
	 * BPMN specific delete lane behavior
	 */
	function DeleteLaneBehavior(eventBus, modeling, spaceTool) {

	  CommandInterceptor.call(this, eventBus);


	  function compensateLaneDelete(shape, oldParent) {

	    var siblings = getChildLanes(oldParent);

	    var topAffected = [];
	    var bottomAffected = [];

	    eachElement(siblings, function(element) {

	      if (element.y > shape.y) {
	        bottomAffected.push(element);
	      } else {
	        topAffected.push(element);
	      }

	      return element.children;
	    });

	    if (!siblings.length) {
	      return;
	    }

	    var offset;

	    if (bottomAffected.length && topAffected.length) {
	      offset = shape.height / 2;
	    } else {
	      offset = shape.height;
	    }

	    var topAdjustments,
	        bottomAdjustments;

	    if (topAffected.length) {
	      topAdjustments = spaceTool.calculateAdjustments(
	        topAffected, 'y', offset, shape.y - 10);

	      spaceTool.makeSpace(
	        topAdjustments.movingShapes,
	        topAdjustments.resizingShapes,
	        { x: 0, y: offset }, 's');
	    }

	    if (bottomAffected.length) {
	      bottomAdjustments = spaceTool.calculateAdjustments(
	        bottomAffected, 'y', -offset, shape.y + shape.height + 10);

	      spaceTool.makeSpace(
	        bottomAdjustments.movingShapes,
	        bottomAdjustments.resizingShapes,
	        { x: 0, y: -offset }, 'n');
	    }
	  }


	  /**
	   * Adjust sizes of other lanes after lane deletion
	   */
	  this.postExecuted('shape.delete', LOW_PRIORITY$c, function(event) {

	    var context = event.context,
	        hints = context.hints,
	        shape = context.shape,
	        oldParent = context.oldParent;

	    // only compensate lane deletes
	    if (!is$1(shape, 'bpmn:Lane')) {
	      return;
	    }

	    // compensate root deletes only
	    if (hints && hints.nested) {
	      return;
	    }

	    compensateLaneDelete(shape, oldParent);
	  });
	}

	DeleteLaneBehavior.$inject = [
	  'eventBus',
	  'modeling',
	  'spaceTool'
	];

	inherits_browser(DeleteLaneBehavior, CommandInterceptor);

	var LOW_PRIORITY$d = 500;


	/**
	 * Replace boundary event with intermediate event when creating or moving results in detached event.
	 */
	function DetachEventBehavior(bpmnReplace, injector) {
	  injector.invoke(CommandInterceptor, this);

	  this._bpmnReplace = bpmnReplace;

	  var self = this;

	  this.postExecuted('elements.create', LOW_PRIORITY$d, function(context) {
	    var elements = context.elements;

	    elements.filter(function(shape) {
	      var host = shape.host;

	      return shouldReplace$1(shape, host);
	    }).map(function(shape) {
	      return elements.indexOf(shape);
	    }).forEach(function(index) {
	      context.elements[ index ] = self.replaceShape(elements[ index ]);
	    });
	  }, true);

	  this.preExecute('elements.move', LOW_PRIORITY$d, function(context) {
	    var shapes = context.shapes,
	        newHost = context.newHost;

	    shapes.forEach(function(shape, index) {
	      var host = shape.host;

	      if (shouldReplace$1(shape, includes(shapes, host) ? host : newHost)) {
	        shapes[ index ] = self.replaceShape(shape);
	      }
	    });
	  }, true);
	}

	DetachEventBehavior.$inject = [
	  'bpmnReplace',
	  'injector'
	];

	inherits_browser(DetachEventBehavior, CommandInterceptor);

	DetachEventBehavior.prototype.replaceShape = function(shape) {
	  var eventDefinition = getEventDefinition$1(shape),
	      intermediateEvent;

	  if (eventDefinition) {
	    intermediateEvent = {
	      type: 'bpmn:IntermediateCatchEvent',
	      eventDefinitionType: eventDefinition.$type
	    };
	  } else {
	    intermediateEvent = {
	      type: 'bpmn:IntermediateThrowEvent'
	    };
	  }

	  return this._bpmnReplace.replaceElement(shape, intermediateEvent, { layoutConnection: false });
	};


	// helpers //////////

	function getEventDefinition$1(element) {
	  var businessObject = getBusinessObject(element),
	      eventDefinitions = businessObject.eventDefinitions;

	  return eventDefinitions && eventDefinitions[0];
	}

	function shouldReplace$1(shape, host) {
	  return !isLabel(shape) && is$1(shape, 'bpmn:BoundaryEvent') && !host;
	}

	function includes(array, item) {
	  return array.indexOf(item) !== -1;
	}

	function DropOnFlowBehavior(eventBus, bpmnRules, modeling) {

	  CommandInterceptor.call(this, eventBus);

	  /**
	   * Reconnect start / end of a connection after
	   * dropping an element on a flow.
	   */

	  function insertShape(shape, targetFlow, positionOrBounds) {
	    var waypoints = targetFlow.waypoints,
	        waypointsBefore,
	        waypointsAfter,
	        dockingPoint,
	        source,
	        target,
	        incomingConnection,
	        outgoingConnection,
	        oldOutgoing = shape.outgoing.slice(),
	        oldIncoming = shape.incoming.slice();

	    var mid;

	    if (isNumber(positionOrBounds.width)) {
	      mid = getMid(positionOrBounds);
	    } else {
	      mid = positionOrBounds;
	    }

	    var intersection = getApproxIntersection(waypoints, mid);

	    if (intersection) {
	      waypointsBefore = waypoints.slice(0, intersection.index);
	      waypointsAfter = waypoints.slice(intersection.index + (intersection.bendpoint ? 1 : 0));

	      // due to inaccuracy intersection might have been found
	      if (!waypointsBefore.length || !waypointsAfter.length) {
	        return;
	      }

	      dockingPoint = intersection.bendpoint ? waypoints[intersection.index] : mid;

	      // if last waypointBefore is inside shape's bounds, ignore docking point
	      if (!isPointInsideBBox$2(shape, waypointsBefore[waypointsBefore.length-1])) {
	        waypointsBefore.push(copy(dockingPoint));
	      }

	      // if first waypointAfter is inside shape's bounds, ignore docking point
	      if (!isPointInsideBBox$2(shape, waypointsAfter[0])) {
	        waypointsAfter.unshift(copy(dockingPoint));
	      }
	    }

	    source = targetFlow.source;
	    target = targetFlow.target;

	    if (bpmnRules.canConnect(source, shape, targetFlow)) {

	      // reconnect source -> inserted shape
	      modeling.reconnectEnd(targetFlow, shape, waypointsBefore || mid);

	      incomingConnection = targetFlow;
	    }

	    if (bpmnRules.canConnect(shape, target, targetFlow)) {

	      if (!incomingConnection) {

	        // reconnect inserted shape -> end
	        modeling.reconnectStart(targetFlow, shape, waypointsAfter || mid);

	        outgoingConnection = targetFlow;
	      } else {
	        outgoingConnection = modeling.connect(
	          shape, target, { type: targetFlow.type, waypoints: waypointsAfter }
	        );
	      }
	    }

	    var duplicateConnections = [].concat(

	      incomingConnection && filter(oldIncoming, function(connection) {
	        return connection.source === incomingConnection.source;
	      }) || [],

	      outgoingConnection && filter(oldOutgoing, function(connection) {
	        return connection.target === outgoingConnection.target;
	      }) || []
	    );

	    if (duplicateConnections.length) {
	      modeling.removeElements(duplicateConnections);
	    }
	  }

	  this.preExecute('elements.move', function(context) {

	    var newParent = context.newParent,
	        shapes = context.shapes,
	        delta = context.delta,
	        shape = shapes[0];

	    if (!shape || !newParent) {
	      return;
	    }

	    // if the new parent is a connection,
	    // change it to the new parent's parent
	    if (newParent && newParent.waypoints) {
	      context.newParent = newParent = newParent.parent;
	    }

	    var shapeMid = getMid(shape);
	    var newShapeMid = {
	      x: shapeMid.x + delta.x,
	      y: shapeMid.y + delta.y
	    };

	    // find a connection which intersects with the
	    // element's mid point
	    var connection = find(newParent.children, function(element) {
	      var canInsert = bpmnRules.canInsert(shapes, element);

	      return canInsert && getApproxIntersection(element.waypoints, newShapeMid);
	    });

	    if (connection) {
	      context.targetFlow = connection;
	      context.position = newShapeMid;
	    }

	  }, true);

	  this.postExecuted('elements.move', function(context) {

	    var shapes = context.shapes,
	        targetFlow = context.targetFlow,
	        position = context.position;

	    if (targetFlow) {
	      insertShape(shapes[0], targetFlow, position);
	    }

	  }, true);

	  this.preExecute('shape.create', function(context) {

	    var parent = context.parent,
	        shape = context.shape;

	    if (bpmnRules.canInsert(shape, parent)) {
	      context.targetFlow = parent;
	      context.parent = parent.parent;
	    }
	  }, true);

	  this.postExecuted('shape.create', function(context) {

	    var shape = context.shape,
	        targetFlow = context.targetFlow,
	        positionOrBounds = context.position;

	    if (targetFlow) {
	      insertShape(shape, targetFlow, positionOrBounds);
	    }
	  }, true);
	}

	inherits_browser(DropOnFlowBehavior, CommandInterceptor);

	DropOnFlowBehavior.$inject = [
	  'eventBus',
	  'bpmnRules',
	  'modeling'
	];


	// helpers /////////////////////

	function isPointInsideBBox$2(bbox, point) {
	  var x = point.x,
	      y = point.y;

	  return x >= bbox.x &&
	    x <= bbox.x + bbox.width &&
	    y >= bbox.y &&
	    y <= bbox.y + bbox.height;
	}

	function copy(obj) {
	  return assign({}, obj);
	}

	function EventBasedGatewayBehavior(eventBus, modeling) {

	  CommandInterceptor.call(this, eventBus);

	  /**
	   * Remove existing sequence flows of event-based target before connecting
	   * from event-based gateway.
	   */
	  this.preExecuted('connection.create', function(event) {

	    var context = event.context,
	        source = context.source,
	        target = context.target,
	        existingIncomingConnections = target.incoming.slice();

	    if (context.hints && context.hints.createElementsBehavior === false) {
	      return;
	    }

	    if (
	      is$1(source, 'bpmn:EventBasedGateway') &&
	      target.incoming.length
	    ) {

	      existingIncomingConnections.filter(isSequenceFlow)
	        .forEach(function(sequenceFlow) {
	          modeling.removeConnection(sequenceFlow);
	        });
	    }
	  });

	  /**
	   *  After replacing shape with event-based gateway, remove incoming sequence
	   *  flows of event-based targets which do not belong to event-based gateway
	   *  source.
	   */
	  this.preExecuted('shape.replace', function(event) {

	    var newShape = event.context.newShape,
	        newShapeTargets,
	        newShapeTargetsIncomingSequenceFlows;

	    if (!is$1(newShape, 'bpmn:EventBasedGateway')) {
	      return;
	    }

	    newShapeTargets = newShape.outgoing.filter(isSequenceFlow)
	      .map(function(sequenceFlow) {
	        return sequenceFlow.target;
	      });

	    newShapeTargetsIncomingSequenceFlows = newShapeTargets.reduce(function(sequenceFlows, target) {
	      var incomingSequenceFlows = target.incoming.filter(isSequenceFlow);

	      return sequenceFlows.concat(incomingSequenceFlows);
	    }, []);

	    newShapeTargetsIncomingSequenceFlows.forEach(function(sequenceFlow) {
	      if (sequenceFlow.source !== newShape) {
	        modeling.removeConnection(sequenceFlow);
	      }
	    });
	  });
	}

	EventBasedGatewayBehavior.$inject = [
	  'eventBus',
	  'modeling'
	];

	inherits_browser(EventBasedGatewayBehavior, CommandInterceptor);



	// helpers //////////////////////

	function isSequenceFlow(connection) {
	  return is$1(connection, 'bpmn:SequenceFlow');
	}

	var HIGH_PRIORITY$9 = 2000;


	/**
	 * BPMN specific Group behavior
	 */
	function GroupBehavior(
	    bpmnFactory,
	    canvas,
	    elementRegistry,
	    eventBus,
	    injector,
	    moddleCopy
	) {
	  injector.invoke(CommandInterceptor, this);

	  /**
	   * Gets process definitions
	   *
	   * @return {ModdleElement} definitions
	   */
	  function getDefinitions() {
	    var rootElement = canvas.getRootElement(),
	        businessObject = getBusinessObject(rootElement);

	    return businessObject.$parent;
	  }

	  /**
	   * Removes a referenced category value for a given group shape
	   *
	   * @param {djs.model.Shape} shape
	   */
	  function removeReferencedCategoryValue(shape) {

	    var businessObject = getBusinessObject(shape),
	        categoryValue = businessObject.categoryValueRef;

	    if (!categoryValue) {
	      return;
	    }

	    var category = categoryValue.$parent;

	    if (!categoryValue) {
	      return;
	    }

	    remove$2(category.categoryValue, categoryValue);

	    // cleanup category if it is empty
	    if (category && !category.categoryValue.length) {
	      removeCategory(category);
	    }
	  }

	  /**
	   * Removes a given category from the definitions
	   *
	   * @param {ModdleElement} category
	   */
	  function removeCategory(category) {

	    var definitions = getDefinitions();

	    remove$2(definitions.get('rootElements'), category);
	  }

	  /**
	   * Returns all group element in the current registry
	   *
	   * @return {Array<djs.model.shape>} a list of group shapes
	   */
	  function getGroupElements() {
	    return elementRegistry.filter(function(e) {
	      return is$1(e, 'bpmn:Group');
	    });
	  }

	  /**
	   * Returns true if given categoryValue is referenced in one of the given elements
	   *
	   * @param {Array<djs.model.shape>} elements
	   * @param {ModdleElement} categoryValue
	   * @return {boolean}
	   */
	  function isReferenced(elements, categoryValue) {
	    return elements.some(function(e) {

	      var businessObject = getBusinessObject(e);

	      return businessObject.categoryValueRef
	        && businessObject.categoryValueRef === categoryValue;
	    });
	  }

	  /**
	   * remove referenced category + value when group was deleted
	   */
	  this.executed('shape.delete', function(event) {

	    var context = event.context,
	        shape = context.shape;

	    if (is$1(shape, 'bpmn:Group')) {

	      var businessObject = getBusinessObject(shape),
	          categoryValueRef = businessObject.categoryValueRef,
	          groupElements = getGroupElements();

	      if (!isReferenced(groupElements, categoryValueRef)) {
	        removeReferencedCategoryValue(shape);
	      }
	    }
	  });

	  /**
	   * re-attach removed category
	   */
	  this.reverted('shape.delete', function(event) {

	    var context = event.context,
	        shape = context.shape;

	    if (is$1(shape, 'bpmn:Group')) {

	      var businessObject = getBusinessObject(shape),
	          categoryValueRef = businessObject.categoryValueRef,
	          definitions = getDefinitions(),
	          category = categoryValueRef ? categoryValueRef.$parent : null;

	      add$1(category.get('categoryValue'), categoryValueRef);
	      add$1(definitions.get('rootElements'), category);
	    }
	  });

	  /**
	   * create new category + value when group was created
	   */
	  this.execute('shape.create', function(event) {
	    var context = event.context,
	        shape = context.shape,
	        businessObject = getBusinessObject(shape);

	    if (is$1(businessObject, 'bpmn:Group') && !businessObject.categoryValueRef) {

	      var definitions = getDefinitions(),
	          categoryValue = createCategoryValue(definitions, bpmnFactory);

	      // link the reference to the Group
	      businessObject.categoryValueRef = categoryValue;
	    }
	  });


	  this.revert('shape.create', function(event) {

	    var context = event.context,
	        shape = context.shape;

	    if (is$1(shape, 'bpmn:Group')) {
	      removeReferencedCategoryValue(shape);

	      delete getBusinessObject(shape).categoryValueRef;

	    }
	  });

	  // copy bpmn:CategoryValue when copying element
	  eventBus.on('moddleCopy.canCopyProperty', HIGH_PRIORITY$9, function(context) {
	    var property = context.property,
	        categoryValue;

	    if (is$1(property, 'bpmn:CategoryValue')) {
	      categoryValue = createCategoryValue(getDefinitions(), bpmnFactory);

	      // return copy of category
	      return moddleCopy.copyElement(property, categoryValue);
	    }
	  });

	}

	GroupBehavior.$inject = [
	  'bpmnFactory',
	  'canvas',
	  'elementRegistry',
	  'eventBus',
	  'injector',
	  'moddleCopy'
	];

	inherits_browser(GroupBehavior, CommandInterceptor);

	/**
	 * Returns the intersection between two line segments a and b.
	 *
	 * @param {Point} l1s
	 * @param {Point} l1e
	 * @param {Point} l2s
	 * @param {Point} l2e
	 *
	 * @return {Point}
	 */
	function lineIntersect(l1s, l1e, l2s, l2e) {

	  // if the lines intersect, the result contains the x and y of the
	  // intersection (treating the lines as infinite) and booleans for
	  // whether line segment 1 or line segment 2 contain the point
	  var denominator, a, b, c, numerator;

	  denominator = ((l2e.y - l2s.y) * (l1e.x - l1s.x)) - ((l2e.x - l2s.x) * (l1e.y - l1s.y));

	  if (denominator == 0) {
	    return null;
	  }

	  a = l1s.y - l2s.y;
	  b = l1s.x - l2s.x;
	  numerator = ((l2e.x - l2s.x) * a) - ((l2e.y - l2s.y) * b);

	  c = numerator / denominator;

	  // if we cast these lines infinitely in
	  // both directions, they intersect here
	  return {
	    x: Math.round(l1s.x + (c * (l1e.x - l1s.x))),
	    y: Math.round(l1s.y + (c * (l1e.y - l1s.y)))
	  };
	}

	/**
	 * Fix broken dockings after DI imports.
	 *
	 * @param {EventBus} eventBus
	 */
	function ImportDockingFix(eventBus) {

	  function adjustDocking(startPoint, nextPoint, elementMid) {

	    var elementTop = {
	      x: elementMid.x,
	      y: elementMid.y - 50
	    };

	    var elementLeft = {
	      x: elementMid.x - 50,
	      y: elementMid.y
	    };

	    var verticalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementTop),
	        horizontalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementLeft);

	    // original is horizontal or vertical center cross intersection
	    var centerIntersect;

	    if (verticalIntersect && horizontalIntersect) {
	      if (getDistance(verticalIntersect, elementMid) > getDistance(horizontalIntersect, elementMid)) {
	        centerIntersect = horizontalIntersect;
	      } else {
	        centerIntersect = verticalIntersect;
	      }
	    } else {
	      centerIntersect = verticalIntersect || horizontalIntersect;
	    }

	    startPoint.original = centerIntersect;
	  }

	  function fixDockings(connection) {
	    var waypoints = connection.waypoints;

	    adjustDocking(
	      waypoints[0],
	      waypoints[1],
	      getMid(connection.source)
	    );

	    adjustDocking(
	      waypoints[waypoints.length - 1],
	      waypoints[waypoints.length - 2],
	      getMid(connection.target)
	    );
	  }

	  eventBus.on('bpmnElement.added', function(e) {

	    var element = e.element;

	    if (element.waypoints) {
	      fixDockings(element);
	    }
	  });
	}

	ImportDockingFix.$inject = [
	  'eventBus'
	];


	// helpers //////////////////////

	function getDistance(p1, p2) {
	  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
	}

	/**
	 * A component that makes sure that each created or updated
	 * Pool and Lane is assigned an isHorizontal property set to true.
	 *
	 * @param {EventBus} eventBus
	 */
	function IsHorizontalFix(eventBus) {

	  CommandInterceptor.call(this, eventBus);

	  var elementTypesToUpdate = [
	    'bpmn:Participant',
	    'bpmn:Lane'
	  ];

	  this.executed([ 'shape.move', 'shape.create', 'shape.resize' ], function(event) {
	    var bo = getBusinessObject(event.context.shape);

	    if (isAny(bo, elementTypesToUpdate) && !bo.di.get('isHorizontal')) {

	      // set attribute directly to avoid modeling#updateProperty side effects
	      bo.di.set('isHorizontal', true);
	    }
	  });

	}

	IsHorizontalFix.$inject = [ 'eventBus' ];

	inherits_browser(IsHorizontalFix, CommandInterceptor);

	/**
	 * Returns the length of a vector
	 *
	 * @param {Vector}
	 * @return {Float}
	 */
	function vectorLength(v) {
	  return Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2));
	}


	/**
	 * Calculates the angle between a line a the yAxis
	 *
	 * @param {Array}
	 * @return {Float}
	 */
	function getAngle(line) {

	  // return value is between 0, 180 and -180, -0
	  // @janstuemmel: maybe replace return a/b with b/a
	  return Math.atan((line[1].y - line[0].y) / (line[1].x - line[0].x));
	}


	/**
	 * Rotates a vector by a given angle
	 *
	 * @param {Vector}
	 * @param {Float} Angle in radians
	 * @return {Vector}
	 */
	function rotateVector(vector, angle) {
	  return (!angle) ? vector : {
	    x: Math.cos(angle) * vector.x - Math.sin(angle) * vector.y,
	    y: Math.sin(angle) * vector.x + Math.cos(angle) * vector.y
	  };
	}


	/**
	 * Solves a 2D equation system
	 * a + r*b = c, where a,b,c are 2D vectors
	 *
	 * @param {Vector}
	 * @param {Vector}
	 * @param {Vector}
	 * @return {Float}
	 */
	function solveLambaSystem(a, b, c) {

	  // the 2d system
	  var system = [
	    { n: a[0] - c[0], lambda: b[0] },
	    { n: a[1] - c[1], lambda: b[1] }
	  ];

	  // solve
	  var n = system[0].n * b[0] + system[1].n * b[1],
	      l = system[0].lambda * b[0] + system[1].lambda * b[1];

	  return -n/l;
	}


	/**
	 * Position of perpendicular foot
	 *
	 * @param {Point}
	 * @param [ {Point}, {Point} ] line defined through two points
	 * @return {Point} the perpendicular foot position
	 */
	function perpendicularFoot(point, line) {

	  var a = line[0], b = line[1];

	  // relative position of b from a
	  var bd = { x: b.x - a.x, y: b.y - a.y };

	  // solve equation system to the parametrized vectors param real value
	  var r = solveLambaSystem([ a.x, a.y ], [ bd.x, bd.y ], [ point.x, point.y ]);

	  return { x: a.x + r*bd.x, y: a.y + r*bd.y };
	}


	/**
	 * Calculates the distance between a point and a line
	 *
	 * @param {Point}
	 * @param [ {Point}, {Point} ] line defined through two points
	 * @return {Float} distance
	 */
	function getDistancePointLine(point, line) {

	  var pfPoint = perpendicularFoot(point, line);

	  // distance vector
	  var connectionVector = {
	    x: pfPoint.x - point.x,
	    y: pfPoint.y - point.y
	  };

	  return vectorLength(connectionVector);
	}


	/**
	 * Calculates the distance between two points
	 *
	 * @param {Point}
	 * @param {Point}
	 * @return {Float} distance
	 */
	function getDistancePointPoint(point1, point2) {

	  return vectorLength({
	    x: point1.x - point2.x,
	    y: point1.y - point2.y
	  });
	}

	var sqrt = Math.sqrt,
	    min$2 = Math.min,
	    max$3 = Math.max,
	    abs$4 = Math.abs;

	/**
	 * Calculate the square (power to two) of a number.
	 *
	 * @param {number} n
	 *
	 * @return {number}
	 */
	function sq(n) {
	  return Math.pow(n, 2);
	}

	/**
	 * Get distance between two points.
	 *
	 * @param {Point} p1
	 * @param {Point} p2
	 *
	 * @return {number}
	 */
	function getDistance$1(p1, p2) {
	  return sqrt(sq(p1.x - p2.x) + sq(p1.y - p2.y));
	}

	/**
	 * Return the attachment of the given point on the specified line.
	 *
	 * The attachment is either a bendpoint (attached to the given point)
	 * or segment (attached to a location on a line segment) attachment:
	 *
	 * ```javascript
	 * var pointAttachment = {
	 *   type: 'bendpoint',
	 *   bendpointIndex: 3,
	 *   position: { x: 10, y: 10 } // the attach point on the line
	 * };
	 *
	 * var segmentAttachment = {
	 *   type: 'segment',
	 *   segmentIndex: 2,
	 *   relativeLocation: 0.31, // attach point location between 0 (at start) and 1 (at end)
	 *   position: { x: 10, y: 10 } // the attach point on the line
	 * };
	 * ```
	 *
	 * @param {Point} point
	 * @param {Array<Point>} line
	 *
	 * @return {Object} attachment
	 */
	function getAttachment(point, line) {

	  var idx = 0,
	      segmentStart,
	      segmentEnd,
	      segmentStartDistance,
	      segmentEndDistance,
	      attachmentPosition,
	      minDistance,
	      intersections,
	      attachment,
	      attachmentDistance,
	      closestAttachmentDistance,
	      closestAttachment;

	  for (idx = 0; idx < line.length - 1; idx++) {

	    segmentStart = line[idx];
	    segmentEnd = line[idx + 1];

	    if (pointsEqual(segmentStart, segmentEnd)) {
	      intersections = [ segmentStart ];
	    } else {
	      segmentStartDistance = getDistance$1(point, segmentStart);
	      segmentEndDistance = getDistance$1(point, segmentEnd);

	      minDistance = min$2(segmentStartDistance, segmentEndDistance);

	      intersections = getCircleSegmentIntersections(segmentStart, segmentEnd, point, minDistance);
	    }

	    if (intersections.length < 1) {
	      throw new Error('expected between [1, 2] circle -> line intersections');
	    }

	    // one intersection -> bendpoint attachment
	    if (intersections.length === 1) {
	      attachment = {
	        type: 'bendpoint',
	        position: intersections[0],
	        segmentIndex: idx,
	        bendpointIndex: pointsEqual(segmentStart, intersections[0]) ? idx : idx + 1
	      };
	    }

	    // two intersections -> segment attachment
	    if (intersections.length === 2) {

	      attachmentPosition = mid$1(intersections[0], intersections[1]);

	      attachment = {
	        type: 'segment',
	        position: attachmentPosition,
	        segmentIndex: idx,
	        relativeLocation: getDistance$1(segmentStart, attachmentPosition) / getDistance$1(segmentStart, segmentEnd)
	      };
	    }

	    attachmentDistance = getDistance$1(attachment.position, point);

	    if (!closestAttachment || closestAttachmentDistance > attachmentDistance) {
	      closestAttachment = attachment;
	      closestAttachmentDistance = attachmentDistance;
	    }
	  }

	  return closestAttachment;
	}

	/**
	 * Gets the intersection between a circle and a line segment.
	 *
	 * @param {Point} s1 segment start
	 * @param {Point} s2 segment end
	 * @param {Point} cc circle center
	 * @param {number} cr circle radius
	 *
	 * @return {Array<Point>} intersections
	 */
	function getCircleSegmentIntersections(s1, s2, cc, cr) {

	  var baX = s2.x - s1.x;
	  var baY = s2.y - s1.y;
	  var caX = cc.x - s1.x;
	  var caY = cc.y - s1.y;

	  var a = baX * baX + baY * baY;
	  var bBy2 = baX * caX + baY * caY;
	  var c = caX * caX + caY * caY - cr * cr;

	  var pBy2 = bBy2 / a;
	  var q = c / a;

	  var disc = pBy2 * pBy2 - q;

	  // check against negative value to work around
	  // negative, very close to zero results (-4e-15)
	  // being produced in some environments
	  if (disc < 0 && disc > -0.000001) {
	    disc = 0;
	  }

	  if (disc < 0) {
	    return [];
	  }

	  // if disc == 0 ... dealt with later
	  var tmpSqrt = sqrt(disc);
	  var abScalingFactor1 = -pBy2 + tmpSqrt;
	  var abScalingFactor2 = -pBy2 - tmpSqrt;

	  var i1 = {
	    x: s1.x - baX * abScalingFactor1,
	    y: s1.y - baY * abScalingFactor1
	  };

	  if (disc === 0) { // abScalingFactor1 == abScalingFactor2
	    return [ i1 ];
	  }

	  var i2 = {
	    x: s1.x - baX * abScalingFactor2,
	    y: s1.y - baY * abScalingFactor2
	  };

	  // return only points on line segment
	  return [ i1, i2 ].filter(function(p) {
	    return isPointInSegment(p, s1, s2);
	  });
	}


	function isPointInSegment(p, segmentStart, segmentEnd) {
	  return (
	    fenced(p.x, segmentStart.x, segmentEnd.x) &&
	    fenced(p.y, segmentStart.y, segmentEnd.y)
	  );
	}

	function fenced(n, rangeStart, rangeEnd) {

	  // use matching threshold to work around
	  // precision errors in intersection computation

	  return (
	    n >= min$2(rangeStart, rangeEnd) - EQUAL_THRESHOLD &&
	    n <= max$3(rangeStart, rangeEnd) + EQUAL_THRESHOLD
	  );
	}

	/**
	 * Calculate mid of two points.
	 *
	 * @param {Point} p1
	 * @param {Point} p2
	 *
	 * @return {Point}
	 */
	function mid$1(p1, p2) {

	  return {
	    x: (p1.x + p2.x) / 2,
	    y: (p1.y + p2.y) / 2
	  };
	}

	var EQUAL_THRESHOLD = 0.1;

	function pointsEqual(p1, p2) {

	  return (
	    abs$4(p1.x - p2.x) <= EQUAL_THRESHOLD &&
	    abs$4(p1.y - p2.y) <= EQUAL_THRESHOLD
	  );
	}

	function findNewLabelLineStartIndex(oldWaypoints, newWaypoints, attachment, hints) {

	  var index = attachment.segmentIndex;

	  var offset = newWaypoints.length - oldWaypoints.length;

	  // segmentMove happened
	  if (hints.segmentMove) {

	    var oldSegmentStartIndex = hints.segmentMove.segmentStartIndex,
	        newSegmentStartIndex = hints.segmentMove.newSegmentStartIndex;

	    // if label was on moved segment return new segment index
	    if (index === oldSegmentStartIndex) {
	      return newSegmentStartIndex;
	    }

	    // label is after new segment index
	    if (index >= newSegmentStartIndex) {
	      return (index+offset < newSegmentStartIndex) ? newSegmentStartIndex : index+offset;
	    }

	    // if label is before new segment index
	    return index;
	  }

	  // bendpointMove happened
	  if (hints.bendpointMove) {

	    var insert = hints.bendpointMove.insert,
	        bendpointIndex = hints.bendpointMove.bendpointIndex,
	        newIndex;

	    // waypoints length didnt change
	    if (offset === 0) {
	      return index;
	    }

	    // label behind new/removed bendpoint
	    if (index >= bendpointIndex) {
	      newIndex = insert ? index + 1 : index - 1;
	    }

	    // label before new/removed bendpoint
	    if (index < bendpointIndex) {

	      newIndex = index;

	      // decide label should take right or left segment
	      if (insert && attachment.type !== 'bendpoint' && bendpointIndex-1 === index) {

	        var rel = relativePositionMidWaypoint(newWaypoints, bendpointIndex);

	        if (rel < attachment.relativeLocation) {
	          newIndex++;
	        }
	      }
	    }

	    return newIndex;
	  }

	  // start/end changed
	  if (offset === 0) {
	    return index;
	  }

	  if (hints.connectionStart) {
	    return (index === 0) ? 0 : null;
	  }

	  if (hints.connectionEnd) {
	    return (index === oldWaypoints.length - 2) ? newWaypoints.length - 2 : null;
	  }

	  // if nothing fits, return null
	  return null;
	}


	/**
	 * Calculate the required adjustment (move delta) for the given label
	 * after the connection waypoints got updated.
	 *
	 * @param {djs.model.Label} label
	 * @param {Array<Point>} newWaypoints
	 * @param {Array<Point>} oldWaypoints
	 * @param {Object} hints
	 *
	 * @return {Point} delta
	 */
	function getLabelAdjustment(label, newWaypoints, oldWaypoints, hints) {

	  var x = 0,
	      y = 0;

	  var labelPosition = getLabelMid(label);

	  // get closest attachment
	  var attachment = getAttachment(labelPosition, oldWaypoints),
	      oldLabelLineIndex = attachment.segmentIndex,
	      newLabelLineIndex = findNewLabelLineStartIndex(oldWaypoints, newWaypoints, attachment, hints);

	  if (newLabelLineIndex === null) {
	    return { x: x, y: y };
	  }

	  // should never happen
	  // TODO(@janstuemmel): throw an error here when connectionSegmentMove is refactored
	  if (newLabelLineIndex < 0 ||
	      newLabelLineIndex > newWaypoints.length - 2) {
	    return { x: x, y: y };
	  }

	  var oldLabelLine = getLine(oldWaypoints, oldLabelLineIndex),
	      newLabelLine = getLine(newWaypoints, newLabelLineIndex),
	      oldFoot = attachment.position;

	  var relativeFootPosition = getRelativeFootPosition(oldLabelLine, oldFoot),
	      angleDelta = getAngleDelta(oldLabelLine, newLabelLine);

	  // special rule if label on bendpoint
	  if (attachment.type === 'bendpoint') {

	    var offset = newWaypoints.length - oldWaypoints.length,
	        oldBendpointIndex = attachment.bendpointIndex,
	        oldBendpoint = oldWaypoints[oldBendpointIndex];

	    // bendpoint position hasn't changed, return same position
	    if (newWaypoints.indexOf(oldBendpoint) !== -1) {
	      return { x: x, y: y };
	    }

	    // new bendpoint and old bendpoint have same index, then just return the offset
	    if (offset === 0) {
	      var newBendpoint = newWaypoints[oldBendpointIndex];

	      return {
	        x: newBendpoint.x - attachment.position.x,
	        y: newBendpoint.y - attachment.position.y
	      };
	    }

	    // if bendpoints get removed
	    if (offset < 0 && oldBendpointIndex !== 0 && oldBendpointIndex < oldWaypoints.length - 1) {
	      relativeFootPosition = relativePositionMidWaypoint(oldWaypoints, oldBendpointIndex);
	    }
	  }

	  var newFoot = {
	    x: (newLabelLine[1].x - newLabelLine[0].x) * relativeFootPosition + newLabelLine[0].x,
	    y: (newLabelLine[1].y - newLabelLine[0].y) * relativeFootPosition + newLabelLine[0].y
	  };

	  // the rotated vector to label
	  var newLabelVector = rotateVector({
	    x: labelPosition.x - oldFoot.x,
	    y: labelPosition.y - oldFoot.y
	  }, angleDelta);

	  // the new relative position
	  x = newFoot.x + newLabelVector.x - labelPosition.x;
	  y = newFoot.y + newLabelVector.y - labelPosition.y;

	  return roundPoint({
	    x: x,
	    y: y
	  });
	}


	// HELPERS //////////////////////

	function relativePositionMidWaypoint(waypoints, idx) {

	  var distanceSegment1 = getDistancePointPoint(waypoints[idx-1], waypoints[idx]),
	      distanceSegment2 = getDistancePointPoint(waypoints[idx], waypoints[idx+1]);

	  var relativePosition = distanceSegment1 / (distanceSegment1 + distanceSegment2);

	  return relativePosition;
	}

	function getLabelMid(label) {
	  return {
	    x: label.x + label.width / 2,
	    y: label.y + label.height / 2
	  };
	}

	function getAngleDelta(l1, l2) {
	  var a1 = getAngle(l1),
	      a2 = getAngle(l2);
	  return a2 - a1;
	}

	function getLine(waypoints, idx) {
	  return [ waypoints[idx], waypoints[idx+1] ];
	}

	function getRelativeFootPosition(line, foot) {

	  var length = getDistancePointPoint(line[0], line[1]),
	      lengthToFoot = getDistancePointPoint(line[0], foot);

	  return length === 0 ? 0 : lengthToFoot / length;
	}

	/**
	 * Calculates the absolute point relative to the new element's position
	 *
	 * @param {point} point [absolute]
	 * @param {bounds} oldBounds
	 * @param {bounds} newBounds
	 *
	 * @return {point} point [absolute]
	 */
	function getNewAttachPoint(point, oldBounds, newBounds) {
	  var oldCenter = center(oldBounds),
	      newCenter = center(newBounds),
	      oldDelta = delta(point, oldCenter);

	  var newDelta = {
	    x: oldDelta.x * (newBounds.width / oldBounds.width),
	    y: oldDelta.y * (newBounds.height / oldBounds.height)
	  };

	  return roundPoint({
	    x: newCenter.x + newDelta.x,
	    y: newCenter.y + newDelta.y
	  });
	}


	/**
	 * Calculates the shape's delta relative to a new position
	 * of a certain element's bounds
	 *
	 * @param {djs.model.Shape} point [absolute]
	 * @param {bounds} oldBounds
	 * @param {bounds} newBounds
	 *
	 * @return {delta} delta
	 */
	function getNewAttachShapeDelta(shape, oldBounds, newBounds) {
	  var shapeCenter = center(shape),
	      oldCenter = center(oldBounds),
	      newCenter = center(newBounds),
	      shapeDelta = delta(shape, shapeCenter),
	      oldCenterDelta = delta(shapeCenter, oldCenter),
	      stickyPositionDelta = getStickyPositionDelta(shapeCenter, oldBounds, newBounds);

	  if (stickyPositionDelta) {
	    return stickyPositionDelta;
	  }

	  var newCenterDelta = {
	    x: oldCenterDelta.x * (newBounds.width / oldBounds.width),
	    y: oldCenterDelta.y * (newBounds.height / oldBounds.height)
	  };

	  var newShapeCenter = {
	    x: newCenter.x + newCenterDelta.x,
	    y: newCenter.y + newCenterDelta.y
	  };

	  return roundPoint({
	    x: newShapeCenter.x + shapeDelta.x - shape.x,
	    y: newShapeCenter.y + shapeDelta.y - shape.y
	  });
	}

	function getStickyPositionDelta(oldShapeCenter, oldBounds, newBounds) {
	  var oldTRBL = asTRBL(oldBounds),
	      newTRBL = asTRBL(newBounds);

	  if (isMoved(oldTRBL, newTRBL)) {
	    return null;
	  }

	  var oldOrientation = getOrientation(oldBounds, oldShapeCenter),
	      stickyPositionDelta,
	      newShapeCenter,
	      newOrientation;

	  if (oldOrientation === 'top') {
	    stickyPositionDelta = {
	      x: 0,
	      y: newTRBL.bottom - oldTRBL.bottom
	    };
	  } else if (oldOrientation === 'bottom') {
	    stickyPositionDelta = {
	      x: 0,
	      y: newTRBL.top - oldTRBL.top
	    };
	  } else if (oldOrientation === 'right') {
	    stickyPositionDelta = {
	      x: newTRBL.left - oldTRBL.left,
	      y: 0
	    };
	  } else if (oldOrientation === 'left') {
	    stickyPositionDelta = {
	      x: newTRBL.right - oldTRBL.right,
	      y: 0
	    };
	  } else {

	    // fallback to proportional movement for corner-placed attachments
	    return null;
	  }

	  newShapeCenter = {
	    x: oldShapeCenter.x + stickyPositionDelta.x,
	    y: oldShapeCenter.y + stickyPositionDelta.y
	  };

	  newOrientation = getOrientation(newBounds, newShapeCenter);

	  if (newOrientation !== oldOrientation) {

	    // fallback to proportional movement if orientation would otherwise change
	    return null;
	  }

	  return stickyPositionDelta;
	}

	function isMoved(oldTRBL, newTRBL) {
	  return isHorizontallyMoved(oldTRBL, newTRBL) || isVerticallyMoved(oldTRBL, newTRBL);
	}

	function isHorizontallyMoved(oldTRBL, newTRBL) {
	  return oldTRBL.right !== newTRBL.right && oldTRBL.left !== newTRBL.left;
	}

	function isVerticallyMoved(oldTRBL, newTRBL) {
	  return oldTRBL.top !== newTRBL.top && oldTRBL.bottom !== newTRBL.bottom;
	}

	var DEFAULT_LABEL_DIMENSIONS = {
	  width: 90,
	  height: 20
	};

	var NAME_PROPERTY = 'name';
	var TEXT_PROPERTY = 'text';

	/**
	 * A component that makes sure that external labels are added
	 * together with respective elements and properly updated (DI wise)
	 * during move.
	 *
	 * @param {EventBus} eventBus
	 * @param {Modeling} modeling
	 * @param {BpmnFactory} bpmnFactory
	 * @param {TextRenderer} textRenderer
	 */
	function LabelBehavior(
	    eventBus, modeling, bpmnFactory,
	    textRenderer) {

	  CommandInterceptor.call(this, eventBus);

	  // update label if name property was updated
	  this.postExecute('element.updateProperties', function(e) {
	    var context = e.context,
	        element = context.element,
	        properties = context.properties;

	    if (NAME_PROPERTY in properties) {
	      modeling.updateLabel(element, properties[NAME_PROPERTY]);
	    }

	    if (TEXT_PROPERTY in properties
	        && is$1(element, 'bpmn:TextAnnotation')) {

	      var newBounds = textRenderer.getTextAnnotationBounds(
	        {
	          x: element.x,
	          y: element.y,
	          width: element.width,
	          height: element.height
	        },
	        properties[TEXT_PROPERTY] || ''
	      );

	      modeling.updateLabel(element, properties.text, newBounds);
	    }
	  });

	  // create label shape after shape/connection was created
	  this.postExecute([ 'shape.create', 'connection.create' ], function(e) {
	    var context = e.context,
	        hints = context.hints || {};

	    if (hints.createElementsBehavior === false) {
	      return;
	    }

	    var element = context.shape || context.connection,
	        businessObject = element.businessObject;

	    if (isLabel(element) || !isLabelExternal(element)) {
	      return;
	    }

	    // only create label if attribute available
	    if (!getLabel(element)) {
	      return;
	    }

	    var labelCenter = getExternalLabelMid(element);

	    // we don't care about x and y
	    var labelDimensions = textRenderer.getExternalLabelBounds(
	      DEFAULT_LABEL_DIMENSIONS,
	      getLabel(element)
	    );

	    modeling.createLabel(element, labelCenter, {
	      id: businessObject.id + '_label',
	      businessObject: businessObject,
	      width: labelDimensions.width,
	      height: labelDimensions.height
	    });
	  });

	  // update label after label shape was deleted
	  this.postExecute('shape.delete', function(event) {
	    var context = event.context,
	        labelTarget = context.labelTarget,
	        hints = context.hints || {};

	    // check if label
	    if (labelTarget && hints.unsetLabel !== false) {
	      modeling.updateLabel(labelTarget, null, null, { removeShape: false });
	    }
	  });

	  // update di information on label creation
	  this.postExecute([ 'label.create' ], function(event) {

	    var context = event.context,
	        element = context.shape,
	        businessObject,
	        di;

	    // we want to trigger on real labels only
	    if (!element.labelTarget) {
	      return;
	    }

	    // we want to trigger on BPMN elements only
	    if (!is$1(element.labelTarget || element, 'bpmn:BaseElement')) {
	      return;
	    }

	    businessObject = element.businessObject,
	    di = businessObject.di;


	    if (!di.label) {
	      di.label = bpmnFactory.create('bpmndi:BPMNLabel', {
	        bounds: bpmnFactory.create('dc:Bounds')
	      });
	    }

	    assign(di.label.bounds, {
	      x: element.x,
	      y: element.y,
	      width: element.width,
	      height: element.height
	    });
	  });

	  function getVisibleLabelAdjustment(event) {

	    var context = event.context,
	        connection = context.connection,
	        label = connection.label,
	        hints = assign({}, context.hints),
	        newWaypoints = context.newWaypoints || connection.waypoints,
	        oldWaypoints = context.oldWaypoints;


	    if (typeof hints.startChanged === 'undefined') {
	      hints.startChanged = !!hints.connectionStart;
	    }

	    if (typeof hints.endChanged === 'undefined') {
	      hints.endChanged = !!hints.connectionEnd;
	    }

	    return getLabelAdjustment(label, newWaypoints, oldWaypoints, hints);
	  }

	  this.postExecute([
	    'connection.layout',
	    'connection.updateWaypoints'
	  ], function(event) {
	    var context = event.context,
	        hints = context.hints || {};

	    if (hints.labelBehavior === false) {
	      return;
	    }

	    var connection = context.connection,
	        label = connection.label,
	        labelAdjustment;

	    // handle missing label as well as the case
	    // that the label parent does not exist (yet),
	    // because it is being pasted / created via multi element create
	    //
	    // Cf. https://github.com/bpmn-io/bpmn-js/pull/1227
	    if (!label || !label.parent) {
	      return;
	    }

	    labelAdjustment = getVisibleLabelAdjustment(event);

	    modeling.moveShape(label, labelAdjustment);
	  });


	  // keep label position on shape replace
	  this.postExecute([ 'shape.replace' ], function(event) {
	    var context = event.context,
	        newShape = context.newShape,
	        oldShape = context.oldShape;

	    var businessObject = getBusinessObject(newShape);

	    if (businessObject
	      && isLabelExternal(businessObject)
	      && oldShape.label
	      && newShape.label) {
	      newShape.label.x = oldShape.label.x;
	      newShape.label.y = oldShape.label.y;
	    }
	  });


	  // move external label after resizing
	  this.postExecute('shape.resize', function(event) {

	    var context = event.context,
	        shape = context.shape,
	        newBounds = context.newBounds,
	        oldBounds = context.oldBounds;

	    if (hasExternalLabel(shape)) {

	      var label = shape.label,
	          labelMid = getMid(label),
	          edges = asEdges(oldBounds);

	      // get nearest border point to label as reference point
	      var referencePoint = getReferencePoint$1(labelMid, edges);

	      var delta = getReferencePointDelta(referencePoint, oldBounds, newBounds);

	      modeling.moveShape(label, delta);

	    }

	  });

	}

	inherits_browser(LabelBehavior, CommandInterceptor);

	LabelBehavior.$inject = [
	  'eventBus',
	  'modeling',
	  'bpmnFactory',
	  'textRenderer'
	];

	// helpers //////////////////////

	/**
	 * Calculates a reference point delta relative to a new position
	 * of a certain element's bounds
	 *
	 * @param {Point} point
	 * @param {Bounds} oldBounds
	 * @param {Bounds} newBounds
	 *
	 * @return {Delta} delta
	 */
	function getReferencePointDelta(referencePoint, oldBounds, newBounds) {

	  var newReferencePoint = getNewAttachPoint(referencePoint, oldBounds, newBounds);

	  return roundPoint(delta(newReferencePoint, referencePoint));
	}

	/**
	 * Generates the nearest point (reference point) for a given point
	 * onto given set of lines
	 *
	 * @param {Array<Point, Point>} lines
	 * @param {Point} point
	 *
	 * @param {Point}
	 */
	function getReferencePoint$1(point, lines) {

	  if (!lines.length) {
	    return;
	  }

	  var nearestLine = getNearestLine(point, lines);

	  return perpendicularFoot(point, nearestLine);
	}

	/**
	 * Convert the given bounds to a lines array containing all edges
	 *
	 * @param {Bounds|Point} bounds
	 *
	 * @return Array<Point>
	 */
	function asEdges(bounds) {
	  return [
	    [ // top
	      {
	        x: bounds.x,
	        y: bounds.y
	      },
	      {
	        x: bounds.x + (bounds.width || 0),
	        y: bounds.y
	      }
	    ],
	    [ // right
	      {
	        x: bounds.x + (bounds.width || 0),
	        y: bounds.y
	      },
	      {
	        x: bounds.x + (bounds.width || 0),
	        y: bounds.y + (bounds.height || 0)
	      }
	    ],
	    [ // bottom
	      {
	        x: bounds.x,
	        y: bounds.y + (bounds.height || 0)
	      },
	      {
	        x: bounds.x + (bounds.width || 0),
	        y: bounds.y + (bounds.height || 0)
	      }
	    ],
	    [ // left
	      {
	        x: bounds.x,
	        y: bounds.y
	      },
	      {
	        x: bounds.x,
	        y: bounds.y + (bounds.height || 0)
	      }
	    ]
	  ];
	}

	/**
	 * Returns the nearest line for a given point by distance
	 * @param {Point} point
	 * @param Array<Point> lines
	 *
	 * @return Array<Point>
	 */
	function getNearestLine(point, lines) {

	  var distances = lines.map(function(l) {
	    return {
	      line: l,
	      distance: getDistancePointLine(point, l)
	    };
	  });

	  var sorted = sortBy(distances, 'distance');

	  return sorted[0].line;
	}

	var COLLAB_ERR_MSG = 'flow elements must be children of pools/participants';

	function ModelingFeedback(eventBus, tooltips, translate) {

	  function showError(position, message, timeout) {
	    tooltips.add({
	      position: {
	        x: position.x + 5,
	        y: position.y + 5
	      },
	      type: 'error',
	      timeout: timeout || 2000,
	      html: '<div>' + message + '</div>'
	    });
	  }

	  eventBus.on([ 'shape.move.rejected', 'create.rejected' ], function(event) {
	    var context = event.context,
	        shape = context.shape,
	        target = context.target;

	    if (is$1(target, 'bpmn:Collaboration') && is$1(shape, 'bpmn:FlowNode')) {
	      showError(event, translate(COLLAB_ERR_MSG));
	    }
	  });

	}

	ModelingFeedback.$inject = [
	  'eventBus',
	  'tooltips',
	  'translate'
	];

	function ReplaceConnectionBehavior(eventBus, modeling, bpmnRules, injector) {

	  CommandInterceptor.call(this, eventBus);

	  var dragging = injector.get('dragging', false);

	  function fixConnection(connection) {

	    var source = connection.source,
	        target = connection.target,
	        parent = connection.parent;

	    // do not do anything if connection
	    // is already deleted (may happen due to other
	    // behaviors plugged-in before)
	    if (!parent) {
	      return;
	    }

	    var replacementType,
	        remove;

	    /**
	     * Check if incoming or outgoing connections
	     * can stay or could be substituted with an
	     * appropriate replacement.
	     *
	     * This holds true for SequenceFlow <> MessageFlow.
	     */

	    if (is$1(connection, 'bpmn:SequenceFlow')) {
	      if (!bpmnRules.canConnectSequenceFlow(source, target)) {
	        remove = true;
	      }

	      if (bpmnRules.canConnectMessageFlow(source, target)) {
	        replacementType = 'bpmn:MessageFlow';
	      }
	    }

	    // transform message flows into sequence flows, if possible

	    if (is$1(connection, 'bpmn:MessageFlow')) {

	      if (!bpmnRules.canConnectMessageFlow(source, target)) {
	        remove = true;
	      }

	      if (bpmnRules.canConnectSequenceFlow(source, target)) {
	        replacementType = 'bpmn:SequenceFlow';
	      }
	    }

	    if (is$1(connection, 'bpmn:Association') && !bpmnRules.canConnectAssociation(source, target)) {
	      remove = true;
	    }


	    // remove invalid connection,
	    // unless it has been removed already
	    if (remove) {
	      modeling.removeConnection(connection);
	    }

	    // replace SequenceFlow <> MessageFlow

	    if (replacementType) {
	      modeling.connect(source, target, {
	        type: replacementType,
	        waypoints: connection.waypoints.slice()
	      });
	    }
	  }

	  function replaceReconnectedConnection(event) {

	    var context = event.context,
	        connection = context.connection,
	        source = context.newSource || connection.source,
	        target = context.newTarget || connection.target,
	        allowed,
	        replacement;

	    allowed = bpmnRules.canConnect(source, target);

	    if (!allowed || allowed.type === connection.type) {
	      return;
	    }

	    replacement = modeling.connect(source, target, {
	      type: allowed.type,
	      waypoints: connection.waypoints.slice()
	    });

	    // remove old connection
	    modeling.removeConnection(connection);

	    // replace connection in context to reconnect end/start
	    context.connection = replacement;

	    if (dragging) {
	      cleanDraggingSelection(connection, replacement);
	    }
	  }

	  // monkey-patch selection saved in dragging in order to re-select it when operation is finished
	  function cleanDraggingSelection(oldConnection, newConnection) {
	    var context = dragging.context(),
	        previousSelection = context && context.payload.previousSelection,
	        index;

	    // do nothing if not dragging or no selection was present
	    if (!previousSelection || !previousSelection.length) {
	      return;
	    }

	    index = previousSelection.indexOf(oldConnection);

	    if (index === -1) {
	      return;
	    }

	    previousSelection.splice(index, 1, newConnection);
	  }

	  // lifecycle hooks

	  this.postExecuted('elements.move', function(context) {

	    var closure = context.closure,
	        allConnections = closure.allConnections;

	    forEach(allConnections, fixConnection);
	  }, true);

	  this.preExecute('connection.reconnect', replaceReconnectedConnection);

	  this.postExecuted('element.updateProperties', function(event) {
	    var context = event.context,
	        properties = context.properties,
	        element = context.element,
	        businessObject = element.businessObject,
	        connection;

	    // remove condition on change to default
	    if (properties.default) {
	      connection = find(
	        element.outgoing,
	        matchPattern({ id: element.businessObject.default.id })
	      );

	      if (connection) {
	        modeling.updateProperties(connection, { conditionExpression: undefined });
	      }
	    }

	    // remove default from source on change to conditional
	    if (properties.conditionExpression && businessObject.sourceRef.default === businessObject) {
	      modeling.updateProperties(element.source, { default: undefined });
	    }
	  });
	}

	inherits_browser(ReplaceConnectionBehavior, CommandInterceptor);

	ReplaceConnectionBehavior.$inject = [
	  'eventBus',
	  'modeling',
	  'bpmnRules',
	  'injector'
	];

	/**
	 * BPMN specific remove behavior
	 */
	function RemoveParticipantBehavior(eventBus, modeling) {

	  CommandInterceptor.call(this, eventBus);


	  /**
	   * morph collaboration diagram into process diagram
	   * after the last participant has been removed
	   */

	  this.preExecute('shape.delete', function(context) {

	    var shape = context.shape,
	        parent = shape.parent;

	    // activate the behavior if the shape to be removed
	    // is a participant
	    if (is$1(shape, 'bpmn:Participant')) {
	      context.collaborationRoot = parent;
	    }
	  }, true);

	  this.postExecute('shape.delete', function(context) {

	    var collaborationRoot = context.collaborationRoot;

	    if (collaborationRoot && !collaborationRoot.businessObject.participants.length) {

	      // replace empty collaboration with process diagram
	      modeling.makeProcess();
	    }
	  }, true);

	}

	RemoveParticipantBehavior.$inject = [ 'eventBus', 'modeling' ];

	inherits_browser(RemoveParticipantBehavior, CommandInterceptor);

	/**
	 * BPMN-specific replace behavior.
	 */
	function ReplaceElementBehaviour(
	    bpmnReplace,
	    bpmnRules,
	    elementRegistry,
	    injector,
	    modeling,
	    selection
	) {
	  injector.invoke(CommandInterceptor, this);

	  this._bpmnReplace = bpmnReplace;
	  this._elementRegistry = elementRegistry;
	  this._selection = selection;

	  // replace elements on move
	  this.postExecuted([ 'elements.move' ], 500, function(event) {
	    var context = event.context,
	        target = context.newParent,
	        newHost = context.newHost,
	        elements = [];

	    forEach(context.closure.topLevel, function(topLevelElements) {
	      if (isEventSubProcess(topLevelElements)) {
	        elements = elements.concat(topLevelElements.children);
	      } else {
	        elements = elements.concat(topLevelElements);
	      }
	    });

	    // set target to host if attaching
	    if (elements.length === 1 && newHost) {
	      target = newHost;
	    }

	    var canReplace = bpmnRules.canReplace(elements, target);

	    if (canReplace) {
	      this.replaceElements(elements, canReplace.replacements, newHost);
	    }
	  }, this);

	  // update attachments on host replace
	  this.postExecute([ 'shape.replace' ], 1500, function(e) {
	    var context = e.context,
	        oldShape = context.oldShape,
	        newShape = context.newShape,
	        attachers = oldShape.attachers,
	        canReplace;

	    if (attachers && attachers.length) {
	      canReplace = bpmnRules.canReplace(attachers, newShape);

	      this.replaceElements(attachers, canReplace.replacements);
	    }

	  }, this);

	  // keep ID on shape replace
	  this.postExecuted([ 'shape.replace' ], 1500, function(e) {
	    var context = e.context,
	        oldShape = context.oldShape,
	        newShape = context.newShape;

	    modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);
	    modeling.updateProperties(newShape, { id: oldShape.id });
	  });
	}

	inherits_browser(ReplaceElementBehaviour, CommandInterceptor);

	ReplaceElementBehaviour.prototype.replaceElements = function(elements, newElements) {
	  var elementRegistry = this._elementRegistry,
	      bpmnReplace = this._bpmnReplace,
	      selection = this._selection;

	  forEach(newElements, function(replacement) {
	    var newElement = {
	      type: replacement.newElementType
	    };

	    var oldElement = elementRegistry.get(replacement.oldElementId);

	    var idx = elements.indexOf(oldElement);

	    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, { select: false });
	  });

	  if (newElements) {
	    selection.select(elements);
	  }
	};

	ReplaceElementBehaviour.$inject = [
	  'bpmnReplace',
	  'bpmnRules',
	  'elementRegistry',
	  'injector',
	  'modeling',
	  'selection'
	];

	var abs$5 = Math.abs,
	    min$3 = Math.min,
	    max$4 = Math.max;


	function addToTrbl(trbl, attr, value, choice) {
	  var current = trbl[attr];

	  // make sure to set the value if it does not exist
	  // or apply the correct value by comparing against
	  // choice(value, currentValue)
	  trbl[attr] = current === undefined ? value : choice(value, current);
	}

	function addMin(trbl, attr, value) {
	  return addToTrbl(trbl, attr, value, min$3);
	}

	function addMax(trbl, attr, value) {
	  return addToTrbl(trbl, attr, value, max$4);
	}

	var LANE_RIGHT_PADDING = 20,
	    LANE_LEFT_PADDING = 50,
	    LANE_TOP_PADDING = 20,
	    LANE_BOTTOM_PADDING = 20;


	function getParticipantResizeConstraints(laneShape, resizeDirection, balanced) {
	  var lanesRoot = getLanesRoot(laneShape);

	  var isFirst = true,
	      isLast = true;

	  // max top/bottom size for lanes
	  var allLanes = collectLanes(lanesRoot, [ lanesRoot ]);

	  var laneTrbl = asTRBL(laneShape);

	  var maxTrbl = {},
	      minTrbl = {};

	  if (/e/.test(resizeDirection)) {
	    minTrbl.right = laneTrbl.left + LANE_MIN_DIMENSIONS.width;
	  } else
	  if (/w/.test(resizeDirection)) {
	    minTrbl.left = laneTrbl.right - LANE_MIN_DIMENSIONS.width;
	  }

	  allLanes.forEach(function(other) {

	    var otherTrbl = asTRBL(other);

	    if (/n/.test(resizeDirection)) {

	      if (otherTrbl.top < (laneTrbl.top - 10)) {
	        isFirst = false;
	      }

	      // max top size (based on next element)
	      if (balanced && abs$5(laneTrbl.top - otherTrbl.bottom) < 10) {
	        addMax(maxTrbl, 'top', otherTrbl.top + LANE_MIN_DIMENSIONS.height);
	      }

	      // min top size (based on self or nested element)
	      if (abs$5(laneTrbl.top - otherTrbl.top) < 5) {
	        addMin(minTrbl, 'top', otherTrbl.bottom - LANE_MIN_DIMENSIONS.height);
	      }
	    }

	    if (/s/.test(resizeDirection)) {

	      if (otherTrbl.bottom > (laneTrbl.bottom + 10)) {
	        isLast = false;
	      }

	      // max bottom size (based on previous element)
	      if (balanced && abs$5(laneTrbl.bottom - otherTrbl.top) < 10) {
	        addMin(maxTrbl, 'bottom', otherTrbl.bottom - LANE_MIN_DIMENSIONS.height);
	      }

	      // min bottom size (based on self or nested element)
	      if (abs$5(laneTrbl.bottom - otherTrbl.bottom) < 5) {
	        addMax(minTrbl, 'bottom', otherTrbl.top + LANE_MIN_DIMENSIONS.height);
	      }
	    }
	  });

	  // max top/bottom/left/right size based on flow nodes
	  var flowElements = lanesRoot.children.filter(function(s) {
	    return !s.hidden && !s.waypoints && (is$1(s, 'bpmn:FlowElement') || is$1(s, 'bpmn:Artifact'));
	  });

	  flowElements.forEach(function(flowElement) {

	    var flowElementTrbl = asTRBL(flowElement);

	    if (isFirst && /n/.test(resizeDirection)) {
	      addMin(minTrbl, 'top', flowElementTrbl.top - LANE_TOP_PADDING);
	    }

	    if (/e/.test(resizeDirection)) {
	      addMax(minTrbl, 'right', flowElementTrbl.right + LANE_RIGHT_PADDING);
	    }

	    if (isLast && /s/.test(resizeDirection)) {
	      addMax(minTrbl, 'bottom', flowElementTrbl.bottom + LANE_BOTTOM_PADDING);
	    }

	    if (/w/.test(resizeDirection)) {
	      addMin(minTrbl, 'left', flowElementTrbl.left - LANE_LEFT_PADDING);
	    }
	  });

	  return {
	    min: minTrbl,
	    max: maxTrbl
	  };
	}

	var HIGH_PRIORITY$a = 1500;

	var LANE_MIN_DIMENSIONS = { width: 300, height: 60 };

	var PARTICIPANT_MIN_DIMENSIONS = { width: 300, height: 150 };

	var SUB_PROCESS_MIN_DIMENSIONS = { width: 140, height: 120 };

	var TEXT_ANNOTATION_MIN_DIMENSIONS = { width: 50, height: 30 };


	/**
	 * Set minimum bounds/resize constraints on resize.
	 *
	 * @param {EventBus} eventBus
	 */
	function ResizeBehavior$1(eventBus) {
	  eventBus.on('resize.start', HIGH_PRIORITY$a, function(event) {
	    var context = event.context,
	        shape = context.shape,
	        direction = context.direction,
	        balanced = context.balanced;

	    if (is$1(shape, 'bpmn:Lane') || is$1(shape, 'bpmn:Participant')) {
	      context.resizeConstraints = getParticipantResizeConstraints(shape, direction, balanced);
	    }

	    if (is$1(shape, 'bpmn:Participant')) {
	      context.minDimensions = PARTICIPANT_MIN_DIMENSIONS;
	    }

	    if (is$1(shape, 'bpmn:SubProcess') && isExpanded(shape)) {
	      context.minDimensions = SUB_PROCESS_MIN_DIMENSIONS;
	    }

	    if (is$1(shape, 'bpmn:TextAnnotation')) {
	      context.minDimensions = TEXT_ANNOTATION_MIN_DIMENSIONS;
	    }
	  });
	}

	ResizeBehavior$1.$inject = [ 'eventBus' ];

	var SLIGHTLY_HIGHER_PRIORITY = 1001;


	/**
	 * Invoke {@link Modeling#resizeLane} instead of
	 * {@link Modeling#resizeShape} when resizing a Lane
	 * or Participant shape.
	 */
	function ResizeLaneBehavior(eventBus, modeling) {

	  eventBus.on('resize.start', SLIGHTLY_HIGHER_PRIORITY + 500, function(event) {
	    var context = event.context,
	        shape = context.shape;

	    if (is$1(shape, 'bpmn:Lane') || is$1(shape, 'bpmn:Participant')) {

	      // should we resize the opposite lane(s) in
	      // order to compensate for the resize operation?
	      context.balanced = !hasPrimaryModifier(event);
	    }
	  });

	  /**
	   * Intercept resize end and call resize lane function instead.
	   */
	  eventBus.on('resize.end', SLIGHTLY_HIGHER_PRIORITY, function(event) {
	    var context = event.context,
	        shape = context.shape,
	        canExecute = context.canExecute,
	        newBounds = context.newBounds;

	    if (is$1(shape, 'bpmn:Lane') || is$1(shape, 'bpmn:Participant')) {

	      if (canExecute) {

	        // ensure we have actual pixel values for new bounds
	        // (important when zoom level was > 1 during move)
	        newBounds = roundBounds(newBounds);

	        // perform the actual resize
	        modeling.resizeLane(shape, newBounds, context.balanced);
	      }

	      // stop propagation
	      return false;
	    }
	  });
	}

	ResizeLaneBehavior.$inject = [
	  'eventBus',
	  'modeling'
	];

	function RemoveElementBehavior(eventBus, bpmnRules, modeling) {

	  CommandInterceptor.call(this, eventBus);

	  /**
	   * Combine sequence flows when deleting an element
	   * if there is one incoming and one outgoing
	   * sequence flow
	   */
	  this.preExecute('shape.delete', function(e) {

	    var shape = e.context.shape;

	    // only handle [a] -> [shape] -> [b] patterns
	    if (shape.incoming.length !== 1 || shape.outgoing.length !== 1) {
	      return;
	    }

	    var inConnection = shape.incoming[0],
	        outConnection = shape.outgoing[0];

	    // only handle sequence flows
	    if (!is$1(inConnection, 'bpmn:SequenceFlow') || !is$1(outConnection, 'bpmn:SequenceFlow')) {
	      return;
	    }

	    if (bpmnRules.canConnect(inConnection.source, outConnection.target, inConnection)) {

	      // compute new, combined waypoints
	      var newWaypoints = getNewWaypoints(inConnection.waypoints, outConnection.waypoints);

	      modeling.reconnectEnd(inConnection, outConnection.target, newWaypoints);
	    }
	  });

	}

	inherits_browser(RemoveElementBehavior, CommandInterceptor);

	RemoveElementBehavior.$inject = [
	  'eventBus',
	  'bpmnRules',
	  'modeling'
	];


	// helpers //////////////////////

	function getDocking$1(point) {
	  return point.original || point;
	}


	function getNewWaypoints(inWaypoints, outWaypoints) {

	  var intersection = lineIntersect(
	    getDocking$1(inWaypoints[inWaypoints.length - 2]),
	    getDocking$1(inWaypoints[inWaypoints.length - 1]),
	    getDocking$1(outWaypoints[1]),
	    getDocking$1(outWaypoints[0]));

	  if (intersection) {
	    return [].concat(
	      inWaypoints.slice(0, inWaypoints.length - 1),
	      [ intersection ],
	      outWaypoints.slice(1));
	  } else {
	    return [
	      getDocking$1(inWaypoints[0]),
	      getDocking$1(outWaypoints[outWaypoints.length - 1])
	    ];
	  }
	}

	var max$5 = Math.max;


	function SpaceToolBehavior$1(eventBus) {
	  eventBus.on('spaceTool.getMinDimensions', function(context) {
	    var shapes = context.shapes,
	        axis = context.axis,
	        start = context.start,
	        minDimensions = {};

	    forEach(shapes, function(shape) {
	      var id = shape.id;

	      if (is$1(shape, 'bpmn:Participant')) {

	        if (isHorizontal$2(axis)) {
	          minDimensions[ id ] = PARTICIPANT_MIN_DIMENSIONS;
	        } else {
	          minDimensions[ id ] = {
	            width: PARTICIPANT_MIN_DIMENSIONS.width,
	            height: getParticipantMinHeight(shape, start)
	          };
	        }

	      }

	      if (is$1(shape, 'bpmn:SubProcess') && isExpanded(shape)) {
	        minDimensions[ id ] = SUB_PROCESS_MIN_DIMENSIONS;
	      }

	      if (is$1(shape, 'bpmn:TextAnnotation')) {
	        minDimensions[ id ] = TEXT_ANNOTATION_MIN_DIMENSIONS;
	      }
	    });

	    return minDimensions;
	  });
	}

	SpaceToolBehavior$1.$inject = [ 'eventBus' ];


	// helpers //////////
	function isHorizontal$2(axis) {
	  return axis === 'x';
	}

	/**
	 * Get minimum height for participant taking lanes into account.
	 *
	 * @param {<djs.model.Shape>} participant
	 * @param {number} start
	 *
	 * @returns {Object}
	 */
	function getParticipantMinHeight(participant, start) {
	  var lanesMinHeight;

	  if (!hasChildLanes(participant)) {
	    return PARTICIPANT_MIN_DIMENSIONS.height;
	  }

	  lanesMinHeight = getLanesMinHeight(participant, start);

	  return max$5(PARTICIPANT_MIN_DIMENSIONS.height, lanesMinHeight);
	}

	function hasChildLanes(element) {
	  return !!getChildLanes(element).length;
	}

	function getLanesMinHeight(participant, resizeStart) {
	  var lanes = getChildLanes(participant),
	      resizedLane;

	  // find the nested lane which is currently resized
	  resizedLane = findResizedLane(lanes, resizeStart);

	  // resized lane cannot shrink below the minimum height
	  // but remaining lanes' dimensions are kept intact
	  return participant.height - resizedLane.height + LANE_MIN_DIMENSIONS.height;
	}

	/**
	 * Find nested lane which is currently resized.
	 *
	 * @param {Array<djs.model.Shape>} lanes
	 * @param {number} resizeStart
	 */
	function findResizedLane(lanes, resizeStart) {
	  var i, lane, childLanes;

	  for (i = 0; i < lanes.length; i++) {
	    lane = lanes[i];

	    // resizing current lane or a lane nested
	    if (resizeStart >= lane.y && resizeStart <= lane.y + lane.height) {
	      childLanes = getChildLanes(lane);

	      // a nested lane is resized
	      if (childLanes.length) {
	        return findResizedLane(childLanes, resizeStart);
	      }

	      // current lane is the resized one
	      return lane;
	    }
	  }
	}

	/**
	 * Add start event replacing element with expanded sub process.
	 *
	 * @param {Injector} injector
	 * @param {Modeling} modeling
	 */
	function SubProcessStartEventBehavior(injector, modeling) {
	  injector.invoke(CommandInterceptor, this);

	  this.postExecuted('shape.replace', function(event) {
	    var oldShape = event.context.oldShape,
	        newShape = event.context.newShape;

	    if (
	      !is$1(newShape, 'bpmn:SubProcess') ||
	      !is$1(oldShape, 'bpmn:Task') ||
	      !isExpanded(newShape)
	    ) {
	      return;
	    }

	    var position = getStartEventPosition(newShape);

	    modeling.createShape({ type: 'bpmn:StartEvent' }, position, newShape);
	  });
	}

	SubProcessStartEventBehavior.$inject = [
	  'injector',
	  'modeling'
	];

	inherits_browser(SubProcessStartEventBehavior, CommandInterceptor);

	// helpers //////////

	function getStartEventPosition(shape) {
	  return {
	    x: shape.x + shape.width / 6,
	    y: shape.y + shape.height / 2
	  };
	}

	var LOW_PRIORITY$e = 500;


	function ToggleElementCollapseBehaviour(
	    eventBus, elementFactory, modeling,
	    resize) {

	  CommandInterceptor.call(this, eventBus);


	  function hideEmptyLabels(children) {
	    if (children.length) {
	      children.forEach(function(child) {
	        if (child.type === 'label' && !child.businessObject.name) {
	          child.hidden = true;
	        }
	      });
	    }
	  }

	  function expandedBounds(shape, defaultSize) {
	    var children = shape.children,
	        newBounds = defaultSize,
	        visibleElements,
	        visibleBBox;

	    visibleElements = filterVisible(children).concat([ shape ]);

	    visibleBBox = computeChildrenBBox(visibleElements);

	    if (visibleBBox) {

	      // center to visibleBBox with max(defaultSize, childrenBounds)
	      newBounds.width = Math.max(visibleBBox.width, newBounds.width);
	      newBounds.height = Math.max(visibleBBox.height, newBounds.height);

	      newBounds.x = visibleBBox.x + (visibleBBox.width - newBounds.width) / 2;
	      newBounds.y = visibleBBox.y + (visibleBBox.height - newBounds.height) / 2;
	    } else {

	      // center to collapsed shape with defaultSize
	      newBounds.x = shape.x + (shape.width - newBounds.width) / 2;
	      newBounds.y = shape.y + (shape.height - newBounds.height) / 2;
	    }

	    return newBounds;
	  }

	  function collapsedBounds(shape, defaultSize) {

	    return {
	      x: shape.x + (shape.width - defaultSize.width) / 2,
	      y: shape.y + (shape.height - defaultSize.height) / 2,
	      width: defaultSize.width,
	      height: defaultSize.height
	    };
	  }

	  this.executed([ 'shape.toggleCollapse' ], LOW_PRIORITY$e, function(e) {

	    var context = e.context,
	        shape = context.shape;

	    if (!is$1(shape, 'bpmn:SubProcess')) {
	      return;
	    }

	    if (!shape.collapsed) {

	      // all children got made visible through djs, hide empty labels
	      hideEmptyLabels(shape.children);

	      // remove collapsed marker
	      getBusinessObject(shape).di.isExpanded = true;
	    } else {

	      // place collapsed marker
	      getBusinessObject(shape).di.isExpanded = false;
	    }
	  });

	  this.reverted([ 'shape.toggleCollapse' ], LOW_PRIORITY$e, function(e) {

	    var context = e.context;
	    var shape = context.shape;


	    // revert removing/placing collapsed marker
	    if (!shape.collapsed) {
	      getBusinessObject(shape).di.isExpanded = true;

	    } else {
	      getBusinessObject(shape).di.isExpanded = false;
	    }
	  });

	  this.postExecuted([ 'shape.toggleCollapse' ], LOW_PRIORITY$e, function(e) {
	    var shape = e.context.shape,
	        defaultSize = elementFactory._getDefaultSize(shape),
	        newBounds;

	    if (shape.collapsed) {

	      // resize to default size of collapsed shapes
	      newBounds = collapsedBounds(shape, defaultSize);
	    } else {

	      // resize to bounds of max(visible children, defaultSize)
	      newBounds = expandedBounds(shape, defaultSize);
	    }

	    modeling.resizeShape(shape, newBounds, null, {
	      autoResize: shape.collapsed ? false : 'nwse'
	    });
	  });

	}


	inherits_browser(ToggleElementCollapseBehaviour, CommandInterceptor);

	ToggleElementCollapseBehaviour.$inject = [
	  'eventBus',
	  'elementFactory',
	  'modeling'
	];


	// helpers //////////////////////

	function filterVisible(elements) {
	  return elements.filter(function(e) {
	    return !e.hidden;
	  });
	}

	/**
	 * Unclaims model IDs on element deletion.
	 *
	 * @param {Canvas} canvas
	 * @param {Injector} injector
	 * @param {Moddle} moddle
	 * @param {Modeling} modeling
	 */
	function UnclaimIdBehavior(canvas, injector, moddle, modeling) {
	  injector.invoke(CommandInterceptor, this);

	  this.preExecute('shape.delete', function(event) {
	    var context = event.context,
	        shape = context.shape,
	        shapeBo = shape.businessObject;

	    if (isLabel(shape)) {
	      return;
	    }

	    if (is$1(shape, 'bpmn:Participant') && isExpanded(shape)) {
	      moddle.ids.unclaim(shapeBo.processRef.id);
	    }

	    modeling.unclaimId(shapeBo.id, shapeBo);
	  });


	  this.preExecute('connection.delete', function(event) {
	    var context = event.context,
	        connection = context.connection,
	        connectionBo = connection.businessObject;

	    modeling.unclaimId(connectionBo.id, connectionBo);
	  });

	  this.preExecute('canvas.updateRoot', function() {
	    var rootElement = canvas.getRootElement(),
	        rootElementBo = rootElement.businessObject;

	    moddle.ids.unclaim(rootElementBo.id);
	  });
	}

	inherits_browser(UnclaimIdBehavior, CommandInterceptor);

	UnclaimIdBehavior.$inject = [ 'canvas', 'injector', 'moddle', 'modeling' ];

	var LOW_PRIORITY$f = 500,
	    HIGH_PRIORITY$b = 5000;


	/**
	 * BPMN specific delete lane behavior
	 */
	function UpdateFlowNodeRefsBehavior(eventBus, modeling, translate) {

	  CommandInterceptor.call(this, eventBus);

	  /**
	   * Ok, this is it:
	   *
	   * We have to update the Lane#flowNodeRefs _and_
	   * FlowNode#lanes with every FlowNode move/resize and
	   * Lane move/resize.
	   *
	   * We want to group that stuff to recompute containments
	   * as efficient as possible.
	   *
	   * Yea!
	   */

	  // the update context
	  var context;


	  function initContext() {
	    context = context || new UpdateContext();
	    context.enter();

	    return context;
	  }

	  function getContext() {
	    if (!context) {
	      throw new Error(translate('out of bounds release'));
	    }

	    return context;
	  }

	  function releaseContext() {

	    if (!context) {
	      throw new Error(translate('out of bounds release'));
	    }

	    var triggerUpdate = context.leave();

	    if (triggerUpdate) {
	      modeling.updateLaneRefs(context.flowNodes, context.lanes);

	      context = null;
	    }

	    return triggerUpdate;
	  }


	  var laneRefUpdateEvents = [
	    'spaceTool',
	    'lane.add',
	    'lane.resize',
	    'lane.split',
	    'elements.create',
	    'elements.delete',
	    'elements.move',
	    'shape.create',
	    'shape.delete',
	    'shape.move',
	    'shape.resize'
	  ];


	  // listen to a lot of stuff to group lane updates

	  this.preExecute(laneRefUpdateEvents, HIGH_PRIORITY$b, function(event) {
	    initContext();
	  });

	  this.postExecuted(laneRefUpdateEvents, LOW_PRIORITY$f, function(event) {
	    releaseContext();
	  });


	  // Mark flow nodes + lanes that need an update

	  this.preExecute([
	    'shape.create',
	    'shape.move',
	    'shape.delete',
	    'shape.resize'
	  ], function(event) {

	    var context = event.context,
	        shape = context.shape;

	    var updateContext = getContext();

	    // no need to update labels
	    if (shape.labelTarget) {
	      return;
	    }

	    if (is$1(shape, 'bpmn:Lane')) {
	      updateContext.addLane(shape);
	    }

	    if (is$1(shape, 'bpmn:FlowNode')) {
	      updateContext.addFlowNode(shape);
	    }
	  });
	}

	UpdateFlowNodeRefsBehavior.$inject = [
	  'eventBus',
	  'modeling' ,
	  'translate'
	];

	inherits_browser(UpdateFlowNodeRefsBehavior, CommandInterceptor);


	function UpdateContext() {

	  this.flowNodes = [];
	  this.lanes = [];

	  this.counter = 0;

	  this.addLane = function(lane) {
	    this.lanes.push(lane);
	  };

	  this.addFlowNode = function(flowNode) {
	    this.flowNodes.push(flowNode);
	  };

	  this.enter = function() {
	    this.counter++;
	  };

	  this.leave = function() {
	    this.counter--;

	    return !this.counter;
	  };
	}

	/**
	 * A behavior that unsets the Default property of
	 * sequence flow source on element delete, if the
	 * removed element is the Gateway or Task's default flow.
	 *
	 * @param {EventBus} eventBus
	 * @param {Modeling} modeling
	 */
	function DeleteSequenceFlowBehavior(eventBus, modeling) {

	  CommandInterceptor.call(this, eventBus);


	  this.preExecute('connection.delete', function(event) {
	    var context = event.context,
	        connection = context.connection,
	        source = connection.source;

	    if (isDefaultFlow(connection, source)) {
	      modeling.updateProperties(source, {
	        'default': null
	      });
	    }
	  });
	}

	inherits_browser(DeleteSequenceFlowBehavior, CommandInterceptor);

	DeleteSequenceFlowBehavior.$inject = [
	  'eventBus',
	  'modeling'
	];


	// helpers //////////////////////

	function isDefaultFlow(connection, source) {

	  if (!is$1(connection, 'bpmn:SequenceFlow')) {
	    return false;
	  }

	  var sourceBo = getBusinessObject(source),
	      sequenceFlow = getBusinessObject(connection);

	  return sourceBo.get('default') === sequenceFlow;
	}

	var BehaviorModule = {
	  __init__: [
	    'adaptiveLabelPositioningBehavior',
	    'appendBehavior',
	    'associationBehavior',
	    'attachEventBehavior',
	    'boundaryEventBehavior',
	    'rootElementReferenceBehavior',
	    'createBehavior',
	    'fixHoverBehavior',
	    'createDataObjectBehavior',
	    'createParticipantBehavior',
	    'dataStoreBehavior',
	    'dataInputAssociationBehavior',
	    'deleteLaneBehavior',
	    'detachEventBehavior',
	    'dropOnFlowBehavior',
	    'eventBasedGatewayBehavior',
	    'groupBehavior',
	    'importDockingFix',
	    'isHorizontalFix',
	    'labelBehavior',
	    'modelingFeedback',
	    'removeElementBehavior',
	    'removeParticipantBehavior',
	    'replaceConnectionBehavior',
	    'replaceElementBehaviour',
	    'resizeBehavior',
	    'resizeLaneBehavior',
	    'toggleElementCollapseBehaviour',
	    'spaceToolBehavior',
	    'subProcessStartEventBehavior',
	    'unclaimIdBehavior',
	    'unsetDefaultFlowBehavior',
	    'updateFlowNodeRefsBehavior'
	  ],
	  adaptiveLabelPositioningBehavior: [ 'type', AdaptiveLabelPositioningBehavior ],
	  appendBehavior: [ 'type', AppendBehavior ],
	  associationBehavior: [ 'type', AssociationBehavior ],
	  attachEventBehavior: [ 'type', AttachEventBehavior ],
	  boundaryEventBehavior: [ 'type', BoundaryEventBehavior ],
	  rootElementReferenceBehavior: [ 'type', RootElementReferenceBehavior ],
	  createBehavior: [ 'type', CreateBehavior ],
	  fixHoverBehavior: [ 'type', FixHoverBehavior ],
	  createDataObjectBehavior: [ 'type', CreateDataObjectBehavior ],
	  createParticipantBehavior: [ 'type', CreateParticipantBehavior$1 ],
	  dataInputAssociationBehavior: [ 'type', DataInputAssociationBehavior ],
	  dataStoreBehavior: [ 'type', DataStoreBehavior ],
	  deleteLaneBehavior: [ 'type', DeleteLaneBehavior ],
	  detachEventBehavior: [ 'type', DetachEventBehavior ],
	  dropOnFlowBehavior: [ 'type', DropOnFlowBehavior ],
	  eventBasedGatewayBehavior: [ 'type', EventBasedGatewayBehavior ],
	  groupBehavior: [ 'type', GroupBehavior ],
	  importDockingFix: [ 'type', ImportDockingFix ],
	  isHorizontalFix: [ 'type', IsHorizontalFix ],
	  labelBehavior: [ 'type', LabelBehavior ],
	  modelingFeedback: [ 'type', ModelingFeedback ],
	  replaceConnectionBehavior: [ 'type', ReplaceConnectionBehavior ],
	  removeParticipantBehavior: [ 'type', RemoveParticipantBehavior ],
	  replaceElementBehaviour: [ 'type', ReplaceElementBehaviour ],
	  resizeBehavior: [ 'type', ResizeBehavior$1 ],
	  resizeLaneBehavior: [ 'type', ResizeLaneBehavior ],
	  removeElementBehavior: [ 'type', RemoveElementBehavior ],
	  toggleElementCollapseBehaviour : [ 'type', ToggleElementCollapseBehaviour ],
	  spaceToolBehavior: [ 'type', SpaceToolBehavior$1 ],
	  subProcessStartEventBehavior: [ 'type', SubProcessStartEventBehavior ],
	  unclaimIdBehavior: [ 'type', UnclaimIdBehavior ],
	  updateFlowNodeRefsBehavior: [ 'type', UpdateFlowNodeRefsBehavior ],
	  unsetDefaultFlowBehavior: [ 'type', DeleteSequenceFlowBehavior ]
	};

	function getBoundaryAttachment(position, targetBounds) {

	  var orientation = getOrientation(position, targetBounds, -15);

	  if (orientation !== 'intersect') {
	    return orientation;
	  } else {
	    return null;
	  }
	}

	/**
	 * BPMN specific modeling rule
	 */
	function BpmnRules(eventBus) {
	  RuleProvider.call(this, eventBus);
	}

	inherits_browser(BpmnRules, RuleProvider);

	BpmnRules.$inject = [ 'eventBus' ];

	BpmnRules.prototype.init = function() {

	  this.addRule('connection.start', function(context) {
	    var source = context.source;

	    return canStartConnection(source);
	  });

	  this.addRule('connection.create', function(context) {
	    var source = context.source,
	        target = context.target,
	        hints = context.hints || {},
	        targetParent = hints.targetParent,
	        targetAttach = hints.targetAttach;

	    // don't allow incoming connections on
	    // newly created boundary events
	    // to boundary events
	    if (targetAttach) {
	      return false;
	    }

	    // temporarily set target parent for scoping
	    // checks to work
	    if (targetParent) {
	      target.parent = targetParent;
	    }

	    try {
	      return canConnect(source, target);
	    } finally {

	      // unset temporary target parent
	      if (targetParent) {
	        target.parent = null;
	      }
	    }
	  });

	  this.addRule('connection.reconnect', function(context) {

	    var connection = context.connection,
	        source = context.source,
	        target = context.target;

	    return canConnect(source, target, connection);
	  });

	  this.addRule('connection.updateWaypoints', function(context) {
	    return {
	      type: context.connection.type
	    };
	  });

	  this.addRule('shape.resize', function(context) {

	    var shape = context.shape,
	        newBounds = context.newBounds;

	    return canResize(shape, newBounds);
	  });

	  this.addRule('elements.create', function(context) {
	    var elements = context.elements,
	        position = context.position,
	        target = context.target;

	    return every(elements, function(element) {
	      if (isConnection$3(element)) {
	        return canConnect(element.source, element.target, element);
	      }

	      if (element.host) {
	        return canAttach(element, element.host, null, position);
	      }

	      return canCreate(element, target, null);
	    });
	  });

	  this.addRule('elements.move', function(context) {

	    var target = context.target,
	        shapes = context.shapes,
	        position = context.position;

	    return canAttach(shapes, target, null, position) ||
	           canReplace(shapes, target, position) ||
	           canMove(shapes, target) ||
	           canInsert(shapes, target);
	  });

	  this.addRule('shape.create', function(context) {
	    return canCreate(
	      context.shape,
	      context.target,
	      context.source,
	      context.position
	    );
	  });

	  this.addRule('shape.attach', function(context) {

	    return canAttach(
	      context.shape,
	      context.target,
	      null,
	      context.position
	    );
	  });

	  this.addRule('element.copy', function(context) {
	    var element = context.element,
	        elements = context.elements;

	    return canCopy(elements, element);
	  });
	};

	BpmnRules.prototype.canConnectMessageFlow = canConnectMessageFlow;

	BpmnRules.prototype.canConnectSequenceFlow = canConnectSequenceFlow;

	BpmnRules.prototype.canConnectDataAssociation = canConnectDataAssociation;

	BpmnRules.prototype.canConnectAssociation = canConnectAssociation;

	BpmnRules.prototype.canMove = canMove;

	BpmnRules.prototype.canAttach = canAttach;

	BpmnRules.prototype.canReplace = canReplace;

	BpmnRules.prototype.canDrop = canDrop;

	BpmnRules.prototype.canInsert = canInsert;

	BpmnRules.prototype.canCreate = canCreate;

	BpmnRules.prototype.canConnect = canConnect;

	BpmnRules.prototype.canResize = canResize;

	BpmnRules.prototype.canCopy = canCopy;

	/**
	 * Utility functions for rule checking
	 */

	/**
	 * Checks if given element can be used for starting connection.
	 *
	 * @param  {Element} source
	 * @return {boolean}
	 */
	function canStartConnection(element) {
	  if (nonExistingOrLabel(element)) {
	    return null;
	  }

	  return isAny(element, [
	    'bpmn:FlowNode',
	    'bpmn:InteractionNode',
	    'bpmn:DataObjectReference',
	    'bpmn:DataStoreReference',
	    'bpmn:Group'
	  ]);
	}

	function nonExistingOrLabel(element) {
	  return !element || isLabel(element);
	}

	function isSame(a, b) {
	  return a === b;
	}

	function getOrganizationalParent(element) {

	  do {
	    if (is$1(element, 'bpmn:Process')) {
	      return getBusinessObject(element);
	    }

	    if (is$1(element, 'bpmn:Participant')) {
	      return (
	        getBusinessObject(element).processRef ||
	        getBusinessObject(element)
	      );
	    }
	  } while ((element = element.parent));

	}

	function isTextAnnotation(element) {
	  return is$1(element, 'bpmn:TextAnnotation');
	}

	function isGroup(element) {
	  return is$1(element, 'bpmn:Group') && !element.labelTarget;
	}

	function isCompensationBoundary(element) {
	  return is$1(element, 'bpmn:BoundaryEvent') &&
	         hasEventDefinition$2(element, 'bpmn:CompensateEventDefinition');
	}

	function isForCompensation(e) {
	  return getBusinessObject(e).isForCompensation;
	}

	function isSameOrganization(a, b) {
	  var parentA = getOrganizationalParent(a),
	      parentB = getOrganizationalParent(b);

	  return parentA === parentB;
	}

	function isMessageFlowSource(element) {
	  return (
	    is$1(element, 'bpmn:InteractionNode') &&
	    !is$1(element, 'bpmn:BoundaryEvent') && (
	      !is$1(element, 'bpmn:Event') || (
	        is$1(element, 'bpmn:ThrowEvent') &&
	        hasEventDefinitionOrNone(element, 'bpmn:MessageEventDefinition')
	      )
	    )
	  );
	}

	function isMessageFlowTarget(element) {
	  return (
	    is$1(element, 'bpmn:InteractionNode') &&
	    !isForCompensation(element) && (
	      !is$1(element, 'bpmn:Event') || (
	        is$1(element, 'bpmn:CatchEvent') &&
	        hasEventDefinitionOrNone(element, 'bpmn:MessageEventDefinition')
	      )
	    ) && !(
	      is$1(element, 'bpmn:BoundaryEvent') &&
	      !hasEventDefinition$2(element, 'bpmn:MessageEventDefinition')
	    )
	  );
	}

	function getScopeParent(element) {

	  var parent = element;

	  while ((parent = parent.parent)) {

	    if (is$1(parent, 'bpmn:FlowElementsContainer')) {
	      return getBusinessObject(parent);
	    }

	    if (is$1(parent, 'bpmn:Participant')) {
	      return getBusinessObject(parent).processRef;
	    }
	  }

	  return null;
	}

	function isSameScope(a, b) {
	  var scopeParentA = getScopeParent(a),
	      scopeParentB = getScopeParent(b);

	  return scopeParentA === scopeParentB;
	}

	function hasEventDefinition$2(element, eventDefinition) {
	  var bo = getBusinessObject(element);

	  return !!find(bo.eventDefinitions || [], function(definition) {
	    return is$1(definition, eventDefinition);
	  });
	}

	function hasEventDefinitionOrNone(element, eventDefinition) {
	  var bo = getBusinessObject(element);

	  return (bo.eventDefinitions || []).every(function(definition) {
	    return is$1(definition, eventDefinition);
	  });
	}

	function isSequenceFlowSource(element) {
	  return (
	    is$1(element, 'bpmn:FlowNode') &&
	    !is$1(element, 'bpmn:EndEvent') &&
	    !isEventSubProcess(element) &&
	    !(is$1(element, 'bpmn:IntermediateThrowEvent') &&
	      hasEventDefinition$2(element, 'bpmn:LinkEventDefinition')
	    ) &&
	    !isCompensationBoundary(element) &&
	    !isForCompensation(element)
	  );
	}

	function isSequenceFlowTarget(element) {
	  return (
	    is$1(element, 'bpmn:FlowNode') &&
	    !is$1(element, 'bpmn:StartEvent') &&
	    !is$1(element, 'bpmn:BoundaryEvent') &&
	    !isEventSubProcess(element) &&
	    !(is$1(element, 'bpmn:IntermediateCatchEvent') &&
	      hasEventDefinition$2(element, 'bpmn:LinkEventDefinition')
	    ) &&
	    !isForCompensation(element)
	  );
	}

	function isEventBasedTarget(element) {
	  return (
	    is$1(element, 'bpmn:ReceiveTask') || (
	      is$1(element, 'bpmn:IntermediateCatchEvent') && (
	        hasEventDefinition$2(element, 'bpmn:MessageEventDefinition') ||
	        hasEventDefinition$2(element, 'bpmn:TimerEventDefinition') ||
	        hasEventDefinition$2(element, 'bpmn:ConditionalEventDefinition') ||
	        hasEventDefinition$2(element, 'bpmn:SignalEventDefinition')
	      )
	    )
	  );
	}

	function isConnection$3(element) {
	  return element.waypoints;
	}

	function getParents$1(element) {

	  var parents = [];

	  while (element) {
	    element = element.parent;

	    if (element) {
	      parents.push(element);
	    }
	  }

	  return parents;
	}

	function isParent(possibleParent, element) {
	  var allParents = getParents$1(element);
	  return allParents.indexOf(possibleParent) !== -1;
	}

	function canConnect(source, target, connection) {

	  if (nonExistingOrLabel(source) || nonExistingOrLabel(target)) {
	    return null;
	  }

	  if (!is$1(connection, 'bpmn:DataAssociation')) {

	    if (canConnectMessageFlow(source, target)) {
	      return { type: 'bpmn:MessageFlow' };
	    }

	    if (canConnectSequenceFlow(source, target)) {
	      return { type: 'bpmn:SequenceFlow' };
	    }
	  }

	  var connectDataAssociation = canConnectDataAssociation(source, target);

	  if (connectDataAssociation) {
	    return connectDataAssociation;
	  }

	  if (isCompensationBoundary(source) && isForCompensation(target)) {
	    return {
	      type: 'bpmn:Association',
	      associationDirection: 'One'
	    };
	  }

	  if (canConnectAssociation(source, target)) {

	    return {
	      type: 'bpmn:Association'
	    };
	  }

	  return false;
	}

	/**
	 * Can an element be dropped into the target element
	 *
	 * @return {boolean}
	 */
	function canDrop(element, target, position) {

	  // can move labels and groups everywhere
	  if (isLabel(element) || isGroup(element)) {
	    return true;
	  }


	  // disallow to create elements on collapsed pools
	  if (is$1(target, 'bpmn:Participant') && !isExpanded(target)) {
	    return false;
	  }

	  // allow to create new participants on
	  // existing collaboration and process diagrams
	  if (is$1(element, 'bpmn:Participant')) {
	    return is$1(target, 'bpmn:Process') || is$1(target, 'bpmn:Collaboration');
	  }

	  // allow moving DataInput / DataOutput within its original container only
	  if (isAny(element, [ 'bpmn:DataInput', 'bpmn:DataOutput' ])) {

	    if (element.parent) {
	      return target === element.parent;
	    }
	  }

	  // allow creating lanes on participants and other lanes only
	  if (is$1(element, 'bpmn:Lane')) {
	    return is$1(target, 'bpmn:Participant') || is$1(target, 'bpmn:Lane');
	  }

	  // disallow dropping boundary events which cannot replace with intermediate event
	  if (is$1(element, 'bpmn:BoundaryEvent') && !isDroppableBoundaryEvent(element)) {
	    return false;
	  }

	  // drop flow elements onto flow element containers
	  // and participants
	  if (is$1(element, 'bpmn:FlowElement') && !is$1(element, 'bpmn:DataStoreReference')) {
	    if (is$1(target, 'bpmn:FlowElementsContainer')) {
	      return isExpanded(target);
	    }

	    return isAny(target, [ 'bpmn:Participant', 'bpmn:Lane' ]);
	  }

	  // account for the fact that data associations are always
	  // rendered and moved to top (Process or Collaboration level)
	  //
	  // artifacts may be placed wherever, too
	  if (isAny(element, [ 'bpmn:Artifact', 'bpmn:DataAssociation', 'bpmn:DataStoreReference' ])) {
	    return isAny(target, [
	      'bpmn:Collaboration',
	      'bpmn:Lane',
	      'bpmn:Participant',
	      'bpmn:Process',
	      'bpmn:SubProcess' ]);
	  }

	  if (is$1(element, 'bpmn:MessageFlow')) {
	    return is$1(target, 'bpmn:Collaboration')
	      || element.source.parent == target
	      || element.target.parent == target;
	  }

	  return false;
	}

	function isDroppableBoundaryEvent(event) {
	  return getBusinessObject(event).cancelActivity && (
	    hasNoEventDefinition(event) || hasCommonBoundaryIntermediateEventDefinition(event)
	  );
	}

	function isBoundaryEvent(element) {
	  return !isLabel(element) && is$1(element, 'bpmn:BoundaryEvent');
	}

	function isLane(element) {
	  return is$1(element, 'bpmn:Lane');
	}

	/**
	 * We treat IntermediateThrowEvents as boundary events during create,
	 * this must be reflected in the rules.
	 */
	function isBoundaryCandidate(element) {
	  if (isBoundaryEvent(element)) {
	    return true;
	  }

	  if (is$1(element, 'bpmn:IntermediateThrowEvent') && hasNoEventDefinition(element)) {
	    return true;
	  }

	  return (
	    is$1(element, 'bpmn:IntermediateCatchEvent') &&
	    hasCommonBoundaryIntermediateEventDefinition(element)
	  );
	}

	function hasNoEventDefinition(element) {
	  var bo = getBusinessObject(element);

	  return bo && !(bo.eventDefinitions && bo.eventDefinitions.length);
	}

	function hasCommonBoundaryIntermediateEventDefinition(element) {
	  return hasOneOfEventDefinitions(element, [
	    'bpmn:MessageEventDefinition',
	    'bpmn:TimerEventDefinition',
	    'bpmn:SignalEventDefinition',
	    'bpmn:ConditionalEventDefinition'
	  ]);
	}

	function hasOneOfEventDefinitions(element, eventDefinitions) {
	  return eventDefinitions.some(function(definition) {
	    return hasEventDefinition$2(element, definition);
	  });
	}

	function isReceiveTaskAfterEventBasedGateway(element) {
	  return (
	    is$1(element, 'bpmn:ReceiveTask') &&
	    find(element.incoming, function(incoming) {
	      return is$1(incoming.source, 'bpmn:EventBasedGateway');
	    })
	  );
	}


	function canAttach(elements, target, source, position) {

	  if (!Array.isArray(elements)) {
	    elements = [ elements ];
	  }

	  // only (re-)attach one element at a time
	  if (elements.length !== 1) {
	    return false;
	  }

	  var element = elements[0];

	  // do not attach labels
	  if (isLabel(element)) {
	    return false;
	  }

	  // only handle boundary events
	  if (!isBoundaryCandidate(element)) {
	    return false;
	  }

	  // disallow drop on event sub processes
	  if (isEventSubProcess(target)) {
	    return false;
	  }

	  // only allow drop on non compensation activities
	  if (!is$1(target, 'bpmn:Activity') || isForCompensation(target)) {
	    return false;
	  }

	  // only attach to subprocess border
	  if (position && !getBoundaryAttachment(position, target)) {
	    return false;
	  }

	  // do not attach on receive tasks after event based gateways
	  if (isReceiveTaskAfterEventBasedGateway(target)) {
	    return false;
	  }

	  return 'attach';
	}


	/**
	 * Defines how to replace elements for a given target.
	 *
	 * Returns an array containing all elements which will be replaced.
	 *
	 * @example
	 *
	 *  [{ id: 'IntermediateEvent_2',
	 *     type: 'bpmn:StartEvent'
	 *   },
	 *   { id: 'IntermediateEvent_5',
	 *     type: 'bpmn:EndEvent'
	 *   }]
	 *
	 * @param  {Array} elements
	 * @param  {Object} target
	 *
	 * @return {Object} an object containing all elements which have to be replaced
	 */
	function canReplace(elements, target, position) {

	  if (!target) {
	    return false;
	  }

	  var canExecute = {
	    replacements: []
	  };

	  forEach(elements, function(element) {

	    if (!isEventSubProcess(target)) {

	      if (is$1(element, 'bpmn:StartEvent') &&
	          element.type !== 'label' &&
	          canDrop(element, target)) {

	        // replace a non-interrupting start event by a blank interrupting start event
	        // when the target is not an event sub process
	        if (!isInterrupting(element)) {
	          canExecute.replacements.push({
	            oldElementId: element.id,
	            newElementType: 'bpmn:StartEvent'
	          });
	        }

	        // replace an error/escalation/compensate start event by a blank interrupting start event
	        // when the target is not an event sub process
	        if (hasErrorEventDefinition(element) ||
	            hasEscalationEventDefinition(element) ||
	            hasCompensateEventDefinition(element)) {
	          canExecute.replacements.push({
	            oldElementId: element.id,
	            newElementType: 'bpmn:StartEvent'
	          });
	        }

	        // replace a typed start event by a blank interrupting start event
	        // when the target is a sub process but not an event sub process
	        if (hasOneOfEventDefinitions(element,
	          [
	            'bpmn:MessageEventDefinition',
	            'bpmn:TimerEventDefinition',
	            'bpmn:SignalEventDefinition',
	            'bpmn:ConditionalEventDefinition'
	          ]) &&
	            is$1(target, 'bpmn:SubProcess')) {
	          canExecute.replacements.push({
	            oldElementId: element.id,
	            newElementType: 'bpmn:StartEvent'
	          });
	        }
	      }
	    }

	    if (!is$1(target, 'bpmn:Transaction')) {
	      if (hasEventDefinition$2(element, 'bpmn:CancelEventDefinition') &&
	          element.type !== 'label') {

	        if (is$1(element, 'bpmn:EndEvent') && canDrop(element, target)) {
	          canExecute.replacements.push({
	            oldElementId: element.id,
	            newElementType: 'bpmn:EndEvent'
	          });
	        }

	        if (is$1(element, 'bpmn:BoundaryEvent') && canAttach(element, target, null, position)) {
	          canExecute.replacements.push({
	            oldElementId: element.id,
	            newElementType: 'bpmn:BoundaryEvent'
	          });
	        }
	      }
	    }
	  });

	  return canExecute.replacements.length ? canExecute : false;
	}

	function canMove(elements, target) {

	  // do not move selection containing lanes
	  if (some(elements, isLane)) {
	    return false;
	  }

	  // allow default move check to start move operation
	  if (!target) {
	    return true;
	  }

	  return elements.every(function(element) {
	    return canDrop(element, target);
	  });
	}

	function canCreate(shape, target, source, position) {

	  if (!target) {
	    return false;
	  }

	  if (isLabel(shape) || isGroup(shape)) {
	    return true;
	  }

	  if (isSame(source, target)) {
	    return false;
	  }

	  // ensure we do not drop the element
	  // into source
	  if (source && isParent(source, target)) {
	    return false;
	  }

	  return canDrop(shape, target) || canInsert(shape, target);
	}

	function canResize(shape, newBounds) {
	  if (is$1(shape, 'bpmn:SubProcess')) {
	    return (
	      isExpanded(shape) && (
	        !newBounds || (newBounds.width >= 100 && newBounds.height >= 80)
	      )
	    );
	  }

	  if (is$1(shape, 'bpmn:Lane')) {
	    return !newBounds || (newBounds.width >= 130 && newBounds.height >= 60);
	  }

	  if (is$1(shape, 'bpmn:Participant')) {
	    return !newBounds || (newBounds.width >= 250 && newBounds.height >= 50);
	  }

	  if (isTextAnnotation(shape)) {
	    return true;
	  }

	  if (isGroup(shape)) {
	    return true;
	  }

	  return false;
	}

	/**
	 * Check, whether one side of the relationship
	 * is a text annotation.
	 */
	function isOneTextAnnotation(source, target) {

	  var sourceTextAnnotation = isTextAnnotation(source),
	      targetTextAnnotation = isTextAnnotation(target);

	  return (
	    (sourceTextAnnotation || targetTextAnnotation) &&
	    (sourceTextAnnotation !== targetTextAnnotation)
	  );
	}


	function canConnectAssociation(source, target) {

	  // do not connect connections
	  if (isConnection$3(source) || isConnection$3(target)) {
	    return false;
	  }

	  // compensation boundary events are exception
	  if (isCompensationBoundary(source) && isForCompensation(target)) {
	    return true;
	  }

	  // don't connect parent <-> child
	  if (isParent(target, source) || isParent(source, target)) {
	    return false;
	  }

	  // allow connection of associations between <!TextAnnotation> and <TextAnnotation>
	  if (isOneTextAnnotation(source, target)) {
	    return true;
	  }

	  // can connect associations where we can connect
	  // data associations, too (!)
	  return !!canConnectDataAssociation(source, target);
	}

	function canConnectMessageFlow(source, target) {

	  // during connect user might move mouse out of canvas
	  // https://github.com/bpmn-io/bpmn-js/issues/1033
	  if (getRootElement(source) && !getRootElement(target)) {
	    return false;
	  }

	  return (
	    isMessageFlowSource(source) &&
	    isMessageFlowTarget(target) &&
	    !isSameOrganization(source, target)
	  );
	}

	function canConnectSequenceFlow(source, target) {

	  if (
	    isEventBasedTarget(target) &&
	    target.incoming.length > 0 &&
	    areOutgoingEventBasedGatewayConnections(target.incoming) &&
	    !is$1(source, 'bpmn:EventBasedGateway')
	  ) {
	    return false;
	  }

	  return isSequenceFlowSource(source) &&
	         isSequenceFlowTarget(target) &&
	         isSameScope(source, target) &&
	         !(is$1(source, 'bpmn:EventBasedGateway') && !isEventBasedTarget(target));
	}


	function canConnectDataAssociation(source, target) {

	  if (isAny(source, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ]) &&
	      isAny(target, [ 'bpmn:Activity', 'bpmn:ThrowEvent' ])) {
	    return { type: 'bpmn:DataInputAssociation' };
	  }

	  if (isAny(target, [ 'bpmn:DataObjectReference', 'bpmn:DataStoreReference' ]) &&
	      isAny(source, [ 'bpmn:Activity', 'bpmn:CatchEvent' ])) {
	    return { type: 'bpmn:DataOutputAssociation' };
	  }

	  return false;
	}

	function canInsert(shape, flow, position) {

	  if (!flow) {
	    return false;
	  }

	  if (Array.isArray(shape)) {
	    if (shape.length !== 1) {
	      return false;
	    }

	    shape = shape[0];
	  }

	  if (flow.source === shape ||
	      flow.target === shape) {
	    return false;
	  }

	  // return true if we can drop on the
	  // underlying flow parent
	  //
	  // at this point we are not really able to talk
	  // about connection rules (yet)

	  return (
	    isAny(flow, [ 'bpmn:SequenceFlow', 'bpmn:MessageFlow' ]) &&
	    !isLabel(flow) &&
	    is$1(shape, 'bpmn:FlowNode') &&
	    !is$1(shape, 'bpmn:BoundaryEvent') &&
	    canDrop(shape, flow.parent));
	}

	function includes$1(elements, element) {
	  return (elements && element) && elements.indexOf(element) !== -1;
	}

	function canCopy(elements, element) {
	  if (isLabel(element)) {
	    return true;
	  }

	  if (is$1(element, 'bpmn:Lane') && !includes$1(elements, element.parent)) {
	    return false;
	  }

	  return true;
	}

	function isOutgoingEventBasedGatewayConnection(connection) {

	  if (connection && connection.source) {
	    return is$1(connection.source, 'bpmn:EventBasedGateway');
	  }
	}

	function areOutgoingEventBasedGatewayConnections(connections) {
	  connections = connections || [];

	  return connections.some(isOutgoingEventBasedGatewayConnection);
	}

	function getRootElement(element) {
	  return getParent$1(element, 'bpmn:Process') || getParent$1(element, 'bpmn:Collaboration');
	}

	var RulesModule$1 = {
	  __depends__: [
	    RulesModule
	  ],
	  __init__: [ 'bpmnRules' ],
	  bpmnRules: [ 'type', BpmnRules ]
	};

	var HIGH_PRIORITY$c = 2000;

	function BpmnDiOrdering(eventBus, canvas) {

	  eventBus.on('saveXML.start', HIGH_PRIORITY$c, orderDi);

	  function orderDi() {
	    var root = canvas.getRootElement(),
	        rootDi = getBusinessObject(root).di,
	        elements,
	        diElements;

	    elements = selfAndAllChildren([ root ], false);

	    // only bpmndi:Shape and bpmndi:Edge can be direct children of bpmndi:Plane
	    elements = filter(elements, function(element) {
	      return element !== root && !element.labelTarget;
	    });

	    diElements = map(elements, getDi);

	    rootDi.set('planeElement', diElements);
	  }
	}

	BpmnDiOrdering.$inject = [ 'eventBus', 'canvas' ];

	var DiOrderingModule = {
	  __init__: [
	    'bpmnDiOrdering'
	  ],
	  bpmnDiOrdering: [ 'type', BpmnDiOrdering ]
	};

	/**
	 * An abstract provider that allows modelers to implement a custom
	 * ordering of diagram elements on the canvas.
	 *
	 * It makes sure that the order is always preserved during element
	 * creation and move operations.
	 *
	 * In order to use this behavior, inherit from it and override
	 * the method {@link OrderingProvider#getOrdering}.
	 *
	 * @example
	 *
	 * ```javascript
	 * function CustomOrderingProvider(eventBus) {
	 *   OrderingProvider.call(this, eventBus);
	 *
	 *   this.getOrdering = function(element, newParent) {
	 *     // always insert elements at the front
	 *     // when moving
	 *     return {
	 *       index: 0,
	 *       parent: newParent
	 *     };
	 *   };
	 * }
	 * ```
	 *
	 * @param {EventBus} eventBus
	 */
	function OrderingProvider(eventBus) {

	  CommandInterceptor.call(this, eventBus);


	  var self = this;

	  this.preExecute([ 'shape.create', 'connection.create' ], function(event) {

	    var context = event.context,
	        element = context.shape || context.connection,
	        parent = context.parent;

	    var ordering = self.getOrdering(element, parent);

	    if (ordering) {

	      if (ordering.parent !== undefined) {
	        context.parent = ordering.parent;
	      }

	      context.parentIndex = ordering.index;
	    }
	  });

	  this.preExecute([ 'shape.move', 'connection.move' ], function(event) {

	    var context = event.context,
	        element = context.shape || context.connection,
	        parent = context.newParent || element.parent;

	    var ordering = self.getOrdering(element, parent);

	    if (ordering) {

	      if (ordering.parent !== undefined) {
	        context.newParent = ordering.parent;
	      }

	      context.newParentIndex = ordering.index;
	    }
	  });
	}

	/**
	 * Return a custom ordering of the element, both in terms
	 * of parent element and index in the new parent.
	 *
	 * Implementors of this method must return an object with
	 * `parent` _and_ `index` in it.
	 *
	 * @param {djs.model.Base} element
	 * @param {djs.model.Shape} newParent
	 *
	 * @return {Object} ordering descriptor
	 */
	OrderingProvider.prototype.getOrdering = function(element, newParent) {
	  return null;
	};

	inherits_browser(OrderingProvider, CommandInterceptor);

	/**
	 * a simple ordering provider that makes sure:
	 *
	 * (0) labels and groups are rendered always on top
	 * (1) elements are ordered by a {level} property
	 */
	function BpmnOrderingProvider(eventBus, canvas, translate) {

	  OrderingProvider.call(this, eventBus);

	  var orders = [
	    { type: 'bpmn:SubProcess', order: { level: 6 } },
	    {
	      type: 'bpmn:SequenceFlow',
	      order: {
	        level: 3,
	        containers: [
	          'bpmn:Participant',
	          'bpmn:FlowElementsContainer'
	        ]
	      }
	    },

	    // handle DataAssociation(s) like message flows and render them always on top
	    {
	      type: 'bpmn:DataAssociation',
	      order: {
	        level: 9,
	        containers: [
	          'bpmn:Collaboration',
	          'bpmn:Process'
	        ]
	      }
	    },
	    {
	      type: 'bpmn:MessageFlow', order: {
	        level: 9,
	        containers: [ 'bpmn:Collaboration' ]
	      }
	    },
	    {
	      type: 'bpmn:Association',
	      order: {
	        level: 6,
	        containers: [
	          'bpmn:Participant',
	          'bpmn:FlowElementsContainer',
	          'bpmn:Collaboration'
	        ]
	      }
	    },
	    { type: 'bpmn:BoundaryEvent', order: { level: 8 } },
	    {
	      type: 'bpmn:Group',
	      order: {
	        level: 10,
	        containers: [
	          'bpmn:Collaboration',
	          'bpmn:Process'
	        ]
	      }
	    },
	    { type: 'bpmn:FlowElement', order: { level: 5 } },
	    { type: 'bpmn:Participant', order: { level: -2 } },
	    { type: 'bpmn:Lane', order: { level: -1 } }
	  ];

	  function computeOrder(element) {
	    if (element.labelTarget) {
	      return { level: 10 };
	    }

	    var entry = find(orders, function(o) {
	      return isAny(element, [ o.type ]);
	    });

	    return entry && entry.order || { level: 1 };
	  }

	  function getOrder(element) {

	    var order = element.order;

	    if (!order) {
	      element.order = order = computeOrder(element);
	    }

	    return order;
	  }

	  function findActualParent(element, newParent, containers) {

	    var actualParent = newParent;

	    while (actualParent) {

	      if (isAny(actualParent, containers)) {
	        break;
	      }

	      actualParent = actualParent.parent;
	    }

	    if (!actualParent) {
	      throw new Error(translate('no parent for {element} in {parent}', {
	        element: element.id,
	        parent: newParent.id
	      }));
	    }

	    return actualParent;
	  }

	  this.getOrdering = function(element, newParent) {

	    // render labels always on top
	    if (element.labelTarget) {
	      return {
	        parent: canvas.getRootElement(),
	        index: -1
	      };
	    }

	    var elementOrder = getOrder(element);


	    if (elementOrder.containers) {
	      newParent = findActualParent(element, newParent, elementOrder.containers);
	    }


	    var currentIndex = newParent.children.indexOf(element);

	    var insertIndex = findIndex(newParent.children, function(child) {

	      // do not compare with labels, they are created
	      // in the wrong order (right after elements) during import and
	      // mess up the positioning.
	      if (!element.labelTarget && child.labelTarget) {
	        return false;
	      }

	      return elementOrder.level < getOrder(child).level;
	    });


	    // if the element is already in the child list at
	    // a smaller index, we need to adjust the insert index.
	    // this takes into account that the element is being removed
	    // before being re-inserted
	    if (insertIndex !== -1) {
	      if (currentIndex !== -1 && currentIndex < insertIndex) {
	        insertIndex -= 1;
	      }
	    }

	    return {
	      index: insertIndex,
	      parent: newParent
	    };
	  };
	}

	BpmnOrderingProvider.$inject = [ 'eventBus', 'canvas', 'translate' ];

	inherits_browser(BpmnOrderingProvider, OrderingProvider);

	var OrderingModule = {
	  __depends__: [
	    translate$2
	  ],
	  __init__: [ 'bpmnOrderingProvider' ],
	  bpmnOrderingProvider: [ 'type', BpmnOrderingProvider ]
	};

	/**
	 * A service that offers un- and redoable execution of commands.
	 *
	 * The command stack is responsible for executing modeling actions
	 * in a un- and redoable manner. To do this it delegates the actual
	 * command execution to {@link CommandHandler}s.
	 *
	 * Command handlers provide {@link CommandHandler#execute(ctx)} and
	 * {@link CommandHandler#revert(ctx)} methods to un- and redo a command
	 * identified by a command context.
	 *
	 *
	 * ## Life-Cycle events
	 *
	 * In the process the command stack fires a number of life-cycle events
	 * that other components to participate in the command execution.
	 *
	 *    * preExecute
	 *    * preExecuted
	 *    * execute
	 *    * executed
	 *    * postExecute
	 *    * postExecuted
	 *    * revert
	 *    * reverted
	 *
	 * A special event is used for validating, whether a command can be
	 * performed prior to its execution.
	 *
	 *    * canExecute
	 *
	 * Each of the events is fired as `commandStack.{eventName}` and
	 * `commandStack.{commandName}.{eventName}`, respectively. This gives
	 * components fine grained control on where to hook into.
	 *
	 * The event object fired transports `command`, the name of the
	 * command and `context`, the command context.
	 *
	 *
	 * ## Creating Command Handlers
	 *
	 * Command handlers should provide the {@link CommandHandler#execute(ctx)}
	 * and {@link CommandHandler#revert(ctx)} methods to implement
	 * redoing and undoing of a command.
	 *
	 * A command handler _must_ ensure undo is performed properly in order
	 * not to break the undo chain. It must also return the shapes that
	 * got changed during the `execute` and `revert` operations.
	 *
	 * Command handlers may execute other modeling operations (and thus
	 * commands) in their `preExecute` and `postExecute` phases. The command
	 * stack will properly group all commands together into a logical unit
	 * that may be re- and undone atomically.
	 *
	 * Command handlers must not execute other commands from within their
	 * core implementation (`execute`, `revert`).
	 *
	 *
	 * ## Change Tracking
	 *
	 * During the execution of the CommandStack it will keep track of all
	 * elements that have been touched during the command's execution.
	 *
	 * At the end of the CommandStack execution it will notify interested
	 * components via an 'elements.changed' event with all the dirty
	 * elements.
	 *
	 * The event can be picked up by components that are interested in the fact
	 * that elements have been changed. One use case for this is updating
	 * their graphical representation after moving / resizing or deletion.
	 *
	 * @see CommandHandler
	 *
	 * @param {EventBus} eventBus
	 * @param {Injector} injector
	 */
	function CommandStack(eventBus, injector) {

	  /**
	   * A map of all registered command handlers.
	   *
	   * @type {Object}
	   */
	  this._handlerMap = {};

	  /**
	   * A stack containing all re/undoable actions on the diagram
	   *
	   * @type {Array<Object>}
	   */
	  this._stack = [];

	  /**
	   * The current index on the stack
	   *
	   * @type {number}
	   */
	  this._stackIdx = -1;

	  /**
	   * Current active commandStack execution
	   *
	   * @type {Object}
	   * @property {Object[]} actions
	   * @property {Object[]} dirty
	   * @property { 'undo' | 'redo' | 'clear' | 'execute' | null } trigger the cause of the current excecution
	   */
	  this._currentExecution = {
	    actions: [],
	    dirty: [],
	    trigger: null
	  };


	  this._injector = injector;
	  this._eventBus = eventBus;

	  this._uid = 1;

	  eventBus.on([
	    'diagram.destroy',
	    'diagram.clear'
	  ], function() {
	    this.clear(false);
	  }, this);
	}

	CommandStack.$inject = [ 'eventBus', 'injector' ];


	/**
	 * Execute a command
	 *
	 * @param {string} command the command to execute
	 * @param {Object} context the environment to execute the command in
	 */
	CommandStack.prototype.execute = function(command, context) {
	  if (!command) {
	    throw new Error('command required');
	  }

	  this._currentExecution.trigger = 'execute';

	  var action = { command: command, context: context };

	  this._pushAction(action);
	  this._internalExecute(action);
	  this._popAction(action);
	};


	/**
	 * Ask whether a given command can be executed.
	 *
	 * Implementors may hook into the mechanism on two ways:
	 *
	 *   * in event listeners:
	 *
	 *     Users may prevent the execution via an event listener.
	 *     It must prevent the default action for `commandStack.(<command>.)canExecute` events.
	 *
	 *   * in command handlers:
	 *
	 *     If the method {@link CommandHandler#canExecute} is implemented in a handler
	 *     it will be called to figure out whether the execution is allowed.
	 *
	 * @param  {string} command the command to execute
	 * @param  {Object} context the environment to execute the command in
	 *
	 * @return {boolean} true if the command can be executed
	 */
	CommandStack.prototype.canExecute = function(command, context) {

	  var action = { command: command, context: context };

	  var handler = this._getHandler(command);

	  var result = this._fire(command, 'canExecute', action);

	  // handler#canExecute will only be called if no listener
	  // decided on a result already
	  if (result === undefined) {
	    if (!handler) {
	      return false;
	    }

	    if (handler.canExecute) {
	      result = handler.canExecute(context);
	    }
	  }

	  return result;
	};


	/**
	 * Clear the command stack, erasing all undo / redo history
	 */
	CommandStack.prototype.clear = function(emit) {
	  this._stack.length = 0;
	  this._stackIdx = -1;

	  if (emit !== false) {
	    this._fire('changed', { trigger: 'clear' });
	  }
	};


	/**
	 * Undo last command(s)
	 */
	CommandStack.prototype.undo = function() {
	  var action = this._getUndoAction(),
	      next;

	  if (action) {
	    this._currentExecution.trigger = 'undo';

	    this._pushAction(action);

	    while (action) {
	      this._internalUndo(action);
	      next = this._getUndoAction();

	      if (!next || next.id !== action.id) {
	        break;
	      }

	      action = next;
	    }

	    this._popAction();
	  }
	};


	/**
	 * Redo last command(s)
	 */
	CommandStack.prototype.redo = function() {
	  var action = this._getRedoAction(),
	      next;

	  if (action) {
	    this._currentExecution.trigger = 'redo';

	    this._pushAction(action);

	    while (action) {
	      this._internalExecute(action, true);
	      next = this._getRedoAction();

	      if (!next || next.id !== action.id) {
	        break;
	      }

	      action = next;
	    }

	    this._popAction();
	  }
	};


	/**
	 * Register a handler instance with the command stack
	 *
	 * @param {string} command
	 * @param {CommandHandler} handler
	 */
	CommandStack.prototype.register = function(command, handler) {
	  this._setHandler(command, handler);
	};


	/**
	 * Register a handler type with the command stack
	 * by instantiating it and injecting its dependencies.
	 *
	 * @param {string} command
	 * @param {Function} a constructor for a {@link CommandHandler}
	 */
	CommandStack.prototype.registerHandler = function(command, handlerCls) {

	  if (!command || !handlerCls) {
	    throw new Error('command and handlerCls must be defined');
	  }

	  var handler = this._injector.instantiate(handlerCls);
	  this.register(command, handler);
	};

	CommandStack.prototype.canUndo = function() {
	  return !!this._getUndoAction();
	};

	CommandStack.prototype.canRedo = function() {
	  return !!this._getRedoAction();
	};

	// stack access  //////////////////////

	CommandStack.prototype._getRedoAction = function() {
	  return this._stack[this._stackIdx + 1];
	};


	CommandStack.prototype._getUndoAction = function() {
	  return this._stack[this._stackIdx];
	};


	// internal functionality //////////////////////

	CommandStack.prototype._internalUndo = function(action) {
	  var self = this;

	  var command = action.command,
	      context = action.context;

	  var handler = this._getHandler(command);

	  // guard against illegal nested command stack invocations
	  this._atomicDo(function() {
	    self._fire(command, 'revert', action);

	    if (handler.revert) {
	      self._markDirty(handler.revert(context));
	    }

	    self._revertedAction(action);

	    self._fire(command, 'reverted', action);
	  });
	};


	CommandStack.prototype._fire = function(command, qualifier, event) {
	  if (arguments.length < 3) {
	    event = qualifier;
	    qualifier = null;
	  }

	  var names = qualifier ? [ command + '.' + qualifier, qualifier ] : [ command ],
	      i, name, result;

	  event = this._eventBus.createEvent(event);

	  for (i = 0; (name = names[i]); i++) {
	    result = this._eventBus.fire('commandStack.' + name, event);

	    if (event.cancelBubble) {
	      break;
	    }
	  }

	  return result;
	};

	CommandStack.prototype._createId = function() {
	  return this._uid++;
	};

	CommandStack.prototype._atomicDo = function(fn) {

	  var execution = this._currentExecution;

	  execution.atomic = true;

	  try {
	    fn();
	  } finally {
	    execution.atomic = false;
	  }
	};

	CommandStack.prototype._internalExecute = function(action, redo) {
	  var self = this;

	  var command = action.command,
	      context = action.context;

	  var handler = this._getHandler(command);

	  if (!handler) {
	    throw new Error('no command handler registered for <' + command + '>');
	  }

	  this._pushAction(action);

	  if (!redo) {
	    this._fire(command, 'preExecute', action);

	    if (handler.preExecute) {
	      handler.preExecute(context);
	    }

	    this._fire(command, 'preExecuted', action);
	  }

	  // guard against illegal nested command stack invocations
	  this._atomicDo(function() {

	    self._fire(command, 'execute', action);

	    if (handler.execute) {

	      // actual execute + mark return results as dirty
	      self._markDirty(handler.execute(context));
	    }

	    // log to stack
	    self._executedAction(action, redo);

	    self._fire(command, 'executed', action);
	  });

	  if (!redo) {
	    this._fire(command, 'postExecute', action);

	    if (handler.postExecute) {
	      handler.postExecute(context);
	    }

	    this._fire(command, 'postExecuted', action);
	  }

	  this._popAction(action);
	};


	CommandStack.prototype._pushAction = function(action) {

	  var execution = this._currentExecution,
	      actions = execution.actions;

	  var baseAction = actions[0];

	  if (execution.atomic) {
	    throw new Error('illegal invocation in <execute> or <revert> phase (action: ' + action.command + ')');
	  }

	  if (!action.id) {
	    action.id = (baseAction && baseAction.id) || this._createId();
	  }

	  actions.push(action);
	};


	CommandStack.prototype._popAction = function() {
	  var execution = this._currentExecution,
	      trigger = execution.trigger,
	      actions = execution.actions,
	      dirty = execution.dirty;

	  actions.pop();

	  if (!actions.length) {
	    this._eventBus.fire('elements.changed', { elements: uniqueBy('id', dirty.reverse()) });

	    dirty.length = 0;

	    this._fire('changed', { trigger: trigger });

	    execution.trigger = null;
	  }
	};


	CommandStack.prototype._markDirty = function(elements) {
	  var execution = this._currentExecution;

	  if (!elements) {
	    return;
	  }

	  elements = isArray(elements) ? elements : [ elements ];

	  execution.dirty = execution.dirty.concat(elements);
	};


	CommandStack.prototype._executedAction = function(action, redo) {
	  var stackIdx = ++this._stackIdx;

	  if (!redo) {
	    this._stack.splice(stackIdx, this._stack.length, action);
	  }
	};


	CommandStack.prototype._revertedAction = function(action) {
	  this._stackIdx--;
	};


	CommandStack.prototype._getHandler = function(command) {
	  return this._handlerMap[command];
	};

	CommandStack.prototype._setHandler = function(command, handler) {
	  if (!command || !handler) {
	    throw new Error('command and handler required');
	  }

	  if (this._handlerMap[command]) {
	    throw new Error('overriding handler for command <' + command + '>');
	  }

	  this._handlerMap[command] = handler;
	};

	var CommandModule = {
	  commandStack: [ 'type', CommandStack ]
	};

	// document wide unique tooltip ids
	var ids$1 = new IdGenerator('tt');


	function createRoot$1(parentNode) {
	  var root = domify(
	    '<div class="djs-tooltip-container" style="position: absolute; width: 0; height: 0;" />'
	  );

	  parentNode.insertBefore(root, parentNode.firstChild);

	  return root;
	}


	function setPosition$1(el, x, y) {
	  assign(el.style, { left: x + 'px', top: y + 'px' });
	}

	function setVisible$1(el, visible) {
	  el.style.display = visible === false ? 'none' : '';
	}


	var tooltipClass = 'djs-tooltip',
	    tooltipSelector = '.' + tooltipClass;

	/**
	 * A service that allows users to render tool tips on the diagram.
	 *
	 * The tooltip service will take care of updating the tooltip positioning
	 * during navigation + zooming.
	 *
	 * @example
	 *
	 * ```javascript
	 *
	 * // add a pink badge on the top left of the shape
	 * tooltips.add({
	 *   position: {
	 *     x: 50,
	 *     y: 100
	 *   },
	 *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>'
	 * });
	 *
	 * // or with optional life span
	 * tooltips.add({
	 *   position: {
	 *     top: -5,
	 *     left: -5
	 *   },
	 *   html: '<div style="width: 10px; background: fuchsia; color: white;">0</div>',
	 *   ttl: 2000
	 * });
	 *
	 * // remove a tool tip
	 * var id = tooltips.add(...);
	 * tooltips.remove(id);
	 * ```
	 *
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 */
	function Tooltips(eventBus, canvas) {

	  this._eventBus = eventBus;
	  this._canvas = canvas;

	  this._ids = ids$1;

	  this._tooltipDefaults = {
	    show: {
	      minZoom: 0.7,
	      maxZoom: 5.0
	    }
	  };

	  /**
	   * Mapping tooltipId -> tooltip
	   */
	  this._tooltips = {};

	  // root html element for all tooltips
	  this._tooltipRoot = createRoot$1(canvas.getContainer());


	  var self = this;

	  delegate.bind(this._tooltipRoot, tooltipSelector, 'mousedown', function(event) {
	    event.stopPropagation();
	  });

	  delegate.bind(this._tooltipRoot, tooltipSelector, 'mouseover', function(event) {
	    self.trigger('mouseover', event);
	  });

	  delegate.bind(this._tooltipRoot, tooltipSelector, 'mouseout', function(event) {
	    self.trigger('mouseout', event);
	  });

	  this._init();
	}


	Tooltips.$inject = [ 'eventBus', 'canvas' ];


	/**
	 * Adds a HTML tooltip to the diagram
	 *
	 * @param {Object}               tooltip   the tooltip configuration
	 *
	 * @param {string|DOMElement}    tooltip.html                 html element to use as an tooltip
	 * @param {Object}               [tooltip.show]               show configuration
	 * @param {number}               [tooltip.show.minZoom]       minimal zoom level to show the tooltip
	 * @param {number}               [tooltip.show.maxZoom]       maximum zoom level to show the tooltip
	 * @param {Object}               tooltip.position             where to attach the tooltip
	 * @param {number}               [tooltip.position.left]      relative to element bbox left attachment
	 * @param {number}               [tooltip.position.top]       relative to element bbox top attachment
	 * @param {number}               [tooltip.position.bottom]    relative to element bbox bottom attachment
	 * @param {number}               [tooltip.position.right]     relative to element bbox right attachment
	 * @param {number}               [tooltip.timeout=-1]
	 *
	 * @return {string}              id that may be used to reference the tooltip for update or removal
	 */
	Tooltips.prototype.add = function(tooltip) {

	  if (!tooltip.position) {
	    throw new Error('must specifiy tooltip position');
	  }

	  if (!tooltip.html) {
	    throw new Error('must specifiy tooltip html');
	  }

	  var id = this._ids.next();

	  tooltip = assign({}, this._tooltipDefaults, tooltip, {
	    id: id
	  });

	  this._addTooltip(tooltip);

	  if (tooltip.timeout) {
	    this.setTimeout(tooltip);
	  }

	  return id;
	};

	Tooltips.prototype.trigger = function(action, event) {

	  var node = event.delegateTarget || event.target;

	  var tooltip = this.get(attr(node, 'data-tooltip-id'));

	  if (!tooltip) {
	    return;
	  }

	  if (action === 'mouseover' && tooltip.timeout) {
	    this.clearTimeout(tooltip);
	  }

	  if (action === 'mouseout' && tooltip.timeout) {

	    // cut timeout after mouse out
	    tooltip.timeout = 1000;

	    this.setTimeout(tooltip);
	  }
	};

	/**
	 * Get a tooltip with the given id
	 *
	 * @param {string} id
	 */
	Tooltips.prototype.get = function(id) {

	  if (typeof id !== 'string') {
	    id = id.id;
	  }

	  return this._tooltips[id];
	};

	Tooltips.prototype.clearTimeout = function(tooltip) {

	  tooltip = this.get(tooltip);

	  if (!tooltip) {
	    return;
	  }

	  var removeTimer = tooltip.removeTimer;

	  if (removeTimer) {
	    clearTimeout(removeTimer);
	    tooltip.removeTimer = null;
	  }
	};

	Tooltips.prototype.setTimeout = function(tooltip) {

	  tooltip = this.get(tooltip);

	  if (!tooltip) {
	    return;
	  }

	  this.clearTimeout(tooltip);

	  var self = this;

	  tooltip.removeTimer = setTimeout(function() {
	    self.remove(tooltip);
	  }, tooltip.timeout);
	};

	/**
	 * Remove an tooltip with the given id
	 *
	 * @param {string} id
	 */
	Tooltips.prototype.remove = function(id) {

	  var tooltip = this.get(id);

	  if (tooltip) {
	    remove(tooltip.html);
	    remove(tooltip.htmlContainer);

	    delete tooltip.htmlContainer;

	    delete this._tooltips[tooltip.id];
	  }
	};


	Tooltips.prototype.show = function() {
	  setVisible$1(this._tooltipRoot);
	};


	Tooltips.prototype.hide = function() {
	  setVisible$1(this._tooltipRoot, false);
	};


	Tooltips.prototype._updateRoot = function(viewbox) {
	  var a = viewbox.scale || 1;
	  var d = viewbox.scale || 1;

	  var matrix = 'matrix(' + a + ',0,0,' + d + ',' + (-1 * viewbox.x * a) + ',' + (-1 * viewbox.y * d) + ')';

	  this._tooltipRoot.style.transform = matrix;
	  this._tooltipRoot.style['-ms-transform'] = matrix;
	};


	Tooltips.prototype._addTooltip = function(tooltip) {

	  var id = tooltip.id,
	      html = tooltip.html,
	      htmlContainer,
	      tooltipRoot = this._tooltipRoot;

	  // unwrap jquery (for those who need it)
	  if (html.get && html.constructor.prototype.jquery) {
	    html = html.get(0);
	  }

	  // create proper html elements from
	  // tooltip HTML strings
	  if (isString(html)) {
	    html = domify(html);
	  }

	  htmlContainer = domify('<div data-tooltip-id="' + id + '" class="' + tooltipClass + '" style="position: absolute">');

	  htmlContainer.appendChild(html);

	  if (tooltip.type) {
	    classes(htmlContainer).add('djs-tooltip-' + tooltip.type);
	  }

	  if (tooltip.className) {
	    classes(htmlContainer).add(tooltip.className);
	  }

	  tooltip.htmlContainer = htmlContainer;

	  tooltipRoot.appendChild(htmlContainer);

	  this._tooltips[id] = tooltip;

	  this._updateTooltip(tooltip);
	};


	Tooltips.prototype._updateTooltip = function(tooltip) {

	  var position = tooltip.position,
	      htmlContainer = tooltip.htmlContainer;

	  // update overlay html based on tooltip x, y

	  setPosition$1(htmlContainer, position.x, position.y);
	};


	Tooltips.prototype._updateTooltipVisibilty = function(viewbox) {

	  forEach(this._tooltips, function(tooltip) {
	    var show = tooltip.show,
	        htmlContainer = tooltip.htmlContainer,
	        visible = true;

	    if (show) {
	      if (show.minZoom > viewbox.scale ||
	          show.maxZoom < viewbox.scale) {
	        visible = false;
	      }

	      setVisible$1(htmlContainer, visible);
	    }
	  });
	};

	Tooltips.prototype._init = function() {

	  var self = this;

	  // scroll/zoom integration

	  function updateViewbox(viewbox) {
	    self._updateRoot(viewbox);
	    self._updateTooltipVisibilty(viewbox);

	    self.show();
	  }

	  this._eventBus.on('canvas.viewbox.changing', function(event) {
	    self.hide();
	  });

	  this._eventBus.on('canvas.viewbox.changed', function(event) {
	    updateViewbox(event.viewbox);
	  });
	};

	var TooltipsModule = {
	  __init__: [ 'tooltips' ],
	  tooltips: [ 'type', Tooltips ]
	};

	/**
	 * Remove from the beginning of a collection until it is empty.
	 *
	 * This is a null-safe operation that ensures elements
	 * are being removed from the given collection until the
	 * collection is empty.
	 *
	 * The implementation deals with the fact that a remove operation
	 * may touch, i.e. remove multiple elements in the collection
	 * at a time.
	 *
	 * @param {Array<Object>} [collection]
	 * @param {Function} removeFn
	 *
	 * @return {Array<Object>} the cleared collection
	 */
	function saveClear(collection, removeFn) {

	  if (typeof removeFn !== 'function') {
	    throw new Error('removeFn iterator must be a function');
	  }

	  if (!collection) {
	    return;
	  }

	  var e;

	  while ((e = collection[0])) {
	    removeFn(e);
	  }

	  return collection;
	}

	var LOW_PRIORITY$g = 250,
	    HIGH_PRIORITY$d = 1400;


	/**
	 * A handler that makes sure labels are properly moved with
	 * their label targets.
	 *
	 * @param {didi.Injector} injector
	 * @param {EventBus} eventBus
	 * @param {Modeling} modeling
	 */
	function LabelSupport(injector, eventBus, modeling) {

	  CommandInterceptor.call(this, eventBus);

	  var movePreview = injector.get('movePreview', false);

	  // remove labels from the collection that are being
	  // moved with other elements anyway
	  eventBus.on('shape.move.start', HIGH_PRIORITY$d, function(e) {

	    var context = e.context,
	        shapes = context.shapes,
	        validatedShapes = context.validatedShapes;

	    context.shapes = removeLabels(shapes);
	    context.validatedShapes = removeLabels(validatedShapes);
	  });

	  // add labels to visual's group
	  movePreview && eventBus.on('shape.move.start', LOW_PRIORITY$g, function(e) {

	    var context = e.context,
	        shapes = context.shapes;

	    var labels = [];

	    forEach(shapes, function(element) {

	      forEach(element.labels, function(label) {

	        if (!label.hidden && context.shapes.indexOf(label) === -1) {
	          labels.push(label);
	        }

	        if (element.labelTarget) {
	          labels.push(element);
	        }
	      });
	    });

	    forEach(labels, function(label) {
	      movePreview.makeDraggable(context, label, true);
	    });

	  });

	  // add all labels to move closure
	  this.preExecuted('elements.move', HIGH_PRIORITY$d, function(e) {
	    var context = e.context,
	        closure = context.closure,
	        enclosedElements = closure.enclosedElements;

	    var enclosedLabels = [];

	    // find labels that are not part of
	    // move closure yet and add them
	    forEach(enclosedElements, function(element) {
	      forEach(element.labels, function(label) {

	        if (!enclosedElements[label.id]) {
	          enclosedLabels.push(label);
	        }
	      });
	    });

	    closure.addAll(enclosedLabels);
	  });


	  this.preExecute([
	    'connection.delete',
	    'shape.delete'
	  ], function(e) {

	    var context = e.context,
	        element = context.connection || context.shape;

	    saveClear(element.labels, function(label) {
	      modeling.removeShape(label, { nested: true });
	    });
	  });


	  this.execute('shape.delete', function(e) {

	    var context = e.context,
	        shape = context.shape,
	        labelTarget = shape.labelTarget;

	    // unset labelTarget
	    if (labelTarget) {
	      context.labelTargetIndex = indexOf$1(labelTarget.labels, shape);
	      context.labelTarget = labelTarget;

	      shape.labelTarget = null;
	    }
	  });

	  this.revert('shape.delete', function(e) {

	    var context = e.context,
	        shape = context.shape,
	        labelTarget = context.labelTarget,
	        labelTargetIndex = context.labelTargetIndex;

	    // restore labelTarget
	    if (labelTarget) {
	      add$1(labelTarget.labels, shape, labelTargetIndex);

	      shape.labelTarget = labelTarget;
	    }
	  });

	}

	inherits_browser(LabelSupport, CommandInterceptor);

	LabelSupport.$inject = [
	  'injector',
	  'eventBus',
	  'modeling'
	];


	/**
	 * Return a filtered list of elements that do not
	 * contain attached elements with hosts being part
	 * of the selection.
	 *
	 * @param  {Array<djs.model.Base>} elements
	 *
	 * @return {Array<djs.model.Base>} filtered
	 */
	function removeLabels(elements) {

	  return filter(elements, function(element) {

	    // filter out labels that are move together
	    // with their label targets
	    return elements.indexOf(element.labelTarget) === -1;
	  });
	}

	var LabelSupportModule = {
	  __init__: [ 'labelSupport'],
	  labelSupport: [ 'type', LabelSupport ]
	};

	var LOW_PRIORITY$h = 251,
	    HIGH_PRIORITY$e = 1401;

	var MARKER_ATTACH$1 = 'attach-ok';


	/**
	 * Adds the notion of attached elements to the modeler.
	 *
	 * Optionally depends on `diagram-js/lib/features/move` to render
	 * the attached elements during move preview.
	 *
	 * Optionally depends on `diagram-js/lib/features/label-support`
	 * to render attached labels during move preview.
	 *
	 * @param {didi.Injector} injector
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 * @param {Rules} rules
	 * @param {Modeling} modeling
	 */
	function AttachSupport(injector, eventBus, canvas, rules, modeling) {

	  CommandInterceptor.call(this, eventBus);

	  var movePreview = injector.get('movePreview', false);


	  // remove all the attached elements from the shapes to be validated
	  // add all the attached shapes to the overall list of moved shapes
	  eventBus.on('shape.move.start', HIGH_PRIORITY$e, function(e) {

	    var context = e.context,
	        shapes = context.shapes,
	        validatedShapes = context.validatedShapes;

	    context.shapes = addAttached(shapes);

	    context.validatedShapes = removeAttached(validatedShapes);
	  });

	  // add attachers to the visual's group
	  movePreview && eventBus.on('shape.move.start', LOW_PRIORITY$h, function(e) {

	    var context = e.context,
	        shapes = context.shapes,
	        attachers = getAttachers(shapes);

	    forEach(attachers, function(attacher) {
	      movePreview.makeDraggable(context, attacher, true);

	      forEach(attacher.labels, function(label) {
	        movePreview.makeDraggable(context, label, true);
	      });
	    });
	  });

	  // add attach-ok marker to current host
	  movePreview && eventBus.on('shape.move.start', function(event) {
	    var context = event.context,
	        shapes = context.shapes;

	    if (shapes.length !== 1) {
	      return;
	    }

	    var shape = shapes[0];

	    var host = shape.host;

	    if (host) {
	      canvas.addMarker(host, MARKER_ATTACH$1);

	      eventBus.once([
	        'shape.move.out',
	        'shape.move.cleanup'
	      ], function() {
	        canvas.removeMarker(host, MARKER_ATTACH$1);
	      });
	    }
	  });

	  // add all attachers to move closure
	  this.preExecuted('elements.move', HIGH_PRIORITY$e, function(e) {
	    var context = e.context,
	        closure = context.closure,
	        shapes = context.shapes,
	        attachers = getAttachers(shapes);

	    forEach(attachers, function(attacher) {
	      closure.add(attacher, closure.topLevel[attacher.host.id]);
	    });
	  });

	  // perform the attaching after shapes are done moving
	  this.postExecuted('elements.move', function(e) {

	    var context = e.context,
	        shapes = context.shapes,
	        newHost = context.newHost,
	        attachers;

	    // only single elements can be attached
	    // multiply elements can be detached
	    if (newHost && shapes.length !== 1) {
	      return;
	    }

	    if (newHost) {
	      attachers = shapes;
	    } else {

	      // find attachers moved without host
	      attachers = filter(shapes, function(shape) {
	        var host = shape.host;

	        return isAttacher$1(shape) && !includes$2(shapes, host);
	      });
	    }

	    forEach(attachers, function(attacher) {
	      modeling.updateAttachment(attacher, newHost);
	    });
	  });

	  // ensure invalid attachment connections are removed
	  this.postExecuted('elements.move', function(e) {

	    var shapes = e.context.shapes;

	    forEach(shapes, function(shape) {

	      forEach(shape.attachers, function(attacher) {

	        // remove invalid outgoing connections
	        forEach(attacher.outgoing.slice(), function(connection) {
	          var allowed = rules.allowed('connection.reconnect', {
	            connection: connection,
	            source: connection.source,
	            target: connection.target
	          });

	          if (!allowed) {
	            modeling.removeConnection(connection);
	          }
	        });

	        // remove invalid incoming connections
	        forEach(attacher.incoming.slice(), function(connection) {
	          var allowed = rules.allowed('connection.reconnect', {
	            connection: connection,
	            source: connection.source,
	            target: connection.target
	          });

	          if (!allowed) {
	            modeling.removeConnection(connection);
	          }
	        });
	      });
	    });
	  });

	  this.postExecute('shape.create', function(e) {
	    var context = e.context,
	        shape = context.shape,
	        host = context.host;

	    if (host) {
	      modeling.updateAttachment(shape, host);
	    }
	  });

	  // update attachments if the host is replaced
	  this.postExecute('shape.replace', function(e) {

	    var context = e.context,
	        oldShape = context.oldShape,
	        newShape = context.newShape;

	    // move the attachers to the new host
	    saveClear(oldShape.attachers, function(attacher) {
	      var allowed = rules.allowed('elements.move', {
	        target: newShape,
	        shapes: [attacher]
	      });

	      if (allowed === 'attach') {
	        modeling.updateAttachment(attacher, newShape);
	      } else {
	        modeling.removeShape(attacher);
	      }
	    });

	    // move attachers if new host has different size
	    if (newShape.attachers.length) {

	      forEach(newShape.attachers, function(attacher) {
	        var delta = getNewAttachShapeDelta(attacher, oldShape, newShape);
	        modeling.moveShape(attacher, delta, attacher.parent);
	      });
	    }

	  });

	  // move shape on host resize
	  this.postExecute('shape.resize', function(event) {
	    var context = event.context,
	        shape = context.shape,
	        oldBounds = context.oldBounds,
	        newBounds = context.newBounds,
	        attachers = shape.attachers,
	        hints = context.hints || {};

	    if (hints.attachSupport === false) {
	      return;
	    }

	    forEach(attachers, function(attacher) {
	      var delta = getNewAttachShapeDelta(attacher, oldBounds, newBounds);

	      modeling.moveShape(attacher, delta, attacher.parent);

	      forEach(attacher.labels, function(label) {
	        modeling.moveShape(label, delta, label.parent);
	      });
	    });
	  });

	  // remove attachments
	  this.preExecute('shape.delete', function(event) {

	    var shape = event.context.shape;

	    saveClear(shape.attachers, function(attacher) {
	      modeling.removeShape(attacher);
	    });

	    if (shape.host) {
	      modeling.updateAttachment(shape, null);
	    }
	  });
	}

	inherits_browser(AttachSupport, CommandInterceptor);

	AttachSupport.$inject = [
	  'injector',
	  'eventBus',
	  'canvas',
	  'rules',
	  'modeling'
	];


	/**
	 * Return attachers of the given shapes
	 *
	 * @param {Array<djs.model.Base>} shapes
	 * @return {Array<djs.model.Base>}
	 */
	function getAttachers(shapes) {
	  return flatten(map(shapes, function(s) {
	    return s.attachers || [];
	  }));
	}

	/**
	 * Return a combined list of elements and
	 * attachers.
	 *
	 * @param {Array<djs.model.Base>} elements
	 * @return {Array<djs.model.Base>} filtered
	 */
	function addAttached(elements) {
	  var attachers = getAttachers(elements);

	  return unionBy('id', elements, attachers);
	}

	/**
	 * Return a filtered list of elements that do not
	 * contain attached elements with hosts being part
	 * of the selection.
	 *
	 * @param  {Array<djs.model.Base>} elements
	 *
	 * @return {Array<djs.model.Base>} filtered
	 */
	function removeAttached(elements) {

	  var ids = groupBy(elements, 'id');

	  return filter(elements, function(element) {
	    while (element) {

	      // host in selection
	      if (element.host && ids[element.host.id]) {
	        return false;
	      }

	      element = element.parent;
	    }

	    return true;
	  });
	}

	function isAttacher$1(shape) {
	  return !!shape.host;
	}

	function includes$2(array, item) {
	  return array.indexOf(item) !== -1;
	}

	var AttachSupportModule = {
	  __depends__: [
	    RulesModule
	  ],
	  __init__: [ 'attachSupport' ],
	  attachSupport: [ 'type', AttachSupport ]
	};

	var LOW_PRIORITY$i = 250;

	/**
	 * The tool manager acts as middle-man between the available tool's and the Palette,
	 * it takes care of making sure that the correct active state is set.
	 *
	 * @param  {Object}    eventBus
	 * @param  {Object}    dragging
	 */
	function ToolManager(eventBus, dragging) {
	  this._eventBus = eventBus;
	  this._dragging = dragging;

	  this._tools = [];
	  this._active = null;
	}

	ToolManager.$inject = [ 'eventBus', 'dragging' ];

	ToolManager.prototype.registerTool = function(name, events) {
	  var tools = this._tools;

	  if (!events) {
	    throw new Error('A tool has to be registered with it\'s "events"');
	  }

	  tools.push(name);

	  this.bindEvents(name, events);
	};

	ToolManager.prototype.isActive = function(tool) {
	  return tool && this._active === tool;
	};

	ToolManager.prototype.length = function(tool) {
	  return this._tools.length;
	};

	ToolManager.prototype.setActive = function(tool) {
	  var eventBus = this._eventBus;

	  if (this._active !== tool) {
	    this._active = tool;

	    eventBus.fire('tool-manager.update', { tool: tool });
	  }
	};

	ToolManager.prototype.bindEvents = function(name, events) {
	  var eventBus = this._eventBus,
	      dragging = this._dragging;

	  var eventsToRegister = [];

	  eventBus.on(events.tool + '.init', function(event) {
	    var context = event.context;

	    // Active tools that want to reactivate themselves must do this explicitly
	    if (!context.reactivate && this.isActive(name)) {
	      this.setActive(null);

	      dragging.cancel();
	      return;
	    }

	    this.setActive(name);

	  }, this);

	  // Todo[ricardo]: add test cases
	  forEach(events, function(event) {
	    eventsToRegister.push(event + '.ended');
	    eventsToRegister.push(event + '.canceled');
	  });

	  eventBus.on(eventsToRegister, LOW_PRIORITY$i, function(event) {

	    // We defer the de-activation of the tool to the .activate phase,
	    // so we're able to check if we want to toggle off the current
	    // active tool or switch to a new one
	    if (!this._active) {
	      return;
	    }

	    if (isPaletteClick(event)) {
	      return;
	    }

	    this.setActive(null);
	  }, this);

	};


	// helpers ///////////////

	/**
	 * Check if a given event is a palette click event.
	 *
	 * @param {EventBus.Event} event
	 *
	 * @return {boolean}
	 */
	function isPaletteClick(event) {
	  var target = event.originalEvent && event.originalEvent.target;

	  return target && closest(target, '.group[data-group="tools"]');
	}

	var ToolManagerModule = {
	  __depends__: [
	    DraggingModule
	  ],
	  __init__: [ 'toolManager' ],
	  toolManager: [ 'type', ToolManager ]
	};

	/**
	 * Return direction given axis and delta.
	 *
	 * @param {string} axis
	 * @param {number} delta
	 *
	 * @return {string}
	 */
	function getDirection(axis, delta) {

	  if (axis === 'x') {
	    if (delta > 0) {
	      return 'e';
	    }

	    if (delta < 0) {
	      return 'w';
	    }
	  }

	  if (axis === 'y') {
	    if (delta > 0) {
	      return 's';
	    }

	    if (delta < 0) {
	      return 'n';
	    }
	  }

	  return null;
	}

	/**
	 * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start
	 * or end is to be moved or resized.
	 *
	 * @param {Array<djs.model.Shape} movingShapes
	 * @param {Array<djs.model.Shape} resizingShapes
	 *
	 * @returns {Array<djs.model.Connection>}
	 */
	function getWaypointsUpdatingConnections(movingShapes, resizingShapes) {
	  var waypointsUpdatingConnections = [];

	  forEach(movingShapes.concat(resizingShapes), function(shape) {
	    var incoming = shape.incoming,
	        outgoing = shape.outgoing;

	    forEach(incoming.concat(outgoing), function(connection) {
	      var source = connection.source,
	          target = connection.target;

	      if (includes$3(movingShapes, source) ||
	        includes$3(movingShapes, target) ||
	        includes$3(resizingShapes, source) ||
	        includes$3(resizingShapes, target)) {

	        if (!includes$3(waypointsUpdatingConnections, connection)) {
	          waypointsUpdatingConnections.push(connection);
	        }
	      }
	    });
	  });

	  return waypointsUpdatingConnections;
	}

	function includes$3(array, item) {
	  return array.indexOf(item) !== -1;
	}

	/**
	 * Resize bounds.
	 *
	 * @param {Object} bounds
	 * @param {number} bounds.x
	 * @param {number} bounds.y
	 * @param {number} bounds.width
	 * @param {number} bounds.height
	 * @param {string} direction
	 * @param {Object} delta
	 * @param {number} delta.x
	 * @param {number} delta.y
	 *
	 * @return {Object}
	 */
	function resizeBounds$1(bounds, direction, delta) {
	  var x = bounds.x,
	      y = bounds.y,
	      width = bounds.width,
	      height = bounds.height,
	      dx = delta.x,
	      dy = delta.y;

	  switch (direction) {
	  case 'n':
	    return {
	      x: x,
	      y: y + dy,
	      width: width,
	      height: height - dy
	    };
	  case 's':
	    return {
	      x: x,
	      y: y,
	      width: width,
	      height: height + dy
	    };
	  case 'w':
	    return {
	      x: x + dx,
	      y: y,
	      width: width - dx,
	      height: height
	    };
	  case 'e':
	    return {
	      x: x,
	      y: y,
	      width: width + dx,
	      height: height
	    };
	  default:
	    throw new Error('unknown direction: ' + direction);
	  }
	}

	var abs$6 = Math.abs,
	    round$7 = Math.round;

	var AXIS_TO_DIMENSION = {
	  x: 'width',
	  y: 'height'
	};

	var CURSOR_CROSSHAIR = 'crosshair';

	var DIRECTION_TO_TRBL = {
	  n: 'top',
	  w: 'left',
	  s: 'bottom',
	  e: 'right'
	};

	var HIGH_PRIORITY$f = 1500;

	var DIRECTION_TO_OPPOSITE = {
	  n: 's',
	  w: 'e',
	  s: 'n',
	  e: 'w'
	};

	var PADDING = 20;


	/**
	 * Add or remove space by moving and resizing elements.
	 *
	 * @param {Canvas} canvas
	 * @param {Dragging} dragging
	 * @param {EventBus} eventBus
	 * @param {Modeling} modeling
	 * @param {Rules} rules
	 * @param {ToolManager} toolManager
	 * @param {Mouse} mouse
	 */
	function SpaceTool(
	    canvas, dragging, eventBus,
	    modeling, rules, toolManager,
	    mouse) {

	  this._canvas = canvas;
	  this._dragging = dragging;
	  this._eventBus = eventBus;
	  this._modeling = modeling;
	  this._rules = rules;
	  this._toolManager = toolManager;
	  this._mouse = mouse;

	  var self = this;

	  toolManager.registerTool('space', {
	    tool: 'spaceTool.selection',
	    dragging: 'spaceTool'
	  });

	  eventBus.on('spaceTool.selection.end', function(event) {
	    eventBus.once('spaceTool.selection.ended', function() {
	      self.activateMakeSpace(event.originalEvent);
	    });
	  });

	  eventBus.on('spaceTool.move', HIGH_PRIORITY$f , function(event) {
	    var context = event.context,
	        initialized = context.initialized;

	    if (!initialized) {
	      initialized = context.initialized = self.init(event, context);
	    }

	    if (initialized) {
	      ensureConstraints$2(event);
	    }
	  });

	  eventBus.on('spaceTool.end', function(event) {
	    var context = event.context,
	        axis = context.axis,
	        direction = context.direction,
	        movingShapes = context.movingShapes,
	        resizingShapes = context.resizingShapes,
	        start = context.start;

	    if (!context.initialized) {
	      return;
	    }

	    ensureConstraints$2(event);

	    var delta = {
	      x: 0,
	      y: 0
	    };

	    delta[ axis ] = round$7(event[ 'd' + axis ]);

	    self.makeSpace(movingShapes, resizingShapes, delta, direction, start);

	    eventBus.once('spaceTool.ended', function(event) {

	      // activate space tool selection after make space
	      self.activateSelection(event.originalEvent, true, true);
	    });
	  });
	}

	SpaceTool.$inject = [
	  'canvas',
	  'dragging',
	  'eventBus',
	  'modeling',
	  'rules',
	  'toolManager',
	  'mouse'
	];

	/**
	 * Activate space tool selection.
	 *
	 * @param {Object} event
	 * @param {boolean} autoActivate
	 */
	SpaceTool.prototype.activateSelection = function(event, autoActivate, reactivate) {
	  this._dragging.init(event, 'spaceTool.selection', {
	    autoActivate: autoActivate,
	    cursor: CURSOR_CROSSHAIR,
	    data: {
	      context: {
	        reactivate: reactivate
	      }
	    },
	    trapClick: false
	  });
	};

	/**
	 * Activate space tool make space.
	 *
	 * @param  {MouseEvent} event
	 */
	SpaceTool.prototype.activateMakeSpace = function(event) {
	  this._dragging.init(event, 'spaceTool', {
	    autoActivate: true,
	    cursor: CURSOR_CROSSHAIR,
	    data: {
	      context: {}
	    }
	  });
	};

	/**
	 * Make space.
	 *
	 * @param  {Array<djs.model.Shape>} movingShapes
	 * @param  {Array<djs.model.Shape>} resizingShapes
	 * @param  {Object} delta
	 * @param  {number} delta.x
	 * @param  {number} delta.y
	 * @param  {string} direction
	 * @param  {number} start
	 */
	SpaceTool.prototype.makeSpace = function(movingShapes, resizingShapes, delta, direction, start) {
	  return this._modeling.createSpace(movingShapes, resizingShapes, delta, direction, start);
	};

	/**
	 * Initialize make space and return true if that was successful.
	 *
	 * @param {Object} event
	 * @param {Object} context
	 *
	 * @return {boolean}
	 */
	SpaceTool.prototype.init = function(event, context) {
	  var axis = abs$6(event.dx) > abs$6(event.dy) ? 'x' : 'y',
	      delta = event[ 'd' + axis ],
	      start = event[ axis ] - delta;

	  if (abs$6(delta) < 5) {
	    return false;
	  }

	  // invert delta to remove space when moving left
	  if (delta < 0) {
	    delta *= -1;
	  }

	  // invert delta to add/remove space when removing/adding space if modifier key is pressed
	  if (hasPrimaryModifier(event)) {
	    delta *= -1;
	  }

	  var direction = getDirection(axis, delta);

	  var root = this._canvas.getRootElement();

	  var children = selfAndAllChildren(root, true);

	  var elements = this.calculateAdjustments(children, axis, delta, start);

	  var minDimensions = this._eventBus.fire('spaceTool.getMinDimensions', {
	    axis: axis,
	    direction: direction,
	    shapes: elements.resizingShapes,
	    start: start
	  });

	  var spaceToolConstraints = getSpaceToolConstraints(elements, axis, direction, start, minDimensions);

	  assign(
	    context,
	    elements,
	    {
	      axis: axis,
	      direction: direction,
	      spaceToolConstraints: spaceToolConstraints,
	      start: start
	    }
	  );

	  set$1('resize-' + (axis === 'x' ? 'ew' : 'ns'));

	  return true;
	};

	/**
	 * Get elements to be moved and resized.
	 *
	 * @param  {Array<djs.model.Shape>} elements
	 * @param  {string} axis
	 * @param  {number} delta
	 * @param  {number} start
	 *
	 * @return {Object}
	 */
	SpaceTool.prototype.calculateAdjustments = function(elements, axis, delta, start) {
	  var rules = this._rules;

	  var movingShapes = [],
	      resizingShapes = [];

	  forEach(elements, function(element) {
	    if (!element.parent || isConnection$4(element)) {
	      return;
	    }

	    var shapeStart = element[ axis ],
	        shapeEnd = shapeStart + element[ AXIS_TO_DIMENSION[ axis ] ];

	    // shape to be moved
	    if ((delta > 0 && shapeStart > start) || (delta < 0 && shapeEnd < start)) {
	      return movingShapes.push(element);
	    }

	    // shape to be resized
	    if (shapeStart < start &&
	      shapeEnd > start &&
	      rules.allowed('shape.resize', { shape: element })
	    ) {

	      return resizingShapes.push(element);
	    }
	  });

	  return {
	    movingShapes: movingShapes,
	    resizingShapes: resizingShapes
	  };
	};

	SpaceTool.prototype.toggle = function() {

	  if (this.isActive()) {
	    return this._dragging.cancel();
	  }

	  var mouseEvent = this._mouse.getLastMoveEvent();

	  this.activateSelection(mouseEvent, !!mouseEvent);
	};

	SpaceTool.prototype.isActive = function() {
	  var context = this._dragging.context();

	  return context && /^spaceTool/.test(context.prefix);
	};

	// helpers //////////

	function addPadding$1(trbl) {
	  return {
	    top: trbl.top - PADDING,
	    right: trbl.right + PADDING,
	    bottom: trbl.bottom + PADDING,
	    left: trbl.left - PADDING
	  };
	}

	function ensureConstraints$2(event) {
	  var context = event.context,
	      spaceToolConstraints = context.spaceToolConstraints;

	  if (!spaceToolConstraints) {
	    return;
	  }

	  var x, y;

	  if (isNumber(spaceToolConstraints.left)) {
	    x = Math.max(event.x, spaceToolConstraints.left);

	    event.dx = event.dx + x - event.x;
	    event.x = x;
	  }

	  if (isNumber(spaceToolConstraints.right)) {
	    x = Math.min(event.x, spaceToolConstraints.right);

	    event.dx = event.dx + x - event.x;
	    event.x = x;
	  }

	  if (isNumber(spaceToolConstraints.top)) {
	    y = Math.max(event.y, spaceToolConstraints.top);

	    event.dy = event.dy + y - event.y;
	    event.y = y;
	  }

	  if (isNumber(spaceToolConstraints.bottom)) {
	    y = Math.min(event.y, spaceToolConstraints.bottom);

	    event.dy = event.dy + y - event.y;
	    event.y = y;
	  }
	}

	function getSpaceToolConstraints(elements, axis, direction, start, minDimensions) {
	  var movingShapes = elements.movingShapes,
	      resizingShapes = elements.resizingShapes;

	  if (!resizingShapes.length) {
	    return;
	  }

	  var spaceToolConstraints = {},
	      min,
	      max;

	  forEach(resizingShapes, function(resizingShape) {
	    var resizingShapeBBox = asTRBL(resizingShape);

	    // find children that are not moving or resizing
	    var nonMovingResizingChildren = filter(resizingShape.children, function(child) {
	      return !isConnection$4(child) &&
	        !isLabel$4(child) &&
	        !includes$4(movingShapes, child) &&
	        !includes$4(resizingShapes, child);
	    });

	    // find children that are moving
	    var movingChildren = filter(resizingShape.children, function(child) {
	      return !isConnection$4(child) && !isLabel$4(child) && includes$4(movingShapes, child);
	    });

	    var minOrMax,
	        nonMovingResizingChildrenBBox,
	        movingChildrenBBox;

	    if (nonMovingResizingChildren.length) {
	      nonMovingResizingChildrenBBox = addPadding$1(asTRBL(getBBox(nonMovingResizingChildren)));

	      minOrMax = start -
	        resizingShapeBBox[ DIRECTION_TO_TRBL[ direction ] ] +
	        nonMovingResizingChildrenBBox[ DIRECTION_TO_TRBL[ direction ] ];

	      if (direction === 'n') {
	        spaceToolConstraints.bottom = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
	      } else if (direction === 'w') {
	        spaceToolConstraints.right = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
	      } else if (direction === 's') {
	        spaceToolConstraints.top = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
	      } else if (direction === 'e') {
	        spaceToolConstraints.left = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
	      }
	    }

	    if (movingChildren.length) {
	      movingChildrenBBox = addPadding$1(asTRBL(getBBox(movingChildren)));

	      minOrMax = start -
	        movingChildrenBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ] +
	        resizingShapeBBox[ DIRECTION_TO_TRBL[ DIRECTION_TO_OPPOSITE[ direction ] ] ];

	      if (direction === 'n') {
	        spaceToolConstraints.bottom = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
	      } else if (direction === 'w') {
	        spaceToolConstraints.right = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
	      } else if (direction === 's') {
	        spaceToolConstraints.top = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
	      } else if (direction === 'e') {
	        spaceToolConstraints.left = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
	      }
	    }

	    var resizingShapeMinDimensions = minDimensions && minDimensions[ resizingShape.id ];

	    if (resizingShapeMinDimensions) {
	      if (direction === 'n') {
	        minOrMax = start +
	          resizingShape[ AXIS_TO_DIMENSION [ axis ] ] -
	          resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

	        spaceToolConstraints.bottom = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
	      } else if (direction === 'w') {
	        minOrMax = start +
	          resizingShape[ AXIS_TO_DIMENSION [ axis ] ] -
	          resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

	        spaceToolConstraints.right = max = isNumber(max) ? Math.min(max, minOrMax) : minOrMax;
	      } else if (direction === 's') {
	        minOrMax = start -
	          resizingShape[ AXIS_TO_DIMENSION [ axis ] ] +
	          resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

	        spaceToolConstraints.top = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
	      } else if (direction === 'e') {
	        minOrMax = start -
	          resizingShape[ AXIS_TO_DIMENSION [ axis ] ] +
	          resizingShapeMinDimensions[ AXIS_TO_DIMENSION[ axis ] ];

	        spaceToolConstraints.left = min = isNumber(min) ? Math.max(min, minOrMax) : minOrMax;
	      }
	    }
	  });

	  return spaceToolConstraints;
	}

	function includes$4(array, item) {
	  return array.indexOf(item) !== -1;
	}

	function isConnection$4(element) {
	  return !!element.waypoints;
	}

	function isLabel$4(element) {
	  return !!element.labelTarget;
	}

	var MARKER_DRAGGING = 'djs-dragging',
	    MARKER_RESIZING$1 = 'djs-resizing';

	var LOW_PRIORITY$j = 250;

	var max$6 = Math.max;


	/**
	 * Provides previews for selecting/moving/resizing shapes when creating/removing space.
	 *
	 * @param {EventBus} eventBus
	 * @param {ElementRegistry} elementRegistry
	 * @param {Canvas} canvas
	 * @param {Styles} styles
	 */
	function SpaceToolPreview(
	    eventBus, elementRegistry, canvas,
	    styles, previewSupport) {

	  function addPreviewGfx(collection, dragGroup) {
	    forEach(collection, function(element) {
	      previewSupport.addDragger(element, dragGroup);

	      canvas.addMarker(element, MARKER_DRAGGING);
	    });
	  }

	  // add crosshair
	  eventBus.on('spaceTool.selection.start', function(event) {
	    var space = canvas.getLayer('space'),
	        context = event.context;

	    var orientation = {
	      x: 'M 0,-10000 L 0,10000',
	      y: 'M -10000,0 L 10000,0'
	    };

	    var crosshairGroup = create('g');
	    attr$1(crosshairGroup, styles.cls('djs-crosshair-group', [ 'no-events' ]));

	    append(space, crosshairGroup);

	    // horizontal path
	    var pathX = create('path');
	    attr$1(pathX, 'd', orientation.x);
	    classes$1(pathX).add('djs-crosshair');

	    append(crosshairGroup, pathX);

	    // vertical path
	    var pathY = create('path');
	    attr$1(pathY, 'd', orientation.y);
	    classes$1(pathY).add('djs-crosshair');

	    append(crosshairGroup, pathY);

	    context.crosshairGroup = crosshairGroup;
	  });

	  // update crosshair
	  eventBus.on('spaceTool.selection.move', function(event) {
	    var crosshairGroup = event.context.crosshairGroup;

	    translate(crosshairGroup, event.x, event.y);
	  });

	  // remove crosshair
	  eventBus.on('spaceTool.selection.cleanup', function(event) {
	    var context = event.context,
	        crosshairGroup = context.crosshairGroup;

	    if (crosshairGroup) {
	      remove$1(crosshairGroup);
	    }
	  });

	  // add and update move/resize previews
	  eventBus.on('spaceTool.move', LOW_PRIORITY$j, function(event) {

	    var context = event.context,
	        line = context.line,
	        axis = context.axis,
	        movingShapes = context.movingShapes,
	        resizingShapes = context.resizingShapes;

	    if (!context.initialized) {
	      return;
	    }

	    if (!context.dragGroup) {
	      var spaceLayer = canvas.getLayer('space');

	      line = create('path');
	      attr$1(line, 'd', 'M0,0 L0,0');
	      classes$1(line).add('djs-crosshair');

	      append(spaceLayer, line);

	      context.line = line;

	      var dragGroup = create('g');
	      attr$1(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));

	      append(canvas.getDefaultLayer(), dragGroup);

	      // shapes
	      addPreviewGfx(movingShapes, dragGroup);

	      // connections
	      var movingConnections = context.movingConnections = elementRegistry.filter(function(element) {
	        var sourceIsMoving = false;

	        forEach(movingShapes, function(shape) {
	          forEach(shape.outgoing, function(connection) {
	            if (element === connection) {
	              sourceIsMoving = true;
	            }
	          });
	        });

	        var targetIsMoving = false;

	        forEach(movingShapes, function(shape) {
	          forEach(shape.incoming, function(connection) {
	            if (element === connection) {
	              targetIsMoving = true;
	            }
	          });
	        });

	        var sourceIsResizing = false;

	        forEach(resizingShapes, function(shape) {
	          forEach(shape.outgoing, function(connection) {
	            if (element === connection) {
	              sourceIsResizing = true;
	            }
	          });
	        });

	        var targetIsResizing = false;

	        forEach(resizingShapes, function(shape) {
	          forEach(shape.incoming, function(connection) {
	            if (element === connection) {
	              targetIsResizing = true;
	            }
	          });
	        });

	        return isConnection$5(element)
	          && (sourceIsMoving || sourceIsResizing)
	          && (targetIsMoving || targetIsResizing);
	      });


	      addPreviewGfx(movingConnections, dragGroup);

	      context.dragGroup = dragGroup;
	    }

	    if (!context.frameGroup) {
	      var frameGroup = create('g');
	      attr$1(frameGroup, styles.cls('djs-frame-group', [ 'no-events' ]));

	      append(canvas.getDefaultLayer(), frameGroup);

	      var frames = [];

	      forEach(resizingShapes, function(shape) {
	        var frame = previewSupport.addFrame(shape, frameGroup);

	        var initialBounds = frame.getBBox();

	        frames.push({
	          element: frame,
	          initialBounds: initialBounds
	        });

	        canvas.addMarker(shape, MARKER_RESIZING$1);
	      });

	      context.frameGroup = frameGroup;
	      context.frames = frames;
	    }

	    var orientation = {
	      x: 'M' + event.x + ', -10000 L' + event.x + ', 10000',
	      y: 'M -10000, ' + event.y + ' L 10000, ' + event.y
	    };

	    attr$1(line, { d: orientation[ axis ] });

	    var opposite = { x: 'y', y: 'x' };
	    var delta = { x: event.dx, y: event.dy };
	    delta[ opposite[ context.axis ] ] = 0;

	    // update move previews
	    translate(context.dragGroup, delta.x, delta.y);

	    // update resize previews
	    forEach(context.frames, function(frame) {
	      var element = frame.element,
	          initialBounds = frame.initialBounds,
	          width,
	          height;

	      if (context.direction === 'e') {
	        attr$1(element, {
	          width: max$6(initialBounds.width + delta.x, 5)
	        });
	      } else {
	        width = max$6(initialBounds.width - delta.x, 5);

	        attr$1(element, {
	          width: width,
	          x: initialBounds.x + initialBounds.width - width
	        });
	      }

	      if (context.direction === 's') {
	        attr$1(element, {
	          height: max$6(initialBounds.height + delta.y, 5)
	        });
	      } else {
	        height = max$6(initialBounds.height - delta.y, 5);

	        attr$1(element, {
	          height: height,
	          y: initialBounds.y + initialBounds.height - height
	        });
	      }
	    });

	  });

	  // remove move/resize previews
	  eventBus.on('spaceTool.cleanup', function(event) {

	    var context = event.context,
	        movingShapes = context.movingShapes,
	        movingConnections = context.movingConnections,
	        resizingShapes = context.resizingShapes,
	        line = context.line,
	        dragGroup = context.dragGroup,
	        frameGroup = context.frameGroup;

	    // moving shapes
	    forEach(movingShapes, function(shape) {
	      canvas.removeMarker(shape, MARKER_DRAGGING);
	    });

	    // moving connections
	    forEach(movingConnections, function(connection) {
	      canvas.removeMarker(connection, MARKER_DRAGGING);
	    });

	    if (dragGroup) {
	      remove$1(line);
	      remove$1(dragGroup);
	    }

	    forEach(resizingShapes, function(shape) {
	      canvas.removeMarker(shape, MARKER_RESIZING$1);
	    });

	    if (frameGroup) {
	      remove$1(frameGroup);
	    }
	  });
	}

	SpaceToolPreview.$inject = [
	  'eventBus',
	  'elementRegistry',
	  'canvas',
	  'styles',
	  'previewSupport'
	];


	// helpers //////////////////////

	/**
	 * Checks if an element is a connection.
	 */
	function isConnection$5(element) {
	  return element.waypoints;
	}

	var SpaceToolModule = {
	  __init__: ['spaceToolPreview'],
	  __depends__: [
	    DraggingModule,
	    RulesModule,
	    ToolManagerModule,
	    PreviewSupportModule,
	    MouseModule
	  ],
	  spaceTool: ['type', SpaceTool ],
	  spaceToolPreview: ['type', SpaceToolPreview ]
	};

	function BpmnFactory(moddle) {
	  this._model = moddle;
	}

	BpmnFactory.$inject = [ 'moddle' ];


	BpmnFactory.prototype._needsId = function(element) {
	  return isAny(element, [
	    'bpmn:RootElement',
	    'bpmn:FlowElement',
	    'bpmn:MessageFlow',
	    'bpmn:DataAssociation',
	    'bpmn:Artifact',
	    'bpmn:Participant',
	    'bpmn:Lane',
	    'bpmn:LaneSet',
	    'bpmn:Process',
	    'bpmn:Collaboration',
	    'bpmndi:BPMNShape',
	    'bpmndi:BPMNEdge',
	    'bpmndi:BPMNDiagram',
	    'bpmndi:BPMNPlane',
	    'bpmn:Property',
	    'bpmn:CategoryValue'
	  ]);
	};

	BpmnFactory.prototype._ensureId = function(element) {

	  // generate semantic ids for elements
	  // bpmn:SequenceFlow -> SequenceFlow_ID
	  var prefix;

	  if (is$1(element, 'bpmn:Activity')) {
	    prefix = 'Activity';
	  } else if (is$1(element, 'bpmn:Event')) {
	    prefix = 'Event';
	  } else if (is$1(element, 'bpmn:Gateway')) {
	    prefix = 'Gateway';
	  } else if (isAny(element, [ 'bpmn:SequenceFlow', 'bpmn:MessageFlow' ])) {
	    prefix = 'Flow';
	  } else {
	    prefix = (element.$type || '').replace(/^[^:]*:/g, '');
	  }

	  prefix += '_';

	  if (!element.id && this._needsId(element)) {
	    element.id = this._model.ids.nextPrefixed(prefix, element);
	  }
	};


	BpmnFactory.prototype.create = function(type, attrs) {
	  var element = this._model.create(type, attrs || {});

	  this._ensureId(element);

	  return element;
	};


	BpmnFactory.prototype.createDiLabel = function() {
	  return this.create('bpmndi:BPMNLabel', {
	    bounds: this.createDiBounds()
	  });
	};


	BpmnFactory.prototype.createDiShape = function(semantic, bounds, attrs) {

	  return this.create('bpmndi:BPMNShape', assign({
	    bpmnElement: semantic,
	    bounds: this.createDiBounds(bounds)
	  }, attrs));
	};


	BpmnFactory.prototype.createDiBounds = function(bounds) {
	  return this.create('dc:Bounds', bounds);
	};


	BpmnFactory.prototype.createDiWaypoints = function(waypoints) {
	  var self = this;

	  return map(waypoints, function(pos) {
	    return self.createDiWaypoint(pos);
	  });
	};

	BpmnFactory.prototype.createDiWaypoint = function(point) {
	  return this.create('dc:Point', pick(point, [ 'x', 'y' ]));
	};


	BpmnFactory.prototype.createDiEdge = function(semantic, waypoints, attrs) {
	  return this.create('bpmndi:BPMNEdge', assign({
	    bpmnElement: semantic
	  }, attrs));
	};

	BpmnFactory.prototype.createDiPlane = function(semantic) {
	  return this.create('bpmndi:BPMNPlane', {
	    bpmnElement: semantic
	  });
	};

	/**
	 * A handler responsible for updating the underlying BPMN 2.0 XML + DI
	 * once changes on the diagram happen
	 */
	function BpmnUpdater(
	    eventBus, bpmnFactory, connectionDocking,
	    translate) {

	  CommandInterceptor.call(this, eventBus);

	  this._bpmnFactory = bpmnFactory;
	  this._translate = translate;

	  var self = this;



	  // connection cropping //////////////////////

	  // crop connection ends during create/update
	  function cropConnection(e) {
	    var context = e.context,
	        hints = context.hints || {},
	        connection;

	    if (!context.cropped && hints.createElementsBehavior !== false) {
	      connection = context.connection;
	      connection.waypoints = connectionDocking.getCroppedWaypoints(connection);
	      context.cropped = true;
	    }
	  }

	  this.executed([
	    'connection.layout',
	    'connection.create'
	  ], cropConnection);

	  this.reverted([ 'connection.layout' ], function(e) {
	    delete e.context.cropped;
	  });



	  // BPMN + DI update //////////////////////


	  // update parent
	  function updateParent(e) {
	    var context = e.context;

	    self.updateParent(context.shape || context.connection, context.oldParent);
	  }

	  function reverseUpdateParent(e) {
	    var context = e.context;

	    var element = context.shape || context.connection,

	        // oldParent is the (old) new parent, because we are undoing
	        oldParent = context.parent || context.newParent;

	    self.updateParent(element, oldParent);
	  }

	  this.executed([
	    'shape.move',
	    'shape.create',
	    'shape.delete',
	    'connection.create',
	    'connection.move',
	    'connection.delete'
	  ], ifBpmn(updateParent));

	  this.reverted([
	    'shape.move',
	    'shape.create',
	    'shape.delete',
	    'connection.create',
	    'connection.move',
	    'connection.delete'
	  ], ifBpmn(reverseUpdateParent));

	  /*
	   * ## Updating Parent
	   *
	   * When morphing a Process into a Collaboration or vice-versa,
	   * make sure that both the *semantic* and *di* parent of each element
	   * is updated.
	   *
	   */
	  function updateRoot(event) {
	    var context = event.context,
	        oldRoot = context.oldRoot,
	        children = oldRoot.children;

	    forEach(children, function(child) {
	      if (is$1(child, 'bpmn:BaseElement')) {
	        self.updateParent(child);
	      }
	    });
	  }

	  this.executed([ 'canvas.updateRoot' ], updateRoot);
	  this.reverted([ 'canvas.updateRoot' ], updateRoot);


	  // update bounds
	  function updateBounds(e) {
	    var shape = e.context.shape;

	    if (!is$1(shape, 'bpmn:BaseElement')) {
	      return;
	    }

	    self.updateBounds(shape);
	  }

	  this.executed([ 'shape.move', 'shape.create', 'shape.resize' ], ifBpmn(function(event) {

	    // exclude labels because they're handled separately during shape.changed
	    if (event.context.shape.type === 'label') {
	      return;
	    }

	    updateBounds(event);
	  }));

	  this.reverted([ 'shape.move', 'shape.create', 'shape.resize' ], ifBpmn(function(event) {

	    // exclude labels because they're handled separately during shape.changed
	    if (event.context.shape.type === 'label') {
	      return;
	    }

	    updateBounds(event);
	  }));

	  // Handle labels separately. This is necessary, because the label bounds have to be updated
	  // every time its shape changes, not only on move, create and resize.
	  eventBus.on('shape.changed', function(event) {
	    if (event.element.type === 'label') {
	      updateBounds({ context: { shape: event.element } });
	    }
	  });

	  // attach / detach connection
	  function updateConnection(e) {
	    self.updateConnection(e.context);
	  }

	  this.executed([
	    'connection.create',
	    'connection.move',
	    'connection.delete',
	    'connection.reconnect'
	  ], ifBpmn(updateConnection));

	  this.reverted([
	    'connection.create',
	    'connection.move',
	    'connection.delete',
	    'connection.reconnect'
	  ], ifBpmn(updateConnection));


	  // update waypoints
	  function updateConnectionWaypoints(e) {
	    self.updateConnectionWaypoints(e.context.connection);
	  }

	  this.executed([
	    'connection.layout',
	    'connection.move',
	    'connection.updateWaypoints',
	  ], ifBpmn(updateConnectionWaypoints));

	  this.reverted([
	    'connection.layout',
	    'connection.move',
	    'connection.updateWaypoints',
	  ], ifBpmn(updateConnectionWaypoints));

	  // update conditional/default flows
	  this.executed('connection.reconnect', ifBpmn(function(event) {
	    var context = event.context,
	        connection = context.connection,
	        oldSource = context.oldSource,
	        newSource = context.newSource,
	        connectionBo = getBusinessObject(connection),
	        oldSourceBo = getBusinessObject(oldSource),
	        newSourceBo = getBusinessObject(newSource);

	    // remove condition from connection on reconnect to new source
	    // if new source can NOT have condional sequence flow
	    if (connectionBo.conditionExpression && !isAny(newSourceBo, [
	      'bpmn:Activity',
	      'bpmn:ExclusiveGateway',
	      'bpmn:InclusiveGateway'
	    ])) {
	      context.oldConditionExpression = connectionBo.conditionExpression;

	      delete connectionBo.conditionExpression;
	    }

	    // remove default from old source flow on reconnect to new source
	    // if source changed
	    if (oldSource !== newSource && oldSourceBo.default === connectionBo) {
	      context.oldDefault = oldSourceBo.default;

	      delete oldSourceBo.default;
	    }
	  }));

	  this.reverted('connection.reconnect', ifBpmn(function(event) {
	    var context = event.context,
	        connection = context.connection,
	        oldSource = context.oldSource,
	        newSource = context.newSource,
	        connectionBo = getBusinessObject(connection),
	        oldSourceBo = getBusinessObject(oldSource),
	        newSourceBo = getBusinessObject(newSource);

	    // add condition to connection on revert reconnect to new source
	    if (context.oldConditionExpression) {
	      connectionBo.conditionExpression = context.oldConditionExpression;
	    }

	    // add default to old source on revert reconnect to new source
	    if (context.oldDefault) {
	      oldSourceBo.default = context.oldDefault;

	      delete newSourceBo.default;
	    }
	  }));

	  // update attachments
	  function updateAttachment(e) {
	    self.updateAttachment(e.context);
	  }

	  this.executed([ 'element.updateAttachment' ], ifBpmn(updateAttachment));
	  this.reverted([ 'element.updateAttachment' ], ifBpmn(updateAttachment));
	}

	inherits_browser(BpmnUpdater, CommandInterceptor);

	BpmnUpdater.$inject = [
	  'eventBus',
	  'bpmnFactory',
	  'connectionDocking',
	  'translate'
	];


	// implementation //////////////////////

	BpmnUpdater.prototype.updateAttachment = function(context) {

	  var shape = context.shape,
	      businessObject = shape.businessObject,
	      host = shape.host;

	  businessObject.attachedToRef = host && host.businessObject;
	};

	BpmnUpdater.prototype.updateParent = function(element, oldParent) {

	  // do not update BPMN 2.0 label parent
	  if (element instanceof Label) {
	    return;
	  }

	  // data stores in collaborations are handled separately by DataStoreBehavior
	  if (is$1(element, 'bpmn:DataStoreReference') &&
	      element.parent &&
	      is$1(element.parent, 'bpmn:Collaboration')) {
	    return;
	  }

	  var parentShape = element.parent;

	  var businessObject = element.businessObject,
	      parentBusinessObject = parentShape && parentShape.businessObject,
	      parentDi = parentBusinessObject && parentBusinessObject.di;

	  if (is$1(element, 'bpmn:FlowNode')) {
	    this.updateFlowNodeRefs(businessObject, parentBusinessObject, oldParent && oldParent.businessObject);
	  }

	  if (is$1(element, 'bpmn:DataOutputAssociation')) {
	    if (element.source) {
	      parentBusinessObject = element.source.businessObject;
	    } else {
	      parentBusinessObject = null;
	    }
	  }

	  if (is$1(element, 'bpmn:DataInputAssociation')) {
	    if (element.target) {
	      parentBusinessObject = element.target.businessObject;
	    } else {
	      parentBusinessObject = null;
	    }
	  }

	  this.updateSemanticParent(businessObject, parentBusinessObject);

	  if (is$1(element, 'bpmn:DataObjectReference') && businessObject.dataObjectRef) {
	    this.updateSemanticParent(businessObject.dataObjectRef, parentBusinessObject);
	  }

	  this.updateDiParent(businessObject.di, parentDi);
	};


	BpmnUpdater.prototype.updateBounds = function(shape) {

	  var di = shape.businessObject.di;

	  var target = (shape instanceof Label) ? this._getLabel(di) : di;

	  var bounds = target.bounds;

	  if (!bounds) {
	    bounds = this._bpmnFactory.createDiBounds();
	    target.set('bounds', bounds);
	  }

	  assign(bounds, {
	    x: shape.x,
	    y: shape.y,
	    width: shape.width,
	    height: shape.height
	  });
	};

	BpmnUpdater.prototype.updateFlowNodeRefs = function(businessObject, newContainment, oldContainment) {

	  if (oldContainment === newContainment) {
	    return;
	  }

	  var oldRefs, newRefs;

	  if (is$1 (oldContainment, 'bpmn:Lane')) {
	    oldRefs = oldContainment.get('flowNodeRef');
	    remove$2(oldRefs, businessObject);
	  }

	  if (is$1(newContainment, 'bpmn:Lane')) {
	    newRefs = newContainment.get('flowNodeRef');
	    add$1(newRefs, businessObject);
	  }
	};


	// update existing sourceElement and targetElement di information
	BpmnUpdater.prototype.updateDiConnection = function(di, newSource, newTarget) {

	  if (di.sourceElement && di.sourceElement.bpmnElement !== newSource) {
	    di.sourceElement = newSource && newSource.di;
	  }

	  if (di.targetElement && di.targetElement.bpmnElement !== newTarget) {
	    di.targetElement = newTarget && newTarget.di;
	  }

	};


	BpmnUpdater.prototype.updateDiParent = function(di, parentDi) {

	  if (parentDi && !is$1(parentDi, 'bpmndi:BPMNPlane')) {
	    parentDi = parentDi.$parent;
	  }

	  if (di.$parent === parentDi) {
	    return;
	  }

	  var planeElements = (parentDi || di.$parent).get('planeElement');

	  if (parentDi) {
	    planeElements.push(di);
	    di.$parent = parentDi;
	  } else {
	    remove$2(planeElements, di);
	    di.$parent = null;
	  }
	};

	function getDefinitions(element) {
	  while (element && !is$1(element, 'bpmn:Definitions')) {
	    element = element.$parent;
	  }

	  return element;
	}

	BpmnUpdater.prototype.getLaneSet = function(container) {

	  var laneSet, laneSets;

	  // bpmn:Lane
	  if (is$1(container, 'bpmn:Lane')) {
	    laneSet = container.childLaneSet;

	    if (!laneSet) {
	      laneSet = this._bpmnFactory.create('bpmn:LaneSet');
	      container.childLaneSet = laneSet;
	      laneSet.$parent = container;
	    }

	    return laneSet;
	  }

	  // bpmn:Participant
	  if (is$1(container, 'bpmn:Participant')) {
	    container = container.processRef;
	  }

	  // bpmn:FlowElementsContainer
	  laneSets = container.get('laneSets');
	  laneSet = laneSets[0];

	  if (!laneSet) {
	    laneSet = this._bpmnFactory.create('bpmn:LaneSet');
	    laneSet.$parent = container;
	    laneSets.push(laneSet);
	  }

	  return laneSet;
	};

	BpmnUpdater.prototype.updateSemanticParent = function(businessObject, newParent, visualParent) {

	  var containment,
	      translate = this._translate;

	  if (businessObject.$parent === newParent) {
	    return;
	  }

	  if (is$1(businessObject, 'bpmn:DataInput') || is$1(businessObject, 'bpmn:DataOutput')) {

	    if (is$1(newParent, 'bpmn:Participant') && 'processRef' in newParent) {
	      newParent = newParent.processRef;
	    }

	    // already in correct ioSpecification
	    if ('ioSpecification' in newParent && newParent.ioSpecification === businessObject.$parent) {
	      return;
	    }
	  }

	  if (is$1(businessObject, 'bpmn:Lane')) {

	    if (newParent) {
	      newParent = this.getLaneSet(newParent);
	    }

	    containment = 'lanes';
	  } else

	  if (is$1(businessObject, 'bpmn:FlowElement')) {

	    if (newParent) {

	      if (is$1(newParent, 'bpmn:Participant')) {
	        newParent = newParent.processRef;
	      } else

	      if (is$1(newParent, 'bpmn:Lane')) {
	        do {

	          // unwrap Lane -> LaneSet -> (Lane | FlowElementsContainer)
	          newParent = newParent.$parent.$parent;
	        } while (is$1(newParent, 'bpmn:Lane'));

	      }
	    }

	    containment = 'flowElements';

	  } else

	  if (is$1(businessObject, 'bpmn:Artifact')) {

	    while (newParent &&
	           !is$1(newParent, 'bpmn:Process') &&
	           !is$1(newParent, 'bpmn:SubProcess') &&
	           !is$1(newParent, 'bpmn:Collaboration')) {

	      if (is$1(newParent, 'bpmn:Participant')) {
	        newParent = newParent.processRef;
	        break;
	      } else {
	        newParent = newParent.$parent;
	      }
	    }

	    containment = 'artifacts';
	  } else

	  if (is$1(businessObject, 'bpmn:MessageFlow')) {
	    containment = 'messageFlows';

	  } else

	  if (is$1(businessObject, 'bpmn:Participant')) {
	    containment = 'participants';

	    // make sure the participants process is properly attached / detached
	    // from the XML document

	    var process = businessObject.processRef,
	        definitions;

	    if (process) {
	      definitions = getDefinitions(businessObject.$parent || newParent);

	      if (businessObject.$parent) {
	        remove$2(definitions.get('rootElements'), process);
	        process.$parent = null;
	      }

	      if (newParent) {
	        add$1(definitions.get('rootElements'), process);
	        process.$parent = definitions;
	      }
	    }
	  } else

	  if (is$1(businessObject, 'bpmn:DataOutputAssociation')) {
	    containment = 'dataOutputAssociations';
	  } else

	  if (is$1(businessObject, 'bpmn:DataInputAssociation')) {
	    containment = 'dataInputAssociations';
	  }

	  if (!containment) {
	    throw new Error(translate(
	      'no parent for {element} in {parent}',
	      {
	        element: businessObject.id,
	        parent: newParent.id
	      }
	    ));
	  }

	  var children;

	  if (businessObject.$parent) {

	    // remove from old parent
	    children = businessObject.$parent.get(containment);
	    remove$2(children, businessObject);
	  }

	  if (!newParent) {
	    businessObject.$parent = null;
	  } else {

	    // add to new parent
	    children = newParent.get(containment);
	    children.push(businessObject);
	    businessObject.$parent = newParent;
	  }

	  if (visualParent) {
	    var diChildren = visualParent.get(containment);

	    remove$2(children, businessObject);

	    if (newParent) {

	      if (!diChildren) {
	        diChildren = [];
	        newParent.set(containment, diChildren);
	      }

	      diChildren.push(businessObject);
	    }
	  }
	};


	BpmnUpdater.prototype.updateConnectionWaypoints = function(connection) {
	  connection.businessObject.di.set('waypoint', this._bpmnFactory.createDiWaypoints(connection.waypoints));
	};


	BpmnUpdater.prototype.updateConnection = function(context) {

	  var connection = context.connection,
	      businessObject = getBusinessObject(connection),
	      newSource = getBusinessObject(connection.source),
	      newTarget = getBusinessObject(connection.target),
	      visualParent;

	  if (!is$1(businessObject, 'bpmn:DataAssociation')) {

	    var inverseSet = is$1(businessObject, 'bpmn:SequenceFlow');

	    if (businessObject.sourceRef !== newSource) {
	      if (inverseSet) {
	        remove$2(businessObject.sourceRef && businessObject.sourceRef.get('outgoing'), businessObject);

	        if (newSource && newSource.get('outgoing')) {
	          newSource.get('outgoing').push(businessObject);
	        }
	      }

	      businessObject.sourceRef = newSource;
	    }

	    if (businessObject.targetRef !== newTarget) {
	      if (inverseSet) {
	        remove$2(businessObject.targetRef && businessObject.targetRef.get('incoming'), businessObject);

	        if (newTarget && newTarget.get('incoming')) {
	          newTarget.get('incoming').push(businessObject);
	        }
	      }

	      businessObject.targetRef = newTarget;
	    }
	  } else

	  if (is$1(businessObject, 'bpmn:DataInputAssociation')) {

	    // handle obnoxious isMsome sourceRef
	    businessObject.get('sourceRef')[0] = newSource;

	    visualParent = context.parent || context.newParent || newTarget;

	    this.updateSemanticParent(businessObject, newTarget, visualParent);
	  } else

	  if (is$1(businessObject, 'bpmn:DataOutputAssociation')) {
	    visualParent = context.parent || context.newParent || newSource;

	    this.updateSemanticParent(businessObject, newSource, visualParent);

	    // targetRef = new target
	    businessObject.targetRef = newTarget;
	  }

	  this.updateConnectionWaypoints(connection);

	  this.updateDiConnection(businessObject.di, newSource, newTarget);
	};


	// helpers //////////////////////

	BpmnUpdater.prototype._getLabel = function(di) {
	  if (!di.label) {
	    di.label = this._bpmnFactory.createDiLabel();
	  }

	  return di.label;
	};


	/**
	 * Make sure the event listener is only called
	 * if the touched element is a BPMN element.
	 *
	 * @param  {Function} fn
	 * @return {Function} guarded function
	 */
	function ifBpmn(fn) {

	  return function(event) {

	    var context = event.context,
	        element = context.shape || context.connection;

	    if (is$1(element, 'bpmn:BaseElement')) {
	      fn(event);
	    }
	  };
	}

	/**
	 * A bpmn-aware factory for diagram-js shapes
	 */
	function ElementFactory$1(bpmnFactory, moddle, translate) {
	  ElementFactory.call(this);

	  this._bpmnFactory = bpmnFactory;
	  this._moddle = moddle;
	  this._translate = translate;
	}

	inherits_browser(ElementFactory$1, ElementFactory);

	ElementFactory$1.$inject = [
	  'bpmnFactory',
	  'moddle',
	  'translate'
	];

	ElementFactory$1.prototype.baseCreate = ElementFactory.prototype.create;

	ElementFactory$1.prototype.create = function(elementType, attrs) {

	  // no special magic for labels,
	  // we assume their businessObjects have already been created
	  // and wired via attrs
	  if (elementType === 'label') {
	    return this.baseCreate(elementType, assign({ type: 'label' }, DEFAULT_LABEL_SIZE$1, attrs));
	  }

	  return this.createBpmnElement(elementType, attrs);
	};

	ElementFactory$1.prototype.createBpmnElement = function(elementType, attrs) {
	  var size,
	      translate = this._translate;

	  attrs = attrs || {};

	  var businessObject = attrs.businessObject;

	  if (!businessObject) {
	    if (!attrs.type) {
	      throw new Error(translate('no shape type specified'));
	    }

	    businessObject = this._bpmnFactory.create(attrs.type);
	  }

	  if (!businessObject.di) {
	    if (elementType === 'root') {
	      businessObject.di = this._bpmnFactory.createDiPlane(businessObject, [], {
	        id: businessObject.id + '_di'
	      });
	    } else
	    if (elementType === 'connection') {
	      businessObject.di = this._bpmnFactory.createDiEdge(businessObject, [], {
	        id: businessObject.id + '_di'
	      });
	    } else {
	      businessObject.di = this._bpmnFactory.createDiShape(businessObject, {}, {
	        id: businessObject.id + '_di'
	      });
	    }
	  }

	  if (is$1(businessObject, 'bpmn:Group')) {
	    attrs = assign({
	      isFrame: true
	    }, attrs);
	  }

	  if (attrs.di) {
	    assign(businessObject.di, attrs.di);

	    delete attrs.di;
	  }

	  applyAttributes(businessObject, attrs, [
	    'processRef',
	    'isInterrupting',
	    'associationDirection',
	    'isForCompensation'
	  ]);

	  if (attrs.isExpanded) {
	    applyAttribute(businessObject.di, attrs, 'isExpanded');
	  }

	  if (is$1(businessObject, 'bpmn:ExclusiveGateway')) {
	    businessObject.di.isMarkerVisible = true;
	  }

	  var eventDefinitions,
	      newEventDefinition;

	  if (attrs.eventDefinitionType) {
	    eventDefinitions = businessObject.get('eventDefinitions') || [];
	    newEventDefinition = this._bpmnFactory.create(attrs.eventDefinitionType, attrs.eventDefinitionAttrs);

	    if (attrs.eventDefinitionType === 'bpmn:ConditionalEventDefinition') {
	      newEventDefinition.condition = this._bpmnFactory.create('bpmn:FormalExpression');
	    }

	    eventDefinitions.push(newEventDefinition);

	    newEventDefinition.$parent = businessObject;
	    businessObject.eventDefinitions = eventDefinitions;

	    delete attrs.eventDefinitionType;
	  }

	  size = this._getDefaultSize(businessObject);

	  attrs = assign({
	    businessObject: businessObject,
	    id: businessObject.id
	  }, size, attrs);

	  return this.baseCreate(elementType, attrs);
	};


	ElementFactory$1.prototype._getDefaultSize = function(semantic) {

	  if (is$1(semantic, 'bpmn:SubProcess')) {

	    if (isExpanded(semantic)) {
	      return { width: 350, height: 200 };
	    } else {
	      return { width: 100, height: 80 };
	    }
	  }

	  if (is$1(semantic, 'bpmn:Task')) {
	    return { width: 100, height: 80 };
	  }

	  if (is$1(semantic, 'bpmn:Gateway')) {
	    return { width: 50, height: 50 };
	  }

	  if (is$1(semantic, 'bpmn:Event')) {
	    return { width: 36, height: 36 };
	  }

	  if (is$1(semantic, 'bpmn:Participant')) {
	    if (isExpanded(semantic)) {
	      return { width: 600, height: 250 };
	    } else {
	      return { width: 400, height: 60 };
	    }
	  }

	  if (is$1(semantic, 'bpmn:Lane')) {
	    return { width: 400, height: 100 };
	  }

	  if (is$1(semantic, 'bpmn:DataObjectReference')) {
	    return { width: 36, height: 50 };
	  }

	  if (is$1(semantic, 'bpmn:DataStoreReference')) {
	    return { width: 50, height: 50 };
	  }

	  if (is$1(semantic, 'bpmn:TextAnnotation')) {
	    return { width: 100, height: 30 };
	  }

	  if (is$1(semantic, 'bpmn:Group')) {
	    return { width: 300, height: 300 };
	  }

	  return { width: 100, height: 80 };
	};


	/**
	 * Create participant.
	 *
	 * @param {boolean|Object} [attrs] attrs
	 *
	 * @returns {djs.model.Shape}
	 */
	ElementFactory$1.prototype.createParticipantShape = function(attrs) {

	  if (!isObject(attrs)) {
	    attrs = { isExpanded: attrs };
	  }

	  attrs = assign({ type: 'bpmn:Participant' }, attrs || {});

	  // participants are expanded by default
	  if (attrs.isExpanded !== false) {
	    attrs.processRef = this._bpmnFactory.create('bpmn:Process');
	  }

	  return this.createShape(attrs);
	};


	// helpers //////////////////////

	/**
	 * Apply attributes from a map to the given element,
	 * remove attribute from the map on application.
	 *
	 * @param {Base} element
	 * @param {Object} attrs (in/out map of attributes)
	 * @param {Array<string>} attributeNames name of attributes to apply
	 */
	function applyAttributes(element, attrs, attributeNames) {

	  forEach(attributeNames, function(property) {
	    if (attrs[property] !== undefined) {
	      applyAttribute(element, attrs, property);
	    }
	  });
	}

	/**
	 * Apply named property to element and drain it from the attrs
	 * collection.
	 *
	 * @param {Base} element
	 * @param {Object} attrs (in/out map of attributes)
	 * @param {string} attributeName to apply
	 */
	function applyAttribute(element, attrs, attributeName) {
	  element[attributeName] = attrs[attributeName];

	  delete attrs[attributeName];
	}

	/**
	 * A handler that align elements in a certain way.
	 *
	 */
	function AlignElements$1(modeling, canvas) {
	  this._modeling = modeling;
	  this._canvas = canvas;
	}

	AlignElements$1.$inject = [ 'modeling', 'canvas' ];


	AlignElements$1.prototype.preExecute = function(context) {
	  var modeling = this._modeling;

	  var elements = context.elements,
	      alignment = context.alignment;


	  forEach(elements, function(element) {
	    var delta = {
	      x: 0,
	      y: 0
	    };

	    if (alignment.left) {
	      delta.x = alignment.left - element.x;

	    } else if (alignment.right) {
	      delta.x = (alignment.right - element.width) - element.x;

	    } else if (alignment.center) {
	      delta.x = (alignment.center - Math.round(element.width / 2)) - element.x;

	    } else if (alignment.top) {
	      delta.y = alignment.top - element.y;

	    } else if (alignment.bottom) {
	      delta.y = (alignment.bottom - element.height) - element.y;

	    } else if (alignment.middle) {
	      delta.y = (alignment.middle - Math.round(element.height / 2)) - element.y;
	    }

	    modeling.moveElements([ element ], delta, element.parent);
	  });
	};

	AlignElements$1.prototype.postExecute = function(context) {

	};

	/**
	 * A handler that implements reversible appending of shapes
	 * to a source shape.
	 *
	 * @param {canvas} Canvas
	 * @param {elementFactory} ElementFactory
	 * @param {modeling} Modeling
	 */
	function AppendShapeHandler(modeling) {
	  this._modeling = modeling;
	}

	AppendShapeHandler.$inject = [ 'modeling' ];


	// api //////////////////////


	/**
	 * Creates a new shape
	 *
	 * @param {Object} context
	 * @param {ElementDescriptor} context.shape the new shape
	 * @param {ElementDescriptor} context.source the source object
	 * @param {ElementDescriptor} context.parent the parent object
	 * @param {Point} context.position position of the new element
	 */
	AppendShapeHandler.prototype.preExecute = function(context) {

	  var source = context.source;

	  if (!source) {
	    throw new Error('source required');
	  }

	  var target = context.target || source.parent,
	      shape = context.shape,
	      hints = context.hints || {};

	  shape = context.shape =
	    this._modeling.createShape(
	      shape,
	      context.position,
	      target, { attach: hints.attach });

	  context.shape = shape;
	};

	AppendShapeHandler.prototype.postExecute = function(context) {
	  var hints = context.hints || {};

	  if (!existsConnection(context.source, context.shape)) {

	    // create connection
	    if (hints.connectionTarget === context.source) {
	      this._modeling.connect(context.shape, context.source, context.connection);
	    } else {
	      this._modeling.connect(context.source, context.shape, context.connection);
	    }
	  }
	};


	function existsConnection(source, target) {
	  return some(source.outgoing, function(c) {
	    return c.target === target;
	  });
	}

	function CreateConnectionHandler(canvas, layouter) {
	  this._canvas = canvas;
	  this._layouter = layouter;
	}

	CreateConnectionHandler.$inject = [ 'canvas', 'layouter' ];


	// api //////////////////////


	/**
	 * Appends a shape to a target shape
	 *
	 * @param {Object} context
	 * @param {djs.element.Base} context.source the source object
	 * @param {djs.element.Base} context.target the parent object
	 * @param {Point} context.position position of the new element
	 */
	CreateConnectionHandler.prototype.execute = function(context) {

	  var connection = context.connection,
	      source = context.source,
	      target = context.target,
	      parent = context.parent,
	      parentIndex = context.parentIndex,
	      hints = context.hints;

	  if (!source || !target) {
	    throw new Error('source and target required');
	  }

	  if (!parent) {
	    throw new Error('parent required');
	  }

	  connection.source = source;
	  connection.target = target;

	  if (!connection.waypoints) {
	    connection.waypoints = this._layouter.layoutConnection(connection, hints);
	  }

	  // add connection
	  this._canvas.addConnection(connection, parent, parentIndex);

	  return connection;
	};

	CreateConnectionHandler.prototype.revert = function(context) {
	  var connection = context.connection;

	  this._canvas.removeConnection(connection);

	  connection.source = null;
	  connection.target = null;

	  return connection;
	};

	var round$8 = Math.round;

	function CreateElementsHandler(modeling) {
	  this._modeling = modeling;
	}

	CreateElementsHandler.$inject = [
	  'modeling'
	];

	CreateElementsHandler.prototype.preExecute = function(context) {
	  var elements = context.elements,
	      parent = context.parent,
	      parentIndex = context.parentIndex,
	      position = context.position,
	      hints = context.hints;

	  var modeling = this._modeling;

	  // make sure each element has x and y
	  forEach(elements, function(element) {
	    if (!isNumber(element.x)) {
	      element.x = 0;
	    }

	    if (!isNumber(element.y)) {
	      element.y = 0;
	    }
	  });

	  var bbox = getBBox(elements);

	  // center elements around position
	  forEach(elements, function(element) {
	    if (isConnection$6(element)) {
	      element.waypoints = map(element.waypoints, function(waypoint) {
	        return {
	          x: round$8(waypoint.x - bbox.x - bbox.width / 2 + position.x),
	          y: round$8(waypoint.y - bbox.y - bbox.height / 2 + position.y)
	        };
	      });
	    }

	    assign(element, {
	      x: round$8(element.x - bbox.x - bbox.width / 2 + position.x),
	      y: round$8(element.y - bbox.y - bbox.height / 2 + position.y)
	    });
	  });

	  var parents = getParents(elements);

	  var cache = {};

	  forEach(elements, function(element) {
	    if (isConnection$6(element)) {
	      cache[ element.id ] = isNumber(parentIndex) ?
	        modeling.createConnection(
	          cache[ element.source.id ],
	          cache[ element.target.id ],
	          parentIndex,
	          element,
	          element.parent || parent,
	          hints
	        ) :
	        modeling.createConnection(
	          cache[ element.source.id ],
	          cache[ element.target.id ],
	          element,
	          element.parent || parent,
	          hints
	        );

	      return;
	    }

	    var createShapeHints = assign({}, hints);

	    if (parents.indexOf(element) === -1) {
	      createShapeHints.autoResize = false;
	    }

	    cache[ element.id ] = isNumber(parentIndex) ?
	      modeling.createShape(
	        element,
	        pick(element, [ 'x', 'y', 'width', 'height' ]),
	        element.parent || parent,
	        parentIndex,
	        createShapeHints
	      ) :
	      modeling.createShape(
	        element,
	        pick(element, [ 'x', 'y', 'width', 'height' ]),
	        element.parent || parent,
	        createShapeHints
	      );
	  });

	  context.elements = values(cache);
	};

	// helpers //////////

	function isConnection$6(element) {
	  return !!element.waypoints;
	}

	var round$9 = Math.round;


	/**
	 * A handler that implements reversible addition of shapes.
	 *
	 * @param {canvas} Canvas
	 */
	function CreateShapeHandler(canvas) {
	  this._canvas = canvas;
	}

	CreateShapeHandler.$inject = [ 'canvas' ];


	// api //////////////////////


	/**
	 * Appends a shape to a target shape
	 *
	 * @param {Object} context
	 * @param {djs.model.Base} context.parent the parent object
	 * @param {Point} context.position position of the new element
	 */
	CreateShapeHandler.prototype.execute = function(context) {

	  var shape = context.shape,
	      positionOrBounds = context.position,
	      parent = context.parent,
	      parentIndex = context.parentIndex;

	  if (!parent) {
	    throw new Error('parent required');
	  }

	  if (!positionOrBounds) {
	    throw new Error('position required');
	  }

	  // (1) add at event center position _or_ at given bounds
	  if (positionOrBounds.width !== undefined) {
	    assign(shape, positionOrBounds);
	  } else {
	    assign(shape, {
	      x: positionOrBounds.x - round$9(shape.width / 2),
	      y: positionOrBounds.y - round$9(shape.height / 2)
	    });
	  }

	  // (2) add to canvas
	  this._canvas.addShape(shape, parent, parentIndex);

	  return shape;
	};


	/**
	 * Undo append by removing the shape
	 */
	CreateShapeHandler.prototype.revert = function(context) {

	  var shape = context.shape;

	  // (3) remove form canvas
	  this._canvas.removeShape(shape);

	  return shape;
	};

	/**
	 * A handler that attaches a label to a given target shape.
	 *
	 * @param {Canvas} canvas
	 */
	function CreateLabelHandler(canvas) {
	  CreateShapeHandler.call(this, canvas);
	}

	inherits_browser(CreateLabelHandler, CreateShapeHandler);

	CreateLabelHandler.$inject = [ 'canvas' ];


	// api //////////////////////


	var originalExecute = CreateShapeHandler.prototype.execute;

	/**
	 * Appends a label to a target shape.
	 *
	 * @method CreateLabelHandler#execute
	 *
	 * @param {Object} context
	 * @param {ElementDescriptor} context.target the element the label is attached to
	 * @param {ElementDescriptor} context.parent the parent object
	 * @param {Point} context.position position of the new element
	 */
	CreateLabelHandler.prototype.execute = function(context) {

	  var label = context.shape;

	  ensureValidDimensions(label);

	  label.labelTarget = context.labelTarget;

	  return originalExecute.call(this, context);
	};

	var originalRevert = CreateShapeHandler.prototype.revert;

	/**
	 * Undo append by removing the shape
	 */
	CreateLabelHandler.prototype.revert = function(context) {
	  context.shape.labelTarget = null;

	  return originalRevert.call(this, context);
	};


	// helpers //////////////////////

	function ensureValidDimensions(label) {

	  // make sure a label has valid { width, height } dimensions
	  [ 'width', 'height' ].forEach(function(prop) {
	    if (typeof label[prop] === 'undefined') {
	      label[prop] = 0;
	    }
	  });
	}

	/**
	 * A handler that implements reversible deletion of Connections.
	 */
	function DeleteConnectionHandler(canvas, modeling) {
	  this._canvas = canvas;
	  this._modeling = modeling;
	}

	DeleteConnectionHandler.$inject = [
	  'canvas',
	  'modeling'
	];


	DeleteConnectionHandler.prototype.execute = function(context) {

	  var connection = context.connection,
	      parent = connection.parent;

	  context.parent = parent;

	  // remember containment
	  context.parentIndex = indexOf$1(parent.children, connection);

	  context.source = connection.source;
	  context.target = connection.target;

	  this._canvas.removeConnection(connection);

	  connection.source = null;
	  connection.target = null;

	  return connection;
	};

	/**
	 * Command revert implementation.
	 */
	DeleteConnectionHandler.prototype.revert = function(context) {

	  var connection = context.connection,
	      parent = context.parent,
	      parentIndex = context.parentIndex;

	  connection.source = context.source;
	  connection.target = context.target;

	  // restore containment
	  add$1(parent.children, connection, parentIndex);

	  this._canvas.addConnection(connection, parent);

	  return connection;
	};

	function DeleteElementsHandler(modeling, elementRegistry) {
	  this._modeling = modeling;
	  this._elementRegistry = elementRegistry;
	}

	DeleteElementsHandler.$inject = [
	  'modeling',
	  'elementRegistry'
	];


	DeleteElementsHandler.prototype.postExecute = function(context) {

	  var modeling = this._modeling,
	      elementRegistry = this._elementRegistry,
	      elements = context.elements;

	  forEach(elements, function(element) {

	    // element may have been removed with previous
	    // remove operations already (e.g. in case of nesting)
	    if (!elementRegistry.get(element.id)) {
	      return;
	    }

	    if (element.waypoints) {
	      modeling.removeConnection(element);
	    } else {
	      modeling.removeShape(element);
	    }
	  });
	};

	/**
	 * A handler that implements reversible deletion of shapes.
	 *
	 */
	function DeleteShapeHandler(canvas, modeling) {
	  this._canvas = canvas;
	  this._modeling = modeling;
	}

	DeleteShapeHandler.$inject = [ 'canvas', 'modeling' ];


	/**
	 * - Remove connections
	 * - Remove all direct children
	 */
	DeleteShapeHandler.prototype.preExecute = function(context) {

	  var modeling = this._modeling;

	  var shape = context.shape;

	  // remove connections
	  saveClear(shape.incoming, function(connection) {

	    // To make sure that the connection isn't removed twice
	    // For example if a container is removed
	    modeling.removeConnection(connection, { nested: true });
	  });

	  saveClear(shape.outgoing, function(connection) {
	    modeling.removeConnection(connection, { nested: true });
	  });

	  // remove child shapes and connections
	  saveClear(shape.children, function(child) {
	    if (isConnection$7(child)) {
	      modeling.removeConnection(child, { nested: true });
	    } else {
	      modeling.removeShape(child, { nested: true });
	    }
	  });
	};

	/**
	 * Remove shape and remember the parent
	 */
	DeleteShapeHandler.prototype.execute = function(context) {
	  var canvas = this._canvas;

	  var shape = context.shape,
	      oldParent = shape.parent;

	  context.oldParent = oldParent;

	  // remove containment
	  context.oldParentIndex = indexOf$1(oldParent.children, shape);

	  // remove shape
	  canvas.removeShape(shape);

	  return shape;
	};


	/**
	 * Command revert implementation
	 */
	DeleteShapeHandler.prototype.revert = function(context) {

	  var canvas = this._canvas;

	  var shape = context.shape,
	      oldParent = context.oldParent,
	      oldParentIndex = context.oldParentIndex;

	  // restore containment
	  add$1(oldParent.children, shape, oldParentIndex);

	  canvas.addShape(shape, oldParent);

	  return shape;
	};

	function isConnection$7(element) {
	  return element.waypoints;
	}

	/**
	 * A handler that distributes elements evenly.
	 */
	function DistributeElements$1(modeling) {
	  this._modeling = modeling;
	}

	DistributeElements$1.$inject = [ 'modeling' ];

	var OFF_AXIS = {
	  x: 'y',
	  y: 'x'
	};

	DistributeElements$1.prototype.preExecute = function(context) {
	  var modeling = this._modeling;

	  var groups = context.groups,
	      axis = context.axis,
	      dimension = context.dimension;

	  function updateRange(group, element) {
	    group.range.min = Math.min(element[axis], group.range.min);
	    group.range.max = Math.max(element[axis] + element[dimension], group.range.max);
	  }

	  function center(element) {
	    return element[axis] + element[dimension] / 2;
	  }

	  function lastIdx(arr) {
	    return arr.length - 1;
	  }

	  function rangeDiff(range) {
	    return range.max - range.min;
	  }

	  function centerElement(refCenter, element) {
	    var delta = { y: 0 };

	    delta[axis] = refCenter - center(element);

	    if (delta[axis]) {

	      delta[OFF_AXIS[axis]] = 0;

	      modeling.moveElements([ element ], delta, element.parent);
	    }
	  }

	  var firstGroup = groups[0],
	      lastGroupIdx = lastIdx(groups),
	      lastGroup = groups[ lastGroupIdx ];

	  var margin,
	      spaceInBetween,
	      groupsSize = 0; // the size of each range

	  forEach(groups, function(group, idx) {
	    var sortedElements,
	        refElem,
	        refCenter;

	    if (group.elements.length < 2) {
	      if (idx && idx !== groups.length - 1) {
	        updateRange(group, group.elements[0]);

	        groupsSize += rangeDiff(group.range);
	      }
	      return;
	    }

	    sortedElements = sortBy(group.elements, axis);

	    refElem = sortedElements[0];

	    if (idx === lastGroupIdx) {
	      refElem = sortedElements[lastIdx(sortedElements)];
	    }

	    refCenter = center(refElem);

	    // wanna update the ranges after the shapes have been centered
	    group.range = null;

	    forEach(sortedElements, function(element) {

	      centerElement(refCenter, element);

	      if (group.range === null) {
	        group.range = {
	          min: element[axis],
	          max: element[axis] + element[dimension]
	        };

	        return;
	      }

	      // update group's range after centering the range elements
	      updateRange(group, element);
	    });

	    if (idx && idx !== groups.length - 1) {
	      groupsSize += rangeDiff(group.range);
	    }
	  });

	  spaceInBetween = Math.abs(lastGroup.range.min - firstGroup.range.max);

	  margin = Math.round((spaceInBetween - groupsSize) / (groups.length - 1));

	  if (margin < groups.length - 1) {
	    return;
	  }

	  forEach(groups, function(group, groupIdx) {
	    var delta = {},
	        prevGroup;

	    if (group === firstGroup || group === lastGroup) {
	      return;
	    }

	    prevGroup = groups[groupIdx - 1];

	    group.range.max = 0;

	    forEach(group.elements, function(element, idx) {
	      delta[OFF_AXIS[axis]] = 0;
	      delta[axis] = (prevGroup.range.max - element[axis]) + margin;

	      if (group.range.min !== element[axis]) {
	        delta[axis] += element[axis] - group.range.min;
	      }

	      if (delta[axis]) {
	        modeling.moveElements([ element ], delta, element.parent);
	      }

	      group.range.max = Math.max(element[axis] + element[dimension], idx ? group.range.max : 0);
	    });
	  });
	};

	DistributeElements$1.prototype.postExecute = function(context) {

	};

	/**
	 * A handler that implements reversible moving of shapes.
	 */
	function LayoutConnectionHandler(layouter, canvas) {
	  this._layouter = layouter;
	  this._canvas = canvas;
	}

	LayoutConnectionHandler.$inject = [ 'layouter', 'canvas' ];

	LayoutConnectionHandler.prototype.execute = function(context) {

	  var connection = context.connection;

	  var oldWaypoints = connection.waypoints;

	  assign(context, {
	    oldWaypoints: oldWaypoints
	  });

	  connection.waypoints = this._layouter.layoutConnection(connection, context.hints);

	  return connection;
	};

	LayoutConnectionHandler.prototype.revert = function(context) {

	  var connection = context.connection;

	  connection.waypoints = context.oldWaypoints;

	  return connection;
	};

	/**
	 * A handler that implements reversible moving of connections.
	 *
	 * The handler differs from the layout connection handler in a sense
	 * that it preserves the connection layout.
	 */
	function MoveConnectionHandler() { }


	MoveConnectionHandler.prototype.execute = function(context) {

	  var connection = context.connection,
	      delta = context.delta;

	  var newParent = context.newParent || connection.parent,
	      newParentIndex = context.newParentIndex,
	      oldParent = connection.parent;

	  // save old parent in context
	  context.oldParent = oldParent;
	  context.oldParentIndex = remove$2(oldParent.children, connection);

	  // add to new parent at position
	  add$1(newParent.children, connection, newParentIndex);

	  // update parent
	  connection.parent = newParent;

	  // update waypoint positions
	  forEach(connection.waypoints, function(p) {
	    p.x += delta.x;
	    p.y += delta.y;

	    if (p.original) {
	      p.original.x += delta.x;
	      p.original.y += delta.y;
	    }
	  });

	  return connection;
	};

	MoveConnectionHandler.prototype.revert = function(context) {

	  var connection = context.connection,
	      newParent = connection.parent,
	      oldParent = context.oldParent,
	      oldParentIndex = context.oldParentIndex,
	      delta = context.delta;

	  // remove from newParent
	  remove$2(newParent.children, connection);

	  // restore previous location in old parent
	  add$1(oldParent.children, connection, oldParentIndex);

	  // restore parent
	  connection.parent = oldParent;

	  // revert to old waypoint positions
	  forEach(connection.waypoints, function(p) {
	    p.x -= delta.x;
	    p.y -= delta.y;

	    if (p.original) {
	      p.original.x -= delta.x;
	      p.original.y -= delta.y;
	    }
	  });

	  return connection;
	};

	function getResizedSourceAnchor(connection, shape, oldBounds) {

	  var waypoints = safeGetWaypoints(connection),
	      waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),
	      oldAnchor = waypoints[0];

	  // new anchor is the last waypoint enclosed be resized source
	  if (waypointsInsideNewBounds.length) {
	    return waypointsInsideNewBounds[ waypointsInsideNewBounds.length - 1 ];
	  }

	  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);
	}


	function getResizedTargetAnchor(connection, shape, oldBounds) {

	  var waypoints = safeGetWaypoints(connection),
	      waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),
	      oldAnchor = waypoints[waypoints.length - 1];

	  // new anchor is the first waypoint enclosed be resized target
	  if (waypointsInsideNewBounds.length) {
	    return waypointsInsideNewBounds[ 0 ];
	  }

	  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);
	}


	function getMovedSourceAnchor(connection, source, moveDelta) {

	  var waypoints = safeGetWaypoints(connection),
	      oldBounds = subtract(source, moveDelta),
	      oldAnchor = waypoints[ 0 ];

	  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, source);
	}


	function getMovedTargetAnchor(connection, target, moveDelta) {

	  var waypoints = safeGetWaypoints(connection),
	      oldBounds = subtract(target, moveDelta),
	      oldAnchor = waypoints[ waypoints.length - 1 ];

	  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, target);
	}


	// helpers //////////////////////

	function subtract(bounds, delta) {
	  return {
	    x: bounds.x - delta.x,
	    y: bounds.y - delta.y,
	    width: bounds.width,
	    height: bounds.height
	  };
	}


	/**
	 * Return waypoints of given connection; throw if non exists (should not happen!!).
	 *
	 * @param {Connection} connection
	 *
	 * @return {Array<Point>}
	 */
	function safeGetWaypoints(connection) {

	  var waypoints = connection.waypoints;

	  if (!waypoints.length) {
	    throw new Error('connection#' + connection.id + ': no waypoints');
	  }

	  return waypoints;
	}

	function getWaypointsInsideBounds(waypoints, bounds) {
	  var originalWaypoints = map(waypoints, getOriginal$1);

	  return filter(originalWaypoints, function(waypoint) {
	    return isInsideBounds(waypoint, bounds);
	  });
	}

	/**
	 * Checks if point is inside bounds, incl. edges.
	 *
	 * @param {Point} point
	 * @param {Bounds} bounds
	 */
	function isInsideBounds(point, bounds) {
	  return getOrientation(bounds, point, 1) === 'intersect';
	}

	function getOriginal$1(point) {
	  return point.original || point;
	}

	function MoveClosure() {

	  this.allShapes = {};
	  this.allConnections = {};

	  this.enclosedElements = {};
	  this.enclosedConnections = {};

	  this.topLevel = {};
	}


	MoveClosure.prototype.add = function(element, isTopLevel) {
	  return this.addAll([ element ], isTopLevel);
	};


	MoveClosure.prototype.addAll = function(elements, isTopLevel) {

	  var newClosure = getClosure(elements, !!isTopLevel, this);

	  assign(this, newClosure);

	  return this;
	};

	/**
	 * A helper that is able to carry out serialized move
	 * operations on multiple elements.
	 *
	 * @param {Modeling} modeling
	 */
	function MoveHelper(modeling) {
	  this._modeling = modeling;
	}

	/**
	 * Move the specified elements and all children by the given delta.
	 *
	 * This moves all enclosed connections, too and layouts all affected
	 * external connections.
	 *
	 * @param  {Array<djs.model.Base>} elements
	 * @param  {Point} delta
	 * @param  {djs.model.Base} newParent applied to the first level of shapes
	 *
	 * @return {Array<djs.model.Base>} list of touched elements
	 */
	MoveHelper.prototype.moveRecursive = function(elements, delta, newParent) {
	  if (!elements) {
	    return [];
	  } else {
	    return this.moveClosure(this.getClosure(elements), delta, newParent);
	  }
	};

	/**
	 * Move the given closure of elmements.
	 *
	 * @param {Object} closure
	 * @param {Point} delta
	 * @param {djs.model.Base} [newParent]
	 * @param {djs.model.Base} [newHost]
	 */
	MoveHelper.prototype.moveClosure = function(closure, delta, newParent, newHost, primaryShape) {
	  var modeling = this._modeling;

	  var allShapes = closure.allShapes,
	      allConnections = closure.allConnections,
	      enclosedConnections = closure.enclosedConnections,
	      topLevel = closure.topLevel,
	      keepParent = false;

	  if (primaryShape && primaryShape.parent === newParent) {
	    keepParent = true;
	  }

	  // move all shapes
	  forEach(allShapes, function(shape) {

	    // move the element according to the given delta
	    modeling.moveShape(shape, delta, topLevel[shape.id] && !keepParent && newParent, {
	      recurse: false,
	      layout: false
	    });
	  });

	  // move all child connections / layout external connections
	  forEach(allConnections, function(c) {

	    var sourceMoved = !!allShapes[c.source.id],
	        targetMoved = !!allShapes[c.target.id];

	    if (enclosedConnections[c.id] && sourceMoved && targetMoved) {
	      modeling.moveConnection(c, delta, topLevel[c.id] && !keepParent && newParent);
	    } else {
	      modeling.layoutConnection(c, {
	        connectionStart: sourceMoved && getMovedSourceAnchor(c, c.source, delta),
	        connectionEnd: targetMoved && getMovedTargetAnchor(c, c.target, delta)
	      });
	    }
	  });
	};

	/**
	 * Returns the closure for the selected elements
	 *
	 * @param  {Array<djs.model.Base>} elements
	 * @return {MoveClosure} closure
	 */
	MoveHelper.prototype.getClosure = function(elements) {
	  return new MoveClosure().addAll(elements, true);
	};

	/**
	 * A handler that implements reversible moving of shapes.
	 */
	function MoveElementsHandler(modeling) {
	  this._helper = new MoveHelper(modeling);
	}

	MoveElementsHandler.$inject = [ 'modeling' ];

	MoveElementsHandler.prototype.preExecute = function(context) {
	  context.closure = this._helper.getClosure(context.shapes);
	};

	MoveElementsHandler.prototype.postExecute = function(context) {

	  var hints = context.hints,
	      primaryShape;

	  if (hints && hints.primaryShape) {
	    primaryShape = hints.primaryShape;
	    hints.oldParent = primaryShape.parent;
	  }

	  this._helper.moveClosure(
	    context.closure,
	    context.delta,
	    context.newParent,
	    context.newHost,
	    primaryShape
	  );
	};

	/**
	 * A handler that implements reversible moving of shapes.
	 */
	function MoveShapeHandler(modeling) {
	  this._modeling = modeling;

	  this._helper = new MoveHelper(modeling);
	}

	MoveShapeHandler.$inject = [ 'modeling' ];


	MoveShapeHandler.prototype.execute = function(context) {

	  var shape = context.shape,
	      delta = context.delta,
	      newParent = context.newParent || shape.parent,
	      newParentIndex = context.newParentIndex,
	      oldParent = shape.parent;

	  context.oldBounds = pick(shape, [ 'x', 'y', 'width', 'height']);

	  // save old parent in context
	  context.oldParent = oldParent;
	  context.oldParentIndex = remove$2(oldParent.children, shape);

	  // add to new parent at position
	  add$1(newParent.children, shape, newParentIndex);

	  // update shape parent + position
	  assign(shape, {
	    parent: newParent,
	    x: shape.x + delta.x,
	    y: shape.y + delta.y
	  });

	  return shape;
	};

	MoveShapeHandler.prototype.postExecute = function(context) {

	  var shape = context.shape,
	      delta = context.delta,
	      hints = context.hints;

	  var modeling = this._modeling;

	  if (hints.layout !== false) {

	    forEach(shape.incoming, function(c) {
	      modeling.layoutConnection(c, {
	        connectionEnd: getMovedTargetAnchor(c, shape, delta)
	      });
	    });

	    forEach(shape.outgoing, function(c) {
	      modeling.layoutConnection(c, {
	        connectionStart: getMovedSourceAnchor(c, shape, delta)
	      });
	    });
	  }

	  if (hints.recurse !== false) {
	    this.moveChildren(context);
	  }
	};

	MoveShapeHandler.prototype.revert = function(context) {

	  var shape = context.shape,
	      oldParent = context.oldParent,
	      oldParentIndex = context.oldParentIndex,
	      delta = context.delta;

	  // restore previous location in old parent
	  add$1(oldParent.children, shape, oldParentIndex);

	  // revert to old position and parent
	  assign(shape, {
	    parent: oldParent,
	    x: shape.x - delta.x,
	    y: shape.y - delta.y
	  });

	  return shape;
	};

	MoveShapeHandler.prototype.moveChildren = function(context) {

	  var delta = context.delta,
	      shape = context.shape;

	  this._helper.moveRecursive(shape.children, delta, null);
	};

	MoveShapeHandler.prototype.getNewParent = function(context) {
	  return context.newParent || context.shape.parent;
	};

	/**
	 * Reconnect connection handler
	 */
	function ReconnectConnectionHandler(modeling) {
	  this._modeling = modeling;
	}

	ReconnectConnectionHandler.$inject = [ 'modeling' ];

	ReconnectConnectionHandler.prototype.execute = function(context) {
	  var newSource = context.newSource,
	      newTarget = context.newTarget,
	      connection = context.connection,
	      dockingOrPoints = context.dockingOrPoints;

	  if (!newSource && !newTarget) {
	    throw new Error('newSource or newTarget required');
	  }

	  if (isArray(dockingOrPoints)) {
	    context.oldWaypoints = connection.waypoints;
	    connection.waypoints = dockingOrPoints;
	  }

	  if (newSource) {
	    context.oldSource = connection.source;
	    connection.source = newSource;
	  }

	  if (newTarget) {
	    context.oldTarget = connection.target;
	    connection.target = newTarget;
	  }

	  return connection;
	};

	ReconnectConnectionHandler.prototype.postExecute = function(context) {
	  var connection = context.connection,
	      newSource = context.newSource,
	      newTarget = context.newTarget,
	      dockingOrPoints = context.dockingOrPoints,
	      hints = context.hints || {};

	  var layoutConnectionHints = {};

	  if (hints.connectionStart) {
	    layoutConnectionHints.connectionStart = hints.connectionStart;
	  }

	  if (hints.connectionEnd) {
	    layoutConnectionHints.connectionEnd = hints.connectionEnd;
	  }

	  if (hints.layoutConnection === false) {
	    return;
	  }

	  if (newSource && (!newTarget || hints.docking === 'source')) {
	    layoutConnectionHints.connectionStart = layoutConnectionHints.connectionStart
	      || getDocking$2(isArray(dockingOrPoints) ? dockingOrPoints[ 0 ] : dockingOrPoints);
	  }

	  if (newTarget && (!newSource || hints.docking === 'target')) {
	    layoutConnectionHints.connectionEnd = layoutConnectionHints.connectionEnd
	      || getDocking$2(isArray(dockingOrPoints) ? dockingOrPoints[ dockingOrPoints.length - 1 ] : dockingOrPoints);
	  }

	  if (hints.newWaypoints) {
	    layoutConnectionHints.waypoints = hints.newWaypoints;
	  }

	  this._modeling.layoutConnection(connection, layoutConnectionHints);
	};

	ReconnectConnectionHandler.prototype.revert = function(context) {
	  var oldSource = context.oldSource,
	      oldTarget = context.oldTarget,
	      oldWaypoints = context.oldWaypoints,
	      connection = context.connection;

	  if (oldSource) {
	    connection.source = oldSource;
	  }

	  if (oldTarget) {
	    connection.target = oldTarget;
	  }

	  if (oldWaypoints) {
	    connection.waypoints = oldWaypoints;
	  }

	  return connection;
	};



	// helpers //////////

	function getDocking$2(point) {
	  return point.original || point;
	}

	/**
	 * Replace shape by adding new shape and removing old shape. Incoming and outgoing connections will
	 * be kept if possible.
	 *
	 * @class
	 * @constructor
	 *
	 * @param {Modeling} modeling
	 * @param {Rules} rules
	 */
	function ReplaceShapeHandler(modeling, rules) {
	  this._modeling = modeling;
	  this._rules = rules;
	}

	ReplaceShapeHandler.$inject = [ 'modeling', 'rules' ];


	/**
	 * Add new shape.
	 *
	 * @param {Object} context
	 * @param {djs.model.Shape} context.oldShape
	 * @param {Object} context.newData
	 * @param {string} context.newData.type
	 * @param {number} context.newData.x
	 * @param {number} context.newData.y
	 * @param {Object} [hints]
	 */
	ReplaceShapeHandler.prototype.preExecute = function(context) {
	  var self = this,
	      modeling = this._modeling,
	      rules = this._rules;

	  var oldShape = context.oldShape,
	      newData = context.newData,
	      hints = context.hints || {},
	      newShape;

	  function canReconnect(source, target, connection) {
	    return rules.allowed('connection.reconnect', {
	      connection: connection,
	      source: source,
	      target: target
	    });
	  }

	  // (1) add new shape at given position
	  var position = {
	    x: newData.x,
	    y: newData.y
	  };

	  var oldBounds = {
	    x: oldShape.x,
	    y: oldShape.y,
	    width: oldShape.width,
	    height: oldShape.height
	  };

	  newShape = context.newShape =
	    context.newShape ||
	    self.createShape(newData, position, oldShape.parent, hints);

	  // (2) update host
	  if (oldShape.host) {
	    modeling.updateAttachment(newShape, oldShape.host);
	  }

	  // (3) adopt all children from old shape
	  var children;

	  if (hints.moveChildren !== false) {
	    children = oldShape.children.slice();

	    modeling.moveElements(children, { x: 0, y: 0 }, newShape, hints);
	  }

	  // (4) reconnect connections to new shape if possible
	  var incoming = oldShape.incoming.slice(),
	      outgoing = oldShape.outgoing.slice();

	  forEach(incoming, function(connection) {
	    var source = connection.source,
	        allowed = canReconnect(source, newShape, connection);

	    if (allowed) {
	      self.reconnectEnd(
	        connection, newShape,
	        getResizedTargetAnchor(connection, newShape, oldBounds),
	        hints
	      );
	    }
	  });

	  forEach(outgoing, function(connection) {
	    var target = connection.target,
	        allowed = canReconnect(newShape, target, connection);

	    if (allowed) {
	      self.reconnectStart(
	        connection, newShape,
	        getResizedSourceAnchor(connection, newShape, oldBounds),
	        hints
	      );
	    }
	  });
	};


	/**
	 * Remove old shape.
	 */
	ReplaceShapeHandler.prototype.postExecute = function(context) {
	  var oldShape = context.oldShape;

	  this._modeling.removeShape(oldShape);
	};


	ReplaceShapeHandler.prototype.execute = function(context) {};


	ReplaceShapeHandler.prototype.revert = function(context) {};


	ReplaceShapeHandler.prototype.createShape = function(shape, position, target, hints) {
	  return this._modeling.createShape(shape, position, target, hints);
	};


	ReplaceShapeHandler.prototype.reconnectStart = function(connection, newSource, dockingPoint, hints) {
	  this._modeling.reconnectStart(connection, newSource, dockingPoint, hints);
	};


	ReplaceShapeHandler.prototype.reconnectEnd = function(connection, newTarget, dockingPoint, hints) {
	  this._modeling.reconnectEnd(connection, newTarget, dockingPoint, hints);
	};

	/**
	 * A handler that implements reversible resizing of shapes.
	 *
	 * @param {Modeling} modeling
	 */
	function ResizeShapeHandler(modeling) {
	  this._modeling = modeling;
	}

	ResizeShapeHandler.$inject = [ 'modeling' ];

	/**
	 * {
	 *   shape: {....}
	 *   newBounds: {
	 *     width:  20,
	 *     height: 40,
	 *     x:       5,
	 *     y:      10
	 *   }
	 *
	 * }
	 */
	ResizeShapeHandler.prototype.execute = function(context) {
	  var shape = context.shape,
	      newBounds = context.newBounds,
	      minBounds = context.minBounds;

	  if (newBounds.x === undefined || newBounds.y === undefined ||
	      newBounds.width === undefined || newBounds.height === undefined) {
	    throw new Error('newBounds must have {x, y, width, height} properties');
	  }

	  if (minBounds && (newBounds.width < minBounds.width
	    || newBounds.height < minBounds.height)) {
	    throw new Error('width and height cannot be less than minimum height and width');
	  } else if (!minBounds
	    && newBounds.width < 10 || newBounds.height < 10) {
	    throw new Error('width and height cannot be less than 10px');
	  }

	  // save old bbox in context
	  context.oldBounds = {
	    width:  shape.width,
	    height: shape.height,
	    x:      shape.x,
	    y:      shape.y
	  };

	  // update shape
	  assign(shape, {
	    width:  newBounds.width,
	    height: newBounds.height,
	    x:      newBounds.x,
	    y:      newBounds.y
	  });

	  return shape;
	};

	ResizeShapeHandler.prototype.postExecute = function(context) {
	  var modeling = this._modeling;

	  var shape = context.shape,
	      oldBounds = context.oldBounds,
	      hints = context.hints || {};

	  if (hints.layout === false) {
	    return;
	  }

	  forEach(shape.incoming, function(c) {
	    modeling.layoutConnection(c, {
	      connectionEnd: getResizedTargetAnchor(c, shape, oldBounds)
	    });
	  });

	  forEach(shape.outgoing, function(c) {
	    modeling.layoutConnection(c, {
	      connectionStart: getResizedSourceAnchor(c, shape, oldBounds)
	    });
	  });

	};

	ResizeShapeHandler.prototype.revert = function(context) {

	  var shape = context.shape,
	      oldBounds = context.oldBounds;

	  // restore previous bbox
	  assign(shape, {
	    width:  oldBounds.width,
	    height: oldBounds.height,
	    x:      oldBounds.x,
	    y:      oldBounds.y
	  });

	  return shape;
	};

	/**
	 * Add or remove space by moving and resizing shapes and updating connection waypoints.
	 */
	function SpaceToolHandler(modeling) {
	  this._modeling = modeling;
	}

	SpaceToolHandler.$inject = [ 'modeling' ];

	SpaceToolHandler.prototype.preExecute = function(context) {
	  var delta = context.delta,
	      direction = context.direction,
	      movingShapes = context.movingShapes,
	      resizingShapes = context.resizingShapes,
	      start = context.start,
	      oldBounds = {};

	  // (1) move shapes
	  this.moveShapes(movingShapes, delta);

	  // (2a) save old bounds of resized shapes
	  forEach(resizingShapes, function(shape) {
	    oldBounds[shape.id] = getBounds(shape);
	  });

	  // (2b) resize shapes
	  this.resizeShapes(resizingShapes, delta, direction);

	  // (3) update connection waypoints
	  this.updateConnectionWaypoints(
	    getWaypointsUpdatingConnections(movingShapes, resizingShapes),
	    delta,
	    direction,
	    start,
	    movingShapes,
	    resizingShapes,
	    oldBounds
	  );
	};

	SpaceToolHandler.prototype.execute = function() {};
	SpaceToolHandler.prototype.revert = function() {};

	SpaceToolHandler.prototype.moveShapes = function(shapes, delta) {
	  var self = this;

	  forEach(shapes, function(element) {
	    self._modeling.moveShape(element, delta, null, {
	      autoResize: false,
	      layout: false,
	      recurse: false
	    });
	  });
	};

	SpaceToolHandler.prototype.resizeShapes = function(shapes, delta, direction) {
	  var self = this;

	  forEach(shapes, function(shape) {
	    var newBounds = resizeBounds$1(shape, direction, delta);

	    self._modeling.resizeShape(shape, newBounds, null, {
	      attachSupport: false,
	      autoResize: false,
	      layout: false
	    });
	  });
	};

	/**
	 * Update connections waypoints according to the rules:
	 *   1. Both source and target are moved/resized => move waypoints by the delta
	 *   2. Only one of source and target is moved/resized => re-layout connection with moved start/end
	 */
	SpaceToolHandler.prototype.updateConnectionWaypoints = function(
	    connections,
	    delta,
	    direction,
	    start,
	    movingShapes,
	    resizingShapes,
	    oldBounds
	) {
	  var self = this,
	      affectedShapes = movingShapes.concat(resizingShapes);

	  forEach(connections, function(connection) {
	    var source = connection.source,
	        target = connection.target,
	        waypoints = copyWaypoints$1(connection),
	        axis = getAxisFromDirection(direction),
	        layoutHints = {
	          labelBehavior: false
	        };

	    if (includes$5(affectedShapes, source) && includes$5(affectedShapes, target)) {

	      // move waypoints
	      waypoints = map(waypoints, function(waypoint) {
	        if (shouldMoveWaypoint(waypoint, start, direction)) {

	          // move waypoint
	          waypoint[ axis ] = waypoint[ axis ] + delta[ axis ];
	        }

	        if (waypoint.original && shouldMoveWaypoint(waypoint.original, start, direction)) {

	          // move waypoint original
	          waypoint.original[ axis ] = waypoint.original[ axis ] + delta[ axis ];
	        }

	        return waypoint;
	      });

	      self._modeling.updateWaypoints(connection, waypoints, {
	        labelBehavior: false
	      });
	    } else if (includes$5(affectedShapes, source) || includes$5(affectedShapes, target)) {

	      // re-layout connection with moved start/end
	      if (includes$5(movingShapes, source)) {
	        layoutHints.connectionStart = getMovedSourceAnchor(connection, source, delta);
	      } else if (includes$5(movingShapes, target)) {
	        layoutHints.connectionEnd = getMovedTargetAnchor(connection, target, delta);
	      } else if (includes$5(resizingShapes, source)) {
	        layoutHints.connectionStart = getResizedSourceAnchor(
	          connection, source, oldBounds[source.id]
	        );
	      } else if (includes$5(resizingShapes, target)) {
	        layoutHints.connectionEnd = getResizedTargetAnchor(
	          connection, target, oldBounds[target.id]
	        );
	      }

	      self._modeling.layoutConnection(connection, layoutHints);
	    }
	  });
	};


	// helpers //////////

	function copyWaypoint$1(waypoint) {
	  return assign({}, waypoint);
	}

	function copyWaypoints$1(connection) {
	  return map(connection.waypoints, function(waypoint) {

	    waypoint = copyWaypoint$1(waypoint);

	    if (waypoint.original) {
	      waypoint.original = copyWaypoint$1(waypoint.original);
	    }

	    return waypoint;
	  });
	}

	function getAxisFromDirection(direction) {
	  switch (direction) {
	  case 'n':
	    return 'y';
	  case 'w':
	    return 'x';
	  case 's':
	    return 'y';
	  case 'e':
	    return 'x';
	  }
	}

	function shouldMoveWaypoint(waypoint, start, direction) {
	  var relevantAxis = getAxisFromDirection(direction);

	  if (/e|s/.test(direction)) {
	    return waypoint[ relevantAxis ] > start;
	  } else if (/n|w/.test(direction)) {
	    return waypoint[ relevantAxis ] < start;
	  }
	}

	function includes$5(array, item) {
	  return array.indexOf(item) !== -1;
	}

	function getBounds(shape) {
	  return {
	    x: shape.x,
	    y: shape.y,
	    height: shape.height,
	    width: shape.width
	  };
	}

	/**
	 * A handler that toggles the collapsed state of an element
	 * and the visibility of all its children.
	 *
	 * @param {Modeling} modeling
	 */
	function ToggleShapeCollapseHandler(modeling) {
	  this._modeling = modeling;
	}

	ToggleShapeCollapseHandler.$inject = [ 'modeling' ];


	ToggleShapeCollapseHandler.prototype.execute = function(context) {

	  var shape = context.shape,
	      children = shape.children;

	  // recursively remember previous visibility of children
	  context.oldChildrenVisibility = getElementsVisibilityRecursive(children);

	  // toggle state
	  shape.collapsed = !shape.collapsed;

	  // recursively hide/show children
	  var result = setHiddenRecursive(children, shape.collapsed);

	  return [shape].concat(result);
	};


	ToggleShapeCollapseHandler.prototype.revert = function(context) {

	  var shape = context.shape,
	      oldChildrenVisibility = context.oldChildrenVisibility;

	  var children = shape.children;

	  // recursively set old visability of children
	  var result = restoreVisibilityRecursive(children, oldChildrenVisibility);

	  // retoggle state
	  shape.collapsed = !shape.collapsed;

	  return [shape].concat(result);
	};


	// helpers //////////////////////

	/**
	 * Return a map { elementId -> hiddenState}.
	 *
	 * @param {Array<djs.model.Shape>} elements
	 *
	 * @return {Object}
	 */
	function getElementsVisibilityRecursive(elements) {

	  var result = {};

	  forEach(elements, function(element) {
	    result[element.id] = element.hidden;

	    if (element.children) {
	      result = assign({}, result, getElementsVisibilityRecursive(element.children));
	    }
	  });

	  return result;
	}


	function setHiddenRecursive(elements, newHidden) {
	  var result = [];
	  forEach(elements, function(element) {
	    element.hidden = newHidden;

	    result = result.concat(element);

	    if (element.children) {
	      result = result.concat(setHiddenRecursive(element.children, element.collapsed || newHidden));
	    }
	  });

	  return result;
	}

	function restoreVisibilityRecursive(elements, lastState) {
	  var result = [];
	  forEach(elements, function(element) {
	    element.hidden = lastState[element.id];

	    result = result.concat(element);

	    if (element.children) {
	      result = result.concat(restoreVisibilityRecursive(element.children, lastState));
	    }
	  });

	  return result;
	}

	/**
	 * A handler that implements reversible attaching/detaching of shapes.
	 */
	function UpdateAttachmentHandler(modeling) {
	  this._modeling = modeling;
	}

	UpdateAttachmentHandler.$inject = [ 'modeling' ];


	UpdateAttachmentHandler.prototype.execute = function(context) {
	  var shape = context.shape,
	      newHost = context.newHost,
	      oldHost = shape.host;

	  // (0) detach from old host
	  context.oldHost = oldHost;
	  context.attacherIdx = removeAttacher(oldHost, shape);

	  // (1) attach to new host
	  addAttacher(newHost, shape);

	  // (2) update host
	  shape.host = newHost;

	  return shape;
	};

	UpdateAttachmentHandler.prototype.revert = function(context) {
	  var shape = context.shape,
	      newHost = context.newHost,
	      oldHost = context.oldHost,
	      attacherIdx = context.attacherIdx;

	  // (2) update host
	  shape.host = oldHost;

	  // (1) attach to new host
	  removeAttacher(newHost, shape);

	  // (0) detach from old host
	  addAttacher(oldHost, shape, attacherIdx);

	  return shape;
	};


	function removeAttacher(host, attacher) {

	  // remove attacher from host
	  return remove$2(host && host.attachers, attacher);
	}

	function addAttacher(host, attacher, idx) {

	  if (!host) {
	    return;
	  }

	  var attachers = host.attachers;

	  if (!attachers) {
	    host.attachers = attachers = [];
	  }

	  add$1(attachers, attacher, idx);
	}

	function UpdateWaypointsHandler() { }

	UpdateWaypointsHandler.prototype.execute = function(context) {

	  var connection = context.connection,
	      newWaypoints = context.newWaypoints;

	  context.oldWaypoints = connection.waypoints;

	  connection.waypoints = newWaypoints;

	  return connection;
	};

	UpdateWaypointsHandler.prototype.revert = function(context) {

	  var connection = context.connection,
	      oldWaypoints = context.oldWaypoints;

	  connection.waypoints = oldWaypoints;

	  return connection;
	};

	/**
	 * The basic modeling entry point.
	 *
	 * @param {EventBus} eventBus
	 * @param {ElementFactory} elementFactory
	 * @param {CommandStack} commandStack
	 */
	function Modeling(eventBus, elementFactory, commandStack) {
	  this._eventBus = eventBus;
	  this._elementFactory = elementFactory;
	  this._commandStack = commandStack;

	  var self = this;

	  eventBus.on('diagram.init', function() {

	    // register modeling handlers
	    self.registerHandlers(commandStack);
	  });
	}

	Modeling.$inject = [ 'eventBus', 'elementFactory', 'commandStack' ];


	Modeling.prototype.getHandlers = function() {
	  return {
	    'shape.append': AppendShapeHandler,
	    'shape.create': CreateShapeHandler,
	    'shape.delete': DeleteShapeHandler,
	    'shape.move': MoveShapeHandler,
	    'shape.resize': ResizeShapeHandler,
	    'shape.replace': ReplaceShapeHandler,
	    'shape.toggleCollapse': ToggleShapeCollapseHandler,

	    'spaceTool': SpaceToolHandler,

	    'label.create': CreateLabelHandler,

	    'connection.create': CreateConnectionHandler,
	    'connection.delete': DeleteConnectionHandler,
	    'connection.move': MoveConnectionHandler,
	    'connection.layout': LayoutConnectionHandler,

	    'connection.updateWaypoints': UpdateWaypointsHandler,

	    'connection.reconnect': ReconnectConnectionHandler,

	    'elements.create': CreateElementsHandler,
	    'elements.move': MoveElementsHandler,
	    'elements.delete': DeleteElementsHandler,

	    'elements.distribute': DistributeElements$1,
	    'elements.align': AlignElements$1,

	    'element.updateAttachment': UpdateAttachmentHandler
	  };
	};

	/**
	 * Register handlers with the command stack
	 *
	 * @param {CommandStack} commandStack
	 */
	Modeling.prototype.registerHandlers = function(commandStack) {
	  forEach(this.getHandlers(), function(handler, id) {
	    commandStack.registerHandler(id, handler);
	  });
	};


	// modeling helpers //////////////////////

	Modeling.prototype.moveShape = function(shape, delta, newParent, newParentIndex, hints) {

	  if (typeof newParentIndex === 'object') {
	    hints = newParentIndex;
	    newParentIndex = null;
	  }

	  var context = {
	    shape: shape,
	    delta:  delta,
	    newParent: newParent,
	    newParentIndex: newParentIndex,
	    hints: hints || {}
	  };

	  this._commandStack.execute('shape.move', context);
	};


	/**
	 * Update the attachment of the given shape.
	 *
	 * @param {djs.mode.Base} shape
	 * @param {djs.model.Base} [newHost]
	 */
	Modeling.prototype.updateAttachment = function(shape, newHost) {
	  var context = {
	    shape: shape,
	    newHost: newHost
	  };

	  this._commandStack.execute('element.updateAttachment', context);
	};


	/**
	 * Move a number of shapes to a new target, either setting it as
	 * the new parent or attaching it.
	 *
	 * @param {Array<djs.mode.Base>} shapes
	 * @param {Point} delta
	 * @param {djs.model.Base} [target]
	 * @param {Object} [hints]
	 * @param {boolean} [hints.attach=false]
	 */
	Modeling.prototype.moveElements = function(shapes, delta, target, hints) {

	  hints = hints || {};

	  var attach = hints.attach;

	  var newParent = target,
	      newHost;

	  if (attach === true) {
	    newHost = target;
	    newParent = target.parent;
	  } else

	  if (attach === false) {
	    newHost = null;
	  }

	  var context = {
	    shapes: shapes,
	    delta: delta,
	    newParent: newParent,
	    newHost: newHost,
	    hints: hints
	  };

	  this._commandStack.execute('elements.move', context);
	};


	Modeling.prototype.moveConnection = function(connection, delta, newParent, newParentIndex, hints) {

	  if (typeof newParentIndex === 'object') {
	    hints = newParentIndex;
	    newParentIndex = undefined;
	  }

	  var context = {
	    connection: connection,
	    delta: delta,
	    newParent: newParent,
	    newParentIndex: newParentIndex,
	    hints: hints || {}
	  };

	  this._commandStack.execute('connection.move', context);
	};


	Modeling.prototype.layoutConnection = function(connection, hints) {
	  var context = {
	    connection: connection,
	    hints: hints || {}
	  };

	  this._commandStack.execute('connection.layout', context);
	};


	/**
	 * Create connection.
	 *
	 * @param {djs.model.Base} source
	 * @param {djs.model.Base} target
	 * @param {number} [parentIndex]
	 * @param {Object|djs.model.Connection} connection
	 * @param {djs.model.Base} parent
	 * @param {Object} hints
	 *
	 * @return {djs.model.Connection} the created connection.
	 */
	Modeling.prototype.createConnection = function(source, target, parentIndex, connection, parent, hints) {

	  if (typeof parentIndex === 'object') {
	    hints = parent;
	    parent = connection;
	    connection = parentIndex;
	    parentIndex = undefined;
	  }

	  connection = this._create('connection', connection);

	  var context = {
	    source: source,
	    target: target,
	    parent: parent,
	    parentIndex: parentIndex,
	    connection: connection,
	    hints: hints
	  };

	  this._commandStack.execute('connection.create', context);

	  return context.connection;
	};


	/**
	 * Create a shape at the specified position.
	 *
	 * @param {djs.model.Shape|Object} shape
	 * @param {Point} position
	 * @param {djs.model.Shape|djs.model.Root} target
	 * @param {number} [parentIndex] position in parents children list
	 * @param {Object} [hints]
	 * @param {boolean} [hints.attach] whether to attach to target or become a child
	 *
	 * @return {djs.model.Shape} the created shape
	 */
	Modeling.prototype.createShape = function(shape, position, target, parentIndex, hints) {

	  if (typeof parentIndex !== 'number') {
	    hints = parentIndex;
	    parentIndex = undefined;
	  }

	  hints = hints || {};

	  var attach = hints.attach,
	      parent,
	      host;

	  shape = this._create('shape', shape);

	  if (attach) {
	    parent = target.parent;
	    host = target;
	  } else {
	    parent = target;
	  }

	  var context = {
	    position: position,
	    shape: shape,
	    parent: parent,
	    parentIndex: parentIndex,
	    host: host,
	    hints: hints
	  };

	  this._commandStack.execute('shape.create', context);

	  return context.shape;
	};


	Modeling.prototype.createElements = function(elements, position, parent, parentIndex, hints) {
	  if (!isArray(elements)) {
	    elements = [ elements ];
	  }

	  if (typeof parentIndex !== 'number') {
	    hints = parentIndex;
	    parentIndex = undefined;
	  }

	  hints = hints || {};

	  var context = {
	    position: position,
	    elements: elements,
	    parent: parent,
	    parentIndex: parentIndex,
	    hints: hints
	  };

	  this._commandStack.execute('elements.create', context);

	  return context.elements;
	};


	Modeling.prototype.createLabel = function(labelTarget, position, label, parent) {

	  label = this._create('label', label);

	  var context = {
	    labelTarget: labelTarget,
	    position: position,
	    parent: parent || labelTarget.parent,
	    shape: label
	  };

	  this._commandStack.execute('label.create', context);

	  return context.shape;
	};


	/**
	 * Append shape to given source, drawing a connection
	 * between source and the newly created shape.
	 *
	 * @param {djs.model.Shape} source
	 * @param {djs.model.Shape|Object} shape
	 * @param {Point} position
	 * @param {djs.model.Shape} target
	 * @param {Object} [hints]
	 * @param {boolean} [hints.attach]
	 * @param {djs.model.Connection|Object} [hints.connection]
	 * @param {djs.model.Base} [hints.connectionParent]
	 *
	 * @return {djs.model.Shape} the newly created shape
	 */
	Modeling.prototype.appendShape = function(source, shape, position, target, hints) {

	  hints = hints || {};

	  shape = this._create('shape', shape);

	  var context = {
	    source: source,
	    position: position,
	    target: target,
	    shape: shape,
	    connection: hints.connection,
	    connectionParent: hints.connectionParent,
	    hints: hints
	  };

	  this._commandStack.execute('shape.append', context);

	  return context.shape;
	};


	Modeling.prototype.removeElements = function(elements) {
	  var context = {
	    elements: elements
	  };

	  this._commandStack.execute('elements.delete', context);
	};


	Modeling.prototype.distributeElements = function(groups, axis, dimension) {
	  var context = {
	    groups: groups,
	    axis: axis,
	    dimension: dimension
	  };

	  this._commandStack.execute('elements.distribute', context);
	};


	Modeling.prototype.removeShape = function(shape, hints) {
	  var context = {
	    shape: shape,
	    hints: hints || {}
	  };

	  this._commandStack.execute('shape.delete', context);
	};


	Modeling.prototype.removeConnection = function(connection, hints) {
	  var context = {
	    connection: connection,
	    hints: hints || {}
	  };

	  this._commandStack.execute('connection.delete', context);
	};

	Modeling.prototype.replaceShape = function(oldShape, newShape, hints) {
	  var context = {
	    oldShape: oldShape,
	    newData: newShape,
	    hints: hints || {}
	  };

	  this._commandStack.execute('shape.replace', context);

	  return context.newShape;
	};

	Modeling.prototype.alignElements = function(elements, alignment) {
	  var context = {
	    elements: elements,
	    alignment: alignment
	  };

	  this._commandStack.execute('elements.align', context);
	};

	Modeling.prototype.resizeShape = function(shape, newBounds, minBounds, hints) {
	  var context = {
	    shape: shape,
	    newBounds: newBounds,
	    minBounds: minBounds,
	    hints: hints
	  };

	  this._commandStack.execute('shape.resize', context);
	};

	Modeling.prototype.createSpace = function(movingShapes, resizingShapes, delta, direction, start) {
	  var context = {
	    delta: delta,
	    direction: direction,
	    movingShapes: movingShapes,
	    resizingShapes: resizingShapes,
	    start: start
	  };

	  this._commandStack.execute('spaceTool', context);
	};

	Modeling.prototype.updateWaypoints = function(connection, newWaypoints, hints) {
	  var context = {
	    connection: connection,
	    newWaypoints: newWaypoints,
	    hints: hints || {}
	  };

	  this._commandStack.execute('connection.updateWaypoints', context);
	};

	Modeling.prototype.reconnect = function(connection, source, target, dockingOrPoints, hints) {
	  var context = {
	    connection: connection,
	    newSource: source,
	    newTarget: target,
	    dockingOrPoints: dockingOrPoints,
	    hints: hints || {}
	  };

	  this._commandStack.execute('connection.reconnect', context);
	};

	Modeling.prototype.reconnectStart = function(connection, newSource, dockingOrPoints, hints) {
	  if (!hints) {
	    hints = {};
	  }

	  this.reconnect(connection, newSource, connection.target, dockingOrPoints, assign(hints, {
	    docking: 'source'
	  }));
	};

	Modeling.prototype.reconnectEnd = function(connection, newTarget, dockingOrPoints, hints) {
	  if (!hints) {
	    hints = {};
	  }

	  this.reconnect(connection, connection.source, newTarget, dockingOrPoints, assign(hints, {
	    docking: 'target'
	  }));
	};

	Modeling.prototype.connect = function(source, target, attrs, hints) {
	  return this.createConnection(source, target, attrs || {}, source.parent, hints);
	};

	Modeling.prototype._create = function(type, attrs) {
	  if (attrs instanceof Base) {
	    return attrs;
	  } else {
	    return this._elementFactory.create(type, attrs);
	  }
	};

	Modeling.prototype.toggleCollapse = function(shape, hints) {
	  var context = {
	    shape: shape,
	    hints: hints || {}
	  };

	  this._commandStack.execute('shape.toggleCollapse', context);
	};

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(index_esm$1);

	var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(ModelUtil);

	var reduce$1 = require$$0.reduce,
	    keys$1 = require$$0.keys,
	    forEach$1 = require$$0.forEach,
	    is$3 = require$$0$1.is,
	    getBusinessObject$1 = require$$0$1.getBusinessObject;


	function UpdateModdlePropertiesHandler(elementRegistry) {
	  this._elementRegistry = elementRegistry;
	}

	UpdateModdlePropertiesHandler.$inject = ['elementRegistry'];

	var UpdateModdlePropertiesHandler_1 = UpdateModdlePropertiesHandler;


	UpdateModdlePropertiesHandler.prototype.execute = function(context) {

	  var element = context.element,
	      moddleElement = context.moddleElement,
	      properties = context.properties;

	  if (!moddleElement) {
	    throw new Error('<moddleElement> required');
	  }

	  var changed = context.changed || this.getVisualReferences(moddleElement).concat(element);
	  var oldProperties = context.oldProperties || getModdleProperties(moddleElement, keys$1(properties));

	  setModdleProperties(moddleElement, properties);

	  context.oldProperties = oldProperties;
	  context.changed = changed;

	  return changed;
	};

	UpdateModdlePropertiesHandler.prototype.revert = function(context) {
	  var oldProperties = context.oldProperties,
	      moddleElement = context.moddleElement,
	      changed = context.changed;

	  setModdleProperties(moddleElement, oldProperties);

	  return changed;
	};

	/**
	 * Return visual references of given moddle element within the diagram.
	 *
	 * @param {ModdleElement} moddleElement
	 *
	 * @return {Array<djs.model.Element>}
	 */
	UpdateModdlePropertiesHandler.prototype.getVisualReferences = function(moddleElement) {

	  var elementRegistry = this._elementRegistry;

	  if (is$3(moddleElement, 'bpmn:DataObject')) {
	    return getAllDataObjectReferences(moddleElement, elementRegistry);
	  }

	  return [];
	};


	// helpers /////////////////

	function getModdleProperties(moddleElement, propertyNames) {
	  return reduce$1(propertyNames, function(result, key) {
	    result[key] = moddleElement.get(key);
	    return result;
	  }, {});
	}

	function setModdleProperties(moddleElement, properties) {
	  forEach$1(properties, function(value, key) {
	    moddleElement.set(key, value);
	  });
	}

	function getAllDataObjectReferences(dataObject, elementRegistry) {
	  return elementRegistry.filter(function(element) {
	    return (
	      is$3(element, 'bpmn:DataObjectReference') &&
	          getBusinessObject$1(element).dataObjectRef === dataObject
	    );
	  });
	}

	var DEFAULT_FLOW = 'default',
	    ID = 'id',
	    DI = 'di';

	var NULL_DIMENSIONS = {
	  width: 0,
	  height: 0
	};

	/**
	 * A handler that implements a BPMN 2.0 property update.
	 *
	 * This should be used to set simple properties on elements with
	 * an underlying BPMN business object.
	 *
	 * Use respective diagram-js provided handlers if you would
	 * like to perform automated modeling.
	 */
	function UpdatePropertiesHandler(
	    elementRegistry, moddle, translate,
	    modeling, textRenderer) {

	  this._elementRegistry = elementRegistry;
	  this._moddle = moddle;
	  this._translate = translate;
	  this._modeling = modeling;
	  this._textRenderer = textRenderer;
	}

	UpdatePropertiesHandler.$inject = [
	  'elementRegistry',
	  'moddle',
	  'translate',
	  'modeling',
	  'textRenderer'
	];


	// api //////////////////////

	/**
	 * Updates a BPMN element with a list of new properties
	 *
	 * @param {Object} context
	 * @param {djs.model.Base} context.element the element to update
	 * @param {Object} context.properties a list of properties to set on the element's
	 *                                    businessObject (the BPMN model element)
	 *
	 * @return {Array<djs.model.Base>} the updated element
	 */
	UpdatePropertiesHandler.prototype.execute = function(context) {

	  var element = context.element,
	      changed = [ element ],
	      translate = this._translate;

	  if (!element) {
	    throw new Error(translate('element required'));
	  }

	  var elementRegistry = this._elementRegistry,
	      ids = this._moddle.ids;

	  var businessObject = element.businessObject,
	      properties = unwrapBusinessObjects(context.properties),
	      oldProperties = context.oldProperties || getProperties(businessObject, properties);

	  if (isIdChange(properties, businessObject)) {
	    ids.unclaim(businessObject[ID]);

	    elementRegistry.updateId(element, properties[ID]);

	    ids.claim(properties[ID], businessObject);
	  }

	  // correctly indicate visual changes on default flow updates
	  if (DEFAULT_FLOW in properties) {

	    if (properties[DEFAULT_FLOW]) {
	      changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));
	    }

	    if (businessObject[DEFAULT_FLOW]) {
	      changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));
	    }
	  }

	  // update properties
	  setProperties(businessObject, properties);

	  // store old values
	  context.oldProperties = oldProperties;
	  context.changed = changed;

	  // indicate changed on objects affected by the update
	  return changed;
	};


	UpdatePropertiesHandler.prototype.postExecute = function(context) {
	  var element = context.element,
	      label = element.label;

	  var text = label && getBusinessObject(label).name;

	  if (!text) {
	    return;
	  }

	  // get layouted text bounds and resize external
	  // external label accordingly
	  var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);

	  this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS);
	};

	/**
	 * Reverts the update on a BPMN elements properties.
	 *
	 * @param  {Object} context
	 *
	 * @return {djs.model.Base} the updated element
	 */
	UpdatePropertiesHandler.prototype.revert = function(context) {

	  var element = context.element,
	      properties = context.properties,
	      oldProperties = context.oldProperties,
	      businessObject = element.businessObject,
	      elementRegistry = this._elementRegistry,
	      ids = this._moddle.ids;

	  // update properties
	  setProperties(businessObject, oldProperties);

	  if (isIdChange(properties, businessObject)) {
	    ids.unclaim(properties[ID]);

	    elementRegistry.updateId(element, oldProperties[ID]);

	    ids.claim(oldProperties[ID], businessObject);
	  }

	  return context.changed;
	};


	function isIdChange(properties, businessObject) {
	  return ID in properties && properties[ID] !== businessObject[ID];
	}


	function getProperties(businessObject, properties) {
	  var propertyNames = keys(properties);

	  return reduce(propertyNames, function(result, key) {

	    // handle DI separately
	    if (key !== DI) {
	      result[key] = businessObject.get(key);
	    } else {
	      result[key] = getDiProperties(businessObject.di, keys(properties.di));
	    }

	    return result;
	  }, {});
	}


	function getDiProperties(di, propertyNames) {
	  return reduce(propertyNames, function(result, key) {
	    result[key] = di.get(key);

	    return result;
	  }, {});
	}


	function setProperties(businessObject, properties) {
	  forEach(properties, function(value, key) {

	    if (key !== DI) {
	      businessObject.set(key, value);
	    } else {

	      // only update, if businessObject.di exists
	      if (businessObject.di) {
	        setDiProperties(businessObject.di, value);
	      }
	    }
	  });
	}


	function setDiProperties(di, properties) {
	  forEach(properties, function(value, key) {
	    di.set(key, value);
	  });
	}


	var referencePropertyNames = [ 'default' ];

	/**
	 * Make sure we unwrap the actual business object
	 * behind diagram element that may have been
	 * passed as arguments.
	 *
	 * @param  {Object} properties
	 *
	 * @return {Object} unwrappedProps
	 */
	function unwrapBusinessObjects(properties) {

	  var unwrappedProps = assign({}, properties);

	  referencePropertyNames.forEach(function(name) {
	    if (name in properties) {
	      unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);
	    }
	  });

	  return unwrappedProps;
	}

	function UpdateCanvasRootHandler(canvas, modeling) {
	  this._canvas = canvas;
	  this._modeling = modeling;
	}

	UpdateCanvasRootHandler.$inject = [
	  'canvas',
	  'modeling'
	];


	UpdateCanvasRootHandler.prototype.execute = function(context) {

	  var canvas = this._canvas;

	  var newRoot = context.newRoot,
	      newRootBusinessObject = newRoot.businessObject,
	      oldRoot = canvas.getRootElement(),
	      oldRootBusinessObject = oldRoot.businessObject,
	      bpmnDefinitions = oldRootBusinessObject.$parent,
	      diPlane = oldRootBusinessObject.di;

	  // (1) replace process old <> new root
	  canvas.setRootElement(newRoot, true);

	  // (2) update root elements
	  add$1(bpmnDefinitions.rootElements, newRootBusinessObject);
	  newRootBusinessObject.$parent = bpmnDefinitions;

	  remove$2(bpmnDefinitions.rootElements, oldRootBusinessObject);
	  oldRootBusinessObject.$parent = null;

	  // (3) wire di
	  oldRootBusinessObject.di = null;

	  diPlane.bpmnElement = newRootBusinessObject;
	  newRootBusinessObject.di = diPlane;

	  context.oldRoot = oldRoot;

	  // TODO(nikku): return changed elements?
	  // return [ newRoot, oldRoot ];
	};


	UpdateCanvasRootHandler.prototype.revert = function(context) {

	  var canvas = this._canvas;

	  var newRoot = context.newRoot,
	      newRootBusinessObject = newRoot.businessObject,
	      oldRoot = context.oldRoot,
	      oldRootBusinessObject = oldRoot.businessObject,
	      bpmnDefinitions = newRootBusinessObject.$parent,
	      diPlane = newRootBusinessObject.di;

	  // (1) replace process old <> new root
	  canvas.setRootElement(oldRoot, true);

	  // (2) update root elements
	  remove$2(bpmnDefinitions.rootElements, newRootBusinessObject);
	  newRootBusinessObject.$parent = null;

	  add$1(bpmnDefinitions.rootElements, oldRootBusinessObject);
	  oldRootBusinessObject.$parent = bpmnDefinitions;

	  // (3) wire di
	  newRootBusinessObject.di = null;

	  diPlane.bpmnElement = oldRootBusinessObject;
	  oldRootBusinessObject.di = diPlane;

	  // TODO(nikku): return changed elements?
	  // return [ newRoot, oldRoot ];
	};

	/**
	 * A handler that allows us to add a new lane
	 * above or below an existing one.
	 *
	 * @param {Modeling} modeling
	 * @param {SpaceTool} spaceTool
	 */
	function AddLaneHandler(modeling, spaceTool) {
	  this._modeling = modeling;
	  this._spaceTool = spaceTool;
	}

	AddLaneHandler.$inject = [
	  'modeling',
	  'spaceTool'
	];


	AddLaneHandler.prototype.preExecute = function(context) {

	  var spaceTool = this._spaceTool,
	      modeling = this._modeling;

	  var shape = context.shape,
	      location = context.location;

	  var lanesRoot = getLanesRoot(shape);

	  var isRoot = lanesRoot === shape,
	      laneParent = isRoot ? shape : shape.parent;

	  var existingChildLanes = getChildLanes(laneParent);

	  // (0) add a lane if we currently got none and are adding to root
	  if (!existingChildLanes.length) {
	    modeling.createShape({ type: 'bpmn:Lane' }, {
	      x: shape.x + LANE_INDENTATION,
	      y: shape.y,
	      width: shape.width - LANE_INDENTATION,
	      height: shape.height
	    }, laneParent);
	  }

	  // (1) collect affected elements to create necessary space
	  var allAffected = [];

	  eachElement(lanesRoot, function(element) {
	    allAffected.push(element);

	    // handle element labels in the diagram root
	    if (element.label) {
	      allAffected.push(element.label);
	    }

	    if (element === shape) {
	      return [];
	    }

	    return filter(element.children, function(c) {
	      return c !== shape;
	    });
	  });

	  var offset = location === 'top' ? -120 : 120,
	      lanePosition = location === 'top' ? shape.y : shape.y + shape.height,
	      spacePos = lanePosition + (location === 'top' ? 10 : -10),
	      direction = location === 'top' ? 'n' : 's';

	  var adjustments = spaceTool.calculateAdjustments(allAffected, 'y', offset, spacePos);

	  spaceTool.makeSpace(
	    adjustments.movingShapes,
	    adjustments.resizingShapes,
	    { x: 0, y: offset },
	    direction,
	    spacePos
	  );

	  // (2) create new lane at open space
	  context.newLane = modeling.createShape({ type: 'bpmn:Lane' }, {
	    x: shape.x + (isRoot ? LANE_INDENTATION : 0),
	    y: lanePosition - (location === 'top' ? 120 : 0),
	    width: shape.width - (isRoot ? LANE_INDENTATION : 0),
	    height: 120
	  }, laneParent);
	};

	/**
	 * A handler that splits a lane into a number of sub-lanes,
	 * creating new sub lanes, if necessary.
	 *
	 * @param {Modeling} modeling
	 */
	function SplitLaneHandler(modeling, translate) {
	  this._modeling = modeling;
	  this._translate = translate;
	}

	SplitLaneHandler.$inject = [
	  'modeling',
	  'translate'
	];


	SplitLaneHandler.prototype.preExecute = function(context) {

	  var modeling = this._modeling,
	      translate = this._translate;

	  var shape = context.shape,
	      newLanesCount = context.count;

	  var childLanes = getChildLanes(shape),
	      existingLanesCount = childLanes.length;

	  if (existingLanesCount > newLanesCount) {
	    throw new Error(translate('more than {count} child lanes', { count: newLanesCount }));
	  }

	  var newLanesHeight = Math.round(shape.height / newLanesCount);

	  // Iterate from top to bottom in child lane order,
	  // resizing existing lanes and creating new ones
	  // so that they split the parent proportionally.
	  //
	  // Due to rounding related errors, the bottom lane
	  // needs to take up all the remaining space.
	  var laneY,
	      laneHeight,
	      laneBounds,
	      newLaneAttrs,
	      idx;

	  for (idx = 0; idx < newLanesCount; idx++) {

	    laneY = shape.y + idx * newLanesHeight;

	    // if bottom lane
	    if (idx === newLanesCount - 1) {
	      laneHeight = shape.height - (newLanesHeight * idx);
	    } else {
	      laneHeight = newLanesHeight;
	    }

	    laneBounds = {
	      x: shape.x + LANE_INDENTATION,
	      y: laneY,
	      width: shape.width - LANE_INDENTATION,
	      height: laneHeight
	    };

	    if (idx < existingLanesCount) {

	      // resize existing lane
	      modeling.resizeShape(childLanes[idx], laneBounds);
	    } else {

	      // create a new lane at position
	      newLaneAttrs = {
	        type: 'bpmn:Lane'
	      };

	      modeling.createShape(newLaneAttrs, laneBounds, shape);
	    }
	  }
	};

	/**
	 * A handler that resizes a lane.
	 *
	 * @param {Modeling} modeling
	 */
	function ResizeLaneHandler(modeling, spaceTool) {
	  this._modeling = modeling;
	  this._spaceTool = spaceTool;
	}

	ResizeLaneHandler.$inject = [
	  'modeling',
	  'spaceTool'
	];


	ResizeLaneHandler.prototype.preExecute = function(context) {

	  var shape = context.shape,
	      newBounds = context.newBounds,
	      balanced = context.balanced;

	  if (balanced !== false) {
	    this.resizeBalanced(shape, newBounds);
	  } else {
	    this.resizeSpace(shape, newBounds);
	  }
	};


	/**
	 * Resize balanced, adjusting next / previous lane sizes.
	 *
	 * @param {djs.model.Shape} shape
	 * @param {Bounds} newBounds
	 */
	ResizeLaneHandler.prototype.resizeBalanced = function(shape, newBounds) {

	  var modeling = this._modeling;

	  var resizeNeeded = computeLanesResize(shape, newBounds);

	  // resize the lane
	  modeling.resizeShape(shape, newBounds);

	  // resize other lanes as needed
	  resizeNeeded.forEach(function(r) {
	    modeling.resizeShape(r.shape, r.newBounds);
	  });
	};


	/**
	 * Resize, making actual space and moving below / above elements.
	 *
	 * @param {djs.model.Shape} shape
	 * @param {Bounds} newBounds
	 */
	ResizeLaneHandler.prototype.resizeSpace = function(shape, newBounds) {
	  var spaceTool = this._spaceTool;

	  var shapeTrbl = asTRBL(shape),
	      newTrbl = asTRBL(newBounds);

	  var trblDiff = substractTRBL(newTrbl, shapeTrbl);

	  var lanesRoot = getLanesRoot(shape);

	  var allAffected = [],
	      allLanes = [];

	  eachElement(lanesRoot, function(element) {
	    allAffected.push(element);

	    if (is$1(element, 'bpmn:Lane') || is$1(element, 'bpmn:Participant')) {
	      allLanes.push(element);
	    }

	    return element.children;
	  });

	  var change,
	      spacePos,
	      direction,
	      offset,
	      adjustments;

	  if (trblDiff.bottom || trblDiff.top) {

	    change = trblDiff.bottom || trblDiff.top;
	    spacePos = shape.y + (trblDiff.bottom ? shape.height : 0) + (trblDiff.bottom ? -10 : 10);
	    direction = trblDiff.bottom ? 's' : 'n';

	    offset = trblDiff.top > 0 || trblDiff.bottom < 0 ? -change : change;

	    adjustments = spaceTool.calculateAdjustments(allAffected, 'y', offset, spacePos);

	    spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, { x: 0, y: change }, direction);
	  }


	  if (trblDiff.left || trblDiff.right) {

	    change = trblDiff.right || trblDiff.left;
	    spacePos = shape.x + (trblDiff.right ? shape.width : 0) + (trblDiff.right ? -10 : 100);
	    direction = trblDiff.right ? 'e' : 'w';

	    offset = trblDiff.left > 0 || trblDiff.right < 0 ? -change : change;

	    adjustments = spaceTool.calculateAdjustments(allLanes, 'x', offset, spacePos);

	    spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, { x: change, y: 0 }, direction);
	  }
	};

	var FLOW_NODE_REFS_ATTR = 'flowNodeRef',
	    LANES_ATTR = 'lanes';


	/**
	 * A handler that updates lane refs on changed elements
	 */
	function UpdateFlowNodeRefsHandler(elementRegistry) {
	  this._elementRegistry = elementRegistry;
	}

	UpdateFlowNodeRefsHandler.$inject = [
	  'elementRegistry'
	];


	UpdateFlowNodeRefsHandler.prototype.computeUpdates = function(flowNodeShapes, laneShapes) {

	  var handledNodes = [];

	  var updates = [];

	  var participantCache = {};

	  var allFlowNodeShapes = [];

	  function isInLaneShape(element, laneShape) {

	    var laneTrbl = asTRBL(laneShape);

	    var elementMid = {
	      x: element.x + element.width / 2,
	      y: element.y + element.height / 2
	    };

	    return elementMid.x > laneTrbl.left &&
	           elementMid.x < laneTrbl.right &&
	           elementMid.y > laneTrbl.top &&
	           elementMid.y < laneTrbl.bottom;
	  }

	  function addFlowNodeShape(flowNodeShape) {
	    if (handledNodes.indexOf(flowNodeShape) === -1) {
	      allFlowNodeShapes.push(flowNodeShape);
	      handledNodes.push(flowNodeShape);
	    }
	  }

	  function getAllLaneShapes(flowNodeShape) {

	    var root = getLanesRoot(flowNodeShape);

	    if (!participantCache[root.id]) {
	      participantCache[root.id] = collectLanes(root);
	    }

	    return participantCache[root.id];
	  }

	  function getNewLanes(flowNodeShape) {
	    if (!flowNodeShape.parent) {
	      return [];
	    }

	    var allLaneShapes = getAllLaneShapes(flowNodeShape);

	    return allLaneShapes.filter(function(l) {
	      return isInLaneShape(flowNodeShape, l);
	    }).map(function(shape) {
	      return shape.businessObject;
	    });
	  }

	  laneShapes.forEach(function(laneShape) {
	    var root = getLanesRoot(laneShape);

	    if (!root || handledNodes.indexOf(root) !== -1) {
	      return;
	    }

	    var children = root.children.filter(function(c) {
	      return is$1(c, 'bpmn:FlowNode');
	    });

	    children.forEach(addFlowNodeShape);

	    handledNodes.push(root);
	  });

	  flowNodeShapes.forEach(addFlowNodeShape);


	  allFlowNodeShapes.forEach(function(flowNodeShape) {

	    var flowNode = flowNodeShape.businessObject;

	    var lanes = flowNode.get(LANES_ATTR),
	        remove = lanes.slice(),
	        add = getNewLanes(flowNodeShape);

	    updates.push({ flowNode: flowNode, remove: remove, add: add });
	  });

	  laneShapes.forEach(function(laneShape) {

	    var lane = laneShape.businessObject;

	    // lane got removed XX-)
	    if (!laneShape.parent) {
	      lane.get(FLOW_NODE_REFS_ATTR).forEach(function(flowNode) {
	        updates.push({ flowNode: flowNode, remove: [ lane ], add: [] });
	      });
	    }
	  });

	  return updates;
	};

	UpdateFlowNodeRefsHandler.prototype.execute = function(context) {

	  var updates = context.updates;

	  if (!updates) {
	    updates = context.updates = this.computeUpdates(context.flowNodeShapes, context.laneShapes);
	  }


	  updates.forEach(function(update) {

	    var flowNode = update.flowNode,
	        lanes = flowNode.get(LANES_ATTR);

	    // unwire old
	    update.remove.forEach(function(oldLane) {
	      remove$2(lanes, oldLane);
	      remove$2(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);
	    });

	    // wire new
	    update.add.forEach(function(newLane) {
	      add$1(lanes, newLane);
	      add$1(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);
	    });
	  });

	  // TODO(nikku): return changed elements
	  // return [ ... ];
	};


	UpdateFlowNodeRefsHandler.prototype.revert = function(context) {

	  var updates = context.updates;

	  updates.forEach(function(update) {

	    var flowNode = update.flowNode,
	        lanes = flowNode.get(LANES_ATTR);

	    // unwire new
	    update.add.forEach(function(newLane) {
	      remove$2(lanes, newLane);
	      remove$2(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);
	    });

	    // wire old
	    update.remove.forEach(function(oldLane) {
	      add$1(lanes, oldLane);
	      add$1(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);
	    });
	  });

	  // TODO(nikku): return changed elements
	  // return [ ... ];
	};

	function IdClaimHandler(moddle) {
	  this._moddle = moddle;
	}

	IdClaimHandler.$inject = [ 'moddle' ];


	IdClaimHandler.prototype.execute = function(context) {
	  var ids = this._moddle.ids,
	      id = context.id,
	      element = context.element,
	      claiming = context.claiming;

	  if (claiming) {
	    ids.claim(id, element);
	  } else {
	    ids.unclaim(id);
	  }
	};

	/**
	 * Command revert implementation.
	 */
	IdClaimHandler.prototype.revert = function(context) {
	  var ids = this._moddle.ids,
	      id = context.id,
	      element = context.element,
	      claiming = context.claiming;

	  if (claiming) {
	    ids.unclaim(id);
	  } else {
	    ids.claim(id, element);
	  }
	};

	var DEFAULT_COLORS = {
	  fill: undefined,
	  stroke: undefined
	};


	function SetColorHandler(commandStack) {
	  this._commandStack = commandStack;
	}

	SetColorHandler.$inject = [
	  'commandStack'
	];


	SetColorHandler.prototype.postExecute = function(context) {
	  var elements = context.elements,
	      colors = context.colors || DEFAULT_COLORS;

	  var self = this;

	  var di = {};

	  if ('fill' in colors) {
	    assign(di, { fill: colors.fill });
	  }

	  if ('stroke' in colors) {
	    assign(di, { stroke: colors.stroke });
	  }

	  forEach(elements, function(element) {

	    self._commandStack.execute('element.updateProperties', {
	      element: element,
	      properties: {
	        di: di
	      }
	    });
	  });

	};

	var NULL_DIMENSIONS$1 = {
	  width: 0,
	  height: 0
	};


	/**
	 * A handler that updates the text of a BPMN element.
	 */
	function UpdateLabelHandler(modeling, textRenderer) {

	  /**
	   * Set the label and return the changed elements.
	   *
	   * Element parameter can be label itself or connection (i.e. sequence flow).
	   *
	   * @param {djs.model.Base} element
	   * @param {string} text
	   */
	  function setText(element, text) {

	    // external label if present
	    var label = element.label || element;

	    var labelTarget = element.labelTarget || element;

	    setLabel(label, text);

	    return [ label, labelTarget ];
	  }

	  function preExecute(ctx) {
	    var element = ctx.element,
	        businessObject = element.businessObject,
	        newLabel = ctx.newLabel;

	    if (!isLabel(element)
	        && isLabelExternal(element)
	        && !hasExternalLabel(element)
	        && !isEmptyText$1(newLabel)) {

	      // create label
	      var paddingTop = 7;

	      var labelCenter = getExternalLabelMid(element);

	      labelCenter = {
	        x: labelCenter.x,
	        y: labelCenter.y + paddingTop
	      };

	      modeling.createLabel(element, labelCenter, {
	        id: businessObject.id + '_label',
	        businessObject: businessObject
	      });
	    }
	  }

	  function execute(ctx) {
	    ctx.oldLabel = getLabel(ctx.element);
	    return setText(ctx.element, ctx.newLabel);
	  }

	  function revert(ctx) {
	    return setText(ctx.element, ctx.oldLabel);
	  }

	  function postExecute(ctx) {
	    var element = ctx.element,
	        label = element.label || element,
	        newLabel = ctx.newLabel,
	        newBounds = ctx.newBounds,
	        hints = ctx.hints || {};

	    // ignore internal labels for elements except text annotations
	    if (!isLabel(label) && !is$1(label, 'bpmn:TextAnnotation')) {
	      return;
	    }

	    if (isLabel(label) && isEmptyText$1(newLabel)) {

	      if (hints.removeShape !== false) {
	        modeling.removeShape(label, { unsetLabel: false });
	      }

	      return;
	    }

	    var text = getLabel(label);

	    // resize element based on label _or_ pre-defined bounds
	    if (typeof newBounds === 'undefined') {
	      newBounds = textRenderer.getExternalLabelBounds(label, text);
	    }

	    // setting newBounds to false or _null_ will
	    // disable the postExecute resize operation
	    if (newBounds) {
	      modeling.resizeShape(label, newBounds, NULL_DIMENSIONS$1);
	    }
	  }

	  // API

	  this.preExecute = preExecute;
	  this.execute = execute;
	  this.revert = revert;
	  this.postExecute = postExecute;
	}

	UpdateLabelHandler.$inject = [
	  'modeling',
	  'textRenderer'
	];


	// helpers ///////////////////////

	function isEmptyText$1(label) {
	  return !label || !label.trim();
	}

	/**
	 * BPMN 2.0 modeling features activator
	 *
	 * @param {EventBus} eventBus
	 * @param {ElementFactory} elementFactory
	 * @param {CommandStack} commandStack
	 * @param {BpmnRules} bpmnRules
	 */
	function Modeling$1(
	    eventBus, elementFactory, commandStack,
	    bpmnRules) {

	  Modeling.call(this, eventBus, elementFactory, commandStack);

	  this._bpmnRules = bpmnRules;
	}

	inherits_browser(Modeling$1, Modeling);

	Modeling$1.$inject = [
	  'eventBus',
	  'elementFactory',
	  'commandStack',
	  'bpmnRules'
	];


	Modeling$1.prototype.getHandlers = function() {
	  var handlers = Modeling.prototype.getHandlers.call(this);

	  handlers['element.updateModdleProperties'] = UpdateModdlePropertiesHandler_1;
	  handlers['element.updateProperties'] = UpdatePropertiesHandler;
	  handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;
	  handlers['lane.add'] = AddLaneHandler;
	  handlers['lane.resize'] = ResizeLaneHandler;
	  handlers['lane.split'] = SplitLaneHandler;
	  handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;
	  handlers['id.updateClaim'] = IdClaimHandler;
	  handlers['element.setColor'] = SetColorHandler;
	  handlers['element.updateLabel'] = UpdateLabelHandler;

	  return handlers;
	};


	Modeling$1.prototype.updateLabel = function(element, newLabel, newBounds, hints) {
	  this._commandStack.execute('element.updateLabel', {
	    element: element,
	    newLabel: newLabel,
	    newBounds: newBounds,
	    hints: hints || {}
	  });
	};


	Modeling$1.prototype.connect = function(source, target, attrs, hints) {

	  var bpmnRules = this._bpmnRules;

	  if (!attrs) {
	    attrs = bpmnRules.canConnect(source, target);
	  }

	  if (!attrs) {
	    return;
	  }

	  return this.createConnection(source, target, attrs, source.parent, hints);
	};


	Modeling$1.prototype.updateModdleProperties = function(element, moddleElement, properties) {
	  this._commandStack.execute('element.updateModdleProperties', {
	    element: element,
	    moddleElement: moddleElement,
	    properties: properties
	  });
	};

	Modeling$1.prototype.updateProperties = function(element, properties) {
	  this._commandStack.execute('element.updateProperties', {
	    element: element,
	    properties: properties
	  });
	};

	Modeling$1.prototype.resizeLane = function(laneShape, newBounds, balanced) {
	  this._commandStack.execute('lane.resize', {
	    shape: laneShape,
	    newBounds: newBounds,
	    balanced: balanced
	  });
	};

	Modeling$1.prototype.addLane = function(targetLaneShape, location) {
	  var context = {
	    shape: targetLaneShape,
	    location: location
	  };

	  this._commandStack.execute('lane.add', context);

	  return context.newLane;
	};

	Modeling$1.prototype.splitLane = function(targetLane, count) {
	  this._commandStack.execute('lane.split', {
	    shape: targetLane,
	    count: count
	  });
	};

	/**
	 * Transform the current diagram into a collaboration.
	 *
	 * @return {djs.model.Root} the new root element
	 */
	Modeling$1.prototype.makeCollaboration = function() {

	  var collaborationElement = this._create('root', {
	    type: 'bpmn:Collaboration'
	  });

	  var context = {
	    newRoot: collaborationElement
	  };

	  this._commandStack.execute('canvas.updateRoot', context);

	  return collaborationElement;
	};

	Modeling$1.prototype.updateLaneRefs = function(flowNodeShapes, laneShapes) {

	  this._commandStack.execute('lane.updateRefs', {
	    flowNodeShapes: flowNodeShapes,
	    laneShapes: laneShapes
	  });
	};

	/**
	 * Transform the current diagram into a process.
	 *
	 * @return {djs.model.Root} the new root element
	 */
	Modeling$1.prototype.makeProcess = function() {

	  var processElement = this._create('root', {
	    type: 'bpmn:Process'
	  });

	  var context = {
	    newRoot: processElement
	  };

	  this._commandStack.execute('canvas.updateRoot', context);
	};


	Modeling$1.prototype.claimId = function(id, moddleElement) {
	  this._commandStack.execute('id.updateClaim', {
	    id: id,
	    element: moddleElement,
	    claiming: true
	  });
	};


	Modeling$1.prototype.unclaimId = function(id, moddleElement) {
	  this._commandStack.execute('id.updateClaim', {
	    id: id,
	    element: moddleElement
	  });
	};

	Modeling$1.prototype.setColor = function(elements, colors) {
	  if (!elements.length) {
	    elements = [ elements ];
	  }

	  this._commandStack.execute('element.setColor', {
	    elements: elements,
	    colors: colors
	  });
	};

	/**
	 * A base connection layouter implementation
	 * that layouts the connection by directly connecting
	 * mid(source) + mid(target).
	 */
	function BaseLayouter() {}


	/**
	 * Return the new layouted waypoints for the given connection.
	 *
	 * The connection passed is still unchanged; you may figure out about
	 * the new connection start / end via the layout hints provided.
	 *
	 * @param {djs.model.Connection} connection
	 * @param {Object} [hints]
	 * @param {Point} [hints.connectionStart]
	 * @param {Point} [hints.connectionEnd]
	 * @param {Point} [hints.source]
	 * @param {Point} [hints.target]
	 *
	 * @return {Array<Point>} the layouted connection waypoints
	 */
	BaseLayouter.prototype.layoutConnection = function(connection, hints) {

	  hints = hints || {};

	  return [
	    hints.connectionStart || getMid(hints.source || connection.source),
	    hints.connectionEnd || getMid(hints.target || connection.target)
	  ];
	};

	var MIN_SEGMENT_LENGTH = 20,
	    POINT_ORIENTATION_PADDING = 5;

	var round$a = Math.round;

	var INTERSECTION_THRESHOLD$1 = 20,
	    ORIENTATION_THRESHOLD = {
	      'h:h': 20,
	      'v:v': 20,
	      'h:v': -10,
	      'v:h': -10
	    };

	function needsTurn(orientation, startDirection) {
	  return !{
	    t: /top/,
	    r: /right/,
	    b: /bottom/,
	    l: /left/,
	    h: /./,
	    v: /./
	  }[startDirection].test(orientation);
	}

	function canLayoutStraight(direction, targetOrientation) {
	  return {
	    t: /top/,
	    r: /right/,
	    b: /bottom/,
	    l: /left/,
	    h: /left|right/,
	    v: /top|bottom/
	  }[direction].test(targetOrientation);
	}

	function getSegmentBendpoints(a, b, directions) {
	  var orientation = getOrientation(b, a, POINT_ORIENTATION_PADDING);

	  var startDirection = directions.split(':')[0];

	  var xmid = round$a((b.x - a.x) / 2 + a.x),
	      ymid = round$a((b.y - a.y) / 2 + a.y);

	  var segmentEnd, segmentDirections;

	  var layoutStraight = canLayoutStraight(startDirection, orientation),
	      layoutHorizontal = /h|r|l/.test(startDirection),
	      layoutTurn = false;

	  var turnNextDirections = false;

	  if (layoutStraight) {
	    segmentEnd = layoutHorizontal ? { x: xmid, y: a.y } : { x: a.x, y: ymid };

	    segmentDirections = layoutHorizontal ? 'h:h' : 'v:v';
	  } else {
	    layoutTurn = needsTurn(orientation, startDirection);

	    segmentDirections = layoutHorizontal ? 'h:v' : 'v:h';

	    if (layoutTurn) {

	      if (layoutHorizontal) {
	        turnNextDirections = ymid === a.y;

	        segmentEnd = {
	          x: a.x + MIN_SEGMENT_LENGTH * (/l/.test(startDirection) ? -1 : 1),
	          y: turnNextDirections ? ymid + MIN_SEGMENT_LENGTH : ymid
	        };
	      } else {
	        turnNextDirections = xmid === a.x;

	        segmentEnd = {
	          x: turnNextDirections ? xmid + MIN_SEGMENT_LENGTH : xmid,
	          y: a.y + MIN_SEGMENT_LENGTH * (/t/.test(startDirection) ? -1 : 1)
	        };
	      }

	    } else {
	      segmentEnd = {
	        x: xmid,
	        y: ymid
	      };
	    }
	  }

	  return {
	    waypoints: getBendpoints(a, segmentEnd, segmentDirections).concat(segmentEnd),
	    directions:  segmentDirections,
	    turnNextDirections: turnNextDirections
	  };
	}

	function getStartSegment(a, b, directions) {
	  return getSegmentBendpoints(a, b, directions);
	}

	function getEndSegment(a, b, directions) {
	  var invertedSegment = getSegmentBendpoints(b, a, invertDirections(directions));

	  return {
	    waypoints: invertedSegment.waypoints.slice().reverse(),
	    directions: invertDirections(invertedSegment.directions),
	    turnNextDirections: invertedSegment.turnNextDirections
	  };
	}

	function getMidSegment(startSegment, endSegment) {

	  var startDirection = startSegment.directions.split(':')[1],
	      endDirection = endSegment.directions.split(':')[0];

	  if (startSegment.turnNextDirections) {
	    startDirection = startDirection == 'h' ? 'v' : 'h';
	  }

	  if (endSegment.turnNextDirections) {
	    endDirection = endDirection == 'h' ? 'v' : 'h';
	  }

	  var directions = startDirection + ':' + endDirection;

	  var bendpoints = getBendpoints(
	    startSegment.waypoints[startSegment.waypoints.length - 1],
	    endSegment.waypoints[0],
	    directions
	  );

	  return {
	    waypoints: bendpoints,
	    directions: directions
	  };
	}

	function invertDirections(directions) {
	  return directions.split(':').reverse().join(':');
	}

	/**
	 * Handle simple layouts with maximum two bendpoints.
	 */
	function getSimpleBendpoints(a, b, directions) {

	  var xmid = round$a((b.x - a.x) / 2 + a.x),
	      ymid = round$a((b.y - a.y) / 2 + a.y);

	  // one point, right or left from a
	  if (directions === 'h:v') {
	    return [ { x: b.x, y: a.y } ];
	  }

	  // one point, above or below a
	  if (directions === 'v:h') {
	    return [ { x: a.x, y: b.y } ];
	  }

	  // vertical segment between a and b
	  if (directions === 'h:h') {
	    return [
	      { x: xmid, y: a.y },
	      { x: xmid, y: b.y }
	    ];
	  }

	  // horizontal segment between a and b
	  if (directions === 'v:v') {
	    return [
	      { x: a.x, y: ymid },
	      { x: b.x, y: ymid }
	    ];
	  }

	  throw new Error('invalid directions: can only handle varians of [hv]:[hv]');
	}


	/**
	 * Returns the mid points for a manhattan connection between two points.
	 *
	 * @example h:h (horizontal:horizontal)
	 *
	 * [a]----[x]
	 *         |
	 *        [x]----[b]
	 *
	 * @example h:v (horizontal:vertical)
	 *
	 * [a]----[x]
	 *         |
	 *        [b]
	 *
	 * @example h:r (horizontal:right)
	 *
	 * [a]----[x]
	 *         |
	 *    [b]-[x]
	 *
	 * @param  {Point} a
	 * @param  {Point} b
	 * @param  {string} directions
	 *
	 * @return {Array<Point>}
	 */
	function getBendpoints(a, b, directions) {
	  directions = directions || 'h:h';

	  if (!isValidDirections(directions)) {
	    throw new Error(
	      'unknown directions: <' + directions + '>: ' +
	      'must be specified as <start>:<end> ' +
	      'with start/end in { h,v,t,r,b,l }'
	    );
	  }

	  // compute explicit directions, involving trbl dockings
	  // using a three segmented layouting algorithm
	  if (isExplicitDirections(directions)) {
	    var startSegment = getStartSegment(a, b, directions),
	        endSegment = getEndSegment(a, b, directions),
	        midSegment = getMidSegment(startSegment, endSegment);

	    return [].concat(
	      startSegment.waypoints,
	      midSegment.waypoints,
	      endSegment.waypoints
	    );
	  }

	  // handle simple [hv]:[hv] cases that can be easily computed
	  return getSimpleBendpoints(a, b, directions);
	}

	/**
	 * Create a connection between the two points according
	 * to the manhattan layout (only horizontal and vertical) edges.
	 *
	 * @param {Point} a
	 * @param {Point} b
	 *
	 * @param {string} [directions='h:h'] specifies manhattan directions for each point as {adirection}:{bdirection}.
	                   A directionfor a point is either `h` (horizontal) or `v` (vertical)
	 *
	 * @return {Array<Point>}
	 */
	function connectPoints(a, b, directions) {

	  var points = getBendpoints(a, b, directions);

	  points.unshift(a);
	  points.push(b);

	  return withoutRedundantPoints(points);
	}


	/**
	 * Connect two rectangles using a manhattan layouted connection.
	 *
	 * @param {Bounds} source source rectangle
	 * @param {Bounds} target target rectangle
	 * @param {Point} [start] source docking
	 * @param {Point} [end] target docking
	 *
	 * @param {Object} [hints]
	 * @param {string} [hints.preserveDocking=source] preserve docking on selected side
	 * @param {Array<string>} [hints.preferredLayouts]
	 * @param {Point|boolean} [hints.connectionStart] whether the start changed
	 * @param {Point|boolean} [hints.connectionEnd] whether the end changed
	 *
	 * @return {Array<Point>} connection points
	 */
	function connectRectangles(source, target, start, end, hints) {

	  var preferredLayouts = hints && hints.preferredLayouts || [];

	  var preferredLayout = without(preferredLayouts, 'straight')[0] || 'h:h';

	  var threshold = ORIENTATION_THRESHOLD[preferredLayout] || 0;

	  var orientation = getOrientation(source, target, threshold);

	  var directions = getDirections(orientation, preferredLayout);

	  start = start || getMid(source);
	  end = end || getMid(target);

	  var directionSplit = directions.split(':');

	  // compute actual docking points for start / end
	  // this ensures we properly layout only parts of the
	  // connection that lies in between the two rectangles
	  var startDocking = getDockingPoint(start, source, directionSplit[0], invertOrientation(orientation)),
	      endDocking = getDockingPoint(end, target, directionSplit[1], orientation);

	  return connectPoints(startDocking, endDocking, directions);
	}


	/**
	 * Repair the connection between two rectangles, of which one has been updated.
	 *
	 * @param {Bounds} source
	 * @param {Bounds} target
	 * @param {Point} [start]
	 * @param {Point} [end]
	 * @param {Array<Point>} [waypoints]
	 * @param {Object} [hints]
	 * @param {Array<string>} [hints.preferredLayouts] list of preferred layouts
	 * @param {boolean} [hints.connectionStart]
	 * @param {boolean} [hints.connectionEnd]
	 *
	 * @return {Array<Point>} repaired waypoints
	 */
	function repairConnection(source, target, start, end, waypoints, hints) {

	  if (isArray(start)) {
	    waypoints = start;
	    hints = end;

	    start = getMid(source);
	    end = getMid(target);
	  }

	  hints = assign({ preferredLayouts: [] }, hints);
	  waypoints = waypoints || [];

	  var preferredLayouts = hints.preferredLayouts,
	      preferStraight = preferredLayouts.indexOf('straight') !== -1,
	      repairedWaypoints;

	  // just layout non-existing or simple connections
	  // attempt to render straight lines, if required

	  // attempt to layout a straight line
	  repairedWaypoints = preferStraight && tryLayoutStraight(source, target, start, end, hints);

	  if (repairedWaypoints) {
	    return repairedWaypoints;
	  }

	  // try to layout from end
	  repairedWaypoints = hints.connectionEnd && tryRepairConnectionEnd(target, source, end, waypoints);

	  if (repairedWaypoints) {
	    return repairedWaypoints;
	  }

	  // try to layout from start
	  repairedWaypoints = hints.connectionStart && tryRepairConnectionStart(source, target, start, waypoints);

	  if (repairedWaypoints) {
	    return repairedWaypoints;
	  }

	  // or whether nothing seems to have changed
	  if (!hints.connectionStart && !hints.connectionEnd && waypoints && waypoints.length) {
	    return waypoints;
	  }

	  // simply reconnect if nothing else worked
	  return connectRectangles(source, target, start, end, hints);
	}


	function inRange(a, start, end) {
	  return a >= start && a <= end;
	}

	function isInRange(axis, a, b) {
	  var size = {
	    x: 'width',
	    y: 'height'
	  };

	  return inRange(a[axis], b[axis], b[axis] + b[size[axis]]);
	}

	/**
	 * Layout a straight connection
	 *
	 * @param {Bounds} source
	 * @param {Bounds} target
	 * @param {Point} start
	 * @param {Point} end
	 * @param {Object} [hints]
	 *
	 * @return {Array<Point>|null} waypoints if straight layout worked
	 */
	function tryLayoutStraight(source, target, start, end, hints) {
	  var axis = {},
	      primaryAxis,
	      orientation;

	  orientation = getOrientation(source, target);

	  // only layout a straight connection if shapes are
	  // horizontally or vertically aligned
	  if (!/^(top|bottom|left|right)$/.test(orientation)) {
	    return null;
	  }

	  if (/top|bottom/.test(orientation)) {
	    primaryAxis = 'x';
	  }

	  if (/left|right/.test(orientation)) {
	    primaryAxis = 'y';
	  }

	  if (hints.preserveDocking === 'target') {

	    if (!isInRange(primaryAxis, end, source)) {
	      return null;
	    }

	    axis[primaryAxis] = end[primaryAxis];

	    return [
	      {
	        x: axis.x !== undefined ? axis.x : start.x,
	        y: axis.y !== undefined ? axis.y : start.y,
	        original: {
	          x: axis.x !== undefined ? axis.x : start.x,
	          y: axis.y !== undefined ? axis.y : start.y
	        }
	      },
	      {
	        x: end.x,
	        y: end.y
	      }
	    ];

	  } else {

	    if (!isInRange(primaryAxis, start, target)) {
	      return null;
	    }

	    axis[primaryAxis] = start[primaryAxis];

	    return [
	      {
	        x: start.x,
	        y: start.y
	      },
	      {
	        x: axis.x !== undefined ? axis.x : end.x,
	        y: axis.y !== undefined ? axis.y : end.y,
	        original: {
	          x: axis.x !== undefined ? axis.x : end.x,
	          y: axis.y !== undefined ? axis.y : end.y
	        }
	      }
	    ];
	  }

	}

	/**
	 * Repair a connection from start.
	 *
	 * @param {Bounds} moved
	 * @param {Bounds} other
	 * @param {Point} newDocking
	 * @param {Array<Point>} points originalPoints from moved to other
	 *
	 * @return {Array<Point>|null} the repaired points between the two rectangles
	 */
	function tryRepairConnectionStart(moved, other, newDocking, points) {
	  return _tryRepairConnectionSide(moved, other, newDocking, points);
	}

	/**
	 * Repair a connection from end.
	 *
	 * @param {Bounds} moved
	 * @param {Bounds} other
	 * @param {Point} newDocking
	 * @param {Array<Point>} points originalPoints from moved to other
	 *
	 * @return {Array<Point>|null} the repaired points between the two rectangles
	 */
	function tryRepairConnectionEnd(moved, other, newDocking, points) {
	  var waypoints = points.slice().reverse();

	  waypoints = _tryRepairConnectionSide(moved, other, newDocking, waypoints);

	  return waypoints ? waypoints.reverse() : null;
	}

	/**
	 * Repair a connection from one side that moved.
	 *
	 * @param {Bounds} moved
	 * @param {Bounds} other
	 * @param {Point} newDocking
	 * @param {Array<Point>} points originalPoints from moved to other
	 *
	 * @return {Array<Point>} the repaired points between the two rectangles
	 */
	function _tryRepairConnectionSide(moved, other, newDocking, points) {

	  function needsRelayout(points) {
	    if (points.length < 3) {
	      return true;
	    }

	    if (points.length > 4) {
	      return false;
	    }

	    // relayout if two points overlap
	    // this is most likely due to
	    return !!find(points, function(p, idx) {
	      var q = points[idx - 1];

	      return q && pointDistance(p, q) < 3;
	    });
	  }

	  function repairBendpoint(candidate, oldPeer, newPeer) {

	    var alignment = pointsAligned(oldPeer, candidate);

	    switch (alignment) {
	    case 'v':

	      // repair horizontal alignment
	      return { x: newPeer.x, y: candidate.y };
	    case 'h':

	      // repair vertical alignment
	      return { x: candidate.x, y: newPeer.y };
	    }

	    return { x: candidate.x, y: candidate. y };
	  }

	  function removeOverlapping(points, a, b) {
	    var i;

	    for (i = points.length - 2; i !== 0; i--) {

	      // intersects (?) break, remove all bendpoints up to this one and relayout
	      if (pointInRect(points[i], a, INTERSECTION_THRESHOLD$1) ||
	          pointInRect(points[i], b, INTERSECTION_THRESHOLD$1)) {

	        // return sliced old connection
	        return points.slice(i);
	      }
	    }

	    return points;
	  }

	  // (0) only repair what has layoutable bendpoints

	  // (1) if only one bendpoint and on shape moved onto other shapes axis
	  //     (horizontally / vertically), relayout

	  if (needsRelayout(points)) {
	    return null;
	  }

	  var oldDocking = points[0],
	      newPoints = points.slice(),
	      slicedPoints;

	  // (2) repair only last line segment and only if it was layouted before

	  newPoints[0] = newDocking;
	  newPoints[1] = repairBendpoint(newPoints[1], oldDocking, newDocking);


	  // (3) if shape intersects with any bendpoint after repair,
	  //     remove all segments up to this bendpoint and repair from there
	  slicedPoints = removeOverlapping(newPoints, moved, other);

	  if (slicedPoints !== newPoints) {
	    newPoints = _tryRepairConnectionSide(moved, other, newDocking, slicedPoints);
	  }

	  // (4) do NOT repair if repaired bendpoints are aligned
	  if (newPoints && pointsAligned(newPoints)) {
	    return null;
	  }

	  return newPoints;
	}


	/**
	 * Returns the manhattan directions connecting two rectangles
	 * with the given orientation.
	 *
	 * Will always return the default layout, if it is specific
	 * regarding sides already (trbl).
	 *
	 * @example
	 *
	 * getDirections('top'); // -> 'v:v'
	 * getDirections('intersect'); // -> 't:t'
	 *
	 * getDirections('top-right', 'v:h'); // -> 'v:h'
	 * getDirections('top-right', 'h:h'); // -> 'h:h'
	 *
	 *
	 * @param {string} orientation
	 * @param {string} defaultLayout
	 *
	 * @return {string}
	 */
	function getDirections(orientation, defaultLayout) {

	  // don't override specific trbl directions
	  if (isExplicitDirections(defaultLayout)) {
	    return defaultLayout;
	  }

	  switch (orientation) {
	  case 'intersect':
	    return 't:t';

	  case 'top':
	  case 'bottom':
	    return 'v:v';

	  case 'left':
	  case 'right':
	    return 'h:h';

	  // 'top-left'
	  // 'top-right'
	  // 'bottom-left'
	  // 'bottom-right'
	  default:
	    return defaultLayout;
	  }
	}

	function isValidDirections(directions) {
	  return directions && /^h|v|t|r|b|l:h|v|t|r|b|l$/.test(directions);
	}

	function isExplicitDirections(directions) {
	  return directions && /t|r|b|l/.test(directions);
	}

	function invertOrientation(orientation) {
	  return {
	    'top': 'bottom',
	    'bottom': 'top',
	    'left': 'right',
	    'right': 'left',
	    'top-left': 'bottom-right',
	    'bottom-right': 'top-left',
	    'top-right': 'bottom-left',
	    'bottom-left': 'top-right',
	  }[orientation];
	}

	function getDockingPoint(point, rectangle, dockingDirection, targetOrientation) {

	  // ensure we end up with a specific docking direction
	  // based on the targetOrientation, if <h|v> is being passed

	  if (dockingDirection === 'h') {
	    dockingDirection = /left/.test(targetOrientation) ? 'l' : 'r';
	  }

	  if (dockingDirection === 'v') {
	    dockingDirection = /top/.test(targetOrientation) ? 't' : 'b';
	  }

	  if (dockingDirection === 't') {
	    return { original: point, x: point.x, y: rectangle.y };
	  }

	  if (dockingDirection === 'r') {
	    return { original: point, x: rectangle.x + rectangle.width, y: point.y };
	  }

	  if (dockingDirection === 'b') {
	    return { original: point, x: point.x, y: rectangle.y + rectangle.height };
	  }

	  if (dockingDirection === 'l') {
	    return { original: point, x: rectangle.x, y: point.y };
	  }

	  throw new Error('unexpected dockingDirection: <' + dockingDirection + '>');
	}


	/**
	 * Return list of waypoints with redundant ones filtered out.
	 *
	 * @example
	 *
	 * Original points:
	 *
	 *   [x] ----- [x] ------ [x]
	 *                         |
	 *                        [x] ----- [x] - [x]
	 *
	 * Filtered:
	 *
	 *   [x] ---------------- [x]
	 *                         |
	 *                        [x] ----------- [x]
	 *
	 * @param  {Array<Point>} waypoints
	 *
	 * @return {Array<Point>}
	 */
	function withoutRedundantPoints(waypoints) {
	  return waypoints.reduce(function(points, p, idx) {

	    var previous = points[points.length - 1],
	        next = waypoints[idx + 1];

	    if (!pointsOnLine(previous, next, p, 0)) {
	      points.push(p);
	    }

	    return points;
	  }, []);
	}

	var ATTACH_ORIENTATION_PADDING = -10,
	    BOUNDARY_TO_HOST_THRESHOLD = 40;

	var oppositeOrientationMapping = {
	  'top': 'bottom',
	  'top-right': 'bottom-left',
	  'top-left': 'bottom-right',
	  'right': 'left',
	  'bottom': 'top',
	  'bottom-right': 'top-left',
	  'bottom-left': 'top-right',
	  'left': 'right'
	};

	var orientationDirectionMapping = {
	  top: 't',
	  right: 'r',
	  bottom: 'b',
	  left: 'l'
	};


	function BpmnLayouter() {}

	inherits_browser(BpmnLayouter, BaseLayouter);


	BpmnLayouter.prototype.layoutConnection = function(connection, hints) {
	  if (!hints) {
	    hints = {};
	  }

	  var source = hints.source || connection.source,
	      target = hints.target || connection.target,
	      waypoints = hints.waypoints || connection.waypoints,
	      connectionStart = hints.connectionStart,
	      connectionEnd = hints.connectionEnd;

	  var manhattanOptions,
	      updatedWaypoints;

	  if (!connectionStart) {
	    connectionStart = getConnectionDocking(waypoints && waypoints[ 0 ], source);
	  }

	  if (!connectionEnd) {
	    connectionEnd = getConnectionDocking(waypoints && waypoints[ waypoints.length - 1 ], target);
	  }

	  // TODO(nikku): support vertical modeling
	  // and invert preferredLayouts accordingly

	  if (is$1(connection, 'bpmn:Association') ||
	      is$1(connection, 'bpmn:DataAssociation')) {

	    if (waypoints && !isCompensationAssociation(source, target)) {
	      return [].concat([ connectionStart ], waypoints.slice(1, -1), [ connectionEnd ]);
	    }
	  }

	  if (is$1(connection, 'bpmn:MessageFlow')) {
	    manhattanOptions = getMessageFlowManhattanOptions(source, target);
	  } else if (is$1(connection, 'bpmn:SequenceFlow') || isCompensationAssociation(source, target)) {

	    // layout all connection between flow elements h:h, except for
	    // (1) outgoing of boundary events -> layout based on attach orientation and target orientation
	    // (2) incoming/outgoing of gateways -> v:h for outgoing, h:v for incoming
	    // (3) loops
	    if (source === target) {
	      manhattanOptions = {
	        preferredLayouts: getLoopPreferredLayout(source, connection)
	      };
	    } else if (is$1(source, 'bpmn:BoundaryEvent')) {
	      manhattanOptions = {
	        preferredLayouts: getBoundaryEventPreferredLayouts(source, target, connectionEnd)
	      };
	    } else if (isExpandedSubProcess$1(source) || isExpandedSubProcess$1(target)) {
	      manhattanOptions = getSubProcessManhattanOptions(source);
	    } else if (is$1(source, 'bpmn:Gateway')) {
	      manhattanOptions = {
	        preferredLayouts: [ 'v:h' ]
	      };
	    } else if (is$1(target, 'bpmn:Gateway')) {
	      manhattanOptions = {
	        preferredLayouts: [ 'h:v' ]
	      };
	    } else {
	      manhattanOptions = {
	        preferredLayouts: [ 'h:h' ]
	      };
	    }
	  }

	  if (manhattanOptions) {
	    manhattanOptions = assign(manhattanOptions, hints);

	    updatedWaypoints = withoutRedundantPoints(repairConnection(
	      source,
	      target,
	      connectionStart,
	      connectionEnd,
	      waypoints,
	      manhattanOptions
	    ));
	  }

	  return updatedWaypoints || [ connectionStart, connectionEnd ];
	};


	// helpers //////////

	function getAttachOrientation(attachedElement) {
	  var hostElement = attachedElement.host;

	  return getOrientation(getMid(attachedElement), hostElement, ATTACH_ORIENTATION_PADDING);
	}

	function getMessageFlowManhattanOptions(source, target) {
	  return {
	    preferredLayouts: [ 'straight', 'v:v' ],
	    preserveDocking: getMessageFlowPreserveDocking(source, target)
	  };
	}

	function getMessageFlowPreserveDocking(source, target) {

	  // (1) docking element connected to participant has precedence
	  if (is$1(target, 'bpmn:Participant')) {
	    return 'source';
	  }

	  if (is$1(source, 'bpmn:Participant')) {
	    return 'target';
	  }

	  // (2) docking element connected to expanded sub-process has precedence
	  if (isExpandedSubProcess$1(target)) {
	    return 'source';
	  }

	  if (isExpandedSubProcess$1(source)) {
	    return 'target';
	  }

	  // (3) docking event has precedence
	  if (is$1(target, 'bpmn:Event')) {
	    return 'target';
	  }

	  if (is$1(source, 'bpmn:Event')) {
	    return 'source';
	  }

	  return null;
	}

	function getSubProcessManhattanOptions(source) {
	  return {
	    preferredLayouts: [ 'straight', 'h:h' ],
	    preserveDocking: getSubProcessPreserveDocking(source)
	  };
	}

	function getSubProcessPreserveDocking(source) {
	  return isExpandedSubProcess$1(source) ? 'target' : 'source';
	}

	function getConnectionDocking(point, shape) {
	  return point ? (point.original || point) : getMid(shape);
	}

	function isCompensationAssociation(source, target) {
	  return is$1(target, 'bpmn:Activity') &&
	    is$1(source, 'bpmn:BoundaryEvent') &&
	    target.businessObject.isForCompensation;
	}

	function isExpandedSubProcess$1(element) {
	  return is$1(element, 'bpmn:SubProcess') && isExpanded(element);
	}

	function isSame$1(a, b) {
	  return a === b;
	}

	function isAnyOrientation(orientation, orientations) {
	  return orientations.indexOf(orientation) !== -1;
	}

	function getHorizontalOrientation(orientation) {
	  var matches = /right|left/.exec(orientation);

	  return matches && matches[0];
	}

	function getVerticalOrientation(orientation) {
	  var matches = /top|bottom/.exec(orientation);

	  return matches && matches[0];
	}

	function isOppositeOrientation(a, b) {
	  return oppositeOrientationMapping[a] === b;
	}

	function isOppositeHorizontalOrientation(a, b) {
	  var horizontalOrientation = getHorizontalOrientation(a);

	  var oppositeHorizontalOrientation = oppositeOrientationMapping[horizontalOrientation];

	  return b.indexOf(oppositeHorizontalOrientation) !== -1;
	}

	function isOppositeVerticalOrientation(a, b) {
	  var verticalOrientation = getVerticalOrientation(a);

	  var oppositeVerticalOrientation = oppositeOrientationMapping[verticalOrientation];

	  return b.indexOf(oppositeVerticalOrientation) !== -1;
	}

	function isHorizontalOrientation(orientation) {
	  return orientation === 'right' || orientation === 'left';
	}

	function getLoopPreferredLayout(source, connection) {
	  var waypoints = connection.waypoints;

	  var orientation = waypoints && waypoints.length && getOrientation(waypoints[0], source);

	  if (orientation === 'top') {
	    return [ 't:r' ];
	  } else if (orientation === 'right') {
	    return [ 'r:b' ];
	  } else if (orientation === 'left') {
	    return [ 'l:t' ];
	  }

	  return [ 'b:l' ];
	}

	function getBoundaryEventPreferredLayouts(source, target, end) {
	  var sourceMid = getMid(source),
	      targetMid = getMid(target),
	      attachOrientation = getAttachOrientation(source),
	      sourceLayout,
	      targetLayout;

	  var isLoop = isSame$1(source.host, target);

	  var attachedToSide = isAnyOrientation(attachOrientation, [ 'top', 'right', 'bottom', 'left' ]);

	  var targetOrientation = getOrientation(targetMid, sourceMid, {
	    x: source.width / 2 + target.width / 2,
	    y: source.height / 2 + target.height / 2
	  });

	  if (isLoop) {
	    return getBoundaryEventLoopLayout(attachOrientation, attachedToSide, source, target, end);
	  }

	  // source layout
	  sourceLayout = getBoundaryEventSourceLayout(attachOrientation, targetOrientation, attachedToSide);

	  // target layout
	  targetLayout = getBoundaryEventTargetLayout(attachOrientation, targetOrientation, attachedToSide);

	  return [ sourceLayout + ':' + targetLayout ];
	}

	function getBoundaryEventLoopLayout(attachOrientation, attachedToSide, source, target, end) {
	  var orientation = attachedToSide ? attachOrientation : getVerticalOrientation(attachOrientation),
	      sourceLayout = orientationDirectionMapping[ orientation ],
	      targetLayout;

	  if (attachedToSide) {
	    if (isHorizontalOrientation(attachOrientation)) {
	      targetLayout = shouldConnectToSameSide('y', source, target, end) ? 'h' : 'b';
	    } else {
	      targetLayout = shouldConnectToSameSide('x', source, target, end) ? 'v' : 'l';
	    }
	  } else {
	    targetLayout = 'v';
	  }

	  return [ sourceLayout + ':' + targetLayout ];
	}

	function shouldConnectToSameSide(axis, source, target, end) {
	  var threshold = BOUNDARY_TO_HOST_THRESHOLD;

	  return !(
	    areCloseOnAxis(axis, end, target, threshold) ||
	    areCloseOnAxis(axis, end, {
	      x: target.x + target.width,
	      y: target.y + target.height
	    }, threshold) ||
	    areCloseOnAxis(axis, end, getMid(source), threshold)
	  );
	}

	function areCloseOnAxis(axis, a, b, threshold) {
	  return Math.abs(a[ axis ] - b[ axis ]) < threshold;
	}

	function getBoundaryEventSourceLayout(attachOrientation, targetOrientation, attachedToSide) {

	  // attached to either top, right, bottom or left side
	  if (attachedToSide) {
	    return orientationDirectionMapping[ attachOrientation ];
	  }

	  // attached to either top-right, top-left, bottom-right or bottom-left corner

	  // same vertical or opposite horizontal orientation
	  if (isSame$1(
	    getVerticalOrientation(attachOrientation), getVerticalOrientation(targetOrientation)
	  ) || isOppositeOrientation(
	    getHorizontalOrientation(attachOrientation), getHorizontalOrientation(targetOrientation)
	  )) {
	    return orientationDirectionMapping[ getVerticalOrientation(attachOrientation) ];
	  }

	  // fallback
	  return orientationDirectionMapping[ getHorizontalOrientation(attachOrientation) ];
	}

	function getBoundaryEventTargetLayout(attachOrientation, targetOrientation, attachedToSide) {

	  // attached to either top, right, bottom or left side
	  if (attachedToSide) {
	    if (isHorizontalOrientation(attachOrientation)) {

	      // orientation is right or left

	      // opposite horizontal orientation or same orientation
	      if (
	        isOppositeHorizontalOrientation(attachOrientation, targetOrientation) ||
	        isSame$1(attachOrientation, targetOrientation)
	      ) {
	        return 'h';
	      }

	      // fallback
	      return 'v';
	    } else {

	      // orientation is top or bottom

	      // opposite vertical orientation or same orientation
	      if (
	        isOppositeVerticalOrientation(attachOrientation, targetOrientation) ||
	        isSame$1(attachOrientation, targetOrientation)
	      ) {
	        return 'v';
	      }

	      // fallback
	      return 'h';
	    }
	  }

	  // attached to either top-right, top-left, bottom-right or bottom-left corner

	  // orientation is right, left
	  // or same vertical orientation but also right or left
	  if (isHorizontalOrientation(targetOrientation) ||
	    (isSame$1(getVerticalOrientation(attachOrientation), getVerticalOrientation(targetOrientation)) &&
	      getHorizontalOrientation(targetOrientation))) {
	    return 'h';
	  } else {
	    return 'v';
	  }
	}

	function dockingToPoint(docking) {

	  // use the dockings actual point and
	  // retain the original docking
	  return assign({ original: docking.point.original || docking.point }, docking.actual);
	}


	/**
	 * A {@link ConnectionDocking} that crops connection waypoints based on
	 * the path(s) of the connection source and target.
	 *
	 * @param {djs.core.ElementRegistry} elementRegistry
	 */
	function CroppingConnectionDocking(elementRegistry, graphicsFactory) {
	  this._elementRegistry = elementRegistry;
	  this._graphicsFactory = graphicsFactory;
	}

	CroppingConnectionDocking.$inject = [ 'elementRegistry', 'graphicsFactory' ];


	/**
	 * @inheritDoc ConnectionDocking#getCroppedWaypoints
	 */
	CroppingConnectionDocking.prototype.getCroppedWaypoints = function(connection, source, target) {

	  source = source || connection.source;
	  target = target || connection.target;

	  var sourceDocking = this.getDockingPoint(connection, source, true),
	      targetDocking = this.getDockingPoint(connection, target);

	  var croppedWaypoints = connection.waypoints.slice(sourceDocking.idx + 1, targetDocking.idx);

	  croppedWaypoints.unshift(dockingToPoint(sourceDocking));
	  croppedWaypoints.push(dockingToPoint(targetDocking));

	  return croppedWaypoints;
	};

	/**
	 * Return the connection docking point on the specified shape
	 *
	 * @inheritDoc ConnectionDocking#getDockingPoint
	 */
	CroppingConnectionDocking.prototype.getDockingPoint = function(connection, shape, dockStart) {

	  var waypoints = connection.waypoints,
	      dockingIdx,
	      dockingPoint,
	      croppedPoint;

	  dockingIdx = dockStart ? 0 : waypoints.length - 1;
	  dockingPoint = waypoints[dockingIdx];

	  croppedPoint = this._getIntersection(shape, connection, dockStart);

	  return {
	    point: dockingPoint,
	    actual: croppedPoint || dockingPoint,
	    idx: dockingIdx
	  };
	};


	// helpers //////////////////////

	CroppingConnectionDocking.prototype._getIntersection = function(shape, connection, takeFirst) {

	  var shapePath = this._getShapePath(shape),
	      connectionPath = this._getConnectionPath(connection);

	  return getElementLineIntersection(shapePath, connectionPath, takeFirst);
	};

	CroppingConnectionDocking.prototype._getConnectionPath = function(connection) {
	  return this._graphicsFactory.getConnectionPath(connection);
	};

	CroppingConnectionDocking.prototype._getShapePath = function(shape) {
	  return this._graphicsFactory.getShapePath(shape);
	};

	CroppingConnectionDocking.prototype._getGfx = function(element) {
	  return this._elementRegistry.getGraphics(element);
	};

	var ModelingModule = {
	  __init__: [
	    'modeling',
	    'bpmnUpdater'
	  ],
	  __depends__: [
	    BehaviorModule,
	    RulesModule$1,
	    DiOrderingModule,
	    OrderingModule,
	    ReplaceModule$1,
	    CommandModule,
	    TooltipsModule,
	    LabelSupportModule,
	    AttachSupportModule,
	    SelectionModule,
	    ChangeSupportModule,
	    SpaceToolModule
	  ],
	  bpmnFactory: [ 'type', BpmnFactory ],
	  bpmnUpdater: [ 'type', BpmnUpdater ],
	  elementFactory: [ 'type', ElementFactory$1 ],
	  modeling: [ 'type', Modeling$1 ],
	  layouter: [ 'type', BpmnLayouter ],
	  connectionDocking: [ 'type', CroppingConnectionDocking ]
	};

	var LOW_PRIORITY$k = 500,
	    MEDIUM_PRIORITY = 1250,
	    HIGH_PRIORITY$g = 1500;

	var round$b = Math.round;

	function mid$2(element) {
	  return {
	    x: element.x + round$b(element.width / 2),
	    y: element.y + round$b(element.height / 2)
	  };
	}

	/**
	 * A plugin that makes shapes draggable / droppable.
	 *
	 * @param {EventBus} eventBus
	 * @param {Dragging} dragging
	 * @param {Modeling} modeling
	 * @param {Selection} selection
	 * @param {Rules} rules
	 */
	function MoveEvents(
	    eventBus, dragging, modeling,
	    selection, rules) {

	  // rules

	  function canMove(shapes, delta, position, target) {

	    return rules.allowed('elements.move', {
	      shapes: shapes,
	      delta: delta,
	      position: position,
	      target: target
	    });
	  }


	  // move events

	  // assign a high priority to this handler to setup the environment
	  // others may hook up later, e.g. at default priority and modify
	  // the move environment.
	  //
	  // This sets up the context with
	  //
	  // * shape: the primary shape being moved
	  // * shapes: a list of shapes to be moved
	  // * validatedShapes: a list of shapes that are being checked
	  //                    against the rules before and during move
	  //
	  eventBus.on('shape.move.start', HIGH_PRIORITY$g, function(event) {

	    var context = event.context,
	        shape = event.shape,
	        shapes = selection.get().slice();

	    // move only single shape if the dragged element
	    // is not part of the current selection
	    if (shapes.indexOf(shape) === -1) {
	      shapes = [ shape ];
	    }

	    // ensure we remove nested elements in the collection
	    // and add attachers for a proper dragger
	    shapes = removeNested(shapes);

	    // attach shapes to drag context
	    assign(context, {
	      shapes: shapes,
	      validatedShapes: shapes,
	      shape: shape
	    });
	  });


	  // assign a high priority to this handler to setup the environment
	  // others may hook up later, e.g. at default priority and modify
	  // the move environment
	  //
	  eventBus.on('shape.move.start', MEDIUM_PRIORITY, function(event) {

	    var context = event.context,
	        validatedShapes = context.validatedShapes,
	        canExecute;

	    canExecute = context.canExecute = canMove(validatedShapes);

	    // check if we can move the elements
	    if (!canExecute) {
	      return false;
	    }
	  });

	  // assign a low priority to this handler
	  // to let others modify the move event before we update
	  // the context
	  //
	  eventBus.on('shape.move.move', LOW_PRIORITY$k, function(event) {

	    var context = event.context,
	        validatedShapes = context.validatedShapes,
	        hover = event.hover,
	        delta = { x: event.dx, y: event.dy },
	        position = { x: event.x, y: event.y },
	        canExecute;

	    // check if we can move the elements
	    canExecute = canMove(validatedShapes, delta, position, hover);

	    context.delta = delta;
	    context.canExecute = canExecute;

	    // simply ignore move over
	    if (canExecute === null) {
	      context.target = null;

	      return;
	    }

	    context.target = hover;
	  });

	  eventBus.on('shape.move.end', function(event) {

	    var context = event.context;

	    var delta = context.delta,
	        canExecute = context.canExecute,
	        isAttach = canExecute === 'attach',
	        shapes = context.shapes;

	    if (canExecute === false) {
	      return false;
	    }

	    // ensure we have actual pixel values deltas
	    // (important when zoom level was > 1 during move)
	    delta.x = round$b(delta.x);
	    delta.y = round$b(delta.y);

	    if (delta.x === 0 && delta.y === 0) {

	      // didn't move
	      return;
	    }

	    modeling.moveElements(shapes, delta, context.target, {
	      primaryShape: context.shape,
	      attach: isAttach
	    });
	  });


	  // move activation

	  eventBus.on('element.mousedown', function(event) {

	    if (!isPrimaryButton(event)) {
	      return;
	    }

	    var originalEvent = getOriginal(event);

	    if (!originalEvent) {
	      throw new Error('must supply DOM mousedown event');
	    }

	    return start(originalEvent, event.element);
	  });

	  /**
	   * Start move.
	   *
	   * @param {MouseEvent} event
	   * @param {djs.model.Shape} shape
	   * @param {boolean} [activate]
	   * @param {Object} [context]
	   */
	  function start(event, element, activate, context) {
	    if (isObject(activate)) {
	      context = activate;
	      activate = false;
	    }

	    // do not move connections or the root element
	    if (element.waypoints || !element.parent) {
	      return;
	    }

	    var referencePoint = mid$2(element);

	    dragging.init(event, referencePoint, 'shape.move', {
	      cursor: 'grabbing',
	      autoActivate: activate,
	      data: {
	        shape: element,
	        context: context || {}
	      }
	    });

	    // we've handled the event
	    return true;
	  }

	  // API

	  this.start = start;
	}

	MoveEvents.$inject = [
	  'eventBus',
	  'dragging',
	  'modeling',
	  'selection',
	  'rules'
	];


	/**
	 * Return a filtered list of elements that do not contain
	 * those nested into others.
	 *
	 * @param  {Array<djs.model.Base>} elements
	 *
	 * @return {Array<djs.model.Base>} filtered
	 */
	function removeNested(elements) {

	  var ids = groupBy(elements, 'id');

	  return filter(elements, function(element) {
	    while ((element = element.parent)) {

	      // parent in selection
	      if (ids[element.id]) {
	        return false;
	      }
	    }

	    return true;
	  });
	}

	var LOW_PRIORITY$l = 499;

	var MARKER_DRAGGING$1 = 'djs-dragging',
	    MARKER_OK$3 = 'drop-ok',
	    MARKER_NOT_OK$3 = 'drop-not-ok',
	    MARKER_NEW_PARENT$1 = 'new-parent',
	    MARKER_ATTACH$2 = 'attach-ok';


	/**
	 * Provides previews for moving shapes when moving.
	 *
	 * @param {EventBus} eventBus
	 * @param {ElementRegistry} elementRegistry
	 * @param {Canvas} canvas
	 * @param {Styles} styles
	 */
	function MovePreview(
	    eventBus, canvas, styles, previewSupport) {

	  function getVisualDragShapes(shapes) {
	    var elements = getAllDraggedElements(shapes);

	    var filteredElements = removeEdges(elements);

	    return filteredElements;
	  }

	  function getAllDraggedElements(shapes) {
	    var allShapes = selfAndAllChildren(shapes, true);

	    var allConnections = map(allShapes, function(shape) {
	      return (shape.incoming || []).concat(shape.outgoing || []);
	    });

	    return flatten(allShapes.concat(allConnections));
	  }

	  /**
	   * Sets drop marker on an element.
	   */
	  function setMarker(element, marker) {

	    [ MARKER_ATTACH$2, MARKER_OK$3, MARKER_NOT_OK$3, MARKER_NEW_PARENT$1 ].forEach(function(m) {

	      if (m === marker) {
	        canvas.addMarker(element, m);
	      } else {
	        canvas.removeMarker(element, m);
	      }
	    });
	  }

	  /**
	   * Make an element draggable.
	   *
	   * @param {Object} context
	   * @param {djs.model.Base} element
	   * @param {boolean} addMarker
	   */
	  function makeDraggable(context, element, addMarker) {

	    previewSupport.addDragger(element, context.dragGroup);

	    if (addMarker) {
	      canvas.addMarker(element, MARKER_DRAGGING$1);
	    }

	    if (context.allDraggedElements) {
	      context.allDraggedElements.push(element);
	    } else {
	      context.allDraggedElements = [ element ];
	    }
	  }

	  // assign a low priority to this handler
	  // to let others modify the move context before
	  // we draw things
	  eventBus.on('shape.move.start', LOW_PRIORITY$l, function(event) {
	    var context = event.context,
	        dragShapes = context.shapes,
	        allDraggedElements = context.allDraggedElements;

	    var visuallyDraggedShapes = getVisualDragShapes(dragShapes);

	    if (!context.dragGroup) {
	      var dragGroup = create('g');

	      attr$1(dragGroup, styles.cls('djs-drag-group', [ 'no-events' ]));

	      var defaultLayer = canvas.getDefaultLayer();

	      append(defaultLayer, dragGroup);

	      context.dragGroup = dragGroup;
	    }

	    // add previews
	    visuallyDraggedShapes.forEach(function(shape) {
	      previewSupport.addDragger(shape, context.dragGroup);
	    });

	    // cache all dragged elements / gfx
	    // so that we can quickly undo their state changes later
	    if (!allDraggedElements) {
	      allDraggedElements = getAllDraggedElements(dragShapes);
	    } else {
	      allDraggedElements = flatten([
	        allDraggedElements,
	        getAllDraggedElements(dragShapes)
	      ]);
	    }

	    // add dragging marker
	    forEach(allDraggedElements, function(e) {
	      canvas.addMarker(e, MARKER_DRAGGING$1);
	    });

	    context.allDraggedElements = allDraggedElements;

	    // determine, if any of the dragged elements have different parents
	    context.differentParents = haveDifferentParents(dragShapes);
	  });

	  // update previews
	  eventBus.on('shape.move.move', LOW_PRIORITY$l, function(event) {

	    var context = event.context,
	        dragGroup = context.dragGroup,
	        target = context.target,
	        parent = context.shape.parent,
	        canExecute = context.canExecute;

	    if (target) {
	      if (canExecute === 'attach') {
	        setMarker(target, MARKER_ATTACH$2);
	      } else if (context.canExecute && target && target.id !== parent.id) {
	        setMarker(target, MARKER_NEW_PARENT$1);
	      } else {
	        setMarker(target, context.canExecute ? MARKER_OK$3 : MARKER_NOT_OK$3);
	      }
	    }

	    translate(dragGroup, event.dx, event.dy);
	  });

	  eventBus.on([ 'shape.move.out', 'shape.move.cleanup' ], function(event) {
	    var context = event.context,
	        target = context.target;

	    if (target) {
	      setMarker(target, null);
	    }
	  });

	  // remove previews
	  eventBus.on('shape.move.cleanup', function(event) {

	    var context = event.context,
	        allDraggedElements = context.allDraggedElements,
	        dragGroup = context.dragGroup;


	    // remove dragging marker
	    forEach(allDraggedElements, function(e) {
	      canvas.removeMarker(e, MARKER_DRAGGING$1);
	    });

	    if (dragGroup) {
	      remove$1(dragGroup);
	    }
	  });


	  // API //////////////////////

	  /**
	   * Make an element draggable.
	   *
	   * @param {Object} context
	   * @param {djs.model.Base} element
	   * @param {boolean} addMarker
	   */
	  this.makeDraggable = makeDraggable;
	}

	MovePreview.$inject = [
	  'eventBus',
	  'canvas',
	  'styles',
	  'previewSupport'
	];


	// helpers //////////////////////

	/**
	 * returns elements minus all connections
	 * where source or target is not elements
	 */
	function removeEdges(elements) {

	  var filteredElements = filter(elements, function(element) {

	    if (!isConnection$8(element)) {
	      return true;
	    } else {

	      return (
	        find(elements, matchPattern({ id: element.source.id })) &&
	        find(elements, matchPattern({ id: element.target.id }))
	      );
	    }
	  });

	  return filteredElements;
	}

	function haveDifferentParents(elements) {
	  return size(groupBy(elements, function(e) { return e.parent && e.parent.id; })) !== 1;
	}

	/**
	 * Checks if an element is a connection.
	 */
	function isConnection$8(element) {
	  return element.waypoints;
	}

	var MoveModule = {
	  __depends__: [
	    InteractionEventsModule,
	    SelectionModule,
	    OutlineModule,
	    RulesModule,
	    DraggingModule,
	    PreviewSupportModule
	  ],
	  __init__: [
	    'move',
	    'movePreview'
	  ],
	  move: [ 'type', MoveEvents ],
	  movePreview: [ 'type', MovePreview ]
	};

	var TOGGLE_SELECTOR = '.djs-palette-toggle',
	    ENTRY_SELECTOR = '.entry',
	    ELEMENT_SELECTOR = TOGGLE_SELECTOR + ', ' + ENTRY_SELECTOR;

	var PALETTE_OPEN_CLS = 'open',
	    PALETTE_TWO_COLUMN_CLS = 'two-column';

	var DEFAULT_PRIORITY$5 = 1000;


	/**
	 * A palette containing modeling elements.
	 */
	function Palette(eventBus, canvas) {

	  this._eventBus = eventBus;
	  this._canvas = canvas;

	  var self = this;

	  eventBus.on('tool-manager.update', function(event) {
	    var tool = event.tool;

	    self.updateToolHighlight(tool);
	  });

	  eventBus.on('i18n.changed', function() {
	    self._update();
	  });

	  eventBus.on('diagram.init', function() {

	    self._diagramInitialized = true;

	    self._rebuild();
	  });
	}

	Palette.$inject = [ 'eventBus', 'canvas' ];


	/**
	 * Register a provider with the palette
	 *
	 * @param  {number} [priority=1000]
	 * @param  {PaletteProvider} provider
	 *
	 * @example
	 * const paletteProvider = {
	 *   getPaletteEntries: function() {
	 *     return function(entries) {
	 *       return {
	 *         ...entries,
	 *         'entry-1': {
	 *           label: 'My Entry',
	 *           action: function() { alert("I have been clicked!"); }
	 *         }
	 *       };
	 *     }
	 *   }
	 * };
	 *
	 * palette.registerProvider(800, paletteProvider);
	 */
	Palette.prototype.registerProvider = function(priority, provider) {
	  if (!provider) {
	    provider = priority;
	    priority = DEFAULT_PRIORITY$5;
	  }

	  this._eventBus.on('palette.getProviders', priority, function(event) {
	    event.providers.push(provider);
	  });

	  this._rebuild();
	};


	/**
	 * Returns the palette entries
	 *
	 * @return {Object<string, PaletteEntryDescriptor>} map of entries
	 */
	Palette.prototype.getEntries = function() {
	  var providers = this._getProviders();

	  return providers.reduce(addPaletteEntries, {});
	};

	Palette.prototype._rebuild = function() {

	  if (!this._diagramInitialized) {
	    return;
	  }

	  var providers = this._getProviders();

	  if (!providers.length) {
	    return;
	  }

	  if (!this._container) {
	    this._init();
	  }

	  this._update();
	};

	/**
	 * Initialize
	 */
	Palette.prototype._init = function() {

	  var self = this;

	  var eventBus = this._eventBus;

	  var parentContainer = this._getParentContainer();

	  var container = this._container = domify(Palette.HTML_MARKUP);

	  parentContainer.appendChild(container);

	  delegate.bind(container, ELEMENT_SELECTOR, 'click', function(event) {

	    var target = event.delegateTarget;

	    if (matchesSelector(target, TOGGLE_SELECTOR)) {
	      return self.toggle();
	    }

	    self.trigger('click', event);
	  });

	  // prevent drag propagation
	  componentEvent.bind(container, 'mousedown', function(event) {
	    event.stopPropagation();
	  });

	  // prevent drag propagation
	  delegate.bind(container, ENTRY_SELECTOR, 'dragstart', function(event) {
	    self.trigger('dragstart', event);
	  });

	  eventBus.on('canvas.resized', this._layoutChanged, this);

	  eventBus.fire('palette.create', {
	    container: container
	  });
	};

	Palette.prototype._getProviders = function(id) {

	  var event = this._eventBus.createEvent({
	    type: 'palette.getProviders',
	    providers: []
	  });

	  this._eventBus.fire(event);

	  return event.providers;
	};

	/**
	 * Update palette state.
	 *
	 * @param  {Object} [state] { open, twoColumn }
	 */
	Palette.prototype._toggleState = function(state) {

	  state = state || {};

	  var parent = this._getParentContainer(),
	      container = this._container;

	  var eventBus = this._eventBus;

	  var twoColumn;

	  var cls = classes(container);

	  if ('twoColumn' in state) {
	    twoColumn = state.twoColumn;
	  } else {
	    twoColumn = this._needsCollapse(parent.clientHeight, this._entries || {});
	  }

	  // always update two column
	  cls.toggle(PALETTE_TWO_COLUMN_CLS, twoColumn);

	  if ('open' in state) {
	    cls.toggle(PALETTE_OPEN_CLS, state.open);
	  }

	  eventBus.fire('palette.changed', {
	    twoColumn: twoColumn,
	    open: this.isOpen()
	  });
	};

	Palette.prototype._update = function() {

	  var entriesContainer = query('.djs-palette-entries', this._container),
	      entries = this._entries = this.getEntries();

	  clear(entriesContainer);

	  forEach(entries, function(entry, id) {

	    var grouping = entry.group || 'default';

	    var container = query('[data-group=' + grouping + ']', entriesContainer);
	    if (!container) {
	      container = domify('<div class="group" data-group="' + grouping + '"></div>');
	      entriesContainer.appendChild(container);
	    }

	    var html = entry.html || (
	      entry.separator ?
	        '<hr class="separator" />' :
	        '<div class="entry" draggable="true"></div>');


	    var control = domify(html);
	    container.appendChild(control);

	    if (!entry.separator) {
	      attr(control, 'data-action', id);

	      if (entry.title) {
	        attr(control, 'title', entry.title);
	      }

	      if (entry.className) {
	        addClasses$1(control, entry.className);
	      }

	      if (entry.imageUrl) {
	        control.appendChild(domify('<img src="' + entry.imageUrl + '">'));
	      }
	    }
	  });

	  // open after update
	  this.open();
	};


	/**
	 * Trigger an action available on the palette
	 *
	 * @param  {string} action
	 * @param  {Event} event
	 */
	Palette.prototype.trigger = function(action, event, autoActivate) {
	  var entries = this._entries,
	      entry,
	      handler,
	      originalEvent,
	      button = event.delegateTarget || event.target;

	  if (!button) {
	    return event.preventDefault();
	  }

	  entry = entries[attr(button, 'data-action')];

	  // when user clicks on the palette and not on an action
	  if (!entry) {
	    return;
	  }

	  handler = entry.action;

	  originalEvent = event.originalEvent || event;

	  // simple action (via callback function)
	  if (isFunction(handler)) {
	    if (action === 'click') {
	      handler(originalEvent, autoActivate);
	    }
	  } else {
	    if (handler[action]) {
	      handler[action](originalEvent, autoActivate);
	    }
	  }

	  // silence other actions
	  event.preventDefault();
	};

	Palette.prototype._layoutChanged = function() {
	  this._toggleState({});
	};

	/**
	 * Do we need to collapse to two columns?
	 *
	 * @param {number} availableHeight
	 * @param {Object} entries
	 *
	 * @return {boolean}
	 */
	Palette.prototype._needsCollapse = function(availableHeight, entries) {

	  // top margin + bottom toggle + bottom margin
	  // implementors must override this method if they
	  // change the palette styles
	  var margin = 20 + 10 + 20;

	  var entriesHeight = Object.keys(entries).length * 46;

	  return availableHeight < entriesHeight + margin;
	};

	/**
	 * Close the palette
	 */
	Palette.prototype.close = function() {

	  this._toggleState({
	    open: false,
	    twoColumn: false
	  });
	};


	/**
	 * Open the palette
	 */
	Palette.prototype.open = function() {
	  this._toggleState({ open: true });
	};


	Palette.prototype.toggle = function(open) {
	  if (this.isOpen()) {
	    this.close();
	  } else {
	    this.open();
	  }
	};

	Palette.prototype.isActiveTool = function(tool) {
	  return tool && this._activeTool === tool;
	};

	Palette.prototype.updateToolHighlight = function(name) {
	  var entriesContainer,
	      toolsContainer;

	  if (!this._toolsContainer) {
	    entriesContainer = query('.djs-palette-entries', this._container);

	    this._toolsContainer = query('[data-group=tools]', entriesContainer);
	  }

	  toolsContainer = this._toolsContainer;

	  forEach(toolsContainer.children, function(tool) {
	    var actionName = tool.getAttribute('data-action');

	    if (!actionName) {
	      return;
	    }

	    var toolClasses = classes(tool);

	    actionName = actionName.replace('-tool', '');

	    if (toolClasses.contains('entry') && actionName === name) {
	      toolClasses.add('highlighted-entry');
	    } else {
	      toolClasses.remove('highlighted-entry');
	    }
	  });
	};


	/**
	 * Return true if the palette is opened.
	 *
	 * @example
	 *
	 * palette.open();
	 *
	 * if (palette.isOpen()) {
	 *   // yes, we are open
	 * }
	 *
	 * @return {boolean} true if palette is opened
	 */
	Palette.prototype.isOpen = function() {
	  return classes(this._container).has(PALETTE_OPEN_CLS);
	};

	/**
	 * Get container the palette lives in.
	 *
	 * @return {Element}
	 */
	Palette.prototype._getParentContainer = function() {
	  return this._canvas.getContainer();
	};


	/* markup definition */

	Palette.HTML_MARKUP =
	  '<div class="djs-palette">' +
	    '<div class="djs-palette-entries"></div>' +
	    '<div class="djs-palette-toggle"></div>' +
	  '</div>';


	// helpers //////////////////////

	function addClasses$1(element, classNames) {

	  var classes$1 = classes(element);

	  var actualClassNames = isArray(classNames) ? classNames : classNames.split(/\s+/g);
	  actualClassNames.forEach(function(cls) {
	    classes$1.add(cls);
	  });
	}

	function addPaletteEntries(entries, provider) {

	  var entriesOrUpdater = provider.getPaletteEntries();

	  if (isFunction(entriesOrUpdater)) {
	    return entriesOrUpdater(entries);
	  }

	  forEach(entriesOrUpdater, function(entry, id) {
	    entries[id] = entry;
	  });

	  return entries;
	}

	var PaletteModule = {
	  __init__: [ 'palette' ],
	  palette: [ 'type', Palette ]
	};

	var LASSO_TOOL_CURSOR = 'crosshair';


	function LassoTool(
	    eventBus, canvas, dragging,
	    elementRegistry, selection, toolManager,
	    mouse) {

	  this._selection = selection;
	  this._dragging = dragging;
	  this._mouse = mouse;

	  var self = this;

	  // lasso visuals implementation

	  /**
	  * A helper that realizes the selection box visual
	  */
	  var visuals = {

	    create: function(context) {
	      var container = canvas.getDefaultLayer(),
	          frame;

	      frame = context.frame = create('rect');
	      attr$1(frame, {
	        class: 'djs-lasso-overlay',
	        width:  1,
	        height: 1,
	        x: 0,
	        y: 0
	      });

	      append(container, frame);
	    },

	    update: function(context) {
	      var frame = context.frame,
	          bbox = context.bbox;

	      attr$1(frame, {
	        x: bbox.x,
	        y: bbox.y,
	        width: bbox.width,
	        height: bbox.height
	      });
	    },

	    remove: function(context) {

	      if (context.frame) {
	        remove$1(context.frame);
	      }
	    }
	  };

	  toolManager.registerTool('lasso', {
	    tool: 'lasso.selection',
	    dragging: 'lasso'
	  });

	  eventBus.on('lasso.selection.end', function(event) {
	    var target = event.originalEvent.target;

	    // only reactive on diagram click
	    // on some occasions, event.hover is not set and we have to check if the target is an svg
	    if (!event.hover && !(target instanceof SVGElement)) {
	      return;
	    }

	    eventBus.once('lasso.selection.ended', function() {
	      self.activateLasso(event.originalEvent, true);
	    });
	  });

	  // lasso interaction implementation

	  eventBus.on('lasso.end', function(event) {

	    var bbox = toBBox(event);

	    var elements = elementRegistry.filter(function(element) {
	      return element;
	    });

	    self.select(elements, bbox);
	  });

	  eventBus.on('lasso.start', function(event) {

	    var context = event.context;

	    context.bbox = toBBox(event);
	    visuals.create(context);
	  });

	  eventBus.on('lasso.move', function(event) {

	    var context = event.context;

	    context.bbox = toBBox(event);
	    visuals.update(context);
	  });

	  eventBus.on('lasso.cleanup', function(event) {

	    var context = event.context;

	    visuals.remove(context);
	  });


	  // event integration

	  eventBus.on('element.mousedown', 1500, function(event) {

	    if (!hasSecondaryModifier(event)) {
	      return;
	    }

	    self.activateLasso(event.originalEvent);

	    // we've handled the event
	    return true;
	  });
	}

	LassoTool.$inject = [
	  'eventBus',
	  'canvas',
	  'dragging',
	  'elementRegistry',
	  'selection',
	  'toolManager',
	  'mouse'
	];


	LassoTool.prototype.activateLasso = function(event, autoActivate) {

	  this._dragging.init(event, 'lasso', {
	    autoActivate: autoActivate,
	    cursor: LASSO_TOOL_CURSOR,
	    data: {
	      context: {}
	    }
	  });
	};

	LassoTool.prototype.activateSelection = function(event, autoActivate) {

	  this._dragging.init(event, 'lasso.selection', {
	    trapClick: false,
	    autoActivate: autoActivate,
	    cursor: LASSO_TOOL_CURSOR,
	    data: {
	      context: {}
	    }
	  });
	};

	LassoTool.prototype.select = function(elements, bbox) {
	  var selectedElements = getEnclosedElements(elements, bbox);

	  this._selection.select(values(selectedElements));
	};

	LassoTool.prototype.toggle = function() {
	  if (this.isActive()) {
	    return this._dragging.cancel();
	  }

	  var mouseEvent = this._mouse.getLastMoveEvent();

	  this.activateSelection(mouseEvent, !!mouseEvent);
	};

	LassoTool.prototype.isActive = function() {
	  var context = this._dragging.context();

	  return context && /^lasso/.test(context.prefix);
	};



	function toBBox(event) {

	  var start = {

	    x: event.x - event.dx,
	    y: event.y - event.dy
	  };

	  var end = {
	    x: event.x,
	    y: event.y
	  };

	  var bbox;

	  if ((start.x <= end.x && start.y < end.y) ||
	      (start.x < end.x && start.y <= end.y)) {

	    bbox = {
	      x: start.x,
	      y: start.y,
	      width:  end.x - start.x,
	      height: end.y - start.y
	    };
	  } else if ((start.x >= end.x && start.y < end.y) ||
	             (start.x > end.x && start.y <= end.y)) {

	    bbox = {
	      x: end.x,
	      y: start.y,
	      width:  start.x - end.x,
	      height: end.y - start.y
	    };
	  } else if ((start.x <= end.x && start.y > end.y) ||
	             (start.x < end.x && start.y >= end.y)) {

	    bbox = {
	      x: start.x,
	      y: end.y,
	      width:  end.x - start.x,
	      height: start.y - end.y
	    };
	  } else if ((start.x >= end.x && start.y > end.y) ||
	             (start.x > end.x && start.y >= end.y)) {

	    bbox = {
	      x: end.x,
	      y: end.y,
	      width:  start.x - end.x,
	      height: start.y - end.y
	    };
	  } else {

	    bbox = {
	      x: end.x,
	      y: end.y,
	      width:  0,
	      height: 0
	    };
	  }
	  return bbox;
	}

	var LassoToolModule = {
	  __depends__: [
	    ToolManagerModule,
	    MouseModule
	  ],
	  __init__: [ 'lassoTool' ],
	  lassoTool: [ 'type', LassoTool ]
	};

	var HIGH_PRIORITY$h = 1500;
	var HAND_CURSOR = 'grab';


	function HandTool(
	    eventBus, canvas, dragging,
	    injector, toolManager, mouse) {

	  this._dragging = dragging;
	  this._mouse = mouse;

	  var self = this,
	      keyboard = injector.get('keyboard', false);

	  toolManager.registerTool('hand', {
	    tool: 'hand',
	    dragging: 'hand.move'
	  });

	  eventBus.on('element.mousedown', HIGH_PRIORITY$h, function(event) {

	    if (!hasPrimaryModifier(event)) {
	      return;
	    }

	    self.activateMove(event.originalEvent, true);

	    return false;
	  });

	  keyboard && keyboard.addListener(HIGH_PRIORITY$h, function(e) {
	    if (!isSpace(e.keyEvent) || self.isActive()) {
	      return;
	    }

	    var mouseEvent = self._mouse.getLastMoveEvent();

	    self.activateMove(mouseEvent, !!mouseEvent);
	  }, 'keyboard.keydown');

	  keyboard && keyboard.addListener(HIGH_PRIORITY$h, function(e) {
	    if (!isSpace(e.keyEvent) || !self.isActive()) {
	      return;
	    }

	    self.toggle();
	  }, 'keyboard.keyup');

	  eventBus.on('hand.end', function(event) {
	    var target = event.originalEvent.target;

	    // only reactive on diagram click
	    // on some occasions, event.hover is not set and we have to check if the target is an svg
	    if (!event.hover && !(target instanceof SVGElement)) {
	      return false;
	    }

	    eventBus.once('hand.ended', function() {
	      self.activateMove(event.originalEvent, { reactivate: true });
	    });

	  });

	  eventBus.on('hand.move.move', function(event) {
	    var scale = canvas.viewbox().scale;

	    canvas.scroll({
	      dx: event.dx * scale,
	      dy: event.dy * scale
	    });
	  });

	  eventBus.on('hand.move.end', function(event) {
	    var context = event.context,
	        reactivate = context.reactivate;

	    // Don't reactivate if the user is using the keyboard keybinding
	    if (!hasPrimaryModifier(event) && reactivate) {

	      eventBus.once('hand.move.ended', function(event) {
	        self.activateHand(event.originalEvent, true, true);
	      });

	    }

	    return false;
	  });

	}

	HandTool.$inject = [
	  'eventBus',
	  'canvas',
	  'dragging',
	  'injector',
	  'toolManager',
	  'mouse'
	];


	HandTool.prototype.activateMove = function(event, autoActivate, context) {
	  if (typeof autoActivate === 'object') {
	    context = autoActivate;
	    autoActivate = false;
	  }

	  this._dragging.init(event, 'hand.move', {
	    autoActivate: autoActivate,
	    cursor: HAND_CURSOR,
	    data: {
	      context: context || {}
	    }
	  });
	};

	HandTool.prototype.activateHand = function(event, autoActivate, reactivate) {
	  this._dragging.init(event, 'hand', {
	    trapClick: false,
	    autoActivate: autoActivate,
	    cursor: HAND_CURSOR,
	    data: {
	      context: {
	        reactivate: reactivate
	      }
	    }
	  });
	};

	HandTool.prototype.toggle = function() {
	  if (this.isActive()) {
	    return this._dragging.cancel();
	  }

	  var mouseEvent = this._mouse.getLastMoveEvent();

	  this.activateHand(mouseEvent, !!mouseEvent);
	};

	HandTool.prototype.isActive = function() {
	  var context = this._dragging.context();

	  if (context) {
	    return /^(hand|hand\.move)$/.test(context.prefix);
	  }

	  return false;
	};

	// helpers //////////

	function isSpace(keyEvent) {
	  return isKey(' ', keyEvent);
	}

	var HandToolModule = {
	  __depends__: [
	    ToolManagerModule,
	    MouseModule
	  ],
	  __init__: [ 'handTool' ],
	  handTool: [ 'type', HandTool ]
	};

	var MARKER_OK$4 = 'connect-ok',
	    MARKER_NOT_OK$4 = 'connect-not-ok';

	/**
	 * @class
	 * @constructor
	 *
	 * @param {EventBus} eventBus
	 * @param {Dragging} dragging
	 * @param {Connect} connect
	 * @param {Canvas} canvas
	 * @param {ToolManager} toolManager
	 * @param {Rules} rules
	 * @param {Mouse} mouse
	 */
	function GlobalConnect(
	    eventBus, dragging, connect,
	    canvas, toolManager, rules,
	    mouse) {

	  var self = this;

	  this._dragging = dragging;
	  this._rules = rules;
	  this._mouse = mouse;

	  toolManager.registerTool('global-connect', {
	    tool: 'global-connect',
	    dragging: 'global-connect.drag'
	  });

	  eventBus.on('global-connect.hover', function(event) {
	    var context = event.context,
	        startTarget = event.hover;

	    var canStartConnect = context.canStartConnect = self.canStartConnect(startTarget);

	    // simply ignore hover
	    if (canStartConnect === null) {
	      return;
	    }

	    context.startTarget = startTarget;

	    canvas.addMarker(startTarget, canStartConnect ? MARKER_OK$4 : MARKER_NOT_OK$4);
	  });


	  eventBus.on([ 'global-connect.out', 'global-connect.cleanup' ], function(event) {
	    var startTarget = event.context.startTarget,
	        canStartConnect = event.context.canStartConnect;

	    if (startTarget) {
	      canvas.removeMarker(startTarget, canStartConnect ? MARKER_OK$4 : MARKER_NOT_OK$4);
	    }
	  });


	  eventBus.on([ 'global-connect.ended' ], function(event) {
	    var context = event.context,
	        startTarget = context.startTarget,
	        startPosition = {
	          x: event.x,
	          y: event.y
	        };

	    var canStartConnect = self.canStartConnect(startTarget);

	    if (!canStartConnect) {
	      return;
	    }

	    eventBus.once('element.out', function() {
	      eventBus.once([ 'connect.ended', 'connect.canceled' ], function() {
	        eventBus.fire('global-connect.drag.ended');
	      });

	      connect.start(null, startTarget, startPosition);
	    });

	    return false;
	  });
	}

	GlobalConnect.$inject = [
	  'eventBus',
	  'dragging',
	  'connect',
	  'canvas',
	  'toolManager',
	  'rules',
	  'mouse'
	];

	/**
	 * Initiates tool activity.
	 */
	GlobalConnect.prototype.start = function(event, autoActivate) {
	  this._dragging.init(event, 'global-connect', {
	    autoActivate: autoActivate,
	    trapClick: false,
	    data: {
	      context: {}
	    }
	  });
	};

	GlobalConnect.prototype.toggle = function() {

	  if (this.isActive()) {
	    return this._dragging.cancel();
	  }

	  var mouseEvent = this._mouse.getLastMoveEvent();

	  return this.start(mouseEvent, !!mouseEvent);
	};

	GlobalConnect.prototype.isActive = function() {
	  var context = this._dragging.context();

	  return context && /^global-connect/.test(context.prefix);
	};

	/**
	 * Check if source shape can initiate connection.
	 *
	 * @param  {Shape} startTarget
	 * @return {boolean}
	 */
	GlobalConnect.prototype.canStartConnect = function(startTarget) {
	  return this._rules.allowed('connection.start', { source: startTarget });
	};

	var GlobalConnectModule = {
	  __depends__: [
	    ConnectModule,
	    RulesModule,
	    DraggingModule,
	    ToolManagerModule,
	    MouseModule
	  ],
	  globalConnect: [ 'type', GlobalConnect ]
	};

	/**
	 * A palette provider for BPMN 2.0 elements.
	 */
	function PaletteProvider(
	    palette, create, elementFactory,
	    spaceTool, lassoTool, handTool,
	    globalConnect, translate) {

	  this._palette = palette;
	  this._create = create;
	  this._elementFactory = elementFactory;
	  this._spaceTool = spaceTool;
	  this._lassoTool = lassoTool;
	  this._handTool = handTool;
	  this._globalConnect = globalConnect;
	  this._translate = translate;

	  palette.registerProvider(this);
	}

	PaletteProvider.$inject = [
	  'palette',
	  'create',
	  'elementFactory',
	  'spaceTool',
	  'lassoTool',
	  'handTool',
	  'globalConnect',
	  'translate'
	];


	PaletteProvider.prototype.getPaletteEntries = function(element) {

	  var actions = {},
	      create = this._create,
	      elementFactory = this._elementFactory,
	      spaceTool = this._spaceTool,
	      lassoTool = this._lassoTool,
	      handTool = this._handTool,
	      globalConnect = this._globalConnect,
	      translate = this._translate;

	  function createAction(type, group, className, title, options) {

	    function createListener(event) {
	      var shape = elementFactory.createShape(assign({ type: type }, options));

	      if (options) {
	        shape.businessObject.di.isExpanded = options.isExpanded;
	      }

	      create.start(event, shape);
	    }

	    var shortType = type.replace(/^bpmn:/, '');

	    return {
	      group: group,
	      className: className,
	      title: title || translate('Create {type}', { type: shortType }),
	      action: {
	        dragstart: createListener,
	        click: createListener
	      }
	    };
	  }

	  function createSubprocess(event) {
	    var subProcess = elementFactory.createShape({
	      type: 'bpmn:SubProcess',
	      x: 0,
	      y: 0,
	      isExpanded: true
	    });

	    var startEvent = elementFactory.createShape({
	      type: 'bpmn:StartEvent',
	      x: 40,
	      y: 82,
	      parent: subProcess
	    });

	    create.start(event, [ subProcess, startEvent ], {
	      hints: {
	        autoSelect: [ startEvent ]
	      }
	    });
	  }

	  function createParticipant(event) {
	    create.start(event, elementFactory.createParticipantShape());
	  }

	  assign(actions, {
	    'hand-tool': {
	      group: 'tools',
	      className: 'bpmn-icon-hand-tool',
	      title: translate('Activate the hand tool'),
	      action: {
	        click: function(event) {
	          handTool.activateHand(event);
	        }
	      }
	    },
	    'lasso-tool': {
	      group: 'tools',
	      className: 'bpmn-icon-lasso-tool',
	      title: translate('Activate the lasso tool'),
	      action: {
	        click: function(event) {
	          lassoTool.activateSelection(event);
	        }
	      }
	    },
	    'space-tool': {
	      group: 'tools',
	      className: 'bpmn-icon-space-tool',
	      title: translate('Activate the create/remove space tool'),
	      action: {
	        click: function(event) {
	          spaceTool.activateSelection(event);
	        }
	      }
	    },
	    'global-connect-tool': {
	      group: 'tools',
	      className: 'bpmn-icon-connection-multi',
	      title: translate('Activate the global connect tool'),
	      action: {
	        click: function(event) {
	          globalConnect.start(event);
	        }
	      }
	    },
	    'tool-separator': {
	      group: 'tools',
	      separator: true
	    },
	    'create.start-event': createAction(
	      'bpmn:StartEvent', 'event', 'bpmn-icon-start-event-none',
	      translate('Create StartEvent')
	    ),
	    'create.intermediate-event': createAction(
	      'bpmn:IntermediateThrowEvent', 'event', 'bpmn-icon-intermediate-event-none',
	      translate('Create Intermediate/Boundary Event')
	    ),
	    'create.end-event': createAction(
	      'bpmn:EndEvent', 'event', 'bpmn-icon-end-event-none',
	      translate('Create EndEvent')
	    ),
	    'create.exclusive-gateway': createAction(
	      'bpmn:ExclusiveGateway', 'gateway', 'bpmn-icon-gateway-none',
	      translate('Create Gateway')
	    ),
	    'create.task': createAction(
	      'bpmn:Task', 'activity', 'bpmn-icon-task',
	      translate('Create Task')
	    ),
	    'create.data-object': createAction(
	      'bpmn:DataObjectReference', 'data-object', 'bpmn-icon-data-object',
	      translate('Create DataObjectReference')
	    ),
	    'create.data-store': createAction(
	      'bpmn:DataStoreReference', 'data-store', 'bpmn-icon-data-store',
	      translate('Create DataStoreReference')
	    ),
	    'create.subprocess-expanded': {
	      group: 'activity',
	      className: 'bpmn-icon-subprocess-expanded',
	      title: translate('Create expanded SubProcess'),
	      action: {
	        dragstart: createSubprocess,
	        click: createSubprocess
	      }
	    },
	    'create.participant-expanded': {
	      group: 'collaboration',
	      className: 'bpmn-icon-participant',
	      title: translate('Create Pool/Participant'),
	      action: {
	        dragstart: createParticipant,
	        click: createParticipant
	      }
	    },
	    'create.group': createAction(
	      'bpmn:Group', 'artifact', 'bpmn-icon-group',
	      translate('Create Group')
	    ),
	  });

	  return actions;
	};

	var PaletteModule$1 = {
	  __depends__: [
	    PaletteModule,
	    CreateModule,
	    SpaceToolModule,
	    LassoToolModule,
	    HandToolModule,
	    GlobalConnectModule,
	    translate$2
	  ],
	  __init__: [ 'paletteProvider' ],
	  paletteProvider: [ 'type', PaletteProvider ]
	};

	var LOW_PRIORITY$m = 250;


	function BpmnReplacePreview(
	    eventBus, elementRegistry, elementFactory,
	    canvas, previewSupport) {

	  CommandInterceptor.call(this, eventBus);

	  /**
	   * Replace the visuals of all elements in the context which can be replaced
	   *
	   * @param  {Object} context
	   */
	  function replaceVisual(context) {

	    var replacements = context.canExecute.replacements;

	    forEach(replacements, function(replacement) {

	      var id = replacement.oldElementId;

	      var newElement = {
	        type: replacement.newElementType
	      };

	      // if the visual of the element is already replaced
	      if (context.visualReplacements[id]) {
	        return;
	      }

	      var element = elementRegistry.get(id);

	      assign(newElement, { x: element.x, y: element.y });

	      // create a temporary shape
	      var tempShape = elementFactory.createShape(newElement);

	      canvas.addShape(tempShape, element.parent);

	      // select the original SVG element related to the element and hide it
	      var gfx = query('[data-element-id="' + css_escape(element.id) + '"]', context.dragGroup);

	      if (gfx) {
	        attr$1(gfx, { display: 'none' });
	      }

	      // clone the gfx of the temporary shape and add it to the drag group
	      var dragger = previewSupport.addDragger(tempShape, context.dragGroup);

	      context.visualReplacements[id] = dragger;

	      canvas.removeShape(tempShape);
	    });
	  }

	  /**
	   * Restore the original visuals of the previously replaced elements
	   *
	   * @param  {Object} context
	   */
	  function restoreVisual(context) {

	    var visualReplacements = context.visualReplacements;

	    forEach(visualReplacements, function(dragger, id) {

	      var originalGfx = query('[data-element-id="' + css_escape(id) + '"]', context.dragGroup);

	      if (originalGfx) {
	        attr$1(originalGfx, { display: 'inline' });
	      }

	      dragger.remove();

	      if (visualReplacements[id]) {
	        delete visualReplacements[id];
	      }
	    });
	  }

	  eventBus.on('shape.move.move', LOW_PRIORITY$m, function(event) {

	    var context = event.context,
	        canExecute = context.canExecute;

	    if (!context.visualReplacements) {
	      context.visualReplacements = {};
	    }

	    if (canExecute && canExecute.replacements) {
	      replaceVisual(context);
	    } else {
	      restoreVisual(context);
	    }
	  });
	}

	BpmnReplacePreview.$inject = [
	  'eventBus',
	  'elementRegistry',
	  'elementFactory',
	  'canvas',
	  'previewSupport'
	];

	inherits_browser(BpmnReplacePreview, CommandInterceptor);

	var ReplacePreviewModule = {
	  __depends__: [
	    PreviewSupportModule
	  ],
	  __init__: [ 'bpmnReplacePreview' ],
	  bpmnReplacePreview: [ 'type', BpmnReplacePreview ]
	};

	var HIGHER_PRIORITY$2 = 1250;

	var BOUNDARY_TO_HOST_THRESHOLD$1 = 40;

	var TARGET_BOUNDS_PADDING = 20,
	    TASK_BOUNDS_PADDING = 10;

	var TARGET_CENTER_PADDING = 20;

	var AXES = [ 'x', 'y' ];

	var abs$7 = Math.abs;

	/**
	 * Snap during connect.
	 *
	 * @param {EventBus} eventBus
	 */
	function BpmnConnectSnapping(eventBus) {
	  eventBus.on([
	    'connect.hover',
	    'connect.move',
	    'connect.end',
	  ], HIGHER_PRIORITY$2, function(event) {
	    var context = event.context,
	        canExecute = context.canExecute,
	        start = context.start,
	        hover = context.hover,
	        source = context.source,
	        target = context.target;

	    // do NOT snap on CMD
	    if (event.originalEvent && isCmd(event.originalEvent)) {
	      return;
	    }

	    if (!context.initialConnectionStart) {
	      context.initialConnectionStart = context.connectionStart;
	    }

	    // snap hover
	    if (canExecute && hover) {
	      snapToShape(event, hover, getTargetBoundsPadding(hover));
	    }

	    if (hover && isAnyType(canExecute, [
	      'bpmn:Association',
	      'bpmn:DataInputAssociation',
	      'bpmn:DataOutputAssociation',
	      'bpmn:SequenceFlow'
	    ])) {
	      context.connectionStart = mid(start);

	      // snap hover
	      if (isAny(hover, [ 'bpmn:Event', 'bpmn:Gateway' ])) {
	        snapToPosition(event, mid(hover));
	      }

	      // snap hover
	      if (isAny(hover, [ 'bpmn:Task', 'bpmn:SubProcess' ])) {
	        snapToTargetMid(event, hover);
	      }

	      // snap source and target
	      if (is$1(source, 'bpmn:BoundaryEvent') && target === source.host) {
	        snapBoundaryEventLoop(event);
	      }

	    } else if (isType(canExecute, 'bpmn:MessageFlow')) {

	      if (is$1(start, 'bpmn:Event')) {

	        // snap start
	        context.connectionStart = mid(start);
	      }

	      if (is$1(hover, 'bpmn:Event')) {

	        // snap hover
	        snapToPosition(event, mid(hover));
	      }

	    } else {

	      // un-snap source
	      context.connectionStart = context.initialConnectionStart;
	    }
	  });
	}

	BpmnConnectSnapping.$inject = [ 'eventBus' ];


	// helpers //////////

	// snap to target if event in target
	function snapToShape(event, target, padding) {
	  AXES.forEach(function(axis) {
	    var dimensionForAxis = getDimensionForAxis(axis, target);

	    if (event[ axis ] < target[ axis ] + padding) {
	      setSnapped(event, axis, target[ axis ] + padding);
	    } else if (event[ axis ] > target[ axis ] + dimensionForAxis - padding) {
	      setSnapped(event, axis, target[ axis ] + dimensionForAxis - padding);
	    }
	  });
	}

	// snap to target mid if event in target mid
	function snapToTargetMid(event, target) {
	  var targetMid = mid(target);

	  AXES.forEach(function(axis) {
	    if (isMid(event, target, axis)) {
	      setSnapped(event, axis, targetMid[ axis ]);
	    }
	  });
	}

	// snap to prevent loop overlapping boundary event
	function snapBoundaryEventLoop(event) {
	  var context = event.context,
	      source = context.source,
	      target = context.target;

	  if (isReverse$2(context)) {
	    return;
	  }

	  var sourceMid = mid(source),
	      orientation = getOrientation(sourceMid, target, -10),
	      axes = [];

	  if (/top|bottom/.test(orientation)) {
	    axes.push('x');
	  }

	  if (/left|right/.test(orientation)) {
	    axes.push('y');
	  }

	  axes.forEach(function(axis) {
	    var coordinate = event[ axis ], newCoordinate;

	    if (abs$7(coordinate - sourceMid[ axis ]) < BOUNDARY_TO_HOST_THRESHOLD$1) {
	      if (coordinate > sourceMid[ axis ]) {
	        newCoordinate = sourceMid[ axis ] + BOUNDARY_TO_HOST_THRESHOLD$1;
	      }
	      else {
	        newCoordinate = sourceMid[ axis ] - BOUNDARY_TO_HOST_THRESHOLD$1;
	      }

	      setSnapped(event, axis, newCoordinate);
	    }
	  });
	}

	function snapToPosition(event, position) {
	  setSnapped(event, 'x', position.x);
	  setSnapped(event, 'y', position.y);
	}

	function isType(attrs, type) {
	  return attrs && attrs.type === type;
	}

	function isAnyType(attrs, types) {
	  return some(types, function(type) {
	    return isType(attrs, type);
	  });
	}

	function getDimensionForAxis(axis, element) {
	  return axis === 'x' ? element.width : element.height;
	}

	function getTargetBoundsPadding(target) {
	  if (is$1(target, 'bpmn:Task')) {
	    return TASK_BOUNDS_PADDING;
	  } else {
	    return TARGET_BOUNDS_PADDING;
	  }
	}

	function isMid(event, target, axis) {
	  return event[ axis ] > target[ axis ] + TARGET_CENTER_PADDING
	    && event[ axis ] < target[ axis ] + getDimensionForAxis(axis, target) - TARGET_CENTER_PADDING;
	}

	function isReverse$2(context) {
	  var hover = context.hover,
	      source = context.source;

	  return hover && source && hover === source;
	}

	/**
	 * A snap context, containing the (possibly incomplete)
	 * mappings of drop targets (to identify the snapping)
	 * to computed snap points.
	 */
	function SnapContext() {

	  /**
	   * Map<String, SnapPoints> mapping drop targets to
	   * a list of possible snappings.
	   *
	   * @type {Object}
	   */
	  this._targets = {};

	  /**
	   * Map<String, Point> initial positioning of element
	   * regarding various snap directions.
	   *
	   * @type {Object}
	   */
	  this._snapOrigins = {};

	  /**
	   * List of snap locations
	   *
	   * @type {Array<string>}
	   */
	  this._snapLocations = [];

	  /**
	   * Map<String, Array<Point>> of default snapping locations
	   *
	   * @type {Object}
	   */
	  this._defaultSnaps = {};
	}


	SnapContext.prototype.getSnapOrigin = function(snapLocation) {
	  return this._snapOrigins[snapLocation];
	};


	SnapContext.prototype.setSnapOrigin = function(snapLocation, initialValue) {
	  this._snapOrigins[snapLocation] = initialValue;

	  if (this._snapLocations.indexOf(snapLocation) === -1) {
	    this._snapLocations.push(snapLocation);
	  }
	};


	SnapContext.prototype.addDefaultSnap = function(type, point) {

	  var snapValues = this._defaultSnaps[type];

	  if (!snapValues) {
	    snapValues = this._defaultSnaps[type] = [];
	  }

	  snapValues.push(point);
	};

	/**
	 * Return a number of initialized snaps, i.e. snap locations such as
	 * top-left, mid, bottom-right and so forth.
	 *
	 * @return {Array<string>} snapLocations
	 */
	SnapContext.prototype.getSnapLocations = function() {
	  return this._snapLocations;
	};

	/**
	 * Set the snap locations for this context.
	 *
	 * The order of locations determines precedence.
	 *
	 * @param {Array<string>} snapLocations
	 */
	SnapContext.prototype.setSnapLocations = function(snapLocations) {
	  this._snapLocations = snapLocations;
	};

	/**
	 * Get snap points for a given target
	 *
	 * @param {Element|string} target
	 */
	SnapContext.prototype.pointsForTarget = function(target) {

	  var targetId = target.id || target;

	  var snapPoints = this._targets[targetId];

	  if (!snapPoints) {
	    snapPoints = this._targets[targetId] = new SnapPoints();
	    snapPoints.initDefaults(this._defaultSnaps);
	  }

	  return snapPoints;
	};


	/**
	 * Creates the snap points and initializes them with the
	 * given default values.
	 *
	 * @param {Object<string, Array<Point>>} [defaultPoints]
	 */
	function SnapPoints(defaultSnaps) {

	  /**
	   * Map<String, Map<(x|y), Array<number>>> mapping snap locations,
	   * i.e. top-left, bottom-right, center to actual snap values.
	   *
	   * @type {Object}
	   */
	  this._snapValues = {};
	}

	SnapPoints.prototype.add = function(snapLocation, point) {

	  var snapValues = this._snapValues[snapLocation];

	  if (!snapValues) {
	    snapValues = this._snapValues[snapLocation] = { x: [], y: [] };
	  }

	  if (snapValues.x.indexOf(point.x) === -1) {
	    snapValues.x.push(point.x);
	  }

	  if (snapValues.y.indexOf(point.y) === -1) {
	    snapValues.y.push(point.y);
	  }
	};


	SnapPoints.prototype.snap = function(point, snapLocation, axis, tolerance) {
	  var snappingValues = this._snapValues[snapLocation];

	  return snappingValues && snapTo(point[axis], snappingValues[axis], tolerance);
	};

	/**
	 * Initialize a number of default snapping points.
	 *
	 * @param  {Object} defaultSnaps
	 */
	SnapPoints.prototype.initDefaults = function(defaultSnaps) {

	  var self = this;

	  forEach(defaultSnaps || {}, function(snapPoints, snapLocation) {
	    forEach(snapPoints, function(point) {
	      self.add(snapLocation, point);
	    });
	  });
	};

	var HIGHER_PRIORITY$3 = 1250;


	/**
	 * Snap during create and move.
	 *
	 * @param {EventBus} elementRegistry
	 * @param {EventBus} eventBus
	 * @param {Snapping} snapping
	 */
	function CreateMoveSnapping(elementRegistry, eventBus, snapping) {
	  var self = this;

	  this._elementRegistry = elementRegistry;

	  eventBus.on([
	    'create.start',
	    'shape.move.start'
	  ], function(event) {
	    self.initSnap(event);
	  });

	  eventBus.on([
	    'create.move',
	    'create.end',
	    'shape.move.move',
	    'shape.move.end'
	  ], HIGHER_PRIORITY$3, function(event) {
	    var context = event.context,
	        shape = context.shape,
	        snapContext = context.snapContext,
	        target = context.target;

	    if (event.originalEvent && isCmd(event.originalEvent)) {
	      return;
	    }

	    if (isSnapped(event) || !target) {
	      return;
	    }

	    var snapPoints = snapContext.pointsForTarget(target);

	    if (!snapPoints.initialized) {
	      snapPoints = self.addSnapTargetPoints(snapPoints, shape, target);

	      snapPoints.initialized = true;
	    }

	    snapping.snap(event, snapPoints);
	  });

	  eventBus.on([
	    'create.cleanup',
	    'shape.move.cleanup'
	  ], function() {
	    snapping.hide();
	  });
	}

	CreateMoveSnapping.$inject = [
	  'elementRegistry',
	  'eventBus',
	  'snapping'
	];

	CreateMoveSnapping.prototype.initSnap = function(event) {
	  var elementRegistry = this._elementRegistry;

	  var context = event.context,
	      shape = context.shape,
	      snapContext = context.snapContext;

	  if (!snapContext) {
	    snapContext = context.snapContext = new SnapContext();
	  }

	  var shapeMid;

	  if (elementRegistry.get(shape.id)) {

	    // move
	    shapeMid = mid(shape, event);
	  } else {

	    // create
	    shapeMid = {
	      x: event.x + mid(shape).x,
	      y: event.y + mid(shape).y
	    };
	  }

	  var shapeTopLeft = {
	        x: shapeMid.x - shape.width / 2,
	        y: shapeMid.y - shape.height / 2
	      },
	      shapeBottomRight = {
	        x: shapeMid.x + shape.width / 2,
	        y: shapeMid.y + shape.height / 2
	      };

	  snapContext.setSnapOrigin('mid', {
	    x: shapeMid.x - event.x,
	    y: shapeMid.y - event.y
	  });

	  // snap labels to mid only
	  if (isLabel$5(shape)) {
	    return snapContext;
	  }

	  snapContext.setSnapOrigin('top-left', {
	    x: shapeTopLeft.x - event.x,
	    y: shapeTopLeft.y - event.y
	  });

	  snapContext.setSnapOrigin('bottom-right', {
	    x: shapeBottomRight.x - event.x,
	    y: shapeBottomRight.y - event.y
	  });

	  return snapContext;
	};

	CreateMoveSnapping.prototype.addSnapTargetPoints = function(snapPoints, shape, target) {
	  var snapTargets = this.getSnapTargets(shape, target);

	  forEach(snapTargets, function(snapTarget) {

	    // handle labels
	    if (isLabel$5(snapTarget)) {

	      if (isLabel$5(shape)) {
	        snapPoints.add('mid', mid(snapTarget));
	      }

	      return;
	    }

	    // handle connections
	    if (isConnection$9(snapTarget)) {

	      // ignore single segment connections
	      if (snapTarget.waypoints.length < 3) {
	        return;
	      }

	      // ignore first and last waypoint
	      var waypoints = snapTarget.waypoints.slice(1, -1);

	      forEach(waypoints, function(waypoint) {
	        snapPoints.add('mid', waypoint);
	      });

	      return;
	    }

	    // handle shapes
	    snapPoints.add('mid', mid(snapTarget));
	  });

	  if (!isNumber(shape.x) || !isNumber(shape.y)) {
	    return snapPoints;
	  }

	  // snap to original position when moving
	  if (this._elementRegistry.get(shape.id)) {
	    snapPoints.add('mid', mid(shape));
	  }

	  return snapPoints;
	};

	CreateMoveSnapping.prototype.getSnapTargets = function(shape, target) {
	  return getChildren$1(target).filter(function(child) {
	    return !isHidden(child);
	  });
	};

	// helpers //////////

	function isConnection$9(element) {
	  return !!element.waypoints;
	}

	function isHidden(element) {
	  return !!element.hidden;
	}

	function isLabel$5(element) {
	  return !!element.labelTarget;
	}

	var HIGH_PRIORITY$i = 1500;


	/**
	 * Snap during create and move.
	 *
	 * @param {EventBus} eventBus
	 * @param {Injector} injector
	 */
	function BpmnCreateMoveSnapping(eventBus, injector) {
	  injector.invoke(CreateMoveSnapping, this);

	  // creating first participant
	  eventBus.on([ 'create.move', 'create.end' ], HIGH_PRIORITY$i, setSnappedIfConstrained);

	  // snap boundary events
	  eventBus.on([
	    'create.move',
	    'create.end',
	    'shape.move.move',
	    'shape.move.end'
	  ], HIGH_PRIORITY$i, function(event) {
	    var context = event.context,
	        canExecute = context.canExecute,
	        target = context.target;

	    var canAttach = canExecute && (canExecute === 'attach' || canExecute.attach);

	    if (canAttach && !isSnapped(event)) {
	      snapBoundaryEvent(event, target);
	    }
	  });
	}

	inherits_browser(BpmnCreateMoveSnapping, CreateMoveSnapping);

	BpmnCreateMoveSnapping.$inject = [
	  'eventBus',
	  'injector'
	];

	BpmnCreateMoveSnapping.prototype.initSnap = function(event) {
	  var snapContext = CreateMoveSnapping.prototype.initSnap.call(this, event);

	  var shape = event.shape;

	  var isMove = !!this._elementRegistry.get(shape.id);

	  // snap to docking points
	  forEach(shape.outgoing, function(connection) {
	    var docking = connection.waypoints[0];

	    docking = docking.original || docking;

	    snapContext.setSnapOrigin(connection.id + '-docking', getDockingSnapOrigin(docking, isMove, event));
	  });

	  forEach(shape.incoming, function(connection) {
	    var docking = connection.waypoints[connection.waypoints.length - 1];

	    docking = docking.original || docking;

	    snapContext.setSnapOrigin(connection.id + '-docking', getDockingSnapOrigin(docking, isMove, event));
	  });

	  if (is$1(shape, 'bpmn:Participant')) {

	    // snap to borders with higher priority
	    snapContext.setSnapLocations([ 'top-left', 'bottom-right', 'mid' ]);
	  }

	  return snapContext;
	};

	BpmnCreateMoveSnapping.prototype.addSnapTargetPoints = function(snapPoints, shape, target) {
	  CreateMoveSnapping.prototype.addSnapTargetPoints.call(this, snapPoints, shape, target);

	  var snapTargets = this.getSnapTargets(shape, target);

	  forEach(snapTargets, function(snapTarget) {

	    // handle TRBL alignment
	    //
	    // * with container elements
	    // * with text annotations
	    if (isContainer(snapTarget) || areAll([ shape, snapTarget ], 'bpmn:TextAnnotation')) {
	      snapPoints.add('top-left', topLeft(snapTarget));
	      snapPoints.add('bottom-right', bottomRight(snapTarget));
	    }
	  });

	  var elementRegistry = this._elementRegistry;

	  // snap to docking points if not create mode
	  forEach(shape.incoming, function(connection) {
	    if (elementRegistry.get(shape.id)) {

	      if (!includes$6(snapTargets, connection.source)) {
	        snapPoints.add('mid', getMid(connection.source));
	      }

	      var docking = connection.waypoints[0];
	      snapPoints.add(connection.id + '-docking', docking.original || docking);
	    }
	  });

	  forEach(shape.outgoing, function(connection) {
	    if (elementRegistry.get(shape.id)) {

	      if (!includes$6(snapTargets, connection.target)) {
	        snapPoints.add('mid', getMid(connection.target));
	      }

	      var docking = connection.waypoints[ connection.waypoints.length - 1 ];

	      snapPoints.add(connection.id + '-docking', docking.original || docking);
	    }
	  });

	  // add sequence flow parents as snap targets
	  if (is$1(target, 'bpmn:SequenceFlow')) {
	    snapPoints = this.addSnapTargetPoints(snapPoints, shape, target.parent);
	  }

	  return snapPoints;
	};

	BpmnCreateMoveSnapping.prototype.getSnapTargets = function(shape, target) {
	  return CreateMoveSnapping.prototype.getSnapTargets.call(this, shape, target)
	    .filter(function(snapTarget) {

	      // do not snap to lanes
	      return !is$1(snapTarget, 'bpmn:Lane');
	    });
	};

	// helpers //////////

	function snapBoundaryEvent(event, target) {
	  var targetTRBL = asTRBL(target);

	  var direction = getBoundaryAttachment(event, target);

	  var context = event.context,
	      shape = context.shape;

	  var offset;

	  if (shape.parent) {
	    offset = { x: 0, y: 0 };
	  } else {
	    offset = getMid(shape);
	  }

	  if (/top/.test(direction)) {
	    setSnapped(event, 'y', targetTRBL.top - offset.y);
	  } else if (/bottom/.test(direction)) {
	    setSnapped(event, 'y', targetTRBL.bottom - offset.y);
	  }

	  if (/left/.test(direction)) {
	    setSnapped(event, 'x', targetTRBL.left - offset.x);
	  } else if (/right/.test(direction)) {
	    setSnapped(event, 'x', targetTRBL.right - offset.x);
	  }
	}

	function areAll(elements, type) {
	  return elements.every(function(el) {
	    return is$1(el, type);
	  });
	}

	function isContainer(element) {
	  if (is$1(element, 'bpmn:SubProcess') && isExpanded(element)) {
	    return true;
	  }

	  return is$1(element, 'bpmn:Participant');
	}


	function setSnappedIfConstrained(event) {
	  var context = event.context,
	      createConstraints = context.createConstraints;

	  if (!createConstraints) {
	    return;
	  }

	  var top = createConstraints.top,
	      right = createConstraints.right,
	      bottom = createConstraints.bottom,
	      left = createConstraints.left;

	  if ((left && left >= event.x) || (right && right <= event.x)) {
	    setSnapped(event, 'x', event.x);
	  }

	  if ((top && top >= event.y) || (bottom && bottom <= event.y)) {
	    setSnapped(event, 'y', event.y);
	  }
	}

	function includes$6(array, value) {
	  return array.indexOf(value) !== -1;
	}

	function getDockingSnapOrigin(docking, isMove, event) {
	  return isMove ? (
	    {
	      x: docking.x - event.x,
	      y: docking.y - event.y
	    }
	  ) : {
	    x: docking.x,
	    y: docking.y
	  };
	}

	var HIGHER_PRIORITY$4 = 1250;


	/**
	 * Snap during resize.
	 *
	 * @param {EventBus} eventBus
	 * @param {Snapping} snapping
	 */
	function ResizeSnapping(eventBus, snapping) {
	  var self = this;

	  eventBus.on([ 'resize.start' ], function(event) {
	    self.initSnap(event);
	  });

	  eventBus.on([
	    'resize.move',
	    'resize.end',
	  ], HIGHER_PRIORITY$4, function(event) {
	    var context = event.context,
	        shape = context.shape,
	        parent = shape.parent,
	        direction = context.direction,
	        snapContext = context.snapContext;

	    if (event.originalEvent && isCmd(event.originalEvent)) {
	      return;
	    }

	    if (isSnapped(event)) {
	      return;
	    }

	    var snapPoints = snapContext.pointsForTarget(parent);

	    if (!snapPoints.initialized) {
	      snapPoints = self.addSnapTargetPoints(snapPoints, shape, parent, direction);

	      snapPoints.initialized = true;
	    }

	    if (isHorizontal$3(direction)) {
	      setSnapped(event, 'x', event.x);
	    }

	    if (isVertical(direction)) {
	      setSnapped(event, 'y', event.y);
	    }

	    snapping.snap(event, snapPoints);
	  });

	  eventBus.on([ 'resize.cleanup' ], function() {
	    snapping.hide();
	  });
	}

	ResizeSnapping.prototype.initSnap = function(event) {
	  var context = event.context,
	      shape = context.shape,
	      direction = context.direction,
	      snapContext = context.snapContext;

	  if (!snapContext) {
	    snapContext = context.snapContext = new SnapContext();
	  }

	  var snapOrigin = getSnapOrigin(shape, direction);

	  snapContext.setSnapOrigin('corner', {
	    x: snapOrigin.x - event.x,
	    y: snapOrigin.y - event.y
	  });

	  return snapContext;
	};

	ResizeSnapping.prototype.addSnapTargetPoints = function(snapPoints, shape, target, direction) {
	  var snapTargets = this.getSnapTargets(shape, target);

	  forEach(snapTargets, function(snapTarget) {
	    snapPoints.add('corner', bottomRight(snapTarget));
	    snapPoints.add('corner', topLeft(snapTarget));
	  });

	  snapPoints.add('corner', getSnapOrigin(shape, direction));

	  return snapPoints;
	};

	ResizeSnapping.$inject = [
	  'eventBus',
	  'snapping'
	];

	ResizeSnapping.prototype.getSnapTargets = function(shape, target) {
	  return getChildren$1(target).filter(function(child) {
	    return !isAttached(child, shape)
	      && !isConnection$a(child)
	      && !isHidden$1(child)
	      && !isLabel$6(child);
	  });
	};

	// helpers //////////

	function getSnapOrigin(shape, direction) {
	  var mid = getMid(shape),
	      trbl = asTRBL(shape);

	  var snapOrigin = {
	    x: mid.x,
	    y: mid.y
	  };

	  if (direction.indexOf('n') !== -1) {
	    snapOrigin.y = trbl.top;
	  } else if (direction.indexOf('s') !== -1) {
	    snapOrigin.y = trbl.bottom;
	  }

	  if (direction.indexOf('e') !== -1) {
	    snapOrigin.x = trbl.right;
	  } else if (direction.indexOf('w') !== -1) {
	    snapOrigin.x = trbl.left;
	  }

	  return snapOrigin;
	}

	function isAttached(element, host) {
	  return element.host === host;
	}

	function isConnection$a(element) {
	  return !!element.waypoints;
	}

	function isHidden$1(element) {
	  return !!element.hidden;
	}

	function isLabel$6(element) {
	  return !!element.labelTarget;
	}

	function isHorizontal$3(direction) {
	  return direction === 'n' || direction === 's';
	}

	function isVertical(direction) {
	  return direction === 'e' || direction === 'w';
	}

	var SNAP_TOLERANCE = 7;

	var SNAP_LINE_HIDE_DELAY = 1000;


	/**
	 * Generic snapping feature.
	 *
	 * @param {EventBus} eventBus
	 * @param {Canvas} canvas
	 */
	function Snapping(canvas) {
	  this._canvas = canvas;

	  // delay hide by 1000 seconds since last snap
	  this._asyncHide = debounce(bind(this.hide, this), SNAP_LINE_HIDE_DELAY);
	}

	Snapping.$inject = [ 'canvas' ];

	/**
	 * Snap an event to given snap points.
	 *
	 * @param {Event} event
	 * @param {SnapPoints} snapPoints
	 */
	Snapping.prototype.snap = function(event, snapPoints) {
	  var context = event.context,
	      snapContext = context.snapContext,
	      snapLocations = snapContext.getSnapLocations();

	  var snapping = {
	    x: isSnapped(event, 'x'),
	    y: isSnapped(event, 'y')
	  };

	  forEach(snapLocations, function(location) {
	    var snapOrigin = snapContext.getSnapOrigin(location);

	    var snapCurrent = {
	      x: event.x + snapOrigin.x,
	      y: event.y + snapOrigin.y
	    };

	    // snap both axis if not snapped already
	    forEach([ 'x', 'y' ], function(axis) {
	      var locationSnapping;

	      if (!snapping[axis]) {
	        locationSnapping = snapPoints.snap(snapCurrent, location, axis, SNAP_TOLERANCE);

	        if (locationSnapping !== undefined) {
	          snapping[axis] = {
	            value: locationSnapping,
	            originValue: locationSnapping - snapOrigin[axis]
	          };
	        }
	      }
	    });

	    // no need to continue snapping
	    if (snapping.x && snapping.y) {
	      return false;
	    }
	  });

	  // show snap lines
	  this.showSnapLine('vertical', snapping.x && snapping.x.value);
	  this.showSnapLine('horizontal', snapping.y && snapping.y.value);

	  // snap event
	  forEach([ 'x', 'y' ], function(axis) {
	    var axisSnapping = snapping[axis];

	    if (isObject(axisSnapping)) {
	      setSnapped(event, axis, axisSnapping.originValue);
	    }
	  });
	};

	Snapping.prototype._createLine = function(orientation) {
	  var root = this._canvas.getLayer('snap');

	  var line = create('path');

	  attr$1(line, { d: 'M0,0 L0,0' });

	  classes$1(line).add('djs-snap-line');

	  append(root, line);

	  return {
	    update: function(position) {

	      if (!isNumber(position)) {
	        attr$1(line, { display: 'none' });
	      } else {
	        if (orientation === 'horizontal') {
	          attr$1(line, {
	            d: 'M-100000,' + position + ' L+100000,' + position,
	            display: ''
	          });
	        } else {
	          attr$1(line, {
	            d: 'M ' + position + ',-100000 L ' + position + ', +100000',
	            display: ''
	          });
	        }
	      }
	    }
	  };
	};

	Snapping.prototype._createSnapLines = function() {
	  this._snapLines = {
	    horizontal: this._createLine('horizontal'),
	    vertical: this._createLine('vertical')
	  };
	};

	Snapping.prototype.showSnapLine = function(orientation, position) {

	  var line = this.getSnapLine(orientation);

	  if (line) {
	    line.update(position);
	  }

	  this._asyncHide();
	};

	Snapping.prototype.getSnapLine = function(orientation) {
	  if (!this._snapLines) {
	    this._createSnapLines();
	  }

	  return this._snapLines[orientation];
	};

	Snapping.prototype.hide = function() {
	  forEach(this._snapLines, function(snapLine) {
	    snapLine.update();
	  });
	};

	var SnappingModule = {
	  __init__: [
	    'createMoveSnapping',
	    'resizeSnapping',
	    'snapping'
	  ],
	  createMoveSnapping: [ 'type', CreateMoveSnapping ],
	  resizeSnapping: [ 'type', ResizeSnapping ],
	  snapping: [ 'type', Snapping ]
	};

	var SnappingModule$1 = {
	  __depends__: [ SnappingModule ],
	  __init__: [
	    'connectSnapping',
	    'createMoveSnapping'
	  ],
	  connectSnapping: [ 'type', BpmnConnectSnapping ],
	  createMoveSnapping: [ 'type', BpmnCreateMoveSnapping ]
	};

	/**
	 * Provides searching infrastructure
	 */
	function SearchPad(canvas, eventBus, overlays, selection) {
	  this._open = false;
	  this._results = [];
	  this._eventMaps = [];

	  this._canvas = canvas;
	  this._eventBus = eventBus;
	  this._overlays = overlays;
	  this._selection = selection;

	  // setup elements
	  this._container = domify(SearchPad.BOX_HTML);
	  this._searchInput = query(SearchPad.INPUT_SELECTOR, this._container);
	  this._resultsContainer = query(SearchPad.RESULTS_CONTAINER_SELECTOR, this._container);

	  // attach search pad
	  this._canvas.getContainer().appendChild(this._container);

	  // cleanup on destroy
	  eventBus.on([ 'canvas.destroy', 'diagram.destroy' ], this.close, this);
	}


	SearchPad.$inject = [
	  'canvas',
	  'eventBus',
	  'overlays',
	  'selection'
	];


	/**
	 * Binds and keeps track of all event listereners
	 */
	SearchPad.prototype._bindEvents = function() {
	  var self = this;

	  function listen(el, selector, type, fn) {
	    self._eventMaps.push({
	      el: el,
	      type: type,
	      listener: delegate.bind(el, selector, type, fn)
	    });
	  }

	  // close search on clicking anywhere outside
	  listen(document, 'html', 'click', function(e) {
	    self.close();
	  });

	  // stop event from propagating and closing search
	  // focus on input
	  listen(this._container, SearchPad.INPUT_SELECTOR, 'click', function(e) {
	    e.stopPropagation();
	    e.delegateTarget.focus();
	  });

	  // preselect result on hover
	  listen(this._container, SearchPad.RESULT_SELECTOR, 'mouseover', function(e) {
	    e.stopPropagation();
	    self._scrollToNode(e.delegateTarget);
	    self._preselect(e.delegateTarget);
	  });

	  // selects desired result on mouse click
	  listen(this._container, SearchPad.RESULT_SELECTOR, 'click', function(e) {
	    e.stopPropagation();
	    self._select(e.delegateTarget);
	  });

	  // prevent cursor in input from going left and right when using up/down to
	  // navigate results
	  listen(this._container, SearchPad.INPUT_SELECTOR, 'keydown', function(e) {

	    // up
	    if (e.keyCode === 38) {
	      e.preventDefault();
	    }

	    // down
	    if (e.keyCode === 40) {
	      e.preventDefault();
	    }
	  });

	  // handle keyboard input
	  listen(this._container, SearchPad.INPUT_SELECTOR, 'keyup', function(e) {

	    // escape
	    if (e.keyCode === 27) {
	      return self.close();
	    }

	    // enter
	    if (e.keyCode === 13) {
	      var selected = self._getCurrentResult();

	      return selected ? self._select(selected) : self.close();
	    }

	    // up
	    if (e.keyCode === 38) {
	      return self._scrollToDirection(true);
	    }

	    // down
	    if (e.keyCode === 40) {
	      return self._scrollToDirection();
	    }

	    // left && right
	    // do not search while navigating text input
	    if (e.keyCode === 37 || e.keyCode === 39) {
	      return;
	    }

	    // anything else
	    self._search(e.delegateTarget.value);
	  });
	};


	/**
	 * Unbinds all previously established listeners
	 */
	SearchPad.prototype._unbindEvents = function() {
	  this._eventMaps.forEach(function(m) {
	    delegate.unbind(m.el, m.type, m.listener);
	  });
	};


	/**
	 * Performs a search for the given pattern.
	 *
	 * @param  {string} pattern
	 */
	SearchPad.prototype._search = function(pattern) {
	  var self = this;

	  this._clearResults();

	  // do not search on empty query
	  if (!pattern || pattern === '') {
	    return;
	  }

	  var searchResults = this._searchProvider.find(pattern);

	  if (!searchResults.length) {
	    return;
	  }

	  // append new results
	  searchResults.forEach(function(result) {
	    var id = result.element.id;
	    var node = self._createResultNode(result, id);
	    self._results[id] = {
	      element: result.element,
	      node: node
	    };
	  });

	  // preselect first result
	  var node = query(SearchPad.RESULT_SELECTOR, this._resultsContainer);
	  this._scrollToNode(node);
	  this._preselect(node);
	};


	/**
	 * Navigate to the previous/next result. Defaults to next result.
	 * @param  {boolean} previous
	 */
	SearchPad.prototype._scrollToDirection = function(previous) {
	  var selected = this._getCurrentResult();
	  if (!selected) {
	    return;
	  }

	  var node = previous ? selected.previousElementSibling : selected.nextElementSibling;
	  if (node) {
	    this._scrollToNode(node);
	    this._preselect(node);
	  }
	};


	/**
	 * Scroll to the node if it is not visible.
	 *
	 * @param  {Element} node
	 */
	SearchPad.prototype._scrollToNode = function(node) {
	  if (!node || node === this._getCurrentResult()) {
	    return;
	  }

	  var nodeOffset = node.offsetTop;
	  var containerScroll = this._resultsContainer.scrollTop;

	  var bottomScroll = nodeOffset - this._resultsContainer.clientHeight + node.clientHeight;

	  if (nodeOffset < containerScroll) {
	    this._resultsContainer.scrollTop = nodeOffset;
	  } else if (containerScroll < bottomScroll) {
	    this._resultsContainer.scrollTop = bottomScroll;
	  }
	};


	/**
	 * Clears all results data.
	 */
	SearchPad.prototype._clearResults = function() {
	  clear(this._resultsContainer);

	  this._results = [];

	  this._resetOverlay();

	  this._eventBus.fire('searchPad.cleared');
	};


	/**
	 * Get currently selected result.
	 *
	 * @return {Element}
	 */
	SearchPad.prototype._getCurrentResult = function() {
	  return query(SearchPad.RESULT_SELECTED_SELECTOR, this._resultsContainer);
	};


	/**
	 * Create result DOM element within results container
	 * that corresponds to a search result.
	 *
	 * 'result' : one of the elements returned by SearchProvider
	 * 'id' : id attribute value to assign to the new DOM node
	 * return : created DOM element
	 *
	 * @param  {SearchResult} result
	 * @param  {string} id
	 * @return {Element}
	 */
	SearchPad.prototype._createResultNode = function(result, id) {
	  var node = domify(SearchPad.RESULT_HTML);

	  // create only if available
	  if (result.primaryTokens.length > 0) {
	    createInnerTextNode(node, result.primaryTokens, SearchPad.RESULT_PRIMARY_HTML);
	  }

	  // secondary tokens (represent element ID) are allways available
	  createInnerTextNode(node, result.secondaryTokens, SearchPad.RESULT_SECONDARY_HTML);

	  attr(node, SearchPad.RESULT_ID_ATTRIBUTE, id);

	  this._resultsContainer.appendChild(node);

	  return node;
	};


	/**
	 * Register search element provider.
	 *
	 * SearchProvider.find - provides search function over own elements
	 *  (pattern) => [{ text: <String>, element: <Element>}, ...]
	 *
	 * @param  {SearchProvider} provider
	 */
	SearchPad.prototype.registerProvider = function(provider) {
	  this._searchProvider = provider;
	};


	/**
	 * Open search pad.
	 */
	SearchPad.prototype.open = function() {
	  if (!this._searchProvider) {
	    throw new Error('no search provider registered');
	  }

	  if (this.isOpen()) {
	    return;
	  }

	  this._bindEvents();

	  this._open = true;

	  classes(this._container).add('open');

	  this._searchInput.focus();

	  this._eventBus.fire('searchPad.opened');
	};


	/**
	 * Close search pad.
	 */
	SearchPad.prototype.close = function() {
	  if (!this.isOpen()) {
	    return;
	  }

	  this._unbindEvents();

	  this._open = false;

	  classes(this._container).remove('open');

	  this._clearResults();

	  this._searchInput.value = '';
	  this._searchInput.blur();

	  this._resetOverlay();

	  this._eventBus.fire('searchPad.closed');
	};


	/**
	 * Toggles search pad on/off.
	 */
	SearchPad.prototype.toggle = function() {
	  this.isOpen() ? this.close() : this.open();
	};


	/**
	 * Report state of search pad.
	 */
	SearchPad.prototype.isOpen = function() {
	  return this._open;
	};


	/**
	 * Preselect result entry.
	 *
	 * @param  {Element} element
	 */
	SearchPad.prototype._preselect = function(node) {
	  var selectedNode = this._getCurrentResult();

	  // already selected
	  if (node === selectedNode) {
	    return;
	  }

	  // removing preselection from current node
	  if (selectedNode) {
	    classes(selectedNode).remove(SearchPad.RESULT_SELECTED_CLASS);
	  }

	  var id = attr(node, SearchPad.RESULT_ID_ATTRIBUTE);
	  var element = this._results[id].element;

	  classes(node).add(SearchPad.RESULT_SELECTED_CLASS);

	  this._resetOverlay(element);

	  this._centerViewbox(element);

	  this._selection.select(element);

	  this._eventBus.fire('searchPad.preselected', element);
	};


	/**
	 * Select result node.
	 *
	 * @param  {Element} element
	 */
	SearchPad.prototype._select = function(node) {
	  var id = attr(node, SearchPad.RESULT_ID_ATTRIBUTE);
	  var element = this._results[id].element;

	  this.close();

	  this._resetOverlay();

	  this._centerViewbox(element);

	  this._selection.select(element);

	  this._eventBus.fire('searchPad.selected', element);
	};


	/**
	 * Center viewbox on the element middle point.
	 *
	 * @param  {Element} element
	 */
	SearchPad.prototype._centerViewbox = function(element) {
	  var viewbox = this._canvas.viewbox();

	  var box = getBBox(element);

	  var newViewbox = {
	    x: (box.x + box.width/2) - viewbox.outer.width/2,
	    y: (box.y + box.height/2) - viewbox.outer.height/2,
	    width: viewbox.outer.width,
	    height: viewbox.outer.height
	  };

	  this._canvas.viewbox(newViewbox);

	  this._canvas.zoom(viewbox.scale);
	};


	/**
	 * Reset overlay removes and, optionally, set
	 * overlay to a new element.
	 *
	 * @param  {Element} element
	 */
	SearchPad.prototype._resetOverlay = function(element) {
	  if (this._overlayId) {
	    this._overlays.remove(this._overlayId);
	  }

	  if (element) {
	    var box = getBBox(element);
	    var overlay = constructOverlay(box);
	    this._overlayId = this._overlays.add(element, overlay);
	  }
	};


	/**
	 * Construct overlay object for the given bounding box.
	 *
	 * @param  {BoundingBox} box
	 * @return {Object}
	 */
	function constructOverlay(box) {

	  var offset = 6;
	  var w = box.width + offset * 2;
	  var h = box.height + offset * 2;

	  var styles = [
	    'width: '+ w +'px',
	    'height: '+ h + 'px'
	  ].join('; ');

	  return {
	    position: {
	      bottom: h - offset,
	      right: w - offset
	    },
	    show: true,
	    html: '<div style="' + styles + '" class="' + SearchPad.OVERLAY_CLASS + '"></div>'
	  };
	}


	/**
	 * Creates and appends child node from result tokens and HTML template.
	 *
	 * @param  {Element} node
	 * @param  {Array<Object>} tokens
	 * @param  {string} template
	 */
	function createInnerTextNode(parentNode, tokens, template) {
	  var text = createHtmlText(tokens);
	  var childNode = domify(template);
	  childNode.innerHTML = text;
	  parentNode.appendChild(childNode);
	}

	/**
	 * Create internal HTML markup from result tokens.
	 * Caters for highlighting pattern matched tokens.
	 *
	 * @param  {Array<Object>} tokens
	 * @return {string}
	 */
	function createHtmlText(tokens) {
	  var htmlText = '';

	  tokens.forEach(function(t) {
	    if (t.matched) {
	      htmlText += '<strong class="' + SearchPad.RESULT_HIGHLIGHT_CLASS + '">' + escapeHTML(t.matched) + '</strong>';
	    } else {
	      htmlText += escapeHTML(t.normal);
	    }
	  });

	  return htmlText !== '' ? htmlText : null;
	}


	/**
	 * CONSTANTS
	 */
	SearchPad.CONTAINER_SELECTOR = '.djs-search-container';
	SearchPad.INPUT_SELECTOR = '.djs-search-input input';
	SearchPad.RESULTS_CONTAINER_SELECTOR = '.djs-search-results';
	SearchPad.RESULT_SELECTOR = '.djs-search-result';
	SearchPad.RESULT_SELECTED_CLASS = 'djs-search-result-selected';
	SearchPad.RESULT_SELECTED_SELECTOR = '.' + SearchPad.RESULT_SELECTED_CLASS;
	SearchPad.RESULT_ID_ATTRIBUTE = 'data-result-id';
	SearchPad.RESULT_HIGHLIGHT_CLASS = 'djs-search-highlight';
	SearchPad.OVERLAY_CLASS = 'djs-search-overlay';

	SearchPad.BOX_HTML =
	  '<div class="djs-search-container djs-draggable djs-scrollable">' +
	    '<div class="djs-search-input">' +
	      '<input type="text"/>' +
	    '</div>' +
	    '<div class="djs-search-results"></div>' +
	  '</div>';

	SearchPad.RESULT_HTML =
	  '<div class="djs-search-result"></div>';

	SearchPad.RESULT_PRIMARY_HTML =
	  '<div class="djs-search-result-primary"></div>';

	SearchPad.RESULT_SECONDARY_HTML =
	  '<p class="djs-search-result-secondary"></p>';

	var SearchPadModule = {
	  __depends__: [
	    OverlaysModule,
	    SelectionModule
	  ],
	  searchPad: [ 'type', SearchPad ]
	};

	/**
	 * Provides ability to search through BPMN elements
	 */
	function BpmnSearchProvider(elementRegistry, searchPad, canvas) {

	  this._elementRegistry = elementRegistry;
	  this._canvas = canvas;

	  searchPad.registerProvider(this);
	}

	BpmnSearchProvider.$inject = [
	  'elementRegistry',
	  'searchPad',
	  'canvas'
	];


	/**
	 * Finds all elements that match given pattern
	 *
	 * <Result> :
	 *  {
	 *    primaryTokens: <Array<Token>>,
	 *    secondaryTokens: <Array<Token>>,
	 *    element: <Element>
	 *  }
	 *
	 * <Token> :
	 *  {
	 *    normal|matched: <string>
	 *  }
	 *
	 * @param  {string} pattern
	 * @return {Array<Result>}
	 */
	BpmnSearchProvider.prototype.find = function(pattern) {
	  var rootElement = this._canvas.getRootElement();

	  var elements = this._elementRegistry.filter(function(element) {
	    if (element.labelTarget) {
	      return false;
	    }
	    return true;
	  });

	  // do not include root element
	  elements = filter(elements, function(element) {
	    return element !== rootElement;
	  });

	  elements = map(elements, function(element) {
	    return {
	      primaryTokens: matchAndSplit(getLabel(element), pattern),
	      secondaryTokens: matchAndSplit(element.id, pattern),
	      element: element
	    };
	  });

	  // exclude non-matched elements
	  elements = filter(elements, function(element) {
	    return hasMatched(element.primaryTokens) || hasMatched(element.secondaryTokens);
	  });

	  elements = sortBy(elements, function(element) {
	    return getLabel(element.element) + element.element.id;
	  });

	  return elements;
	};


	function hasMatched(tokens) {
	  var matched = filter(tokens, function(t) {
	    return !!t.matched;
	  });

	  return matched.length > 0;
	}


	function matchAndSplit(text, pattern) {
	  var tokens = [],
	      originalText = text;

	  if (!text) {
	    return tokens;
	  }

	  text = text.toLowerCase();
	  pattern = pattern.toLowerCase();

	  var i = text.indexOf(pattern);

	  if (i > -1) {
	    if (i !== 0) {
	      tokens.push({
	        normal: originalText.substr(0, i)
	      });
	    }

	    tokens.push({
	      matched: originalText.substr(i, pattern.length)
	    });

	    if (pattern.length + i < text.length) {
	      tokens.push({
	        normal: originalText.substr(pattern.length + i, text.length)
	      });
	    }
	  } else {
	    tokens.push({
	      normal: originalText
	    });
	  }

	  return tokens;
	}

	var SearchModule = {
	  __depends__: [
	    SearchPadModule
	  ],
	  __init__: [ 'bpmnSearch'],
	  bpmnSearch: [ 'type', BpmnSearchProvider ]
	};

	var initialDiagram =
	  '<?xml version="1.0" encoding="UTF-8"?>' +
	  '<bpmn:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
	                    'xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" ' +
	                    'xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" ' +
	                    'xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" ' +
	                    'targetNamespace="http://bpmn.io/schema/bpmn" ' +
	                    'id="Definitions_1">' +
	    '<bpmn:process id="Process_1" isExecutable="false">' +
	      '<bpmn:startEvent id="StartEvent_1"/>' +
	    '</bpmn:process>' +
	    '<bpmndi:BPMNDiagram id="BPMNDiagram_1">' +
	      '<bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_1">' +
	        '<bpmndi:BPMNShape id="_BPMNShape_StartEvent_2" bpmnElement="StartEvent_1">' +
	          '<dc:Bounds height="36.0" width="36.0" x="173.0" y="102.0"/>' +
	        '</bpmndi:BPMNShape>' +
	      '</bpmndi:BPMNPlane>' +
	    '</bpmndi:BPMNDiagram>' +
	  '</bpmn:definitions>';


	/**
	 * A modeler for BPMN 2.0 diagrams.
	 *
	 *
	 * ## Extending the Modeler
	 *
	 * In order to extend the viewer pass extension modules to bootstrap via the
	 * `additionalModules` option. An extension module is an object that exposes
	 * named services.
	 *
	 * The following example depicts the integration of a simple
	 * logging component that integrates with interaction events:
	 *
	 *
	 * ```javascript
	 *
	 * // logging component
	 * function InteractionLogger(eventBus) {
	 *   eventBus.on('element.hover', function(event) {
	 *     console.log()
	 *   })
	 * }
	 *
	 * InteractionLogger.$inject = [ 'eventBus' ]; // minification save
	 *
	 * // extension module
	 * var extensionModule = {
	 *   __init__: [ 'interactionLogger' ],
	 *   interactionLogger: [ 'type', InteractionLogger ]
	 * };
	 *
	 * // extend the viewer
	 * var bpmnModeler = new Modeler({ additionalModules: [ extensionModule ] });
	 * bpmnModeler.importXML(...);
	 * ```
	 *
	 *
	 * ## Customizing / Replacing Components
	 *
	 * You can replace individual diagram components by redefining them in override modules.
	 * This works for all components, including those defined in the core.
	 *
	 * Pass in override modules via the `options.additionalModules` flag like this:
	 *
	 * ```javascript
	 * function CustomContextPadProvider(contextPad) {
	 *
	 *   contextPad.registerProvider(this);
	 *
	 *   this.getContextPadEntries = function(element) {
	 *     // no entries, effectively disable the context pad
	 *     return {};
	 *   };
	 * }
	 *
	 * CustomContextPadProvider.$inject = [ 'contextPad' ];
	 *
	 * var overrideModule = {
	 *   contextPadProvider: [ 'type', CustomContextPadProvider ]
	 * };
	 *
	 * var bpmnModeler = new Modeler({ additionalModules: [ overrideModule ]});
	 * ```
	 *
	 * @param {Object} [options] configuration options to pass to the viewer
	 * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.
	 * @param {string|number} [options.width] the width of the viewer
	 * @param {string|number} [options.height] the height of the viewer
	 * @param {Object} [options.moddleExtensions] extension packages to provide
	 * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules
	 * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules
	 */
	function Modeler(options) {
	  BaseModeler.call(this, options);
	}

	inherits_browser(Modeler, BaseModeler);


	Modeler.Viewer = Viewer;
	Modeler.NavigatedViewer = NavigatedViewer;

	/**
	* The createDiagram result.
	*
	* @typedef {Object} CreateDiagramResult
	*
	* @property {Array<string>} warnings
	*/

	/**
	* The createDiagram error.
	*
	* @typedef {Error} CreateDiagramError
	*
	* @property {Array<string>} warnings
	*/

	/**
	 * Create a new diagram to start modeling.
	 *
	 * Returns {Promise<CreateDiagramResult, CreateDiagramError>}
	 */
	Modeler.prototype.createDiagram = wrapForCompatibility(function createDiagram() {
	  return this.importXML(initialDiagram);
	});


	Modeler.prototype._interactionModules = [

	  // non-modeling components
	  KeyboardMoveModule,
	  MoveCanvasModule,
	  TouchModule$1,
	  ZoomScrollModule
	];

	Modeler.prototype._modelingModules = [

	  // modeling components
	  AlignElementsModule,
	  AutoPlaceModule$1,
	  AutoScrollModule,
	  AutoResizeModule,
	  BendpointsModule,
	  ConnectModule,
	  ConnectionPreviewModule,
	  ContextPadModule$1,
	  CopyPasteModule$1,
	  CreateModule,
	  DistributeElementsModule$1,
	  EditorActionsModule$1,
	  GridSnappingModule$1,
	  InteractionEventsModule$1,
	  KeyboardModule$1,
	  KeyboardMoveSelectionModule,
	  LabelEditingModule,
	  ModelingModule,
	  MoveModule,
	  PaletteModule$1,
	  ReplacePreviewModule,
	  ResizeModule,
	  SnappingModule$1,
	  SearchModule
	];


	// modules the modeler is composed of
	//
	// - viewer modules
	// - interaction modules
	// - modeling modules

	Modeler.prototype._modules = [].concat(
	  Viewer.prototype._modules,
	  Modeler.prototype._interactionModules,
	  Modeler.prototype._modelingModules
	);

	var MINIMAP_VIEWBOX_PADDING = 50;

	var RANGE$1 = { min: 0.2, max: 4 },
	    NUM_STEPS$1 = 10;

	var DELTA_THRESHOLD$1 = 0.1;

	var LOW_PRIORITY$n = 250;


	/**
	 * A minimap that reflects and lets you navigate the diagram.
	 */
	function Minimap(
	    config, injector, eventBus,
	    canvas, elementRegistry) {

	  var self = this;

	  this._canvas = canvas;
	  this._elementRegistry = elementRegistry;
	  this._eventBus = eventBus;
	  this._injector = injector;

	  this._state = {
	    isOpen: undefined,
	    isDragging: false,
	    initialDragPosition: null,
	    offsetViewport: null,
	    cachedViewbox: null,
	    dragger: null,
	    svgClientRect: null,
	    parentClientRect: null,
	    zoomDelta: 0
	  };

	  this._init();

	  this.toggle((config && config.open) || false);

	  function setViewboxCenteredAroundClickEvent(event) {

	    // getBoundingClientRect might return zero-dimensional when called for the first time
	    if (!self._state._svgClientRect || isZeroDimensional(self._state._svgClientRect)) {
	      self._state._svgClientRect = self._svg.getBoundingClientRect();
	    }

	    var diagramPoint = mapMousePositionToDiagramPoint({
	      x: event.clientX - self._state._svgClientRect.left,
	      y: event.clientY - self._state._svgClientRect.top
	    }, self._svg, self._lastViewbox);

	    setViewboxCenteredAroundPoint(diagramPoint, self._canvas);

	    self._update();
	  }

	  // set viewbox on click
	  componentEvent.bind(this._svg, 'click', function(event) {
	    event.preventDefault();
	    event.stopPropagation();

	    setViewboxCenteredAroundClickEvent(event);
	  });

	  function mousedown(center) {

	    return function onMousedown(event$1) {

	      // getBoundingClientRect might return zero-dimensional when called for the first time
	      if (!self._state._svgClientRect || isZeroDimensional(self._state._svgClientRect)) {
	        self._state._svgClientRect = self._svg.getBoundingClientRect();
	      }

	      if (center) {
	        setViewboxCenteredAroundClickEvent(event$1);
	      }

	      var diagramPoint = mapMousePositionToDiagramPoint({
	        x: event$1.clientX - self._state._svgClientRect.left,
	        y: event$1.clientY - self._state._svgClientRect.top
	      }, self._svg, self._lastViewbox);

	      var viewbox = canvas.viewbox();

	      var offsetViewport = getOffsetViewport(diagramPoint, viewbox);

	      var initialViewportDomRect = self._viewportDom.getBoundingClientRect();

	      // take border into account (regardless of width)
	      var offsetViewportDom = {
	        x: event$1.clientX - initialViewportDomRect.left + 1,
	        y: event$1.clientY - initialViewportDomRect.top + 1
	      };

	      // init dragging
	      assign(self._state, {
	        cachedViewbox: viewbox,
	        initialDragPosition: {
	          x: event$1.clientX,
	          y: event$1.clientY
	        },
	        isDragging: true,
	        offsetViewport: offsetViewport,
	        offsetViewportDom: offsetViewportDom,
	        viewportClientRect: self._viewport.getBoundingClientRect(),
	        parentClientRect: self._parent.getBoundingClientRect()
	      });

	      componentEvent.bind(document, 'mousemove', onMousemove);
	      componentEvent.bind(document, 'mouseup', onMouseup);
	    };
	  }

	  function onMousemove(event) {

	    // set viewbox if dragging active
	    if (self._state.isDragging) {

	      // getBoundingClientRect might return zero-dimensional when called for the first time
	      if (!self._state._svgClientRect || isZeroDimensional(self._state._svgClientRect)) {
	        self._state._svgClientRect = self._svg.getBoundingClientRect();
	      }

	      // update viewport DOM
	      var offsetViewportDom = self._state.offsetViewportDom,
	          viewportClientRect = self._state.viewportClientRect,
	          parentClientRect = self._state.parentClientRect;

	      assign(self._viewportDom.style, {
	        top: (event.clientY - offsetViewportDom.y - parentClientRect.top) + 'px',
	        left: (event.clientX - offsetViewportDom.x - parentClientRect.left) + 'px'
	      });

	      // update overlay
	      var clipPath = getOverlayClipPath(parentClientRect, {
	        top: event.clientY - offsetViewportDom.y - parentClientRect.top,
	        left: event.clientX - offsetViewportDom.x - parentClientRect.left,
	        width: viewportClientRect.width,
	        height: viewportClientRect.height
	      });

	      assign(self._overlay.style, {
	        clipPath: clipPath
	      });

	      var diagramPoint = mapMousePositionToDiagramPoint({
	        x: event.clientX - self._state._svgClientRect.left,
	        y: event.clientY - self._state._svgClientRect.top
	      }, self._svg, self._lastViewbox);

	      setViewboxCenteredAroundPoint({
	        x: diagramPoint.x - self._state.offsetViewport.x,
	        y: diagramPoint.y - self._state.offsetViewport.y
	      }, self._canvas);
	    }
	  }

	  function onMouseup(event$1) {

	    if (self._state.isDragging) {

	      // treat event as click
	      if (self._state.initialDragPosition.x === event$1.clientX
	          && self._state.initialDragPosition.y === event$1.clientY) {
	        setViewboxCenteredAroundClickEvent(event$1);
	      }

	      self._update();

	      // end dragging
	      assign(self._state, {
	        cachedViewbox: null,
	        initialDragPosition: null,
	        isDragging: false,
	        offsetViewport: null,
	        offsetViewportDom: null
	      });

	      componentEvent.unbind(document, 'mousemove', onMousemove);
	      componentEvent.unbind(document, 'mouseup', onMouseup);
	    }
	  }

	  // dragging viewport scrolls canvas
	  componentEvent.bind(this._viewportDom, 'mousedown', mousedown(false));
	  componentEvent.bind(this._svg, 'mousedown', mousedown(true));

	  componentEvent.bind(this._parent, 'wheel', function(event) {

	    // stop propagation and handle scroll differently
	    event.preventDefault();
	    event.stopPropagation();

	    // only zoom in on ctrl; this aligns with diagram-js navigation behavior
	    if (!event.ctrlKey) {
	      return;
	    }

	    // getBoundingClientRect might return zero-dimensional when called for the first time
	    if (!self._state._svgClientRect || isZeroDimensional(self._state._svgClientRect)) {
	      self._state._svgClientRect = self._svg.getBoundingClientRect();
	    }

	    // disallow zooming through viewport outside of minimap as it is very confusing
	    if (!isPointInside(event, self._state._svgClientRect)) {
	      return;
	    }

	    var factor = event.deltaMode === 0 ? 0.020 : 0.32;

	    var delta = (
	      Math.sqrt(
	        Math.pow(event.deltaY, 2) +
	        Math.pow(event.deltaX, 2)
	      ) * sign$1(event.deltaY) * -factor
	    );

	    // add until threshold reached
	    self._state.zoomDelta += delta;

	    if (Math.abs(self._state.zoomDelta) > DELTA_THRESHOLD$1) {
	      var direction = delta > 0 ? 1 : -1;

	      var currentLinearZoomLevel = Math.log(canvas.zoom()) / Math.log(10);

	      // zoom with half the step size of stepZoom
	      var stepSize = getStepSize$1(RANGE$1, NUM_STEPS$1 * 2);

	      // snap to a proximate zoom step
	      var newLinearZoomLevel = Math.round(currentLinearZoomLevel / stepSize) * stepSize;

	      // increase or decrease one zoom step in the given direction
	      newLinearZoomLevel += stepSize * direction;

	      // calculate the absolute logarithmic zoom level based on the linear zoom level
	      // (e.g. 2 for an absolute x2 zoom)
	      var newLogZoomLevel = Math.pow(10, newLinearZoomLevel);

	      canvas.zoom(cap$1(RANGE$1, newLogZoomLevel), diagramPoint);

	      // reset
	      self._state.zoomDelta = 0;

	      var diagramPoint = mapMousePositionToDiagramPoint({
	        x: event.clientX - self._state._svgClientRect.left,
	        y: event.clientY - self._state._svgClientRect.top
	      }, self._svg, self._lastViewbox);

	      setViewboxCenteredAroundPoint(diagramPoint, self._canvas);

	      self._update();
	    }
	  });

	  componentEvent.bind(this._toggle, 'click', function(event) {
	    event.preventDefault();
	    event.stopPropagation();

	    self.toggle();
	  });

	  // add shape on shape/connection added
	  eventBus.on([ 'shape.added', 'connection.added' ], function(context) {
	    var element = context.element;

	    self._addElement(element);

	    self._update();
	  });

	  // remove shape on shape/connection removed
	  eventBus.on([ 'shape.removed', 'connection.removed' ], function(context) {
	    var element = context.element;

	    self._removeElement(element);

	    self._update();
	  });

	  // update on elements changed
	  eventBus.on('elements.changed', LOW_PRIORITY$n, function(context) {
	    var elements = context.elements;

	    elements.forEach(function(element) {
	      self._updateElement(element);
	    });

	    self._update();
	  });

	  // update on element ID update
	  eventBus.on('element.updateId', function(context) {
	    var element = context.element,
	        newId = context.newId;

	    self._updateElementId(element, newId);
	  });

	  // update on viewbox changed
	  eventBus.on('canvas.viewbox.changed', function() {
	    if (!self._state.isDragging) {
	      self._update();
	    }
	  });

	  eventBus.on('canvas.resized', function() {

	    // only update if present in DOM
	    if (document.body.contains(self._parent)) {
	      if (!self._state.isDragging) {
	        self._update();
	      }

	      self._state._svgClientRect = self._svg.getBoundingClientRect();
	    }

	  });
	}

	Minimap.$inject = [
	  'config.minimap',
	  'injector',
	  'eventBus',
	  'canvas',
	  'elementRegistry'
	];

	Minimap.prototype._init = function() {
	  var canvas = this._canvas,
	      container = canvas.getContainer();

	  // create parent div
	  var parent = this._parent = document.createElement('div');

	  classes(parent).add('djs-minimap');

	  container.appendChild(parent);

	  // create toggle
	  var toggle = this._toggle = document.createElement('div');

	  classes(toggle).add('toggle');

	  parent.appendChild(toggle);

	  // create map
	  var map = this._map = document.createElement('div');

	  classes(map).add('map');

	  parent.appendChild(map);

	  // create svg
	  var svg = this._svg = create('svg');
	  attr$1(svg, { width: '100%', height: '100%' });
	  append(map, svg);

	  // add groups
	  var elementsGroup = this._elementsGroup = create('g');
	  append(svg, elementsGroup);

	  var viewportGroup = this._viewportGroup = create('g');
	  append(svg, viewportGroup);

	  // add viewport SVG
	  var viewport = this._viewport = create('rect');

	  classes$1(viewport).add('viewport');

	  append(viewportGroup, viewport);

	  // prevent drag propagation
	  componentEvent.bind(parent, 'mousedown', function(event) {
	    event.stopPropagation();
	  });

	  // add viewport DOM
	  var viewportDom = this._viewportDom = document.createElement('div');

	  classes(viewportDom).add('viewport-dom');

	  this._parent.appendChild(viewportDom);

	  // add overlay
	  var overlay = this._overlay = document.createElement('div');

	  classes(overlay).add('overlay');

	  this._parent.appendChild(overlay);
	};

	Minimap.prototype._update = function() {
	  var viewbox = this._canvas.viewbox(),
	      innerViewbox = viewbox.inner,
	      outerViewbox = viewbox.outer;

	  if (!validViewbox(viewbox)) {
	    return;
	  }

	  var x, y, width, height;

	  var widthDifference = outerViewbox.width - innerViewbox.width,
	      heightDifference = outerViewbox.height - innerViewbox.height;

	  // update viewbox
	  // x
	  if (innerViewbox.width < outerViewbox.width) {
	    x = innerViewbox.x - widthDifference / 2;
	    width = outerViewbox.width;

	    if (innerViewbox.x + innerViewbox.width < outerViewbox.width) {
	      x = Math.min(0, innerViewbox.x);
	    }
	  } else {
	    x = innerViewbox.x;
	    width = innerViewbox.width;
	  }

	  // y
	  if (innerViewbox.height < outerViewbox.height) {
	    y = innerViewbox.y - heightDifference / 2;
	    height = outerViewbox.height;

	    if (innerViewbox.y + innerViewbox.height < outerViewbox.height) {
	      y = Math.min(0, innerViewbox.y);
	    }
	  } else {
	    y = innerViewbox.y;
	    height = innerViewbox.height;
	  }

	  // apply some padding
	  x = x - MINIMAP_VIEWBOX_PADDING;
	  y = y - MINIMAP_VIEWBOX_PADDING;
	  width = width + MINIMAP_VIEWBOX_PADDING * 2;
	  height = height + MINIMAP_VIEWBOX_PADDING * 2;

	  this._lastViewbox = {
	    x: x,
	    y: y,
	    width: width,
	    height: height
	  };

	  attr$1(this._svg, {
	    viewBox: x + ', ' + y + ', ' + width + ', ' + height
	  });

	  // update viewport SVG
	  attr$1(this._viewport, {
	    x: viewbox.x,
	    y: viewbox.y,
	    width: viewbox.width,
	    height: viewbox.height
	  });

	  // update viewport DOM
	  var parentClientRect = this._state._parentClientRect = this._parent.getBoundingClientRect();
	  var viewportClientRect = this._viewport.getBoundingClientRect();

	  var withoutParentOffset = {
	    top: viewportClientRect.top - parentClientRect.top,
	    left: viewportClientRect.left - parentClientRect.left,
	    width: viewportClientRect.width,
	    height: viewportClientRect.height
	  };

	  assign(this._viewportDom.style, {
	    top: withoutParentOffset.top + 'px',
	    left: withoutParentOffset.left + 'px',
	    width: withoutParentOffset.width + 'px',
	    height: withoutParentOffset.height + 'px'
	  });

	  // update overlay
	  var clipPath = getOverlayClipPath(parentClientRect, withoutParentOffset);

	  assign(this._overlay.style, {
	    clipPath: clipPath
	  });
	};

	Minimap.prototype.open = function() {
	  assign(this._state, { isOpen: true });

	  classes(this._parent).add('open');

	  var translate = this._injector.get('translate', false) || function(s) { return s; };

	  attr(this._toggle, 'title', translate('Close minimap'));

	  this._update();

	  this._eventBus.fire('minimap.toggle', { open: true });
	};

	Minimap.prototype.close = function() {
	  assign(this._state, { isOpen: false });

	  classes(this._parent).remove('open');

	  var translate = this._injector.get('translate', false) || function(s) { return s; };

	  attr(this._toggle, 'title', translate('Open minimap'));

	  this._eventBus.fire('minimap.toggle', { open: false });
	};

	Minimap.prototype.toggle = function(open) {

	  var currentOpen = this.isOpen();

	  if (typeof open === 'undefined') {
	    open = !currentOpen;
	  }

	  if (open == currentOpen) {
	    return;
	  }

	  if (open) {
	    this.open();
	  } else {
	    this.close();
	  }
	};

	Minimap.prototype.isOpen = function() {
	  return this._state.isOpen;
	};

	Minimap.prototype._updateElement = function(element) {

	  try {

	    // if parent is null element has been removed, if parent is undefined parent is root
	    if (element.parent !== undefined && element.parent !== null) {
	      this._removeElement(element);
	      this._addElement(element);
	    }
	  } catch (error) {
	    console.warn('Minimap#_updateElement errored', error);
	  }

	};

	Minimap.prototype._updateElementId = function(element, newId) {

	  try {
	    var elementGfx = query('#' + css_escape(element.id), this._elementsGroup);

	    if (elementGfx) {
	      elementGfx.id = newId;
	    }
	  } catch (error) {
	    console.warn('Minimap#_updateElementId errored', error);
	  }

	};

	/**
	 * Adds an element to the minimap.
	 */
	Minimap.prototype._addElement = function(element) {
	  var self = this;

	  this._removeElement(element);

	  var parent,
	      x, y;

	  var newElementGfx = this._createElement(element);
	  var newElementParentGfx = query('#' + css_escape(element.parent.id), this._elementsGroup);

	  if (newElementGfx) {

	    var elementGfx = this._elementRegistry.getGraphics(element);
	    var parentGfx = this._elementRegistry.getGraphics(element.parent);

	    var index = getIndexOfChildInParentChildren(elementGfx, parentGfx);

	    // index can be 0
	    if (index !== 'undefined') {
	      if (newElementParentGfx) {

	        // in cases of doubt add as last child
	        if (newElementParentGfx.childNodes.length > index) {
	          insertChildAtIndex(newElementGfx, newElementParentGfx, index);
	        } else {
	          insertChildAtIndex(newElementGfx, newElementParentGfx, newElementParentGfx.childNodes.length - 1);
	        }

	      } else {
	        this._elementsGroup.appendChild(newElementGfx);
	      }

	    } else {

	      // index undefined
	      this._elementsGroup.appendChild(newElementGfx);
	    }

	    if (isConnection$b(element)) {
	      parent = element.parent;
	      x = 0;
	      y = 0;

	      if (typeof parent.x !== 'undefined' && typeof parent.y !== 'undefined') {
	        x = -parent.x;
	        y = -parent.y;
	      }

	      attr$1(newElementGfx, { transform: 'translate(' + x + ' ' + y + ')' });
	    } else {
	      x = element.x;
	      y = element.y;

	      if (newElementParentGfx) {
	        parent = element.parent;

	        x -= parent.x;
	        y -= parent.y;
	      }

	      attr$1(newElementGfx, { transform: 'translate(' + x + ' ' + y + ')' });
	    }

	    if (element.children && element.children.length) {
	      element.children.forEach(function(child) {
	        self._addElement(child);
	      });
	    }

	    return newElementGfx;
	  }
	};

	Minimap.prototype._removeElement = function(element) {
	  var elementGfx = this._svg.getElementById(element.id);

	  if (elementGfx) {
	    remove$1(elementGfx);
	  }
	};

	Minimap.prototype._createElement = function(element) {
	  var gfx = this._elementRegistry.getGraphics(element),
	      visual;

	  if (gfx) {
	    visual = getVisual(gfx);

	    if (visual) {
	      var elementGfx = clone(visual);
	      attr$1(elementGfx, { id: element.id });

	      return elementGfx;
	    }
	  }
	};

	function isConnection$b(element) {
	  return element.waypoints;
	}

	function getOffsetViewport(diagramPoint, viewbox) {
	  var centerViewbox = {
	    x: viewbox.x + (viewbox.width / 2),
	    y: viewbox.y + (viewbox.height / 2)
	  };

	  return {
	    x: diagramPoint.x - centerViewbox.x,
	    y: diagramPoint.y - centerViewbox.y
	  };
	}

	function mapMousePositionToDiagramPoint(position, svg, lastViewbox) {

	  // firefox returns 0 for clientWidth and clientHeight
	  var boundingClientRect = svg.getBoundingClientRect();

	  // take different aspect ratios of default layers bounding box and minimap into account
	  var bBox =
	    fitAspectRatio(lastViewbox, boundingClientRect.width / boundingClientRect.height);

	  // map click position to diagram position
	  var diagramX = map$2(position.x, 0, boundingClientRect.width, bBox.x, bBox.x + bBox.width),
	      diagramY = map$2(position.y, 0, boundingClientRect.height, bBox.y, bBox.y + bBox.height);

	  return {
	    x: diagramX,
	    y: diagramY
	  };
	}

	function setViewboxCenteredAroundPoint(point, canvas) {

	  // get cached viewbox to preserve zoom
	  var cachedViewbox = canvas.viewbox(),
	      cachedViewboxWidth = cachedViewbox.width,
	      cachedViewboxHeight = cachedViewbox.height;

	  canvas.viewbox({
	    x: point.x - cachedViewboxWidth / 2,
	    y: point.y - cachedViewboxHeight / 2,
	    width: cachedViewboxWidth,
	    height: cachedViewboxHeight
	  });
	}

	function fitAspectRatio(bounds, targetAspectRatio) {
	  var aspectRatio = bounds.width / bounds.height;

	  // assigning to bounds throws exception in IE11
	  var newBounds = assign({}, {
	    x: bounds.x,
	    y: bounds.y,
	    width: bounds.width,
	    height: bounds.height
	  });

	  if (aspectRatio > targetAspectRatio) {

	    // height needs to be fitted
	    var height = newBounds.width * (1 / targetAspectRatio),
	        y = newBounds.y - ((height - newBounds.height) / 2);

	    assign(newBounds, {
	      y: y,
	      height: height
	    });
	  } else if (aspectRatio < targetAspectRatio) {

	    // width needs to be fitted
	    var width = newBounds.height * targetAspectRatio,
	        x = newBounds.x - ((width - newBounds.width) / 2);

	    assign(newBounds, {
	      x: x,
	      width: width
	    });
	  }

	  return newBounds;
	}

	function map$2(x, inMin, inMax, outMin, outMax) {
	  var inRange = inMax - inMin,
	      outRange = outMax - outMin;

	  return (x - inMin) * outRange / inRange + outMin;
	}

	/**
	 * Returns index of child in children of parent.
	 *
	 * g
	 * '- g.djs-element // parentGfx
	 * '- g.djs-children
	 *    '- g
	 *       '-g.djs-element // childGfx
	 */
	function getIndexOfChildInParentChildren(childGfx, parentGfx) {
	  var childrenGroup = query('.djs-children', parentGfx.parentNode);

	  if (!childrenGroup) {
	    return;
	  }

	  var childrenArray = [].slice.call(childrenGroup.childNodes);

	  var indexOfChild = -1;

	  childrenArray.forEach(function(childGroup, index) {
	    if (query('.djs-element', childGroup) === childGfx) {
	      indexOfChild = index;
	    }
	  });

	  return indexOfChild;
	}

	function insertChildAtIndex(childGfx, parentGfx, index) {
	  var childrenArray = [].slice.call(parentGfx.childNodes);

	  var childAtIndex = childrenArray[index];

	  parentGfx.insertBefore(childGfx, childAtIndex.nextSibling);
	}

	function isZeroDimensional(clientRect) {
	  return clientRect.width === 0 && clientRect.height === 0;
	}

	function isPointInside(point, rect) {
	  return point.x > rect.left
	    && point.x < rect.left + rect.width
	    && point.y > rect.top
	    && point.y < rect.top + rect.height;
	}

	var sign$1 = Math.sign || function(n) {
	  return n >= 0 ? 1 : -1;
	};

	/**
	 * Get step size for given range and number of steps.
	 *
	 * @param {Object} range - Range.
	 * @param {number} range.min - Range minimum.
	 * @param {number} range.max - Range maximum.
	 */
	function getStepSize$1(range, steps) {

	  var minLinearRange = Math.log(range.min) / Math.log(10),
	      maxLinearRange = Math.log(range.max) / Math.log(10);

	  var absoluteLinearRange = Math.abs(minLinearRange) + Math.abs(maxLinearRange);

	  return absoluteLinearRange / steps;
	}

	function cap$1(range, scale) {
	  return Math.max(range.min, Math.min(range.max, scale));
	}

	function getOverlayClipPath(outer, inner) {
	  var coordinates = [
	    toCoordinatesString(inner.left, inner.top),
	    toCoordinatesString(inner.left + inner.width, inner.top),
	    toCoordinatesString(inner.left + inner.width, inner.top + inner.height),
	    toCoordinatesString(inner.left, inner.top + inner.height),
	    toCoordinatesString(inner.left, outer.height),
	    toCoordinatesString(outer.width, outer.height),
	    toCoordinatesString(outer.width, 0),
	    toCoordinatesString(0, 0),
	    toCoordinatesString(0, outer.height),
	    toCoordinatesString(inner.left, outer.height)
	  ].join(', ');

	  return 'polygon(' + coordinates + ')';
	}

	function toCoordinatesString(x, y) {
	  return x + 'px ' + y + 'px';
	}

	function validViewbox(viewBox) {

	  return every(viewBox, function(value) {

	    // check deeper structures like inner or outer viewbox
	    if (isObject(value)) {
	      return validViewbox(value);
	    }

	    return isNumber(value) && isFinite(value);
	  });
	}

	var index$1 = {
	  __init__: [ 'minimap' ],
	  minimap: [ 'type', Minimap ]
	};

	var CROSS_COLOR = '#CCC',
	    BORDER_COLOR = 'rgba(0,0,0,0.1)';


	/**
	 * A diagram-js extension that shows a (0, 0) origin indicator
	 * on the canvas as well as (optionally) the canvas borders.
	 *
	 * @param {Object} [config]
	 * @param {Canvas} canvas
	 */
	function ConfigureOrigin(config, canvas) {

	  config = config || {};

	  var borderColor = config.borderColor || BORDER_COLOR,
	      crossColor = config.crossColor || CROSS_COLOR ;

	  var w = 30, h = 2,
	      w_half = w / 2,
	      s = -h / 2,
	      lineStart = w_half + 7;

	  var parent = canvas.getLayer('djs-origin', -1);

	  var g,
	      line,
	      cross,
	      label;

	  g = createEl('g', {
	    'pointer-events': 'none'
	  });

	  append(parent, g);

	  if (config.showBorder !== false) {

	    // the dashed lines, marking positive document coordinates
	    line = createEl('path', {
	      'class': cls('border'),
	      'd': path([
	        'M', -lineStart, s,
	        'H', -1000,
	        'M', lineStart, s,
	        'H', 6000,
	        'M', s, -lineStart,
	        'V', -1000,
	        'M', s, lineStart,
	        'V', 3000
	      ]),
	      'fill': 'none',
	      'stroke': borderColor,
	      'stroke-width': h + 'px',
	      'stroke-dasharray': '6, 6',
	      'shape-rendering': 'crispedges'
	    });

	    append(g, line);
	  }

	  // the cross that marks the diagram origin
	  cross = createEl('path', {
	    d: path([
	      'M', -w_half, s,
	      'H', w_half,
	      'M', s, -w_half,
	      'V', w_half
	    ]),
	    'class': cls('cross'),
	    'fill': 'none',
	    'stroke': crossColor,
	    'stroke-width': h + 'px',
	    'stroke-linecap': 'round'
	  });

	  append(g, cross);

	  label = createEl('text', {
	    x: -40,
	    y: -10,
	    fill: crossColor,
	    'class': cls('label'),
	  });

	  label.textContent = '(0, 0)';

	  append(g, label);
	}

	ConfigureOrigin.$inject = [
	  'config.origin',
	  'canvas'
	];


	// helpers ///////////////////////////////////

	function path(parts) {
	  return parts.join(' ');
	}

	function cls(name) {
	  return 'djs-origin-' + name;
	}

	function createEl(type, attrs) {

	  var el = create(type);

	  attr$1(el, attrs);

	  return el;
	}

	var diagramOriginModule = {
	  __init__: [
	    ConfigureOrigin
	  ]
	};

	var DEFAULT_OPTIONS$1 = {
	  offset: {
	    x: 150,
	    y: 75
	  },
	  tolerance: 50,
	  alignOnSave: true
	};

	var HIGHER_PRIORITY$5 = 1250;


	/**
	 * Moves diagram contents to the origin + offset,
	 * optionally upon diagram save.
	 *
	 * @param {Object} config
	 * @param {didi.Injector} injector
	 * @param {EventBus} eventBus
	 * @param {CommandStack} commandStack
	 * @param {Canvas} canvas
	 * @param {Modeling} modeling
	 */
	function AlignToOrigin(config, injector, eventBus, commandStack, canvas, modeling) {

	  /**
	   * Return actual config with defaults applied.
	   */
	  function applyDefaults(config) {

	    var c = assign({}, DEFAULT_OPTIONS$1, config || {});

	    if (isNumber(c.offset)) {
	      c.offset = {
	        x: c.offset,
	        y: c.offset
	      };
	    }

	    return c;
	  }

	  config = applyDefaults(config);

	  /**
	   * Compute adjustment given the specified diagram origin.
	   *
	   * @param {Point} origin
	   *
	   * @return {Point} adjustment
	   */
	  function computeAdjustment(origin, config) {

	    var offset = config.offset,
	        tolerance = config.tolerance;

	    var adjustment = {};

	    [ 'x', 'y' ].forEach(function(axis) {

	      var delta = -origin[axis] + offset[axis];

	      var gridSnapping = injector.get('gridSnapping', false);

	      if (gridSnapping) {
	        delta = quantize$1(delta, gridSnapping.getGridSpacing());
	      }

	      adjustment[axis] = Math.abs(delta) < tolerance ? 0 : delta;
	    });

	    return adjustment;
	  }


	  /**
	   * Align the diagram content to the origin.
	   *
	   * @param {Object} options
	   */
	  function align() {

	    var bounds = canvas.viewbox().inner;

	    var elements = canvas.getRootElement().children;

	    var delta = computeAdjustment(bounds, config);

	    if (delta.x === 0 && delta.y === 0) {
	      return;
	    }

	    commandStack.execute('elements.alignToOrigin', {
	      elements: elements,
	      delta: delta
	    });
	  }


	  /**
	   * Setup align on save functionality
	   */
	  function bindOnSave() {
	    // nested editors expose _parent to access the
	    // save responsible entity
	    var parent = injector.get('_parent', false);

	    var localEvents = eventBus;

	    var parentEvents = parent && parent._eventBus;

	    (parentEvents || localEvents).on('saveXML.start', HIGHER_PRIORITY$5, align);

	    if (parentEvents) {

	      // unregister for saveXML.start
	      localEvents.on('diagram.destroy', function() {
	        parentEvents.off('saveXML.start', align);
	      });
	    }
	  }


	  /**
	   * Create a function that compensates the element movement
	   * by moving applying the delta in the given direction.
	   */
	  function movementCompensator(direction) {

	    /**
	     * Handler to executed
	     */
	    return function(context) {

	      // adjust canvas after the commandstack got changed
	      eventBus.once('commandStack.changed', function() {

	        var delta = context.delta;
	        var scale = canvas.viewbox().scale;

	        canvas.scroll({
	          dx: direction * delta.x * scale,
	          dy: direction * delta.y * scale
	        });
	      });
	    };
	  }

	  // command registration

	  /**
	   * A command handler that compensates the element movement
	   * by applying the inverse move operation on the canvas.
	   */
	  commandStack.register('elements.alignToOrigin', {

	    preExecute: function(context) {
	      var delta = context.delta,
	          elements = context.elements;

	      modeling.moveElements(elements, delta);
	    },

	    execute: movementCompensator(-1),
	    revert: movementCompensator(1)
	  });

	  // setup

	  if (config.alignOnSave) {
	    bindOnSave();
	  }

	  // API

	  this.align = align;
	  this.computeAdjustment = computeAdjustment;

	  // internal debugging purposes
	  this._config = config;
	}

	AlignToOrigin.$inject = [
	  'config.alignToOrigin',
	  'injector',
	  'eventBus',
	  'commandStack',
	  'canvas',
	  'modeling'
	];


	// helpers /////////////////////////

	function quantize$1(value, quantum, fn) {
	  if (!fn) {
	    fn = 'round';
	  }

	  return Math[ fn ](value / quantum) * quantum;
	}

	var alignToOriginModule = {
	  __init__: [ 'alignToOrigin' ],
	  alignToOrigin: [ 'type', AlignToOrigin ]
	};

	/**
	 * Fix bpmn:Process#isExecutable to always be set to either
	 * true or false after edit.
	 *
	 * This is an initializer that may be passed to a modules
	 * __init__ block.
	 *
	 * @param {EventBus} eventBus
	 */
	function fixIsExecutable(eventBus) {

	  function fixIfProcess(element) {

	    // exclude labels
	    if (element.labelTarget) {
	      return;
	    }

	    var bo = getBusinessObject(element);

	    if (is$1(bo, 'bpmn:Participant')) {
	      bo = bo.processRef;
	    }

	    if (is$1(bo, 'bpmn:Process')) {
	      bo.isExecutable = !!bo.isExecutable;
	    }
	  }

	  eventBus.on([ 'shape.added', 'root.added' ], function(event) {
	    fixIfProcess(event.element);
	  });

	  eventBus.on('elements.changed', function(event) {

	    var elements = event.elements;

	    elements.forEach(function(element) {
	      fixIfProcess(element);
	    });

	  });
	}

	fixIsExecutable.$inject = [ 'eventBus' ];

	var ExecutableFixModule = {
	  __init__: [
	    fixIsExecutable
	  ]
	};

	/**
	 * Similar to the bpmn-js/lib/import/Importer we emit
	 * import life-cycle events:
	 *
	 * * signavio.import.render.start
	 * * signavio.import.render.complete
	 * * signavio.import.done
	 */
	class ImportElementsHandler {

	  constructor(
	      eventBus, bpmnImporter, bpmnjs,
	      canvas, modeling, translate) {

	    this._eventBus = eventBus;
	    this._bpmnImporter = bpmnImporter;
	    this._bpmnjs = bpmnjs;
	    this._canvas = canvas;
	    this._modeling = modeling;
	    this._translate = translate;
	  }

	  execute(context) {
	    var self = this;

	    var eventBus = this._eventBus;

	    var subProcessElement = context.subProcess,
	        subProcessDiagram = context.subProcessDiagram;

	    var warnings = [];

	    var visitor = {

	      /**
	         * {ModdleElement} addedElement - Business object.
	         * {<djs.moddle.shape>} - Diagram shape.
	         */
	      element: function(element, parentShape) {
	        if (!context.cached) {
	          context.cached = {};
	        }

	        // use cached element on CommandStack#redo
	        var cachedElement = context.cached[element.id];

	        if (cachedElement) {
	          if (cachedElement.label) {
	            self._canvas.addShape(cachedElement.label, parentShape);
	          }

	          if (cachedElement.waypoints) {
	            return self._canvas.addConnection(cachedElement, parentShape);
	          } else {
	            return self._canvas.addShape(cachedElement, parentShape);
	          }
	        }

	        var addedElement = self._bpmnImporter.add(element, parentShape);

	        context.cached[addedElement.id] = addedElement;

	        return addedElement;
	      },

	      error: function(message, context) {
	        warnings.push({ message: message, context: context });
	      }

	    };

	    var walker = new BpmnTreeWalker(visitor, this._translate);

	    var plane = subProcessDiagram.plane,
	        planeElements = plane.planeElement;

	    // (1) register DI first
	    planeElements.forEach(function(planeElement) {
	      walker.registerDi(planeElement);
	    });

	    // (2) move DI
	    moveDI(subProcessDiagram, this.findDiagram(this._canvas.getRootElement().id));


	    var subProcess = getBusinessObject(subProcessElement);

	    eventBus.fire('signavio.import.render.start', {
	      subProcess: subProcess
	    });

	    var error;

	    // (3) try to import
	    try {
	      walker.handleSubProcess(subProcess, subProcessElement);

	      // must be called afterwards
	      walker.handleDeferred();
	    } catch (e) {
	      error = e;
	    }

	    eventBus.fire('signavio.import.render.complete', {
	      error: error,
	      subProcess: subProcess,
	      warnings: warnings
	    });

	    eventBus.fire('signavio.import.done', {
	      error: error,
	      subProcess: subProcess,
	      warnings: warnings
	    });
	  }


	  postExecute(context) {
	    var subProcess = context.subProcess;

	    var visibleElements = filterVisible$1(subProcess.children);

	    var visibleBBox = computeChildrenBBox(visibleElements);

	    var visibleBBoxMid = {
	      x: visibleBBox.x + visibleBBox.width / 2,
	      y: visibleBBox.y + visibleBBox.height / 2
	    };

	    var subProcessMid = {
	      x: subProcess.x + subProcess.width / 2,
	      y: subProcess.y + subProcess.height / 2
	    };

	    var delta = {
	      x: subProcessMid.x - visibleBBoxMid.x,
	      y: subProcessMid.y - visibleBBoxMid.y
	    };

	    // move elements to an appropriate position
	    this._modeling.moveElements(subProcess.children, delta, subProcess);
	  }


	  revert(context) {
	    var self = this;

	    function deleteElements(elements) {
	      saveClear(elements, function(element) {
	        deleteElement(element);
	      });
	    }

	    function deleteElement(element) {
	      if (element.waypoints) {
	        self._canvas.removeConnection(element);
	      } else {
	        self._canvas.removeShape(element);
	      }
	    }

	    var subProcess = context.subProcess,
	        targetDiagram = context.subProcessDiagram;

	    var sourceDiagram = this.findDiagram(this._canvas.getRootElement().id);

	    var sourcePlaneElements = (
	      sourceDiagram.plane.planeElement.filter(function(element) {
	        return hasParentWithId(element, subProcess.id);
	      })
	    );

	    // (1) remove DI binding
	    sourcePlaneElements.forEach(function(sourcePlaneElement) {
	      delete sourcePlaneElement.bpmnElement.di;
	    });

	    // (2) move DI (but only children of subProcess)
	    moveDI(sourceDiagram, targetDiagram, sourcePlaneElements);

	    // (3) delete children
	    if (subProcess.children && subProcess.children.length) {
	      deleteElements(subProcess.children);
	    }
	  }

	  findDiagram(id) {
	    var diagrams = this._bpmnjs.getDefinitions().diagrams;

	    return find(diagrams, function(diagram) {
	      const plane = diagram.plane,
	            bpmnElement = plane.bpmnElement;

	      return bpmnElement.id === id;
	    });
	  }

	}

	ImportElementsHandler.$inject = [
	  'eventBus',
	  'bpmnImporter',
	  'bpmnjs',
	  'canvas',
	  'modeling',
	  'translate'
	];


	// helpers ///////////

	/**
	 * Move DI elements from one bpmndi:BPMNDiagram to another.
	 *
	 * @param {Object} sourceDiagram
	 * @param {Object} targetDiagram
	 * @param {Array} sourcePlaneElements - Optional list of elements to move.
	 * If not specified, all elements will be moved.
	 */
	function moveDI(sourceDiagram, targetDiagram, sourcePlaneElements) {
	  sourcePlaneElements = sourcePlaneElements || sourceDiagram.plane.planeElement;

	  var targetPlaneElements = targetDiagram.plane.planeElement;

	  // (1) add to target plane
	  sourcePlaneElements.forEach(function(sourcePlaneElement) {
	    add$1(targetPlaneElements, sourcePlaneElement);
	  });

	  // (2) remove from source plane
	  sourcePlaneElements.slice().forEach(function(sourcePlaneElement) {
	    remove$2(sourceDiagram.plane.planeElement, sourcePlaneElement);

	    sourcePlaneElement.$parent = targetDiagram.plane;
	  });
	}

	function hasParentWithId(planeElement, parentId) {
	  while (planeElement.bpmnElement && planeElement.bpmnElement.$parent) {
	    if (planeElement.bpmnElement.$parent.id === parentId) {
	      return true;
	    }

	    planeElement = planeElement.bpmnElement.$parent;
	  }

	  return false;
	}

	function filterVisible$1(elements) {
	  return elements.filter(function(e) {
	    return !e.hidden;
	  });
	}

	class DeleteSubProcessHandler {

	  constructor(
	      bpmnFactory, bpmnImporter, bpmnjs,
	      canvas, translate) {

	    this._bpmnFactory = bpmnFactory;
	    this._bpmnImporter = bpmnImporter;
	    this._bpmnjs = bpmnjs;
	    this._canvas = canvas;
	    this._translate = translate;
	  }

	  execute(context) {
	    var self = this;

	    function deleteElements(elements) {
	      saveClear(elements, function(element) {
	        deleteElement(element);
	      });
	    }

	    function deleteElement(element) {
	      if (element.children && element.children.length) {
	        element.children.slice().forEach(deleteElement);
	      }

	      if (element.waypoints) {
	        self._canvas.removeConnection(element);
	      } else {
	        self._canvas.removeShape(element);
	      }
	    }

	    var subProcess = context.subProcess,
	        targetDiagram = context.subProcessDiagram;

	    // on redo created diagram needs to be added
	    if (!this.findDiagram(subProcess.id)) {

	      // on do diagram needs to be created and added
	      if (!targetDiagram) {
	        targetDiagram = this._bpmnFactory.create('bpmndi:BPMNDiagram', {
	          plane: this._bpmnFactory.createDiPlane(getBusinessObject(subProcess))
	        });

	        // save for revert
	        context.created = true;
	        context.subProcessDiagram = targetDiagram;
	      }

	      var definitions = this._bpmnjs.getDefinitions(),
	          diagrams = definitions.diagrams;

	      add$1(diagrams, targetDiagram);
	    }

	    var sourceDiagram = this.findDiagram(this._canvas.getRootElement().id);

	    var sourcePlaneElements = (
	      sourceDiagram.plane.planeElement.filter(function(element) {
	        return hasParentWithId$1(element, subProcess.id);
	      })
	    );

	    // (1) remove DI binding
	    sourcePlaneElements.forEach(function(sourcePlaneElement) {
	      delete sourcePlaneElement.bpmnElement.di;
	    });

	    // (2) move DI (but only children of subProcess)
	    moveDI$1(sourceDiagram, targetDiagram, sourcePlaneElements);

	    // (3) delete children
	    if (subProcess.children && subProcess.children.length) {
	      deleteElements(subProcess.children);
	    }
	  }

	  revert(context) {
	    var self = this;

	    var subProcess = context.subProcess,
	        subProcessDiagram = context.subProcessDiagram,
	        created = context.created;

	    var warnings = [];

	    var visitor = {

	      element: function(element, parentShape) {
	        return self._bpmnImporter.add(element, parentShape);
	      },

	      error: function(message, context) {
	        warnings.push({ message: message, context: context });
	      }

	    };

	    var walker = new BpmnTreeWalker(visitor, this._translate);

	    var plane = subProcessDiagram.plane,
	        planeElements = plane.planeElement;

	    // (1) register DI first
	    planeElements.forEach(function(planeElement) {
	      walker.registerDi(planeElement);
	    });

	    // (2) move DI
	    moveDI$1(subProcessDiagram, this.findDiagram(this._canvas.getRootElement().id));

	    // (3) delete bpmndi:BPMNDiagram if created
	    if (created) {
	      var definitions = this._bpmnjs.getDefinitions(),
	          diagrams = definitions.diagrams;

	      remove$2(diagrams, subProcessDiagram);
	    }

	    // (4) try to import
	    try {
	      walker.handleSubProcess(getBusinessObject(subProcess), subProcess);

	      // must be called afterwards
	      walker.handleDeferred();
	    } catch (e) {

	      // TODO(philippfromme): handle
	      console.error(e);
	    }

	    if (warnings.length) {

	      // TODO(philippfromme): handle
	      console.warn(warnings);
	    }
	  }

	  findDiagram(id) {
	    var diagrams = this._bpmnjs.getDefinitions().diagrams;

	    return find(diagrams, function(diagram) {
	      const plane = diagram.plane,
	            bpmnElement = plane.bpmnElement;

	      return bpmnElement.id === id;
	    });
	  }

	}

	DeleteSubProcessHandler.$inject = [
	  'bpmnFactory',
	  'bpmnImporter',
	  'bpmnjs',
	  'canvas',
	  'translate'
	];

	// helpers ///////////

	/**
	 * Move DI elements from one bpmndi:BPMNDiagram to another.
	 *
	 * @param {Object} sourceDiagram
	 * @param {Object} targetDiagram
	 * @param {Array} sourcePlaneElements - Optional list of elements to move.
	 * If not specified, all elements will be moved.
	 */
	function moveDI$1(sourceDiagram, targetDiagram, sourcePlaneElements) {
	  sourcePlaneElements = sourcePlaneElements || sourceDiagram.plane.planeElement;

	  var targetPlaneElements = targetDiagram.plane.get('planeElement');

	  // (1) add to target plane
	  sourcePlaneElements.forEach(function(sourcePlaneElement) {
	    add$1(targetPlaneElements, sourcePlaneElement);
	  });

	  // (2) remove from source plane
	  sourcePlaneElements.slice().forEach(function(sourcePlaneElement) {
	    remove$2(sourceDiagram.plane.planeElement, sourcePlaneElement);

	    sourcePlaneElement.$parent = targetDiagram.plane;
	  });
	}

	function hasParentWithId$1(planeElement, parentId) {
	  while (planeElement.bpmnElement && planeElement.bpmnElement.$parent) {
	    if (planeElement.bpmnElement.$parent.id === parentId) {
	      return true;
	    }

	    planeElement = planeElement.bpmnElement.$parent;
	  }

	  return false;
	}

	const HIGH_PRIORITY$j = 2000;


	class SignavioBehavior extends CommandInterceptor {

	  constructor(
	      bpmnjs, bpmnImporter, canvas,
	      commandStack, eventBus, modeling,
	      translate) {

	    super(eventBus);

	    this._bpmnjs = bpmnjs;

	    commandStack.registerHandler(
	      'signavioCompat.importSubProcess',
	      ImportElementsHandler
	    );

	    commandStack.registerHandler(
	      'signavioCompat.deleteSubProcess',
	      DeleteSubProcessHandler
	    );

	    function isSignavio() {
	      const $attrs = bpmnjs.getDefinitions().$attrs;

	      return find($attrs, function(attr) {
	        return attr === 'http://www.signavio.com';
	      });
	    }


	    this.postExecuted([ 'shape.toggleCollapse' ], HIGH_PRIORITY$j, (event) => {
	      if (!isSignavio()) {
	        return;
	      }

	      const shape = event.context.shape;

	      if (!is$1(shape, 'bpmn:SubProcess')) {
	        return;
	      }

	      var context;

	      if (!shape.collapsed) {

	        // expand
	        const diagram = this.findDiagram(shape.id);

	        if (!diagram) {
	          return;
	        }

	        context = {
	          subProcess: shape,
	          subProcessDiagram: diagram
	        };

	        commandStack.execute('signavioCompat.importSubProcess', context);
	      } else {

	        // collapse
	        context = {
	          subProcess: shape,
	          subProcessDiagram: this.findDiagram(shape.id)
	        };

	        commandStack.execute('signavioCompat.deleteSubProcess', context);
	      }
	    });

	  }

	  findDiagram(id) {
	    var diagrams = this._bpmnjs.getDefinitions().diagrams;

	    return find(diagrams, function(diagram) {
	      const plane = diagram.plane,
	            bpmnElement = plane.bpmnElement;

	      return bpmnElement.id === id;
	    });
	  }

	}

	SignavioBehavior.$inject = [
	  'bpmnjs',
	  'bpmnImporter',
	  'canvas',
	  'commandStack',
	  'eventBus',
	  'modeling',
	  'translate'
	];

	var signavioCompatModule = {
	  __init__: [
	    'signavioBehavior'
	  ],
	  signavioBehavior: [ 'type', SignavioBehavior ]
	};

	var REPLACE_WITH_COLLAPSED = 'replace-with-collapsed-subprocess',
	    REPLACE_WITH_EXPANDED = 'replace-with-expanded-subprocess';


	function DisabledCollapsedSubprocessPopupProvider(popupMenu, bpmnReplace, translate) {
	  popupMenu.registerProvider('bpmn-replace', this);

	  this._bpmnReplace = bpmnReplace;
	  this._translate = translate;
	}

	DisabledCollapsedSubprocessPopupProvider.$inject = [
	  'popupMenu',
	  'bpmnReplace',
	  'translate'
	];

	/**
	 * Get all entries from original bpmn-js provider minus the ones that allow to model
	 * collapsed subprocess.
	 */
	DisabledCollapsedSubprocessPopupProvider.prototype.getPopupMenuEntries = function(element) {
	  var bpmnReplace = this._bpmnReplace,
	      translate = this._translate,
	      expandSubProcess = {
	        'expand-subprocess': {
	          className: 'bpmn-icon-subprocess-expanded',
	          label: translate('Expand (not reversible)'),
	          action: function() {
	            bpmnReplace.replaceElement(element, {
	              type: 'bpmn:SubProcess',
	              isExpanded: true
	            });
	          }
	        }
	      };

	  return function(entries) {

	    if (isTask(element)) {
	      delete entries[REPLACE_WITH_EXPANDED];
	      delete entries[REPLACE_WITH_COLLAPSED];

	      entries['replace-with-subprocess'] = {
	        className: 'bpmn-icon-subprocess-collapsed',
	        label: translate('Sub Process'),
	        action: function() {
	          bpmnReplace.replaceElement(element, {
	            type: 'bpmn:SubProcess',
	            isExpanded: false
	          });
	        }
	      };

	      return entries;
	    }

	    if (isSubProcess$1(element) && isExpanded(element)) {
	      delete entries[REPLACE_WITH_COLLAPSED];

	      return entries;
	    }

	    if (isSubProcess$1(element) && !isExpanded(element)) {
	      if (hasChildren(element)) {
	        return expandSubProcess;
	      }

	      delete entries[REPLACE_WITH_COLLAPSED];
	      delete entries[REPLACE_WITH_EXPANDED];

	      return assign(entries, expandSubProcess);
	    }

	    return entries;
	  };
	};


	// helper /////
	function isTask(element) {
	  return is$1(element, 'bpmn:Task');
	}

	function isSubProcess$1(element) {
	  return is$1(element, 'bpmn:SubProcess') &&
	    !is$1(element, 'bpmn:Transaction') &&
	    !isEventSubProcess(element);
	}

	function hasChildren(element) {
	  return element.children && element.children.length;
	}

	var DisabledCollapsedSubprocessPopupProviderModule = {
	  __depends__: [
	    'popupMenu',
	    'bpmnReplace'
	  ],
	  __init__: [ 'disabledCollapsedSubprocessPopupProvider' ],
	  disabledCollapsedSubprocessPopupProvider: [ 'type', DisabledCollapsedSubprocessPopupProvider ]
	};

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	var _arrayEach = arrayEach;

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	var _createBaseFor = createBaseFor;

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = _createBaseFor();

	var _baseFor = baseFor;

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	var _baseTimes = baseTimes;

	/** Detect free variable `global` from Node.js. */

	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = _freeGlobal || freeSelf || Function('return this')();

	var _root = root;

	/** Built-in value references. */
	var Symbol = _root.Symbol;

	var _Symbol = Symbol;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty$2.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString$1.call(value);
	}

	var _objectToString = objectToString;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag$1 && symToStringTag$1 in Object(value))
	    ? _getRawTag(value)
	    : _objectToString(value);
	}

	var _baseGetTag = baseGetTag;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
	}

	var _baseIsArguments = baseIsArguments;

	/** Used for built-in method references. */
	var objectProto$2 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto$2.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
	  return isObjectLike_1(value) && hasOwnProperty$3.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	var isArguments_1 = isArguments;

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray$3 = Array.isArray;

	var isArray_1 = isArray$3;

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	var stubFalse_1 = stubFalse;

	var isBuffer_1 = createCommonjsModule(function (module, exports) {
	/** Detect free variable `exports`. */
	var freeExports =  exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? _root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse_1;

	module.exports = isBuffer;
	});

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	var _isIndex = isIndex;

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER$1 = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
	}

	var isLength_1 = isLength;

	/** `Object#toString` result references. */
	var argsTag$1 = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike_1(value) &&
	    isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
	}

	var _baseIsTypedArray = baseIsTypedArray;

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	var _baseUnary = baseUnary;

	var _nodeUtil = createCommonjsModule(function (module, exports) {
	/** Detect free variable `exports`. */
	var freeExports =  exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && _freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;
	});

	/* Node.js helper references. */
	var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

	var isTypedArray_1 = isTypedArray;

	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto$3.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray_1(value),
	      isArg = !isArr && isArguments_1(value),
	      isBuff = !isArr && !isArg && isBuffer_1(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? _baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty$4.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           _isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _arrayLikeKeys = arrayLikeKeys;

	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$4;

	  return value === proto;
	}

	var _isPrototype = isPrototype;

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	var _overArg = overArg;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = _overArg(Object.keys, Object);

	var _nativeKeys = nativeKeys;

	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$5 = objectProto$5.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!_isPrototype(object)) {
	    return _nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty$5.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	var _baseKeys = baseKeys;

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject$1(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject$1;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag$1 = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction$1(value) {
	  if (!isObject_1(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = _baseGetTag(value);
	  return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction$1;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength_1(value.length) && !isFunction_1(value);
	}

	var isArrayLike_1 = isArrayLike;

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys$2(object) {
	  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
	}

	var keys_1 = keys$2;

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && _baseFor(object, iteratee, keys_1);
	}

	var _baseForOwn = baseForOwn;

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike_1(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	var _createBaseEach = createBaseEach;

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = _createBaseEach(_baseForOwn);

	var _baseEach = baseEach;

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity$1(value) {
	  return value;
	}

	var identity_1 = identity$1;

	/**
	 * Casts `value` to `identity` if it's not a function.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Function} Returns cast function.
	 */
	function castFunction(value) {
	  return typeof value == 'function' ? value : identity_1;
	}

	var _castFunction = castFunction;

	/**
	 * Iterates over elements of `collection` and invokes `iteratee` for each element.
	 * The iteratee is invoked with three arguments: (value, index|key, collection).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length"
	 * property are iterated like arrays. To avoid this behavior use `_.forIn`
	 * or `_.forOwn` for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @alias each
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 * @see _.forEachRight
	 * @example
	 *
	 * _.forEach([1, 2], function(value) {
	 *   console.log(value);
	 * });
	 * // => Logs `1` then `2`.
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */
	function forEach$2(collection, iteratee) {
	  var func = isArray_1(collection) ? _arrayEach : _baseEach;
	  return func(collection, _castFunction(iteratee));
	}

	var forEach_1 = forEach$2;

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = (function() {
	  function object() {}
	  return function(proto) {
	    if (!isObject_1(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object;
	    object.prototype = undefined;
	    return result;
	  };
	}());

	var _baseCreate = baseCreate;

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	var _listCacheClear = listCacheClear;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	var eq_1 = eq;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq_1(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	var _assocIndexOf = assocIndexOf;

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	var _listCacheDelete = listCacheDelete;

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	var _listCacheGet = listCacheGet;

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return _assocIndexOf(this.__data__, key) > -1;
	}

	var _listCacheHas = listCacheHas;

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	var _listCacheSet = listCacheSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = _listCacheClear;
	ListCache.prototype['delete'] = _listCacheDelete;
	ListCache.prototype.get = _listCacheGet;
	ListCache.prototype.has = _listCacheHas;
	ListCache.prototype.set = _listCacheSet;

	var _ListCache = ListCache;

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new _ListCache;
	  this.size = 0;
	}

	var _stackClear = stackClear;

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	var _stackDelete = stackDelete;

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	var _stackGet = stackGet;

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	var _stackHas = stackHas;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = _root['__core-js_shared__'];

	var _coreJsData = coreJsData;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	var _isMasked = isMasked;

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	var _toSource = toSource;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto$1 = Function.prototype,
	    objectProto$6 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$6 = objectProto$6.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString$1.call(hasOwnProperty$6).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject_1(value) || _isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(_toSource(value));
	}

	var _baseIsNative = baseIsNative;

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	var _getValue = getValue;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = _getValue(object, key);
	  return _baseIsNative(value) ? value : undefined;
	}

	var _getNative = getNative;

	/* Built-in method references that are verified to be native. */
	var Map = _getNative(_root, 'Map');

	var _Map = Map;

	/* Built-in method references that are verified to be native. */
	var nativeCreate = _getNative(Object, 'create');

	var _nativeCreate = nativeCreate;

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
	  this.size = 0;
	}

	var _hashClear = hashClear;

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _hashDelete = hashDelete;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto$7 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$7 = objectProto$7.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (_nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty$7.call(data, key) ? data[key] : undefined;
	}

	var _hashGet = hashGet;

	/** Used for built-in method references. */
	var objectProto$8 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$8 = objectProto$8.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$8.call(data, key);
	}

	var _hashHas = hashHas;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
	  return this;
	}

	var _hashSet = hashSet;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = _hashClear;
	Hash.prototype['delete'] = _hashDelete;
	Hash.prototype.get = _hashGet;
	Hash.prototype.has = _hashHas;
	Hash.prototype.set = _hashSet;

	var _Hash = Hash;

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new _Hash,
	    'map': new (_Map || _ListCache),
	    'string': new _Hash
	  };
	}

	var _mapCacheClear = mapCacheClear;

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	var _isKeyable = isKeyable;

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return _isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	var _getMapData = getMapData;

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = _getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _mapCacheDelete = mapCacheDelete;

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return _getMapData(this, key).get(key);
	}

	var _mapCacheGet = mapCacheGet;

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return _getMapData(this, key).has(key);
	}

	var _mapCacheHas = mapCacheHas;

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = _getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	var _mapCacheSet = mapCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = _mapCacheClear;
	MapCache.prototype['delete'] = _mapCacheDelete;
	MapCache.prototype.get = _mapCacheGet;
	MapCache.prototype.has = _mapCacheHas;
	MapCache.prototype.set = _mapCacheSet;

	var _MapCache = MapCache;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof _ListCache) {
	    var pairs = data.__data__;
	    if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new _MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	var _stackSet = stackSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new _ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = _stackClear;
	Stack.prototype['delete'] = _stackDelete;
	Stack.prototype.get = _stackGet;
	Stack.prototype.has = _stackHas;
	Stack.prototype.set = _stackSet;

	var _Stack = Stack;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED$2);
	  return this;
	}

	var _setCacheAdd = setCacheAdd;

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	var _setCacheHas = setCacheHas;

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new _MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
	SetCache.prototype.has = _setCacheHas;

	var _SetCache = SetCache;

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	var _arraySome = arraySome;

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	var _cacheHas = cacheHas;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Check that cyclic values are equal.
	  var arrStacked = stack.get(array);
	  var othStacked = stack.get(other);
	  if (arrStacked && othStacked) {
	    return arrStacked == other && othStacked == array;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!_arraySome(other, function(othValue, othIndex) {
	            if (!_cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	var _equalArrays = equalArrays;

	/** Built-in value references. */
	var Uint8Array = _root.Uint8Array;

	var _Uint8Array = Uint8Array;

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	var _mapToArray = mapToArray;

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	var _setToArray = setToArray;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$1 = 1,
	    COMPARE_UNORDERED_FLAG$1 = 2;

	/** `Object#toString` result references. */
	var boolTag$1 = '[object Boolean]',
	    dateTag$1 = '[object Date]',
	    errorTag$1 = '[object Error]',
	    mapTag$1 = '[object Map]',
	    numberTag$1 = '[object Number]',
	    regexpTag$1 = '[object RegExp]',
	    setTag$1 = '[object Set]',
	    stringTag$1 = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag$1 = '[object ArrayBuffer]',
	    dataViewTag$1 = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag$1:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag$1:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag$1:
	    case dateTag$1:
	    case numberTag$1:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq_1(+object, +other);

	    case errorTag$1:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag$1:
	    case stringTag$1:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag$1:
	      var convert = _mapToArray;

	    case setTag$1:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
	      convert || (convert = _setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG$1;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	var _equalByTag = equalByTag;

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	var _arrayPush = arrayPush;

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
	}

	var _baseGetAllKeys = baseGetAllKeys;

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	var _arrayFilter = arrayFilter;

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	var stubArray_1 = stubArray;

	/** Used for built-in method references. */
	var objectProto$9 = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return _arrayFilter(nativeGetSymbols(object), function(symbol) {
	    return propertyIsEnumerable$1.call(object, symbol);
	  });
	};

	var _getSymbols = getSymbols;

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return _baseGetAllKeys(object, keys_1, _getSymbols);
	}

	var _getAllKeys = getAllKeys;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$2 = 1;

	/** Used for built-in method references. */
	var objectProto$a = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$9 = objectProto$a.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
	      objProps = _getAllKeys(object),
	      objLength = objProps.length,
	      othProps = _getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty$9.call(other, key))) {
	      return false;
	    }
	  }
	  // Check that cyclic values are equal.
	  var objStacked = stack.get(object);
	  var othStacked = stack.get(other);
	  if (objStacked && othStacked) {
	    return objStacked == other && othStacked == object;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	var _equalObjects = equalObjects;

	/* Built-in method references that are verified to be native. */
	var DataView = _getNative(_root, 'DataView');

	var _DataView = DataView;

	/* Built-in method references that are verified to be native. */
	var Promise$1 = _getNative(_root, 'Promise');

	var _Promise = Promise$1;

	/* Built-in method references that are verified to be native. */
	var Set = _getNative(_root, 'Set');

	var _Set = Set;

	/* Built-in method references that are verified to be native. */
	var WeakMap = _getNative(_root, 'WeakMap');

	var _WeakMap = WeakMap;

	/** `Object#toString` result references. */
	var mapTag$2 = '[object Map]',
	    objectTag$1 = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag$2 = '[object Set]',
	    weakMapTag$1 = '[object WeakMap]';

	var dataViewTag$2 = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = _toSource(_DataView),
	    mapCtorString = _toSource(_Map),
	    promiseCtorString = _toSource(_Promise),
	    setCtorString = _toSource(_Set),
	    weakMapCtorString = _toSource(_WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = _baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
	    (_Map && getTag(new _Map) != mapTag$2) ||
	    (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
	    (_Set && getTag(new _Set) != setTag$2) ||
	    (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
	  getTag = function(value) {
	    var result = _baseGetTag(value),
	        Ctor = result == objectTag$1 ? value.constructor : undefined,
	        ctorString = Ctor ? _toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag$2;
	        case mapCtorString: return mapTag$2;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag$2;
	        case weakMapCtorString: return weakMapTag$1;
	      }
	    }
	    return result;
	  };
	}

	var _getTag = getTag;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$3 = 1;

	/** `Object#toString` result references. */
	var argsTag$2 = '[object Arguments]',
	    arrayTag$1 = '[object Array]',
	    objectTag$2 = '[object Object]';

	/** Used for built-in method references. */
	var objectProto$b = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$a = objectProto$b.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray_1(object),
	      othIsArr = isArray_1(other),
	      objTag = objIsArr ? arrayTag$1 : _getTag(object),
	      othTag = othIsArr ? arrayTag$1 : _getTag(other);

	  objTag = objTag == argsTag$2 ? objectTag$2 : objTag;
	  othTag = othTag == argsTag$2 ? objectTag$2 : othTag;

	  var objIsObj = objTag == objectTag$2,
	      othIsObj = othTag == objectTag$2,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer_1(object)) {
	    if (!isBuffer_1(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new _Stack);
	    return (objIsArr || isTypedArray_1(object))
	      ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
	    var objIsWrapped = objIsObj && hasOwnProperty$a.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty$a.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new _Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new _Stack);
	  return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	var _baseIsEqualDeep = baseIsEqualDeep;

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
	    return value !== value && other !== other;
	  }
	  return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	var _baseIsEqual = baseIsEqual;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$4 = 1,
	    COMPARE_UNORDERED_FLAG$2 = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new _Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	var _baseIsMatch = baseIsMatch;

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject_1(value);
	}

	var _isStrictComparable = isStrictComparable;

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys_1(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];

	    result[length] = [key, value, _isStrictComparable(value)];
	  }
	  return result;
	}

	var _getMatchData = getMatchData;

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	var _matchesStrictComparable = matchesStrictComparable;

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = _getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || _baseIsMatch(object, source, matchData);
	  };
	}

	var _baseMatches = baseMatches;

	/** `Object#toString` result references. */
	var symbolTag$1 = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag$1);
	}

	var isSymbol_1 = isSymbol;

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey$1(value, object) {
	  if (isArray_1(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol_1(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	var _isKey = isKey$1;

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || _MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = _MapCache;

	var memoize_1 = memoize;

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize_1(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	var _memoizeCapped = memoizeCapped;

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = _memoizeCapped(function(string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	var _stringToPath = stringToPath;

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	var _arrayMap = arrayMap;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray_1(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return _arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol_1(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	var _baseToString = baseToString;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString$2(value) {
	  return value == null ? '' : _baseToString(value);
	}

	var toString_1 = toString$2;

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray_1(value)) {
	    return value;
	  }
	  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
	}

	var _castPath = castPath;

	/** Used as references for various `Number` constants. */
	var INFINITY$1 = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol_1(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
	}

	var _toKey = toKey;

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = _castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[_toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	var _baseGet = baseGet;

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get$2(object, path, defaultValue) {
	  var result = object == null ? undefined : _baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	var get_1 = get$2;

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	var _baseHasIn = baseHasIn;

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = _castPath(path, object);

	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = _toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength_1(length) && _isIndex(key, length) &&
	    (isArray_1(object) || isArguments_1(object));
	}

	var _hasPath = hasPath;

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && _hasPath(object, path, _baseHasIn);
	}

	var hasIn_1 = hasIn;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$5 = 1,
	    COMPARE_UNORDERED_FLAG$3 = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (_isKey(path) && _isStrictComparable(srcValue)) {
	    return _matchesStrictComparable(_toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get_1(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn_1(object, path)
	      : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
	  };
	}

	var _baseMatchesProperty = baseMatchesProperty;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	var _baseProperty = baseProperty;

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return _baseGet(object, path);
	  };
	}

	var _basePropertyDeep = basePropertyDeep;

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
	}

	var property_1 = property;

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity_1;
	  }
	  if (typeof value == 'object') {
	    return isArray_1(value)
	      ? _baseMatchesProperty(value[0], value[1])
	      : _baseMatches(value);
	  }
	  return property_1(value);
	}

	var _baseIteratee = baseIteratee;

	/** Built-in value references. */
	var getPrototype = _overArg(Object.getPrototypeOf, Object);

	var _getPrototype = getPrototype;

	/**
	 * An alternative to `_.reduce`; this method transforms `object` to a new
	 * `accumulator` object which is the result of running each of its own
	 * enumerable string keyed properties thru `iteratee`, with each invocation
	 * potentially mutating the `accumulator` object. If `accumulator` is not
	 * provided, a new object with the same `[[Prototype]]` will be used. The
	 * iteratee is invoked with four arguments: (accumulator, value, key, object).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The custom accumulator value.
	 * @returns {*} Returns the accumulated value.
	 * @example
	 *
	 * _.transform([2, 3, 4], function(result, n) {
	 *   result.push(n *= n);
	 *   return n % 2 == 0;
	 * }, []);
	 * // => [4, 9]
	 *
	 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] }
	 */
	function transform$2(object, iteratee, accumulator) {
	  var isArr = isArray_1(object),
	      isArrLike = isArr || isBuffer_1(object) || isTypedArray_1(object);

	  iteratee = _baseIteratee(iteratee);
	  if (accumulator == null) {
	    var Ctor = object && object.constructor;
	    if (isArrLike) {
	      accumulator = isArr ? new Ctor : [];
	    }
	    else if (isObject_1(object)) {
	      accumulator = isFunction_1(Ctor) ? _baseCreate(_getPrototype(object)) : {};
	    }
	    else {
	      accumulator = {};
	    }
	  }
	  (isArrLike ? _arrayEach : _baseForOwn)(object, function(value, index, object) {
	    return iteratee(accumulator, value, index, object);
	  });
	  return accumulator;
	}

	var transform_1 = transform$2;

	var is$4 = require$$0$1.is;

	/**
	 * A handler that implements a BPMN 2.0 property update
	 * for business objects which are not represented in the
	 * diagram.
	 *
	 * This is useful in the context of the properties panel in
	 * order to update child elements of elements visible in
	 * the diagram.
	 *
	 * Example: perform an update of a specific event definition
	 * of an intermediate event.
	 *
	 * @class
	 * @constructor
	 */
	function UpdateBusinessObjectHandler(elementRegistry) {
	  this._elementRegistry = elementRegistry;
	}

	UpdateBusinessObjectHandler.$inject = [ 'elementRegistry' ];

	var UpdateBusinessObjectHandler_1 = UpdateBusinessObjectHandler;

	/**
	 * returns the root element
	 */
	function getRoot(businessObject) {
	  var parent = businessObject;
	  while (parent.$parent) {
	    parent = parent.$parent;
	  }
	  return parent;
	}

	function getProperties$1(businessObject, propertyNames) {
	  return transform_1(propertyNames, function(result, key) {
	    result[key] = businessObject.get(key);
	    return result;
	  }, {});
	}


	function setProperties$1(businessObject, properties) {
	  forEach_1(properties, function(value, key) {
	    businessObject.set(key, value);
	  });
	}


	// api /////////////////////////////////////////////

	/**
	 * Updates a business object with a list of new properties
	 *
	 * @method  UpdateBusinessObjectHandler#execute
	 *
	 * @param {Object} context
	 * @param {djs.model.Base} context.element the element which has a child business object updated
	 * @param {moddle.businessObject} context.businessObject the businessObject to update
	 * @param {Object} context.properties a list of properties to set on the businessObject
	 *
	 * @return {Array<djs.mode.Base>} the updated element
	 */
	UpdateBusinessObjectHandler.prototype.execute = function(context) {

	  var element = context.element,
	      businessObject = context.businessObject,
	      rootElements = getRoot(businessObject).rootElements,
	      referenceType = context.referenceType,
	      referenceProperty = context.referenceProperty,
	      changed = [ element ]; // this will not change any diagram-js elements

	  if (!element) {
	    throw new Error('element required');
	  }

	  if (!businessObject) {
	    throw new Error('businessObject required');
	  }

	  var properties = context.properties,
	      oldProperties = context.oldProperties || getProperties$1(businessObject, keys_1(properties));

	  // check if there the update needs an external element for reference
	  if (typeof referenceType !== 'undefined' && typeof referenceProperty !== 'undefined') {
	    forEach_1(rootElements, function(rootElement) {
	      if (is$4(rootElement, referenceType)) {
	        if (rootElement.id === properties[referenceProperty]) {
	          properties[referenceProperty] = rootElement;
	        }
	      }
	    });
	  }

	  // update properties
	  setProperties$1(businessObject, properties);

	  // store old values
	  context.oldProperties = oldProperties;
	  context.changed = changed;

	  // indicate changed on objects affected by the update
	  return changed;
	};

	/**
	 * Reverts the update
	 *
	 * @method  UpdateBusinessObjectHandler#revert
	 *
	 * @param {Object} context
	 *
	 * @return {djs.mode.Base} the updated element
	 */
	UpdateBusinessObjectHandler.prototype.revert = function(context) {

	  var oldProperties = context.oldProperties,
	      businessObject = context.businessObject;

	  // update properties
	  setProperties$1(businessObject, oldProperties);

	  return context.changed;
	};

	var ElementHelper = {};
	var ElementHelper_1 = ElementHelper;

	/**
	 * Creates a new element and set the parent to it
	 *
	 * @method ElementHelper#createElement
	 *
	 * @param {String} elementType of the new element
	 * @param {Object} properties of the new element in key-value pairs
	 * @param {moddle.object} parent of the new element
	 * @param {BpmnFactory} factory which creates the new element
	 *
	 * @returns {djs.model.Base} element which is created
	 */
	ElementHelper.createElement = function(elementType, properties, parent, factory) {
	  var element = factory.create(elementType, properties);
	  element.$parent = parent;

	  return element;
	};

	/**
	 * A handler capable of creating a new element under a provided parent
	 * and updating / creating a reference to it in one atomic action.
	 *
	 * @class
	 * @constructor
	 */
	function CreateAndReferenceElementHandler(elementRegistry, bpmnFactory) {
	  this._elementRegistry = elementRegistry;
	  this._bpmnFactory = bpmnFactory;
	}

	CreateAndReferenceElementHandler.$inject = [ 'elementRegistry', 'bpmnFactory' ];

	var CreateAndReferenceHandler = CreateAndReferenceElementHandler;


	// api ////////////////////

	/**
	 * Creates a new element under a provided parent and updates / creates a reference to it in
	 * one atomic action.
	 *
	 * @method  CreateAndReferenceElementHandler#execute
	 *
	 * @param {Object} context
	 * @param {djs.model.Base} context.element which is the context for the reference
	 * @param {moddle.referencingObject} context.referencingObject the object which creates the reference
	 * @param {String} context.referenceProperty the property of the referencingObject which makes the reference
	 * @param {moddle.newObject} context.newObject the new object to add
	 * @param {moddle.newObjectContainer} context.newObjectContainer the container for the new object
	 *
	 * @returns {Array<djs.mode.Base>} the updated element
	 */
	CreateAndReferenceElementHandler.prototype.execute = function(context) {

	  var referencingObject = ensureNotNull(context.referencingObject, 'referencingObject'),
	      referenceProperty = ensureNotNull(context.referenceProperty, 'referenceProperty'),
	      newObject = ensureNotNull(context.newObject, 'newObject'),
	      newObjectContainer = ensureNotNull(context.newObjectContainer, 'newObjectContainer'),
	      newObjectParent = ensureNotNull(context.newObjectParent, 'newObjectParent'),
	      changed = [ context.element ]; // this will not change any diagram-js elements

	  // create new object
	  var referencedObject = ElementHelper_1
	    .createElement(newObject.type, newObject.properties, newObjectParent, this._bpmnFactory);
	  context.referencedObject = referencedObject;

	  // add to containing list
	  newObjectContainer.push(referencedObject);

	  // adjust reference attribute
	  context.previousReference = referencingObject[referenceProperty];
	  referencingObject[referenceProperty] = referencedObject;

	  context.changed = changed;

	  // indicate changed on objects affected by the update
	  return changed;
	};

	/**
	 * Reverts the update
	 *
	 * @method  CreateAndReferenceElementHandler#revert
	 *
	 * @param {Object} context
	 *
	 * @returns {djs.mode.Base} the updated element
	 */
	CreateAndReferenceElementHandler.prototype.revert = function(context) {

	  var referencingObject = context.referencingObject,
	      referenceProperty = context.referenceProperty,
	      previousReference = context.previousReference,
	      referencedObject = context.referencedObject,
	      newObjectContainer = context.newObjectContainer;

	  // reset reference
	  referencingObject.set(referenceProperty, previousReference);

	  // remove new element
	  newObjectContainer.splice(newObjectContainer.indexOf(referencedObject), 1);

	  return context.changed;
	};



	// helpers //////////////

	function ensureNotNull(prop, name) {
	  if (!prop) {
	    throw new Error(name + ' required');
	  }
	  return prop;
	}

	/**
	 * A handler that implements a BPMN 2.0 property update
	 * for business objects which are not represented in the
	 * diagram.
	 *
	 * This is useful in the context of the properties panel in
	 * order to update child elements of elements visible in
	 * the diagram.
	 *
	 * Example: perform an update of a specific event definition
	 * of an intermediate event.
	 *
	 * @class
	 * @constructor
	 */
	function CreateBusinessObjectListHandler(elementRegistry, bpmnFactory) {
	  this._elementRegistry = elementRegistry;
	  this._bpmnFactory = bpmnFactory;
	}

	CreateBusinessObjectListHandler.$inject = [ 'elementRegistry', 'bpmnFactory' ];

	var CreateBusinessObjectListHandler_1 = CreateBusinessObjectListHandler;

	function ensureNotNull$1(prop, name) {
	  if (!prop) {
	    throw new Error(name + ' required');
	  }
	  return prop;

	}
	function ensureList(prop, name) {
	  if (!prop || Object.prototype.toString.call(prop) !== '[object Array]') {
	    throw new Error(name + ' needs to be a list');
	  }
	  return prop;
	}

	// api /////////////////////////////////////////////

	/**
	 * Creates a new element under a provided parent and updates / creates a reference to it in
	 * one atomic action.
	 *
	 * @method  CreateBusinessObjectListHandler#execute
	 *
	 * @param {Object} context
	 * @param {djs.model.Base} context.element which is the context for the reference
	 * @param {moddle.referencingObject} context.referencingObject the object which creates the reference
	 * @param {String} context.referenceProperty the property of the referencingObject which makes the reference
	 * @param {moddle.newObject} context.newObject the new object to add
	 * @param {moddle.newObjectContainer} context.newObjectContainer the container for the new object
	 *
	 * @return {Array<djs.mode.Base>} the updated element
	 */
	CreateBusinessObjectListHandler.prototype.execute = function(context) {

	  var currentObject = ensureNotNull$1(context.currentObject, 'currentObject'),
	      propertyName = ensureNotNull$1(context.propertyName, 'propertyName'),
	      newObjects = ensureList(context.newObjects, 'newObjects'),
	      changed = [ context.element ]; // this will not change any diagram-js elements


	  var childObjects = [];
	  var self = this;

	  // create new array of business objects
	  forEach_1(newObjects, function(obj) {
	    var element = ElementHelper_1.createElement(obj.type, obj.properties, currentObject, self._bpmnFactory);

	    childObjects.push(element);
	  });
	  context.childObject = childObjects;

	  // adjust array reference in the parent business object
	  context.previousChilds = currentObject[propertyName];
	  currentObject[propertyName] = childObjects;

	  context.changed = changed;

	  // indicate changed on objects affected by the update
	  return changed;
	};

	/**
	 * Reverts the update
	 *
	 * @method  CreateBusinessObjectListHandler#revert
	 *
	 * @param {Object} context
	 *
	 * @return {djs.mode.Base} the updated element
	 */
	CreateBusinessObjectListHandler.prototype.revert = function(context) {

	  var currentObject = context.currentObject,
	      propertyName = context.propertyName,
	      previousChilds = context.previousChilds;

	  // remove new element
	  currentObject.set(propertyName, previousChilds);

	  return context.changed;
	};

	/**
	 * A handler that implements a BPMN 2.0 property update
	 * for business object lists which are not represented in the
	 * diagram.
	 *
	 * This is useful in the context of the properties panel in
	 * order to update child elements of elements visible in
	 * the diagram.
	 *
	 * Example: perform an update of a specific event definition
	 * of an intermediate event.
	 *
	 * @class
	 * @constructor
	 */
	function UpdateBusinessObjectListHandler(elementRegistry, bpmnFactory) {
	  this._elementRegistry = elementRegistry;
	  this._bpmnFactory = bpmnFactory;
	}

	UpdateBusinessObjectListHandler.$inject = [ 'elementRegistry', 'bpmnFactory' ];

	var UpdateBusinessObjectListHandler_1 = UpdateBusinessObjectListHandler;

	function ensureNotNull$2(prop, name) {
	  if (!prop) {
	    throw new Error(name + 'required');
	  }
	  return prop;
	}

	// api /////////////////////////////////////////////

	/**
	 * Updates a element under a provided parent.
	 */
	UpdateBusinessObjectListHandler.prototype.execute = function(context) {

	  var currentObject = ensureNotNull$2(context.currentObject, 'currentObject'),
	      propertyName = ensureNotNull$2(context.propertyName, 'propertyName'),
	      updatedObjectList = context.updatedObjectList,
	      objectsToRemove = context.objectsToRemove || [],
	      objectsToAdd = context.objectsToAdd || [],
	      objectsToPrepend = context.objectsToPrepend || [],
	      changed = [ context.element], // this will not change any diagram-js elements
	      referencePropertyName;

	  if (context.referencePropertyName) {
	    referencePropertyName = context.referencePropertyName;
	  }

	  var objectList = currentObject[propertyName];

	  // adjust array reference in the parent business object
	  context.previousList = currentObject[propertyName];

	  if (updatedObjectList) {
	    currentObject[propertyName] = updatedObjectList;
	  } else {

	    // start with objects to prepend
	    var listCopy = objectsToPrepend.slice();

	    // remove all objects which should be removed
	    forEach_1(objectList, function(object) {
	      if (objectsToRemove.indexOf(object) == -1) {
	        listCopy.push(object);
	      }
	    });

	    // add all objects which should be added
	    listCopy = listCopy.concat(objectsToAdd);

	    // set property to new list
	    if (listCopy.length > 0 || !referencePropertyName) {

	      // as long as there are elements in the list update the list
	      currentObject[propertyName] = listCopy;
	    } else if (referencePropertyName) {

	      // remove the list when it is empty
	      var parentObject = currentObject.$parent;
	      parentObject.set(referencePropertyName, undefined);
	    }
	  }

	  context.changed = changed;

	  // indicate changed on objects affected by the update
	  return changed;
	};

	/**
	 * Reverts the update
	 *
	 * @method  CreateBusinessObjectListHandler#revert
	 *
	 * @param {Object} context
	 *
	 * @return {djs.mode.Base} the updated element
	 */
	UpdateBusinessObjectListHandler.prototype.revert = function(context) {

	  var currentObject = context.currentObject,
	      propertyName = context.propertyName,
	      previousList = context.previousList,
	      parentObject = currentObject.$parent;

	  if (context.referencePropertyName) {
	    parentObject.set(context.referencePropertyName, currentObject);
	  }

	  // remove new element
	  currentObject.set(propertyName, previousList);

	  return context.changed;
	};

	/**
	 * A handler that combines and executes multiple commands.
	 *
	 * All updates are bundled on the command stack and executed in one step.
	 * This also makes it possible to revert the changes in one step.
	 *
	 * Example use case: remove the camunda:formKey attribute and in addition
	 * add all form fields needed for the camunda:formData property.
	 *
	 * @class
	 * @constructor
	 */
	function MultiCommandHandler(commandStack) {
	  this._commandStack = commandStack;
	}

	MultiCommandHandler.$inject = [ 'commandStack' ];

	var MultiCommandHandler_1 = MultiCommandHandler;

	MultiCommandHandler.prototype.preExecute = function(context) {

	  var commandStack = this._commandStack;

	  forEach_1(context, function(command) {
	    commandStack.execute(command.cmd, command.context);
	  });
	};

	var HANDLERS = {
	  'properties-panel.update-businessobject': UpdateBusinessObjectHandler_1,
	  'properties-panel.create-and-reference': CreateAndReferenceHandler,
	  'properties-panel.create-businessobject-list': CreateBusinessObjectListHandler_1,
	  'properties-panel.update-businessobject-list': UpdateBusinessObjectListHandler_1,
	  'properties-panel.multi-command-executor': MultiCommandHandler_1
	};


	function CommandInitializer(eventBus, commandStack) {

	  eventBus.on('diagram.init', function() {
	    forEach_1(HANDLERS, function(handler, id) {
	      commandStack.registerHandler(id, handler);
	    });
	  });
	}

	CommandInitializer.$inject = [ 'eventBus', 'commandStack' ];

	var cmd = {
	  __init__: [ CommandInitializer ]
	};

	var require$$1 = /*@__PURE__*/getAugmentedNamespace(index_esm$2);

	var require$$2 = /*@__PURE__*/getAugmentedNamespace(index_esm);

	var domQuery = require$$1.query,
	    domClear = require$$1.clear,
	    domClasses = require$$1.classes,
	    is$5 = require$$0$1.is,
	    domify$1 = require$$1.domify,
	    Ids$1 = require$$2.default;

	var SPACE_REGEX = /\s/;

	// for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar
	var QNAME_REGEX = /^([a-z][\w-.]*:)?[a-z_][\w-.]*$/i;

	// for ID validation as per BPMN Schema (QName - Namespace)
	var ID_REGEX = /^[a-z_][\w-.]*$/i;

	var HTML_ESCAPE_MAP$1 = {
	  '&': '&amp;',
	  '<': '&lt;',
	  '>': '&gt;',
	  '"': '&quot;',
	  '\'': '&#39;'
	};

	function selectedOption(selectBox) {
	  if (selectBox.selectedIndex >= 0) {
	    return selectBox.options[selectBox.selectedIndex].value;
	  }
	}

	var selectedOption_1 = selectedOption;


	function selectedType(elementSyntax, inputNode) {
	  var typeSelect = domQuery(elementSyntax, inputNode);
	  return selectedOption(typeSelect);
	}

	var selectedType_1 = selectedType;


	/**
	 * Retrieve the root element the document this
	 * business object is contained in.
	 *
	 * @return {ModdleElement}
	 */
	function getRoot$1(businessObject) {
	  var parent = businessObject;
	  while (parent.$parent) {
	    parent = parent.$parent;
	  }
	  return parent;
	}

	var getRoot_1 = getRoot$1;


	/**
	 * filters all elements in the list which have a given type.
	 * removes a new list
	 */
	function filterElementsByType(objectList, type) {
	  var list = objectList || [];
	  var result = [];
	  forEach_1(list, function(obj) {
	    if (is$5(obj, type)) {
	      result.push(obj);
	    }
	  });
	  return result;
	}

	var filterElementsByType_1 = filterElementsByType;


	function findRootElementsByType(businessObject, referencedType) {
	  var root = getRoot$1(businessObject);

	  return filterElementsByType(root.rootElements, referencedType);
	}

	var findRootElementsByType_1 = findRootElementsByType;


	function removeAllChildren(domElement) {
	  while (domElement.firstChild) {
	    domElement.removeChild(domElement.firstChild);
	  }
	}

	var removeAllChildren_1 = removeAllChildren;


	/**
	 * adds an empty option to the list
	 */
	function addEmptyParameter(list) {
	  return list.push({ 'label': '', 'value': '', 'name': '' });
	}

	var addEmptyParameter_1 = addEmptyParameter;


	/**
	 * returns a dropdown option label depending on the defined event attributes
	 */
	function getOptionLabel(obj) {
	  var label = obj.name || '';

	  if (obj.errorCode)
	    label += ' (code=' + obj.errorCode + ')';
	  if (obj.escalationCode)
	    label += ' (code=' + obj.escalationCode + ')';

	  return label;
	}

	/**
	 * returns a list with all root elements for the given parameter 'referencedType'
	 */
	function refreshOptionsModel(businessObject, referencedType) {
	  var model = [];
	  var referableObjects = findRootElementsByType(businessObject, referencedType);
	  forEach_1(referableObjects, function(obj) {
	    model.push({
	      label: getOptionLabel(obj),
	      value: obj.id,
	      name: obj.name
	    });
	  });
	  return model;
	}

	var refreshOptionsModel_1 = refreshOptionsModel;


	/**
	 * fills the drop down with options
	 */
	function updateOptionsDropDown(domSelector, businessObject, referencedType, entryNode) {
	  var options = refreshOptionsModel(businessObject, referencedType);
	  addEmptyParameter(options);
	  var selectBox = domQuery(domSelector, entryNode);
	  domClear(selectBox);

	  forEach_1(options, function(option) {
	    var optionEntry = domify$1('<option value="' + escapeHTML$1(option.value) + '">' + escapeHTML$1(option.label) + '</option>');
	    selectBox.appendChild(optionEntry);
	  });
	  return options;
	}

	var updateOptionsDropDown_1 = updateOptionsDropDown;


	/**
	 * checks whether the id value is valid
	 *
	 * @param {ModdleElement} bo
	 * @param {String} idValue
	 * @param {Function} translate
	 *
	 * @return {String} error message
	 */
	function isIdValid(bo, idValue, translate) {
	  var assigned = bo.$model.ids.assigned(idValue);

	  var idExists = assigned && assigned !== bo;

	  if (!idValue || idExists) {
	    return translate('Element must have an unique id.');
	  }

	  return validateId(idValue, translate);
	}

	var isIdValid_1 = isIdValid;


	function validateId(idValue, translate) {

	  if (containsSpace(idValue)) {
	    return translate('Id must not contain spaces.');
	  }

	  if (!ID_REGEX.test(idValue)) {

	    if (QNAME_REGEX.test(idValue)) {
	      return translate('Id must not contain prefix.');
	    }

	    return translate('Id must be a valid QName.');
	  }
	}

	var validateId_1 = validateId;


	function containsSpace(value) {
	  return SPACE_REGEX.test(value);
	}

	var containsSpace_1 = containsSpace;

	/**
	 * generate a semantic id with given prefix
	 */
	function nextId(prefix) {
	  var ids = new Ids$1([32,32,1]);

	  return ids.nextPrefixed(prefix);
	}

	var nextId_1 = nextId;


	function triggerClickEvent(element) {
	  var evt;
	  var eventType = 'click';

	  if (document.createEvent) {
	    try {

	      // Chrome, Safari, Firefox
	      evt = new MouseEvent((eventType), { view: window, bubbles: true, cancelable: true });
	    } catch (e) {

	      // IE 11, PhantomJS (wat!)
	      evt = document.createEvent('MouseEvent');

	      evt.initEvent((eventType), true, true);
	    }
	    return element.dispatchEvent(evt);
	  } else {

	    // Welcome IE
	    evt = document.createEventObject();

	    return element.fireEvent('on' + eventType, evt);
	  }
	}

	var triggerClickEvent_1 = triggerClickEvent;


	function escapeHTML$1(str) {
	  str = '' + str;

	  return str && str.replace(/[&<>"']/g, function(match) {
	    return HTML_ESCAPE_MAP$1[match];
	  });
	}

	var escapeHTML_1 = escapeHTML$1;

	function createDropdown(dropdown) {
	  var menu = dropdown.menu;

	  var dropdownNode = domify$1(
	    '<div class="group__dropdown">' +
	      '<button class="group__dropdown-button">' +
	      '<svg width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 512"><path fill="currentColor" d="M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"></path></svg>' +
	      '</button>' +
	      '<div class="group__dropdown-menu"></div>' +
	    '</div>'
	  );

	  var buttonNode = domQuery('.group__dropdown-button', dropdownNode),
	      menuNode = domQuery('.group__dropdown-menu', dropdownNode);

	  buttonNode.addEventListener('click', function(event) {
	    domClasses(dropdownNode).toggle('group__dropdown--open');

	    createOnGlobalClick(event);
	  });

	  forEach_1(menu, function(menuItem) {
	    var menuItemNode = domify$1('<div class="group__dropdown-menu-item" data-dropdown-action="' +
	      menuItem.id +
	      '">' + escapeHTML$1(menuItem.label) + '</div>');

	    menuItemNode.addEventListener('click', function() {
	      menuItem.onClick();

	      domClasses(dropdownNode).remove('group__dropdown--open');
	    });

	    menuNode.appendChild(menuItemNode);
	  });

	  var _onGlobalClick;

	  function createOnGlobalClick(_event) {
	    function onGlobalClick(event) {
	      if (event === _event) {
	        return;
	      }

	      var target = event.target;

	      if (menuNode !== target && !menuNode.contains(target)) {
	        domClasses(dropdownNode).remove('group__dropdown--open');

	        document.removeEventListener('click', onGlobalClick);
	      }
	    }

	    if (_onGlobalClick) {
	      document.removeEventListener('click', _onGlobalClick);
	    }

	    document.addEventListener('click', onGlobalClick);

	    _onGlobalClick = onGlobalClick;
	  }

	  return dropdownNode;
	}

	var createDropdown_1 = createDropdown;

	var Utils = {
		selectedOption: selectedOption_1,
		selectedType: selectedType_1,
		getRoot: getRoot_1,
		filterElementsByType: filterElementsByType_1,
		findRootElementsByType: findRootElementsByType_1,
		removeAllChildren: removeAllChildren_1,
		addEmptyParameter: addEmptyParameter_1,
		refreshOptionsModel: refreshOptionsModel_1,
		updateOptionsDropDown: updateOptionsDropDown_1,
		isIdValid: isIdValid_1,
		validateId: validateId_1,
		containsSpace: containsSpace_1,
		nextId: nextId_1,
		triggerClickEvent: triggerClickEvent_1,
		escapeHTML: escapeHTML_1,
		createDropdown: createDropdown_1
	};

	/**
	 * The base implementation of `_.filter` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function baseFilter(collection, predicate) {
	  var result = [];
	  _baseEach(collection, function(value, index, collection) {
	    if (predicate(value, index, collection)) {
	      result.push(value);
	    }
	  });
	  return result;
	}

	var _baseFilter = baseFilter;

	/**
	 * Iterates over elements of `collection`, returning an array of all elements
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * **Note:** Unlike `_.remove`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 * @see _.reject
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * _.filter(users, function(o) { return !o.active; });
	 * // => objects for ['fred']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, { 'age': 36, 'active': true });
	 * // => objects for ['barney']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, ['active', false]);
	 * // => objects for ['fred']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.filter(users, 'active');
	 * // => objects for ['barney']
	 *
	 * // Combining several predicates using `_.overEvery` or `_.overSome`.
	 * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
	 * // => objects for ['fred', 'barney']
	 */
	function filter$1(collection, predicate) {
	  var func = isArray_1(collection) ? _arrayFilter : _baseFilter;
	  return func(collection, _baseIteratee(predicate));
	}

	var filter_1 = filter$1;

	/** `Object#toString` result references. */
	var mapTag$3 = '[object Map]',
	    setTag$3 = '[object Set]';

	/** Used for built-in method references. */
	var objectProto$c = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$b = objectProto$c.hasOwnProperty;

	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty(value) {
	  if (value == null) {
	    return true;
	  }
	  if (isArrayLike_1(value) &&
	      (isArray_1(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	        isBuffer_1(value) || isTypedArray_1(value) || isArguments_1(value))) {
	    return !value.length;
	  }
	  var tag = _getTag(value);
	  if (tag == mapTag$3 || tag == setTag$3) {
	    return !value.size;
	  }
	  if (_isPrototype(value)) {
	    return !_baseKeys(value).length;
	  }
	  for (var key in value) {
	    if (hasOwnProperty$b.call(value, key)) {
	      return false;
	    }
	  }
	  return true;
	}

	var isEmpty_1 = isEmpty;

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	var _apply = apply;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return _apply(func, this, otherArgs);
	  };
	}

	var _overRest = overRest;

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	var constant_1 = constant;

	var defineProperty$2 = (function() {
	  try {
	    var func = _getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	var _defineProperty = defineProperty$2;

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !_defineProperty ? identity_1 : function(func, string) {
	  return _defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant_1(string),
	    'writable': true
	  });
	};

	var _baseSetToString = baseSetToString;

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	var _shortOut = shortOut;

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = _shortOut(_baseSetToString);

	var _setToString = setToString;

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return _setToString(_overRest(func, start, identity_1), func + '');
	}

	var _baseRest = baseRest;

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	var _baseFindIndex = baseFindIndex;

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}

	var _baseIsNaN = baseIsNaN;

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	var _strictIndexOf = strictIndexOf;

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  return value === value
	    ? _strictIndexOf(array, value, fromIndex)
	    : _baseFindIndex(array, _baseIsNaN, fromIndex);
	}

	var _baseIndexOf = baseIndexOf;

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && _baseIndexOf(array, value, 0) > -1;
	}

	var _arrayIncludes = arrayIncludes;

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	var _arrayIncludesWith = arrayIncludesWith;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE$1 = 200;

	/**
	 * The base implementation of methods like `_.difference` without support
	 * for excluding multiple arrays or iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of filtered values.
	 */
	function baseDifference(array, values, iteratee, comparator) {
	  var index = -1,
	      includes = _arrayIncludes,
	      isCommon = true,
	      length = array.length,
	      result = [],
	      valuesLength = values.length;

	  if (!length) {
	    return result;
	  }
	  if (iteratee) {
	    values = _arrayMap(values, _baseUnary(iteratee));
	  }
	  if (comparator) {
	    includes = _arrayIncludesWith;
	    isCommon = false;
	  }
	  else if (values.length >= LARGE_ARRAY_SIZE$1) {
	    includes = _cacheHas;
	    isCommon = false;
	    values = new _SetCache(values);
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee == null ? value : iteratee(value);

	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var valuesIndex = valuesLength;
	      while (valuesIndex--) {
	        if (values[valuesIndex] === computed) {
	          continue outer;
	        }
	      }
	      result.push(value);
	    }
	    else if (!includes(values, computed, comparator)) {
	      result.push(value);
	    }
	  }
	  return result;
	}

	var _baseDifference = baseDifference;

	/** Built-in value references. */
	var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray_1(value) || isArguments_1(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	var _isFlattenable = isFlattenable;

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = _isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        _arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	var _baseFlatten = baseFlatten;

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop() {
	  // No operation performed.
	}

	var noop_1 = noop;

	/** Used as references for various `Number` constants. */
	var INFINITY$2 = 1 / 0;

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet = !(_Set && (1 / _setToArray(new _Set([,-0]))[1]) == INFINITY$2) ? noop_1 : function(values) {
	  return new _Set(values);
	};

	var _createSet = createSet;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE$2 = 200;

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee, comparator) {
	  var index = -1,
	      includes = _arrayIncludes,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = _arrayIncludesWith;
	  }
	  else if (length >= LARGE_ARRAY_SIZE$2) {
	    var set = iteratee ? null : _createSet(array);
	    if (set) {
	      return _setToArray(set);
	    }
	    isCommon = false;
	    includes = _cacheHas;
	    seen = new _SetCache;
	  }
	  else {
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	var _baseUniq = baseUniq;

	/**
	 * The base implementation of methods like `_.xor`, without support for
	 * iteratee shorthands, that accepts an array of arrays to inspect.
	 *
	 * @private
	 * @param {Array} arrays The arrays to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new array of values.
	 */
	function baseXor(arrays, iteratee, comparator) {
	  var length = arrays.length;
	  if (length < 2) {
	    return length ? _baseUniq(arrays[0]) : [];
	  }
	  var index = -1,
	      result = Array(length);

	  while (++index < length) {
	    var array = arrays[index],
	        othIndex = -1;

	    while (++othIndex < length) {
	      if (othIndex != index) {
	        result[index] = _baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	      }
	    }
	  }
	  return _baseUniq(_baseFlatten(result, 1), iteratee, comparator);
	}

	var _baseXor = baseXor;

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike_1(value) && isArrayLike_1(value);
	}

	var isArrayLikeObject_1 = isArrayLikeObject;

	/**
	 * Creates an array of unique values that is the
	 * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	 * of the given arrays. The order of result values is determined by the order
	 * they occur in the arrays.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of filtered values.
	 * @see _.difference, _.without
	 * @example
	 *
	 * _.xor([2, 1], [2, 3]);
	 * // => [1, 3]
	 */
	var xor = _baseRest(function(arrays) {
	  return _baseXor(_arrayFilter(arrays, isArrayLikeObject_1));
	});

	var xor_1 = xor;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return _root.Date.now();
	};

	var now_1 = now;

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol_1(value)) {
	    return NAN;
	  }
	  if (isObject_1(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject_1(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	var toNumber_1 = toNumber;

	/** Error message constants. */
	var FUNC_ERROR_TEXT$1 = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$1 = Math.max,
	    nativeMin = Math.min;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce$1(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$1);
	  }
	  wait = toNumber_1(wait) || 0;
	  if (isObject_1(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax$1(toNumber_1(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        timeWaiting = wait - timeSinceLastCall;

	    return maxing
	      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	      : timeWaiting;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now_1();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now_1());
	  }

	  function debounced() {
	    var time = now_1(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        clearTimeout(timerId);
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	var debounce_1 = debounce$1;

	/** Used as references for various `Number` constants. */
	var INFINITY$3 = 1 / 0;

	/**
	 * Recursively flattens `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flattenDeep([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, 3, 4, 5]
	 */
	function flattenDeep(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? _baseFlatten(array, INFINITY$3) : [];
	}

	var flattenDeep_1 = flattenDeep;

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && _defineProperty) {
	    _defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	var _baseAssignValue = baseAssignValue;

	/**
	 * A specialized version of `baseAggregator` for arrays.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function arrayAggregator(array, setter, iteratee, accumulator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    var value = array[index];
	    setter(accumulator, value, iteratee(value), array);
	  }
	  return accumulator;
	}

	var _arrayAggregator = arrayAggregator;

	/**
	 * Aggregates elements of `collection` on `accumulator` with keys transformed
	 * by `iteratee` and values set by `setter`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function baseAggregator(collection, setter, iteratee, accumulator) {
	  _baseEach(collection, function(value, key, collection) {
	    setter(accumulator, value, iteratee(value), collection);
	  });
	  return accumulator;
	}

	var _baseAggregator = baseAggregator;

	/**
	 * Creates a function like `_.groupBy`.
	 *
	 * @private
	 * @param {Function} setter The function to set accumulator values.
	 * @param {Function} [initializer] The accumulator object initializer.
	 * @returns {Function} Returns the new aggregator function.
	 */
	function createAggregator(setter, initializer) {
	  return function(collection, iteratee) {
	    var func = isArray_1(collection) ? _arrayAggregator : _baseAggregator,
	        accumulator = initializer ? initializer() : {};

	    return func(collection, setter, _baseIteratee(iteratee), accumulator);
	  };
	}

	var _createAggregator = createAggregator;

	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` thru `iteratee`. The corresponding value of
	 * each key is the last element responsible for generating the key. The
	 * iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * var array = [
	 *   { 'dir': 'left', 'code': 97 },
	 *   { 'dir': 'right', 'code': 100 }
	 * ];
	 *
	 * _.keyBy(array, function(o) {
	 *   return String.fromCharCode(o.code);
	 * });
	 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	 *
	 * _.keyBy(array, 'dir');
	 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	 */
	var keyBy = _createAggregator(function(result, value, key) {
	  _baseAssignValue(result, key, value);
	});

	var keyBy_1 = keyBy;

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike_1(collection) ? Array(collection.length) : [];

	  _baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	var _baseMap = baseMap;

	/**
	 * Creates an array of values by running each element in `collection` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map$3(collection, iteratee) {
	  var func = isArray_1(collection) ? _arrayMap : _baseMap;
	  return func(collection, _baseIteratee(iteratee));
	}

	var map_1 = map$3;

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	var _arrayReduce = arrayReduce;

	/**
	 * The base implementation of `_.reduce` and `_.reduceRight`, without support
	 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initAccum Specify using the first or last element of
	 *  `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */
	function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	  eachFunc(collection, function(value, index, collection) {
	    accumulator = initAccum
	      ? (initAccum = false, value)
	      : iteratee(accumulator, value, index, collection);
	  });
	  return accumulator;
	}

	var _baseReduce = baseReduce;

	/**
	 * Reduces `collection` to a value which is the accumulated result of running
	 * each element in `collection` thru `iteratee`, where each successive
	 * invocation is supplied the return value of the previous. If `accumulator`
	 * is not given, the first element of `collection` is used as the initial
	 * value. The iteratee is invoked with four arguments:
	 * (accumulator, value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.reduce`, `_.reduceRight`, and `_.transform`.
	 *
	 * The guarded methods are:
	 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	 * and `sortBy`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @returns {*} Returns the accumulated value.
	 * @see _.reduceRight
	 * @example
	 *
	 * _.reduce([1, 2], function(sum, n) {
	 *   return sum + n;
	 * }, 0);
	 * // => 3
	 *
	 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 *   return result;
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	 */
	function reduce$2(collection, iteratee, accumulator) {
	  var func = isArray_1(collection) ? _arrayReduce : _baseReduce,
	      initAccum = arguments.length < 3;

	  return func(collection, _baseIteratee(iteratee), accumulator, initAccum, _baseEach);
	}

	var reduce_1 = reduce$2;

	/**
	 * Calculate the selection update for the given
	 * current and new input values.
	 *
	 * @param {Object} currentSelection as {start, end}
	 * @param {String} currentValue
	 * @param {String} newValue
	 *
	 * @return {Object} newSelection as {start, end}
	 */
	function calculateUpdate(currentSelection, currentValue, newValue) {

	  var currentCursor = currentSelection.start,
	      newCursor = currentCursor,
	      diff = newValue.length - currentValue.length;

	  newValue.length - currentValue.length;

	  var currentTail = currentValue.substring(currentCursor);

	  // check if we can remove common ending from the equation
	  // to be able to properly detect a selection change for
	  // the following scenarios:
	  //
	  //  * (AAATTT|TF) => (AAAT|TF)
	  //  * (AAAT|TF) =>  (AAATTT|TF)
	  //
	  if (newValue.lastIndexOf(currentTail) === newValue.length - currentTail.length) {
	    currentValue = currentValue.substring(0, currentValue.length - currentTail.length);
	    newValue = newValue.substring(0, newValue.length - currentTail.length);
	  }

	  // diff
	  var diff = createDiff(currentValue, newValue);

	  if (diff) {
	    if (diff.type === 'remove') {
	      newCursor = diff.newStart;
	    } else {
	      newCursor = diff.newEnd;
	    }
	  }

	  return range(newCursor);
	}

	var selectionUpdate = calculateUpdate;


	function createDiff(currentValue, newValue) {

	  var insert;

	  var l_str, l_char, l_idx = 0,
	      s_str, s_char, s_idx = 0;

	  if (newValue.length > currentValue.length) {
	    l_str = newValue;
	    s_str = currentValue;
	  } else {
	    l_str = currentValue;
	    s_str = newValue;
	  }

	  // assume there will be only one insert / remove and
	  // detect that _first_ edit operation only
	  while (l_idx < l_str.length) {

	    l_char = l_str.charAt(l_idx);
	    s_char = s_str.charAt(s_idx);

	    // chars no not equal
	    if (l_char !== s_char) {

	      if (!insert) {
	        insert = {
	          l_start: l_idx,
	          s_start: s_idx
	        };
	      }

	      l_idx++;
	    }

	    // chars equal (again?)
	    else {

	      if (insert && !insert.complete) {
	        insert.l_end = l_idx;
	        insert.s_end = s_idx;
	        insert.complete = true;
	      }

	      s_idx++;
	      l_idx++;
	    }
	  }

	  if (insert && !insert.complete) {
	    insert.complete = true;
	    insert.s_end = s_str.length;
	    insert.l_end = l_str.length;
	  }

	  // no diff
	  if (!insert) {
	    return;
	  }

	  if (newValue.length > currentValue.length) {
	    return {
	      newStart: insert.l_start,
	      newEnd: insert.l_end,
	      type: 'add'
	    };
	  } else {
	    return {
	      newStart: insert.s_start,
	      newEnd: insert.s_end,
	      type: newValue.length < currentValue.length ? 'remove' : 'replace'
	    };
	  }
	}

	/**
	 * Utility method for creating a new selection range {start, end} object.
	 *
	 * @param {Number} start
	 * @param {Number} [end]
	 *
	 * @return {Object} selection range as {start, end}
	 */
	function range(start, end) {
	  return {
	    start: start,
	    end: end === undefined ? start : end
	  };
	}

	var range_1 = range;
	selectionUpdate.range = range_1;

	//      
	// An event handler can take an optional event argument
	// and should not return a value
	                                          
	                                                               

	// An array of all currently registered event handlers for a type
	                                            
	                                                            
	// A map of event types and their corresponding event handlers.
	                        
	                                 
	                                   
	  

	/** Mitt: Tiny (~200b) functional event emitter / pubsub.
	 *  @name mitt
	 *  @returns {Mitt}
	 */
	function mitt(all                 ) {
		all = all || Object.create(null);

		return {
			/**
			 * Register an event handler for the given type.
			 *
			 * @param  {String} type	Type of event to listen for, or `"*"` for all events
			 * @param  {Function} handler Function to call in response to given event
			 * @memberOf mitt
			 */
			on: function on(type        , handler              ) {
				(all[type] || (all[type] = [])).push(handler);
			},

			/**
			 * Remove an event handler for the given type.
			 *
			 * @param  {String} type	Type of event to unregister `handler` from, or `"*"`
			 * @param  {Function} handler Handler function to remove
			 * @memberOf mitt
			 */
			off: function off(type        , handler              ) {
				if (all[type]) {
					all[type].splice(all[type].indexOf(handler) >>> 0, 1);
				}
			},

			/**
			 * Invoke all handlers for the given type.
			 * If present, `"*"` handlers are invoked after type-matched handlers.
			 *
			 * @param {String} type  The event type to invoke
			 * @param {Any} [evt]  Any value (object is recommended and powerful), passed to each handler
			 * @memberOf mitt
			 */
			emit: function emit(type        , evt     ) {
				(all[type] || []).slice().map(function (handler) { handler(evt); });
				(all['*'] || []).slice().map(function (handler) { handler(type, evt); });
			}
		};
	}

	var DEFAULT_OPTIONS$2 = {
	  scrollSymbolLeft: '‹',
	  scrollSymbolRight: '›'
	};


	/**
	 * This component adds the functionality to scroll over a list of tabs.
	 *
	 * It adds scroll buttons on the left and right side of the tabs container
	 * if not all tabs are visible. It also adds a mouse wheel listener on the
	 * container.
	 *
	 * If either a button is clicked or the mouse wheel is used over the tabs,
	 * a 'scroll' event is being fired. This event contains the node elements
	 * of the new and old active tab, and the direction in which the tab has
	 * changed relative to the old active tab.
	 *
	 * @example:
	 * (1) provide a tabs-container:
	 *
	 * var $el = (
	 *   <div>
	 *     <!-- button added by scrollTabs -->
	 *     <span class="scroll-tabs-button scroll-tabs-left"></span>
	 *     <ul class="my-tabs-container">
	 *       <li class="my-tab i-am-active"></li>
	 *       <li class="my-tab"></li>
	 *       <li class="my-tab ignore-me"></li>
	 *     </ul>
	 *     <!-- button added by scrollTabs -->
	 *     <span class="scroll-tabs-button scroll-tabs-right"></span>
	 *   </div>
	 * );
	 *
	 *
	 * (2) initialize scrollTabs:
	 *
	 *  var scroller = scrollTabs(tabBarNode, {
	 *    selectors: {
	 *      tabsContainer: '.my-tabs-container',
	 *      tab: '.my-tab',
	 *      ignore: '.ignore-me',
	 *      active: '.i-am-active'
	 *    }
	 *  });
	 *
	 *
	 * (3) listen to the scroll event:
	 *
	 * scroller.on('scroll', function(newActiveNode, oldActiveNode, direction) {
	 *   // direction is any of (-1: left, 1: right)
	 *   // activate the new active tab
	 * });
	 *
	 *
	 * (4) update the scroller if tabs change and or the tab container resizes:
	 *
	 * scroller.update();
	 *
	 *
	 * @param  {DOMElement} el
	 * @param  {Object} options
	 * @param  {Object} options.selectors
	 * @param  {String} options.selectors.tabsContainer the container all tabs are contained in
	 * @param  {String} options.selectors.tab a single tab inside the tab container
	 * @param  {String} options.selectors.ignore tabs that should be ignored during scroll left/right
	 * @param  {String} options.selectors.active selector for the current active tab
	 * @param  {String} [options.scrollSymbolLeft]
	 * @param  {String} [options.scrollSymbolRight]
	 */
	function ScrollTabs($el, options) {

	  // we are an event emitter
	  assign(this, mitt());

	  this.options = options = assign({}, DEFAULT_OPTIONS$2, options);
	  this.container = $el;

	  this._createScrollButtons($el, options);

	  this._bindEvents($el);
	}


	/**
	 * Create a clickable scroll button
	 *
	 * @param {Object} options
	 * @param {String} options.className
	 * @param {String} options.label
	 * @param {Number} options.direction
	 *
	 * @return {DOMElement} The created scroll button node
	 */
	ScrollTabs.prototype._createButton = function(parentNode, options) {

	  var className = options.className,
	      direction = options.direction;


	  var button = query('.' + className, parentNode);

	  if (!button) {
	    button = domify('<span class="scroll-tabs-button ' + className + '">' +
	                                options.label +
	                              '</span>');

	    parentNode.insertBefore(button, parentNode.childNodes[0]);
	  }

	  attr(button, 'data-direction', direction);

	  return button;
	};

	/**
	 * Create both scroll buttons
	 *
	 * @param  {DOMElement} parentNode
	 * @param  {Object} options
	 * @param  {String} options.scrollSymbolLeft
	 * @param  {String} options.scrollSymbolRight
	 */
	ScrollTabs.prototype._createScrollButtons = function(parentNode, options) {

	  // Create a button that scrolls to the tab left to the currently active tab
	  this._createButton(parentNode, {
	    className: 'scroll-tabs-left',
	    label: options.scrollSymbolLeft,
	    direction: -1
	  });

	  // Create a button that scrolls to the tab right to the currently active tab
	  this._createButton(parentNode, {
	    className: 'scroll-tabs-right',
	    label: options.scrollSymbolRight,
	    direction: 1
	  });
	};

	/**
	 * Get the current active tab
	 *
	 * @return {DOMElement}
	 */
	ScrollTabs.prototype.getActiveTabNode = function() {
	  return query(this.options.selectors.active, this.container);
	};


	/**
	 * Get the container all tabs are contained in
	 *
	 * @return {DOMElement}
	 */
	ScrollTabs.prototype.getTabsContainerNode = function() {
	  return query(this.options.selectors.tabsContainer, this.container);
	};


	/**
	 * Get all tabs (visible and invisible ones)
	 *
	 * @return {Array<DOMElement>}
	 */
	ScrollTabs.prototype.getAllTabNodes = function() {
	  return all(this.options.selectors.tab, this.container);
	};


	/**
	 * Gets all tabs that don't have the ignore class set
	 *
	 * @return {Array<DOMElement>}
	 */
	ScrollTabs.prototype.getVisibleTabs = function() {
	  var allTabs = this.getAllTabNodes();

	  var ignore = this.options.selectors.ignore;

	  return filter(allTabs, function(tabNode) {
	    return !matchesSelector(tabNode, ignore);
	  });
	};


	/**
	 * Get a tab relative to a reference tab.
	 *
	 * @param  {DOMElement} referenceTabNode
	 * @param  {Number} n gets the nth tab next or previous to the reference tab
	 *
	 * @return {DOMElement}
	 *
	 * @example:
	 * Visible tabs: [ A | B | C | D | E ]
	 * Assume tab 'C' is the reference tab:
	 * If direction === -1, it returns tab 'B',
	 * if direction ===  2, it returns tab 'E'
	 */
	ScrollTabs.prototype.getAdjacentTab = function(referenceTabNode, n) {
	  var visibleTabs = this.getVisibleTabs();

	  var index = visibleTabs.indexOf(referenceTabNode);

	  return visibleTabs[index + n];
	};

	ScrollTabs.prototype._bindEvents = function(node) {
	  this._bindWheelEvent(node);
	  this._bindTabClickEvents(node);
	  this._bindScrollButtonEvents(node);
	};

	/**
	 *  Bind a click listener to a DOM node.
	 *  Make sure a tab link is entirely visible after onClick.
	 *
	 * @param {DOMElement} node
	 */
	ScrollTabs.prototype._bindTabClickEvents = function(node) {
	  var selector = this.options.selectors.tab;

	  var self = this;

	  delegate.bind(node, selector, 'click', function onClick(event) {
	    self.scrollToTabNode(event.delegateTarget);
	  });
	};


	/**
	 * Bind the wheel event listener to a DOM node
	 *
	 * @param {DOMElement} node
	 */
	ScrollTabs.prototype._bindWheelEvent = function(node) {
	  var self = this;

	  componentEvent.bind(node, 'wheel', function(e) {

	    // scroll direction (-1: left, 1: right)
	    var direction = Math.sign(e.deltaY);

	    var oldActiveTab = self.getActiveTabNode();

	    var newActiveTab = self.getAdjacentTab(oldActiveTab, direction);

	    if (newActiveTab) {
	      self.scrollToTabNode(newActiveTab);
	      self.emit('scroll', newActiveTab, oldActiveTab, direction);
	    }

	    e.preventDefault();
	  });
	};

	/**
	 * Bind scroll button events to a DOM node
	 *
	 * @param  {DOMElement} node
	 */
	ScrollTabs.prototype._bindScrollButtonEvents = function(node) {

	  var self = this;

	  delegate.bind(node, '.scroll-tabs-button', 'click', function(event) {

	    var target = event.delegateTarget;

	    // data-direction is either -1 or 1
	    var direction = parseInt(attr(target, 'data-direction'), 10);

	    var oldActiveTabNode = self.getActiveTabNode();

	    var newActiveTabNode = self.getAdjacentTab(oldActiveTabNode, direction);

	    if (newActiveTabNode) {
	      self.scrollToTabNode(newActiveTabNode);
	      self.emit('scroll', newActiveTabNode, oldActiveTabNode, direction);
	    }

	    event.preventDefault();
	  });
	};


	/**
	* Scroll to a tab if it is not entirely visible
	*
	* @param  {DOMElement} tabNode tab node to scroll to
	*/
	ScrollTabs.prototype.scrollToTabNode = function(tabNode) {
	  if (!tabNode) {
	    return;
	  }

	  var tabsContainerNode = tabNode.parentNode;

	  var tabWidth = tabNode.offsetWidth,
	      tabOffsetLeft = tabNode.offsetLeft,
	      tabOffsetRight = tabOffsetLeft + tabWidth,
	      containerWidth = tabsContainerNode.offsetWidth,
	      containerScrollLeft = tabsContainerNode.scrollLeft;

	  if (containerScrollLeft > tabOffsetLeft) {
	    // scroll to the left, if the tab is overflowing on the left side
	    tabsContainerNode.scrollLeft = 0;
	  } else if (tabOffsetRight > containerWidth) {
	    // scroll to the right, if the tab is overflowing on the right side
	    tabsContainerNode.scrollLeft = tabOffsetRight - containerWidth;
	  }
	};


	/**
	 * React on tab changes from outside (resize/show/hide/add/remove),
	 * update scroll button visibility.
	 */
	ScrollTabs.prototype.update = function() {

	  var tabsContainerNode = this.getTabsContainerNode();

	  // check if tabs fit in container
	  var overflow = tabsContainerNode.scrollWidth > tabsContainerNode.offsetWidth;

	  // TODO(nikku): distinguish overflow left / overflow right?
	  var overflowClass = 'scroll-tabs-overflow';

	  classes(this.container).toggle(overflowClass, overflow);

	  if (overflow) {
	    // make sure the current active tab is always visible
	    this.scrollToTabNode(this.getActiveTabNode());
	  }
	};


	// exports ////////////////

	/**
	 * Create a scrollTabs instance on the given element.
	 *
	 * @param {DOMElement} $el
	 * @param {Object} options
	 *
	 * @return {ScrollTabs}
	 */
	function create$2($el, options) {

	  var scrollTabs = get$3($el);

	  if (!scrollTabs) {
	    scrollTabs = new ScrollTabs($el, options);

	    $el.__scrollTabs = scrollTabs;
	  }

	  return scrollTabs;
	}


	/**
	 * Return the scrollTabs instance that has been previously
	 * initialized on the element.
	 *
	 * @param {DOMElement} $el
	 * @return {ScrollTabs}
	 */
	function get$3($el) {
	  return $el.__scrollTabs;
	}

	create$2.get = get$3;

	var scrollTabs = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': create$2
	});

	var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(scrollTabs);

	var createDropdown$1 = Utils.createDropdown,
	    escapeHTML$2 = Utils.escapeHTML;

	var domify$2 = require$$1.domify,
	    domQuery$1 = require$$1.query,
	    domQueryAll = require$$1.queryAll,
	    domRemove = require$$1.remove,
	    domClasses$1 = require$$1.classes,
	    domClosest = require$$1.closest,
	    domAttr = require$$1.attr,
	    domDelegate = require$$1.delegate,
	    domMatches = require$$1.matches;





	var scrollTabs$1 = require$$2$1.default;

	var getBusinessObject$2 = require$$0$1.getBusinessObject;

	var HIDE_CLASS = 'bpp-hidden';
	var DEBOUNCE_DELAY = 300;

	var DEFAULT_PRIORITY$6 = 1000;

	function isToggle(node) {
	  return node.type === 'checkbox' || node.type === 'radio';
	}

	function isSelect(node) {
	  return node.type === 'select-one';
	}

	function isContentEditable(node) {
	  return domAttr(node, 'contenteditable');
	}

	function getPropertyPlaceholders(node) {
	  var selector = 'input[name], textarea[name], [data-value], [contenteditable]';
	  var placeholders = domQueryAll(selector, node);
	  if ((!placeholders || !placeholders.length) && domMatches(node, selector)) {
	    placeholders = [ node ];
	  }
	  return placeholders;
	}

	/**
	 * Return all active form controls.
	 * This excludes the invisible controls unless all is true
	 *
	 * @param {Element} node
	 * @param {Boolean} [all=false]
	 */
	function getFormControls(node, all) {
	  var controls = domQueryAll('input[name], textarea[name], select[name], [contenteditable]', node);

	  if (!controls || !controls.length) {
	    controls = domMatches(node, 'option') ? [ node ] : controls;
	  }

	  if (!all) {
	    controls = filter_1(controls, function(node) {
	      return !domClosest(node, '.' + HIDE_CLASS);
	    });
	  }

	  return controls;
	}

	function getFormControlValuesInScope(entryNode) {
	  var values = {};

	  var controlNodes = getFormControls(entryNode);

	  forEach_1(controlNodes, function(controlNode) {
	    var value = controlNode.value;

	    var name = domAttr(controlNode, 'name') || domAttr(controlNode, 'data-name');

	    // take toggle state into account for radio / checkboxes
	    if (isToggle(controlNode)) {
	      if (controlNode.checked) {
	        if (!domAttr(controlNode, 'value')) {
	          value = true;
	        } else {
	          value = controlNode.value;
	        }
	      } else {
	        value = null;
	      }
	    } else
	    if (isContentEditable(controlNode)) {
	      value = controlNode.innerText;
	    }

	    if (value !== null) {

	      // return the actual value
	      // handle serialization in entry provider
	      // (ie. if empty string should be serialized or not)
	      values[name] = value;
	    }
	  });

	  return values;

	}

	/**
	 * Extract input values from entry node
	 *
	 * @param  {DOMElement} entryNode
	 * @returns {Object}
	 */
	function getFormControlValues(entryNode) {

	  var values;

	  var listContainer = domQuery$1('[data-list-entry-container]', entryNode);
	  if (listContainer) {
	    values = [];
	    var listNodes = listContainer.children || [];
	    forEach_1(listNodes, function(listNode) {
	      values.push(getFormControlValuesInScope(listNode));
	    });
	  } else {
	    values = getFormControlValuesInScope(entryNode);
	  }

	  return values;
	}

	/**
	 * Return true if the given form extracted value equals
	 * to an old cached version.
	 *
	 * @param {Object} value
	 * @param {Object} oldValue
	 * @return {Boolean}
	 */
	function valueEqual(value, oldValue) {

	  if (value && !oldValue) {
	    return false;
	  }

	  var allKeys = keys_1(value).concat(keys_1(oldValue));

	  return allKeys.every(function(key) {
	    return value[key] === oldValue[key];
	  });
	}

	/**
	 * Return true if the given form extracted value(s)
	 * equal an old cached version.
	 *
	 * @param {Array<Object>|Object} values
	 * @param {Array<Object>|Object} oldValues
	 * @return {Boolean}
	 */
	function valuesEqual(values, oldValues) {

	  if (isArray_1(values)) {

	    if (values.length !== oldValues.length) {
	      return false;
	    }

	    return values.every(function(v, idx) {
	      return valueEqual(v, oldValues[idx]);
	    });
	  }

	  return valueEqual(values, oldValues);
	}

	/**
	 * Return a mapping of { id: entry } for all entries in the given groups in the given tabs.
	 *
	 * @param {Object} tabs
	 * @return {Object}
	 */
	function extractEntries(tabs) {
	  return keyBy_1(flattenDeep_1(map_1(flattenDeep_1(map_1(tabs, 'groups')), 'entries')), 'id');
	}

	/**
	 * Return a mapping of { id: group } for all groups in the given tabs.
	 *
	 * @param {Object} tabs
	 * @return {Object}
	 */
	function extractGroups(tabs) {
	  return keyBy_1(flattenDeep_1(map_1(tabs, 'groups')), 'id');
	}

	/**
	 * A properties panel implementation.
	 *
	 * To use it provide a `propertiesProvider` component that knows
	 * about which properties to display.
	 *
	 * Properties edit state / visibility can be intercepted
	 * via a custom {@link PropertiesActivator}.
	 *
	 * @class
	 * @constructor
	 *
	 * @param {Object} config
	 * @param {didi.Injector} injector
	 * @param {EventBus} eventBus
	 * @param {Modeling} modeling
	 * @param {Canvas} canvas
	 * @param {CommandStack} commandStack
	 */
	function PropertiesPanel(config, injector, eventBus, modeling, commandStack, canvas) {

	  this._eventBus = eventBus;
	  this._modeling = modeling;
	  this._commandStack = commandStack;
	  this._canvas = canvas;

	  var propertiesProvider = injector.get('propertiesProvider', false);

	  if (propertiesProvider) {
	    this.registerProvider(propertiesProvider);
	  }

	  this._init(config);
	}

	PropertiesPanel.$inject = [
	  'config.propertiesPanel',
	  'injector',
	  'eventBus',
	  'modeling',
	  'commandStack',
	  'canvas'
	];

	var PropertiesPanel_1 = PropertiesPanel;

	/**
	 * @param {number} [priority]
	 * @param { { getTabs: any[] | (any) => (any[]) => any[]) } } provider
	 */
	PropertiesPanel.prototype.registerProvider = function(priority, provider) {

	  if (!provider) {
	    provider = priority;
	    priority = DEFAULT_PRIORITY$6;
	  }

	  this._eventBus.on('propertiesPanel.getProviders', priority, function(event) {
	    event.providers.push(provider);
	  });

	  this._eventBus.fire('propertiesPanel.providersChanged');
	};

	PropertiesPanel.prototype._init = function(config) {

	  var canvas = this._canvas,
	      eventBus = this._eventBus;

	  var self = this;

	  /**
	   * Select the root element once it is added to the canvas
	   */
	  eventBus.on('root.added', function(e) {
	    var element = e.element;

	    if (isImplicitRoot(element)) {
	      return;
	    }

	    self.update(element);
	  });

	  eventBus.on('selection.changed', function(e) {
	    var newElement = e.newSelection[0];

	    var rootElement = canvas.getRootElement();

	    if (isImplicitRoot(rootElement)) {
	      return;
	    }

	    self.update(newElement);
	  });

	  // add / update tab-bar scrolling
	  eventBus.on([
	    'propertiesPanel.changed',
	    'propertiesPanel.resized'
	  ], function(event) {

	    var tabBarNode = domQuery$1('.bpp-properties-tab-bar', self._container);

	    if (!tabBarNode) {
	      return;
	    }

	    var scroller = scrollTabs$1.get(tabBarNode);

	    if (!scroller) {

	      // we did not initialize yet, do that
	      // now and make sure we select the active
	      // tab on scroll update
	      scroller = scrollTabs$1(tabBarNode, {
	        selectors: {
	          tabsContainer: '.bpp-properties-tabs-links',
	          tab: '.bpp-properties-tabs-links li',
	          ignore: '.bpp-hidden',
	          active: '.bpp-active'
	        }
	      });


	      scroller.on('scroll', function(newActiveNode, oldActiveNode, direction) {

	        var linkNode = domQuery$1('[data-tab-target]', newActiveNode);

	        var tabId = domAttr(linkNode, 'data-tab-target');

	        self.activateTab(tabId);
	      });
	    }

	    // react on tab changes and or tabContainer resize
	    // and make sure the active tab is shown completely
	    scroller.update();
	  });

	  eventBus.on('elements.changed', function(e) {

	    var current = self._current;
	    var element = current && current.element;

	    if (element) {
	      if (e.elements.indexOf(element) !== -1) {
	        self.update(element);
	      }
	    }
	  });

	  eventBus.on([
	    'elementTemplates.changed',
	    'propertiesPanel.providersChanged'
	  ], function() {
	    var current = self._current;
	    var element = current && current.element;

	    if (element) {
	      self.update(element);
	    }
	  });

	  eventBus.on('diagram.destroy', function() {
	    self.detach();
	  });

	  this._container = domify$2('<div class="bpp-properties-panel"></div>');

	  this._bindListeners(this._container);

	  if (config && config.parent) {
	    this.attachTo(config.parent);
	  }
	};


	PropertiesPanel.prototype.attachTo = function(parentNode) {

	  if (!parentNode) {
	    throw new Error('parentNode required');
	  }

	  // ensure we detach from the
	  // previous, old parent
	  this.detach();

	  // unwrap jQuery if provided
	  if (parentNode.get && parentNode.constructor.prototype.jquery) {
	    parentNode = parentNode.get(0);
	  }

	  if (typeof parentNode === 'string') {
	    parentNode = domQuery$1(parentNode);
	  }

	  var container = this._container;

	  parentNode.appendChild(container);

	  this._emit('attach');
	};

	PropertiesPanel.prototype.detach = function() {

	  var container = this._container,
	      parentNode = container.parentNode;

	  if (!parentNode) {
	    return;
	  }

	  this._emit('detach');

	  parentNode.removeChild(container);
	};


	/**
	 * Activate tab. Fall back to first visible tab.
	 *
	 * @param {Object|string} tabId
	 */
	PropertiesPanel.prototype.activateTab = function(tabId) {
	  if (isObject_1(tabId)) {
	    tabId = tabId.id;
	  }

	  var tabs = domQueryAll('.bpp-properties-tab', this._current.panel),
	      tabLinks = domQueryAll('.bpp-properties-tab-link', this._current.panel);

	  // (1) Deactivate all tabs
	  forEach_1(tabs, function(tab) {
	    domClasses$1(tab).remove('bpp-active');
	  });

	  forEach_1(tabLinks, function(tabLink) {
	    domClasses$1(tabLink).remove('bpp-active');
	  });

	  // (2) Activate tab, fall back to first visible tab
	  var visibleTabs = filter_1(tabs, function(tab) {
	    return !domClasses$1(tab).has(HIDE_CLASS);
	  });

	  var activeTab = reduce_1(visibleTabs, function(activeTab, tab) {
	    if (domAttr(tab, 'data-tab') === tabId) {
	      return tab;
	    }

	    return activeTab;
	  }, visibleTabs[ 0 ]);

	  if (activeTab) {
	    domClasses$1(activeTab).add('bpp-active');
	  }

	  var visibleTabLinks = filter_1(tabLinks, function(tabLink) {
	    return !domClasses$1(tabLink).has(HIDE_CLASS);
	  });

	  var activeTabLink = reduce_1(visibleTabLinks, function(activeTabLink, tabLink) {
	    if (domAttr(domQuery$1('a[data-tab-target]', tabLink), 'data-tab-target') === tabId) {
	      return tabLink;
	    }

	    return activeTabLink;
	  }, visibleTabLinks[ 0 ]);

	  if (activeTabLink) {
	    domClasses$1(activeTabLink).add('bpp-active');
	  }
	};

	PropertiesPanel.prototype._getProviders = function() {

	  var event = this._eventBus.createEvent({
	    type: 'propertiesPanel.getProviders',
	    providers: []
	  });

	  this._eventBus.fire(event);

	  return event.providers;
	};

	PropertiesPanel.prototype._getTabs = function(element) {
	  var providers = this._getProviders();

	  // loop through all providers and their entries.
	  // group entries by id so that overriding an entry is possible
	  return reduce_1(providers, function(tabs, provider) {
	    var tabsOrUpdater = provider.getTabs(element);

	    if (isFunction_1(tabsOrUpdater)) {
	      return tabsOrUpdater(tabs);
	    } else {
	      return tabsOrUpdater;
	    }
	  }, []);
	};

	/**
	 * Update properties panel to show properties of element. Create new properties panel if no previous
	 * properties panel, element has changed or element has not changed but entries have.
	 *
	 * @param {ModdleElement|undefined} element
	 */
	PropertiesPanel.prototype.update = function(element) {

	  // (1) Fall back to root element
	  if (!element) {
	    element = this._canvas.getRootElement();
	  }

	  // (2) Get tabs
	  var tabs = this._getTabs(element);

	  var activeTabId,
	      activeTabNode;

	  if (this._current) {
	    activeTabNode = domQuery$1('.bpp-properties-tab.bpp-active', this._current.panel);

	    if (activeTabNode) {
	      activeTabId = domAttr(activeTabNode, 'data-tab');
	    }
	  }

	  // (3) Create new properties panel if necessary
	  if (!this._current
	    || this._current.element !== element
	    || this._entriesChanged(this._current.entries, extractEntries(tabs))) {

	    if (this._current) {
	      domRemove(this._current.panel);
	    }

	    this._current = this._create(element, tabs);
	  }

	  // (4) Update visibility of tabs, groups and entries
	  this._updateActivation(this._current);

	  // (5) Update active tab
	  if (activeTabId) {
	    this.activateTab(activeTabId);
	  } else {
	    this.activateTab(this._current.tabs[ 0 ]);
	  }

	  this._emit('changed');
	};


	/**
	 * Check whether entries have changes.
	 *
	 * @param  {Array} prevEntries
	 * @param  {Array} entries
	 *
	 * @returns {Boolean}
	 */
	PropertiesPanel.prototype._entriesChanged = function(prevEntries, entries) {
	  var prevEntryIds = keys_1(prevEntries),
	      entryIds = keys_1(entries);

	  return !isEmpty_1(xor_1(prevEntryIds, entryIds));
	};

	PropertiesPanel.prototype._emit = function(event) {
	  this._eventBus.fire('propertiesPanel.' + event, { panel: this, current: this._current });
	};

	PropertiesPanel.prototype._bindListeners = function(container) {

	  var self = this;

	  // handles a change for a given event
	  var handleChange = function handleChange(event) {

	    // see if we handle a change inside a [data-entry] element.
	    // if not, drop out
	    var inputNode = event.delegateTarget,
	        entryNode = domClosest(inputNode, '[data-entry]'),
	        entryId, entry;

	    // change from outside a [data-entry] element, simply ignore
	    if (!entryNode) {
	      return;
	    }

	    entryId = domAttr(entryNode, 'data-entry');
	    entry = self.getEntry(entryId);

	    var values = getFormControlValues(entryNode);

	    if (event.type === 'change') {

	      // - if the "data-on-change" attribute is present and a value is changed,
	      //   then the associated action is performed.
	      // - if the associated action returns "true" then an update to the business
	      //   object is done
	      // - if it does not return "true", then only the DOM content is updated
	      var onChangeAction = domAttr(inputNode, 'data-on-change');

	      if (onChangeAction) {
	        var isEntryDirty = self.executeAction(entry, entryNode, onChangeAction, event);

	        if (!isEntryDirty) {
	          return self.update(self._current.element);
	        }
	      }
	    }
	    self.applyChanges(entry, values, entryNode);
	    self.updateState(entry, entryNode);
	  };

	  // debounce update only elements that are target of key events,
	  // i.e. INPUT and TEXTAREA. SELECTs will trigger an immediate update anyway.
	  domDelegate.bind(container, 'input, textarea, [contenteditable]', 'input', debounce_1(handleChange, DEBOUNCE_DELAY));
	  domDelegate.bind(container, 'input, textarea, select, [contenteditable]', 'change', handleChange);

	  // paste as plain text only
	  domDelegate.bind(container, '[contenteditable]', 'paste', handlePaste);

	  function handlePaste(event) {
	    var text = (event.clipboardData || window.clipboardData).getData('text');
	    document.execCommand('insertText', false, text);

	    event.preventDefault();
	  }

	  // handle key events
	  domDelegate.bind(container, 'select', 'keydown', function(e) {

	    // DEL
	    if (e.keyCode === 46) {
	      e.stopPropagation();
	      e.preventDefault();
	    }
	  });

	  function handleSuggestItems(event) {

	    // triggers on all inputs
	    var inputNode = event.delegateTarget;

	    var entryNode = domClosest(inputNode, '[data-entry]');

	    // only work on data entries
	    if (!entryNode) {
	      return;
	    }

	    var action = domAttr(inputNode, 'data-auto-suggest'),
	        entryId = domAttr(entryNode, 'data-entry');

	    var entry = self.getEntry(entryId);

	    self.executeAction(entry, entryNode, action, event);
	  }

	  domDelegate.bind(container, '[data-auto-suggest]', 'input', handleSuggestItems, true);

	  domDelegate.bind(container, '[data-action]', 'click', function onClick(event) {

	    // triggers on all inputs
	    var inputNode = event.delegateTarget,
	        entryNode = domClosest(inputNode, '[data-entry]');

	    var actionId = domAttr(inputNode, 'data-action'),
	        entryId = domAttr(entryNode, 'data-entry');

	    var entry = self.getEntry(entryId);

	    var isEntryDirty = self.executeAction(entry, entryNode, actionId, event);

	    if (!isEntryDirty) {
	      return self.update(self._current.element);
	    }

	    var values = getFormControlValues(entryNode);

	    self.applyChanges(entry, values, entryNode);
	    self.updateState(entry, entryNode);
	  });

	  function handleInput(event, element) {

	    // triggers on all inputs
	    var inputNode = event.delegateTarget;

	    var entryNode = domClosest(inputNode, '[data-entry]');

	    // only work on data entries
	    if (!entryNode) {
	      return;
	    }

	    var eventHandlerId = domAttr(inputNode, 'data-blur'),
	        entryId = domAttr(entryNode, 'data-entry');

	    var entry = self.getEntry(entryId);

	    var isEntryDirty = self.executeAction(entry, entryNode, eventHandlerId, event);

	    if (isEntryDirty) {
	      var values = getFormControlValues(entryNode);

	      self.applyChanges(entry, values, entryNode);
	    }

	    self.updateState(entry, entryNode);
	  }

	  domDelegate.bind(container, '[data-blur]', 'blur', handleInput, true);

	  // make tab links interactive
	  domDelegate.bind(container, '.bpp-properties-tabs-links [data-tab-target]', 'click', function(event) {
	    event.preventDefault();

	    var delegateTarget = event.delegateTarget;

	    var tabId = domAttr(delegateTarget, 'data-tab-target');

	    // activate tab on link click
	    self.activateTab(tabId);
	  });

	};

	PropertiesPanel.prototype.updateState = function(entry, entryNode) {
	  this.updateShow(entry, entryNode);
	  this.updateDisable(entry, entryNode);
	};

	/**
	 * Update the visibility of the entry node in the DOM
	 */
	PropertiesPanel.prototype.updateShow = function(entry, node) {

	  var current = this._current;

	  if (!current) {
	    return;
	  }

	  var showNodes = domQueryAll('[data-show]', node) || [];

	  forEach_1(showNodes, function(showNode) {

	    var expr = domAttr(showNode, 'data-show');
	    var fn = get_1(entry, expr);
	    if (fn) {
	      var scope = domClosest(showNode, '[data-scope]') || node;
	      var shouldShow = fn(current.element, node, showNode, scope) || false;
	      if (shouldShow) {
	        domClasses$1(showNode).remove(HIDE_CLASS);
	      } else {
	        domClasses$1(showNode).add(HIDE_CLASS);
	      }
	    }
	  });
	};

	/**
	 * Evaluates a given function. If it returns true, then the
	 * node is marked as "disabled".
	 */
	PropertiesPanel.prototype.updateDisable = function(entry, node) {
	  var current = this._current;

	  if (!current) {
	    return;
	  }

	  var nodes = domQueryAll('[data-disable]', node) || [];

	  forEach_1(nodes, function(currentNode) {
	    var expr = domAttr(currentNode, 'data-disable');
	    var fn = get_1(entry, expr);
	    if (fn) {
	      var scope = domClosest(currentNode, '[data-scope]') || node;
	      var shouldDisable = fn(current.element, node, currentNode, scope) || false;
	      domAttr(currentNode, 'disabled', shouldDisable ? '' : null);
	    }
	  });
	};

	PropertiesPanel.prototype.executeAction = function(entry, entryNode, actionId, event) {
	  var current = this._current;

	  if (!current) {
	    return;
	  }

	  var fn = get_1(entry, actionId);
	  if (fn) {
	    var scopeNode = domClosest(event.target, '[data-scope]') || entryNode;
	    return fn.apply(entry, [ current.element, entryNode, event, scopeNode ]);
	  }
	};

	/**
	 * Apply changes to the business object by executing a command
	 */
	PropertiesPanel.prototype.applyChanges = function(entry, values, containerElement) {

	  var element = this._current.element;

	  // ensure we only update the model if we got dirty changes
	  if (valuesEqual(values, entry.oldValues)) {
	    return;
	  }

	  var command = entry.set(element, values, containerElement);

	  var commandToExecute;

	  if (isArray_1(command)) {
	    if (command.length) {
	      commandToExecute = {
	        cmd: 'properties-panel.multi-command-executor',
	        context: flattenDeep_1(command)
	      };
	    }
	  } else {
	    commandToExecute = command;
	  }

	  if (commandToExecute) {
	    this._commandStack.execute(commandToExecute.cmd, commandToExecute.context || { element : element });
	  } else {
	    this.update(element);
	  }
	};


	/**
	 * apply validation errors in the DOM and show or remove an error message near the entry node.
	 */
	PropertiesPanel.prototype.applyValidationErrors = function(validationErrors, entryNode) {

	  var valid = true;

	  var controlNodes = getFormControls(entryNode, true);

	  forEach_1(controlNodes, function(controlNode) {

	    var name = domAttr(controlNode, 'name') || domAttr(controlNode, 'data-name');

	    var error = validationErrors && validationErrors[name];

	    var errorMessageNode = domQuery$1('.bpp-error-message', controlNode.parentNode);

	    if (error) {
	      valid = false;

	      if (!errorMessageNode) {
	        errorMessageNode = domify$2('<div></div>');

	        domClasses$1(errorMessageNode).add('bpp-error-message');

	        // insert errorMessageNode after controlNode
	        controlNode.parentNode.insertBefore(errorMessageNode, controlNode.nextSibling);
	      }

	      errorMessageNode.textContent = error;

	      domClasses$1(controlNode).add('invalid');
	    } else {
	      domClasses$1(controlNode).remove('invalid');

	      if (errorMessageNode) {
	        controlNode.parentNode.removeChild(errorMessageNode);
	      }
	    }
	  });

	  return valid;
	};


	/**
	 * Check if the entry contains valid input
	 */
	PropertiesPanel.prototype.validate = function(entry, values, entryNode) {
	  var self = this;

	  var current = this._current;

	  var valid = true;

	  entryNode = entryNode || domQuery$1('[data-entry="' + entry.id + '"]', current.panel);

	  if (values instanceof Array) {
	    var listContainer = domQuery$1('[data-list-entry-container]', entryNode),
	        listEntryNodes = listContainer.children || [];

	    // create new elements
	    for (var i = 0; i < values.length; i++) {
	      var listValue = values[i];

	      if (entry.validateListItem) {

	        var validationErrors = entry.validateListItem(current.element, listValue, entryNode, i),
	            listEntryNode = listEntryNodes[i];

	        valid = self.applyValidationErrors(validationErrors, listEntryNode) && valid;
	      }
	    }
	  } else {
	    if (entry.validate) {
	      this.validationErrors = entry.validate(current.element, values, entryNode);

	      valid = self.applyValidationErrors(this.validationErrors, entryNode) && valid;
	    }
	  }

	  return valid;
	};

	PropertiesPanel.prototype.getEntry = function(id) {
	  return this._current && this._current.entries[id];
	};

	PropertiesPanel.prototype._create = function(element, tabs) {

	  if (!element) {
	    return null;
	  }

	  var containerNode = this._container;

	  var panelNode = this._createPanel(element, tabs);

	  containerNode.appendChild(panelNode);

	  var entries = extractEntries(tabs);
	  var groups = extractGroups(tabs);

	  return {
	    tabs: tabs,
	    groups: groups,
	    entries: entries,
	    element: element,
	    panel: panelNode
	  };
	};

	/**
	 * Update variable parts of the entry node on element changes.
	 *
	 * @param {djs.model.Base} element
	 * @param {EntryDescriptor} entry
	 * @param {Object} values
	 * @param {HTMLElement} entryNode
	 * @param {Number} idx
	 */
	PropertiesPanel.prototype._bindTemplate = function(element, entry, values, entryNode, idx) {

	  var eventBus = this._eventBus;

	  function isPropertyEditable(entry, propertyName) {
	    return eventBus.fire('propertiesPanel.isPropertyEditable', {
	      entry: entry,
	      propertyName: propertyName,
	      element: element
	    });
	  }

	  var inputNodes = getPropertyPlaceholders(entryNode);

	  forEach_1(inputNodes, function(node) {

	    var name,
	        newValue,
	        editable;

	    // we deal with an input element
	    if ('value' in node || isContentEditable(node) === 'true') {
	      name = domAttr(node, 'name') || domAttr(node, 'data-name');
	      newValue = values[name];

	      editable = isPropertyEditable(entry, name);
	      if (editable && entry.editable) {
	        editable = entry.editable(element, entryNode, node, name, newValue, idx);
	      }

	      domAttr(node, 'readonly', editable ? null : '');
	      domAttr(node, 'disabled', editable ? null : '');

	      // take full control over setting the value
	      // and possibly updating the input in entry#setControlValue
	      if (entry.setControlValue) {
	        entry.setControlValue(element, entryNode, node, name, newValue, idx);
	      } else if (isToggle(node)) {
	        setToggleValue(node, newValue);
	      } else if (isSelect(node)) {
	        setSelectValue(node, newValue);
	      } else {
	        setInputValue(node, newValue);
	      }
	    }

	    // we deal with some non-editable html element
	    else {
	      name = domAttr(node, 'data-value');
	      newValue = values[name];
	      if (entry.setControlValue) {
	        entry.setControlValue(element, entryNode, node, name, newValue, idx);
	      } else {
	        setTextValue(node, newValue);
	      }
	    }
	  });
	};

	// TODO(nikku): WTF freaking name? Change / clarify.
	PropertiesPanel.prototype._updateActivation = function(current) {
	  var self = this;

	  var eventBus = this._eventBus;

	  var element = current.element;

	  function isEntryVisible(entry, group, tab) {
	    return eventBus.fire('propertiesPanel.isEntryVisible', {
	      element: element,
	      entry: entry,
	      group: group,
	      tab: tab
	    });
	  }

	  function isGroupVisible(group, element, groupNode) {
	    if (isFunction_1(group.enabled)) {
	      return group.enabled(element, groupNode);
	    } else {
	      return true;
	    }
	  }

	  function isTabVisible(tab, element) {
	    if (isFunction_1(tab.enabled)) {
	      return tab.enabled(element);
	    } else {
	      return true;
	    }
	  }

	  function toggleVisible(node, visible) {
	    domClasses$1(node).toggle(HIDE_CLASS, !visible);
	  }

	  function updateLabel(element, selector, text) {
	    var labelNode = domQuery$1(selector, element);

	    if (!labelNode) {
	      return;
	    }

	    labelNode.textContent = text;
	  }

	  var panelNode = current.panel;

	  forEach_1(current.tabs, function(tab) {

	    var tabNode = domQuery$1('[data-tab=' + tab.id + ']', panelNode);
	    var tabLinkNode = domQuery$1('[data-tab-target=' + tab.id + ']', panelNode).parentNode;

	    var tabVisible = false;

	    forEach_1(tab.groups, function(group) {

	      var groupVisible = false;

	      var groupNode = domQuery$1('[data-group=' + group.id + ']', tabNode);

	      forEach_1(group.entries, function(entry) {

	        var entryNode = domQuery$1('[data-entry="' + entry.id + '"]', groupNode);

	        var entryVisible = isEntryVisible(entry, group, tab);

	        groupVisible = groupVisible || entryVisible;

	        toggleVisible(entryNode, entryVisible);

	        var values = 'get' in entry ? entry.get(element, entryNode) : {};

	        if (values instanceof Array) {
	          var listEntryContainer = domQuery$1('[data-list-entry-container]', entryNode);
	          var existingElements = listEntryContainer.children || [];

	          for (var i = 0; i < values.length; i++) {
	            var listValue = values[i];
	            var listItemNode = existingElements[i];
	            if (!listItemNode) {
	              listItemNode = domify$2(entry.createListEntryTemplate(listValue, i, listEntryContainer));
	              listEntryContainer.appendChild(listItemNode);
	            }
	            domAttr(listItemNode, 'data-index', i);

	            self._bindTemplate(element, entry, listValue, listItemNode, i);
	          }

	          var entriesToRemove = existingElements.length - values.length;

	          for (var j = 0; j < entriesToRemove; j++) {

	            // remove orphaned element
	            listEntryContainer.removeChild(listEntryContainer.lastChild);
	          }

	        } else {
	          self._bindTemplate(element, entry, values, entryNode);
	        }

	        // update conditionally visible elements
	        self.updateState(entry, entryNode);
	        self.validate(entry, values, entryNode);

	        // remember initial state for later dirty checking
	        entry.oldValues = getFormControlValues(entryNode);
	      });

	      if (typeof group.label === 'function') {
	        updateLabel(groupNode, '.group-label', group.label(element, groupNode));
	      }

	      groupVisible = groupVisible && isGroupVisible(group, element, groupNode);

	      tabVisible = tabVisible || groupVisible;

	      toggleVisible(groupNode, groupVisible);
	    });

	    tabVisible = tabVisible && isTabVisible(tab, element);

	    toggleVisible(tabNode, tabVisible);
	    toggleVisible(tabLinkNode, tabVisible);
	  });

	  // inject elements id into header
	  updateLabel(panelNode, '[data-label-id]', getBusinessObject$2(element).id || '');
	};

	PropertiesPanel.prototype._createPanel = function(element, tabs) {
	  var self = this;

	  var panelNode = domify$2('<div class="bpp-properties"></div>'),
	      headerNode = domify$2('<div class="bpp-properties-header">' +
	        '<div class="label" data-label-id></div>' +
	      '</div>'),
	      tabBarNode = domify$2('<div class="bpp-properties-tab-bar"></div>'),
	      tabLinksNode = domify$2('<ul class="bpp-properties-tabs-links"></ul>'),
	      tabContainerNode = domify$2('<div class="bpp-properties-tabs-container"></div>');

	  panelNode.appendChild(headerNode);

	  forEach_1(tabs, function(tab, tabIndex) {

	    if (!tab.id) {
	      throw new Error('tab must have an id');
	    }

	    var tabNode = domify$2('<div class="bpp-properties-tab" data-tab="' + escapeHTML$2(tab.id) + '"></div>'),
	        tabLinkNode = domify$2('<li class="bpp-properties-tab-link">' +
	          '<a href data-tab-target="' + escapeHTML$2(tab.id) + '">' + escapeHTML$2(tab.label) + '</a>' +
	        '</li>');

	    var groups = tab.groups;

	    forEach_1(groups, function(group) {

	      if (!group.id) {
	        throw new Error('group must have an id');
	      }

	      var groupNode = domify$2('<div class="bpp-properties-group" data-group="' + escapeHTML$2(group.id) + '">' +
	          '<span class="group-toggle"></span>' +
	          '<div class="group-header">' +
	            '<span class="group-label">' + escapeHTML$2(group.label) + '</span>' +
	          '</div>' +
	        '</div>');

	      if (group.dropdown) {
	        domQuery$1('.group-header', groupNode).appendChild(createDropdown$1(group.dropdown));
	      }

	      // TODO(nre): use event delegation to handle that...
	      groupNode.querySelector('.group-toggle').addEventListener('click', function(evt) {
	        domClasses$1(groupNode).toggle('group-closed');
	        evt.preventDefault();
	        evt.stopPropagation();
	      });
	      groupNode.addEventListener('click', function(evt) {
	        if (!evt.defaultPrevented && domClasses$1(groupNode).has('group-closed')) {
	          domClasses$1(groupNode).remove('group-closed');
	        }
	      });

	      forEach_1(group.entries, function(entry) {

	        if (!entry.id) {
	          throw new Error('entry must have an id');
	        }

	        var html = entry.html;

	        if (typeof html === 'string') {
	          html = domify$2(html);
	        }

	        // unwrap jquery
	        if (html.get && html.constructor.prototype.jquery) {
	          html = html.get(0);
	        }

	        var entryNode = domify$2('<div class="bpp-properties-entry" data-entry="' + escapeHTML$2(entry.id) + '"></div>');

	        forEach_1(entry.cssClasses || [], function(cssClass) {
	          domClasses$1(entryNode).add(cssClass);
	        });

	        entryNode.appendChild(html);

	        groupNode.appendChild(entryNode);

	        // update conditionally visible elements
	        self.updateState(entry, entryNode);
	      });

	      tabNode.appendChild(groupNode);
	    });

	    tabLinksNode.appendChild(tabLinkNode);
	    tabContainerNode.appendChild(tabNode);
	  });

	  tabBarNode.appendChild(tabLinksNode);

	  panelNode.appendChild(tabBarNode);
	  panelNode.appendChild(tabContainerNode);

	  return panelNode;
	};



	function setInputValue(node, value) {

	  var contentEditable = isContentEditable(node);

	  var oldValue = contentEditable ? node.innerText : node.value;

	  var selection;

	  // prevents input fields from having the value 'undefined'
	  if (value === undefined) {
	    value = '';
	  }

	  if (oldValue === value) {
	    return;
	  }

	  // update selection on undo/redo
	  if (document.activeElement === node) {
	    selection = selectionUpdate(getSelection(node), oldValue, value);
	  }

	  if (contentEditable) {
	    node.innerText = value;
	  } else {
	    node.value = value;
	  }

	  if (selection) {
	    setSelection(node, selection);
	  }
	}

	function setSelectValue(node, value) {
	  if (value !== undefined) {
	    node.value = value;
	  }
	}

	function setToggleValue(node, value) {
	  var nodeValue = node.value;

	  node.checked = (value === nodeValue) || (!domAttr(node, 'value') && value);
	}

	function setTextValue(node, value) {
	  node.textContent = value;
	}

	function getSelection(node) {

	  return isContentEditable(node) ? getContentEditableSelection(node) : {
	    start: node.selectionStart,
	    end: node.selectionEnd
	  };
	}

	function getContentEditableSelection(node) {

	  var selection = window.getSelection();

	  var focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset,
	      anchorOffset = selection.anchorOffset;

	  if (!focusNode) {
	    throw new Error('not selected');
	  }

	  // verify we have selection on the current element
	  if (!node.contains(focusNode)) {
	    throw new Error('not selected');
	  }

	  return {
	    start: Math.min(focusOffset, anchorOffset),
	    end: Math.max(focusOffset, anchorOffset)
	  };
	}

	function setSelection(node, selection) {

	  if (isContentEditable(node)) {
	    setContentEditableSelection(node, selection);
	  } else {
	    node.selectionStart = selection.start;
	    node.selectionEnd = selection.end;
	  }
	}

	function setContentEditableSelection(node, selection) {

	  var focusNode,
	      domRange,
	      domSelection;

	  focusNode = node.firstChild || node,
	  domRange = document.createRange();
	  domRange.setStart(focusNode, selection.start);
	  domRange.setEnd(focusNode, selection.end);

	  domSelection = window.getSelection();
	  domSelection.removeAllRanges();
	  domSelection.addRange(domRange);
	}

	function isImplicitRoot(element) {
	  return element.id === '__implicitroot';
	}

	var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(translate$3);

	var lib = {
	  __depends__: [
	    cmd,
	    require$$1$1.default
	  ],
	  __init__: [ 'propertiesPanel' ],
	  propertiesPanel: [ 'type', PropertiesPanel_1 ]
	};

	var bpmnJsPropertiesPanel = lib;

	var DEFAULT_PRIORITY$7 = 1000;


	/**
	 * A component that decides upon the visibility / editable
	 * state of properties in the properties panel.
	 *
	 * Implementors must subclass this component and override
	 * {@link PropertiesActivator#isEntryVisible} and
	 * {@link PropertiesActivator#isPropertyEditable} to provide
	 * custom behavior.
	 *
	 * @class
	 * @constructor
	 *
	 * @param {EventBus} eventBus
	 * @param {Number} [priority] at which priority to hook into the activation
	 */
	function PropertiesActivator(eventBus, priority) {
	  var self = this;

	  priority = priority || DEFAULT_PRIORITY$7;

	  eventBus.on('propertiesPanel.isEntryVisible', priority, function(context) {
	    var element = context.element,
	        entry = context.entry,
	        group = context.group,
	        tab = context.tab;

	    return self.isEntryVisible(element, entry, group, tab);
	  });

	  eventBus.on('propertiesPanel.isPropertyEditable', priority, function(context) {
	    var element = context.element,
	        entry = context.entry,
	        group = context.group,
	        propertyName = context.propertyName,
	        tab = context.tab;

	    return self.isPropertyEditable(propertyName, element, entry, group, tab);
	  });
	}

	PropertiesActivator.$inject = [ 'eventBus' ];

	var PropertiesActivator_1 = PropertiesActivator;


	/**
	 * Should the given entry be visible for the specified element.
	 *
	 * @method  PropertiesActivator#isEntryVisible
	 *
	 * @param {ModdleElement} element
	 * @param {Object} entry
	 * @param {Object} group
	 * @param {Object} tab
	 *
	 * @returns {boolean}
	 */
	PropertiesActivator.prototype.isEntryVisible = function(element, entry, group, tab) {
	  return true;
	};

	/**
	 * Should the given property be editable for the specified element
	 *
	 * @method  PropertiesActivator#isPropertyEditable
	 *
	 * @param {string} propertyName
	 * @param {ModdleElement} element
	 * @param {Object} entry
	 * @param {Object} group
	 * @param {Object} tab
	 *
	 * @returns {boolean}
	 */
	PropertiesActivator.prototype.isPropertyEditable = function(propertyName, element, entry, group, tab) {
	  return true;
	};

	var domify$3 = require$$1.domify,
	    domClasses$2 = require$$1.classes,
	    domEvent = require$$1.event;

	var escapeHTML$3 = Utils.escapeHTML;

	var MAX_DESCRIPTION_LENGTH = 200;

	/**
	 * Create a linkified and HTML escaped entry field description.
	 *
	 * As a special feature, this description may contain both markdown,
	 * plain <a href> links and <br />
	 *
	 * @param {string} description
	 * @param {object} [options]
	 * @param {string} [options.show] - name of callback to determine whether description is shown
	 */
	var EntryFieldDescription = function entryFieldDescription(translate, description, options) {
	  var show = options && options.show;

	  // we tokenize the description to extract text, HTML and markdown links
	  // text, links and new lines are handled seperately

	  var escaped = [];

	  // match markdown [{TEXT}]({URL}) and HTML links <a href="{URL}">{TEXT}</a>
	  var pattern = /(?:\[([^\]]+)\]\((https?:\/\/[^)]+)\))|(?:<a href="(https?:\/\/[^"]+)">(.+?(?=<\/))<\/a>)/gi;

	  var index = 0;
	  var match;
	  var link, text;

	  while ((match = pattern.exec(description))) {

	    // escape + insert text before match
	    if (match.index > index) {
	      escaped.push(escapeText(description.substring(index, match.index)));
	    }

	    link = match[2] && encodeURI(match[2]) || match[3];
	    text = match[1] || match[4];

	    // insert safe link
	    escaped.push('<a href="' + link + '" target="_blank">' + escapeText(text) + '</a>');

	    index = match.index + match[0].length;
	  }

	  // escape and insert text after last match
	  if (index < description.length) {
	    escaped.push(escapeText(description.substring(index)));
	  }

	  description = escaped.join('');

	  var html = domify$3(
	    '<div class="bpp-field-description description description--expanded"' +
	    (show ? 'data-show="' + show + '">' : '>') +
	    '</div>'
	  );

	  var descriptionText = domify$3('<span class="description__text">' + description + '</span>');

	  html.appendChild(descriptionText);

	  function toggleExpanded(expanded) {
	    if (expanded) {
	      domClasses$2(html).add('description--expanded');

	      descriptionText.textContent = description + ' ';

	      expand.textContent = translate('Less');
	    } else {
	      domClasses$2(html).remove('description--expanded');

	      descriptionText.textContent = descriptionShortened + ' ... ';

	      expand.textContent = translate('More');
	    }
	  }

	  var descriptionShortened,
	      expand,
	      expanded = false;

	  if (description.length > MAX_DESCRIPTION_LENGTH) {
	    descriptionShortened = description.slice(0, MAX_DESCRIPTION_LENGTH);

	    expand = domify$3(
	      '<span class="bpp-entry-link description__expand">' +
	        translate('More') +
	      '</span>'
	    );

	    domEvent.bind(expand, 'click', function() {
	      expanded = !expanded;

	      toggleExpanded(expanded);
	    });

	    html.appendChild(expand);

	    toggleExpanded(expanded);
	  }

	  return html;
	};

	function escapeText(text) {
	  var match, index = 0, escaped = [];

	  // match new line <br/> <br /> <br.... /> etc.
	  var pattern = /<br\s*\/?>/gi;

	  while ((match = pattern.exec(text))) {

	    if (match.index > index) {
	      escaped.push(escapeHTML$3(text.substring(index, match.index)));
	    }

	    escaped.push('<br />');

	    index = match.index + match[0].length;
	  }

	  if (index < text.length) {
	    escaped.push(escapeHTML$3(text.substring(index)));
	  }

	  return escaped.join('');
	}

	var escapeHTML$4 = Utils.escapeHTML;

	var domify$4 = require$$1.domify,
	    domQuery$2 = require$$1.query;




	var textField = function(translate, options, defaultParameters) {

	  // Default action for the button next to the input-field
	  var defaultButtonAction = function(element, inputNode) {
	    var input = domQuery$2('input[name="' + options.modelProperty + '"]', inputNode);
	    input.value = '';

	    return true;
	  };

	  // default method to determine if the button should be visible
	  var defaultButtonShow = function(element, inputNode) {
	    var input = domQuery$2('input[name="' + options.modelProperty + '"]', inputNode);

	    return input.value !== '';
	  };


	  var resource = defaultParameters,
	      label = options.label || resource.id,
	      dataValueLabel = options.dataValueLabel,
	      buttonLabel = (options.buttonLabel || 'X'),
	      actionName = (typeof options.buttonAction != 'undefined') ? options.buttonAction.name : 'clear',
	      actionMethod = (typeof options.buttonAction != 'undefined') ? options.buttonAction.method : defaultButtonAction,
	      showName = (typeof options.buttonShow != 'undefined') ? options.buttonShow.name : 'canClear',
	      showMethod = (typeof options.buttonShow != 'undefined') ? options.buttonShow.method : defaultButtonShow,
	      canBeDisabled = !!options.disabled && typeof options.disabled === 'function',
	      canBeHidden = !!options.hidden && typeof options.hidden === 'function',
	      description = options.description;

	  resource.html =
	    domify$4('<label for="camunda-' + escapeHTML$4(resource.id) + '" ' +
	      (canBeDisabled ? 'data-disable="isDisabled" ' : '') +
	      (canBeHidden ? 'data-show="isHidden" ' : '') +
	      (dataValueLabel ? 'data-value="' + escapeHTML$4(dataValueLabel) + '"' : '') + '>'+ escapeHTML$4(label) +'</label>' +
	    '<div class="bpp-field-wrapper" ' +
	      (canBeDisabled ? 'data-disable="isDisabled"' : '') +
	      (canBeHidden ? 'data-show="isHidden"' : '') +
	      '>' +
	      '<input id="camunda-' + escapeHTML$4(resource.id) + '" type="text" name="' + escapeHTML$4(options.modelProperty) + '" ' +
	        (canBeDisabled ? 'data-disable="isDisabled"' : '') +
	        (canBeHidden ? 'data-show="isHidden"' : '') +
	        ' />' +
	      '<button class="action-button ' + escapeHTML$4(actionName) + '" data-action="' + escapeHTML$4(actionName) + '" data-show="' + escapeHTML$4(showName) + '" ' +
	        (canBeDisabled ? 'data-disable="isDisabled"' : '') +
	        (canBeHidden ? ' data-show="isHidden"' : '') + '>' +
	        '<span>' + escapeHTML$4(buttonLabel) + '</span>' +
	      '</button>' +
	    '</div>');

	  // add description below text input entry field
	  if (description) {
	    resource.html.appendChild(EntryFieldDescription(translate, description, { show: canBeHidden && 'isHidden' }));
	  }

	  resource[actionName] = actionMethod;
	  resource[showName] = showMethod;

	  if (canBeDisabled) {
	    resource.isDisabled = function() {
	      return options.disabled.apply(resource, arguments);
	    };
	  }

	  if (canBeHidden) {
	    resource.isHidden = function() {
	      return !options.hidden.apply(resource, arguments);
	    };
	  }

	  resource.cssClasses = ['bpp-textfield'];

	  return resource;
	};

	var TextInputEntryFactory = textField;

	var CmdHelper = {};
	var CmdHelper_1 = CmdHelper;

	CmdHelper.updateProperties = function(element, properties) {
	  return {
	    cmd: 'element.updateProperties',
	    context: { element: element, properties: properties }
	  };
	};

	CmdHelper.updateBusinessObject = function(element, businessObject, newProperties) {
	  return {
	    cmd: 'properties-panel.update-businessobject',
	    context: {
	      element: element,
	      businessObject: businessObject,
	      properties: newProperties
	    }
	  };
	};

	CmdHelper.addElementsTolist = function(element, businessObject, listPropertyName, objectsToAdd, objectsToPrepend) {
	  return {
	    cmd: 'properties-panel.update-businessobject-list',
	    context: {
	      element: element,
	      currentObject: businessObject,
	      propertyName: listPropertyName,
	      objectsToPrepend: objectsToPrepend,
	      objectsToAdd: objectsToAdd
	    }
	  };
	};

	CmdHelper.removeElementsFromList = function(element, businessObject, listPropertyName, referencePropertyName, objectsToRemove) {

	  return {
	    cmd: 'properties-panel.update-businessobject-list',
	    context: {
	      element: element,
	      currentObject: businessObject,
	      propertyName: listPropertyName,
	      referencePropertyName: referencePropertyName,
	      objectsToRemove: objectsToRemove
	    }
	  };
	};


	CmdHelper.addAndRemoveElementsFromList = function(element, businessObject, listPropertyName, referencePropertyName, objectsToAdd, objectsToRemove) {

	  return {
	    cmd: 'properties-panel.update-businessobject-list',
	    context: {
	      element: element,
	      currentObject: businessObject,
	      propertyName: listPropertyName,
	      referencePropertyName: referencePropertyName,
	      objectsToAdd: objectsToAdd,
	      objectsToRemove: objectsToRemove
	    }
	  };
	};


	CmdHelper.setList = function(element, businessObject, listPropertyName, updatedObjectList) {
	  return {
	    cmd: 'properties-panel.update-businessobject-list',
	    context: {
	      element: element,
	      currentObject: businessObject,
	      propertyName: listPropertyName,
	      updatedObjectList: updatedObjectList
	    }
	  };
	};

	var domify$5 = require$$1.domify;

	var getBusinessObject$3 = require$$0$1.getBusinessObject,
	    escapeHTML$5 = Utils.escapeHTML;




	var checkbox = function(translate, options, defaultParameters) {
	  var resource = defaultParameters,
	      id = resource.id,
	      label = options.label || id,
	      canBeDisabled = !!options.disabled && typeof options.disabled === 'function',
	      canBeHidden = !!options.hidden && typeof options.hidden === 'function',
	      description = options.description;

	  resource.html =
	    domify$5('<input id="camunda-' + escapeHTML$5(id) + '" ' +
	         'type="checkbox" ' +
	         'name="' + escapeHTML$5(options.modelProperty) + '" ' +
	         (canBeDisabled ? 'data-disable="isDisabled"' : '') +
	         (canBeHidden ? 'data-show="isHidden"' : '') +
	         ' />' +
	    '<label for="camunda-' + escapeHTML$5(id) + '" ' +
	         (canBeDisabled ? 'data-disable="isDisabled"' : '') +
	         (canBeHidden ? 'data-show="isHidden"' : '') +
	         '>' + escapeHTML$5(label) + '</label>');

	  // add description below checkbox entry field
	  if (description) {
	    resource.html.appendChild(EntryFieldDescription(translate, description, { show: canBeHidden && 'isHidden' }));
	  }

	  resource.get = function(element) {
	    var bo = getBusinessObject$3(element),
	        res = {};

	    res[options.modelProperty] = bo.get(options.modelProperty);

	    return res;
	  };

	  resource.set = function(element, values) {
	    var res = {};

	    res[options.modelProperty] = !!values[options.modelProperty];

	    return CmdHelper_1.updateProperties(element, res);
	  };

	  if (typeof options.set === 'function') {
	    resource.set = options.set;
	  }

	  if (typeof options.get === 'function') {
	    resource.get = options.get;
	  }

	  if (canBeDisabled) {
	    resource.isDisabled = function() {
	      return options.disabled.apply(resource, arguments);
	    };
	  }

	  if (canBeHidden) {
	    resource.isHidden = function() {
	      return !options.hidden.apply(resource, arguments);
	    };
	  }

	  resource.cssClasses = ['bpp-checkbox'];

	  return resource;
	};

	var CheckboxEntryFactory = checkbox;

	var escapeHTML$6 = Utils.escapeHTML;

	var domify$6 = require$$1.domify,
	    domQuery$3 = require$$1.query;






	var isList = function(list) {
	  return !(!list || Object.prototype.toString.call(list) !== '[object Array]');
	};

	var addEmptyParameter$1 = function(list) {
	  return list.concat([ { name: '', value: '' } ]);
	};

	var createOption = function(option) {
	  return '<option value="' + option.value + '">' + option.name + '</option>';
	};

	/**
	 * @param  {Object} options
	 * @param  {string} options.id
	 * @param  {string} [options.label]
	 * @param  {Array<Object>} options.selectOptions
	 * @param  {string} options.modelProperty
	 * @param  {boolean} options.emptyParameter
	 * @param  {function} options.disabled
	 * @param  {function} options.hidden
	 * @param  {Object} defaultParameters
	 *
	 * @return {Object}
	 */
	var selectbox = function(translate, options, defaultParameters) {
	  var resource = defaultParameters,
	      label = options.label || resource.id,
	      selectOptions = options.selectOptions || [ { name: '', value: '' } ],
	      modelProperty = options.modelProperty,
	      emptyParameter = options.emptyParameter,
	      canBeDisabled = !!options.disabled && typeof options.disabled === 'function',
	      canBeHidden = !!options.hidden && typeof options.hidden === 'function',
	      description = options.description;


	  if (emptyParameter) {
	    selectOptions = addEmptyParameter$1(selectOptions);
	  }


	  resource.html =
	    domify$6('<label for="camunda-' + escapeHTML$6(resource.id) + '"' +
	    (canBeDisabled ? 'data-disable="isDisabled" ' : '') +
	    (canBeHidden ? 'data-show="isHidden" ' : '') +
	    '>' + escapeHTML$6(label) + '</label>' +
	    '<select id="camunda-' + escapeHTML$6(resource.id) + '-select" name="' +
	    escapeHTML$6(modelProperty) + '"' +
	    (canBeDisabled ? 'data-disable="isDisabled" ' : '') +
	    (canBeHidden ? 'data-show="isHidden" ' : '') +
	    ' data-value></select>');

	  var select = domQuery$3('select', resource.html);

	  if (isList(selectOptions)) {
	    forEach_1(selectOptions, function(option) {
	      select.appendChild(
	        domify$6(
	          '<option value="' + escapeHTML$6(option.value) +
	          (option.title ? '" title="' + escapeHTML$6(option.title) : '') +
	          '">' +
	          (option.name ? escapeHTML$6(option.name) : '') +
	          '</option>'
	        )
	      );
	    });
	  }

	  // add description below select box entry field
	  if (description && typeof options.showCustomInput !== 'function') {
	    resource.html.appendChild(EntryFieldDescription(translate, description, { show: canBeHidden && 'isHidden' }));
	  }

	  /**
	   * Fill the select box options dynamically.
	   *
	   * Calls the defined function #selectOptions in the entry to get the
	   * values for the options and set the value to the inputNode.
	   *
	   * @param {djs.model.Base} element
	   * @param {HTMLElement} entryNode
	   * @param {EntryDescriptor} inputNode
	   * @param {Object} inputName
	   * @param {Object} newValue
	   */
	  resource.setControlValue = function(element, entryNode, inputNode, inputName, newValue) {
	    if (typeof selectOptions === 'function') {

	      var options = selectOptions(element, inputNode);

	      if (options) {

	        // remove existing options
	        while (inputNode.firstChild) {
	          inputNode.removeChild(inputNode.firstChild);
	        }

	        // add options
	        forEach_1(options, function(option) {
	          var template = domify$6(createOption(option));

	          inputNode.appendChild(template);
	        });


	      }
	    }

	    // set select value
	    if (newValue !== undefined) {
	      inputNode.value = newValue;
	    }

	  };

	  if (canBeDisabled) {
	    resource.isDisabled = function() {
	      return options.disabled.apply(resource, arguments);
	    };
	  }

	  if (canBeHidden) {
	    resource.isHidden = function() {
	      return !options.hidden.apply(resource, arguments);
	    };
	  }

	  resource.cssClasses = ['bpp-dropdown'];

	  return resource;
	};

	var SelectEntryFactory = selectbox;

	/** Used for built-in method references. */
	var objectProto$d = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$c = objectProto$d.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty$c.call(object, key) && eq_1(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    _baseAssignValue(object, key, value);
	  }
	}

	var _assignValue = assignValue;

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject$1(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      _baseAssignValue(object, key, newValue);
	    } else {
	      _assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}

	var _copyObject = copyObject$1;

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject_1(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike_1(object) && _isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq_1(object[index], value);
	  }
	  return false;
	}

	var _isIterateeCall = isIterateeCall;

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return _baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;

	    if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	var _createAssigner = createAssigner;

	/** Used for built-in method references. */
	var objectProto$e = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$d = objectProto$e.hasOwnProperty;

	/**
	 * Assigns own enumerable string keyed properties of source objects to the
	 * destination object. Source objects are applied from left to right.
	 * Subsequent sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object` and is loosely based on
	 * [`Object.assign`](https://mdn.io/Object/assign).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assignIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assign({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var assign$1 = _createAssigner(function(object, source) {
	  if (_isPrototype(source) || isArrayLike_1(source)) {
	    _copyObject(source, keys_1(source), object);
	    return;
	  }
	  for (var key in source) {
	    if (hasOwnProperty$d.call(source, key)) {
	      _assignValue(object, key, source[key]);
	    }
	  }
	});

	var assign_1 = assign$1;

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} findIndexFunc The function to find the collection index.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(findIndexFunc) {
	  return function(collection, predicate, fromIndex) {
	    var iterable = Object(collection);
	    if (!isArrayLike_1(collection)) {
	      var iteratee = _baseIteratee(predicate);
	      collection = keys_1(collection);
	      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	    }
	    var index = findIndexFunc(collection, predicate, fromIndex);
	    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	  };
	}

	var _createFind = createFind;

	/** Used as references for various `Number` constants. */
	var INFINITY$4 = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber_1(value);
	  if (value === INFINITY$4 || value === -INFINITY$4) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	var toFinite_1 = toFinite;

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite_1(value),
	      remainder = result % 1;

	  return result === result ? (remainder ? result - remainder : result) : 0;
	}

	var toInteger_1 = toInteger;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$2 = Math.max;

	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(o) { return o.user == 'barney'; });
	 * // => 0
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findIndex(users, ['active', false]);
	 * // => 0
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findIndex(users, 'active');
	 * // => 2
	 */
	function findIndex$1(array, predicate, fromIndex) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return -1;
	  }
	  var index = fromIndex == null ? 0 : toInteger_1(fromIndex);
	  if (index < 0) {
	    index = nativeMax$2(length + index, 0);
	  }
	  return _baseFindIndex(array, _baseIteratee(predicate), index);
	}

	var findIndex_1 = findIndex$1;

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.find(users, function(o) { return o.age < 40; });
	 * // => object for 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.find(users, { 'age': 1, 'active': true });
	 * // => object for 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.find(users, ['active', false]);
	 * // => object for 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.find(users, 'active');
	 * // => object for 'barney'
	 */
	var find$1 = _createFind(findIndex_1);

	var find_1 = find$1;

	var domify$7 = require$$1.domify,
	    domQuery$4 = require$$1.query;

	var escapeHTML$7 = Utils.escapeHTML;




	/**
	 * The combo box is a special implementation of the select entry and adds the option 'custom' to the
	 * select box. If 'custom' is selected, an additional text input field is shown which allows to define
	 * a custom value.
	 *
	 * @param  {Object} options
	 * @param  {string} options.id
	 * @param  {string} options.label
	 * @param  {Array<Object>} options.selectOptions list of name/value pairs
	 * @param  {string} options.modelProperty
	 * @param  {function} options.get
	 * @param  {function} options.set
	 * @param  {string} [options.customValue] custom select option value (default: 'custom')
	 * @param  {string} [options.customName] custom select option name visible in the select box (default: 'custom')
	 *
	 * @return {Object}
	 */
	var comboBox = function(translate, options) {

	  var selectOptions = options.selectOptions,
	      modelProperty = options.modelProperty,
	      customValue = options.customValue || 'custom',
	      customName = options.customName || 'custom ' + modelProperty,
	      description = options.description;

	  // check if a value is not a built in value
	  var isCustomValue = function(value) {
	    if (typeof value[modelProperty] === 'undefined') {
	      return false;
	    }

	    var isCustom = !find_1(selectOptions, function(option) {
	      return value[modelProperty] === option.value;
	    });

	    return isCustom;
	  };

	  var comboOptions = assign_1({}, options);

	  // true if the selected value in the select box is customValue
	  comboOptions.showCustomInput = function(element, node) {
	    var selectBox = domQuery$4('[data-entry="'+ options.id +'"] select', node.parentNode);

	    if (selectBox) {
	      return selectBox.value === customValue;
	    }

	    return false;
	  };

	  comboOptions.get = function(element, node) {
	    var value = options.get(element, node);

	    var modifiedValues = {};

	    if (!isCustomValue(value)) {
	      modifiedValues[modelProperty] = value[modelProperty] || '';

	      return modifiedValues;
	    }

	    modifiedValues[modelProperty] = customValue;
	    modifiedValues['custom-'+modelProperty] = value[modelProperty];

	    return modifiedValues;
	  };

	  comboOptions.set = function(element, values, node) {
	    var modifiedValues = {};

	    // if the custom select option has been selected
	    // take the value from the text input field
	    if (values[modelProperty] === customValue) {
	      modifiedValues[modelProperty] = values['custom-' + modelProperty] || '';
	    }
	    else if (options.emptyParameter && values[modelProperty] === '') {
	      modifiedValues[modelProperty] = undefined;
	    } else {
	      modifiedValues[modelProperty] = values[modelProperty];
	    }
	    return options.set(element, modifiedValues, node);
	  };

	  comboOptions.selectOptions.push({ name: customName, value: customValue });

	  var comboBoxEntry = assign_1({}, SelectEntryFactory(translate, comboOptions, comboOptions));

	  var fragment = document.createDocumentFragment();

	  fragment.appendChild(comboBoxEntry.html);

	  comboBoxEntry.html = fragment;

	  comboBoxEntry.html.appendChild(domify$7('<div class="bpp-field-wrapper bpp-combo-input" ' +
	    'data-show="showCustomInput"' +
	    '>' +
	    '<input id="camunda-' + escapeHTML$7(options.id) + '-input" type="text" name="custom-' +
	      escapeHTML$7(modelProperty) + '" ' +
	    ' />' +
	  '</div>'));

	  // add description below combo box entry field
	  if (description) {
	    comboBoxEntry.html.appendChild(EntryFieldDescription(translate, description, { show: 'showCustomInput' }));
	  }

	  return comboBoxEntry;
	};

	var ComboEntryFactory = comboBox;

	var domify$8 = require$$1.domify;

	var escapeHTML$8 = Utils.escapeHTML;




	var textBox = function(translate, options, defaultParameters) {

	  var resource = defaultParameters,
	      label = options.label || resource.id,
	      canBeShown = !!options.show && typeof options.show === 'function',
	      description = options.description;

	  resource.html =
	    domify$8('<label for="camunda-' + escapeHTML$8(resource.id) + '" ' +
	    (canBeShown ? 'data-show="isShown"' : '') +
	    '>' + label + '</label>' +
	    '<div class="bpp-field-wrapper" ' +
	    (canBeShown ? 'data-show="isShown"' : '') +
	    '>' +
	      '<div contenteditable="true" id="camunda-' + escapeHTML$8(resource.id) + '" ' +
	            'name="' + escapeHTML$8(options.modelProperty) + '" />' +
	    '</div>');

	  // add description below text box entry field
	  if (description) {
	    resource.html.appendChild(EntryFieldDescription(translate, description, { show: canBeShown && 'isShown' }));
	  }

	  if (canBeShown) {
	    resource.isShown = function() {
	      return options.show.apply(resource, arguments);
	    };
	  }

	  resource.cssClasses = ['bpp-textbox'];

	  return resource;
	};

	var TextBoxEntryFactory = textBox;

	/**
	 * This function is a wrapper around TextInputEntryFactory.
	 * It adds functionality to cache an invalid value entered in the
	 * text input, instead of setting it on the business object.
	 */
	var validationAwareTextField = function(translate, options, defaultParameters) {

	  var modelProperty = options.modelProperty;

	  defaultParameters.get = function(element, node) {
	    var value = this.__lastInvalidValue;

	    delete this.__lastInvalidValue;

	    var properties = {};

	    properties[modelProperty] = value !== undefined ? value : options.getProperty(element, node);

	    return properties;
	  };

	  defaultParameters.set = function(element, values, node) {
	    var validationErrors = validate.apply(this, [ element, values, node ]),
	        propertyValue = values[modelProperty];

	    // make sure we do not update the id
	    if (validationErrors && validationErrors[modelProperty]) {
	      this.__lastInvalidValue = propertyValue;

	      return options.setProperty(element, {}, node);
	    } else {
	      var properties = {};

	      properties[modelProperty] = propertyValue;

	      return options.setProperty(element, properties, node);
	    }
	  };

	  var validate = defaultParameters.validate = function(element, values, node) {
	    var value = values[modelProperty] || this.__lastInvalidValue;

	    var property = {};
	    property[modelProperty] = value;

	    return options.validate(element, property, node);
	  };

	  return TextInputEntryFactory(translate, options, defaultParameters);
	};

	var ValidationAwareTextInput = validationAwareTextField;

	var escapeHTML$9 = Utils.escapeHTML;



	var domQuery$5 = require$$1.query,
	    domAttr$1 = require$$1.attr,
	    domClosest$1 = require$$1.closest;



	var domify$9 = require$$1.domify;





	var TABLE_ROW_DIV_SNIPPET = '<div class="bpp-field-wrapper bpp-table-row">';
	var DELETE_ROW_BUTTON_SNIPPET = '<button class="action-button clear" data-action="deleteElement">' +
	                                  '<span>X</span>' +
	                                '</button>';

	function createInputRowTemplate(properties, canRemove) {
	  var template = TABLE_ROW_DIV_SNIPPET;
	  template += createInputTemplate(properties, canRemove);
	  template += canRemove ? DELETE_ROW_BUTTON_SNIPPET : '';
	  template += '</div>';

	  return template;
	}

	function createInputTemplate(properties, canRemove) {
	  var columns = properties.length;
	  var template = '';
	  forEach_1(properties, function(prop) {
	    template += '<input class="bpp-table-row-columns-' + columns + ' ' +
	                               (canRemove ? 'bpp-table-row-removable' : '') + '" ' +
	                       'id="camunda-table-row-cell-input-value" ' +
	                       'type="text" ' +
	                       'name="' + escapeHTML$9(prop) + '" />';
	  });
	  return template;
	}

	function createLabelRowTemplate(labels) {
	  var template = TABLE_ROW_DIV_SNIPPET;
	  template += createLabelTemplate(labels);
	  template += '</div>';

	  return template;
	}

	function createLabelTemplate(labels) {
	  var columns = labels.length;
	  var template = '';
	  forEach_1(labels, function(label) {
	    template += '<label class="bpp-table-row-columns-' + columns + '">' + escapeHTML$9(label) + '</label>';
	  });
	  return template;
	}

	function pick$1(elements, properties) {
	  return (elements || []).map(function(elem) {
	    var newElement = {};
	    forEach_1(properties, function(prop) {
	      newElement[prop] = elem[prop] || '';
	    });
	    return newElement;
	  });
	}

	function diff(element, node, values, oldValues, editable) {
	  return filter_1(values, function(value, idx) {
	    return !valueEqual$1(element, node, value, oldValues[idx], editable, idx);
	  });
	}

	function valueEqual$1(element, node, value, oldValue, editable, idx) {
	  if (value && !oldValue) {
	    return false;
	  }
	  var allKeys = keys_1(value).concat(keys_1(oldValue));

	  return allKeys.every(function(key) {
	    var n = value[key] || undefined;
	    var o = oldValue[key] || undefined;
	    return !editable(element, node, key, idx) || n === o;
	  });
	}

	function getEntryNode(node) {
	  return domClosest$1(node, '[data-entry]', true);
	}

	function getContainer(node) {
	  return domQuery$5('div[data-list-entry-container]', node);
	}

	function getSelection$1(node) {
	  return {
	    start: node.selectionStart,
	    end: node.selectionEnd
	  };
	}

	function setSelection$1(node, selection) {
	  node.selectionStart = selection.start;
	  node.selectionEnd = selection.end;
	}

	/**
	 * @param  {Object} options
	 * @param  {string} options.id
	 * @param  {string} options.description
	 * @param  {Array<string>} options.modelProperties
	 * @param  {Array<string>} options.labels
	 * @param  {Function} options.getElements - this callback function must return a list of business object items
	 * @param  {Function} options.removeElement
	 * @param  {Function} options.addElement
	 * @param  {Function} options.updateElement
	 * @param  {Function} options.editable
	 * @param  {Function} options.setControlValue
	 * @param  {Function} options.show
	 *
	 * @return {Object}
	 */
	var TableEntryFactory = function(translate, options) {

	  var id = options.id,
	      modelProperties = options.modelProperties,
	      labels = options.labels,
	      description = options.description;

	  var labelRow = createLabelRowTemplate(labels);

	  var getElements = options.getElements;

	  var removeElement = options.removeElement,
	      canRemove = typeof removeElement === 'function';

	  var addElement = options.addElement,
	      canAdd = typeof addElement === 'function',
	      addLabel = options.addLabel || 'Add Value';

	  var updateElement = options.updateElement,
	      canUpdate = typeof updateElement === 'function';

	  var editable = options.editable || function() { return true; },
	      setControlValue = options.setControlValue;

	  var show = options.show,
	      canBeShown = typeof show === 'function';

	  var elements = function(element, node) {
	    return pick$1(getElements(element, node), modelProperties);
	  };

	  var html = domify$9((canAdd ?
	    '<div class="bpp-table-add-row" ' + (canBeShown ? 'data-show="show"' : '') + '>' +
	          '<label>' + escapeHTML$9(addLabel) + '</label>' +
	          '<button class="action-button add" data-action="addElement"><span>+</span></button>' +
	        '</div>' : '') +
	        '<div class="bpp-table" data-show="showTable">' +
	          '<div class="bpp-field-wrapper bpp-table-row">' +
	             labelRow +
	          '</div>' +
	          '<div data-list-entry-container>' +
	          '</div>' +
	        '</div>');

	  if (description) {
	    html.appendChild(EntryFieldDescription(translate, description, { show: 'showTable' }));
	  }

	  var factory = {
	    id: id,
	    html: html,

	    get: function(element, node) {
	      var boElements = elements(element, node, this.__invalidValues);

	      var invalidValues = this.__invalidValues;

	      delete this.__invalidValues;

	      forEach_1(invalidValues, function(value, idx) {
	        var element = boElements[idx];

	        forEach_1(modelProperties, function(prop) {
	          element[prop] = value[prop];
	        });
	      });

	      return boElements;
	    },

	    set: function(element, values, node) {
	      var action = this.__action || {};
	      delete this.__action;

	      if (action.id === 'delete-element') {
	        return removeElement(element, node, action.idx);
	      }
	      else if (action.id === 'add-element') {
	        return addElement(element, node);
	      }
	      else if (canUpdate) {
	        var commands = [],
	            valuesToValidate = values;

	        if (typeof options.validate !== 'function') {
	          valuesToValidate = diff(element, node, values, elements(element, node), editable);
	        }

	        var self = this;

	        forEach_1(valuesToValidate, function(value) {
	          var validationError,
	              idx = values.indexOf(value);

	          if (typeof options.validate === 'function') {
	            validationError = options.validate(element, value, node, idx);
	          }

	          if (!validationError) {
	            var cmd = updateElement(element, value, node, idx);

	            if (cmd) {
	              commands.push(cmd);
	            }
	          } else {

	            // cache invalid value in an object by index as key
	            self.__invalidValues = self.__invalidValues || {};
	            self.__invalidValues[idx] = value;

	            // execute a command, which does not do anything
	            commands.push(CmdHelper_1.updateProperties(element, {}));
	          }
	        });

	        return commands;
	      }
	    },
	    createListEntryTemplate: function(value, index, selectBox) {
	      return createInputRowTemplate(modelProperties, canRemove);
	    },

	    addElement: function(element, node, event, scopeNode) {
	      var template = domify$9(createInputRowTemplate(modelProperties, canRemove));

	      var container = getContainer(node);
	      container.appendChild(template);

	      this.__action = {
	        id: 'add-element'
	      };

	      return true;
	    },

	    deleteElement: function(element, node, event, scopeNode) {
	      var container = getContainer(node);
	      var rowToDelete = event.delegateTarget.parentNode;
	      var idx = parseInt(domAttr$1(rowToDelete, 'data-index'), 10);

	      container.removeChild(rowToDelete);

	      this.__action = {
	        id: 'delete-element',
	        idx: idx
	      };

	      return true;
	    },

	    editable: function(element, rowNode, input, prop, value, idx) {
	      var entryNode = domClosest$1(rowNode, '[data-entry]');
	      return editable(element, entryNode, prop, idx);
	    },

	    show: function(element, entryNode, node, scopeNode) {
	      entryNode = getEntryNode(entryNode);
	      return show(element, entryNode, node, scopeNode);
	    },

	    showTable: function(element, entryNode, node, scopeNode) {
	      entryNode = getEntryNode(entryNode);
	      var elems = elements(element, entryNode);
	      return elems && elems.length && (!canBeShown || show(element, entryNode, node, scopeNode));
	    },

	    validateListItem: function(element, value, node, idx) {
	      if (typeof options.validate === 'function') {
	        return options.validate(element, value, node, idx);
	      }
	    }

	  };

	  // Update/set the selection on the correct position.
	  // It's the same code like for an input value in the PropertiesPanel.js.
	  if (setControlValue) {
	    factory.setControlValue = function(element, rowNode, input, prop, value, idx) {
	      var entryNode = getEntryNode(rowNode);

	      var isReadOnly = domAttr$1(input, 'readonly');
	      var oldValue = input.value;

	      var selection;

	      // prevents input fields from having the value 'undefined'
	      if (value === undefined) {
	        value = '';
	      }

	      // when the attribute 'readonly' exists, ignore the comparison
	      // with 'oldValue' and 'value'
	      if (!!isReadOnly && oldValue === value) {
	        return;
	      }

	      // update selection on undo/redo
	      if (document.activeElement === input) {
	        selection = selectionUpdate(getSelection$1(input), oldValue, value);
	      }

	      setControlValue(element, entryNode, input, prop, value, idx);

	      if (selection) {
	        setSelection$1(input, selection);
	      }

	    };
	  }

	  return factory;

	};

	/**
	 * The label factory provides a label entry. For the label text
	 * it expects either a string provided by the options.labelText
	 * parameter or it could be generated programmatically using a
	 * function passed as the options.get parameter.
	 *
	 * @param  {Object} options
	 * @param  {string} options.id
	 * @param  {string} [options.labelText]
	 * @param  {Function} [options.get]
	 * @param  {Function} [options.showLabel]
	 * @param  {Boolean} [options.divider] adds a divider at the top of the label if true; default: false
	 */
	var label = function(options) {
	  return {
	    id: options.id,
	    html: '<label data-value="label" ' +
	            'data-show="showLabel" ' +
	            'class="entry-label' + (options.divider ? ' divider' : '') + '">' +
	          '</label>',
	    get: function(element, node) {
	      if (typeof options.get === 'function') {
	        return options.get(element, node);
	      }
	      return { label: options.labelText };
	    },
	    showLabel: function(element, node) {
	      if (typeof options.showLabel === 'function') {
	        return options.showLabel(element, node);
	      }
	      return true;
	    }
	  };
	};

	var LabelFactory = label;

	/** Used to store function metadata. */
	var metaMap = _WeakMap && new _WeakMap;

	var _metaMap = metaMap;

	/**
	 * The base implementation of `setData` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to associate metadata with.
	 * @param {*} data The metadata.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetData = !_metaMap ? identity_1 : function(func, data) {
	  _metaMap.set(func, data);
	  return func;
	};

	var _baseSetData = baseSetData;

	/**
	 * Creates a function that produces an instance of `Ctor` regardless of
	 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	 *
	 * @private
	 * @param {Function} Ctor The constructor to wrap.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCtor(Ctor) {
	  return function() {
	    // Use a `switch` statement to work with class constructors. See
	    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	    // for more details.
	    var args = arguments;
	    switch (args.length) {
	      case 0: return new Ctor;
	      case 1: return new Ctor(args[0]);
	      case 2: return new Ctor(args[0], args[1]);
	      case 3: return new Ctor(args[0], args[1], args[2]);
	      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	    }
	    var thisBinding = _baseCreate(Ctor.prototype),
	        result = Ctor.apply(thisBinding, args);

	    // Mimic the constructor's `return` behavior.
	    // See https://es5.github.io/#x13.2.2 for more details.
	    return isObject_1(result) ? result : thisBinding;
	  };
	}

	var _createCtor = createCtor;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG = 1;

	/**
	 * Creates a function that wraps `func` to invoke it with the optional `this`
	 * binding of `thisArg`.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createBind(func, bitmask, thisArg) {
	  var isBind = bitmask & WRAP_BIND_FLAG,
	      Ctor = _createCtor(func);

	  function wrapper() {
	    var fn = (this && this !== _root && this instanceof wrapper) ? Ctor : func;
	    return fn.apply(isBind ? thisArg : this, arguments);
	  }
	  return wrapper;
	}

	var _createBind = createBind;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$3 = Math.max;

	/**
	 * Creates an array that is the composition of partially applied arguments,
	 * placeholders, and provided arguments into a single array of arguments.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to prepend to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgs(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	      argsLength = args.length,
	      holdersLength = holders.length,
	      leftIndex = -1,
	      leftLength = partials.length,
	      rangeLength = nativeMax$3(argsLength - holdersLength, 0),
	      result = Array(leftLength + rangeLength),
	      isUncurried = !isCurried;

	  while (++leftIndex < leftLength) {
	    result[leftIndex] = partials[leftIndex];
	  }
	  while (++argsIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[holders[argsIndex]] = args[argsIndex];
	    }
	  }
	  while (rangeLength--) {
	    result[leftIndex++] = args[argsIndex++];
	  }
	  return result;
	}

	var _composeArgs = composeArgs;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$4 = Math.max;

	/**
	 * This function is like `composeArgs` except that the arguments composition
	 * is tailored for `_.partialRight`.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to append to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgsRight(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	      argsLength = args.length,
	      holdersIndex = -1,
	      holdersLength = holders.length,
	      rightIndex = -1,
	      rightLength = partials.length,
	      rangeLength = nativeMax$4(argsLength - holdersLength, 0),
	      result = Array(rangeLength + rightLength),
	      isUncurried = !isCurried;

	  while (++argsIndex < rangeLength) {
	    result[argsIndex] = args[argsIndex];
	  }
	  var offset = argsIndex;
	  while (++rightIndex < rightLength) {
	    result[offset + rightIndex] = partials[rightIndex];
	  }
	  while (++holdersIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[offset + holders[holdersIndex]] = args[argsIndex++];
	    }
	  }
	  return result;
	}

	var _composeArgsRight = composeArgsRight;

	/**
	 * Gets the number of `placeholder` occurrences in `array`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} placeholder The placeholder to search for.
	 * @returns {number} Returns the placeholder count.
	 */
	function countHolders(array, placeholder) {
	  var length = array.length,
	      result = 0;

	  while (length--) {
	    if (array[length] === placeholder) {
	      ++result;
	    }
	  }
	  return result;
	}

	var _countHolders = countHolders;

	/**
	 * The function whose prototype chain sequence wrappers inherit from.
	 *
	 * @private
	 */
	function baseLodash() {
	  // No operation performed.
	}

	var _baseLodash = baseLodash;

	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295;

	/**
	 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	 *
	 * @private
	 * @constructor
	 * @param {*} value The value to wrap.
	 */
	function LazyWrapper(value) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__dir__ = 1;
	  this.__filtered__ = false;
	  this.__iteratees__ = [];
	  this.__takeCount__ = MAX_ARRAY_LENGTH;
	  this.__views__ = [];
	}

	// Ensure `LazyWrapper` is an instance of `baseLodash`.
	LazyWrapper.prototype = _baseCreate(_baseLodash.prototype);
	LazyWrapper.prototype.constructor = LazyWrapper;

	var _LazyWrapper = LazyWrapper;

	/**
	 * Gets metadata for `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {*} Returns the metadata for `func`.
	 */
	var getData = !_metaMap ? noop_1 : function(func) {
	  return _metaMap.get(func);
	};

	var _getData = getData;

	/** Used to lookup unminified function names. */
	var realNames = {};

	var _realNames = realNames;

	/** Used for built-in method references. */
	var objectProto$f = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$e = objectProto$f.hasOwnProperty;

	/**
	 * Gets the name of `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {string} Returns the function name.
	 */
	function getFuncName(func) {
	  var result = (func.name + ''),
	      array = _realNames[result],
	      length = hasOwnProperty$e.call(_realNames, result) ? array.length : 0;

	  while (length--) {
	    var data = array[length],
	        otherFunc = data.func;
	    if (otherFunc == null || otherFunc == func) {
	      return data.name;
	    }
	  }
	  return result;
	}

	var _getFuncName = getFuncName;

	/**
	 * The base constructor for creating `lodash` wrapper objects.
	 *
	 * @private
	 * @param {*} value The value to wrap.
	 * @param {boolean} [chainAll] Enable explicit method chain sequences.
	 */
	function LodashWrapper(value, chainAll) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__chain__ = !!chainAll;
	  this.__index__ = 0;
	  this.__values__ = undefined;
	}

	LodashWrapper.prototype = _baseCreate(_baseLodash.prototype);
	LodashWrapper.prototype.constructor = LodashWrapper;

	var _LodashWrapper = LodashWrapper;

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	var _copyArray = copyArray;

	/**
	 * Creates a clone of `wrapper`.
	 *
	 * @private
	 * @param {Object} wrapper The wrapper to clone.
	 * @returns {Object} Returns the cloned wrapper.
	 */
	function wrapperClone(wrapper) {
	  if (wrapper instanceof _LazyWrapper) {
	    return wrapper.clone();
	  }
	  var result = new _LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	  result.__actions__ = _copyArray(wrapper.__actions__);
	  result.__index__  = wrapper.__index__;
	  result.__values__ = wrapper.__values__;
	  return result;
	}

	var _wrapperClone = wrapperClone;

	/** Used for built-in method references. */
	var objectProto$g = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$f = objectProto$g.hasOwnProperty;

	/**
	 * Creates a `lodash` object which wraps `value` to enable implicit method
	 * chain sequences. Methods that operate on and return arrays, collections,
	 * and functions can be chained together. Methods that retrieve a single value
	 * or may return a primitive value will automatically end the chain sequence
	 * and return the unwrapped value. Otherwise, the value must be unwrapped
	 * with `_#value`.
	 *
	 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	 * enabled using `_.chain`.
	 *
	 * The execution of chained methods is lazy, that is, it's deferred until
	 * `_#value` is implicitly or explicitly called.
	 *
	 * Lazy evaluation allows several methods to support shortcut fusion.
	 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	 * the creation of intermediate arrays and can greatly reduce the number of
	 * iteratee executions. Sections of a chain sequence qualify for shortcut
	 * fusion if the section is applied to an array and iteratees accept only
	 * one argument. The heuristic for whether a section qualifies for shortcut
	 * fusion is subject to change.
	 *
	 * Chaining is supported in custom builds as long as the `_#value` method is
	 * directly or indirectly included in the build.
	 *
	 * In addition to lodash methods, wrappers have `Array` and `String` methods.
	 *
	 * The wrapper `Array` methods are:
	 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	 *
	 * The wrapper `String` methods are:
	 * `replace` and `split`
	 *
	 * The wrapper methods that support shortcut fusion are:
	 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	 *
	 * The chainable wrapper methods are:
	 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	 * `zipObject`, `zipObjectDeep`, and `zipWith`
	 *
	 * The wrapper methods that are **not** chainable by default are:
	 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	 * `upperFirst`, `value`, and `words`
	 *
	 * @name _
	 * @constructor
	 * @category Seq
	 * @param {*} value The value to wrap in a `lodash` instance.
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var wrapped = _([1, 2, 3]);
	 *
	 * // Returns an unwrapped value.
	 * wrapped.reduce(_.add);
	 * // => 6
	 *
	 * // Returns a wrapped value.
	 * var squares = wrapped.map(square);
	 *
	 * _.isArray(squares);
	 * // => false
	 *
	 * _.isArray(squares.value());
	 * // => true
	 */
	function lodash(value) {
	  if (isObjectLike_1(value) && !isArray_1(value) && !(value instanceof _LazyWrapper)) {
	    if (value instanceof _LodashWrapper) {
	      return value;
	    }
	    if (hasOwnProperty$f.call(value, '__wrapped__')) {
	      return _wrapperClone(value);
	    }
	  }
	  return new _LodashWrapper(value);
	}

	// Ensure wrappers are instances of `baseLodash`.
	lodash.prototype = _baseLodash.prototype;
	lodash.prototype.constructor = lodash;

	var wrapperLodash = lodash;

	/**
	 * Checks if `func` has a lazy counterpart.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	 *  else `false`.
	 */
	function isLaziable(func) {
	  var funcName = _getFuncName(func),
	      other = wrapperLodash[funcName];

	  if (typeof other != 'function' || !(funcName in _LazyWrapper.prototype)) {
	    return false;
	  }
	  if (func === other) {
	    return true;
	  }
	  var data = _getData(other);
	  return !!data && func === data[0];
	}

	var _isLaziable = isLaziable;

	/**
	 * Sets metadata for `func`.
	 *
	 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	 * period of time, it will trip its breaker and transition to an identity
	 * function to avoid garbage collection pauses in V8. See
	 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	 * for more details.
	 *
	 * @private
	 * @param {Function} func The function to associate metadata with.
	 * @param {*} data The metadata.
	 * @returns {Function} Returns `func`.
	 */
	var setData = _shortOut(_baseSetData);

	var _setData = setData;

	/** Used to match wrap detail comments. */
	var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	    reSplitDetails = /,? & /;

	/**
	 * Extracts wrapper details from the `source` body comment.
	 *
	 * @private
	 * @param {string} source The source to inspect.
	 * @returns {Array} Returns the wrapper details.
	 */
	function getWrapDetails(source) {
	  var match = source.match(reWrapDetails);
	  return match ? match[1].split(reSplitDetails) : [];
	}

	var _getWrapDetails = getWrapDetails;

	/** Used to match wrap detail comments. */
	var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

	/**
	 * Inserts wrapper `details` in a comment at the top of the `source` body.
	 *
	 * @private
	 * @param {string} source The source to modify.
	 * @returns {Array} details The details to insert.
	 * @returns {string} Returns the modified source.
	 */
	function insertWrapDetails(source, details) {
	  var length = details.length;
	  if (!length) {
	    return source;
	  }
	  var lastIndex = length - 1;
	  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	  details = details.join(length > 2 ? ', ' : ' ');
	  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	}

	var _insertWrapDetails = insertWrapDetails;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$1 = 1,
	    WRAP_BIND_KEY_FLAG = 2,
	    WRAP_CURRY_FLAG = 8,
	    WRAP_CURRY_RIGHT_FLAG = 16,
	    WRAP_PARTIAL_FLAG = 32,
	    WRAP_PARTIAL_RIGHT_FLAG = 64,
	    WRAP_ARY_FLAG = 128,
	    WRAP_REARG_FLAG = 256,
	    WRAP_FLIP_FLAG = 512;

	/** Used to associate wrap methods with their bit flags. */
	var wrapFlags = [
	  ['ary', WRAP_ARY_FLAG],
	  ['bind', WRAP_BIND_FLAG$1],
	  ['bindKey', WRAP_BIND_KEY_FLAG],
	  ['curry', WRAP_CURRY_FLAG],
	  ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	  ['flip', WRAP_FLIP_FLAG],
	  ['partial', WRAP_PARTIAL_FLAG],
	  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	  ['rearg', WRAP_REARG_FLAG]
	];

	/**
	 * Updates wrapper `details` based on `bitmask` flags.
	 *
	 * @private
	 * @returns {Array} details The details to modify.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Array} Returns `details`.
	 */
	function updateWrapDetails(details, bitmask) {
	  _arrayEach(wrapFlags, function(pair) {
	    var value = '_.' + pair[0];
	    if ((bitmask & pair[1]) && !_arrayIncludes(details, value)) {
	      details.push(value);
	    }
	  });
	  return details.sort();
	}

	var _updateWrapDetails = updateWrapDetails;

	/**
	 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	 * with wrapper details in a comment at the top of the source body.
	 *
	 * @private
	 * @param {Function} wrapper The function to modify.
	 * @param {Function} reference The reference function.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Function} Returns `wrapper`.
	 */
	function setWrapToString(wrapper, reference, bitmask) {
	  var source = (reference + '');
	  return _setToString(wrapper, _insertWrapDetails(source, _updateWrapDetails(_getWrapDetails(source), bitmask)));
	}

	var _setWrapToString = setWrapToString;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$2 = 1,
	    WRAP_BIND_KEY_FLAG$1 = 2,
	    WRAP_CURRY_BOUND_FLAG = 4,
	    WRAP_CURRY_FLAG$1 = 8,
	    WRAP_PARTIAL_FLAG$1 = 32,
	    WRAP_PARTIAL_RIGHT_FLAG$1 = 64;

	/**
	 * Creates a function that wraps `func` to continue currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {Function} wrapFunc The function to create the `func` wrapper.
	 * @param {*} placeholder The placeholder value.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	  var isCurry = bitmask & WRAP_CURRY_FLAG$1,
	      newHolders = isCurry ? holders : undefined,
	      newHoldersRight = isCurry ? undefined : holders,
	      newPartials = isCurry ? partials : undefined,
	      newPartialsRight = isCurry ? undefined : partials;

	  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG$1 : WRAP_PARTIAL_RIGHT_FLAG$1);
	  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG$1 : WRAP_PARTIAL_FLAG$1);

	  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	    bitmask &= ~(WRAP_BIND_FLAG$2 | WRAP_BIND_KEY_FLAG$1);
	  }
	  var newData = [
	    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	    newHoldersRight, argPos, ary, arity
	  ];

	  var result = wrapFunc.apply(undefined, newData);
	  if (_isLaziable(func)) {
	    _setData(result, newData);
	  }
	  result.placeholder = placeholder;
	  return _setWrapToString(result, func, bitmask);
	}

	var _createRecurry = createRecurry;

	/**
	 * Gets the argument placeholder value for `func`.
	 *
	 * @private
	 * @param {Function} func The function to inspect.
	 * @returns {*} Returns the placeholder value.
	 */
	function getHolder(func) {
	  var object = func;
	  return object.placeholder;
	}

	var _getHolder = getHolder;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin$1 = Math.min;

	/**
	 * Reorder `array` according to the specified indexes where the element at
	 * the first index is assigned as the first element, the element at
	 * the second index is assigned as the second element, and so on.
	 *
	 * @private
	 * @param {Array} array The array to reorder.
	 * @param {Array} indexes The arranged array indexes.
	 * @returns {Array} Returns `array`.
	 */
	function reorder(array, indexes) {
	  var arrLength = array.length,
	      length = nativeMin$1(indexes.length, arrLength),
	      oldArray = _copyArray(array);

	  while (length--) {
	    var index = indexes[length];
	    array[length] = _isIndex(index, arrLength) ? oldArray[index] : undefined;
	  }
	  return array;
	}

	var _reorder = reorder;

	/** Used as the internal argument placeholder. */
	var PLACEHOLDER = '__lodash_placeholder__';

	/**
	 * Replaces all `placeholder` elements in `array` with an internal placeholder
	 * and returns an array of their indexes.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {*} placeholder The placeholder to replace.
	 * @returns {Array} Returns the new array of placeholder indexes.
	 */
	function replaceHolders(array, placeholder) {
	  var index = -1,
	      length = array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (value === placeholder || value === PLACEHOLDER) {
	      array[index] = PLACEHOLDER;
	      result[resIndex++] = index;
	    }
	  }
	  return result;
	}

	var _replaceHolders = replaceHolders;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$3 = 1,
	    WRAP_BIND_KEY_FLAG$2 = 2,
	    WRAP_CURRY_FLAG$2 = 8,
	    WRAP_CURRY_RIGHT_FLAG$1 = 16,
	    WRAP_ARY_FLAG$1 = 128,
	    WRAP_FLIP_FLAG$1 = 512;

	/**
	 * Creates a function that wraps `func` to invoke it with optional `this`
	 * binding of `thisArg`, partial application, and currying.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [partialsRight] The arguments to append to those provided
	 *  to the new function.
	 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	  var isAry = bitmask & WRAP_ARY_FLAG$1,
	      isBind = bitmask & WRAP_BIND_FLAG$3,
	      isBindKey = bitmask & WRAP_BIND_KEY_FLAG$2,
	      isCurried = bitmask & (WRAP_CURRY_FLAG$2 | WRAP_CURRY_RIGHT_FLAG$1),
	      isFlip = bitmask & WRAP_FLIP_FLAG$1,
	      Ctor = isBindKey ? undefined : _createCtor(func);

	  function wrapper() {
	    var length = arguments.length,
	        args = Array(length),
	        index = length;

	    while (index--) {
	      args[index] = arguments[index];
	    }
	    if (isCurried) {
	      var placeholder = _getHolder(wrapper),
	          holdersCount = _countHolders(args, placeholder);
	    }
	    if (partials) {
	      args = _composeArgs(args, partials, holders, isCurried);
	    }
	    if (partialsRight) {
	      args = _composeArgsRight(args, partialsRight, holdersRight, isCurried);
	    }
	    length -= holdersCount;
	    if (isCurried && length < arity) {
	      var newHolders = _replaceHolders(args, placeholder);
	      return _createRecurry(
	        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	        args, newHolders, argPos, ary, arity - length
	      );
	    }
	    var thisBinding = isBind ? thisArg : this,
	        fn = isBindKey ? thisBinding[func] : func;

	    length = args.length;
	    if (argPos) {
	      args = _reorder(args, argPos);
	    } else if (isFlip && length > 1) {
	      args.reverse();
	    }
	    if (isAry && ary < length) {
	      args.length = ary;
	    }
	    if (this && this !== _root && this instanceof wrapper) {
	      fn = Ctor || _createCtor(fn);
	    }
	    return fn.apply(thisBinding, args);
	  }
	  return wrapper;
	}

	var _createHybrid = createHybrid;

	/**
	 * Creates a function that wraps `func` to enable currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {number} arity The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCurry(func, bitmask, arity) {
	  var Ctor = _createCtor(func);

	  function wrapper() {
	    var length = arguments.length,
	        args = Array(length),
	        index = length,
	        placeholder = _getHolder(wrapper);

	    while (index--) {
	      args[index] = arguments[index];
	    }
	    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	      ? []
	      : _replaceHolders(args, placeholder);

	    length -= holders.length;
	    if (length < arity) {
	      return _createRecurry(
	        func, bitmask, _createHybrid, wrapper.placeholder, undefined,
	        args, holders, undefined, undefined, arity - length);
	    }
	    var fn = (this && this !== _root && this instanceof wrapper) ? Ctor : func;
	    return _apply(fn, this, args);
	  }
	  return wrapper;
	}

	var _createCurry = createCurry;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$4 = 1;

	/**
	 * Creates a function that wraps `func` to invoke it with the `this` binding
	 * of `thisArg` and `partials` prepended to the arguments it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} partials The arguments to prepend to those provided to
	 *  the new function.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createPartial(func, bitmask, thisArg, partials) {
	  var isBind = bitmask & WRAP_BIND_FLAG$4,
	      Ctor = _createCtor(func);

	  function wrapper() {
	    var argsIndex = -1,
	        argsLength = arguments.length,
	        leftIndex = -1,
	        leftLength = partials.length,
	        args = Array(leftLength + argsLength),
	        fn = (this && this !== _root && this instanceof wrapper) ? Ctor : func;

	    while (++leftIndex < leftLength) {
	      args[leftIndex] = partials[leftIndex];
	    }
	    while (argsLength--) {
	      args[leftIndex++] = arguments[++argsIndex];
	    }
	    return _apply(fn, isBind ? thisArg : this, args);
	  }
	  return wrapper;
	}

	var _createPartial = createPartial;

	/** Used as the internal argument placeholder. */
	var PLACEHOLDER$1 = '__lodash_placeholder__';

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$5 = 1,
	    WRAP_BIND_KEY_FLAG$3 = 2,
	    WRAP_CURRY_BOUND_FLAG$1 = 4,
	    WRAP_CURRY_FLAG$3 = 8,
	    WRAP_ARY_FLAG$2 = 128,
	    WRAP_REARG_FLAG$1 = 256;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin$2 = Math.min;

	/**
	 * Merges the function metadata of `source` into `data`.
	 *
	 * Merging metadata reduces the number of wrappers used to invoke a function.
	 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	 * may be applied regardless of execution order. Methods like `_.ary` and
	 * `_.rearg` modify function arguments, making the order in which they are
	 * executed important, preventing the merging of metadata. However, we make
	 * an exception for a safe combined case where curried functions have `_.ary`
	 * and or `_.rearg` applied.
	 *
	 * @private
	 * @param {Array} data The destination metadata.
	 * @param {Array} source The source metadata.
	 * @returns {Array} Returns `data`.
	 */
	function mergeData(data, source) {
	  var bitmask = data[1],
	      srcBitmask = source[1],
	      newBitmask = bitmask | srcBitmask,
	      isCommon = newBitmask < (WRAP_BIND_FLAG$5 | WRAP_BIND_KEY_FLAG$3 | WRAP_ARY_FLAG$2);

	  var isCombo =
	    ((srcBitmask == WRAP_ARY_FLAG$2) && (bitmask == WRAP_CURRY_FLAG$3)) ||
	    ((srcBitmask == WRAP_ARY_FLAG$2) && (bitmask == WRAP_REARG_FLAG$1) && (data[7].length <= source[8])) ||
	    ((srcBitmask == (WRAP_ARY_FLAG$2 | WRAP_REARG_FLAG$1)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG$3));

	  // Exit early if metadata can't be merged.
	  if (!(isCommon || isCombo)) {
	    return data;
	  }
	  // Use source `thisArg` if available.
	  if (srcBitmask & WRAP_BIND_FLAG$5) {
	    data[2] = source[2];
	    // Set when currying a bound function.
	    newBitmask |= bitmask & WRAP_BIND_FLAG$5 ? 0 : WRAP_CURRY_BOUND_FLAG$1;
	  }
	  // Compose partial arguments.
	  var value = source[3];
	  if (value) {
	    var partials = data[3];
	    data[3] = partials ? _composeArgs(partials, value, source[4]) : value;
	    data[4] = partials ? _replaceHolders(data[3], PLACEHOLDER$1) : source[4];
	  }
	  // Compose partial right arguments.
	  value = source[5];
	  if (value) {
	    partials = data[5];
	    data[5] = partials ? _composeArgsRight(partials, value, source[6]) : value;
	    data[6] = partials ? _replaceHolders(data[5], PLACEHOLDER$1) : source[6];
	  }
	  // Use source `argPos` if available.
	  value = source[7];
	  if (value) {
	    data[7] = value;
	  }
	  // Use source `ary` if it's smaller.
	  if (srcBitmask & WRAP_ARY_FLAG$2) {
	    data[8] = data[8] == null ? source[8] : nativeMin$2(data[8], source[8]);
	  }
	  // Use source `arity` if one is not provided.
	  if (data[9] == null) {
	    data[9] = source[9];
	  }
	  // Use source `func` and merge bitmasks.
	  data[0] = source[0];
	  data[1] = newBitmask;

	  return data;
	}

	var _mergeData = mergeData;

	/** Error message constants. */
	var FUNC_ERROR_TEXT$2 = 'Expected a function';

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$6 = 1,
	    WRAP_BIND_KEY_FLAG$4 = 2,
	    WRAP_CURRY_FLAG$4 = 8,
	    WRAP_CURRY_RIGHT_FLAG$2 = 16,
	    WRAP_PARTIAL_FLAG$2 = 32,
	    WRAP_PARTIAL_RIGHT_FLAG$2 = 64;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$5 = Math.max;

	/**
	 * Creates a function that either curries or invokes `func` with optional
	 * `this` binding and partially applied arguments.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags.
	 *    1 - `_.bind`
	 *    2 - `_.bindKey`
	 *    4 - `_.curry` or `_.curryRight` of a bound function
	 *    8 - `_.curry`
	 *   16 - `_.curryRight`
	 *   32 - `_.partial`
	 *   64 - `_.partialRight`
	 *  128 - `_.rearg`
	 *  256 - `_.ary`
	 *  512 - `_.flip`
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to be partially applied.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG$4;
	  if (!isBindKey && typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$2);
	  }
	  var length = partials ? partials.length : 0;
	  if (!length) {
	    bitmask &= ~(WRAP_PARTIAL_FLAG$2 | WRAP_PARTIAL_RIGHT_FLAG$2);
	    partials = holders = undefined;
	  }
	  ary = ary === undefined ? ary : nativeMax$5(toInteger_1(ary), 0);
	  arity = arity === undefined ? arity : toInteger_1(arity);
	  length -= holders ? holders.length : 0;

	  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG$2) {
	    var partialsRight = partials,
	        holdersRight = holders;

	    partials = holders = undefined;
	  }
	  var data = isBindKey ? undefined : _getData(func);

	  var newData = [
	    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	    argPos, ary, arity
	  ];

	  if (data) {
	    _mergeData(newData, data);
	  }
	  func = newData[0];
	  bitmask = newData[1];
	  thisArg = newData[2];
	  partials = newData[3];
	  holders = newData[4];
	  arity = newData[9] = newData[9] === undefined
	    ? (isBindKey ? 0 : func.length)
	    : nativeMax$5(newData[9] - length, 0);

	  if (!arity && bitmask & (WRAP_CURRY_FLAG$4 | WRAP_CURRY_RIGHT_FLAG$2)) {
	    bitmask &= ~(WRAP_CURRY_FLAG$4 | WRAP_CURRY_RIGHT_FLAG$2);
	  }
	  if (!bitmask || bitmask == WRAP_BIND_FLAG$6) {
	    var result = _createBind(func, bitmask, thisArg);
	  } else if (bitmask == WRAP_CURRY_FLAG$4 || bitmask == WRAP_CURRY_RIGHT_FLAG$2) {
	    result = _createCurry(func, bitmask, arity);
	  } else if ((bitmask == WRAP_PARTIAL_FLAG$2 || bitmask == (WRAP_BIND_FLAG$6 | WRAP_PARTIAL_FLAG$2)) && !holders.length) {
	    result = _createPartial(func, bitmask, thisArg, partials);
	  } else {
	    result = _createHybrid.apply(undefined, newData);
	  }
	  var setter = data ? _baseSetData : _setData;
	  return _setWrapToString(setter(result, newData), func, bitmask);
	}

	var _createWrap = createWrap;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$7 = 1,
	    WRAP_PARTIAL_FLAG$3 = 32;

	/**
	 * Creates a function that invokes `func` with the `this` binding of `thisArg`
	 * and `partials` prepended to the arguments it receives.
	 *
	 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	 * may be used as a placeholder for partially applied arguments.
	 *
	 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	 * property of bound functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new bound function.
	 * @example
	 *
	 * function greet(greeting, punctuation) {
	 *   return greeting + ' ' + this.user + punctuation;
	 * }
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * var bound = _.bind(greet, object, 'hi');
	 * bound('!');
	 * // => 'hi fred!'
	 *
	 * // Bound with placeholders.
	 * var bound = _.bind(greet, object, _, '!');
	 * bound('hi');
	 * // => 'hi fred!'
	 */
	var bind$2 = _baseRest(function(func, thisArg, partials) {
	  var bitmask = WRAP_BIND_FLAG$7;
	  if (partials.length) {
	    var holders = _replaceHolders(partials, _getHolder(bind$2));
	    bitmask |= WRAP_PARTIAL_FLAG$3;
	  }
	  return _createWrap(func, bitmask, thisArg, partials, holders);
	});

	// Assign default placeholders.
	bind$2.placeholder = {};

	var bind_1$1 = bind$2;

	var domify$a = require$$1.domify;

	var escapeHTML$a = Utils.escapeHTML;





	/**
	 * An entry that renders a clickable link.
	 *
	 * A passed {@link options#handleClick} handler is responsible
	 * to process the click.
	 *
	 * The link may be conditionally shown or hidden. This can be
	 * controlled via the {@link options.showLink}.
	 *
	 * @param {Object} options
	 * @param {String} options.id
	 * @param {String} [options.buttonLabel]
	 * @param {Function} options.handleClick
	 * @param {Function} [options.showLink] returning false to hide link
	 * @param {String} [options.description]
	 *
	 * @example
	 *
	 * var linkEntry = link({
	 *   id: 'foo',
	 *   description: 'Some Description',
	 *   handleClick: function(element, node, event) { ... },
	 *   showLink: function(element, node) { ... }
	 * });
	 *
	 * @return {Entry} the newly created entry
	 */
	function link(translate, options) {

	  var id = options.id,
	      buttonLabel = options.buttonLabel || id,
	      showLink = options.showLink,
	      handleClick = options.handleClick,
	      description = options.description,
	      label = options.label;

	  if (showLink && typeof showLink !== 'function') {
	    throw new Error('options.showLink must be a function');
	  }

	  if (typeof handleClick !== 'function') {
	    throw new Error('options.handleClick must be a function');
	  }

	  var resource = {
	    id: id,
	    html: document.createDocumentFragment()
	  };

	  if (label) {
	    resource.html.appendChild(domify$a('<label for="camunda-' + escapeHTML$a(id) + '" ' +
	      (showLink ? 'data-show="showLink" ' : '') +
	      '>'+ escapeHTML$a(label) +'</label>'));
	  }

	  resource.html.appendChild(domify$a('<div class="bpp-field-wrapper">' +
	    '<a data-action="handleClick" ' +
	    (showLink ? 'data-show="showLink" ' : '') +
	    'class="bpp-entry-link' + (options.cssClasses ? ' ' + escapeHTML$a(options.cssClasses) : '') +
	    '">' + escapeHTML$a(buttonLabel) + '</a></div>'));


	  // add description below link entry field
	  if (description) {
	    resource.html.appendChild(EntryFieldDescription(translate, description, { show: 'showLink' }));
	  }

	  resource.handleClick = bind_1$1(handleClick, resource);

	  if (typeof showLink === 'function') {
	    resource.showLink = function() {
	      return showLink.apply(resource, arguments);
	    };
	  }

	  return resource;
	}

	var LinkEntryFactory = link;

	var domClasses$3 = require$$1.classes,
	    domify$b = require$$1.domify,
	    domQuery$6 = require$$1.query;

	var assign$2 = require$$0.assign,
	    find$2 = require$$0.find,
	    forEach$3 = require$$0.forEach,
	    debounce$2 = require$$0.debounce;

	var escapeHTML$b = Utils.escapeHTML;



	var CLASS_ACTIVE = 'active';

	var FOCUS_LEAVE_DELAY = '150';

	var TEXT_NODE_NAME = '#text';

	var SUGGESTION_LIST_BOX_THRESHOLD = 15;

	var noop$1 = function() {};


	var autoSuggestTextBox = function(translate, options, defaultParameters) {

	  var resource = defaultParameters,
	      label = options.label || resource.id,
	      canBeShown = !!options.show && typeof options.show === 'function',
	      description = options.description;

	  resource.html =
	    domify$b('<label ' +
	      'for="camunda-' + escapeHTML$b(resource.id) + '" ' +
	      (canBeShown ? 'data-show="isShown"' : '') +
	      '>' + label + '</label>' +
	    '<div class="bpp-field-wrapper" ' +
	      (canBeShown ? 'data-show="isShown"' : '') +
	    '>' +
	      '<div ' +
	        'contenteditable="true"' +
	        'id="camunda-' + escapeHTML$b(resource.id) + '" ' +
	        'name="' + escapeHTML$b(options.modelProperty) + '" ' +
	        'data-auto-suggest="suggestItems"' +
	        'data-blur="handleFocusLeave"' +
	      '></div>' +
	      '<div class="bpp-autosuggest-list"></div>' +
	    '</div>');

	  if (description) {
	    domQuery$6('.bpp-field-wrapper', resource.html).appendChild(EntryFieldDescription(translate, description));
	  }

	  if (canBeShown) {
	    resource.isShown = function() {
	      return options.show.apply(resource, arguments);
	    };
	  }

	  /**
	   * Ensure selected item got recognized before list got hidden
	   */
	  resource.handleFocusLeave = debounce$2(function(element, entryNode) {
	    clearSuggestionList(entryNode);
	    hideSuggestionList(entryNode);
	  }, FOCUS_LEAVE_DELAY);

	  /**
	   * Fill the suggestion list relative to the current word under the cursor.
	   *
	   * @param {djs.model.Base} element
	   * @param {HTMLElement} entryNode
	   * @param {Event} event
	   */
	  resource.suggestItems = function(element, entryNode, event) {
	    var editorNode = event.delegateTarget,
	        range = getSelectionRange(),
	        focusNode = range.focusNode,
	        caretPosition = getCaretPosition(range.range),
	        canSuggest = options.canSuggest || noop$1,
	        getItems = options.getItems;

	    function updateSuggestionList(items) {
	      var listNode = domQuery$6('.bpp-autosuggest-list', entryNode);

	      // (1) clear list before
	      clearSuggestionList(entryNode);

	      // (2) keep list invisible if no items
	      if (!items.length) {
	        return;
	      }

	      domClasses$3(listNode).add(CLASS_ACTIVE);

	      // (3) create new items
	      forEach$3(items, function(item) {
	        createSuggestionItem(listNode, item);
	      });

	      // (4) place list relative to cursor
	      var position = getSuggestionListPosition(listNode, document.body).position;
	      setPosition$2(listNode, position.x, position.y);
	    }

	    function createSuggestionItem(parentNode, value) {
	      var itemNode = domify$b('<div class="bpp-autosuggest-item"></div>');
	      itemNode.innerText = escapeHTML$b(value);

	      parentNode.appendChild(itemNode);

	      itemNode.addEventListener('click', handleItemClick);
	    }

	    function handleItemClick(event) {
	      var value = event.target.innerText,
	          wordIndex = currentWord.index,
	          start = wordIndex,
	          end = wordIndex + currentWord[0].length;

	      selectRange(focusNode, start, end);

	      document.execCommand('insertText', false, value);

	      clearSuggestionList(entryNode);
	      hideSuggestionList(entryNode);
	    }

	    hideSuggestionList(entryNode);

	    var currentWord = (getWordUnderCursor(focusNode, caretPosition) || []);

	    if (currentWord && canSuggest(currentWord, editorNode, focusNode)) {
	      var items = getItems(element, entryNode),
	          results = [],
	          value = currentWord[0];

	      // sort matches by
	      // (1) item starts with value (case insensitive)
	      // (2) value is inside suggested item (case insensitive)
	      forEach$3(items, function(item) {
	        var itemLowerCase = item.toLowerCase(),
	            valueLowerCase = value && value.toLowerCase();

	        if (itemLowerCase.indexOf(valueLowerCase) === 0) {
	          results.push(item);
	        }
	      });

	      forEach$3(items, function(item) {
	        var itemLowerCase = item.toLowerCase(item),
	            valueLowerCase = value && value.toLowerCase();

	        if (itemLowerCase.indexOf(valueLowerCase) >= 1) {
	          results.push(item);
	        }
	      });

	      updateSuggestionList(results);
	    }
	  };

	  /**
	  * Calculates the position coordinates of the suggestion list,
	  * dependant on position of cursor
	  *
	  * @return {Object} coordinates
	  */
	  function getSuggestionListPosition(listNode, container) {
	    var range = getSelectionRange().range,
	        cursorBounds = range.getBoundingClientRect(),
	        clientBounds = container.getBoundingClientRect(),
	        listBounds = listNode.getBoundingClientRect();

	    var coordinates = {
	      'top-left': {
	        x: cursorBounds.right - listBounds.width,
	        y: cursorBounds.top - listBounds.height
	      },
	      'top-right': {
	        x: cursorBounds.right,
	        y: cursorBounds.top - listBounds.height
	      },
	      'bottom-left': {
	        x: cursorBounds.right - listBounds.width,
	        y: cursorBounds.top + SUGGESTION_LIST_BOX_THRESHOLD
	      },
	      'bottom-right': {
	        x: cursorBounds.right,
	        y: cursorBounds.top + SUGGESTION_LIST_BOX_THRESHOLD
	      }
	    };

	    var orientation = '';

	    if (cursorBounds.top + SUGGESTION_LIST_BOX_THRESHOLD + listBounds.height > (clientBounds.height + clientBounds.top)) {
	      orientation = 'top-';
	    } else {
	      orientation = 'bottom-';
	    }

	    if (cursorBounds.right + listBounds.width > (clientBounds.width + clientBounds.left)) {
	      orientation += 'left';
	    } else {
	      orientation += 'right';
	    }

	    return { orientation: orientation, position: coordinates[orientation] };
	  }

	  resource.getSuggestionListPosition = getSuggestionListPosition;


	  resource.cssClasses = ['bpp-autosuggest-textbox'];

	  return resource;
	};

	var AutoSuggestTextBoxFactory = autoSuggestTextBox;


	// helpers /////////////////////////////

	function getSelectionRange() {
	  var selection = document.getSelection();

	  return {
	    range: selection.getRangeAt(0),
	    focusNode: selection.focusNode
	  };
	}

	function getCaretPosition(range) {
	  return range.startOffset;
	}

	function selectRange(focusNode, start, end) {
	  var range = document.createRange(),
	      selection = window.getSelection();

	  range.setStart(focusNode, start);
	  range.setEnd(focusNode, end);

	  selection.removeAllRanges();

	  selection.addRange(range);
	}

	function hideSuggestionList(entryNode) {
	  var listNode = domQuery$6('.bpp-autosuggest-list', entryNode);
	  domClasses$3(listNode).remove(CLASS_ACTIVE);
	}

	function clearSuggestionList(entryNode) {
	  var listNode = domQuery$6('.bpp-autosuggest-list', entryNode);
	  while (listNode.firstChild) {
	    listNode.removeChild(listNode.firstChild);
	  }
	}

	function getWordUnderCursor(node, currentCursorPositon) {
	  var value = node.nodeName === TEXT_NODE_NAME ? node.wholeText : node.innerText,
	      allWords = findWords(value);

	  return find$2(allWords, function(word) {
	    var matchValue = word[0],
	        wordStart = word.index,
	        wordEnd = wordStart + matchValue.length - 1;

	    return (
	      wordStart <= (currentCursorPositon - 1) &&
	      wordEnd >= (currentCursorPositon - 1)
	    );
	  });
	}

	/**
	 * Retrieves all words inside a text (also inside clauses and after operators)
	 *
	 * @param {string} value
	 *
	 * @return {Array<Object>}
	 */
	function findWords(value) {

	  // eslint-disable-next-line no-useless-escape
	  return matchAll(value, /[^\s\r\(\)\,\+\-\*\/\{\}]+/g);
	}

	function matchAll(value, regex) {
	  var regexp = RegExp(regex),
	      match,
	      matches = [];

	  while ((match = regexp.exec(value)) !== null) {
	    matches.push(match);
	  }

	  return matches;
	}

	function setPosition$2(el, x, y) {
	  assign$2(el.style, { left: x + 'px', top: y + 'px' });
	}

	var escapeHTML$c = Utils.escapeHTML;
	var domQuery$7 = require$$1.query;


	/**
	 * @param  {object} options
	 * @param  {string} options.id
	 * @param  {string} [options.title='']
	 * @param  {string} [options.description='']
	 * @param  {boolean} [options.open=false]
	 * @param  {Function} [options.onToggle]
	 * @param  {Function} [options.onRemove]
	 *
	 * @return {object}
	 */
	function Collapsible(options) {

	  var id = options.id,
	      title = options.title || '',
	      description = options.description || '',
	      open = !!options.open || false,
	      onToggle = options.onToggle || noop$2,
	      onRemove = options.onRemove,
	      cssClasses = options.cssClasses || [];


	  var collapsibleEntry = {
	    id: id,
	    toggle: toggle,
	    isOpen: isOpen,
	    set: set,
	    setOpen: setOpen,
	    get: get
	  };

	  if (typeof onRemove === 'function') {
	    collapsibleEntry.onRemove = function(entry, entryNode, actionId, event) {
	      var commands = onRemove(entry, entryNode, actionId, event);

	      if (commands) {
	        scheduleCommands(commands, entryNode);
	        return true;
	      }
	    };
	  }

	  function get(element, entryNode) {
	    if (options.get) {
	      return options.get(element, entryNode);
	    }

	    return {
	      title: title || '',
	      description: description || ''
	    };
	  }

	  function set() {
	    var commands = this._commands;

	    if (commands) {
	      delete this._commands;
	      return commands;
	    }
	  }

	  function toggle(element, entryNode, event, scope) {
	    var value = !open;

	    setOpen(value, entryNode);
	    onToggle(value, entryNode);
	  }

	  /**
	   * Set entry's open state.
	   *
	   * @param {boolean} value
	   * @param {HTMLElement} entryNode
	   */
	  function setOpen(value, entryNode) {
	    open = value;
	    entryNode.classList.toggle('bpp-collapsible--collapsed', !value);
	  }

	  function isOpen() {
	    return open;
	  }

	  /**
	   * Schedule commands to be run with next `set` method call.
	   *
	   * @param {Array<any>} commands
	   * @param {HTMLElement} entryNode
	   */
	  function scheduleCommands(commands, entryNode) {
	    collapsibleEntry._commands = commands;

	    // @barmac: hack to make properties panel call `set`
	    var input = domQuery$7('input[type="hidden"]', entryNode);
	    input.value = 1;
	  }

	  collapsibleEntry.html = '<div class="bpp-field-wrapper" data-action="toggle"><input name="hidden" type="hidden">' +
	    '<span class="bpp-collapsible__icon"></span>' +
	    '<label class="bpp-collapsible__title" data-value="title">' + escapeHTML$c(title) + '</label>' +
	    '<label class="bpp-collapsible__description" data-value="description">' + escapeHTML$c(description) + '</label>' +
	    (onRemove ? '<button class="bpp-collapsible__remove action-button clear" data-action="onRemove"></button>' : '') +
	  '</div>';

	  collapsibleEntry.cssClasses = cssClasses.concat(open ?
	    [ 'bpp-collapsible' ] : [ 'bpp-collapsible', 'bpp-collapsible--collapsed' ]
	  );

	  return collapsibleEntry;
	}

	var CollapsibleEntryFactory = Collapsible;

	function noop$2() {}

	var getBusinessObject$4 = require$$0$1.getBusinessObject,
	    escapeHTML$d = Utils.escapeHTML;



	var domify$c = require$$1.domify;

	var toggleSwitch = function(translate, options, defaultParameters) {
	  var resource = defaultParameters,
	      id = resource.id,
	      label = options.label || id,
	      canBeHidden = !!options.hidden && typeof options.hidden === 'function',
	      isOn = options.isOn,
	      descriptionOn = options.descriptionOn,
	      descriptionOff = options.descriptionOff,
	      labelOn = options.labelOn,
	      labelOff = options.labelOff;

	  resource.html = document.createDocumentFragment();

	  resource.html.appendChild(domify$c('<label for="' + escapeHTML$d(id) + '" ' +
	      (canBeHidden ? 'data-show="shouldShow"' : '') +
	      '>' + escapeHTML$d(label) + '</label>' +
	    '<div class="bpp-field-wrapper"' +
	    (canBeHidden ? 'data-show="shouldShow"' : '') +
	    '>' +
	      '<label class="bpp-toggle-switch__switcher">' +
	        '<input id="' + escapeHTML$d(id) + '" ' +
	            'type="checkbox" ' +
	            'name="' + escapeHTML$d(options.modelProperty) + '" />' +
	        '<span class="bpp-toggle-switch__slider"></span>' +
	      '</label>' +
	      '<p class="bpp-toggle-switch__label" data-show="isOn">' +
	        escapeHTML$d(labelOn) +
	      '</p>' +
	      '<p class="bpp-toggle-switch__label" data-show="isOff">' +
	        escapeHTML$d(labelOff) +
	      '</p>' +
	    '</div>'));

	  if (descriptionOn) {
	    resource.html.appendChild(EntryFieldDescription(translate, descriptionOn, { show: 'isOn' }));
	  }

	  if (descriptionOff) {
	    resource.html.appendChild(EntryFieldDescription(translate, descriptionOff, { show: 'isOff' }));
	  }

	  resource.get = function(element) {
	    var bo = getBusinessObject$4(element),
	        res = {};

	    res[options.modelProperty] = bo.get(options.modelProperty);

	    return res;
	  };

	  resource.set = function(element, values) {
	    var res = {};

	    res[options.modelProperty] = !!values[options.modelProperty];

	    return CmdHelper_1.updateProperties(element, res);
	  };

	  if (typeof options.set === 'function') {
	    resource.set = options.set;
	  }

	  if (typeof options.get === 'function') {
	    resource.get = options.get;
	  }

	  if (canBeHidden) {
	    resource.shouldShow = function() {
	      return !options.hidden.apply(resource, arguments);
	    };
	  }

	  resource.isOn = function() {
	    if (canBeHidden && !resource.shouldShow()) {
	      return false;
	    }

	    return isOn.apply(resource, arguments);
	  };

	  resource.isOff = function() {
	    if (canBeHidden && !resource.shouldShow()) {
	      return false;
	    }

	    return !resource.isOn();
	  };

	  resource.cssClasses = ['bpp-toggle-switch'];

	  return resource;
	};

	var ToggleSwitchEntryFactory = toggleSwitch;

	var getBusinessObject$5 = require$$0$1.getBusinessObject;

	// input entities




	// helpers ////////////////////////////////////////

	function ensureNotNull$3(prop) {
	  if (!prop) {
	    throw new Error(prop + ' must be set.');
	  }

	  return prop;
	}

	/**
	 * sets the default parameters which are needed to create an entry
	 *
	 * @param options
	 * @returns {{id: *, description: (*|string), get: (*|Function), set: (*|Function),
	 *            validate: (*|Function), html: string}}
	 */
	var setDefaultParameters = function(options) {

	  // default method to fetch the current value of the input field
	  var defaultGet = function(element) {
	    var bo = getBusinessObject$5(element),
	        res = {},
	        prop = ensureNotNull$3(options.modelProperty);
	    res[prop] = bo.get(prop);

	    return res;
	  };

	  // default method to set a new value to the input field
	  var defaultSet = function(element, values) {
	    var res = {},
	        prop = ensureNotNull$3(options.modelProperty);
	    if (values[prop] !== '') {
	      res[prop] = values[prop];
	    } else {
	      res[prop] = undefined;
	    }

	    return CmdHelper_1.updateProperties(element, res);
	  };

	  // default validation method
	  var defaultValidate = function() {
	    return {};
	  };

	  return {
	    id : options.id,
	    description : (options.description || ''),
	    get : (options.get || defaultGet),
	    set : (options.set || defaultSet),
	    validate : (options.validate || defaultValidate),
	    html: ''
	  };
	};

	function EntryFactory() {

	}

	/**
	 * Generates an text input entry object for a property panel.
	 * options are:
	 * - id: id of the entry - String
	 *
	 * - description: description of the property - String
	 *
	 * - label: label for the input field - String
	 *
	 * - set: setter method - Function
	 *
	 * - get: getter method - Function
	 *
	 * - validate: validation mehtod - Function
	 *
	 * - modelProperty: name of the model property - String
	 *
	 * - buttonAction: Object which contains the following properties: - Object
	 * ---- name: name of the [data-action] callback - String
	 * ---- method: callback function for [data-action] - Function
	 *
	 * - buttonShow: Object which contains the following properties: - Object
	 * ---- name: name of the [data-show] callback - String
	 * ---- method: callback function for [data-show] - Function
	 *
	 * @param options
	 * @returns the propertyPanel entry resource object
	 */
	EntryFactory.textField = function(translate, options) {
	  return TextInputEntryFactory(translate, options, setDefaultParameters(options));
	};

	EntryFactory.validationAwareTextField = function(translate, options) {
	  return ValidationAwareTextInput(translate, options, setDefaultParameters(options));
	};

	/**
	 * Generates a checkbox input entry object for a property panel.
	 * options are:
	 * - id: id of the entry - String
	 *
	 * - description: description of the property - String
	 *
	 * - label: label for the input field - String
	 *
	 * - set: setter method - Function
	 *
	 * - get: getter method - Function
	 *
	 * - validate: validation method - Function
	 *
	 * - modelProperty: name of the model property - String
	 *
	 * @param options
	 * @returns the propertyPanel entry resource object
	 */
	EntryFactory.checkbox = function(translate, options) {
	  return CheckboxEntryFactory(translate, options, setDefaultParameters(options));
	};

	EntryFactory.textBox = function(translate, options) {
	  return TextBoxEntryFactory(translate, options, setDefaultParameters(options));
	};

	EntryFactory.selectBox = function(translate, options) {
	  return SelectEntryFactory(translate, options, setDefaultParameters(options));
	};

	EntryFactory.comboBox = function(translate, options) {
	  return ComboEntryFactory(translate, options);
	};

	EntryFactory.table = function(translate, options) {
	  return TableEntryFactory(translate, options);
	};

	EntryFactory.label = function(options) {
	  return LabelFactory(options);
	};

	EntryFactory.link = function(translate, options) {
	  return LinkEntryFactory(translate, options);
	};

	EntryFactory.autoSuggest = function(translate, options) {
	  return AutoSuggestTextBoxFactory(translate, options, setDefaultParameters(options));
	};

	EntryFactory.collapsible = function(options) {
	  return CollapsibleEntryFactory(options);
	};

	EntryFactory.toggleSwitch = function(translate, options) {
	  return ToggleSwitchEntryFactory(translate, options, setDefaultParameters(options));
	};

	var EntryFactory_1 = EntryFactory;

	var is$6 = require$$0$1.is,
	    getBusinessObject$6 = require$$0$1.getBusinessObject;


	var ParticipantHelper = {};

	var ParticipantHelper_1 = ParticipantHelper;

	ParticipantHelper.modifyProcessBusinessObject = function(element, property, values) {
	  if (!is$6(element, 'bpmn:Participant')) {
	    return {};
	  }

	  var bo = getBusinessObject$6(element).get('processRef'),
	      properties = {};

	  properties[property] = values[property];

	  return CmdHelper_1.updateBusinessObject(element, bo, properties);
	};

	ParticipantHelper.getProcessBusinessObject = function(element, propertyName) {
	  if (!is$6(element, 'bpmn:Participant')) {
	    return {};
	  }

	  var bo = getBusinessObject$6(element).get('processRef'),
	      properties = {};

	  properties[propertyName] = bo.get(propertyName);

	  return properties;
	};

	/**
	 * Create an entry to modify the name of an an element.
	 *
	 * @param  {djs.model.Base} element
	 * @param  {Object} options
	 * @param  {string} options.id the id of the entry
	 * @param  {string} options.label the label of the entry
	 *
	 * @return {Array<Object>} return an array containing
	 *                         the entry to modify the name
	 */
	var Name = function(element, options, translate) {

	  options = options || {};
	  var id = options.id || 'name',
	      label = options.label || translate('Name'),
	      modelProperty = options.modelProperty || 'name';

	  var nameEntry = EntryFactory_1.textBox(translate, {
	    id: id,
	    label: label,
	    modelProperty: modelProperty,
	    get: options.get,
	    set: options.set
	  });

	  return [ nameEntry ];

	};

	var is$7 = require$$0$1.is,
	    getBusinessObject$7 = require$$0$1.getBusinessObject;

	var ProcessProps = function(group, element, translate, options) {
	  var businessObject = getBusinessObject$7(element);

	  var processIdDescription = options && options.processIdDescription;

	  if (is$7(element, 'bpmn:Process') || (is$7(element, 'bpmn:Participant') && businessObject.get('processRef'))) {

	    /**
	     * processId
	     */
	    if (is$7(element, 'bpmn:Participant')) {
	      var idEntry = EntryFactory_1.validationAwareTextField(translate, {
	        id: 'process-id',
	        label: translate('Process Id'),
	        description: processIdDescription && translate(processIdDescription),
	        modelProperty: 'processId'
	      });

	      // in participants we have to change the default behavior of set and get
	      idEntry.get = function(element) {
	        var properties = ParticipantHelper_1.getProcessBusinessObject(element, 'id');
	        return { processId: properties.id };
	      };

	      idEntry.set = function(element, values) {
	        return ParticipantHelper_1.modifyProcessBusinessObject(element, 'id', { id: values.processId });
	      };

	      idEntry.validate = function(element, values) {
	        var idValue = values.processId;

	        var bo = getBusinessObject$7(element);

	        var processIdError = Utils.isIdValid(bo.processRef, idValue, translate);

	        return processIdError ? { processId: processIdError } : {};
	      };

	      group.entries.push(idEntry);


	      /**
	       * process name
	       */
	      var processNameEntry = Name(element, {
	        id: 'process-name',
	        label: translate('Process Name')
	      })[0];

	      // in participants we have to change the default behavior of set and get
	      processNameEntry.get = function(element) {
	        return ParticipantHelper_1.getProcessBusinessObject(element, 'name');
	      };

	      processNameEntry.set = function(element, values) {
	        return ParticipantHelper_1.modifyProcessBusinessObject(element, 'name', values);
	      };

	      group.entries.push(processNameEntry);
	    }
	  }
	};

	var getBusinessObject$8 = require$$0$1.getBusinessObject,
	    is$8 = require$$0$1.is;

	var EventDefinitionHelper = {};

	var EventDefinitionHelper_1 = EventDefinitionHelper;

	EventDefinitionHelper.getEventDefinition = function(element, eventType) {

	  var bo = getBusinessObject$8(element),
	      eventDefinition = null;

	  if (bo.eventDefinitions) {
	    forEach_1(bo.eventDefinitions, function(event) {
	      if (is$8(event, eventType)) {
	        eventDefinition = event;
	      }
	    });
	  }

	  return eventDefinition;
	};

	EventDefinitionHelper.getTimerEventDefinition = function(element) {
	  return this.getEventDefinition(element, 'bpmn:TimerEventDefinition');
	};

	EventDefinitionHelper.getMessageEventDefinition = function(element) {
	  return this.getEventDefinition(element, 'bpmn:MessageEventDefinition');
	};

	EventDefinitionHelper.getSignalEventDefinition = function(element) {
	  return this.getEventDefinition(element, 'bpmn:SignalEventDefinition');
	};

	EventDefinitionHelper.getErrorEventDefinition = function(element) {
	  return this.getEventDefinition(element, 'bpmn:ErrorEventDefinition');
	};

	EventDefinitionHelper.getEscalationEventDefinition = function(element) {
	  return this.getEventDefinition(element, 'bpmn:EscalationEventDefinition');
	};

	EventDefinitionHelper.getCompensateEventDefinition = function(element) {
	  return this.getEventDefinition(element, 'bpmn:CompensateEventDefinition');
	};

	EventDefinitionHelper.getLinkEventDefinition = function(element) {
	  return this.getEventDefinition(element, 'bpmn:LinkEventDefinition');
	};

	EventDefinitionHelper.getConditionalEventDefinition = function(element) {
	  return this.getEventDefinition(element, 'bpmn:ConditionalEventDefinition');
	};

	var domQuery$8 = require$$1.query,
	    domify$d = require$$1.domify,
	    domAttr$2 = require$$1.attr;




	var escapeHTML$e = Utils.escapeHTML;

	var selector = 'select[name=selectedElement]';

	/**
	 * Get select box containing all elements.
	 *
	 * @param {DOMElement} node
	 *
	 * @return {DOMElement} the select box
	 */
	function getSelectBox(node) {
	  return domQuery$8(selector, node);
	}

	/**
	 * Find element by given id.
	 *
	 * @param {ModdleElement} eventDefinition
	 *
	 * @return {ModdleElement} an element
	 */
	function findElementById(eventDefinition, type, id) {
	  var elements = Utils.findRootElementsByType(eventDefinition, type);
	  return find_1(elements, function(element) {
	    return element.id === id;
	  });
	}

	/**
	 * Create an entry to modify the reference to an element from an
	 * event definition.
	 *
	 * @param  {djs.model.Base} element
	 * @param  {ModdleElement} definition
	 * @param  {BpmnFactory} bpmnFactory
	 * @param  {Object} options
	 * @param  {string} options.label the label of the entry
	 * @param  {string} options.description the description of the entry
	 * @param  {string} options.elementName the name of the element
	 * @param  {string} options.elementType the type of the element
	 * @param  {string} options.referenceProperty the name of referencing property
	 * @param  {string} options.newElementIdPrefix the prefix of a new created element
	 *
	 * @return {Array<Object>} return an array containing the entries
	 */
	var EventDefinitionReference = function(element, definition, bpmnFactory, options) {

	  var elementName = options.elementName || '',
	      elementType = options.elementType,
	      referenceProperty = options.referenceProperty;

	  var newElementIdPrefix = options.newElementIdPrefix || 'elem_';

	  var label = options.label || '',
	      description = options.description || '';

	  var entries = [];

	  var canBeHidden = !!options.hidden && typeof options.hidden === 'function';

	  entries.push({

	    id: options.id || 'event-definitions-' + elementName,
	    description: description,
	    isShown: function() {
	      if (canBeHidden) {
	        return !options.hidden.apply(definition, arguments);
	      }
	      return !options.hidden;
	    },
	    html: '<div class="bpp-row bpp-select" data-show="isShown">' +
	             '<label for="camunda-' + escapeHTML$e(elementName) + '">' + escapeHTML$e(label) + '</label>' +
	             '<div class="bpp-field-wrapper">' +
	               '<select id="camunda-' + escapeHTML$e(elementName) + '" name="selectedElement" data-value>' +
	               '</select>' +
	               '<button class="action-button add" id="addElement" data-action="addElement"><span>+</span></button>' +
	             '</div>' +
	          '</div>',

	    get: function(element, entryNode) {
	      Utils.updateOptionsDropDown(selector, definition, elementType, entryNode);
	      var reference = definition.get(referenceProperty);
	      return {
	        selectedElement: (reference && reference.id) || ''
	      };
	    },

	    set: function(element, values) {
	      var selection = values.selectedElement;

	      var props = {};

	      if (!selection || typeof selection === 'undefined') {

	        // remove reference to element
	        props[referenceProperty] = undefined;
	        return CmdHelper_1.updateBusinessObject(element, definition, props);
	      }

	      var commands = [];

	      var selectedElement = findElementById(definition, elementType, selection);
	      if (!selectedElement) {
	        var root = Utils.getRoot(definition);

	        // create a new element
	        selectedElement = ElementHelper_1.createElement(elementType, { name: selection }, root, bpmnFactory);
	        commands.push(CmdHelper_1.addAndRemoveElementsFromList(element, root, 'rootElements', null, [ selectedElement ]));
	      }

	      // update reference to element
	      props[referenceProperty] = selectedElement;
	      commands.push(CmdHelper_1.updateBusinessObject(element, definition, props));

	      return commands;
	    },

	    addElement: function(element, inputNode) {

	      // note: this generated id will be used as name
	      // of the element and not as id
	      var id = Utils.nextId(newElementIdPrefix);

	      var optionTemplate = domify$d('<option value="' + escapeHTML$e(id) + '"> (id='+escapeHTML$e(id)+')' + '</option>');

	      // add new option
	      var selectBox = getSelectBox(inputNode);
	      selectBox.insertBefore(optionTemplate, selectBox.firstChild);

	      // select new element in the select box
	      forEach_1(selectBox, function(option) {
	        if (option.value === id) {
	          domAttr$2(option, 'selected', 'selected');
	        } else {
	          domAttr$2(option, 'selected', null);
	        }
	      });

	      return true;
	    }

	  });

	  return entries;

	};

	/**
	 * Create an entry to modify a property of an element which
	 * is referenced by a event definition.
	 *
	 * @param  {djs.model.Base} element
	 * @param  {ModdleElement} definition
	 * @param  {BpmnFactory} bpmnFactory
	 * @param  {Object} options
	 * @param  {string} options.id the id of the entry
	 * @param  {string} options.label the label of the entry
	 * @param  {string} options.referenceProperty the name of referencing property
	 * @param  {string} options.modelProperty the name of property to modify
	 * @param  {string} options.shouldValidate a flag indicate whether to validate or not
	 *
	 * @return {Array<Object>} return an array containing the entries
	 */
	var ElementReferenceProperty = function(element, definition, bpmnFactory, translate, options) {

	  var id = options.id || 'element-property';
	  var label = options.label;
	  var referenceProperty = options.referenceProperty;
	  var modelProperty = options.modelProperty || 'name';
	  var shouldValidate = options.shouldValidate || false;
	  var description = options.description;
	  var canBeHidden = !!options.hidden && typeof options.hidden === 'function';

	  var entry = EntryFactory_1.textField(translate, {
	    id: id,
	    label: label,
	    modelProperty: modelProperty,
	    description: description,

	    get: function(element, node) {
	      var reference = definition.get(referenceProperty);
	      var props = {};
	      props[modelProperty] = reference && reference.get(modelProperty);
	      return props;
	    },

	    set: function(element, values, node) {
	      var reference = definition.get(referenceProperty);
	      var props = {};
	      props[modelProperty] = values[modelProperty] || undefined;
	      return CmdHelper_1.updateBusinessObject(element, reference, props);
	    },

	    hidden: function(element, node) {
	      if (canBeHidden) {
	        return options.hidden.apply(definition, arguments) || !definition.get(referenceProperty);
	      }
	      return !definition.get(referenceProperty);
	    }
	  });

	  if (shouldValidate) {
	    entry.validate = function(element, values, node) {
	      var reference = definition.get(referenceProperty);
	      if (reference && !values[modelProperty]) {
	        var validationErrors = {};
	        validationErrors[modelProperty] = 'Must provide a value';
	        return validationErrors;
	      }
	    };
	  }

	  return [ entry ];
	};

	var MessageEventDefinition = function(group, element, bpmnFactory, messageEventDefinition, translate) {

	  group.entries = group.entries.concat(EventDefinitionReference(element, messageEventDefinition, bpmnFactory, {
	    label: translate('Global Message referenced'),
	    elementName: 'message',
	    elementType: 'bpmn:Message',
	    referenceProperty: 'messageRef',
	    newElementIdPrefix: 'Message_'
	  }));


	  group.entries = group.entries.concat(
	    ElementReferenceProperty(element, messageEventDefinition, bpmnFactory, translate, {
	      id: 'message-element-name',
	      label: translate('Global Message Name'),
	      referenceProperty: 'messageRef',
	      modelProperty: 'name',
	      shouldValidate: true
	    })
	  );

	};

	var SignalEventDefinition = function(group, element, bpmnFactory, signalEventDefinition, translate) {

	  group.entries = group.entries.concat(EventDefinitionReference(element, signalEventDefinition, bpmnFactory, {
	    label: translate('Global Signal referenced'),
	    elementName: 'signal',
	    elementType: 'bpmn:Signal',
	    referenceProperty: 'signalRef',
	    newElementIdPrefix: 'Signal_'
	  }));


	  group.entries = group.entries.concat(
	    ElementReferenceProperty(element, signalEventDefinition, bpmnFactory, translate, {
	      id: 'signal-element-name',
	      label: translate('Global Signal Name'),
	      referenceProperty: 'signalRef',
	      modelProperty: 'name',
	      shouldValidate: true
	    })
	  );

	};

	var ErrorEventDefinition = function(group, element, bpmnFactory, errorEventDefinition, translate) {


	  group.entries = group.entries.concat(EventDefinitionReference(element, errorEventDefinition, bpmnFactory, {
	    label: translate('Global Error referenced'),
	    elementName: 'error',
	    elementType: 'bpmn:Error',
	    referenceProperty: 'errorRef',
	    newElementIdPrefix: 'Error_'
	  }));


	  group.entries = group.entries.concat(
	    ElementReferenceProperty(element, errorEventDefinition, bpmnFactory, translate, {
	      id: 'error-element-name',
	      label: translate('Name'),
	      referenceProperty: 'errorRef',
	      modelProperty: 'name',
	      shouldValidate: true
	    })
	  );


	  group.entries = group.entries.concat(
	    ElementReferenceProperty(element, errorEventDefinition, bpmnFactory, translate, {
	      id: 'error-element-code',
	      label: translate('Code'),
	      referenceProperty: 'errorRef',
	      modelProperty: 'errorCode'
	    })
	  );

	};

	var EscalationEventDefinition = function(group, element, bpmnFactory, escalationEventDefinition, showEscalationCodeVariable, translate) {

	  group.entries = group.entries.concat(EventDefinitionReference(element, escalationEventDefinition, bpmnFactory, {
	    label: translate('Global Escalation referenced'),
	    elementName: 'escalation',
	    elementType: 'bpmn:Escalation',
	    referenceProperty: 'escalationRef',
	    newElementIdPrefix: 'Escalation_'
	  }));


	  group.entries = group.entries.concat(
	    ElementReferenceProperty(element, escalationEventDefinition, bpmnFactory, translate, {
	      id: 'escalation-element-name',
	      label: translate('Global Escalation Name'),
	      referenceProperty: 'escalationRef',
	      modelProperty: 'name',
	      shouldValidate: true
	    })
	  );


	  group.entries = group.entries.concat(
	    ElementReferenceProperty(element, escalationEventDefinition, bpmnFactory, translate, {
	      id: 'escalation-element-code',
	      label: translate('Global Escalation Code'),
	      referenceProperty: 'escalationRef',
	      modelProperty: 'escalationCode'
	    })
	  );


	  if (showEscalationCodeVariable) {
	    group.entries.push(EntryFactory_1.validationAwareTextField(translate, {
	      id : 'escalationCodeVariable',
	      label : translate('Escalation Code Variable'),
	      modelProperty : 'escalationCodeVariable',
	      description: translate('Define the name of the variable that will contain the escalation code'),

	      getProperty: function(element) {
	        var codeVariable = escalationEventDefinition.get('camunda:escalationCodeVariable');

	        return codeVariable;
	      },

	      setProperty: function(element, values) {
	        if (values.escalationCodeVariable === '')
	          values.escalationCodeVariable = undefined;

	        return CmdHelper_1.updateBusinessObject(element, escalationEventDefinition, values);
	      },

	      validate: function(element, values) {
	        var validation = {},
	            targetValue = values.escalationCodeVariable;

	        if (Utils.containsSpace(targetValue)) {
	          validation.escalationCodeVariable = translate('Escalation code variable must not contain spaces.');
	        }

	        return validation;
	      }
	    }));
	  }
	};

	/**
	 * Get the timer definition type for a given timer event definition.
	 *
	 * @param {ModdleElement<bpmn:TimerEventDefinition>} timer
	 *
	 * @return {string|undefined} the timer definition type
	 */
	function getTimerDefinitionType(timer) {

	  if (!timer) {
	    return;
	  }

	  var timeDate = timer.get('timeDate');
	  if (typeof timeDate !== 'undefined') {
	    return 'timeDate';
	  }

	  var timeCycle = timer.get('timeCycle');
	  if (typeof timeCycle !== 'undefined') {
	    return 'timeCycle';
	  }

	  var timeDuration = timer.get('timeDuration');
	  if (typeof timeDuration !== 'undefined') {
	    return 'timeDuration';
	  }
	}

	/**
	 * Get the actual timer event definition based on option, whether it's a getter
	 * to fetch the timer event definition or the exact event definition itself
	 *
	 * @param {ModdleElement<bpmn:TimerEventDefinition>|Function} timerOrFunction
	 * @param {Shape} element
	 * @param {HTMLElement} node
	 *
	 * @return ModdleElement<bpmn:TimerEventDefinition>
	 */
	function getTimerDefinition(timerOrFunction, element, node) {
	  if (typeof timerOrFunction === 'function') {
	    return timerOrFunction(element, node);
	  }

	  return timerOrFunction;
	}

	/**
	 * Creates 'bpmn:FormalExpression' element.
	 *
	 * @param {ModdleElement} parent
	 * @param {string} body
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement<bpmn:FormalExpression>} a formal expression
	 */
	function createFormalExpression(parent, body, bpmnFactory) {
	  body = body || undefined;
	  return ElementHelper_1.createElement('bpmn:FormalExpression', { body: body }, parent, bpmnFactory);
	}

	function TimerEventDefinition(group, element, bpmnFactory, timerEventDefinition, translate, options) {

	  var selectOptions = [
	    { value: 'timeDate', name: translate('Date') },
	    { value: 'timeDuration', name: translate('Duration') },
	    { value: 'timeCycle', name: translate('Cycle') }
	  ];

	  var prefix = options && options.idPrefix,
	      createTimerEventDefinition = options && options.createTimerEventDefinition;


	  group.entries.push(EntryFactory_1.selectBox(translate, {
	    id: prefix + 'timer-event-definition-type',
	    label: translate('Timer Definition Type'),
	    selectOptions: selectOptions,
	    emptyParameter: true,
	    modelProperty: 'timerDefinitionType',

	    get: function(element, node) {
	      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node);

	      return {
	        timerDefinitionType: getTimerDefinitionType(timerDefinition) || ''
	      };
	    },

	    set: function(element, values, node) {
	      var props = {
	        timeDuration: undefined,
	        timeDate: undefined,
	        timeCycle: undefined
	      };


	      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node),
	          newType = values.timerDefinitionType;

	      if (!timerDefinition && typeof createTimerEventDefinition === 'function') {
	        timerDefinition = createTimerEventDefinition(element, node);
	      }

	      if (values.timerDefinitionType) {
	        var oldType = getTimerDefinitionType(timerDefinition);

	        var value;
	        if (oldType) {
	          var definition = timerDefinition.get(oldType);
	          value = definition.get('body');
	        }

	        props[newType] = createFormalExpression(timerDefinition, value, bpmnFactory);
	      }

	      return CmdHelper_1.updateBusinessObject(element, timerDefinition, props);
	    },

	    hidden: function(element, node) {
	      return getTimerDefinition(timerEventDefinition, element, node) === undefined;
	    }

	  }));


	  group.entries.push(EntryFactory_1.textField(translate, {
	    id: prefix + 'timer-event-definition',
	    label: translate('Timer Definition'),
	    modelProperty: 'timerDefinition',

	    get: function(element, node) {
	      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node),
	          type = getTimerDefinitionType(timerDefinition),
	          definition = type && timerDefinition.get(type),
	          value = definition && definition.get('body');

	      return {
	        timerDefinition: value
	      };
	    },

	    set: function(element, values, node) {
	      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node),
	          type = getTimerDefinitionType(timerDefinition),
	          definition = type && timerDefinition.get(type);

	      if (definition) {
	        return CmdHelper_1.updateBusinessObject(element, definition, {
	          body: values.timerDefinition || undefined
	        });
	      }
	    },

	    validate: function(element, node) {
	      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node),
	          type = getTimerDefinitionType(timerDefinition),
	          definition = type && timerDefinition.get(type);

	      if (definition) {
	        var value = definition.get('body');
	        if (!value) {
	          return {
	            timerDefinition: translate('Must provide a value')
	          };
	        }
	      }
	    },

	    hidden: function(element, node) {
	      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node);

	      return !getTimerDefinitionType(timerDefinition);
	    }

	  }));

	}

	var TimerEventDefinition_1 = TimerEventDefinition;

	var getBusinessObject$9 = require$$0$1.getBusinessObject,
	    is$9 = require$$0$1.is;




	function getContainedActivities(element) {
	  return getFlowElements(element, 'bpmn:Activity');
	}

	function getContainedBoundaryEvents(element) {
	  return getFlowElements(element, 'bpmn:BoundaryEvent');
	}

	function getFlowElements(element, type) {
	  return Utils.filterElementsByType(element.flowElements, type);
	}

	function isCompensationEventAttachedToActivity(activity, boundaryEvents) {
	  var activityId = activity.id;
	  var boundaryEvent = find_1(boundaryEvents, function(boundaryEvent) {
	    var compensateEventDefinition = EventDefinitionHelper_1.getCompensateEventDefinition(boundaryEvent);
	    var attachedToRef = boundaryEvent.attachedToRef;
	    return compensateEventDefinition && attachedToRef && attachedToRef.id === activityId;
	  });
	  return !!boundaryEvent;
	}

	// subprocess: only when it is not triggeredByEvent
	// activity: only when it attach a compensation boundary event
	// callActivity: no limitation
	function canActivityBeCompensated(activity, boundaryEvents) {
	  return (is$9(activity, 'bpmn:SubProcess') && !activity.triggeredByEvent) ||
	          is$9(activity, 'bpmn:CallActivity') ||
	          isCompensationEventAttachedToActivity(activity, boundaryEvents);
	}

	function getActivitiesForCompensation(element) {
	  var boundaryEvents = getContainedBoundaryEvents(element);
	  return filter_1(getContainedActivities(element), function(activity) {
	    return canActivityBeCompensated(activity, boundaryEvents);
	  });
	}

	function getActivitiesForActivityRef(element) {
	  var bo = getBusinessObject$9(element);
	  var parent = bo.$parent;

	  var activitiesForActivityRef = getActivitiesForCompensation(parent);

	  // if throwing compensation event is in an event sub process:
	  // get also all activities outside of the event sub process
	  if (is$9(parent, 'bpmn:SubProcess') && parent.triggeredByEvent) {
	    parent = parent.$parent;
	    if (parent) {
	      activitiesForActivityRef = activitiesForActivityRef.concat(getActivitiesForCompensation(parent));
	    }

	  }

	  return activitiesForActivityRef;
	}

	function createActivityRefOptions(element) {
	  var options = [ { value: '' } ];

	  var activities = getActivitiesForActivityRef(element);
	  forEach_1(activities, function(activity) {
	    var activityId = activity.id;
	    var name = (activity.name ? (activity.name + ' ') : '') + '(id=' + activityId + ')';
	    options.push({ value: activityId, name: name });
	  });

	  return options;
	}


	var CompensateEventDefinition = function(group, element, bpmnFactory, compensateEventDefinition, elementRegistry, translate) {

	  group.entries.push(EntryFactory_1.checkbox(translate, {
	    id: 'wait-for-completion',
	    label: translate('Wait for Completion'),
	    modelProperty: 'waitForCompletion',

	    get: function(element, node) {
	      return {
	        waitForCompletion: compensateEventDefinition.waitForCompletion
	      };
	    },

	    set: function(element, values) {
	      values.waitForCompletion = values.waitForCompletion || false;
	      return CmdHelper_1.updateBusinessObject(element, compensateEventDefinition, values);
	    }
	  }));

	  group.entries.push(EntryFactory_1.selectBox(translate, {
	    id: 'activity-ref',
	    label: translate('Activity Ref'),
	    selectOptions: createActivityRefOptions(element),
	    modelProperty: 'activityRef',

	    get: function(element, node) {
	      var activityRef = compensateEventDefinition.activityRef;
	      activityRef = activityRef && activityRef.id;
	      return {
	        activityRef: activityRef || ''
	      };
	    },

	    set: function(element, values) {
	      var activityRef = values.activityRef || undefined;
	      activityRef = activityRef && getBusinessObject$9(elementRegistry.get(activityRef));
	      return CmdHelper_1.updateBusinessObject(element, compensateEventDefinition, {
	        activityRef: activityRef
	      });
	    }
	  }));

	};

	var require$$1$2 = /*@__PURE__*/getAugmentedNamespace(DiUtil);

	var is$a = require$$0$1.is,
	    isEventSubProcess$1 = require$$1$2.isEventSubProcess;

	var ConditionalEventDefinition = function(group, element, bpmnFactory, conditionalEventDefinition, elementRegistry, translate) {

	  var getValue = function(modelProperty) {
	    return function(element) {
	      var modelPropertyValue = conditionalEventDefinition.get('camunda:' + modelProperty);
	      var value = {};

	      value[modelProperty] = modelPropertyValue;
	      return value;
	    };
	  };

	  var setValue = function(modelProperty) {
	    return function(element, values) {
	      var props = {};

	      props['camunda:' + modelProperty] = values[modelProperty] || undefined;

	      return CmdHelper_1.updateBusinessObject(element, conditionalEventDefinition, props);
	    };
	  };

	  group.entries.push(EntryFactory_1.textField(translate, {
	    id: 'variableName',
	    label: translate('Variable Name'),
	    modelProperty : 'variableName',

	    get: getValue('variableName'),
	    set: setValue('variableName')
	  }));

	  var isConditionalStartEvent =
	    is$a(element, 'bpmn:StartEvent') && !isEventSubProcess$1(element.parent);

	  if (!isConditionalStartEvent) {
	    group.entries.push(EntryFactory_1.textField(translate, {
	      id: 'variableEvents',
	      label: translate('Variable Events'),
	      description: translate('Specify more than one variable change event as a comma separated list.'),
	      modelProperty : 'variableEvents',

	      get: getValue('variableEvents'),
	      set: setValue('variableEvents')
	    }));
	  }
	};

	var require$$1$3 = /*@__PURE__*/getAugmentedNamespace(ModelingUtil);

	var is$b = require$$0$1.is,
	    isAny$1 = require$$1$3.isAny,
	    getBusinessObject$a = require$$0$1.getBusinessObject;






	var EventProps = function(group, element, bpmnFactory, elementRegistry, translate) {
	  var events = [
	    'bpmn:StartEvent',
	    'bpmn:EndEvent',
	    'bpmn:IntermediateThrowEvent',
	    'bpmn:BoundaryEvent',
	    'bpmn:IntermediateCatchEvent'
	  ];

	  // Message and Signal Event Definition
	  forEach_1(events, function(event) {
	    if (is$b(element, event)) {

	      var messageEventDefinition = EventDefinitionHelper_1.getMessageEventDefinition(element),
	          signalEventDefinition = EventDefinitionHelper_1.getSignalEventDefinition(element);

	      if (messageEventDefinition) {
	        MessageEventDefinition(group, element, bpmnFactory, messageEventDefinition, translate);
	      }

	      if (signalEventDefinition) {
	        SignalEventDefinition(group, element, bpmnFactory, signalEventDefinition, translate);
	      }

	    }
	  });

	  // Special Case: Receive Task
	  if (is$b(element, 'bpmn:ReceiveTask')) {
	    MessageEventDefinition(group, element, bpmnFactory, getBusinessObject$a(element), translate);
	  }

	  // Error Event Definition
	  var errorEvents = [
	    'bpmn:StartEvent',
	    'bpmn:BoundaryEvent',
	    'bpmn:EndEvent'
	  ];

	  forEach_1(errorEvents, function(event) {
	    if (is$b(element, event)) {

	      var errorEventDefinition = EventDefinitionHelper_1.getErrorEventDefinition(element);

	      if (errorEventDefinition) {

	        ErrorEventDefinition(group, element, bpmnFactory, errorEventDefinition, translate);
	      }
	    }
	  });

	  // Escalation Event Definition
	  var escalationEvents = [
	    'bpmn:StartEvent',
	    'bpmn:BoundaryEvent',
	    'bpmn:IntermediateThrowEvent',
	    'bpmn:EndEvent'
	  ];

	  forEach_1(escalationEvents, function(event) {
	    if (is$b(element, event)) {

	      var showEscalationCodeVariable = is$b(element, 'bpmn:StartEvent') || is$b(element, 'bpmn:BoundaryEvent');

	      // get business object
	      var escalationEventDefinition = EventDefinitionHelper_1.getEscalationEventDefinition(element);

	      if (escalationEventDefinition) {
	        EscalationEventDefinition(group, element, bpmnFactory, escalationEventDefinition, showEscalationCodeVariable,
	          translate);
	      }
	    }

	  });

	  // Timer Event Definition
	  var timerEvents = [
	    'bpmn:StartEvent',
	    'bpmn:BoundaryEvent',
	    'bpmn:IntermediateCatchEvent'
	  ];

	  forEach_1(timerEvents, function(event) {
	    if (is$b(element, event)) {

	      // get business object
	      var timerEventDefinition = EventDefinitionHelper_1.getTimerEventDefinition(element);

	      if (timerEventDefinition) {
	        TimerEventDefinition_1(group, element, bpmnFactory, timerEventDefinition, translate);
	      }
	    }
	  });

	  // Compensate Event Definition
	  var compensationEvents = [
	    'bpmn:EndEvent',
	    'bpmn:IntermediateThrowEvent'
	  ];

	  forEach_1(compensationEvents, function(event) {
	    if (is$b(element, event)) {

	      // get business object
	      var compensateEventDefinition = EventDefinitionHelper_1.getCompensateEventDefinition(element);

	      if (compensateEventDefinition) {
	        CompensateEventDefinition(group, element, bpmnFactory, compensateEventDefinition, elementRegistry, translate);
	      }
	    }
	  });


	  // Conditional Event Definition
	  var conditionalEvents = [
	    'bpmn:StartEvent',
	    'bpmn:BoundaryEvent',
	    'bpmn:IntermediateThrowEvent',
	    'bpmn:IntermediateCatchEvent'
	  ];

	  if (isAny$1(element, conditionalEvents)) {

	    // get business object
	    var conditionalEventDefinition = EventDefinitionHelper_1.getConditionalEventDefinition(element);

	    if (conditionalEventDefinition) {
	      ConditionalEventDefinition(group, element, bpmnFactory, conditionalEventDefinition, elementRegistry, translate);
	    }
	  }

	};

	var is$c = require$$0$1.is,
	    getBusinessObject$b = require$$0$1.getBusinessObject;



	function getLinkEventDefinition(element) {

	  var bo = getBusinessObject$b(element);

	  var linkEventDefinition = null;
	  if (bo.eventDefinitions) {
	    forEach_1(bo.eventDefinitions, function(eventDefinition) {
	      if (is$c(eventDefinition, 'bpmn:LinkEventDefinition')) {
	        linkEventDefinition = eventDefinition;
	      }
	    });
	  }

	  return linkEventDefinition;
	}

	var LinkProps = function(group, element, translate) {
	  var linkEvents = [ 'bpmn:IntermediateThrowEvent', 'bpmn:IntermediateCatchEvent' ];

	  forEach_1(linkEvents, function(event) {
	    if (is$c(element, event)) {

	      var linkEventDefinition = getLinkEventDefinition(element);

	      if (linkEventDefinition) {
	        var entry = EntryFactory_1.textField(translate, {
	          id: 'link-event',
	          label: translate('Link Name'),
	          modelProperty: 'link-name'
	        });

	        entry.get = function() {
	          return { 'link-name': linkEventDefinition.get('name') };
	        };

	        entry.set = function(element, values) {
	          var newProperties = {
	            name: values['link-name']
	          };
	          return CmdHelper_1.updateBusinessObject(element, linkEventDefinition, newProperties);
	        };

	        group.entries.push(entry);
	      }
	    }
	  });
	};

	var is$d = require$$0$1.is,
	    getBusinessObject$c = require$$0$1.getBusinessObject;


	var DocumentationProps = function(group, element, bpmnFactory, translate) {

	  var getValue = function(businessObject) {
	    return function(element) {
	      var documentations = businessObject && businessObject.get('documentation'),
	          text = (documentations && documentations.length > 0) ? documentations[0].text : '';

	      return { documentation: text };
	    };
	  };

	  var setValue = function(businessObject) {
	    return function(element, values) {
	      var newObjectList = [];

	      if (typeof values.documentation !== 'undefined' && values.documentation !== '') {
	        newObjectList.push(bpmnFactory.create('bpmn:Documentation', {
	          text: values.documentation
	        }));
	      }

	      return CmdHelper_1.setList(element, businessObject, 'documentation', newObjectList);
	    };
	  };

	  // Element Documentation
	  var elementDocuEntry = EntryFactory_1.textBox(translate, {
	    id: 'documentation',
	    label: translate('Element Documentation'),
	    modelProperty: 'documentation'
	  });

	  elementDocuEntry.set = setValue(getBusinessObject$c(element));

	  elementDocuEntry.get = getValue(getBusinessObject$c(element));

	  group.entries.push(elementDocuEntry);


	  var processRef;

	  // Process Documentation when having a Collaboration Diagram
	  if (is$d(element, 'bpmn:Participant')) {

	    processRef = getBusinessObject$c(element).processRef;

	    // do not show for collapsed Pools/Participants
	    if (processRef) {
	      var processDocuEntry = EntryFactory_1.textBox(translate, {
	        id: 'process-documentation',
	        label: translate('Process Documentation'),
	        modelProperty: 'documentation'
	      });

	      processDocuEntry.set = setValue(processRef);

	      processDocuEntry.get = getValue(processRef);

	      group.entries.push(processDocuEntry);
	    }
	  }

	};

	var getBusinessObject$d = require$$0$1.getBusinessObject;

	var IdProps = function(group, element, translate, options) {
	  if (!options) {
	    options = {};
	  }

	  // Id
	  group.entries.push(EntryFactory_1.validationAwareTextField(translate, {
	    id: options.id || 'id',
	    label: translate(options.label || 'Id'),
	    description: options.description && translate(options.description),
	    modelProperty: 'id',
	    getProperty: function(element) {
	      return getBusinessObject$d(element).id;
	    },
	    setProperty: function(element, properties) {

	      element = element.labelTarget || element;

	      return CmdHelper_1.updateProperties(element, properties);
	    },
	    validate: function(element, values) {
	      var idValue = values.id;

	      var bo = getBusinessObject$d(element);

	      var idError = Utils.isIdValid(bo, idValue, translate);

	      return idError ? { id: idError } : {};
	    }
	  }));

	};

	var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(Collections);

	var collectionAdd = require$$0$2.add,
	    getBusinessObject$e = require$$0$1.getBusinessObject;

	var CategoryHelper = {};

	var CategoryHelper_1 = CategoryHelper;

	/**
	 * Creates a new bpmn:CategoryValue inside a new bpmn:Category
	 *
	 * @param {ModdleElement} definitions
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement} categoryValue.
	 */
	CategoryHelper.createCategoryValue = function(definitions, bpmnFactory) {
	  var categoryValue = bpmnFactory.create('bpmn:CategoryValue'),
	      category = bpmnFactory.create('bpmn:Category', {
	        categoryValue: [ categoryValue ]
	      });

	  // add to correct place
	  collectionAdd(definitions.get('rootElements'), category);
	  getBusinessObject$e(category).$parent = definitions;
	  getBusinessObject$e(categoryValue).$parent = category;

	  return categoryValue;

	};

	var createCategoryValue$1 = CategoryHelper_1.createCategoryValue,
	    is$e = require$$0$1.is,
	    getBusinessObject$f = require$$0$1.getBusinessObject;

	var NameProps = function(group, element, bpmnFactory, canvas, translate, options) {
	  if (!options) {
	    options = {};
	  }

	  function initializeCategory(semantic) {
	    var rootElement = canvas.getRootElement(),
	        definitions = getBusinessObject$f(rootElement).$parent,
	        categoryValue = createCategoryValue$1(definitions, bpmnFactory);

	    semantic.categoryValueRef = categoryValue;

	  }

	  function setGroupName(element, values) {
	    var bo = getBusinessObject$f(element),
	        categoryValueRef = bo.categoryValueRef;

	    if (!categoryValueRef) {
	      initializeCategory(bo);
	    }

	    // needs direct call to update categoryValue properly
	    return {
	      cmd: 'element.updateLabel',
	      context: {
	        element: element,
	        newLabel: values.categoryValue
	      }
	    };
	  }

	  function getGroupName(element) {
	    var bo = getBusinessObject$f(element),
	        value = (bo.categoryValueRef || {}).value;

	    return { categoryValue: value };
	  }

	  if (!is$e(element, 'bpmn:Collaboration')) {
	    var nameOptions = {
	      id: options.id,
	      label: options.label && translate(options.label)
	    };

	    if (is$e(element, 'bpmn:TextAnnotation')) {
	      nameOptions.modelProperty = 'text';
	      nameOptions.label = translate('Text');
	    } else if (is$e(element, 'bpmn:Group')) {
	      nameOptions.modelProperty = 'categoryValue';
	      nameOptions.label = translate('Category Value');
	      nameOptions.get = getGroupName;
	      nameOptions.set = setGroupName;
	    }

	    // name
	    group.entries = group.entries.concat(Name(element, nameOptions, translate));
	  }
	};

	var is$f = require$$0$1.is,
	    getBusinessObject$g = require$$0$1.getBusinessObject;





	var ExecutableProps = function(group, element, translate) {

	  var bo = getBusinessObject$g(element);

	  if (!bo) {
	    return;
	  }

	  if (is$f(element, 'bpmn:Process') || (is$f(element, 'bpmn:Participant') && bo.get('processRef'))) {

	    var executableEntry = EntryFactory_1.checkbox(translate, {
	      id: 'process-is-executable',
	      label: translate('Executable'),
	      modelProperty: 'isExecutable'
	    });

	    // in participants we have to change the default behavior of set and get
	    if (is$f(element, 'bpmn:Participant')) {
	      executableEntry.get = function(element) {
	        return ParticipantHelper_1.getProcessBusinessObject(element, 'isExecutable');
	      };

	      executableEntry.set = function(element, values) {
	        return ParticipantHelper_1.modifyProcessBusinessObject(element, 'isExecutable', values);
	      };
	    }

	    group.entries.push(executableEntry);
	  }

	};

	var is$g = require$$0$1.is;





	function getIdOptions(element) {
	  if (is$g(element, 'bpmn:Participant')) {
	    return { id: 'participant-id', label: 'Participant Id' };
	  }
	}

	function getNameOptions(element) {
	  if (is$g(element, 'bpmn:Participant')) {
	    return { id: 'participant-name', label: 'Participant Name' };
	  }
	}

	function createGeneralTabGroups(
	    element, canvas, bpmnFactory,
	    elementRegistry, translate) {

	  var generalGroup = {
	    id: 'general',
	    label: translate('General'),
	    entries: []
	  };
	  IdProps(generalGroup, element, translate, getIdOptions(element));
	  NameProps(generalGroup, element, bpmnFactory, canvas, translate, getNameOptions(element));
	  ProcessProps(generalGroup, element, translate);
	  ExecutableProps(generalGroup, element, translate);

	  var detailsGroup = {
	    id: 'details',
	    label: translate('Details'),
	    entries: []
	  };
	  LinkProps(detailsGroup, element, translate);
	  EventProps(detailsGroup, element, bpmnFactory, elementRegistry, translate);

	  var documentationGroup = {
	    id: 'documentation',
	    label: translate('Documentation'),
	    entries: []
	  };

	  DocumentationProps(documentationGroup, element, bpmnFactory, translate);

	  return [
	    generalGroup,
	    detailsGroup,
	    documentationGroup
	  ];

	}

	function BpmnPropertiesProvider(
	    eventBus, canvas, bpmnFactory, elementRegistry, translate) {

	  PropertiesActivator_1.call(this, eventBus);

	  this.getTabs = function(element) {

	    var generalTab = {
	      id: 'general',
	      label: translate('General'),
	      groups: createGeneralTabGroups(
	        element, canvas, bpmnFactory, elementRegistry, translate)
	    };

	    return [
	      generalTab
	    ];
	  };
	}

	BpmnPropertiesProvider.$inject = [
	  'eventBus',
	  'canvas',
	  'bpmnFactory',
	  'elementRegistry',
	  'translate'
	];

	inherits_browser(BpmnPropertiesProvider, PropertiesActivator_1);

	var BpmnPropertiesProvider_1 = BpmnPropertiesProvider;

	var bpmn = {
	  __init__: [ 'propertiesProvider' ],
	  propertiesProvider: [ 'type', BpmnPropertiesProvider_1 ]
	};

	/**
	 *
	 * @param {Object} options
	 */
	function Modeler$1(options = {}) {

	  this._injectOriginModule(options);

	  Modeler.call(this, options);
	}

	inherits_browser(Modeler$1, Modeler);

	Modeler$1.prototype._injectOriginModule = function(options) {
	  this._modules = [].concat(
	    this._modules,
	    (options && options.disableAdjustOrigin ? diagramOriginModule : alignToOriginModule)
	  );
	};

	Modeler$1.prototype._extensionModules = [
	  index$1,
	  ExecutableFixModule,
	  signavioCompatModule,
	  DisabledCollapsedSubprocessPopupProviderModule,
	  bpmnJsPropertiesPanel,
	  bpmn
	];

	Modeler$1.prototype._modules = [].concat(
	  Modeler.prototype._modules,
	  Modeler$1.prototype._extensionModules
	);

	var getBusinessObject$h = require$$0$1.getBusinessObject;

	var is$h = require$$0$1.is,
	    isAny$2 = require$$1$3.isAny;



	var TEMPLATE_ID_ATTR = 'camunda:modelerTemplate',
	    TEMPLATE_VERSION_ATTR = 'camunda:modelerTemplateVersion';

	/**
	 * The BPMN 2.0 extension attribute name under
	 * which the element template ID is stored.
	 *
	 * @type {String}
	 */
	var TEMPLATE_ID_ATTR_1 = TEMPLATE_ID_ATTR;

	/**
	 * The BPMN 2.0 extension attribute name under
	 * which the element template version is stored.
	 *
	 * @type {String}
	 */
	var TEMPLATE_VERSION_ATTR_1 = TEMPLATE_VERSION_ATTR;


	/**
	 * Get template id for a given diagram element.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {String}
	 */
	function getTemplateId(element) {

	  var bo = getBusinessObject$h(element);

	  if (bo) {
	    return bo.get(TEMPLATE_ID_ATTR);
	  }
	}

	var getTemplateId_1 = getTemplateId;

	/**
	 * Get template version for a given diagram element.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {String}
	 */
	function getTemplateVersion(element) {

	  var bo = getBusinessObject$h(element);

	  if (bo) {
	    return bo.get(TEMPLATE_VERSION_ATTR);
	  }
	}

	var getTemplateVersion_1 = getTemplateVersion;


	/**
	 * Find extension with given type in
	 * BPMN element, diagram element or ExtensionElement.
	 *
	 * @param {ModdleElement|djs.model.Base} element
	 * @param {String} type
	 *
	 * @return {ModdleElement} the extension
	 */
	function findExtension(element, type) {
	  var bo = getBusinessObject$h(element);

	  var extensionElements;

	  if (is$h(bo, 'bpmn:ExtensionElements')) {
	    extensionElements = bo;
	  } else {
	    extensionElements = bo.extensionElements;
	  }

	  if (!extensionElements) {
	    return null;
	  }

	  return find_1(extensionElements.get('values'), function(e) {
	    return is$h(e, type);
	  });
	}

	var findExtension_1 = findExtension;


	function findExtensions(element, types) {
	  var extensionElements = getExtensionElements(element);

	  if (!extensionElements) {
	    return [];
	  }

	  return extensionElements.get('values').filter(function(e) {
	    return isAny$2(e, types);
	  });
	}

	var findExtensions_1 = findExtensions;


	function findCamundaInOut(element, binding) {

	  var extensionElements = getExtensionElements(element);

	  if (!extensionElements) {
	    return;
	  }

	  var matcher;

	  if (binding.type === 'camunda:in') {
	    matcher = function(e) {
	      return is$h(e, 'camunda:In') && isInOut(e, binding);
	    };
	  } else
	  if (binding.type === 'camunda:out') {
	    matcher = function(e) {
	      return is$h(e, 'camunda:Out') && isInOut(e, binding);
	    };
	  } else
	  if (binding.type === 'camunda:in:businessKey') {
	    matcher = function(e) {
	      return is$h(e, 'camunda:In') && 'businessKey' in e;
	    };
	  }

	  return find_1(extensionElements.get('values'), matcher);
	}

	var findCamundaInOut_1 = findCamundaInOut;

	function findCamundaProperty(camundaProperties, binding) {
	  return find_1(camundaProperties.get('values'), function(p) {
	    return p.name === binding.name;
	  });
	}

	var findCamundaProperty_1 = findCamundaProperty;


	function findInputParameter(inputOutput, binding) {
	  var parameters = inputOutput.get('inputParameters');

	  return find_1(parameters, function(p) {
	    return p.name === binding.name;
	  });
	}

	var findInputParameter_1 = findInputParameter;


	function findOutputParameter(inputOutput, binding) {
	  var parameters = inputOutput.get('outputParameters');

	  return find_1(parameters, function(p) {
	    var value = p.value;

	    if (!binding.scriptFormat) {
	      return value === binding.source;
	    }

	    var definition = p.definition;

	    if (!definition || binding.scriptFormat !== definition.scriptFormat) {
	      return false;
	    }

	    return definition.value === binding.source;
	  });
	}

	var findOutputParameter_1 = findOutputParameter;



	// helpers /////////////////////////////////

	function getExtensionElements(element) {
	  var bo = getBusinessObject$h(element);

	  if (is$h(bo, 'bpmn:ExtensionElements')) {
	    return bo;
	  } else {
	    return bo.extensionElements;
	  }
	}


	function isInOut(element, binding) {

	  if (binding.type === 'camunda:in') {

	    // find based on target attribute
	    if (binding.target) {
	      return element.target === binding.target;
	    }
	  }

	  if (binding.type === 'camunda:out') {

	    // find based on source / sourceExpression
	    if (binding.source) {
	      return element.source === binding.source;
	    }

	    if (binding.sourceExpression) {
	      return element.sourceExpression === binding.sourceExpression;
	    }
	  }

	  // find based variables / local combination
	  if (binding.variables) {
	    return element.variables === 'all' && (
	      binding.variables !== 'local' || element.local
	    );
	  }
	}

	var Helper = {
		TEMPLATE_ID_ATTR: TEMPLATE_ID_ATTR_1,
		TEMPLATE_VERSION_ATTR: TEMPLATE_VERSION_ATTR_1,
		getTemplateId: getTemplateId_1,
		getTemplateVersion: getTemplateVersion_1,
		findExtension: findExtension_1,
		findExtensions: findExtensions_1,
		findCamundaInOut: findCamundaInOut_1,
		findCamundaProperty: findCamundaProperty_1,
		findInputParameter: findInputParameter_1,
		findOutputParameter: findOutputParameter_1
	};

	var assign$3 = require$$0.assign,
	    forEach$4 = require$$0.forEach,
	    keys$3 = require$$0.keys,
	    isObject$2 = require$$0.isObject;

	/**
	 * Converts legacy scopes descriptor to newer supported array structure.
	 *
	 * For example, it transforms
	 *
	 * scopes: {
	 *   'camunda:Connector':
	 *     { properties: []
	 *   }
	 * }
	 *
	 * to
	 *
	 * scopes: [
	 *   {
	 *     type: 'camunda:Connector',
	 *     properties: []
	 *   }
	 * ]
	 *
	 * @param {ScopesDescriptor} scopes
	 *
	 * @returns {Array}
	 */
	var handleLegacyScopes = function handleLegacyScopes(scopes) {
	  var scopesAsArray = [];

	  if (!isObject$2(scopes)) {
	    return scopes;
	  }

	  forEach$4(keys$3(scopes), function(scopeName) {
	    scopesAsArray.push(assign$3({
	      type: scopeName
	    }, scopes[scopeName]));
	  });

	  return scopesAsArray;
	};

	/**
	 * Create an input parameter representing the given
	 * binding and value.
	 *
	 * @param {PropertyBinding} binding
	 * @param {String} value
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement}
	 */
	function createInputParameter(binding, value, bpmnFactory) {
	  var scriptFormat = binding.scriptFormat,
	      parameterValue,
	      parameterDefinition;

	  if (scriptFormat) {
	    parameterDefinition = bpmnFactory.create('camunda:Script', {
	      scriptFormat: scriptFormat,
	      value: value
	    });
	  } else {
	    parameterValue = value;
	  }

	  return bpmnFactory.create('camunda:InputParameter', {
	    name: binding.name,
	    value: parameterValue,
	    definition: parameterDefinition
	  });
	}

	var createInputParameter_1 = createInputParameter;


	/**
	 * Create an output parameter representing the given
	 * binding and value.
	 *
	 * @param {PropertyBinding} binding
	 * @param {String} value
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement}
	 */
	function createOutputParameter(binding, value, bpmnFactory) {
	  var scriptFormat = binding.scriptFormat,
	      parameterValue,
	      parameterDefinition;

	  if (scriptFormat) {
	    parameterDefinition = bpmnFactory.create('camunda:Script', {
	      scriptFormat: scriptFormat,
	      value: binding.source
	    });
	  } else {
	    parameterValue = binding.source;
	  }

	  return bpmnFactory.create('camunda:OutputParameter', {
	    name: value,
	    value: parameterValue,
	    definition: parameterDefinition
	  });
	}

	var createOutputParameter_1 = createOutputParameter;


	/**
	 * Create camunda property from the given binding.
	 *
	 * @param {PropertyBinding} binding
	 * @param {String} value
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement}
	 */
	function createCamundaProperty(binding, value, bpmnFactory) {
	  return bpmnFactory.create('camunda:Property', {
	    name: binding.name,
	    value: value || ''
	  });
	}

	var createCamundaProperty_1 = createCamundaProperty;


	/**
	 * Create camunda:in element from given binding.
	 *
	 * @param {PropertyBinding} binding
	 * @param {String} value
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement}
	 */
	function createCamundaIn(binding, value, bpmnFactory) {

	  var properties = createCamundaInOutAttrs(binding, value);

	  return bpmnFactory.create('camunda:In', properties);
	}

	var createCamundaIn_1 = createCamundaIn;


	/**
	 * Create camunda:in with businessKey element from given binding.
	 *
	 * @param {PropertyBinding} binding
	 * @param {String} value
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement}
	 */
	function createCamundaInWithBusinessKey(binding, value, bpmnFactory) {
	  return bpmnFactory.create('camunda:In', {
	    businessKey: value
	  });
	}

	var createCamundaInWithBusinessKey_1 = createCamundaInWithBusinessKey;


	/**
	 * Create camunda:out element from given binding.
	 *
	 * @param {PropertyBinding} binding
	 * @param {String} value
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement}
	 */
	function createCamundaOut(binding, value, bpmnFactory) {
	  var properties = createCamundaInOutAttrs(binding, value);

	  return bpmnFactory.create('camunda:Out', properties);
	}

	var createCamundaOut_1 = createCamundaOut;


	/**
	 * Create camunda:executionListener element containing an inline script from given binding.
	 *
	 * @param {PropertyBinding} binding
	 * @param {String} value
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement}
	 */
	function createCamundaExecutionListenerScript(binding, value, bpmnFactory) {
	  var scriptFormat = binding.scriptFormat,
	      parameterValue,
	      parameterDefinition;

	  if (scriptFormat) {
	    parameterDefinition = bpmnFactory.create('camunda:Script', {
	      scriptFormat: scriptFormat,
	      value: value
	    });
	  } else {
	    parameterValue = value;
	  }

	  return bpmnFactory.create('camunda:ExecutionListener', {
	    event: binding.event,
	    value: parameterValue,
	    script: parameterDefinition
	  });
	}

	var createCamundaExecutionListenerScript_1 = createCamundaExecutionListenerScript;

	/**
	 * Create camunda:field element containing string or expression from given binding.
	 *
	 * @param {PropertyBinding} binding
	 * @param {String} value
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {ModdleElement}
	 */
	function createCamundaFieldInjection(binding, value, bpmnFactory) {
	  var DEFAULT_PROPS = {
	    'string': undefined,
	    'expression': undefined,
	    'name': undefined
	  };

	  var props = assign_1({}, DEFAULT_PROPS);

	  if (!binding.expression) {
	    props.string = value;
	  } else {
	    props.expression = value;
	  }
	  props.name = binding.name;

	  return bpmnFactory.create('camunda:Field', props);
	}
	var createCamundaFieldInjection_1 = createCamundaFieldInjection;


	// helpers ////////////////////////////

	/**
	 * Create properties for camunda:in and camunda:out types.
	 */
	function createCamundaInOutAttrs(binding, value) {

	  var properties = {};

	  // camunda:in source(Expression) target
	  if (binding.target) {

	    properties.target = binding.target;

	    if (binding.expression) {
	      properties.sourceExpression = value;
	    } else {
	      properties.source = value;
	    }
	  } else

	  // camunda:(in|out) variables local
	  if (binding.variables) {
	    properties.variables = 'all';

	    if (binding.variables === 'local') {
	      properties.local = true;
	    }
	  }

	  // camunda:out source(Expression) target
	  else {
	    properties.target = value;

	    [ 'source', 'sourceExpression' ].forEach(function(k) {
	      if (binding[k]) {
	        properties[k] = binding[k];
	      }
	    });
	  }

	  return properties;
	}

	var CreateHelper = {
		createInputParameter: createInputParameter_1,
		createOutputParameter: createOutputParameter_1,
		createCamundaProperty: createCamundaProperty_1,
		createCamundaIn: createCamundaIn_1,
		createCamundaInWithBusinessKey: createCamundaInWithBusinessKey_1,
		createCamundaOut: createCamundaOut_1,
		createCamundaExecutionListenerScript: createCamundaExecutionListenerScript_1,
		createCamundaFieldInjection: createCamundaFieldInjection_1
	};

	/** `Object#toString` result references. */
	var stringTag$2 = '[object String]';

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString$1(value) {
	  return typeof value == 'string' ||
	    (!isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag$2);
	}

	var isString_1 = isString$1;

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last$1(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? array[length - 1] : undefined;
	}

	var last_1 = last$1;

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	var _baseSlice = baseSlice;

	/**
	 * Gets the parent value at `path` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path to get the parent value of.
	 * @returns {*} Returns the parent value.
	 */
	function parent(object, path) {
	  return path.length < 2 ? object : _baseGet(object, _baseSlice(path, 0, -1));
	}

	var _parent = parent;

	/**
	 * The base implementation of `_.unset`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The property path to unset.
	 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	 */
	function baseUnset(object, path) {
	  path = _castPath(path, object);
	  object = _parent(object, path);
	  return object == null || delete object[_toKey(last_1(path))];
	}

	var _baseUnset = baseUnset;

	/** Used for built-in method references. */
	var arrayProto$1 = Array.prototype;

	/** Built-in value references. */
	var splice$1 = arrayProto$1.splice;

	/**
	 * The base implementation of `_.pullAt` without support for individual
	 * indexes or capturing the removed elements.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {number[]} indexes The indexes of elements to remove.
	 * @returns {Array} Returns `array`.
	 */
	function basePullAt(array, indexes) {
	  var length = array ? indexes.length : 0,
	      lastIndex = length - 1;

	  while (length--) {
	    var index = indexes[length];
	    if (length == lastIndex || index !== previous) {
	      var previous = index;
	      if (_isIndex(index)) {
	        splice$1.call(array, index, 1);
	      } else {
	        _baseUnset(array, index);
	      }
	    }
	  }
	  return array;
	}

	var _basePullAt = basePullAt;

	/**
	 * Removes all elements from `array` that `predicate` returns truthy for
	 * and returns an array of the removed elements. The predicate is invoked
	 * with three arguments: (value, index, array).
	 *
	 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	 * to pull elements from an array by value.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new array of removed elements.
	 * @example
	 *
	 * var array = [1, 2, 3, 4];
	 * var evens = _.remove(array, function(n) {
	 *   return n % 2 == 0;
	 * });
	 *
	 * console.log(array);
	 * // => [1, 3]
	 *
	 * console.log(evens);
	 * // => [2, 4]
	 */
	function remove$3(array, predicate) {
	  var result = [];
	  if (!(array && array.length)) {
	    return result;
	  }
	  var index = -1,
	      indexes = [],
	      length = array.length;

	  predicate = _baseIteratee(predicate);
	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result.push(value);
	      indexes.push(index);
	    }
	  }
	  _basePullAt(array, indexes);
	  return result;
	}

	var remove_1 = remove$3;

	var findExtension$1 = Helper.findExtension,
	    findExtensions$1 = Helper.findExtensions;



	var createCamundaExecutionListenerScript$1 = CreateHelper.createCamundaExecutionListenerScript,
	    createCamundaFieldInjection$1 = CreateHelper.createCamundaFieldInjection,
	    createCamundaIn$1 = CreateHelper.createCamundaIn,
	    createCamundaInWithBusinessKey$1 = CreateHelper.createCamundaInWithBusinessKey,
	    createCamundaOut$1 = CreateHelper.createCamundaOut,
	    createCamundaProperty$1 = CreateHelper.createCamundaProperty,
	    createInputParameter$1 = CreateHelper.createInputParameter,
	    createOutputParameter$1 = CreateHelper.createOutputParameter;



	var getBusinessObject$i = require$$0$1.getBusinessObject;

	var is$i = require$$0$1.is,
	    isAny$3 = require$$1$3.isAny;



	var CAMUNDA_SERVICE_TASK_LIKE = [
	  'camunda:class',
	  'camunda:delegateExpression',
	  'camunda:expression'
	];

	/**
	 * Applies an element template to an element. Sets `camunda:modelerTemplate` and
	 * `camunda:modelerTemplateVersion`.
	 */
	function ChangeElementTemplateHandler(bpmnFactory, commandStack, modeling) {
	  this._bpmnFactory = bpmnFactory;
	  this._commandStack = commandStack;
	  this._modeling = modeling;
	}

	ChangeElementTemplateHandler.$inject = [
	  'bpmnFactory',
	  'commandStack',
	  'modeling'
	];

	var ChangeElementTemplateHandler_1 = ChangeElementTemplateHandler;

	/**
	   * Change an element's template and update its properties as specified in `newTemplate`. Specify
	   * `oldTemplate` to update from one template to another. If `newTemplate` isn't specified the
	   * `camunda:modelerTemplate` and `camunda:modelerTemplateVersion` properties will be removed from
	   * the element.
	   *
	   * @param {Object} context
	   * @param {Object} context.element
	   * @param {Object} [context.oldTemplate]
	   * @param {Object} [context.newTemplate]
	   */
	ChangeElementTemplateHandler.prototype.preExecute = function(context) {
	  var element = context.element,
	      newTemplate = context.newTemplate,
	      oldTemplate = context.oldTemplate;

	  var self = this;

	  // Update camunda:modelerTemplate attribute
	  this._updateCamundaModelerTemplate(element, newTemplate);

	  if (newTemplate) {

	    // Update properties
	    this._updateProperties(element, oldTemplate, newTemplate);

	    // Update camunda:ExecutionListener properties
	    this._updateCamundaExecutionListenerProperties(element, newTemplate);

	    // Update camunda:Field properties
	    this._updateCamundaFieldProperties(element, oldTemplate, newTemplate);

	    // Update camunda:In and camunda:Out properties
	    this._updateCamundaInOutProperties(element, oldTemplate, newTemplate);

	    // Update camunda:InputParameter and camunda:OutputParameter properties
	    this._updateCamundaInputOutputParameterProperties(element, oldTemplate, newTemplate);

	    // Update camunda:Property properties
	    this._updateCamundaPropertyProperties(element, oldTemplate, newTemplate);

	    // Update properties for each scope
	    forEach_1(handleLegacyScopes(newTemplate.scopes), function(newScopeTemplate) {
	      self._updateScopeProperties(element, oldTemplate, newScopeTemplate);
	    });

	  }
	};

	ChangeElementTemplateHandler.prototype._getOrCreateExtensionElements = function(element) {
	  var bpmnFactory = this._bpmnFactory,
	      modeling = this._modeling;

	  var businessObject = getBusinessObject$i(element);

	  var extensionElements = businessObject.get('extensionElements');

	  if (!extensionElements) {
	    extensionElements = bpmnFactory.create('bpmn:ExtensionElements', {
	      values: []
	    });

	    modeling.updateProperties(element, {
	      extensionElements: extensionElements
	    });
	  }

	  return extensionElements;
	};

	/**
	 * Update `camunda:ExecutionListener` properties of specified business object. Execution listeners
	 * will always be overridden. Execution listeners can only exist in `bpmn:ExtensionElements`.
	 *
	 * @param {djs.model.Base} element
	 * @param {Object} newTemplate
	 */
	ChangeElementTemplateHandler.prototype._updateCamundaExecutionListenerProperties = function(element, newTemplate) {
	  var bpmnFactory = this._bpmnFactory,
	      commandStack = this._commandStack;

	  var newProperties = newTemplate.properties.filter(function(newProperty) {
	    var newBinding = newProperty.binding,
	        newBindingType = newBinding.type;

	    return newBindingType === 'camunda:executionListener';
	  });

	  // (1) Do not override old execution listeners if no new execution listeners specified
	  if (!newProperties.length) {
	    return;
	  }

	  var businessObject = this._getOrCreateExtensionElements(element);

	  // (2) Remove old execution listeners
	  var oldExecutionListeners = findExtensions$1(element, [ 'camunda:ExecutionListener' ]);

	  // (3) Add new execution listeners
	  var newExecutionListeners = newProperties.map(function(newProperty) {
	    var newBinding = newProperty.binding,
	        propertyValue = newProperty.value;

	    return createCamundaExecutionListenerScript$1(newBinding, propertyValue, bpmnFactory);
	  });

	  commandStack.execute('properties-panel.update-businessobject-list', {
	    element: element,
	    currentObject: businessObject,
	    propertyName: 'values',
	    objectsToAdd: newExecutionListeners,
	    objectsToRemove: oldExecutionListeners
	  });
	};

	/**
	 * Update `camunda:Field` properties of specified business object.
	 * If business object is `camunda:ExecutionListener` or `camunda:TaskListener` `fields` property
	 * will be updated. Otherwise `extensionElements.values` property will be updated.
	 *
	 * @param {djs.model.Base} element
	 * @param {Object} oldTemplate
	 * @param {Object} newTemplate
	 * @param {ModdleElement} businessObject
	 */
	ChangeElementTemplateHandler.prototype._updateCamundaFieldProperties = function(element, oldTemplate, newTemplate, businessObject) {
	  var bpmnFactory = this._bpmnFactory,
	      commandStack = this._commandStack;

	  var newProperties = newTemplate.properties.filter(function(newProperty) {
	    var newBinding = newProperty.binding,
	        newBindingType = newBinding.type;

	    return newBindingType === 'camunda:field';
	  });

	  // (1) Do not override old fields if no new fields specified
	  if (!newProperties.length) {
	    return;
	  }

	  if (!businessObject) {
	    businessObject = this._getOrCreateExtensionElements(element);
	  }

	  var propertyName = isAny$3(businessObject, [ 'camunda:ExecutionListener', 'camunda:TaskListener' ])
	    ? 'fields'
	    : 'values';

	  var oldFields = findExtensions$1(element, [ 'camunda:Field' ]);

	  newProperties.forEach(function(newProperty) {
	    var oldProperty = findOldProperty(oldTemplate, newProperty),
	        oldField = oldProperty && findOldBusinessObject(businessObject, oldProperty),
	        newBinding = newProperty.binding;

	    // (2) Update old fields
	    if (oldProperty && oldField) {

	      if (!propertyChanged(oldField, oldProperty)) {
	        commandStack.execute('properties-panel.update-businessobject', {
	          element: element,
	          businessObject: oldField,
	          properties: {
	            string: newProperty.value
	          }
	        });
	      }

	      remove_1(oldFields, oldField);
	    }

	    // (3) Add new fields
	    else {
	      commandStack.execute('properties-panel.update-businessobject-list', {
	        element: element,
	        currentObject: businessObject,
	        propertyName: propertyName,
	        objectsToAdd: [ createCamundaFieldInjection$1(newBinding, newProperty.value, bpmnFactory) ],
	        objectsToRemove: []
	      });
	    }
	  });

	  // (4) Remove old fields
	  if (oldFields.length) {
	    commandStack.execute('properties-panel.update-businessobject-list', {
	      element: element,
	      currentObject: businessObject,
	      propertyName: propertyName,
	      objectsToAdd: [],
	      objectsToRemove: oldFields
	    });
	  }
	};

	/**
	 * Update `camunda:In` and `camunda:Out` properties of specified business object. Only
	 * `bpmn:CallActivity` and events with `bpmn:SignalEventDefinition` can have ins. Only
	 * `camunda:CallActivity` can have outs.
	 *
	 * @param {djs.model.Base} element
	 * @param {Object} oldTemplate
	 * @param {Object} newTemplate
	 */
	ChangeElementTemplateHandler.prototype._updateCamundaInOutProperties = function(element, oldTemplate, newTemplate) {
	  var bpmnFactory = this._bpmnFactory,
	      commandStack = this._commandStack;

	  var newProperties = newTemplate.properties.filter(function(newProperty) {
	    var newBinding = newProperty.binding,
	        newBindingType = newBinding.type;

	    return newBindingType === 'camunda:in'
	      || newBindingType === 'camunda:in:businessKey'
	      || newBindingType === 'camunda:out';
	  });

	  // (1) Do not override old fields if no new fields specified
	  if (!newProperties.length) {
	    return;
	  }

	  // Get extension elements of either signal event definition or call activity
	  var businessObject = this._getOrCreateExtensionElements(
	    EventDefinitionHelper_1.getSignalEventDefinition(element) || element);

	  var oldInsAndOuts = findExtensions$1(businessObject, [ 'camunda:In', 'camunda:Out' ]);

	  newProperties.forEach(function(newProperty) {
	    var oldProperty = findOldProperty(oldTemplate, newProperty),
	        oldBinding = oldProperty && oldProperty.binding,
	        oldInOurOut = oldProperty && findOldBusinessObject(businessObject, oldProperty),
	        newPropertyValue = newProperty.value,
	        newBinding = newProperty.binding,
	        newBindingType = newBinding.type,
	        newInOrOut,
	        properties = {};

	    // (2) Update old ins and outs
	    if (oldProperty && oldInOurOut) {

	      if (!propertyChanged(oldInOurOut, oldProperty)) {
	        if (newBindingType === 'camunda:in') {
	          if (newBinding.expression) {
	            properties[ 'camunda:sourceExpression' ] = newPropertyValue;
	          } else {
	            properties[ 'camunda:source' ] = newPropertyValue;
	          }
	        } else if (newBindingType === 'camunda:in:businessKey') {
	          properties[ 'camunda:businessKey' ] = newPropertyValue;
	        } else if (newBindingType === 'camunda:out') {
	          properties[ 'camunda:target' ] = newPropertyValue;
	        }
	      }

	      // Update `camunda:local` property if it changed
	      if ((oldBinding.local && !newBinding.local) || !oldBinding.local && newBinding.local) {
	        properties.local = newBinding.local;
	      }

	      if (keys_1(properties)) {
	        commandStack.execute('properties-panel.update-businessobject', {
	          element: element,
	          businessObject: oldInOurOut,
	          properties: properties
	        });
	      }

	      remove_1(oldInsAndOuts, oldInOurOut);
	    }

	    // (3) Add new ins and outs
	    else {
	      if (newBindingType === 'camunda:in') {
	        newInOrOut = createCamundaIn$1(newBinding, newPropertyValue, bpmnFactory);
	      } else if (newBindingType === 'camunda:out') {
	        newInOrOut = createCamundaOut$1(newBinding, newPropertyValue, bpmnFactory);
	      } else if (newBindingType === 'camunda:in:businessKey') {
	        newInOrOut = createCamundaInWithBusinessKey$1(newBinding, newPropertyValue, bpmnFactory);
	      }

	      commandStack.execute('properties-panel.update-businessobject-list', {
	        element: element,
	        currentObject: businessObject,
	        propertyName: 'values',
	        objectsToAdd: [ newInOrOut ],
	        objectsToRemove: []
	      });
	    }
	  });

	  // (4) Remove old ins and outs
	  if (oldInsAndOuts.length) {
	    commandStack.execute('properties-panel.update-businessobject-list', {
	      element: element,
	      currentObject: businessObject,
	      propertyName: 'values',
	      objectsToAdd: [],
	      objectsToRemove: oldInsAndOuts
	    });
	  }
	};

	/**
	 * Update `camunda:InputParameter` and `camunda:OutputParameter` properties of specified business
	 * object. Both can only exist in `camunda:InputOutput` which can exist in `bpmn:ExtensionElements`
	 * or `camunda:Connector`.
	 *
	 * @param {djs.model.Base} element
	 * @param {Object} oldTemplate
	 * @param {Object} newTemplate
	 */
	ChangeElementTemplateHandler.prototype._updateCamundaInputOutputParameterProperties = function(element, oldTemplate, newTemplate, businessObject) {
	  var bpmnFactory = this._bpmnFactory,
	      commandStack = this._commandStack;

	  var newProperties = newTemplate.properties.filter(function(newProperty) {
	    var newBinding = newProperty.binding,
	        newBindingType = newBinding.type;

	    return newBindingType === 'camunda:inputParameter' || newBindingType === 'camunda:outputParameter';
	  });

	  // (1) Do not override old inputs and outputs if no new inputs and outputs specified
	  if (!newProperties.length) {
	    return;
	  }

	  if (!businessObject) {
	    businessObject = this._getOrCreateExtensionElements(element);
	  }

	  var inputOutput;

	  if (is$i(businessObject, 'camunda:Connector')) {
	    inputOutput = businessObject.get('camunda:inputOutput');

	    if (!inputOutput) {
	      inputOutput = bpmnFactory.create('camunda:InputOutput');

	      commandStack.execute('properties-panel.update-businessobject', {
	        element: element,
	        businessObject: businessObject,
	        properties: {
	          inputOutput: inputOutput
	        }
	      });
	    }
	  } else {
	    inputOutput = findExtension$1(businessObject, 'camunda:InputOutput');

	    if (!inputOutput) {
	      inputOutput = bpmnFactory.create('camunda:InputOutput');

	      commandStack.execute('properties-panel.update-businessobject-list', {
	        element: element,
	        currentObject: businessObject,
	        propertyName: 'values',
	        objectsToAdd: [ inputOutput ],
	        objectsToRemove: []
	      });
	    }
	  }

	  var oldInputs = inputOutput.get('camunda:inputParameters')
	    ? inputOutput.get('camunda:inputParameters').slice()
	    : [];

	  var oldOutputs = inputOutput.get('camunda:outputParameters')
	    ? inputOutput.get('camunda:outputParameters').slice()
	    : [];

	  var propertyName;

	  newProperties.forEach(function(newProperty) {
	    var oldProperty = findOldProperty(oldTemplate, newProperty),
	        oldInputOrOutput = oldProperty && findOldBusinessObject(businessObject, oldProperty),
	        newPropertyValue = newProperty.value,
	        newBinding = newProperty.binding,
	        newBindingType = newBinding.type;

	    var newInputOrOutput,
	        properties;

	    // (2) Update old inputs and outputs
	    if (oldProperty && oldInputOrOutput) {

	      if (!propertyChanged(oldInputOrOutput, oldProperty)) {
	        if (is$i(oldInputOrOutput, 'camunda:InputParameter')) {
	          properties = {
	            value: newPropertyValue
	          };
	        } else {
	          properties = {
	            name: newPropertyValue
	          };
	        }

	        commandStack.execute('properties-panel.update-businessobject', {
	          element: element,
	          businessObject: oldInputOrOutput,
	          properties: properties
	        });
	      }

	      if (is$i(oldInputOrOutput, 'camunda:InputParameter')) {
	        remove_1(oldInputs, oldInputOrOutput);
	      } else {
	        remove_1(oldOutputs, oldInputOrOutput);
	      }
	    }

	    // (3) Add new inputs and outputs
	    else {
	      if (newBindingType === 'camunda:inputParameter') {
	        propertyName = 'inputParameters';

	        newInputOrOutput = createInputParameter$1(newBinding, newPropertyValue, bpmnFactory);
	      } else {
	        propertyName = 'outputParameters';

	        newInputOrOutput = createOutputParameter$1(newBinding, newPropertyValue, bpmnFactory);
	      }

	      commandStack.execute('properties-panel.update-businessobject-list', {
	        element: element,
	        currentObject: inputOutput,
	        propertyName: propertyName,
	        objectsToAdd: [ newInputOrOutput ],
	        objectsToRemove: []
	      });
	    }
	  });

	  // (4) Remove old inputs and outputs
	  if (oldInputs.length) {
	    commandStack.execute('properties-panel.update-businessobject-list', {
	      element: element,
	      currentObject: inputOutput,
	      propertyName: 'inputParameters',
	      objectsToAdd: [],
	      objectsToRemove: oldInputs
	    });
	  }

	  if (oldOutputs.length) {
	    commandStack.execute('properties-panel.update-businessobject-list', {
	      element: element,
	      currentObject: inputOutput,
	      propertyName: 'outputParameters',
	      objectsToAdd: [],
	      objectsToRemove: oldOutputs
	    });
	  }
	};

	ChangeElementTemplateHandler.prototype._updateCamundaModelerTemplate = function(element, newTemplate) {
	  var modeling = this._modeling;

	  modeling.updateProperties(element, {
	    'camunda:modelerTemplate': newTemplate && newTemplate.id,
	    'camunda:modelerTemplateVersion': newTemplate && newTemplate.version
	  });
	};

	/**
	 * Update `camunda:Property` properties of specified business object. `camunda:Property` can only
	 * exist in `camunda:Properties`.
	 *
	 * @param {djs.model.Base} element
	 * @param {Object} oldTemplate
	 * @param {Object} newTemplate
	 * @param {ModdleElement} businessObject
	 */
	ChangeElementTemplateHandler.prototype._updateCamundaPropertyProperties = function(element, oldTemplate, newTemplate, businessObject) {
	  var bpmnFactory = this._bpmnFactory,
	      commandStack = this._commandStack;

	  var newProperties = newTemplate.properties.filter(function(newProperty) {
	    var newBinding = newProperty.binding,
	        newBindingType = newBinding.type;

	    return newBindingType === 'camunda:property';
	  });

	  // (1) Do not override old properties if no new properties specified
	  if (!newProperties.length) {
	    return;
	  }

	  if (businessObject) {
	    businessObject = this._getOrCreateExtensionElements(businessObject);
	  } else {
	    businessObject = this._getOrCreateExtensionElements(element);
	  }

	  var camundaProperties = findExtension$1(businessObject, 'camunda:Properties');

	  if (!camundaProperties) {
	    camundaProperties = bpmnFactory.create('camunda:Properties');

	    commandStack.execute('properties-panel.update-businessobject-list', {
	      element: element,
	      currentObject: businessObject,
	      propertyName: 'values',
	      objectsToAdd: [ camundaProperties ],
	      objectsToRemove: []
	    });
	  }

	  var oldCamundaProperties = camundaProperties.get('camunda:values')
	    ? camundaProperties.get('camunda:values').slice()
	    : [];

	  newProperties.forEach(function(newProperty) {
	    var oldProperty = findOldProperty(oldTemplate, newProperty),
	        oldCamundaProperty = oldProperty && findOldBusinessObject(businessObject, oldProperty),
	        newPropertyValue = newProperty.value,
	        newBinding = newProperty.binding;

	    // (2) Update old properties
	    if (oldProperty && oldCamundaProperty) {

	      if (!propertyChanged(oldCamundaProperty, oldProperty)) {
	        commandStack.execute('properties-panel.update-businessobject', {
	          element: element,
	          businessObject: oldCamundaProperty,
	          properties: {
	            value: newPropertyValue
	          }
	        });
	      }

	      remove_1(oldCamundaProperties, oldCamundaProperty);
	    }

	    // (3) Add new properties
	    else {
	      commandStack.execute('properties-panel.update-businessobject-list', {
	        element: element,
	        currentObject: camundaProperties,
	        propertyName: 'values',
	        objectsToAdd: [ createCamundaProperty$1(newBinding, newPropertyValue, bpmnFactory) ],
	        objectsToRemove: []
	      });
	    }
	  });

	  // (4) Remove old properties
	  if (oldCamundaProperties.length) {
	    commandStack.execute('properties-panel.update-businessobject-list', {
	      element: element,
	      currentObject: camundaProperties,
	      propertyName: 'values',
	      objectsToAdd: [],
	      objectsToRemove: oldCamundaProperties
	    });
	  }
	};

	/**
	 * Update `bpmn:conditionExpression` property of specified element. Since condition expression is
	 * is not primitive it needs special handling.
	 *
	 * @param {djs.model.Base} element
	 * @param {Object} oldProperty
	 * @param {Object} newProperty
	 */
	ChangeElementTemplateHandler.prototype._updateConditionExpression = function(element, oldProperty, newProperty) {
	  var bpmnFactory = this._bpmnFactory,
	      commandStack = this._commandStack,
	      modeling = this._modeling;

	  var newBinding = newProperty.binding,
	      newPropertyValue = newProperty.value;

	  if (!oldProperty) {
	    modeling.updateProperties(element, {
	      conditionExpression: bpmnFactory.create('bpmn:FormalExpression', {
	        body: newPropertyValue,
	        language: newBinding.scriptFormat
	      })
	    });

	    return;
	  }

	  var oldBinding = oldProperty.binding,
	      oldPropertyValue = oldProperty.value;

	  var businessObject = getBusinessObject$i(element),
	      conditionExpression = businessObject.get('bpmn:conditionExpression');

	  var properties = {};

	  if (conditionExpression.get('body') === oldPropertyValue) {
	    properties.body = newPropertyValue;
	  }

	  if (conditionExpression.get('language') === oldBinding.scriptFormat) {
	    properties.language = newBinding.scriptFormat;
	  }

	  if (!keys_1(properties).length) {
	    return;
	  }

	  commandStack.execute('properties-panel.update-businessobject', {
	    element: element,
	    businessObject: conditionExpression,
	    properties: properties
	  });
	};

	ChangeElementTemplateHandler.prototype._updateProperties = function(element, oldTemplate, newTemplate, businessObject) {
	  var self = this;

	  var commandStack = this._commandStack;

	  var newProperties = newTemplate.properties.filter(function(newProperty) {
	    var newBinding = newProperty.binding,
	        newBindingType = newBinding.type;

	    return newBindingType === 'property';
	  });

	  if (!newProperties.length) {
	    return;
	  }

	  if (!businessObject) {
	    businessObject = getBusinessObject$i(element);
	  }

	  newProperties.forEach(function(newProperty) {
	    var oldProperty = findOldProperty(oldTemplate, newProperty),
	        newBinding = newProperty.binding,
	        newBindingName = newBinding.name,
	        newPropertyValue = newProperty.value,
	        properties;

	    if (newBindingName === 'conditionExpression') {
	      self._updateConditionExpression(element, oldProperty, newProperty);
	    } else {
	      if (oldProperty && propertyChanged(element, oldProperty)) {
	        return;
	      }

	      properties = {};

	      properties[ newBindingName ] = newPropertyValue;

	      // Only one of `camunda:class`, `camunda:delegateExpression` and `camunda:expression` can be
	      // set
	      // TODO(philippfromme): ensuring only one of these properties is set at a time should be
	      // implemented in a behavior and not in this handler and properties panel UI
	      if (CAMUNDA_SERVICE_TASK_LIKE.indexOf(newBindingName) !== -1) {
	        CAMUNDA_SERVICE_TASK_LIKE.forEach(function(camundaServiceTaskLikeProperty) {
	          if (camundaServiceTaskLikeProperty !== newBindingName) {
	            properties[ camundaServiceTaskLikeProperty ] = undefined;
	          }
	        });
	      }

	      commandStack.execute('properties-panel.update-businessobject', {
	        element: element,
	        businessObject: businessObject,
	        properties: properties
	      });
	    }
	  });
	};

	/**
	 * Update properties for a specified scope.
	 *
	 * @param {djs.model.Base} element
	 * @param {string} scopeName
	 * @param {Object} scopeTemplate
	 */
	ChangeElementTemplateHandler.prototype._updateScopeProperties = function(element, oldTemplate, newScopeTemplate) {
	  var bpmnFactory = this._bpmnFactory,
	      commandStack = this._commandStack;

	  var scopeName = newScopeTemplate.type;

	  var scopeElement = findOldScopeElement(element, scopeName);

	  if (!scopeElement) {
	    scopeElement = bpmnFactory.create(scopeName);
	  }

	  var oldScopeTemplate = findOldScopeTemplate(scopeName, oldTemplate);

	  // Update properties
	  this._updateProperties(element, oldScopeTemplate, newScopeTemplate, scopeElement);

	  // Update camunda:ExecutionListener properties
	  this._updateCamundaExecutionListenerProperties(element, newScopeTemplate);

	  // Update camunda:In and camunda:Out properties
	  this._updateCamundaInOutProperties(element, oldScopeTemplate, newScopeTemplate);

	  // Update camunda:InputParameter and camunda:OutputParameter properties
	  this._updateCamundaInputOutputParameterProperties(element, oldScopeTemplate, newScopeTemplate, scopeElement);

	  // Update camunda:Field properties
	  this._updateCamundaFieldProperties(element, oldScopeTemplate, newScopeTemplate, scopeElement);

	  // Update camunda:Property properties
	  this._updateCamundaPropertyProperties(element, oldScopeTemplate, newScopeTemplate, scopeElement);

	  var extensionElements = this._getOrCreateExtensionElements(element);

	  commandStack.execute('properties-panel.update-businessobject-list', {
	    element: element,
	    currentObject: extensionElements,
	    propertyName: 'values',
	    objectsToAdd: [ scopeElement ],
	    objectsToRemove: []
	  });
	};

	// helpers //////////

	/**
	 * Find old business object matching specified old property.
	 *
	 * @param {djs.model.Base|ModdleElement} element
	 * @param {Object} oldProperty
	 *
	 * @returns {ModdleElement}
	 */
	function findOldBusinessObject(element, oldProperty) {
	  var businessObject = getBusinessObject$i(element),
	      propertyName;

	  var oldBinding = oldProperty.binding,
	      oldBindingType = oldBinding.type;

	  if (oldBindingType === 'camunda:field') {

	    if (isAny$3(businessObject, [ 'camunda:ExecutionListener', 'camunda:TaskListener' ])) {
	      propertyName = 'camunda:fields';
	    } else {
	      propertyName = 'bpmn:values';
	    }

	    if (!businessObject || !businessObject.get(propertyName) || !businessObject.get(propertyName).length) {
	      return;
	    }

	    return find_1(businessObject.get(propertyName), function(oldBusinessObject) {
	      return oldBusinessObject.get('camunda:name') === oldBinding.name;
	    });
	  }

	  if (oldBindingType === 'camunda:in') {
	    return find_1(businessObject.get('values'), function(oldBusinessObject) {
	      return oldBusinessObject.get('target') === oldBinding.target;
	    });
	  }

	  if (oldBindingType === 'camunda:in:businessKey') {
	    return find_1(businessObject.get('values'), function(oldBusinessObject) {
	      return isString_1(oldBusinessObject.get('businessKey'));
	    });
	  }

	  if (oldBindingType === 'camunda:out') {
	    return find_1(businessObject.get('values'), function(oldBusinessObject) {
	      return oldBusinessObject.get('source') === oldBinding.source ||
	        oldBusinessObject.get('sourceExpression') || oldBinding.sourceExpression;
	    });
	  }

	  if (oldBindingType === 'camunda:inputParameter' || oldBindingType === 'camunda:outputParameter') {

	    if (is$i(businessObject, 'camunda:Connector')) {
	      businessObject = businessObject.get('camunda:inputOutput');

	      if (!businessObject) {
	        return;
	      }
	    } else {
	      businessObject = findExtension$1(businessObject, 'camunda:InputOutput');

	      if (!businessObject) {
	        return;
	      }
	    }

	    if (oldBindingType === 'camunda:inputParameter') {
	      return find_1(businessObject.get('camunda:inputParameters'), function(oldBusinessObject) {
	        return oldBusinessObject.get('camunda:name') === oldBinding.name;
	      });
	    } else {
	      return find_1(businessObject.get('camunda:outputParameters'), function(oldBusinessObject) {
	        var definition;

	        if (oldBinding.scriptFormat) {
	          definition = oldBusinessObject.get('camunda:definition');

	          return definition && definition.get('camunda:value') === oldBinding.source;
	        } else {
	          return oldBusinessObject.get('camunda:value') === oldBinding.source;
	        }
	      });
	    }

	  }

	  if (oldBindingType === 'camunda:property') {
	    if (!businessObject || !businessObject.get('values') || !businessObject.get('values').length) {
	      return;
	    }

	    businessObject = findExtension$1(businessObject, 'camunda:Properties');

	    if (!businessObject) {
	      return;
	    }

	    return find_1(businessObject.get('values'), function(oldBusinessObject) {
	      return oldBusinessObject.get('camunda:name') === oldBinding.name;
	    });
	  }
	}

	/**
	 * Find old property matching specified new property.
	 *
	 * @param {Object} oldTemplate
	 * @param {Object} newProperty
	 *
	 * @returns {Object}
	 */
	function findOldProperty(oldTemplate, newProperty) {
	  if (!oldTemplate) {
	    return;
	  }

	  var oldProperties = oldTemplate.properties,
	      newBinding = newProperty.binding,
	      newBindingName = newBinding.name,
	      newBindingType = newBinding.type;

	  if (newBindingType === 'property') {
	    return find_1(oldProperties, function(oldProperty) {
	      var oldBinding = oldProperty.binding,
	          oldBindingName = oldBinding.name,
	          oldBindingType = oldBinding.type;

	      return oldBindingType === 'property' && oldBindingName === newBindingName;
	    });
	  }

	  if (newBindingType === 'camunda:field') {
	    return find_1(oldProperties, function(oldProperty) {
	      var oldBinding = oldProperty.binding,
	          oldBindingName = oldBinding.name,
	          oldBindingType = oldBinding.type;

	      return oldBindingType === 'camunda:field' && oldBindingName === newBindingName;
	    });
	  }

	  if (newBindingType === 'camunda:in') {
	    return find_1(oldProperties, function(oldProperty) {
	      var oldBinding = oldProperty.binding,
	          oldBindingType = oldBinding.type;

	      if (oldBindingType !== 'camunda:in') {
	        return;
	      }

	      // Always override if change from source to source expression or vice versa
	      if ((oldBinding.expression && !newBinding.expression) ||
	        !oldBinding.expression && newBinding.expression) {
	        return;
	      }

	      return oldBinding.target === newBinding.target;
	    });
	  }

	  if (newBindingType === 'camunda:in:businessKey') {
	    return find_1(oldProperties, function(oldProperty) {
	      var oldBinding = oldProperty.binding,
	          oldBindingType = oldBinding.type;

	      return oldBindingType === 'camunda:in:businessKey';
	    });
	  }

	  if (newBindingType === 'camunda:out') {
	    return find_1(oldProperties, function(oldProperty) {
	      var oldBinding = oldProperty.binding,
	          oldBindingType = oldBinding.type;

	      return oldBindingType === 'camunda:out' && (
	        oldBinding.source === newBinding.source ||
	        oldBinding.sourceExpression === newBinding.sourceExpression
	      );
	    });
	  }

	  if (newBindingType === 'camunda:inputParameter') {
	    return find_1(oldProperties, function(oldProperty) {
	      var oldBinding = oldProperty.binding,
	          oldBindingName = oldBinding.name,
	          oldBindingType = oldBinding.type;

	      if (oldBindingType !== 'camunda:inputParameter') {
	        return;
	      }

	      return oldBindingName === newBindingName
	        && oldBinding.scriptFormat === newBinding.scriptFormat;
	    });
	  }

	  if (newBindingType === 'camunda:outputParameter') {
	    return find_1(oldProperties, function(oldProperty) {
	      var oldBinding = oldProperty.binding,
	          oldBindingType = oldBinding.type;

	      if (oldBindingType !== 'camunda:outputParameter') {
	        return;
	      }

	      return oldBinding.source === newBinding.source
	        && oldBinding.scriptFormat === newBinding.scriptFormat;
	    });
	  }

	  if (newBindingType === 'camunda:property') {
	    return find_1(oldProperties, function(oldProperty) {
	      var oldBinding = oldProperty.binding,
	          oldBindingName = oldBinding.name,
	          oldBindingType = oldBinding.type;

	      return oldBindingType === 'camunda:property' && oldBindingName === newBindingName;
	    });
	  }
	}

	function findOldScopeElement(element, scopeName) {
	  if (scopeName === 'camunda:Connector') {
	    return findExtension$1(element, 'camunda:Connector');
	  }
	}

	function findOldScopeTemplate(scopeName, oldTemplate) {
	  var scopes = oldTemplate && handleLegacyScopes(oldTemplate.scopes);

	  return scopes && find_1(scopes, function(scope) {
	    return scope.type === scopeName;
	  });
	}

	/**
	 * Check whether property was changed after being set by template.
	 *
	 * @param {djs.model.Base|ModdleElement} element
	 * @param {Object} oldProperty
	 *
	 * @returns {boolean}
	 */
	function propertyChanged(element, oldProperty) {
	  var businessObject = getBusinessObject$i(element);

	  var oldBinding = oldProperty.binding,
	      oldBindingName = oldBinding.name,
	      oldBindingType = oldBinding.type,
	      oldPropertyValue = oldProperty.value,
	      conditionExpression,
	      definition;

	  if (oldBindingType === 'property') {
	    if (oldBindingName === 'conditionExpression') {
	      conditionExpression = businessObject.get('bpmn:conditionExpression');

	      return conditionExpression.get('bpmn:body') !== oldPropertyValue;
	    }

	    return businessObject.get(oldBindingName) !== oldPropertyValue;
	  }

	  if (oldBindingType === 'camunda:field') {
	    return businessObject.get('camunda:string') !== oldPropertyValue;
	  }

	  if (oldBindingType === 'camunda:in') {
	    if (oldBinding.expression) {
	      return businessObject.get('sourceExpression') !== oldPropertyValue;
	    } else {
	      return businessObject.get('camunda:source') !== oldPropertyValue;
	    }
	  }

	  if (oldBindingType === 'camunda:in:businessKey') {
	    return businessObject.get('camunda:businessKey') !== oldPropertyValue;
	  }

	  if (oldBindingType === 'camunda:out') {
	    return businessObject.get('camunda:target') !== oldPropertyValue;
	  }

	  if (oldBindingType === 'camunda:inputParameter') {
	    if (oldBinding.scriptFormat) {
	      definition = businessObject.get('camunda:definition');

	      return definition && definition.get('camunda:value') !== oldPropertyValue;
	    } else {
	      return businessObject.get('camunda:value') !== oldPropertyValue;
	    }
	  }

	  if (oldBindingType === 'camunda:outputParameter') {
	    return businessObject.get('camunda:name') !== oldPropertyValue;
	  }

	  if (oldBindingType === 'camunda:property') {
	    return businessObject.get('camunda:value') !== oldPropertyValue;
	  }
	}

	function registerHandlers(commandStack, elementTemplates, eventBus) {
	  commandStack.registerHandler(
	    'propertiesPanel.camunda.changeTemplate',
	    ChangeElementTemplateHandler_1
	  );

	  // apply default element templates on shape creation
	  eventBus.on([ 'commandStack.shape.create.postExecuted' ], function(context) {
	    applyDefaultTemplate(context.context.shape, elementTemplates, commandStack);
	  });

	  // apply default element templates on connection creation
	  eventBus.on([ 'commandStack.connection.create.postExecuted' ], function(context) {
	    applyDefaultTemplate(context.context.connection, elementTemplates, commandStack);
	  });
	}

	registerHandlers.$inject = [ 'commandStack', 'elementTemplates', 'eventBus' ];


	var cmd$1 = {
	  __init__: [ registerHandlers ]
	};


	function applyDefaultTemplate(element, elementTemplates, commandStack) {

	  if (!elementTemplates.get(element) && elementTemplates.getDefault(element)) {

	    var command = 'propertiesPanel.camunda.changeTemplate';
	    var commandContext = {
	      element: element,
	      newTemplate: elementTemplates.getDefault(element)
	    };

	    commandStack.execute(command, commandContext);
	  }
	}

	/** `Object#toString` result references. */
	var boolTag$2 = '[object Boolean]';

	/**
	 * Checks if `value` is classified as a boolean primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	 * @example
	 *
	 * _.isBoolean(false);
	 * // => true
	 *
	 * _.isBoolean(null);
	 * // => false
	 */
	function isBoolean(value) {
	  return value === true || value === false ||
	    (isObjectLike_1(value) && _baseGetTag(value) == boolTag$2);
	}

	var isBoolean_1 = isBoolean;

	var getTemplateId$1 = Helper.getTemplateId;



	var find$3 = require$$0.find,
	    isNumber$1 = require$$0.isNumber;





	var HIGHER_PRIORITY$6 = 1100;

	/**
	 * Decides what entries are visible and editable. When an element template is applied only entries
	 * in the element template tab are visible. Override this behavior through a properties activator
	 * with higher priority or by specifying `entriesVisible`.
	 *
	 * @param {EventBus} eventBus
	 * @param {ElementTemplates} elementTemplates
	 */
	function CustomElementsPropertiesActivator(eventBus, elementTemplates) {
	  PropertiesActivator_1.call(this, eventBus, HIGHER_PRIORITY$6);

	  this.isEntryVisible = function(element, entry, group, tab) {
	    var template = elementTemplates.get(element),
	        templateId = getTemplateId$1(element);

	    if (templateId && !isEntryVisible(entry, tab, template)) {
	      return false;
	    }
	  };

	  this.isPropertyEditable = function(propertyName, element, entry, group, tab) {
	    var template = elementTemplates.get(element);

	    if (template && !isEntryEditable(entry, template)) {
	      return false;
	    }
	  };
	}

	CustomElementsPropertiesActivator.$inject = [ 'eventBus', 'elementTemplates' ];

	inherits_browser(CustomElementsPropertiesActivator, PropertiesActivator_1);

	var CustomElementsPropertiesActivator_1 = CustomElementsPropertiesActivator;



	// helpers //////////


	var CUSTOM_PROPERTIES_PATTERN = /^custom-/;

	var DEFAULT_ENTRIES_VISIBLE = {
	  _all: false
	};

	function isCustomEntry(entry) {
	  return CUSTOM_PROPERTIES_PATTERN.test(entry.id);
	}

	function isEntryVisible(entry, tab, template) {
	  var entryId = entry.id;

	  if (tab.id === 'element-template') {
	    return true;
	  }

	  var entriesVisible = template && template.entriesVisible || DEFAULT_ENTRIES_VISIBLE;

	  if (isBoolean_1(entriesVisible)) {
	    return entriesVisible;
	  }

	  var defaultVisible = entriesVisible._all || false,
	      entryVisible = entriesVisible[ entryId ];

	  if (defaultVisible) {
	    return entryVisible !== false;
	  } else {
	    return entryVisible === true;
	  }
	}

	function isEntryEditable(entry, template) {

	  var property;

	  if (isCustomEntry(entry)) {
	    property = getProperty(template, entry);

	    return property && property.editable !== false;
	  }

	  return true;
	}

	function getProperty(template, entry) {

	  var idxAsNumber,
	      scope,
	      scopeName;

	  var throwError = function() {
	    throw new Error('cannot extract property index for entry <' + entry.id + '>');
	  };

	  // (0) retrieve raw property idx from entry
	  var idxOrScope = entry.id.replace('custom-' + template.id + '-', '');

	  // (1) handle custom props entries
	  // e.g. custom-com.example.template-{idx}
	  if (!idxOrScope.includes('-')) {
	    idxAsNumber = parseInt(idxOrScope, 10);

	    if (!isNumber$1(idxAsNumber)) {
	      throwError();
	    }

	    return template.properties[idxAsNumber];
	  }

	  // (2) handle scope entries
	  // e.g. custom-com.example.template-camunda_Connector-{idx}
	  var entryParts = idxOrScope.split('-');

	  if (entryParts.length == 2) {
	    scopeName = entryParts[0].replace(/_/g, ':');

	    idxAsNumber = parseInt(entryParts[1], 10);

	    if (scopeName && isNumber$1(idxAsNumber)) {
	      scope = findScopeForName(handleLegacyScopes(template.scopes), scopeName);

	      return scope.properties[idxAsNumber];
	    }

	  }

	  throwError();
	}

	function findScopeForName(scopes, scopeName) {
	  return find$3(scopes, function(scope) {
	    return scope.type === scopeName;
	  });
	}

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */
	function flatten$1(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? _baseFlatten(array, 1) : [];
	}

	var flatten_1 = flatten$1;

	/**
	 * Checks if `value` is `undefined`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	 * @example
	 *
	 * _.isUndefined(void 0);
	 * // => true
	 *
	 * _.isUndefined(null);
	 * // => false
	 */
	function isUndefined$2(value) {
	  return value === undefined;
	}

	var isUndefined_1 = isUndefined$2;

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
	  return _arrayMap(props, function(key) {
	    return object[key];
	  });
	}

	var _baseValues = baseValues;

	/**
	 * Creates an array of the own enumerable string keyed property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values$1(object) {
	  return object == null ? [] : _baseValues(object, keys_1(object));
	}

	var values_1 = values$1;

	var getTemplateId$2 = Helper.getTemplateId,
	    getTemplateVersion$1 = Helper.getTemplateVersion;

	var isAny$4 = require$$1$3.isAny;

	/**
	 * Registry for element templates.
	 */
	function ElementTemplates() {
	  this._templates = {};
	}

	/**
	 * Get template with given ID and optional version or for element.
	 *
	 * @param {String|djs.model.Base} id
	 * @param {number} [version]
	 *
	 * @return {ElementTemplate}
	 */
	ElementTemplates.prototype.get = function(id, version) {
	  var templates = this._templates,
	      element;

	  if (isUndefined_1(id)) {
	    return null;
	  } else if (isString_1(id)) {

	    if (isUndefined_1(version)) {
	      version = '_';
	    }

	    if (templates[ id ] && templates[ id ][ version ]) {
	      return templates[ id ][ version ];
	    } else {
	      return null;
	    }
	  } else {
	    element = id;

	    return this.get(getTemplateId$2(element), getTemplateVersion$1(element));
	  }
	};

	/**
	 * Get default template for given element.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {ElementTemplate}
	 */
	ElementTemplates.prototype.getDefault = function(element) {
	  return find_1(this.getAll(), function(template) {
	    return isAny$4(element, template.appliesTo) && template.isDefault;
	  }) || null;
	};

	/**
	 * Get all templates (with given ID).
	 *
	 * @param {string} [id]
	 *
	 * @return {Array<ElementTemplate>}
	 */
	ElementTemplates.prototype.getAll = function(id) {
	  if (!isUndefined_1(id) && this._templates[ id ]) {
	    return values_1(this._templates[ id ]);
	  }

	  return flatten_1(values_1(this._templates).map(values_1));
	};

	/**
	 * Set templates.
	 *
	 * @param {Array<ElementTemplate>} templates
	 */
	ElementTemplates.prototype.set = function(templates) {
	  var self = this;

	  this._templates = {};

	  templates.forEach(function(template) {
	    var id = template.id,
	        version = isUndefined_1(template.version) ? '_' : template.version;

	    if (!self._templates[ id ]) {
	      self._templates[ id ] = {};
	    }

	    self._templates[ id ][ version ] = template;
	  });
	};

	var ElementTemplates_1 = ElementTemplates;

	var semver = createCommonjsModule(function (module, exports) {
	exports = module.exports = SemVer;

	var debug;
	/* istanbul ignore next */
	if (typeof process === 'object' &&
	    process.env &&
	    process.env.NODE_DEBUG &&
	    /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
	  debug = function () {
	    var args = Array.prototype.slice.call(arguments, 0);
	    args.unshift('SEMVER');
	    console.log.apply(console, args);
	  };
	} else {
	  debug = function () {};
	}

	// Note: this is the semver.org version of the spec that it implements
	// Not necessarily the package version of this code.
	exports.SEMVER_SPEC_VERSION = '2.0.0';

	var MAX_LENGTH = 256;
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
	  /* istanbul ignore next */ 9007199254740991;

	// Max safe segment length for coercion.
	var MAX_SAFE_COMPONENT_LENGTH = 16;

	// The actual regexps go on exports.re
	var re = exports.re = [];
	var src = exports.src = [];
	var t = exports.tokens = {};
	var R = 0;

	function tok (n) {
	  t[n] = R++;
	}

	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.

	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.

	tok('NUMERICIDENTIFIER');
	src[t.NUMERICIDENTIFIER] = '0|[1-9]\\d*';
	tok('NUMERICIDENTIFIERLOOSE');
	src[t.NUMERICIDENTIFIERLOOSE] = '[0-9]+';

	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.

	tok('NONNUMERICIDENTIFIER');
	src[t.NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';

	// ## Main Version
	// Three dot-separated numeric identifiers.

	tok('MAINVERSION');
	src[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[t.NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[t.NUMERICIDENTIFIER] + ')';

	tok('MAINVERSIONLOOSE');
	src[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')';

	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.

	tok('PRERELEASEIDENTIFIER');
	src[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] +
	                            '|' + src[t.NONNUMERICIDENTIFIER] + ')';

	tok('PRERELEASEIDENTIFIERLOOSE');
	src[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] +
	                                 '|' + src[t.NONNUMERICIDENTIFIER] + ')';

	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.

	tok('PRERELEASE');
	src[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] +
	                  '(?:\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))';

	tok('PRERELEASELOOSE');
	src[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] +
	                       '(?:\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))';

	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.

	tok('BUILDIDENTIFIER');
	src[t.BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.

	tok('BUILD');
	src[t.BUILD] = '(?:\\+(' + src[t.BUILDIDENTIFIER] +
	             '(?:\\.' + src[t.BUILDIDENTIFIER] + ')*))';

	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.

	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.

	tok('FULL');
	tok('FULLPLAIN');
	src[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] +
	                  src[t.PRERELEASE] + '?' +
	                  src[t.BUILD] + '?';

	src[t.FULL] = '^' + src[t.FULLPLAIN] + '$';

	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	tok('LOOSEPLAIN');
	src[t.LOOSEPLAIN] = '[v=\\s]*' + src[t.MAINVERSIONLOOSE] +
	                  src[t.PRERELEASELOOSE] + '?' +
	                  src[t.BUILD] + '?';

	tok('LOOSE');
	src[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$';

	tok('GTLT');
	src[t.GTLT] = '((?:<|>)?=?)';

	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	tok('XRANGEIDENTIFIERLOOSE');
	src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
	tok('XRANGEIDENTIFIER');
	src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\*';

	tok('XRANGEPLAIN');
	src[t.XRANGEPLAIN] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' +
	                   '(?:' + src[t.PRERELEASE] + ')?' +
	                   src[t.BUILD] + '?' +
	                   ')?)?';

	tok('XRANGEPLAINLOOSE');
	src[t.XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:' + src[t.PRERELEASELOOSE] + ')?' +
	                        src[t.BUILD] + '?' +
	                        ')?)?';

	tok('XRANGE');
	src[t.XRANGE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAIN] + '$';
	tok('XRANGELOOSE');
	src[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAINLOOSE] + '$';

	// Coercion.
	// Extract anything that could conceivably be a part of a valid semver
	tok('COERCE');
	src[t.COERCE] = '(^|[^\\d])' +
	              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
	              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
	              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
	              '(?:$|[^\\d])';
	tok('COERCERTL');
	re[t.COERCERTL] = new RegExp(src[t.COERCE], 'g');

	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	tok('LONETILDE');
	src[t.LONETILDE] = '(?:~>?)';

	tok('TILDETRIM');
	src[t.TILDETRIM] = '(\\s*)' + src[t.LONETILDE] + '\\s+';
	re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g');
	var tildeTrimReplace = '$1~';

	tok('TILDE');
	src[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$';
	tok('TILDELOOSE');
	src[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$';

	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	tok('LONECARET');
	src[t.LONECARET] = '(?:\\^)';

	tok('CARETTRIM');
	src[t.CARETTRIM] = '(\\s*)' + src[t.LONECARET] + '\\s+';
	re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g');
	var caretTrimReplace = '$1^';

	tok('CARET');
	src[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$';
	tok('CARETLOOSE');
	src[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$';

	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	tok('COMPARATORLOOSE');
	src[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + ')$|^$';
	tok('COMPARATOR');
	src[t.COMPARATOR] = '^' + src[t.GTLT] + '\\s*(' + src[t.FULLPLAIN] + ')$|^$';

	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	tok('COMPARATORTRIM');
	src[t.COMPARATORTRIM] = '(\\s*)' + src[t.GTLT] +
	                      '\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')';

	// this one has to use the /g flag
	re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g');
	var comparatorTrimReplace = '$1$2$3';

	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	tok('HYPHENRANGE');
	src[t.HYPHENRANGE] = '^\\s*(' + src[t.XRANGEPLAIN] + ')' +
	                   '\\s+-\\s+' +
	                   '(' + src[t.XRANGEPLAIN] + ')' +
	                   '\\s*$';

	tok('HYPHENRANGELOOSE');
	src[t.HYPHENRANGELOOSE] = '^\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' +
	                        '\\s+-\\s+' +
	                        '(' + src[t.XRANGEPLAINLOOSE] + ')' +
	                        '\\s*$';

	// Star ranges basically just allow anything at all.
	tok('STAR');
	src[t.STAR] = '(<|>)?=?\\s*\\*';

	// Compile to actual regexp objects.
	// All are flag-free, unless they were created above with a flag.
	for (var i = 0; i < R; i++) {
	  debug(i, src[i]);
	  if (!re[i]) {
	    re[i] = new RegExp(src[i]);
	  }
	}

	exports.parse = parse;
	function parse (version, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (version instanceof SemVer) {
	    return version
	  }

	  if (typeof version !== 'string') {
	    return null
	  }

	  if (version.length > MAX_LENGTH) {
	    return null
	  }

	  var r = options.loose ? re[t.LOOSE] : re[t.FULL];
	  if (!r.test(version)) {
	    return null
	  }

	  try {
	    return new SemVer(version, options)
	  } catch (er) {
	    return null
	  }
	}

	exports.valid = valid;
	function valid (version, options) {
	  var v = parse(version, options);
	  return v ? v.version : null
	}

	exports.clean = clean;
	function clean (version, options) {
	  var s = parse(version.trim().replace(/^[=v]+/, ''), options);
	  return s ? s.version : null
	}

	exports.SemVer = SemVer;

	function SemVer (version, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }
	  if (version instanceof SemVer) {
	    if (version.loose === options.loose) {
	      return version
	    } else {
	      version = version.version;
	    }
	  } else if (typeof version !== 'string') {
	    throw new TypeError('Invalid Version: ' + version)
	  }

	  if (version.length > MAX_LENGTH) {
	    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
	  }

	  if (!(this instanceof SemVer)) {
	    return new SemVer(version, options)
	  }

	  debug('SemVer', version, options);
	  this.options = options;
	  this.loose = !!options.loose;

	  var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);

	  if (!m) {
	    throw new TypeError('Invalid Version: ' + version)
	  }

	  this.raw = version;

	  // these are actually numbers
	  this.major = +m[1];
	  this.minor = +m[2];
	  this.patch = +m[3];

	  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
	    throw new TypeError('Invalid major version')
	  }

	  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
	    throw new TypeError('Invalid minor version')
	  }

	  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
	    throw new TypeError('Invalid patch version')
	  }

	  // numberify any prerelease numeric ids
	  if (!m[4]) {
	    this.prerelease = [];
	  } else {
	    this.prerelease = m[4].split('.').map(function (id) {
	      if (/^[0-9]+$/.test(id)) {
	        var num = +id;
	        if (num >= 0 && num < MAX_SAFE_INTEGER) {
	          return num
	        }
	      }
	      return id
	    });
	  }

	  this.build = m[5] ? m[5].split('.') : [];
	  this.format();
	}

	SemVer.prototype.format = function () {
	  this.version = this.major + '.' + this.minor + '.' + this.patch;
	  if (this.prerelease.length) {
	    this.version += '-' + this.prerelease.join('.');
	  }
	  return this.version
	};

	SemVer.prototype.toString = function () {
	  return this.version
	};

	SemVer.prototype.compare = function (other) {
	  debug('SemVer.compare', this.version, this.options, other);
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  return this.compareMain(other) || this.comparePre(other)
	};

	SemVer.prototype.compareMain = function (other) {
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  return compareIdentifiers(this.major, other.major) ||
	         compareIdentifiers(this.minor, other.minor) ||
	         compareIdentifiers(this.patch, other.patch)
	};

	SemVer.prototype.comparePre = function (other) {
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  // NOT having a prerelease is > having one
	  if (this.prerelease.length && !other.prerelease.length) {
	    return -1
	  } else if (!this.prerelease.length && other.prerelease.length) {
	    return 1
	  } else if (!this.prerelease.length && !other.prerelease.length) {
	    return 0
	  }

	  var i = 0;
	  do {
	    var a = this.prerelease[i];
	    var b = other.prerelease[i];
	    debug('prerelease compare', i, a, b);
	    if (a === undefined && b === undefined) {
	      return 0
	    } else if (b === undefined) {
	      return 1
	    } else if (a === undefined) {
	      return -1
	    } else if (a === b) {
	      continue
	    } else {
	      return compareIdentifiers(a, b)
	    }
	  } while (++i)
	};

	SemVer.prototype.compareBuild = function (other) {
	  if (!(other instanceof SemVer)) {
	    other = new SemVer(other, this.options);
	  }

	  var i = 0;
	  do {
	    var a = this.build[i];
	    var b = other.build[i];
	    debug('prerelease compare', i, a, b);
	    if (a === undefined && b === undefined) {
	      return 0
	    } else if (b === undefined) {
	      return 1
	    } else if (a === undefined) {
	      return -1
	    } else if (a === b) {
	      continue
	    } else {
	      return compareIdentifiers(a, b)
	    }
	  } while (++i)
	};

	// preminor will bump the version up to the next minor release, and immediately
	// down to pre-release. premajor and prepatch work the same way.
	SemVer.prototype.inc = function (release, identifier) {
	  switch (release) {
	    case 'premajor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor = 0;
	      this.major++;
	      this.inc('pre', identifier);
	      break
	    case 'preminor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor++;
	      this.inc('pre', identifier);
	      break
	    case 'prepatch':
	      // If this is already a prerelease, it will bump to the next version
	      // drop any prereleases that might already exist, since they are not
	      // relevant at this point.
	      this.prerelease.length = 0;
	      this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break
	    // If the input is a non-prerelease version, this acts the same as
	    // prepatch.
	    case 'prerelease':
	      if (this.prerelease.length === 0) {
	        this.inc('patch', identifier);
	      }
	      this.inc('pre', identifier);
	      break

	    case 'major':
	      // If this is a pre-major version, bump up to the same major version.
	      // Otherwise increment major.
	      // 1.0.0-5 bumps to 1.0.0
	      // 1.1.0 bumps to 2.0.0
	      if (this.minor !== 0 ||
	          this.patch !== 0 ||
	          this.prerelease.length === 0) {
	        this.major++;
	      }
	      this.minor = 0;
	      this.patch = 0;
	      this.prerelease = [];
	      break
	    case 'minor':
	      // If this is a pre-minor version, bump up to the same minor version.
	      // Otherwise increment minor.
	      // 1.2.0-5 bumps to 1.2.0
	      // 1.2.1 bumps to 1.3.0
	      if (this.patch !== 0 || this.prerelease.length === 0) {
	        this.minor++;
	      }
	      this.patch = 0;
	      this.prerelease = [];
	      break
	    case 'patch':
	      // If this is not a pre-release version, it will increment the patch.
	      // If it is a pre-release it will bump up to the same patch version.
	      // 1.2.0-5 patches to 1.2.0
	      // 1.2.0 patches to 1.2.1
	      if (this.prerelease.length === 0) {
	        this.patch++;
	      }
	      this.prerelease = [];
	      break
	    // This probably shouldn't be used publicly.
	    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
	    case 'pre':
	      if (this.prerelease.length === 0) {
	        this.prerelease = [0];
	      } else {
	        var i = this.prerelease.length;
	        while (--i >= 0) {
	          if (typeof this.prerelease[i] === 'number') {
	            this.prerelease[i]++;
	            i = -2;
	          }
	        }
	        if (i === -1) {
	          // didn't increment anything
	          this.prerelease.push(0);
	        }
	      }
	      if (identifier) {
	        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
	        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
	        if (this.prerelease[0] === identifier) {
	          if (isNaN(this.prerelease[1])) {
	            this.prerelease = [identifier, 0];
	          }
	        } else {
	          this.prerelease = [identifier, 0];
	        }
	      }
	      break

	    default:
	      throw new Error('invalid increment argument: ' + release)
	  }
	  this.format();
	  this.raw = this.version;
	  return this
	};

	exports.inc = inc;
	function inc (version, release, loose, identifier) {
	  if (typeof (loose) === 'string') {
	    identifier = loose;
	    loose = undefined;
	  }

	  try {
	    return new SemVer(version, loose).inc(release, identifier).version
	  } catch (er) {
	    return null
	  }
	}

	exports.diff = diff;
	function diff (version1, version2) {
	  if (eq(version1, version2)) {
	    return null
	  } else {
	    var v1 = parse(version1);
	    var v2 = parse(version2);
	    var prefix = '';
	    if (v1.prerelease.length || v2.prerelease.length) {
	      prefix = 'pre';
	      var defaultResult = 'prerelease';
	    }
	    for (var key in v1) {
	      if (key === 'major' || key === 'minor' || key === 'patch') {
	        if (v1[key] !== v2[key]) {
	          return prefix + key
	        }
	      }
	    }
	    return defaultResult // may be undefined
	  }
	}

	exports.compareIdentifiers = compareIdentifiers;

	var numeric = /^[0-9]+$/;
	function compareIdentifiers (a, b) {
	  var anum = numeric.test(a);
	  var bnum = numeric.test(b);

	  if (anum && bnum) {
	    a = +a;
	    b = +b;
	  }

	  return a === b ? 0
	    : (anum && !bnum) ? -1
	    : (bnum && !anum) ? 1
	    : a < b ? -1
	    : 1
	}

	exports.rcompareIdentifiers = rcompareIdentifiers;
	function rcompareIdentifiers (a, b) {
	  return compareIdentifiers(b, a)
	}

	exports.major = major;
	function major (a, loose) {
	  return new SemVer(a, loose).major
	}

	exports.minor = minor;
	function minor (a, loose) {
	  return new SemVer(a, loose).minor
	}

	exports.patch = patch;
	function patch (a, loose) {
	  return new SemVer(a, loose).patch
	}

	exports.compare = compare;
	function compare (a, b, loose) {
	  return new SemVer(a, loose).compare(new SemVer(b, loose))
	}

	exports.compareLoose = compareLoose;
	function compareLoose (a, b) {
	  return compare(a, b, true)
	}

	exports.compareBuild = compareBuild;
	function compareBuild (a, b, loose) {
	  var versionA = new SemVer(a, loose);
	  var versionB = new SemVer(b, loose);
	  return versionA.compare(versionB) || versionA.compareBuild(versionB)
	}

	exports.rcompare = rcompare;
	function rcompare (a, b, loose) {
	  return compare(b, a, loose)
	}

	exports.sort = sort;
	function sort (list, loose) {
	  return list.sort(function (a, b) {
	    return exports.compareBuild(a, b, loose)
	  })
	}

	exports.rsort = rsort;
	function rsort (list, loose) {
	  return list.sort(function (a, b) {
	    return exports.compareBuild(b, a, loose)
	  })
	}

	exports.gt = gt;
	function gt (a, b, loose) {
	  return compare(a, b, loose) > 0
	}

	exports.lt = lt;
	function lt (a, b, loose) {
	  return compare(a, b, loose) < 0
	}

	exports.eq = eq;
	function eq (a, b, loose) {
	  return compare(a, b, loose) === 0
	}

	exports.neq = neq;
	function neq (a, b, loose) {
	  return compare(a, b, loose) !== 0
	}

	exports.gte = gte;
	function gte (a, b, loose) {
	  return compare(a, b, loose) >= 0
	}

	exports.lte = lte;
	function lte (a, b, loose) {
	  return compare(a, b, loose) <= 0
	}

	exports.cmp = cmp;
	function cmp (a, op, b, loose) {
	  switch (op) {
	    case '===':
	      if (typeof a === 'object')
	        a = a.version;
	      if (typeof b === 'object')
	        b = b.version;
	      return a === b

	    case '!==':
	      if (typeof a === 'object')
	        a = a.version;
	      if (typeof b === 'object')
	        b = b.version;
	      return a !== b

	    case '':
	    case '=':
	    case '==':
	      return eq(a, b, loose)

	    case '!=':
	      return neq(a, b, loose)

	    case '>':
	      return gt(a, b, loose)

	    case '>=':
	      return gte(a, b, loose)

	    case '<':
	      return lt(a, b, loose)

	    case '<=':
	      return lte(a, b, loose)

	    default:
	      throw new TypeError('Invalid operator: ' + op)
	  }
	}

	exports.Comparator = Comparator;
	function Comparator (comp, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (comp instanceof Comparator) {
	    if (comp.loose === !!options.loose) {
	      return comp
	    } else {
	      comp = comp.value;
	    }
	  }

	  if (!(this instanceof Comparator)) {
	    return new Comparator(comp, options)
	  }

	  debug('comparator', comp, options);
	  this.options = options;
	  this.loose = !!options.loose;
	  this.parse(comp);

	  if (this.semver === ANY) {
	    this.value = '';
	  } else {
	    this.value = this.operator + this.semver.version;
	  }

	  debug('comp', this);
	}

	var ANY = {};
	Comparator.prototype.parse = function (comp) {
	  var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
	  var m = comp.match(r);

	  if (!m) {
	    throw new TypeError('Invalid comparator: ' + comp)
	  }

	  this.operator = m[1] !== undefined ? m[1] : '';
	  if (this.operator === '=') {
	    this.operator = '';
	  }

	  // if it literally is just '>' or '' then allow anything.
	  if (!m[2]) {
	    this.semver = ANY;
	  } else {
	    this.semver = new SemVer(m[2], this.options.loose);
	  }
	};

	Comparator.prototype.toString = function () {
	  return this.value
	};

	Comparator.prototype.test = function (version) {
	  debug('Comparator.test', version, this.options.loose);

	  if (this.semver === ANY || version === ANY) {
	    return true
	  }

	  if (typeof version === 'string') {
	    try {
	      version = new SemVer(version, this.options);
	    } catch (er) {
	      return false
	    }
	  }

	  return cmp(version, this.operator, this.semver, this.options)
	};

	Comparator.prototype.intersects = function (comp, options) {
	  if (!(comp instanceof Comparator)) {
	    throw new TypeError('a Comparator is required')
	  }

	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  var rangeTmp;

	  if (this.operator === '') {
	    if (this.value === '') {
	      return true
	    }
	    rangeTmp = new Range(comp.value, options);
	    return satisfies(this.value, rangeTmp, options)
	  } else if (comp.operator === '') {
	    if (comp.value === '') {
	      return true
	    }
	    rangeTmp = new Range(this.value, options);
	    return satisfies(comp.semver, rangeTmp, options)
	  }

	  var sameDirectionIncreasing =
	    (this.operator === '>=' || this.operator === '>') &&
	    (comp.operator === '>=' || comp.operator === '>');
	  var sameDirectionDecreasing =
	    (this.operator === '<=' || this.operator === '<') &&
	    (comp.operator === '<=' || comp.operator === '<');
	  var sameSemVer = this.semver.version === comp.semver.version;
	  var differentDirectionsInclusive =
	    (this.operator === '>=' || this.operator === '<=') &&
	    (comp.operator === '>=' || comp.operator === '<=');
	  var oppositeDirectionsLessThan =
	    cmp(this.semver, '<', comp.semver, options) &&
	    ((this.operator === '>=' || this.operator === '>') &&
	    (comp.operator === '<=' || comp.operator === '<'));
	  var oppositeDirectionsGreaterThan =
	    cmp(this.semver, '>', comp.semver, options) &&
	    ((this.operator === '<=' || this.operator === '<') &&
	    (comp.operator === '>=' || comp.operator === '>'));

	  return sameDirectionIncreasing || sameDirectionDecreasing ||
	    (sameSemVer && differentDirectionsInclusive) ||
	    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
	};

	exports.Range = Range;
	function Range (range, options) {
	  if (!options || typeof options !== 'object') {
	    options = {
	      loose: !!options,
	      includePrerelease: false
	    };
	  }

	  if (range instanceof Range) {
	    if (range.loose === !!options.loose &&
	        range.includePrerelease === !!options.includePrerelease) {
	      return range
	    } else {
	      return new Range(range.raw, options)
	    }
	  }

	  if (range instanceof Comparator) {
	    return new Range(range.value, options)
	  }

	  if (!(this instanceof Range)) {
	    return new Range(range, options)
	  }

	  this.options = options;
	  this.loose = !!options.loose;
	  this.includePrerelease = !!options.includePrerelease;

	  // First, split based on boolean or ||
	  this.raw = range;
	  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
	    return this.parseRange(range.trim())
	  }, this).filter(function (c) {
	    // throw out any that are not relevant for whatever reason
	    return c.length
	  });

	  if (!this.set.length) {
	    throw new TypeError('Invalid SemVer Range: ' + range)
	  }

	  this.format();
	}

	Range.prototype.format = function () {
	  this.range = this.set.map(function (comps) {
	    return comps.join(' ').trim()
	  }).join('||').trim();
	  return this.range
	};

	Range.prototype.toString = function () {
	  return this.range
	};

	Range.prototype.parseRange = function (range) {
	  var loose = this.options.loose;
	  range = range.trim();
	  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
	  var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
	  range = range.replace(hr, hyphenReplace);
	  debug('hyphen replace', range);
	  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
	  range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
	  debug('comparator trim', range, re[t.COMPARATORTRIM]);

	  // `~ 1.2.3` => `~1.2.3`
	  range = range.replace(re[t.TILDETRIM], tildeTrimReplace);

	  // `^ 1.2.3` => `^1.2.3`
	  range = range.replace(re[t.CARETTRIM], caretTrimReplace);

	  // normalize spaces
	  range = range.split(/\s+/).join(' ');

	  // At this point, the range is completely trimmed and
	  // ready to be split into comparators.

	  var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
	  var set = range.split(' ').map(function (comp) {
	    return parseComparator(comp, this.options)
	  }, this).join(' ').split(/\s+/);
	  if (this.options.loose) {
	    // in loose mode, throw out any that are not valid comparators
	    set = set.filter(function (comp) {
	      return !!comp.match(compRe)
	    });
	  }
	  set = set.map(function (comp) {
	    return new Comparator(comp, this.options)
	  }, this);

	  return set
	};

	Range.prototype.intersects = function (range, options) {
	  if (!(range instanceof Range)) {
	    throw new TypeError('a Range is required')
	  }

	  return this.set.some(function (thisComparators) {
	    return (
	      isSatisfiable(thisComparators, options) &&
	      range.set.some(function (rangeComparators) {
	        return (
	          isSatisfiable(rangeComparators, options) &&
	          thisComparators.every(function (thisComparator) {
	            return rangeComparators.every(function (rangeComparator) {
	              return thisComparator.intersects(rangeComparator, options)
	            })
	          })
	        )
	      })
	    )
	  })
	};

	// take a set of comparators and determine whether there
	// exists a version which can satisfy it
	function isSatisfiable (comparators, options) {
	  var result = true;
	  var remainingComparators = comparators.slice();
	  var testComparator = remainingComparators.pop();

	  while (result && remainingComparators.length) {
	    result = remainingComparators.every(function (otherComparator) {
	      return testComparator.intersects(otherComparator, options)
	    });

	    testComparator = remainingComparators.pop();
	  }

	  return result
	}

	// Mostly just for testing and legacy API reasons
	exports.toComparators = toComparators;
	function toComparators (range, options) {
	  return new Range(range, options).set.map(function (comp) {
	    return comp.map(function (c) {
	      return c.value
	    }).join(' ').trim().split(' ')
	  })
	}

	// comprised of xranges, tildes, stars, and gtlt's at this point.
	// already replaced the hyphen ranges
	// turn into a set of JUST comparators.
	function parseComparator (comp, options) {
	  debug('comp', comp, options);
	  comp = replaceCarets(comp, options);
	  debug('caret', comp);
	  comp = replaceTildes(comp, options);
	  debug('tildes', comp);
	  comp = replaceXRanges(comp, options);
	  debug('xrange', comp);
	  comp = replaceStars(comp, options);
	  debug('stars', comp);
	  return comp
	}

	function isX (id) {
	  return !id || id.toLowerCase() === 'x' || id === '*'
	}

	// ~, ~> --> * (any, kinda silly)
	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
	function replaceTildes (comp, options) {
	  return comp.trim().split(/\s+/).map(function (comp) {
	    return replaceTilde(comp, options)
	  }).join(' ')
	}

	function replaceTilde (comp, options) {
	  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
	  return comp.replace(r, function (_, M, m, p, pr) {
	    debug('tilde', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M)) {
	      ret = '';
	    } else if (isX(m)) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (isX(p)) {
	      // ~1.2 == >=1.2.0 <1.3.0
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    } else if (pr) {
	      debug('replaceTilde pr', pr);
	      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    } else {
	      // ~1.2.3 == >=1.2.3 <1.3.0
	      ret = '>=' + M + '.' + m + '.' + p +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    }

	    debug('tilde return', ret);
	    return ret
	  })
	}

	// ^ --> * (any, kinda silly)
	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
	// ^1.2.3 --> >=1.2.3 <2.0.0
	// ^1.2.0 --> >=1.2.0 <2.0.0
	function replaceCarets (comp, options) {
	  return comp.trim().split(/\s+/).map(function (comp) {
	    return replaceCaret(comp, options)
	  }).join(' ')
	}

	function replaceCaret (comp, options) {
	  debug('caret', comp, options);
	  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
	  return comp.replace(r, function (_, M, m, p, pr) {
	    debug('caret', comp, _, M, m, p, pr);
	    var ret;

	    if (isX(M)) {
	      ret = '';
	    } else if (isX(m)) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (isX(p)) {
	      if (M === '0') {
	        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	      } else {
	        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
	      }
	    } else if (pr) {
	      debug('replaceCaret pr', pr);
	      if (M === '0') {
	        if (m === '0') {
	          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        } else {
	          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	                ' <' + M + '.' + (+m + 1) + '.0';
	        }
	      } else {
	        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
	              ' <' + (+M + 1) + '.0.0';
	      }
	    } else {
	      debug('no pr');
	      if (M === '0') {
	        if (m === '0') {
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        } else {
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + (+m + 1) + '.0';
	        }
	      } else {
	        ret = '>=' + M + '.' + m + '.' + p +
	              ' <' + (+M + 1) + '.0.0';
	      }
	    }

	    debug('caret return', ret);
	    return ret
	  })
	}

	function replaceXRanges (comp, options) {
	  debug('replaceXRanges', comp, options);
	  return comp.split(/\s+/).map(function (comp) {
	    return replaceXRange(comp, options)
	  }).join(' ')
	}

	function replaceXRange (comp, options) {
	  comp = comp.trim();
	  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
	  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
	    debug('xRange', comp, ret, gtlt, M, m, p, pr);
	    var xM = isX(M);
	    var xm = xM || isX(m);
	    var xp = xm || isX(p);
	    var anyX = xp;

	    if (gtlt === '=' && anyX) {
	      gtlt = '';
	    }

	    // if we're including prereleases in the match, then we need
	    // to fix this to -0, the lowest possible prerelease value
	    pr = options.includePrerelease ? '-0' : '';

	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        // nothing is allowed
	        ret = '<0.0.0-0';
	      } else {
	        // nothing is forbidden
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      // we know patch is an x, because we have any x at all.
	      // replace X with 0
	      if (xm) {
	        m = 0;
	      }
	      p = 0;

	      if (gtlt === '>') {
	        // >1 => >=2.0.0
	        // >1.2 => >=1.3.0
	        // >1.2.3 => >= 1.2.4
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
	        gtlt = '<';
	        if (xm) {
	          M = +M + 1;
	        } else {
	          m = +m + 1;
	        }
	      }

	      ret = gtlt + M + '.' + m + '.' + p + pr;
	    } else if (xm) {
	      ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr;
	    } else if (xp) {
	      ret = '>=' + M + '.' + m + '.0' + pr +
	        ' <' + M + '.' + (+m + 1) + '.0' + pr;
	    }

	    debug('xRange return', ret);

	    return ret
	  })
	}

	// Because * is AND-ed with everything else in the comparator,
	// and '' means "any version", just remove the *s entirely.
	function replaceStars (comp, options) {
	  debug('replaceStars', comp, options);
	  // Looseness is ignored here.  star is always as loose as it gets!
	  return comp.trim().replace(re[t.STAR], '')
	}

	// This function is passed to string.replace(re[t.HYPHENRANGE])
	// M, m, patch, prerelease, build
	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
	// 1.2 - 3.4 => >=1.2.0 <3.5.0
	function hyphenReplace ($0,
	  from, fM, fm, fp, fpr, fb,
	  to, tM, tm, tp, tpr, tb) {
	  if (isX(fM)) {
	    from = '';
	  } else if (isX(fm)) {
	    from = '>=' + fM + '.0.0';
	  } else if (isX(fp)) {
	    from = '>=' + fM + '.' + fm + '.0';
	  } else {
	    from = '>=' + from;
	  }

	  if (isX(tM)) {
	    to = '';
	  } else if (isX(tm)) {
	    to = '<' + (+tM + 1) + '.0.0';
	  } else if (isX(tp)) {
	    to = '<' + tM + '.' + (+tm + 1) + '.0';
	  } else if (tpr) {
	    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
	  } else {
	    to = '<=' + to;
	  }

	  return (from + ' ' + to).trim()
	}

	// if ANY of the sets match ALL of its comparators, then pass
	Range.prototype.test = function (version) {
	  if (!version) {
	    return false
	  }

	  if (typeof version === 'string') {
	    try {
	      version = new SemVer(version, this.options);
	    } catch (er) {
	      return false
	    }
	  }

	  for (var i = 0; i < this.set.length; i++) {
	    if (testSet(this.set[i], version, this.options)) {
	      return true
	    }
	  }
	  return false
	};

	function testSet (set, version, options) {
	  for (var i = 0; i < set.length; i++) {
	    if (!set[i].test(version)) {
	      return false
	    }
	  }

	  if (version.prerelease.length && !options.includePrerelease) {
	    // Find the set of versions that are allowed to have prereleases
	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
	    // That should allow `1.2.3-pr.2` to pass.
	    // However, `1.2.4-alpha.notready` should NOT be allowed,
	    // even though it's within the range set by the comparators.
	    for (i = 0; i < set.length; i++) {
	      debug(set[i].semver);
	      if (set[i].semver === ANY) {
	        continue
	      }

	      if (set[i].semver.prerelease.length > 0) {
	        var allowed = set[i].semver;
	        if (allowed.major === version.major &&
	            allowed.minor === version.minor &&
	            allowed.patch === version.patch) {
	          return true
	        }
	      }
	    }

	    // Version has a -pre, but it's not one of the ones we like.
	    return false
	  }

	  return true
	}

	exports.satisfies = satisfies;
	function satisfies (version, range, options) {
	  try {
	    range = new Range(range, options);
	  } catch (er) {
	    return false
	  }
	  return range.test(version)
	}

	exports.maxSatisfying = maxSatisfying;
	function maxSatisfying (versions, range, options) {
	  var max = null;
	  var maxSV = null;
	  try {
	    var rangeObj = new Range(range, options);
	  } catch (er) {
	    return null
	  }
	  versions.forEach(function (v) {
	    if (rangeObj.test(v)) {
	      // satisfies(v, range, options)
	      if (!max || maxSV.compare(v) === -1) {
	        // compare(max, v, true)
	        max = v;
	        maxSV = new SemVer(max, options);
	      }
	    }
	  });
	  return max
	}

	exports.minSatisfying = minSatisfying;
	function minSatisfying (versions, range, options) {
	  var min = null;
	  var minSV = null;
	  try {
	    var rangeObj = new Range(range, options);
	  } catch (er) {
	    return null
	  }
	  versions.forEach(function (v) {
	    if (rangeObj.test(v)) {
	      // satisfies(v, range, options)
	      if (!min || minSV.compare(v) === 1) {
	        // compare(min, v, true)
	        min = v;
	        minSV = new SemVer(min, options);
	      }
	    }
	  });
	  return min
	}

	exports.minVersion = minVersion;
	function minVersion (range, loose) {
	  range = new Range(range, loose);

	  var minver = new SemVer('0.0.0');
	  if (range.test(minver)) {
	    return minver
	  }

	  minver = new SemVer('0.0.0-0');
	  if (range.test(minver)) {
	    return minver
	  }

	  minver = null;
	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    comparators.forEach(function (comparator) {
	      // Clone to avoid manipulating the comparator's semver object.
	      var compver = new SemVer(comparator.semver.version);
	      switch (comparator.operator) {
	        case '>':
	          if (compver.prerelease.length === 0) {
	            compver.patch++;
	          } else {
	            compver.prerelease.push(0);
	          }
	          compver.raw = compver.format();
	          /* fallthrough */
	        case '':
	        case '>=':
	          if (!minver || gt(minver, compver)) {
	            minver = compver;
	          }
	          break
	        case '<':
	        case '<=':
	          /* Ignore maximum versions */
	          break
	        /* istanbul ignore next */
	        default:
	          throw new Error('Unexpected operation: ' + comparator.operator)
	      }
	    });
	  }

	  if (minver && range.test(minver)) {
	    return minver
	  }

	  return null
	}

	exports.validRange = validRange;
	function validRange (range, options) {
	  try {
	    // Return '*' instead of '' so that truthiness works.
	    // This will throw if it's invalid anyway
	    return new Range(range, options).range || '*'
	  } catch (er) {
	    return null
	  }
	}

	// Determine if version is less than all the versions possible in the range
	exports.ltr = ltr;
	function ltr (version, range, options) {
	  return outside(version, range, '<', options)
	}

	// Determine if version is greater than all the versions possible in the range.
	exports.gtr = gtr;
	function gtr (version, range, options) {
	  return outside(version, range, '>', options)
	}

	exports.outside = outside;
	function outside (version, range, hilo, options) {
	  version = new SemVer(version, options);
	  range = new Range(range, options);

	  var gtfn, ltefn, ltfn, comp, ecomp;
	  switch (hilo) {
	    case '>':
	      gtfn = gt;
	      ltefn = lte;
	      ltfn = lt;
	      comp = '>';
	      ecomp = '>=';
	      break
	    case '<':
	      gtfn = lt;
	      ltefn = gte;
	      ltfn = gt;
	      comp = '<';
	      ecomp = '<=';
	      break
	    default:
	      throw new TypeError('Must provide a hilo val of "<" or ">"')
	  }

	  // If it satisifes the range it is not outside
	  if (satisfies(version, range, options)) {
	    return false
	  }

	  // From now on, variable terms are as if we're in "gtr" mode.
	  // but note that everything is flipped for the "ltr" function.

	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];

	    var high = null;
	    var low = null;

	    comparators.forEach(function (comparator) {
	      if (comparator.semver === ANY) {
	        comparator = new Comparator('>=0.0.0');
	      }
	      high = high || comparator;
	      low = low || comparator;
	      if (gtfn(comparator.semver, high.semver, options)) {
	        high = comparator;
	      } else if (ltfn(comparator.semver, low.semver, options)) {
	        low = comparator;
	      }
	    });

	    // If the edge version comparator has a operator then our version
	    // isn't outside it
	    if (high.operator === comp || high.operator === ecomp) {
	      return false
	    }

	    // If the lowest version comparator has an operator and our version
	    // is less than it then it isn't higher than the range
	    if ((!low.operator || low.operator === comp) &&
	        ltefn(version, low.semver)) {
	      return false
	    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
	      return false
	    }
	  }
	  return true
	}

	exports.prerelease = prerelease;
	function prerelease (version, options) {
	  var parsed = parse(version, options);
	  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
	}

	exports.intersects = intersects;
	function intersects (r1, r2, options) {
	  r1 = new Range(r1, options);
	  r2 = new Range(r2, options);
	  return r1.intersects(r2)
	}

	exports.coerce = coerce;
	function coerce (version, options) {
	  if (version instanceof SemVer) {
	    return version
	  }

	  if (typeof version === 'number') {
	    version = String(version);
	  }

	  if (typeof version !== 'string') {
	    return null
	  }

	  options = options || {};

	  var match = null;
	  if (!options.rtl) {
	    match = version.match(re[t.COERCE]);
	  } else {
	    // Find the right-most coercible string that does not share
	    // a terminus with a more left-ward coercible string.
	    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
	    //
	    // Walk through the string checking with a /g regexp
	    // Manually set the index so as to pick up overlapping matches.
	    // Stop when we get a match that ends at the string end, since no
	    // coercible string can be more right-ward without the same terminus.
	    var next;
	    while ((next = re[t.COERCERTL].exec(version)) &&
	      (!match || match.index + match[0].length !== version.length)
	    ) {
	      if (!match ||
	          next.index + next[0].length !== match.index + match[0].length) {
	        match = next;
	      }
	      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
	    }
	    // leave it in a clean state
	    re[t.COERCERTL].lastIndex = -1;
	  }

	  if (match === null) {
	    return null
	  }

	  return parse(match[2] +
	    '.' + (match[3] || '0') +
	    '.' + (match[4] || '0'), options)
	}
	});

	var name$5 = "@camunda/element-templates-json-schema";
	var version = "0.2.0";
	var description = "JSON Schema for (Camunda) Element Templates";
	var scripts = {
		lint: "eslint .",
		test: "mocha -r esm --reporter=spec --recursive test/spec",
		all: "run-s lint test"
	};
	var repository = {
		type: "git",
		url: "git+https://github.com/camunda/element-templates-json-schema.git"
	};
	var keywords = [
		"json-schema",
		"element-templates",
		"camunda"
	];
	var author = "Niklas Kiefer <niklas.kiefer@camunda.com (https://github.com/pinussilvestrus)";
	var license = "MIT";
	var bugs = {
		url: "https://github.com/camunda/element-templates-json-schema/issues"
	};
	var homepage = "https://github.com/camunda/element-templates-json-schema#readme";
	var devDependencies = {
		ajv: "^6.12.5",
		"ajv-errors": "^1.0.1",
		chai: "^4.2.0",
		eslint: "^7.9.0",
		"eslint-plugin-bpmn-io": "^0.11.0",
		esm: "^3.2.25",
		mocha: "^8.1.3",
		"npm-run-all": "^4.1.5"
	};
	var _resolved = "https://registry.npmjs.org/@camunda/element-templates-json-schema/-/element-templates-json-schema-0.2.0.tgz";
	var _integrity = "sha512-U3+p9lmajdn3YT3woNASwBZAcgFrEeaQHKZOdsUyzFPI+bplNQpJGCEl1k4eHXUPowiAruhmsSUrOSEjqpcOBA==";
	var _from = "@camunda/element-templates-json-schema@0.2.0";
	var require$$1$4 = {
		name: name$5,
		version: version,
		description: description,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		_resolved: _resolved,
		_integrity: _integrity,
		_from: _from
	};

	var isArray$4 = require$$0.isArray,
	    isObject$3 = require$$0.isObject,
	    keys$4 = require$$0.keys;





	var DROPDOWN_TYPE = 'Dropdown';

	var VALID_TYPES = [ 'String', 'Text', 'Boolean', 'Hidden', DROPDOWN_TYPE ];

	var PROPERTY_TYPE = 'property',
	    CAMUNDA_PROPERTY_TYPE = 'camunda:property',
	    CAMUNDA_INPUT_PARAMETER_TYPE = 'camunda:inputParameter',
	    CAMUNDA_OUTPUT_PARAMETER_TYPE = 'camunda:outputParameter',
	    CAMUNDA_IN_TYPE = 'camunda:in',
	    CAMUNDA_OUT_TYPE = 'camunda:out',
	    CAMUNDA_IN_BUSINESS_KEY_TYPE = 'camunda:in:businessKey',
	    CAMUNDA_EXECUTION_LISTENER = 'camunda:executionListener',
	    CAMUNDA_FIELD = 'camunda:field',
	    CAMUNDA_CONNECTOR = 'camunda:Connector';

	var VALID_BINDING_TYPES = [
	  PROPERTY_TYPE,
	  CAMUNDA_PROPERTY_TYPE,
	  CAMUNDA_INPUT_PARAMETER_TYPE,
	  CAMUNDA_OUTPUT_PARAMETER_TYPE,
	  CAMUNDA_IN_TYPE,
	  CAMUNDA_OUT_TYPE,
	  CAMUNDA_IN_BUSINESS_KEY_TYPE,
	  CAMUNDA_EXECUTION_LISTENER,
	  CAMUNDA_FIELD
	];

	var SUPPORTED_SCHEMA_VERSION = require$$1$4.version;


	/**
	 * A element template validator.
	 */
	function Validator() {

	  this._templatesById = {};

	  this._validTemplates = [];
	  this._errors = [];


	  /**
	   * Adds the templates.
	   *
	   * @param {Array<TemplateDescriptor>} templates
	   *
	   * @return {Validator} self
	   */
	  this.addAll = function(templates) {

	    if (!isArray$4(templates)) {
	      this._logError('templates must be []');
	    } else {
	      templates.forEach(this.add, this);
	    }

	    return this;
	  };

	  /**
	   * Add the given element template, if it is valid.
	   *
	   * @param {TemplateDescriptor} template
	   *
	   * @return {Validator} self
	   */
	  this.add = function(template) {

	    var err = this._validateTemplate(template);

	    var id, version;

	    if (!err) {
	      id = template.id;
	      version = template.version || '_';

	      if (!this._templatesById[ id ]) {
	        this._templatesById[ id ] = {};
	      }

	      this._templatesById[ id ][ version ] = template;

	      this._validTemplates.push(template);
	    }

	    return this;
	  };

	  /**
	   * Validate given template and return error (if any).
	   *
	   * @param {TemplateDescriptor} template
	   *
	   * @return {Error} validation error, if any
	   */
	  this._validateTemplate = function(template) {

	    var err,
	        id = template.id,
	        version = template.version || '_',
	        name = template.name,
	        appliesTo = template.appliesTo,
	        properties = template.properties,
	        scopes = template.scopes,
	        schemaVersion = template.$schema && getSchemaVersion(template.$schema);

	    if (!id) {
	      return this._logError('missing template id', template);
	    }

	    if (!name) {
	      return this._logError('missing template name', template);
	    }

	    if (schemaVersion &&
	       (semver.compare(SUPPORTED_SCHEMA_VERSION, schemaVersion) < 0)) {
	      return this._logError('unsupported element template schema version <' + schemaVersion +
	         '>. Your installation only supports up to version <' + SUPPORTED_SCHEMA_VERSION +
	         '>. Please update your installation', template);
	    }

	    if (this._templatesById[ id ] && this._templatesById[ id ][ version ]) {
	      if (version === '_') {
	        return this._logError('template id <' + id + '> already used', template);
	      } else {
	        return this._logError('template id <' + id + '> and version <' + version + '> already used', template);
	      }
	    }

	    if (!isArray$4(appliesTo)) {
	      err = this._logError('missing appliesTo=[]', template);
	    }

	    if (!isArray$4(properties)) {
	      err = this._logError('missing properties=[]', template);
	    } else {
	      if (!this._validateProperties(template, properties)) {
	        err = new Error('invalid properties');
	      }
	    }

	    if (scopes) {
	      err = this._validateScopes(template, scopes);
	    }

	    return err;
	  };

	  /**
	   * Validate given scopes and return error (if any).
	   *
	   * @param {TemplateDescriptor} template
	   * @param {ScopesDescriptor|Array<TemplateDescriptor>} scopes
	   *
	   * @return {Error} validation error, if any
	   */
	  this._validateScopes = function(template, scopes) {

	    var err,
	        scopeType;

	    var self = this;

	    // handle legacy scope descriptor
	    if (!isArray$4(scopes)) {

	      if (!isObject$3(scopes)) {
	        return this._logError('invalid scopes, should be scopes={} or scopes=[]', template);
	      }

	      // only support <camunda:Connector> for legacy scopes
	      keys$4(scopes).forEach(function(scope) {
	        if (scope !== CAMUNDA_CONNECTOR) {
	          err = self._logError('invalid scope <' + scope + '>, object descriptor is only supported for <' + CAMUNDA_CONNECTOR + '>', template);
	        }
	      });
	    }

	    handleLegacyScopes(scopes).forEach(function(scope) {
	      scopeType = scope.type;

	      if (!isObject$3(scope) || isArray$4(scope)) {
	        err = self._logError('invalid scope, should be scope={}', template);
	      }

	      if (!scopeType) {
	        err = self._logError('invalid scope, missing type', template);
	      }

	      if (!isArray$4(scope.properties)) {
	        err = self._logError(
	          'missing properties=[] in scope <' + scopeType + '>', template
	        );
	      } else {
	        if (!self._validateProperties(template, scope.properties)) {
	          err = new Error('invalid properties in scope <' + scopeType + '>');
	        }
	      }
	    });

	    return err;
	  };

	  /**
	   * Validate properties and return false if any is invalid.
	   *
	   * @param {TemplateDescriptor} template
	   * @param {Array<PropertyDescriptor>} properties
	   *
	   * @return {Boolean} true if all properties are valid
	   */
	  this._validateProperties = function(template, properties) {
	    var validProperties = properties.filter(function(ele) { return this._validateProperty(template, ele); }, this);

	    return properties.length === validProperties.length;
	  };

	  /**
	   * Validate property and return false, if there was
	   * a validation error.
	   *
	   * @param {TemplateDescriptor} template
	   * @param {PropertyDescriptor} property
	   *
	   * @return {Boolean} true if property is valid
	   */
	  this._validateProperty = function(template, property) {

	    var type = property.type,
	        binding = property.binding;

	    var err;

	    var bindingType = binding.type;

	    if (type && VALID_TYPES.indexOf(type) === -1) {
	      err = this._logError(
	        'invalid property type <' + type + '>; ' +
	        'must be any of { ' + VALID_TYPES.join(', ') + ' }',
	        template
	      );
	    }

	    if (type === DROPDOWN_TYPE && bindingType !== CAMUNDA_EXECUTION_LISTENER) {
	      if (!isArray$4(property.choices)) {
	        err = this._logError(
	          'must provide choices=[] with ' + DROPDOWN_TYPE + ' type',
	          template
	        );
	      } else

	      if (!property.choices.every(isDropdownChoiceValid)) {
	        err = this._logError(
	          '{ name, value } must be specified for ' +
	          DROPDOWN_TYPE + ' choices',
	          template
	        );
	      }
	    }

	    if (!binding) {
	      return this._logError('property missing binding', template);
	    }

	    if (VALID_BINDING_TYPES.indexOf(bindingType) === -1) {
	      err = this._logError(
	        'invalid property.binding type <' + bindingType + '>; ' +
	        'must be any of { ' + VALID_BINDING_TYPES.join(', ') + ' }',
	        template
	      );
	    }

	    if (bindingType === PROPERTY_TYPE ||
	        bindingType === CAMUNDA_PROPERTY_TYPE ||
	        bindingType === CAMUNDA_INPUT_PARAMETER_TYPE ||
	        bindingType === CAMUNDA_FIELD) {

	      if (!binding.name) {
	        err = this._logError(
	          'property.binding <' + bindingType + '> requires name',
	          template
	        );
	      }
	    }

	    if (bindingType === CAMUNDA_OUTPUT_PARAMETER_TYPE) {
	      if (!binding.source) {
	        err = this._logError(
	          'property.binding <' + bindingType + '> requires source',
	          template
	        );
	      }
	    }

	    if (bindingType === CAMUNDA_IN_TYPE) {

	      if (!binding.variables && !binding.target) {
	        err = this._logError(
	          'property.binding <' + bindingType + '> requires ' +
	          'variables or target',
	          template
	        );
	      }
	    }

	    if (bindingType === CAMUNDA_OUT_TYPE) {

	      if (!binding.variables && !binding.source && !binding.sourceExpression) {
	        err = this._logError(
	          'property.binding <' + bindingType + '> requires ' +
	          'variables, sourceExpression or source',
	          template
	        );
	      }
	    }

	    if (bindingType === CAMUNDA_EXECUTION_LISTENER) {

	      if (type && type !== 'Hidden') {
	        err = this._logError(
	          'invalid property type <' + type + '> for ' + CAMUNDA_EXECUTION_LISTENER + '; ' +
	          'must be <Hidden>',
	          template
	        );
	      }
	    }

	    return !err;
	  };

	  /**
	   * Log an error for the given template
	   *
	   * @param {(String|Error)} err
	   * @param {TemplateDescriptor} template
	   *
	   * @return {Error} logged validation errors
	   */
	  this._logError = function(err, template) {

	    if (typeof err === 'string') {

	      if (template) {
	        err = 'template(id: <' + template.id + '>, name: <' + template.name + '>): ' + err;
	      }

	      err = new Error(err);
	    }

	    this._errors.push(err);

	    return err;
	  };

	  this.getErrors = function() {
	    return this._errors;
	  };

	  this.getValidTemplates = function() {
	    return this._validTemplates;
	  };
	}

	var Validator_1 = Validator;


	// helpers ///////////////////////////////////

	function isDropdownChoiceValid(c) {
	  return 'name' in c && 'value' in c;
	}

	/**
	 * Extract schema version from schema URI
	 *
	 * @param {String} schemaUri - for example https://unpkg.com/@camunda/element-templates-json-schema@99.99.99/resources/schema.json
	 *
	 * @return {String} for example '99.99.99'
	 */
	function getSchemaVersion(schemaUri) {
	  var re = /\d+\.\d+\.\d+/g;

	  var match = schemaUri.match(re);

	  return match === null ? undefined : match[0];
	}

	/**
	 * The guy responsible for template loading.
	 *
	 * Provide the actual templates via the `config.elementTemplates`.
	 *
	 * That configuration can either be an array of template
	 * descriptors or a node style callback to retrieve
	 * the templates asynchronously.
	 *
	 * @param {Array<TemplateDescriptor>|Function} loadTemplates
	 * @param {EventBus} eventBus
	 * @param {ElementTemplates} elementTemplates
	 */
	function ElementTemplatesLoader(loadTemplates, eventBus, elementTemplates) {
	  this._loadTemplates = loadTemplates;
	  this._eventBus = eventBus;
	  this._elementTemplates = elementTemplates;

	  var self = this;

	  eventBus.on('diagram.init', function() {
	    self.reload();
	  });
	}

	var ElementTemplatesLoader_1 = ElementTemplatesLoader;

	ElementTemplatesLoader.$inject = [
	  'config.elementTemplates',
	  'eventBus',
	  'elementTemplates'
	];


	ElementTemplatesLoader.prototype.reload = function() {

	  var self = this;

	  var loadTemplates = this._loadTemplates;

	  // no templates specified
	  if (typeof loadTemplates === 'undefined') {
	    return;
	  }

	  // template loader function specified
	  if (typeof loadTemplates === 'function') {

	    return loadTemplates(function(err, templates) {

	      if (err) {
	        return self.templateErrors([ err ]);
	      }

	      self.setTemplates(templates);
	    });
	  }

	  // templates array specified
	  if (loadTemplates.length) {
	    return this.setTemplates(loadTemplates);
	  }

	};

	ElementTemplatesLoader.prototype.setTemplates = function(templates) {

	  var elementTemplates = this._elementTemplates;

	  var validator = new Validator_1().addAll(templates);

	  var errors = validator.getErrors(),
	      validTemplates = validator.getValidTemplates();

	  elementTemplates.set(validTemplates);

	  if (errors.length) {
	    this.templateErrors(errors);
	  }

	  this.templatesChanged();
	};

	ElementTemplatesLoader.prototype.templatesChanged = function() {
	  this._eventBus.fire('elementTemplates.changed');
	};

	ElementTemplatesLoader.prototype.templateErrors = function(errors) {
	  this._eventBus.fire('elementTemplates.errors', {
	    errors: errors
	  });
	};

	var is$j = require$$0$1.is;

	/**
	 * This function catches the <moddleCopy.canCopyProperty> event
	 * and only allows the copy of the modelerTemplate property
	 * if the element's type or its parent's is in
	 * the list of elements the template applies to.
	 */
	function ReplaceBehavior(elementTemplates, eventBus) {
	  eventBus.on('moddleCopy.canCopyProperty', function(context) {
	    var parent = context.parent;
	    var property = context.property;
	    var propertyName = context.propertyName;

	    if (propertyName !== 'modelerTemplate') {
	      return;
	    }

	    var elementTemplate = elementTemplates.get(property);

	    if (!elementTemplate) {
	      return false;
	    }

	    var appliesTo = elementTemplate.appliesTo;

	    var allowed = appliesTo.reduce(function(allowed, type) {
	      return allowed || is$j(parent, type);
	    }, false);

	    if (!allowed) {
	      return false;
	    }
	  });
	}

	ReplaceBehavior.$inject = ['elementTemplates', 'eventBus'];

	var ReplaceBehavior_1 = ReplaceBehavior;

	var elementTemplates = {
	  __depends__: [
	    cmd$1,
	    require$$1$1.default
	  ],
	  __init__: [
	    'customElementsPropertiesActivator',
	    'elementTemplatesLoader',
	    'replaceBehavior'
	  ],
	  customElementsPropertiesActivator: [ 'type', CustomElementsPropertiesActivator_1 ],
	  elementTemplates: [ 'type', ElementTemplates_1 ],
	  elementTemplatesLoader: [ 'type', ElementTemplatesLoader_1 ],
	  replaceBehavior: [ 'type', ReplaceBehavior_1 ],
	};

	var is$k = require$$0$1.is;

	var ExtensionElementsHelper = {};

	var getExtensionElements$1 = function(bo) {
	  return bo.get('extensionElements');
	};

	ExtensionElementsHelper.getExtensionElements = function(bo, type) {
	  var extensionElements = getExtensionElements$1(bo);
	  if (typeof extensionElements !== 'undefined') {
	    var extensionValues = extensionElements.get('values');
	    if (typeof extensionValues !== 'undefined') {
	      var elements = extensionValues.filter(function(value) {
	        return is$k(value, type);
	      });
	      if (elements.length) {
	        return elements;
	      }
	    }
	  }
	};

	ExtensionElementsHelper.addEntry = function(bo, element, entry, bpmnFactory) {
	  var extensionElements = bo.get('extensionElements');

	  // if there is no extensionElements list, create one
	  if (!extensionElements) {

	    // TODO: Ask Daniel which operation costs more
	    extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', { values: [entry] }, bo, bpmnFactory);
	    return { extensionElements : extensionElements };
	  } else {

	    // add new failedJobRetryExtensionElement to existing extensionElements list
	    return CmdHelper_1.addElementsTolist(element, extensionElements, 'values', [entry]);
	  }
	};

	ExtensionElementsHelper.removeEntry = function(bo, element, entry) {
	  var extensionElements = bo.get('extensionElements');

	  if (!extensionElements) {

	    // return an empty command when there is no extensionElements list
	    return {};
	  }

	  return CmdHelper_1.removeElementsFromList(element, extensionElements, 'values', 'extensionElements', [entry]);
	};

	var ExtensionElementsHelper_1 = ExtensionElementsHelper;

	/**
	 * Returns true if the attribute 'camunda:asyncBefore' is set
	 * to true.
	 *
	 * @param  {ModdleElement} bo
	 *
	 * @return {boolean} a boolean value
	 */
	function isAsyncBefore(bo) {
	  return !!(bo.get('camunda:asyncBefore') || bo.get('camunda:async'));
	}

	var isAsyncBefore_1 = isAsyncBefore;

	/**
	 * Returns true if the attribute 'camunda:asyncAfter' is set
	 * to true.
	 *
	 * @param  {ModdleElement} bo
	 *
	 * @return {boolean} a boolean value
	 */
	function isAsyncAfter(bo) {
	  return !!bo.get('camunda:asyncAfter');
	}

	var isAsyncAfter_1 = isAsyncAfter;

	/**
	 * Returns true if the attribute 'camunda:exclusive' is set
	 * to true.
	 *
	 * @param  {ModdleElement} bo
	 *
	 * @return {boolean} a boolean value
	 */
	function isExclusive(bo) {
	  return !!bo.get('camunda:exclusive');
	}

	var isExclusive_1 = isExclusive;

	/**
	 * Get first 'camunda:FailedJobRetryTimeCycle' from the business object.
	 *
	 * @param  {ModdleElement} bo
	 *
	 * @return {Array<ModdleElement>} a list of 'camunda:FailedJobRetryTimeCycle'
	 */
	function getFailedJobRetryTimeCycle(bo) {
	  return (ExtensionElementsHelper_1.getExtensionElements(bo, 'camunda:FailedJobRetryTimeCycle') || [])[0];
	}

	var getFailedJobRetryTimeCycle_1 = getFailedJobRetryTimeCycle;

	/**
	 * Removes all existing 'camunda:FailedJobRetryTimeCycle' from the business object
	 *
	 * @param  {ModdleElement} bo
	 *
	 * @return {Array<ModdleElement>} a list of 'camunda:FailedJobRetryTimeCycle'
	 */
	function removeFailedJobRetryTimeCycle(bo, element) {
	  var retryTimeCycles = ExtensionElementsHelper_1.getExtensionElements(bo, 'camunda:FailedJobRetryTimeCycle');
	  return map_1(retryTimeCycles, function(cycle) {
	    return ExtensionElementsHelper_1.removeEntry(bo, element, cycle);
	  });
	}

	var removeFailedJobRetryTimeCycle_1 = removeFailedJobRetryTimeCycle;

	var AsyncCapableHelper = {
		isAsyncBefore: isAsyncBefore_1,
		isAsyncAfter: isAsyncAfter_1,
		isExclusive: isExclusive_1,
		getFailedJobRetryTimeCycle: getFailedJobRetryTimeCycle_1,
		removeFailedJobRetryTimeCycle: removeFailedJobRetryTimeCycle_1
	};

	var is$l = require$$0$1.is,
	    getBusinessObject$j = require$$0$1.getBusinessObject;




	var ImplementationTypeHelper = {};

	var ImplementationTypeHelper_1 = ImplementationTypeHelper;

	/**
	 * Returns 'true' if the given element is 'camunda:ServiceTaskLike'
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {boolean} a boolean value
	 */
	ImplementationTypeHelper.isServiceTaskLike = function(element) {
	  return is$l(element, 'camunda:ServiceTaskLike');
	};

	/**
	 * Returns 'true' if the given element is 'camunda:DmnCapable'
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {boolean} a boolean value
	 */
	ImplementationTypeHelper.isDmnCapable = function(element) {
	  return is$l(element, 'camunda:DmnCapable');
	};

	/**
	 * Returns 'true' if the given element is 'camunda:ExternalCapable'
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {boolean} a boolean value
	 */
	ImplementationTypeHelper.isExternalCapable = function(element) {
	  return is$l(element, 'camunda:ExternalCapable');
	};

	/**
	 * Returns 'true' if the given element is 'camunda:TaskListener'
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {boolean} a boolean value
	 */
	ImplementationTypeHelper.isTaskListener = function(element) {
	  return is$l(element, 'camunda:TaskListener');
	};

	/**
	 * Returns 'true' if the given element is 'camunda:ExecutionListener'
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {boolean} a boolean value
	 */
	ImplementationTypeHelper.isExecutionListener = function(element) {
	  return is$l(element, 'camunda:ExecutionListener');
	};

	/**
	 * Returns 'true' if the given element is 'camunda:ExecutionListener' or
	 * 'camunda:TaskListener'
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {boolean} a boolean value
	 */
	ImplementationTypeHelper.isListener = function(element) {
	  return this.isTaskListener(element) || this.isExecutionListener(element);
	};

	/**
	 * Returns 'true' if the given element is 'bpmn:SequenceFlow'
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {boolean} a boolean value
	 */
	ImplementationTypeHelper.isSequenceFlow = function(element) {
	  return is$l(element, 'bpmn:SequenceFlow');
	};

	/**
	 * Get a 'camunda:ServiceTaskLike' business object.
	 *
	 * If the given element is not a 'camunda:ServiceTaskLike', then 'false'
	 * is returned.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {ModdleElement} the 'camunda:ServiceTaskLike' business object
	 */
	ImplementationTypeHelper.getServiceTaskLikeBusinessObject = function(element) {

	  if (is$l(element, 'bpmn:IntermediateThrowEvent') || is$l(element, 'bpmn:EndEvent')) {

	    // change business object to 'messageEventDefinition' when
	    // the element is a message intermediate throw event or message end event
	    // because the camunda extensions (e.g. camunda:class) are in the message
	    // event definition tag and not in the intermediate throw event or end event tag
	    var messageEventDefinition = EventDefinitionHelper_1.getMessageEventDefinition(element);
	    if (messageEventDefinition) {
	      element = messageEventDefinition;
	    }
	  }

	  return this.isServiceTaskLike(element) && getBusinessObject$j(element);

	};

	/**
	 * Returns the implementation type of the given element.
	 *
	 * Possible implementation types are:
	 * - dmn
	 * - connector
	 * - external
	 * - class
	 * - expression
	 * - delegateExpression
	 * - script
	 * - or undefined, when no matching implementation type is found
	 *
	 * @param  {djs.model.Base} element
	 *
	 * @return {String} the implementation type
	 */
	ImplementationTypeHelper.getImplementationType = function(element) {

	  var bo = this.getServiceTaskLikeBusinessObject(element);

	  if (!bo) {
	    if (this.isListener(element)) {
	      bo = element;
	    } else {
	      return;
	    }
	  }

	  if (this.isDmnCapable(bo)) {
	    var decisionRef = bo.get('camunda:decisionRef');
	    if (typeof decisionRef !== 'undefined') {
	      return 'dmn';
	    }
	  }

	  if (this.isServiceTaskLike(bo)) {
	    var connectors = ExtensionElementsHelper_1.getExtensionElements(bo, 'camunda:Connector');
	    if (typeof connectors !== 'undefined') {
	      return 'connector';
	    }
	  }

	  if (this.isExternalCapable(bo)) {
	    var type = bo.get('camunda:type');
	    if (type === 'external') {
	      return 'external';
	    }
	  }

	  var cls = bo.get('camunda:class');
	  if (typeof cls !== 'undefined') {
	    return 'class';
	  }

	  var expression = bo.get('camunda:expression');
	  if (typeof expression !== 'undefined') {
	    return 'expression';
	  }

	  var delegateExpression = bo.get('camunda:delegateExpression');
	  if (typeof delegateExpression !== 'undefined') {
	    return 'delegateExpression';
	  }

	  if (this.isListener(bo)) {
	    var script = bo.get('script');
	    if (typeof script !== 'undefined') {
	      return 'script';
	    }
	  }

	};

	var is$m = require$$0$1.is,
	    getBusinessObject$k = require$$0$1.getBusinessObject;



	var InputOutputHelper = {};

	var InputOutputHelper_1 = InputOutputHelper;

	function getElements(bo, type, prop) {
	  var elems = ExtensionElementsHelper_1.getExtensionElements(bo, type) || [];
	  return !prop ? elems : (elems[0] || {})[prop] || [];
	}

	function getParameters(element, prop, insideConnector) {
	  var inputOutput = InputOutputHelper.getInputOutput(element, insideConnector);
	  return (inputOutput && inputOutput.get(prop)) || [];
	}

	/**
	 * Get a inputOutput from the business object
	 *
	 * @param {djs.model.Base} element
	 * @param  {boolean} insideConnector
	 *
	 * @return {ModdleElement} the inputOutput object
	 */
	InputOutputHelper.getInputOutput = function(element, insideConnector) {
	  if (!insideConnector) {
	    var bo = getBusinessObject$k(element);
	    return (getElements(bo, 'camunda:InputOutput') || [])[0];
	  }
	  var connector = this.getConnector(element);
	  return connector && connector.get('inputOutput');
	};

	/**
	 * Get a connector from the business object
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {ModdleElement} the connector object
	 */
	InputOutputHelper.getConnector = function(element) {
	  var bo = ImplementationTypeHelper_1.getServiceTaskLikeBusinessObject(element);
	  return bo && (getElements(bo, 'camunda:Connector') || [])[0];
	};

	/**
	 * Return all input parameters existing in the business object, and
	 * an empty array if none exist.
	 *
	 * @param  {djs.model.Base} element
	 * @param  {boolean} insideConnector
	 *
	 * @return {Array} a list of input parameter objects
	 */
	InputOutputHelper.getInputParameters = function(element, insideConnector) {
	  return getParameters.apply(this, [ element, 'inputParameters', insideConnector ]);
	};

	/**
	 * Return all output parameters existing in the business object, and
	 * an empty array if none exist.
	 *
	 * @param  {djs.model.Base} element
	 * @param  {boolean} insideConnector
	 *
	 * @return {Array} a list of output parameter objects
	 */
	InputOutputHelper.getOutputParameters = function(element, insideConnector) {
	  return getParameters.apply(this, [ element, 'outputParameters', insideConnector ]);
	};

	/**
	 * Get a input parameter from the business object at given index
	 *
	 * @param {djs.model.Base} element
	 * @param  {boolean} insideConnector
	 * @param {number} idx
	 *
	 * @return {ModdleElement} input parameter
	 */
	InputOutputHelper.getInputParameter = function(element, insideConnector, idx) {
	  return this.getInputParameters(element, insideConnector)[idx];
	};

	/**
	 * Get a output parameter from the business object at given index
	 *
	 * @param {djs.model.Base} element
	 * @param  {boolean} insideConnector
	 * @param {number} idx
	 *
	 * @return {ModdleElement} output parameter
	 */
	InputOutputHelper.getOutputParameter = function(element, insideConnector, idx) {
	  return this.getOutputParameters(element, insideConnector)[idx];
	};

	/**
	 * Returns 'true' if the given element supports inputOutput
	 *
	 * @param {djs.model.Base} element
	 * @param  {boolean} insideConnector
	 *
	 * @return {boolean} a boolean value
	 */
	InputOutputHelper.isInputOutputSupported = function(element, insideConnector) {

	  if (insideConnector) {
	    return true;
	  }

	  var bo = getBusinessObject$k(element);

	  return (
	    is$m(bo, 'bpmn:FlowNode') && !(
	      is$m(bo, 'bpmn:StartEvent') ||
	      is$m(bo, 'bpmn:Gateway') ||
	      is$m(bo, 'bpmn:BoundaryEvent') ||
	      (
	        is$m(bo, 'bpmn:SubProcess') && bo.get('triggeredByEvent')
	      )
	    )
	  );
	};

	/**
	 * Returns 'true' if the given element supports output parameters
	 *
	 * @param {djs.model.Base} element
	 * @param  {boolean} insideConnector
	 *
	 * @return {boolean} a boolean value
	 */
	InputOutputHelper.areOutputParametersSupported = function(element, insideConnector) {
	  var bo = getBusinessObject$k(element);
	  return insideConnector || (!is$m(bo, 'bpmn:EndEvent') && !bo.loopCharacteristics);
	};

	var DEFAULT_DELEGATE_PROPS = [ 'class', 'expression', 'delegateExpression' ];

	var DELEGATE_PROPS = {
	  'camunda:class': undefined,
	  'camunda:expression': undefined,
	  'camunda:delegateExpression': undefined,
	  'camunda:resultVariable': undefined
	};

	var DMN_CAPABLE_PROPS = {
	  'camunda:decisionRef': undefined,
	  'camunda:decisionRefBinding': 'latest',
	  'camunda:decisionRefVersion': undefined,
	  'camunda:mapDecisionResult': 'resultList',
	  'camunda:decisionRefTenantId': undefined
	};


	var EXTERNAL_CAPABLE_PROPS = {
	  'camunda:type': undefined,
	  'camunda:topic': undefined
	};

	var ImplementationType = function(element, bpmnFactory, options, translate) {

	  var DEFAULT_OPTIONS = [
	    { value: 'class', name: translate('Java Class') },
	    { value: 'expression', name: translate('Expression') },
	    { value: 'delegateExpression', name: translate('Delegate Expression') }
	  ];

	  var DMN_OPTION = [
	    { value: 'dmn', name: translate('DMN') }
	  ];

	  var EXTERNAL_OPTION = [
	    { value: 'external', name: translate('External') }
	  ];

	  var CONNECTOR_OPTION = [
	    { value: 'connector', name: translate('Connector') }
	  ];

	  var SCRIPT_OPTION = [
	    { value: 'script', name: translate('Script') }
	  ];

	  var getType = options.getImplementationType,
	      getBusinessObject = options.getBusinessObject;

	  var hasDmnSupport = options.hasDmnSupport,
	      hasExternalSupport = options.hasExternalSupport,
	      hasServiceTaskLikeSupport = options.hasServiceTaskLikeSupport,
	      hasScriptSupport = options.hasScriptSupport;

	  var entries = [];

	  var selectOptions = DEFAULT_OPTIONS.concat([]);

	  if (hasDmnSupport) {
	    selectOptions = selectOptions.concat(DMN_OPTION);
	  }

	  if (hasExternalSupport) {
	    selectOptions = selectOptions.concat(EXTERNAL_OPTION);
	  }

	  if (hasServiceTaskLikeSupport) {
	    selectOptions = selectOptions.concat(CONNECTOR_OPTION);
	  }

	  if (hasScriptSupport) {
	    selectOptions = selectOptions.concat(SCRIPT_OPTION);
	  }

	  selectOptions.push({ value: '' });

	  entries.push(EntryFactory_1.selectBox(translate, {
	    id : 'implementation',
	    label: translate('Implementation'),
	    selectOptions: selectOptions,
	    modelProperty: 'implType',

	    get: function(element, node) {
	      return {
	        implType: getType(element) || ''
	      };
	    },

	    set: function(element, values, node) {
	      var bo = getBusinessObject(element);
	      var oldType = getType(element);
	      var newType = values.implType;

	      var props = assign_1({}, DELEGATE_PROPS);

	      if (DEFAULT_DELEGATE_PROPS.indexOf(newType) !== -1) {

	        var newValue = '';
	        if (DEFAULT_DELEGATE_PROPS.indexOf(oldType) !== -1) {
	          newValue = bo.get('camunda:' + oldType);
	        }
	        props['camunda:' + newType] = newValue;
	      }

	      if (hasDmnSupport) {
	        props = assign_1(props, DMN_CAPABLE_PROPS);
	        if (newType === 'dmn') {
	          props['camunda:decisionRef'] = '';
	        }
	      }

	      if (hasExternalSupport) {
	        props = assign_1(props, EXTERNAL_CAPABLE_PROPS);
	        if (newType === 'external') {
	          props['camunda:type'] = 'external';
	          props['camunda:topic'] = '';
	        }
	      }

	      if (hasScriptSupport) {
	        props['camunda:script'] = undefined;

	        if (newType === 'script') {
	          props['camunda:script'] = ElementHelper_1.createElement('camunda:Script', {}, bo, bpmnFactory);
	        }
	      }

	      var commands = [];
	      commands.push(CmdHelper_1.updateBusinessObject(element, bo, props));

	      if (hasServiceTaskLikeSupport) {
	        var connectors = ExtensionElementsHelper_1.getExtensionElements(bo, 'camunda:Connector');
	        commands.push(map_1(connectors, function(connector) {
	          return ExtensionElementsHelper_1.removeEntry(bo, element, connector);
	        }));

	        if (newType === 'connector') {
	          var extensionElements = bo.get('extensionElements');
	          if (!extensionElements) {
	            extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', { values: [] }, bo, bpmnFactory);
	            commands.push(CmdHelper_1.updateBusinessObject(element, bo, { extensionElements: extensionElements }));
	          }
	          var connector = ElementHelper_1.createElement('camunda:Connector', {}, extensionElements, bpmnFactory);
	          commands.push(CmdHelper_1.addAndRemoveElementsFromList(
	            element,
	            extensionElements,
	            'values',
	            'extensionElements',
	            [ connector ],
	            []
	          ));
	        }
	      }

	      return commands;

	    }
	  }));

	  return entries;

	};

	var DELEGATE_TYPES = [
	  'class',
	  'expression',
	  'delegateExpression'
	];

	var PROPERTIES = {
	  class: 'camunda:class',
	  expression: 'camunda:expression',
	  delegateExpression: 'camunda:delegateExpression'
	};

	function isDelegate(type) {
	  return DELEGATE_TYPES.indexOf(type) !== -1;
	}

	function getAttribute$1(type) {
	  return PROPERTIES[type];
	}


	var Delegate = function(element, bpmnFactory, options, translate) {

	  var getImplementationType = options.getImplementationType,
	      getBusinessObject = options.getBusinessObject;

	  function getDelegationLabel(type) {
	    switch (type) {
	    case 'class':
	      return translate('Java Class');
	    case 'expression':
	      return translate('Expression');
	    case 'delegateExpression':
	      return translate('Delegate Expression');
	    default:
	      return '';
	    }
	  }

	  var delegateEntry = EntryFactory_1.textField(translate, {
	    id: 'delegate',
	    label: translate('Value'),
	    dataValueLabel: 'delegationLabel',
	    modelProperty: 'delegate',

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      var type = getImplementationType(element);
	      var attr = getAttribute$1(type);
	      var label = getDelegationLabel(type);
	      return {
	        delegate: bo.get(attr),
	        delegationLabel: label
	      };
	    },

	    set: function(element, values, node) {
	      var bo = getBusinessObject(element);
	      var type = getImplementationType(element);
	      var attr = getAttribute$1(type);
	      var prop = {};
	      prop[attr] = values.delegate || '';
	      return CmdHelper_1.updateBusinessObject(element, bo, prop);
	    },

	    validate: function(element, values, node) {
	      return isDelegate(getImplementationType(element)) && !values.delegate ? { delegate: translate('Must provide a value') } : {};
	    },

	    hidden: function(element, node) {
	      return !isDelegate(getImplementationType(element));
	    }

	  });

	  return [ delegateEntry ];

	};

	var External = function(element, bpmnFactory, options, translate) {

	  var getImplementationType = options.getImplementationType,
	      getBusinessObject = options.getBusinessObject;

	  function isExternal(element) {
	    return getImplementationType(element) === 'external';
	  }

	  var topicEntry = EntryFactory_1.textField(translate, {
	    id: 'externalTopic',
	    label: translate('Topic'),
	    modelProperty: 'externalTopic',

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      return { externalTopic: bo.get('camunda:topic') };
	    },

	    set: function(element, values, node) {
	      var bo = getBusinessObject(element);
	      return CmdHelper_1.updateBusinessObject(element, bo, {
	        'camunda:topic': values.externalTopic
	      });
	    },

	    validate: function(element, values, node) {
	      return isExternal(element) && !values.externalTopic ? { externalTopic: translate('Must provide a value') } : {};
	    },

	    hidden: function(element, node) {
	      return !isExternal(element);
	    }

	  });

	  return [ topicEntry ];

	};

	var is$n = require$$0$1.is;





	var ResultVariable = function(element, bpmnFactory, options, translate) {

	  var getBusinessObject = options.getBusinessObject,
	      hideResultVariable = options.hideResultVariable,
	      id = options.id || 'resultVariable';


	  var resultVariableEntry = EntryFactory_1.textField(translate, {
	    id: id,
	    label: translate('Result Variable'),
	    modelProperty: 'resultVariable',

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      return { resultVariable: bo.get('camunda:resultVariable') };
	    },

	    set: function(element, values, node) {
	      var bo = getBusinessObject(element);

	      var resultVariable = values.resultVariable || undefined;

	      var props = {
	        'camunda:resultVariable': resultVariable
	      };

	      if (is$n(bo, 'camunda:DmnCapable') && !resultVariable) {
	        props = assign_1({ 'camunda:mapDecisionResult': 'resultList' }, props);
	      }

	      return CmdHelper_1.updateBusinessObject(element, bo, props);
	    },

	    hidden: function(element, node) {
	      if (typeof hideResultVariable === 'function') {
	        return hideResultVariable.apply(resultVariableEntry, arguments);
	      }
	    }

	  });

	  return [ resultVariableEntry ];

	};

	var getBusinessObject$l = require$$0$1.getBusinessObject;
	var is$o = require$$0$1.is;



	var attributeInfo = {
	  bpmn: {
	    element: 'calledElement',
	    binding: 'camunda:calledElementBinding',
	    version: 'camunda:calledElementVersion',
	    versionTag: 'camunda:calledElementVersionTag',
	    tenantId: 'camunda:calledElementTenantId'
	  },

	  cmmn: {
	    element: 'camunda:caseRef',
	    binding: 'camunda:caseBinding',
	    version: 'camunda:caseVersion',
	    tenantId: 'camunda:caseTenantId'
	  },

	  dmn: {
	    element: 'camunda:decisionRef',
	    binding: 'camunda:decisionRefBinding',
	    version: 'camunda:decisionRefVersion',
	    versionTag: 'camunda:decisionRefVersionTag',
	    tenantId: 'camunda:decisionRefTenantId'
	  }
	};

	var mapDecisionResultOptions = [
	  {
	    name: 'singleEntry (TypedValue)',
	    value: 'singleEntry'
	  },
	  {
	    name:'singleResult (Map<String, Object>)',
	    value:'singleResult'
	  },
	  {
	    name:'collectEntries (List<Object>)',
	    value:'collectEntries'
	  },
	  {
	    name:'resultList (List<Map<String, Object>>)',
	    value:'resultList'
	  }
	];

	var delegateVariableMappingOptions = [
	  {
	    name: 'variableMappingClass',
	    value: 'variableMappingClass'
	  },
	  {
	    name: 'variableMappingDelegateExpression',
	    value: 'variableMappingDelegateExpression'
	  }
	];

	function getCamundaInWithBusinessKey(element) {
	  var camundaIn = [],
	      bo = getBusinessObject$l(element);

	  var camundaInParams = ExtensionElementsHelper_1.getExtensionElements(bo, 'camunda:In');
	  if (camundaInParams) {
	    forEach_1(camundaInParams, function(param) {
	      if (param.businessKey !== undefined) {
	        camundaIn.push(param);
	      }
	    });
	  }
	  return camundaIn;
	}

	function setBusinessKey(element, text, bpmnFactory) {
	  var commands = [];

	  var camundaInWithBusinessKey = getCamundaInWithBusinessKey(element);

	  if (camundaInWithBusinessKey.length) {
	    commands.push(CmdHelper_1.updateBusinessObject(element, camundaInWithBusinessKey[0], {
	      businessKey: text
	    }));
	  } else {
	    var bo = getBusinessObject$l(element),
	        extensionElements = bo.extensionElements;

	    if (!extensionElements) {
	      extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', { values: [] }, bo, bpmnFactory);
	      commands.push(CmdHelper_1.updateProperties(element, { extensionElements: extensionElements }));
	    }

	    var camundaIn = ElementHelper_1.createElement(
	      'camunda:In',
	      { 'businessKey': text },
	      extensionElements,
	      bpmnFactory
	    );

	    commands.push(CmdHelper_1.addAndRemoveElementsFromList(
	      element,
	      extensionElements,
	      'values',
	      'extensionElements',
	      [ camundaIn ],[]
	    ));
	  }

	  return commands;
	}

	function deleteBusinessKey(element) {
	  var camundaInExtensions = getCamundaInWithBusinessKey(element);
	  var commands = [];
	  forEach_1(camundaInExtensions, function(elem) {
	    commands.push(ExtensionElementsHelper_1.removeEntry(getBusinessObject$l(element), element, elem));
	  });
	  return commands;
	}

	function isSupportedCallableType(type) {
	  return [ 'bpmn', 'cmmn', 'dmn' ].indexOf(type) !== -1;
	}

	var Callable = function(element, bpmnFactory, options, translate) {

	  var bindingOptions = [
	    {
	      name: translate('latest'),
	      value: 'latest'
	    },
	    {
	      name: translate('deployment'),
	      value: 'deployment'
	    },
	    {
	      name: translate('version'),
	      value: 'version'
	    },
	    {
	      name: translate('versionTag'),
	      value: 'versionTag'
	    }
	  ];

	  var getCallableType = options.getCallableType;

	  var entries = [];

	  function getAttribute(element, prop) {
	    var type = getCallableType(element);
	    return (attributeInfo[type] || {})[prop];
	  }

	  function getCallActivityBindingValue(element) {
	    var type = getCallableType(element);
	    var bo = getBusinessObject$l(element);
	    var attr = (attributeInfo[type] || {}).binding;
	    return bo.get(attr);
	  }

	  function getDelegateVariableMappingType(element) {
	    var bo = getBusinessObject$l(element);

	    var boVariableMappingClass = bo.get('camunda:variableMappingClass'),
	        boVariableMappingDelegateExpression = bo.get('camunda:variableMappingDelegateExpression');

	    var delegateVariableMappingType = '';
	    if (typeof boVariableMappingClass !== 'undefined') {
	      delegateVariableMappingType = 'variableMappingClass';
	    } else

	    if (typeof boVariableMappingDelegateExpression !== 'undefined') {
	      delegateVariableMappingType = 'variableMappingDelegateExpression';
	    }

	    return delegateVariableMappingType;
	  }


	  entries.push(EntryFactory_1.textField(translate, {
	    id: 'callable-element-ref',
	    dataValueLabel: 'callableElementLabel',
	    modelProperty: 'callableElementRef',

	    get: function(element, node) {
	      var callableElementRef;

	      var attr = getAttribute(element, 'element');
	      if (attr) {
	        var bo = getBusinessObject$l(element);
	        callableElementRef = bo.get(attr);
	      }

	      var label = '';
	      var type = getCallableType(element);
	      if (type === 'bpmn') {
	        label = translate('Called Element');
	      }
	      else if (type === 'cmmn') {
	        label = translate('Case Ref');
	      }
	      else if (type === 'dmn') {
	        label = translate('Decision Ref');
	      }

	      return {
	        callableElementRef: callableElementRef,
	        callableElementLabel: label
	      };
	    },

	    set: function(element, values, node) {
	      var newCallableElementRef = values.callableElementRef;
	      var attr = getAttribute(element, 'element');

	      var props = {};
	      props[attr] = newCallableElementRef || '';

	      return CmdHelper_1.updateProperties(element, props);
	    },

	    validate: function(element, values, node) {
	      var elementRef = values.callableElementRef;
	      var type = getCallableType(element);
	      return isSupportedCallableType(type) && !elementRef ? { callableElementRef: translate('Must provide a value') } : {};
	    },

	    hidden: function(element, node) {
	      return !isSupportedCallableType(getCallableType(element));
	    }

	  }));

	  entries.push(EntryFactory_1.selectBox(translate, {
	    id: 'callable-binding',
	    label: translate('Binding'),
	    selectOptions: function(element) {
	      var type = getCallableType(element);
	      var options;

	      if (type === 'cmmn') {
	        options = bindingOptions.filter(function(bindingOption) {
	          return bindingOption.value !== 'versionTag';
	        });
	      } else {
	        options = bindingOptions;
	      }
	      return options;
	    },
	    modelProperty: 'callableBinding',

	    get: function(element, node) {
	      var callableBinding;

	      var attr = getAttribute(element, 'binding');
	      if (attr) {
	        var bo = getBusinessObject$l(element);
	        callableBinding = bo.get(attr) || 'latest';
	      }

	      return {
	        callableBinding: callableBinding
	      };
	    },

	    set: function(element, values, node) {
	      var binding = values.callableBinding;
	      var attr = getAttribute(element, 'binding'),
	          attrVer = getAttribute(element, 'version'),
	          attrVerTag = getAttribute(element, 'versionTag');

	      var props = {};
	      props[attr] = binding;

	      // set version and versionTag values always to undefined to delete the existing value
	      props[attrVer] = undefined;
	      props[attrVerTag] = undefined;

	      return CmdHelper_1.updateProperties(element, props);
	    },

	    hidden: function(element, node) {
	      return !isSupportedCallableType(getCallableType(element));
	    }

	  }));

	  entries.push(EntryFactory_1.textField(translate, {
	    id: 'callable-version',
	    label: translate('Version'),
	    modelProperty: 'callableVersion',

	    get: function(element, node) {
	      var callableVersion;

	      var attr = getAttribute(element, 'version');
	      if (attr) {
	        var bo = getBusinessObject$l(element);
	        callableVersion = bo.get(attr);
	      }

	      return {
	        callableVersion: callableVersion
	      };
	    },

	    set: function(element, values, node) {
	      var version = values.callableVersion;
	      var attr = getAttribute(element, 'version');

	      var props = {};
	      props[attr] = version || undefined;

	      return CmdHelper_1.updateProperties(element, props);
	    },

	    validate: function(element, values, node) {
	      var version = values.callableVersion;

	      var type = getCallableType(element);
	      return (
	        isSupportedCallableType(type) &&
	        getCallActivityBindingValue(element) === 'version' && (
	          !version ? { callableVersion: translate('Must provide a value') } : {}
	        )
	      );
	    },

	    hidden: function(element, node) {
	      var type = getCallableType(element);
	      return !isSupportedCallableType(type) || getCallActivityBindingValue(element) !== 'version';
	    }

	  }));

	  entries.push(EntryFactory_1.textField(translate, {
	    id: 'callable-version-tag',
	    label: translate('Version Tag'),
	    modelProperty: 'versionTag',

	    get: function(element, node) {
	      var versionTag;

	      var attr = getAttribute(element, 'versionTag');

	      if (attr) {
	        var bo = getBusinessObject$l(element);

	        versionTag = bo.get(attr);
	      }

	      return {
	        versionTag: versionTag
	      };
	    },

	    set: function(element, values, node) {
	      var versionTag = values.versionTag;

	      var attr = getAttribute(element, 'versionTag');

	      var props = {};

	      props[attr] = versionTag || undefined;

	      return CmdHelper_1.updateProperties(element, props);
	    },

	    validate: function(element, values, node) {
	      var versionTag = values.versionTag;

	      var type = getCallableType(element);

	      return (
	        isSupportedCallableType(type) &&
	        getCallActivityBindingValue(element) === 'versionTag' && (
	          !versionTag ? { versionTag: translate('Must provide a value') } : {}
	        )
	      );
	    },

	    hidden: function(element, node) {
	      var type = getCallableType(element);

	      return !isSupportedCallableType(type) || getCallActivityBindingValue(element) !== 'versionTag';
	    }

	  }));

	  entries.push(EntryFactory_1.textField(translate, {
	    id: 'tenant-id',
	    label: translate('Tenant Id'),
	    modelProperty: 'tenantId',

	    get: function(element, node) {
	      var tenantId;

	      var attr = getAttribute(element, 'tenantId');
	      if (attr) {
	        var bo = getBusinessObject$l(element);
	        tenantId = bo.get(attr);
	      }

	      return {
	        tenantId: tenantId
	      };
	    },

	    set: function(element, values, node) {
	      var tenantId = values.tenantId;
	      var attr = getAttribute(element, 'tenantId');

	      var props = {};
	      props[attr] = tenantId || undefined;

	      return CmdHelper_1.updateProperties(element, props);
	    },

	    hidden: function(element, node) {
	      var type = getCallableType(element);
	      return !isSupportedCallableType(type);
	    }

	  }));

	  if (is$o(getBusinessObject$l(element), 'bpmn:CallActivity')) {
	    entries.push(EntryFactory_1.checkbox(translate, {
	      id: 'callable-business-key',
	      label: translate('Business Key'),
	      modelProperty: 'callableBusinessKey',

	      get: function(element, node) {
	        var camundaIn = getCamundaInWithBusinessKey(element);

	        return {
	          callableBusinessKey: !!(camundaIn && camundaIn.length > 0)
	        };
	      },

	      set: function(element, values, node) {
	        if (values.callableBusinessKey) {
	          return setBusinessKey(element, '#{execution.processBusinessKey}', bpmnFactory);
	        } else {
	          return deleteBusinessKey(element);
	        }
	      }
	    }));
	  }

	  entries.push(EntryFactory_1.textField(translate, {
	    id: 'business-key-expression',
	    label: translate('Business Key Expression'),
	    modelProperty: 'businessKey',

	    get: function(element, node) {
	      var camundaInWithBusinessKey = getCamundaInWithBusinessKey(element);

	      return {
	        businessKey: (
	          camundaInWithBusinessKey.length ?
	            camundaInWithBusinessKey[0].get('camunda:businessKey') :
	            undefined
	        )
	      };
	    },

	    set: function(element, values, node) {
	      var businessKey = values.businessKey;

	      return setBusinessKey(element, businessKey, bpmnFactory);
	    },

	    validate: function(element, values, node) {
	      var businessKey = values.businessKey;

	      return businessKey === '' ? { businessKey: translate('Must provide a value') } : {};
	    },

	    hidden: function(element, node) {
	      return !getCamundaInWithBusinessKey(element).length;
	    }

	  }));

	  entries = entries.concat(ResultVariable(element, bpmnFactory, {
	    id: 'dmn-resultVariable',
	    getBusinessObject: getBusinessObject$l,
	    getImplementationType: getCallableType,
	    hideResultVariable: function(element, node) {
	      return getCallableType(element) !== 'dmn';
	    }
	  }, translate));

	  entries.push(EntryFactory_1.selectBox(translate, {
	    id: 'dmn-map-decision-result',
	    label: translate('Map Decision Result'),
	    selectOptions: mapDecisionResultOptions,
	    modelProperty: 'mapDecisionResult',

	    get: function(element, node) {
	      var bo = getBusinessObject$l(element);
	      return {
	        mapDecisionResult: bo.get('camunda:mapDecisionResult') || 'resultList'
	      };
	    },

	    set: function(element, values, node) {
	      return CmdHelper_1.updateProperties(element, {
	        'camunda:mapDecisionResult': values.mapDecisionResult || 'resultList'
	      });
	    },

	    hidden: function(element, node) {
	      var bo = getBusinessObject$l(element);
	      var resultVariable = bo.get('camunda:resultVariable');
	      return !(getCallableType(element) === 'dmn' && typeof resultVariable !== 'undefined');
	    }

	  }));


	  entries.push(EntryFactory_1.selectBox(translate, {
	    id: 'delegateVariableMappingType',
	    label: translate('Delegate Variable Mapping'),
	    selectOptions: delegateVariableMappingOptions,
	    emptyParameter: true,
	    modelProperty: 'delegateVariableMappingType',

	    get: function(element, node) {
	      return {
	        delegateVariableMappingType : getDelegateVariableMappingType(element)
	      };
	    },

	    set: function(element, values, node) {
	      var delegateVariableMappingType = values.delegateVariableMappingType;

	      var props = {
	        'camunda:variableMappingClass' : undefined,
	        'camunda:variableMappingDelegateExpression' : undefined
	      };

	      if (delegateVariableMappingType === 'variableMappingClass') {
	        props['camunda:variableMappingClass'] = '';
	      }
	      else if (delegateVariableMappingType === 'variableMappingDelegateExpression') {
	        props['camunda:variableMappingDelegateExpression'] = '';
	      }

	      return CmdHelper_1.updateProperties(element, props);
	    },

	    hidden: function(element, node) {
	      return (getCallableType(element) !== 'bpmn');
	    }

	  }));

	  entries.push(EntryFactory_1.textField(translate, {
	    id: 'delegateVariableMapping',
	    dataValueLabel: 'delegateVariableMappingLabel',
	    modelProperty: 'delegateVariableMapping',

	    get: function(element, node) {
	      var bo = getBusinessObject$l(element);

	      var label = '';
	      var delegateVariableMapping = undefined;
	      var type = getDelegateVariableMappingType(element);

	      if (type === 'variableMappingClass') {
	        label = translate('Class');
	        delegateVariableMapping = bo.get('camunda:variableMappingClass');
	      }
	      else if (type === 'variableMappingDelegateExpression') {
	        label = translate('Delegate Expression');
	        delegateVariableMapping = bo.get('camunda:variableMappingDelegateExpression');
	      }

	      return {
	        delegateVariableMapping: delegateVariableMapping,
	        delegateVariableMappingLabel: label
	      };
	    },

	    set: function(element, values, node) {
	      var delegateVariableMapping = values.delegateVariableMapping;

	      var attr = 'camunda:' + getDelegateVariableMappingType(element);

	      var props = {};
	      props[attr] = delegateVariableMapping || undefined;

	      return CmdHelper_1.updateProperties(element, props);
	    },

	    validate: function(element, values, node) {
	      var delegateVariableMapping = values.delegateVariableMapping;
	      return (
	        getCallableType(element) === 'bpmn' && (
	          !delegateVariableMapping ? { delegateVariableMapping: translate('Must provide a value') } : {}
	        )
	      );
	    },

	    hidden: function(element, node) {
	      return !(getCallableType(element) === 'bpmn' && getDelegateVariableMappingType(element) !== '');
	    }

	  }));

	  return entries;
	};

	var escapeHTML$f = Utils.escapeHTML,
	    triggerClickEvent$1 = Utils.triggerClickEvent;





	var domQuery$9 = require$$1.query,
	    domClosest$2 = require$$1.closest,
	    domClasses$4 = require$$1.classes;

	function getImplementationType(element) {
	  return ImplementationTypeHelper_1.getImplementationType(element);
	}

	function getBusinessObject$m(element) {
	  return ImplementationTypeHelper_1.getServiceTaskLikeBusinessObject(element);
	}

	function isDmnCapable(element) {
	  return ImplementationTypeHelper_1.isDmnCapable(element);
	}

	function isExternalCapable(element) {
	  return ImplementationTypeHelper_1.isExternalCapable(element);
	}

	function isServiceTaskLike(element) {
	  return ImplementationTypeHelper_1.isServiceTaskLike(element);
	}

	var ServiceTaskDelegateProps = function(group, element, bpmnFactory, translate) {

	  if (!isServiceTaskLike(getBusinessObject$m(element))) {
	    return;
	  }

	  var hasDmnSupport = isDmnCapable(element);
	  var hasExternalSupport = isExternalCapable(getBusinessObject$m(element));

	  // implementation type ////////////////////////////////////

	  group.entries = group.entries.concat(ImplementationType(element, bpmnFactory, {
	    getBusinessObject: getBusinessObject$m,
	    getImplementationType: getImplementationType,
	    hasDmnSupport: hasDmnSupport,
	    hasExternalSupport: hasExternalSupport,
	    hasServiceTaskLikeSupport: true
	  }, translate));


	  // delegate (class, expression, delegateExpression) //////////

	  group.entries = group.entries.concat(Delegate(element, bpmnFactory, {
	    getBusinessObject: getBusinessObject$m,
	    getImplementationType: getImplementationType
	  }, translate));


	  // result variable /////////////////////////////////////////

	  group.entries = group.entries.concat(ResultVariable(element, bpmnFactory, {
	    getBusinessObject: getBusinessObject$m,
	    getImplementationType: getImplementationType,
	    hideResultVariable: function(element, node) {
	      return getImplementationType(element) !== 'expression';
	    }
	  }, translate));

	  // external //////////////////////////////////////////////////

	  if (hasExternalSupport) {
	    group.entries = group.entries.concat(External(element, bpmnFactory, {
	      getBusinessObject: getBusinessObject$m,
	      getImplementationType: getImplementationType
	    }, translate));
	  }


	  // dmn ////////////////////////////////////////////////////////

	  if (hasDmnSupport) {
	    group.entries = group.entries.concat(Callable(element, bpmnFactory, {
	      getCallableType: getImplementationType
	    }, translate));
	  }


	  // connector ////////////////////////////////////////////////

	  var isConnector = function(element) {
	    return getImplementationType(element) === 'connector';
	  };

	  group.entries.push(EntryFactory_1.link(translate, {
	    id: 'configureConnectorLink',
	    buttonLabel: translate('Configure Connector'),
	    handleClick: function(element, node, event) {

	      var connectorTabEl = getTabNode(node, 'connector');

	      if (connectorTabEl) {
	        triggerClickEvent$1(connectorTabEl);
	      }

	      // suppress actual link click
	      return false;
	    },
	    showLink: function(element, node) {
	      var link = domQuery$9('a', node);
	      link.textContent = '';

	      domClasses$4(link).remove('bpp-error-message');

	      if (isConnector(element)) {
	        var connectorId = InputOutputHelper_1.getConnector(element).get('connectorId');
	        if (connectorId) {
	          link.textContent = translate('Configure Connector');
	        } else {
	          link.innerHTML = '<span class="bpp-icon-warning"></span> ' + escapeHTML$f(translate('Must configure Connector'));
	          domClasses$4(link).add('bpp-error-message');
	        }

	        return true;
	      }

	      return false;
	    }
	  }));

	};



	// helpers ///////////////////////////

	function getTabNode(el, id) {
	  var containerEl = domClosest$2(el, '.bpp-properties-panel');

	  return domQuery$9('a[data-tab-target="' + id + '"]', containerEl);
	}

	var is$p = require$$0$1.is;


	var UserTaskProps = function(group, element, translate) {
	  if (is$p(element, 'camunda:Assignable')) {

	    // Assignee
	    group.entries.push(EntryFactory_1.textField(translate, {
	      id : 'assignee',
	      label : translate('Assignee'),
	      modelProperty : 'assignee'
	    }));

	    // Candidate Users
	    group.entries.push(EntryFactory_1.textField(translate, {
	      id : 'candidateUsers',
	      label : translate('Candidate Users'),
	      modelProperty : 'candidateUsers'
	    }));

	    // Candidate Groups
	    group.entries.push(EntryFactory_1.textField(translate, {
	      id : 'candidateGroups',
	      label : translate('Candidate Groups'),
	      modelProperty : 'candidateGroups'
	    }));

	    // Due Date
	    group.entries.push(EntryFactory_1.textField(translate, {
	      id : 'dueDate',
	      description : translate('The due date as an EL expression (e.g. ${someDate} or an ISO date (e.g. 2015-06-26T09:54:00)'),
	      label : translate('Due Date'),
	      modelProperty : 'dueDate'
	    }));

	    // FollowUp Date
	    group.entries.push(EntryFactory_1.textField(translate, {
	      id : 'followUpDate',
	      description : translate('The follow up date as an EL expression (e.g. ${someDate} or an ' +
	                    'ISO date (e.g. 2015-06-26T09:54:00)'),
	      label : translate('Follow Up Date'),
	      modelProperty : 'followUpDate'
	    }));

	    // priority
	    group.entries.push(EntryFactory_1.textField(translate, {
	      id : 'priority',
	      label : translate('Priority'),
	      modelProperty : 'priority'
	    }));
	  }
	};

	function isAsyncBefore$1(bo) {
	  return AsyncCapableHelper.isAsyncBefore(bo);
	}

	function isAsyncAfter$1(bo) {
	  return AsyncCapableHelper.isAsyncAfter(bo);
	}

	function isExclusive$1(bo) {
	  return AsyncCapableHelper.isExclusive(bo);
	}

	function removeFailedJobRetryTimeCycle$1(bo, element) {
	  return AsyncCapableHelper.removeFailedJobRetryTimeCycle(bo, element);
	}

	function canRemoveFailedJobRetryTimeCycle(element) {
	  return !EventDefinitionHelper_1.getTimerEventDefinition(element);
	}

	var AsyncContinuation = function(element, bpmnFactory, options, translate) {

	  var getBusinessObject = options.getBusinessObject;

	  var idPrefix = options.idPrefix || '',
	      labelPrefix = options.labelPrefix || '';


	  var asyncBeforeEntry = EntryFactory_1.checkbox(translate, {
	    id: idPrefix + 'asyncBefore',
	    label: labelPrefix + translate('Asynchronous Before'),
	    modelProperty: 'asyncBefore',

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      return {
	        asyncBefore: isAsyncBefore$1(bo)
	      };
	    },

	    set: function(element, values) {
	      var bo = getBusinessObject(element);
	      var asyncBefore = !!values.asyncBefore;

	      var props = {
	        'camunda:asyncBefore': asyncBefore,
	        'camunda:async': false
	      };

	      var commands = [];
	      if (!isAsyncAfter$1(bo) && !asyncBefore) {
	        props = assign_1({ 'camunda:exclusive' : true }, props);
	        if (canRemoveFailedJobRetryTimeCycle(element)) {
	          commands.push(removeFailedJobRetryTimeCycle$1(bo, element));
	        }
	      }

	      commands.push(CmdHelper_1.updateBusinessObject(element, bo, props));
	      return commands;
	    }
	  });


	  var asyncAfterEntry = EntryFactory_1.checkbox(translate, {
	    id: idPrefix + 'asyncAfter',
	    label: labelPrefix + translate('Asynchronous After'),
	    modelProperty: 'asyncAfter',

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      return {
	        asyncAfter: isAsyncAfter$1(bo)
	      };
	    },

	    set: function(element, values) {
	      var bo = getBusinessObject(element);
	      var asyncAfter = !!values.asyncAfter;

	      var props = {
	        'camunda:asyncAfter': asyncAfter
	      };

	      var commands = [];
	      if (!isAsyncBefore$1(bo) && !asyncAfter) {
	        props = assign_1({ 'camunda:exclusive' : true }, props);
	        if (canRemoveFailedJobRetryTimeCycle(element)) {
	          commands.push(removeFailedJobRetryTimeCycle$1(bo, element));
	        }
	      }

	      commands.push(CmdHelper_1.updateBusinessObject(element, bo, props));
	      return commands;
	    }
	  });


	  var exclusiveEntry = EntryFactory_1.checkbox(translate, {
	    id: idPrefix + 'exclusive',
	    label: labelPrefix + translate('Exclusive'),
	    modelProperty: 'exclusive',

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      return { exclusive: isExclusive$1(bo) };
	    },

	    set: function(element, values) {
	      var bo = getBusinessObject(element);
	      return CmdHelper_1.updateBusinessObject(element, bo, { 'camunda:exclusive': !!values.exclusive });
	    },

	    hidden: function(element) {
	      var bo = getBusinessObject(element);
	      return bo && !isAsyncAfter$1(bo) && !isAsyncBefore$1(bo);
	    }
	  });

	  return [ asyncBeforeEntry, asyncAfterEntry, exclusiveEntry ];
	};

	var getBusinessObject$n = require$$0$1.getBusinessObject,
	    is$q = require$$0$1.is;

	var AsynchronousContinuationProps = function(group, element, bpmnFactory, translate) {

	  if (is$q(element, 'camunda:AsyncCapable')) {

	    group.entries = group.entries.concat(AsyncContinuation(element, bpmnFactory, {
	      getBusinessObject: getBusinessObject$n
	    }, translate));

	  }
	};

	var getBusinessObject$o = require$$0$1.getBusinessObject,
	    is$r = require$$0$1.is;










	function getCallableType(element) {
	  var bo = getBusinessObject$o(element);

	  var boCalledElement = bo.get('calledElement'),
	      boCaseRef = bo.get('camunda:caseRef');

	  var callActivityType = '';
	  if (typeof boCalledElement !== 'undefined') {
	    callActivityType = 'bpmn';
	  } else

	  if (typeof boCaseRef !== 'undefined') {
	    callActivityType = 'cmmn';
	  }

	  return callActivityType;
	}

	var DEFAULT_PROPS = {
	  calledElement: undefined,
	  'camunda:calledElementBinding': 'latest',
	  'camunda:calledElementVersion': undefined,
	  'camunda:calledElementTenantId': undefined,
	  'camunda:variableMappingClass' : undefined,
	  'camunda:variableMappingDelegateExpression' : undefined,
	  'camunda:caseRef': undefined,
	  'camunda:caseBinding': 'latest',
	  'camunda:caseVersion': undefined,
	  'camunda:caseTenantId': undefined
	};

	var CallActivityProps = function(group, element, bpmnFactory, translate) {

	  if (!is$r(element, 'camunda:CallActivity')) {
	    return;
	  }

	  group.entries.push(EntryFactory_1.selectBox(translate, {
	    id : 'callActivity',
	    label: translate('CallActivity Type'),
	    selectOptions: [
	      { name: 'BPMN', value: 'bpmn' },
	      { name: 'CMMN', value: 'cmmn' }
	    ],
	    emptyParameter: true,
	    modelProperty: 'callActivityType',

	    get: function(element, node) {
	      return {
	        callActivityType: getCallableType(element)
	      };
	    },

	    set: function(element, values, node) {
	      var type = values.callActivityType;

	      var props = assign_1({}, DEFAULT_PROPS);

	      if (type === 'bpmn') {
	        props.calledElement = '';
	      }
	      else if (type === 'cmmn') {
	        props['camunda:caseRef'] = '';
	      }

	      return CmdHelper_1.updateProperties(element, props);
	    }

	  }));

	  group.entries.push(Callable(element, bpmnFactory, {
	    getCallableType: getCallableType
	  }, translate));

	  group.entries = flattenDeep_1(group.entries);
	};

	var getBusinessObject$p = require$$0$1.getBusinessObject,
	    escapeHTML$g = Utils.escapeHTML;






	var domClasses$5 = require$$1.classes;

	/**
	 * Get a property value of the loop characteristics.
	 *
	 * @param {djs.model.Base} element
	 * @param {string} propertyName
	 *
	 * @return {any} the property value
	 */
	function getProperty$1(element, propertyName) {
	  var loopCharacteristics = getLoopCharacteristics(element);
	  return loopCharacteristics && loopCharacteristics.get(propertyName);
	}

	/**
	 * Get the body of a given expression.
	 *
	 * @param {ModdleElement<bpmn:FormalExpression>} expression
	 *
	 * @return {string} the body (value) of the expression
	 */
	function getBody(expression) {
	  return expression && expression.get('body');
	}


	/**
	 * Get the loop characteristics of an element.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {ModdleElement<bpmn:MultiInstanceLoopCharacteristics>} the loop characteristics
	 */
	function getLoopCharacteristics(element) {
	  var bo = getBusinessObject$p(element);
	  return bo.loopCharacteristics;
	}

	/**
	 * Get the loop cardinality of the loop characteristics.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {ModdleElement<bpmn:FormalExpression>} an expression representing the loop cardinality
	 */
	function getLoopCardinality(element) {
	  return getProperty$1(element, 'loopCardinality');
	}

	/**
	 * Get the loop cardinality value of the loop characteristics.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {string} the loop cardinality value
	 */
	function getLoopCardinalityValue(element) {
	  var loopCardinality = getLoopCardinality(element);
	  return getBody(loopCardinality);
	}

	/**
	 * Get the completion condition of the loop characteristics.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {ModdleElement<bpmn:FormalExpression>} an expression representing the completion condition
	 */
	function getCompletionCondition(element) {
	  return getProperty$1(element, 'completionCondition');
	}

	/**
	 * Get the completion condition value of the loop characteristics.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {string} the completion condition value
	 */
	function getCompletionConditionValue(element) {
	  var completionCondition = getCompletionCondition(element);
	  return getBody(completionCondition);
	}

	/**
	 * Get the 'camunda:collection' attribute value of the loop characteristics.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {string} the 'camunda:collection' value
	 */
	function getCollection(element) {
	  return getProperty$1(element, 'camunda:collection');
	}

	/**
	 * Get the 'camunda:elementVariable' attribute value of the loop characteristics.
	 *
	 * @param {djs.model.Base} element
	 *
	 * @return {string} the 'camunda:elementVariable' value
	 */
	function getElementVariable(element) {
	  return getProperty$1(element, 'camunda:elementVariable');
	}


	/**
	 * Creates 'bpmn:FormalExpression' element.
	 *
	 * @param {ModdleElement} parent
	 * @param {string} body
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @result {ModdleElement<bpmn:FormalExpression>} a formal expression
	 */
	function createFormalExpression$1(parent, body, bpmnFactory) {
	  return ElementHelper_1.createElement('bpmn:FormalExpression', { body: body }, parent, bpmnFactory);
	}

	/**
	 * Updates a specific formal expression of the loop characteristics.
	 *
	 * @param {djs.model.Base} element
	 * @param {string} propertyName
	 * @param {string} newValue
	 * @param {BpmnFactory} bpmnFactory
	 */
	function updateFormalExpression(element, propertyName, newValue, bpmnFactory) {
	  var loopCharacteristics = getLoopCharacteristics(element);

	  var expressionProps = {};

	  if (!newValue) {

	    // remove formal expression
	    expressionProps[propertyName] = undefined;
	    return CmdHelper_1.updateBusinessObject(element, loopCharacteristics, expressionProps);
	  }

	  var existingExpression = loopCharacteristics.get(propertyName);

	  if (!existingExpression) {

	    // add formal expression
	    expressionProps[propertyName] = createFormalExpression$1(loopCharacteristics, newValue, bpmnFactory);
	    return CmdHelper_1.updateBusinessObject(element, loopCharacteristics, expressionProps);
	  }

	  // edit existing formal expression
	  return CmdHelper_1.updateBusinessObject(element, existingExpression, {
	    body: newValue
	  });
	}


	var MultiInstanceLoopCharacteristics = function(element, bpmnFactory, translate) {

	  var entries = [];

	  // error message /////////////////////////////////////////////////////////////////

	  entries.push({
	    id: 'multiInstance-errorMessage',
	    html: '<div data-show="isValid">' +
	             '<span class="bpp-icon-warning"></span> ' +
	             escapeHTML$g(translate('Must provide either loop cardinality or collection')) +
	          '</div>',

	    isValid: function(element, node, notification, scope) {
	      var loopCharacteristics = getLoopCharacteristics(element);

	      var isValid = true;
	      if (loopCharacteristics) {
	        var loopCardinality = getLoopCardinalityValue(element);
	        var collection = getCollection(element);

	        isValid = !loopCardinality && !collection;
	      }

	      domClasses$5(node).toggle('bpp-hidden', !isValid);
	      domClasses$5(notification).toggle('bpp-error-message', isValid);

	      return isValid;
	    }
	  });

	  // loop cardinality //////////////////////////////////////////////////////////////

	  entries.push(EntryFactory_1.textField(translate, {
	    id: 'multiInstance-loopCardinality',
	    label: translate('Loop Cardinality'),
	    modelProperty: 'loopCardinality',

	    get: function(element, node) {
	      return {
	        loopCardinality: getLoopCardinalityValue(element)
	      };
	    },

	    set: function(element, values) {
	      return updateFormalExpression(element, 'loopCardinality', values.loopCardinality, bpmnFactory);
	    }
	  }));


	  // collection //////////////////////////////////////////////////////////////////

	  entries.push(EntryFactory_1.textField(translate, {
	    id: 'multiInstance-collection',
	    label: translate('Collection'),
	    modelProperty: 'collection',

	    get: function(element, node) {
	      return {
	        collection: getCollection(element)
	      };
	    },

	    set: function(element, values) {
	      var loopCharacteristics = getLoopCharacteristics(element);
	      return CmdHelper_1.updateBusinessObject(element, loopCharacteristics, {
	        'camunda:collection': values.collection || undefined
	      });
	    },

	    validate: function(element, values, node) {
	      var collection = getCollection(element);
	      var elementVariable = getElementVariable(element);

	      if (!collection && elementVariable) {
	        return { collection : 'Must provide a value' };
	      }
	    }
	  }));


	  // element variable ////////////////////////////////////////////////////////////

	  entries.push(EntryFactory_1.textField(translate, {
	    id: 'multiInstance-elementVariable',
	    label: translate('Element Variable'),
	    modelProperty: 'elementVariable',

	    get: function(element, node) {
	      return {
	        elementVariable: getElementVariable(element)
	      };
	    },

	    set: function(element, values) {
	      var loopCharacteristics = getLoopCharacteristics(element);
	      return CmdHelper_1.updateBusinessObject(element, loopCharacteristics, {
	        'camunda:elementVariable': values.elementVariable || undefined
	      });
	    }
	  }));


	  // Completion Condition //////////////////////////////////////////////////////

	  entries.push(EntryFactory_1.textField(translate, {
	    id: 'multiInstance-completionCondition',
	    label: translate('Completion Condition'),
	    modelProperty: 'completionCondition',

	    get: function(element) {
	      return {
	        completionCondition: getCompletionConditionValue(element)
	      };
	    },

	    set: function(element, values) {
	      return updateFormalExpression(element, 'completionCondition', values.completionCondition, bpmnFactory);
	    }
	  }));

	  return entries;

	};

	var is$s = require$$0$1.is;







	function isAsyncBefore$2(bo) {
	  return AsyncCapableHelper.isAsyncBefore(bo);
	}

	function isAsyncAfter$2(bo) {
	  return AsyncCapableHelper.isAsyncAfter(bo);
	}

	function getFailedJobRetryTimeCycle$1(bo) {
	  return AsyncCapableHelper.getFailedJobRetryTimeCycle(bo);
	}

	function removeFailedJobRetryTimeCycle$2(bo, element) {
	  return AsyncCapableHelper.removeFailedJobRetryTimeCycle(bo, element);
	}

	function createExtensionElements(parent, bpmnFactory) {
	  return ElementHelper_1.createElement('bpmn:ExtensionElements', { values: [] }, parent, bpmnFactory);
	}

	function createFailedJobRetryTimeCycle(parent, bpmnFactory, cycle) {
	  return ElementHelper_1.createElement('camunda:FailedJobRetryTimeCycle', { body: cycle }, parent, bpmnFactory);
	}

	var JobRetryTimeCycle = function(element, bpmnFactory, options, translate) {

	  var getBusinessObject = options.getBusinessObject;

	  var idPrefix = options.idPrefix || '',
	      labelPrefix = options.labelPrefix || '';

	  var retryTimeCycleEntry = EntryFactory_1.textField(translate, {
	    id: idPrefix + 'retryTimeCycle',
	    label: labelPrefix + translate('Retry Time Cycle'),
	    modelProperty: 'cycle',

	    get: function(element, node) {
	      var retryTimeCycle = getFailedJobRetryTimeCycle$1(getBusinessObject(element));
	      var value = retryTimeCycle && retryTimeCycle.get('body');
	      return {
	        cycle: value
	      };
	    },

	    set: function(element, values, node) {
	      var newCycle = values.cycle;
	      var bo = getBusinessObject(element);

	      if (newCycle === '' || typeof newCycle === 'undefined') {

	        // remove retry time cycle element(s)
	        return removeFailedJobRetryTimeCycle$2(bo, element);
	      }

	      var retryTimeCycle = getFailedJobRetryTimeCycle$1(bo);

	      if (!retryTimeCycle) {

	        // add new retry time cycle element
	        var commands = [];

	        var extensionElements = bo.get('extensionElements');
	        if (!extensionElements) {
	          extensionElements = createExtensionElements(bo, bpmnFactory);
	          commands.push(CmdHelper_1.updateBusinessObject(element, bo, { extensionElements: extensionElements }));
	        }

	        retryTimeCycle = createFailedJobRetryTimeCycle(extensionElements, bpmnFactory, newCycle);
	        commands.push(CmdHelper_1.addAndRemoveElementsFromList(
	          element,
	          extensionElements,
	          'values',
	          'extensionElements',
	          [ retryTimeCycle ],
	          []
	        ));

	        return commands;
	      }

	      // update existing retry time cycle element
	      return CmdHelper_1.updateBusinessObject(element, retryTimeCycle, { body: newCycle });
	    },

	    hidden: function(element) {
	      var bo = getBusinessObject(element);

	      if (bo && (isAsyncBefore$2(bo) || isAsyncAfter$2(bo))) {
	        return false;
	      }

	      if (is$s(element, 'bpmn:Event')) {
	        return !EventDefinitionHelper_1.getTimerEventDefinition(element);
	      }

	      return true;
	    }

	  });

	  return [ retryTimeCycleEntry ];

	};

	var getBusinessObject$q = require$$0$1.getBusinessObject,
	    is$t = require$$0$1.is;






	function getLoopCharacteristics$1(element) {
	  var bo = getBusinessObject$q(element);
	  return bo.loopCharacteristics;
	}


	function ensureMultiInstanceSupported(element) {
	  var loopCharacteristics = getLoopCharacteristics$1(element);
	  return !!loopCharacteristics && is$t(loopCharacteristics, 'camunda:Collectable');
	}

	var MultiInstanceLoopProps = function(group, element, bpmnFactory, translate) {

	  if (!ensureMultiInstanceSupported(element)) {
	    return;
	  }

	  // multi instance properties
	  group.entries = group.entries.concat(MultiInstanceLoopCharacteristics(element, bpmnFactory, translate));

	  // async continuation ///////////////////////////////////////////////////////
	  group.entries = group.entries.concat(AsyncContinuation(element, bpmnFactory, {
	    getBusinessObject: getLoopCharacteristics$1,
	    idPrefix: 'multiInstance-',
	    labelPrefix: translate('Multi Instance ')
	  }, translate));


	  // retry time cycle //////////////////////////////////////////////////////////
	  group.entries = group.entries.concat(JobRetryTimeCycle(element, bpmnFactory, {
	    getBusinessObject: getLoopCharacteristics$1,
	    idPrefix: 'multiInstance-',
	    labelPrefix: translate('Multi Instance ')
	  }, translate));
	};

	var domQuery$a = require$$1.query,
	    escapeHTML$h = Utils.escapeHTML;


	function getScriptType(node, idPrefix) {

	  // if we have an idPrefix, work with specific selector
	  var selector;

	  if (idPrefix && idPrefix != '') {
	    selector = 'select[id="' + idPrefix + 'cam-script-type"]';
	  } else {
	    selector = 'select[name="scriptType"]';
	  }

	  return Utils.selectedType(selector, node.parentElement);
	}


	var Script = function(scriptLanguagePropName, scriptValuePropName, isFormatRequired, translate, options) {
	  var idPrefix = options && options.idPrefix || '';

	  return {
	    template:
	    '<div class="bpp-row bpp-textfield">' +
	      '<label for="' + idPrefix + 'cam-script-format">' + escapeHTML$h(translate('Script Format')) + '</label>' +
	      '<div class="bpp-field-wrapper">' +
	        '<input id="' + idPrefix + 'cam-script-format" type="text" name="scriptFormat" />' +
	        '<button class="action-button clear" data-action="script.clearScriptFormat" data-show="script.canClearScriptFormat">' +
	          '<span>X</span>' +
	        '</button>' +
	      '</div>' +
	    '</div>' +

	    '<div class="bpp-row">' +
	      '<label for="' + idPrefix + 'cam-script-type">' + escapeHTML$h(translate('Script Type')) + '</label>' +
	      '<div class="bpp-field-wrapper">' +
	        '<select id="' + idPrefix + 'cam-script-type" name="scriptType" data-value>' +
	          '<option value="script" selected>' + escapeHTML$h(translate('Inline Script')) + '</option>' +
	          '<option value="scriptResource">' + escapeHTML$h(translate('External Resource')) + '</option>' +
	        '</select>' +
	      '</div>' +
	    '</div>' +

	    '<div class="bpp-row bpp-textfield">' +
	      '<label for="' + idPrefix + 'cam-script-resource-val" data-show="script.isScriptResource">' + escapeHTML$h(translate('Resource')) + '</label>' +
	      '<div class="bpp-field-wrapper" data-show="script.isScriptResource">' +
	        '<input id="' + idPrefix + 'cam-script-resource-val" type="text" name="scriptResourceValue" />' +
	        '<button class="action-button clear" data-action="script.clearScriptResource" data-show="script.canClearScriptResource">' +
	          '<span>X</span>' +
	        '</button>' +
	      '</div>' +
	    '</div>' +

	    '<div class="bpp-row">' +
	      '<label for="' + idPrefix + 'cam-script-val" data-show="script.isScript">' + escapeHTML$h(translate('Script')) + '</label>' +
	      '<div class="bpp-field-wrapper" data-show="script.isScript">' +
	        '<textarea id="' + idPrefix + 'cam-script-val" type="text" name="scriptValue"></textarea>' +
	      '</div>'+
	    '</div>',

	    get: function(element, bo) {
	      var values = {};

	      // read values from xml:
	      var boScriptResource = bo.get('camunda:resource'),
	          boScript = bo.get(scriptValuePropName),
	          boScriptFormat = bo.get(scriptLanguagePropName);

	      if (typeof boScriptResource !== 'undefined') {
	        values.scriptResourceValue = boScriptResource;
	        values.scriptType = 'scriptResource';
	      } else {
	        values.scriptValue = boScript;
	        values.scriptType = 'script';
	      }

	      values.scriptFormat = boScriptFormat;

	      return values;
	    },

	    set: function(element, values, containerElement) {
	      var scriptFormat = values.scriptFormat,
	          scriptType = values.scriptType,
	          scriptResourceValue = values.scriptResourceValue,
	          scriptValue = values.scriptValue;

	      // init update
	      var update = {
	        'camunda:resource': undefined
	      };
	      update[scriptValuePropName] = undefined;
	      update[scriptLanguagePropName] = undefined;

	      if (isFormatRequired) {

	        // always set language
	        update[scriptLanguagePropName] = scriptFormat || '';
	      } else

	      // set language only when scriptFormat has a value
	      if (scriptFormat !== '') {
	        update[scriptLanguagePropName] = scriptFormat;
	      }

	      // set either inline script or resource
	      if ('scriptResource' === scriptType) {
	        update['camunda:resource'] = scriptResourceValue || '';
	      } else {
	        update[scriptValuePropName] = scriptValue || '';
	      }

	      return update;
	    },

	    validate: function(element, values) {
	      var validationResult = {};

	      if (values.scriptType === 'script' && !values.scriptValue) {
	        validationResult.scriptValue = translate('Must provide a value');
	      }

	      if (values.scriptType === 'scriptResource' && !values.scriptResourceValue) {
	        validationResult.scriptResourceValue = translate('Must provide a value');
	      }

	      if (isFormatRequired && (!values.scriptFormat || values.scriptFormat.length === 0)) {
	        validationResult.scriptFormat = translate('Must provide a value');
	      }

	      return validationResult;
	    },

	    clearScriptFormat: function(element, inputNode, btnNode, scopeNode) {
	      domQuery$a('input[name=scriptFormat]', scopeNode).value='';

	      return true;
	    },

	    canClearScriptFormat: function(element, inputNode, btnNode, scopeNode) {
	      var input = domQuery$a('input[name=scriptFormat]', scopeNode);

	      return input.value !== '';
	    },

	    clearScriptResource: function(element, inputNode, btnNode, scopeNode) {
	      domQuery$a('input[name=scriptResourceValue]', scopeNode).value='';

	      return true;
	    },

	    canClearScriptResource: function(element, inputNode, btnNode, scopeNode) {
	      var input = domQuery$a('input[name=scriptResourceValue]', scopeNode);

	      return input.value !== '';
	    },

	    clearScript: function(element, inputNode, btnNode, scopeNode) {
	      domQuery$a('textarea[name=scriptValue]', scopeNode).value='';

	      return true;
	    },

	    canClearScript: function(element, inputNode, btnNode, scopeNode) {
	      var input = domQuery$a('textarea[name=scriptValue]', scopeNode);

	      return input.value !== '';
	    },

	    isScriptResource: function(element, inputNode, btnNode, scopeNode) {
	      var scriptType = getScriptType(scopeNode, idPrefix);
	      return scriptType === 'scriptResource';
	    },

	    isScript: function(element, inputNode, btnNode, scopeNode) {
	      var scriptType = getScriptType(scopeNode, idPrefix);
	      return scriptType === 'script';
	    }

	  };

	};

	var is$u = require$$0$1.is,
	    isAny$5 = require$$1$3.isAny,
	    getBusinessObject$r = require$$0$1.getBusinessObject,
	    escapeHTML$i = Utils.escapeHTML,
	    domQuery$b = require$$1.query;


	var ConditionalProps = function(group, element, bpmnFactory, translate) {
	  var bo = getBusinessObject$r(element);

	  if (!bo) {
	    return;
	  }

	  var conditionalEventDefinition = EventDefinitionHelper_1.getConditionalEventDefinition(element);

	  if (!(is$u(element, 'bpmn:SequenceFlow') && isConditionalSource(element.source))
	    && !conditionalEventDefinition) {
	    return;
	  }

	  var script = Script('language', 'body', true, translate);
	  group.entries.push({
	    id: 'condition',
	    label: translate('Condition'),
	    html: '<div class="bpp-row">' +
	              '<label for="cam-condition-type">'+ escapeHTML$i(translate('Condition Type')) + '</label>' +
	              '<div class="bpp-field-wrapper">' +
	                '<select id="cam-condition-type" name="conditionType" data-value>' +
	                  '<option value="expression">'+ escapeHTML$i(translate('Expression')) + '</option>' +
	                  '<option value="script">'+ escapeHTML$i(translate('Script')) + '</option>' +
	                  '<option value="" selected></option>' +
	                '</select>' +
	              '</div>' +
	            '</div>' +

	            // expression
	            '<div class="bpp-row">' +
	              '<label for="cam-condition" data-show="isExpression">' + escapeHTML$i(translate('Expression')) + '</label>' +
	              '<div class="bpp-field-wrapper" data-show="isExpression">' +
	                '<input id="cam-condition" type="text" name="condition" />' +
	                '<button class="action-button clear" data-action="clear" data-show="canClear">' +
	                  '<span>X</span>' +
	                '</button>' +
	              '</div>' +
	              '<div data-show="isScript">' +
	                script.template +
	              '</div>' +
	            '</div>',

	    get: function(element, propertyName) {
	      var conditionalEventDefinition = EventDefinitionHelper_1.getConditionalEventDefinition(element);

	      var conditionExpression = conditionalEventDefinition
	        ? conditionalEventDefinition.condition
	        : bo.conditionExpression;

	      var values = {},
	          conditionType = '';

	      if (conditionExpression) {
	        var conditionLanguage = conditionExpression.language;
	        if (typeof conditionLanguage !== 'undefined') {
	          conditionType = 'script';
	          values = script.get(element, conditionExpression);
	        } else {
	          conditionType = 'expression';
	          values.condition = conditionExpression.get('body');
	        }
	      }

	      values.conditionType = conditionType;

	      return values;

	    },

	    set: function(element, values, containerElement) {
	      var conditionType = values.conditionType;
	      var commands = [];

	      var conditionProps = {
	        body: undefined
	      };

	      if (conditionType === 'script') {
	        conditionProps = script.set(element, values, containerElement);
	      } else {
	        var condition = values.condition;

	        conditionProps.body = condition;
	      }

	      var conditionOrConditionExpression;

	      if (conditionType) {
	        conditionOrConditionExpression = ElementHelper_1.createElement(
	          'bpmn:FormalExpression',
	          conditionProps,
	          conditionalEventDefinition || bo,
	          bpmnFactory
	        );

	        var source = element.source;

	        // if default-flow, remove default-property from source
	        if (source && source.businessObject.default === bo) {
	          commands.push(CmdHelper_1.updateProperties(source, { 'default': undefined }));
	        }
	      }

	      var update = conditionalEventDefinition
	        ? { condition: conditionOrConditionExpression }
	        : { conditionExpression: conditionOrConditionExpression };

	      commands.push(CmdHelper_1.updateBusinessObject(element, conditionalEventDefinition || bo, update));

	      return commands;
	    },

	    validate: function(element, values) {
	      var validationResult = {};

	      if (!values.condition && values.conditionType === 'expression') {
	        validationResult.condition = translate('Must provide a value');
	      }
	      else if (values.conditionType === 'script') {
	        validationResult = script.validate(element, values);
	      }

	      return validationResult;
	    },

	    isExpression: function(element, inputNode) {
	      var conditionType = domQuery$b('select[name=conditionType]', inputNode);
	      if (conditionType.selectedIndex >= 0) {
	        return conditionType.options[conditionType.selectedIndex].value === 'expression';
	      }
	    },

	    isScript: function(element, inputNode) {
	      var conditionType = domQuery$b('select[name=conditionType]', inputNode);
	      if (conditionType.selectedIndex >= 0) {
	        return conditionType.options[conditionType.selectedIndex].value === 'script';
	      }
	    },

	    clear: function(element, inputNode) {

	      // clear text input
	      domQuery$b('input[name=condition]', inputNode).value='';

	      return true;
	    },

	    canClear: function(element, inputNode) {
	      var input = domQuery$b('input[name=condition]', inputNode);

	      return input.value !== '';
	    },

	    script : script,

	    cssClasses: [ 'bpp-textfield' ]
	  });
	};


	// utilities //////////////////////////

	var CONDITIONAL_SOURCES = [
	  'bpmn:Activity',
	  'bpmn:ExclusiveGateway',
	  'bpmn:InclusiveGateway',
	  'bpmn:ComplexGateway'
	];

	function isConditionalSource(element) {
	  return isAny$5(element, CONDITIONAL_SOURCES);
	}

	var getBusinessObject$s = require$$0$1.getBusinessObject,
	    is$v = require$$0$1.is;


	var ScriptTaskProps = function(group, element, bpmnFactory, translate) {
	  var bo;

	  if (is$v(element, 'bpmn:ScriptTask')) {
	    bo = getBusinessObject$s(element);
	  }

	  if (!bo) {
	    return;
	  }

	  var script = Script('scriptFormat', 'script', false, translate);
	  group.entries.push({
	    id: 'script-implementation',
	    label: translate('Script'),
	    html: script.template,

	    get: function(element) {
	      return script.get(element, bo);
	    },

	    set: function(element, values, containerElement) {
	      var properties = script.set(element, values, containerElement);

	      return CmdHelper_1.updateProperties(element, properties);
	    },

	    validate: function(element, values) {
	      return script.validate(element, values);
	    },

	    script : script,

	    cssClasses: ['bpp-textfield']

	  });

	  group.entries.push(EntryFactory_1.textField(translate, {
	    id : 'scriptResultVariable',
	    label : translate('Result Variable'),
	    modelProperty : 'scriptResultVariable',

	    get: function(element, propertyName) {
	      var boResultVariable = bo.get('camunda:resultVariable');

	      return { scriptResultVariable : boResultVariable };
	    },

	    set: function(element, values, containerElement) {
	      return CmdHelper_1.updateProperties(element, {
	        'camunda:resultVariable': values.scriptResultVariable.length
	          ? values.scriptResultVariable
	          : undefined
	      });
	    }

	  }));

	};

	var ErrorEventDefinition$1 = function(
	    group, element, bpmnFactory, errorEventDefinition,
	    showErrorCodeVariable, showErrorMessageVariable, translate
	) {


	  var getValue = function(modelProperty) {
	    return function(element) {
	      var modelPropertyValue = errorEventDefinition.get('camunda:' + modelProperty);

	      return modelPropertyValue;
	    };
	  };

	  var setValue = function(modelProperty) {
	    return function(element, values) {
	      if (values[modelProperty] === '')
	        values[modelProperty] = undefined;

	      return CmdHelper_1.updateBusinessObject(element, errorEventDefinition, values);
	    };
	  };


	  group.entries = group.entries.concat(
	    ElementReferenceProperty(element, errorEventDefinition, bpmnFactory, translate, {
	      id: 'error-element-message',
	      label: translate('Message'),
	      referenceProperty: 'errorRef',
	      modelProperty: 'errorMessage'
	    })
	  );

	  if (showErrorCodeVariable) {
	    group.entries.push(EntryFactory_1.validationAwareTextField(translate, {
	      id: 'errorCodeVariable',
	      label: translate('Code Variable'),
	      modelProperty : 'errorCodeVariable',
	      description: translate('Define the name of the variable that will contain the error code'),

	      getProperty: getValue('errorCodeVariable'),
	      setProperty: setValue('errorCodeVariable'),

	      validate: function(element, values) {
	        var validation = {},
	            targetValue = values.errorCodeVariable;

	        if (Utils.containsSpace(targetValue)) {
	          validation.errorCodeVariable = translate('Error code variable must not contain spaces.');
	        }

	        return validation;
	      }
	    }));
	  }

	  if (showErrorMessageVariable) {
	    group.entries.push(EntryFactory_1.validationAwareTextField(translate, {
	      id: 'errorMessageVariable',
	      label: translate('Message Variable'),
	      modelProperty: 'errorMessageVariable',

	      getProperty: getValue('errorMessageVariable'),
	      setProperty: setValue('errorMessageVariable'),
	      description: translate('Define the name of the variable that will contain the error message'),

	      validate: function(element, values) {
	        var validation = {},
	            targetValue = values.errorMessageVariable;

	        if (Utils.containsSpace(targetValue)) {
	          validation.errorMessageVariable = translate('Error message variable must not contain spaces.');
	        }

	        return validation;
	      }
	    }));
	  }

	};

	var is$w = require$$0$1.is;




	var ErrorEventProps = function(group, element, bpmnFactory, translate) {

	  var errorEvents = [
	    'bpmn:StartEvent',
	    'bpmn:BoundaryEvent',
	    'bpmn:EndEvent'
	  ];

	  forEach_1(errorEvents, function(event) {
	    if (is$w(element, event)) {

	      var errorEventDefinition = EventDefinitionHelper_1.getErrorEventDefinition(element);

	      if (errorEventDefinition) {
	        var isCatchingErrorEvent = is$w(element, 'bpmn:StartEvent') || is$w (element, 'bpmn:BoundaryEvent');

	        var showErrorCodeVariable = isCatchingErrorEvent,
	            showErrorMessageVariable = isCatchingErrorEvent;

	        ErrorEventDefinition$1(
	          group,
	          element,
	          bpmnFactory,
	          errorEventDefinition,
	          showErrorCodeVariable,
	          showErrorMessageVariable,
	          translate);
	      }
	    }
	  });
	};

	var getBusinessObject$t = require$$0$1.getBusinessObject;

	var domQuery$c = require$$1.query,
	    domClosest$3 = require$$1.closest,
	    domify$e = require$$1.domify;

	var escapeHTML$j = Utils.escapeHTML;

	function getSelectBox$1(node, id) {
	  var currentTab = domClosest$3(node, 'div.bpp-properties-tab');
	  var query = 'select[name=selectedExtensionElement]' + (id ? '[id=cam-extensionElements-' + id + ']' : '');
	  return domQuery$c(query, currentTab);
	}

	function getSelected(node, id) {
	  var selectBox = getSelectBox$1(node, id);
	  return {
	    value: (selectBox || {}).value,
	    idx: (selectBox || {}).selectedIndex
	  };
	}

	function generateElementId(prefix) {
	  prefix = prefix + '_';
	  return Utils.nextId(prefix);
	}

	var CREATE_EXTENSION_ELEMENT_ACTION = 'create-extension-element',
	    REMOVE_EXTENSION_ELEMENT_ACTION = 'remove-extension-element';

	var ExtensionElements = function(element, bpmnFactory, options, translate) {

	  var id = options.id,
	      prefix = options.prefix || 'elem',
	      label = options.label || id,
	      idGeneration = (options.idGeneration === false) ? options.idGeneration : true,
	      businessObject = options.businessObject || getBusinessObject$t(element);

	  var modelProperty = options.modelProperty || 'id';

	  var getElements = options.getExtensionElements;

	  var createElement = options.createExtensionElement,
	      canCreate = typeof createElement === 'function';

	  var removeElement = options.removeExtensionElement,
	      canRemove = typeof removeElement === 'function';

	  var onSelectionChange = options.onSelectionChange;

	  var hideElements = options.hideExtensionElements,
	      canBeHidden = typeof hideElements === 'function';

	  var setOptionLabelValue = options.setOptionLabelValue;

	  var defaultSize = options.size || 5,
	      resizable = options.resizable;

	  var reference = options.reference || undefined;

	  var selectionChanged = function(element, node, event, scope) {
	    if (typeof onSelectionChange === 'function') {
	      return onSelectionChange(element, node, event, scope);
	    }
	  };

	  var createOption = function(value) {
	    return '<option value="' + escapeHTML$j(value) + '" data-value data-name="extensionElementValue">' + escapeHTML$j(value) + '</option>';
	  };

	  var initSelectionSize = function(selectBox, optionsLength) {
	    if (resizable) {
	      selectBox.size = optionsLength > defaultSize ? optionsLength : defaultSize;
	    }
	  };

	  return {
	    id: id,
	    html: '<div class="bpp-row bpp-element-list" ' +
	            (canBeHidden ? 'data-show="hideElements"' : '') + '>' +
	            '<label for="cam-extensionElements-' + escapeHTML$j(id) + '">' + escapeHTML$j(label) + '</label>' +
	            '<div class="bpp-field-wrapper">' +
	              '<select id="cam-extensionElements-' + escapeHTML$j(id) + '"' +
	                      'name="selectedExtensionElement" ' +
	                      'size="' + escapeHTML$j(defaultSize) + '" ' +
	                      'data-list-entry-container ' +
	                      'data-on-change="selectElement">' +
	              '</select>' +
	              (canCreate ? '<button class="action-button add" ' +
	                                   'id="cam-extensionElements-create-' + escapeHTML$j(id) + '" ' +
	                                   'data-action="createElement">' +
	                             '<span>+</span>' +
	                           '</button>' : '') +
	              (canRemove ? '<button class="action-button clear" ' +
	                                   'id="cam-extensionElements-remove-' + escapeHTML$j(id) + '" ' +
	                                   'data-action="removeElement" ' +
	                                   'data-disable="disableRemove">' +
	                             '<span>-</span>' +
	                           '</button>' : '') +
	            '</div>' +
	          '</div>',

	    get: function(element, node) {
	      var elements = getElements(element, node);

	      var result = [];
	      forEach_1(elements, function(elem) {
	        result.push({
	          extensionElementValue: elem.get(modelProperty)
	        });
	      });

	      var selectBox = getSelectBox$1(node.parentNode, id);
	      initSelectionSize(selectBox, result.length);

	      return result;
	    },

	    set: function(element, values, node) {
	      var action = this.__action;
	      delete this.__action;

	      businessObject = businessObject || getBusinessObject$t(element);

	      var bo =
	        (reference && businessObject.get(reference))
	          ? businessObject.get(reference)
	          : businessObject;

	      var extensionElements = bo.get('extensionElements');

	      if (action.id === CREATE_EXTENSION_ELEMENT_ACTION) {
	        var commands = [];
	        if (!extensionElements) {
	          extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', { values: [] }, bo, bpmnFactory);
	          commands.push(CmdHelper_1.updateBusinessObject(element, bo, { extensionElements: extensionElements }));
	        }
	        commands.push(createElement(element, extensionElements, action.value, node));
	        return commands;

	      }
	      else if (action.id === REMOVE_EXTENSION_ELEMENT_ACTION) {
	        return removeElement(element, extensionElements, action.value, action.idx, node);
	      }

	    },

	    createListEntryTemplate: function(value, index, selectBox) {
	      initSelectionSize(selectBox, selectBox.options.length + 1);
	      return createOption(value.extensionElementValue);
	    },

	    deselect: function(element, node) {
	      var selectBox = getSelectBox$1(node, id);
	      selectBox.selectedIndex = -1;
	    },

	    getSelected: function(element, node) {
	      return getSelected(node, id);
	    },

	    setControlValue: function(element, node, option, property, value, idx) {
	      node.value = value;

	      if (!setOptionLabelValue) {
	        node.text = value;
	      } else {
	        setOptionLabelValue(element, node, option, property, value, idx);
	      }
	    },

	    createElement: function(element, node) {

	      // create option template
	      var generatedId;
	      if (idGeneration) {
	        generatedId = generateElementId(prefix);
	      }

	      var selectBox = getSelectBox$1(node, id);
	      var template = domify$e(createOption(generatedId));

	      // add new empty option as last child element
	      selectBox.appendChild(template);

	      // select last child element
	      selectBox.lastChild.selected = 'selected';
	      selectionChanged(element, node);

	      // update select box size
	      initSelectionSize(selectBox, selectBox.options.length);

	      this.__action = {
	        id: CREATE_EXTENSION_ELEMENT_ACTION,
	        value: generatedId
	      };

	      return true;
	    },

	    removeElement: function(element, node) {
	      var selection = getSelected(node, id);

	      var selectBox = getSelectBox$1(node, id);
	      selectBox.removeChild(selectBox.options[selection.idx]);

	      // update select box size
	      initSelectionSize(selectBox, selectBox.options.length);

	      this.__action = {
	        id: REMOVE_EXTENSION_ELEMENT_ACTION,
	        value: selection.value,
	        idx: selection.idx
	      };

	      return true;
	    },

	    hideElements: function(element, entryNode, node, scopeNode) {
	      return !hideElements(element, entryNode, node, scopeNode);
	    },

	    disableRemove: function(element, entryNode, node, scopeNode) {
	      return (getSelected(entryNode, id) || {}).idx < 0;
	    },

	    selectElement: selectionChanged
	  };

	};

	var getBusinessObject$u = require$$0$1.getBusinessObject,
	    is$x = require$$0$1.is;







	function generatePropertyId() {
	  return Utils.nextId('Property_');
	}

	/**
	 * Get all camunda:property objects for a specific business object
	 *
	 * @param  {ModdleElement} parent
	 *
	 * @return {Array<ModdleElement>} a list of camunda:property objects
	 */
	function getPropertyValues(parent) {
	  var properties = parent && getPropertiesElement(parent);
	  if (properties && properties.values) {
	    return properties.values;
	  }
	  return [];
	}

	/**
	 * Get all camunda:Properties object for a specific business object
	 *
	 * @param  {ModdleElement} parent
	 *
	 * @return {ModdleElement} a camunda:Properties object
	 */
	function getPropertiesElement(element) {
	  if (!isExtensionElements(element)) {
	    return element.properties;
	  } else {
	    return getPropertiesElementInsideExtensionElements(element);
	  }
	}

	/**
	 * Get first camunda:Properties object for a specific bpmn:ExtensionElements
	 * business object.
	 *
	 * @param {ModdleElement} extensionElements
	 *
	 * @return {ModdleElement} a camunda:Properties object
	 */
	function getPropertiesElementInsideExtensionElements(extensionElements) {
	  return find_1(extensionElements.values, function(elem) {
	    return is$x(elem, 'camunda:Properties');
	  });
	}

	/**
	 * Returns true, if the given business object is a bpmn:ExtensionElements.
	 *
	 * @param {ModdleElement} element
	 *
	 * @return {boolean} a boolean value
	 */
	function isExtensionElements(element) {
	  return is$x(element, 'bpmn:ExtensionElements');
	}

	/**
	 * Create a camunda:property entry using tableEntryFactory
	 *
	 * @param  {djs.model.Base} element
	 * @param  {BpmnFactory} bpmnFactory
	 * @param  {Object} options
	 * @param  {string} options.id
	 * @param  {Array<string>} options.modelProperties
	 * @param  {Array<string>} options.labels
	 * @param  {function} options.getParent Gets the parent business object
	 * @param  {function} options.show Indicate when the entry will be shown, should return boolean
	 */
	var Properties$1 = function(element, bpmnFactory, options, translate) {

	  var getParent = options.getParent;

	  var modelProperties = options.modelProperties,
	      createParent = options.createParent;

	  var bo = getBusinessObject$u(element);
	  if (is$x(element, 'bpmn:Participant')) {
	    bo = bo.get('processRef');
	  }

	  // build properties group only when the participant have a processRef
	  if (!bo) {
	    return;
	  }

	  assign_1(options, {
	    addLabel: translate('Add Property'),
	    getElements: function(element, node) {
	      var parent = getParent(element, node, bo);
	      return getPropertyValues(parent);
	    },
	    addElement: function(element, node) {
	      var commands = [],
	          parent = getParent(element, node, bo);

	      if (!parent && typeof createParent === 'function') {
	        var result = createParent(element, bo);
	        parent = result.parent;
	        commands.push(result.cmd);
	      }

	      var properties = getPropertiesElement(parent);
	      if (!properties) {
	        properties = ElementHelper_1.createElement('camunda:Properties', {}, parent, bpmnFactory);

	        if (!isExtensionElements(parent)) {
	          commands.push(CmdHelper_1.updateBusinessObject(element, parent, { 'properties': properties }));
	        } else {
	          commands.push(CmdHelper_1.addAndRemoveElementsFromList(
	            element,
	            parent,
	            'values',
	            'extensionElements',
	            [ properties ],
	            []
	          ));
	        }
	      }

	      var propertyProps = {};
	      forEach_1(modelProperties, function(prop) {
	        propertyProps[prop] = undefined;
	      });

	      // create id if necessary
	      if (modelProperties.indexOf('id') >= 0) {
	        propertyProps.id = generatePropertyId();
	      }

	      var property = ElementHelper_1.createElement('camunda:Property', propertyProps, properties, bpmnFactory);
	      commands.push(CmdHelper_1.addElementsTolist(element, properties, 'values', [ property ]));

	      return commands;
	    },
	    updateElement: function(element, value, node, idx) {
	      var parent = getParent(element, node, bo),
	          property = getPropertyValues(parent)[idx];

	      forEach_1(modelProperties, function(prop) {
	        value[prop] = value[prop] || undefined;
	      });

	      return CmdHelper_1.updateBusinessObject(element, property, value);
	    },
	    validate: function(element, value, node, idx) {

	      // validate id if necessary
	      if (modelProperties.indexOf('id') >= 0) {

	        var parent = getParent(element, node, bo),
	            properties = getPropertyValues(parent),
	            property = properties[idx];

	        if (property) {

	          // check if id is valid
	          var validationError = Utils.isIdValid(property, value.id, translate);

	          if (validationError) {
	            return { id: validationError };
	          }
	        }
	      }
	    },
	    removeElement: function(element, node, idx) {
	      var commands = [],
	          parent = getParent(element, node, bo),
	          properties = getPropertiesElement(parent),
	          propertyValues = getPropertyValues(parent),
	          currentProperty = propertyValues[idx];

	      commands.push(CmdHelper_1.removeElementsFromList(element, properties, 'values', null, [ currentProperty ]));

	      if (propertyValues.length === 1) {

	        // remove camunda:properties if the last existing property has been removed
	        if (!isExtensionElements(parent)) {
	          commands.push(CmdHelper_1.updateBusinessObject(element, parent, { properties: undefined }));
	        } else {
	          forEach_1(parent.values, function(value) {
	            if (is$x(value, 'camunda:Properties')) {
	              commands.push(ExtensionElementsHelper_1.removeEntry(bo, element, value));
	            }
	          });
	        }
	      }

	      return commands;
	    }
	  });

	  return EntryFactory_1.table(translate, options);
	};

	var getBusinessObject$v = require$$0$1.getBusinessObject,
	    getExtensionElements$2 = ExtensionElementsHelper_1.getExtensionElements;

	var FormHelper = {};

	var FormHelper_1 = FormHelper;

	/**
	 * Return form data from business object or undefined if none exist
	 *
	 * @param  {djs.model.Base} element
	 *
	 * @return {ModdleElement|undefined} formData
	 */
	FormHelper.getFormData = function(element) {
	  var bo = getBusinessObject$v(element);

	  var formData = getExtensionElements$2(bo, 'camunda:FormData');

	  if (typeof formData !== 'undefined') {
	    return formData[0];
	  }
	};


	/**
	 * Return all form fields existing in the business object, and
	 * an empty array if none exist.
	 *
	 * @param  {djs.model.Base} element
	 *
	 * @return {Array} a list of form field objects
	 */
	FormHelper.getFormFields = function(element) {
	  var formData = this.getFormData(element);

	  if (typeof formData === 'undefined') {
	    return [];
	  }

	  return formData.fields || [];
	};


	/**
	 * Get a form field from the business object at given index
	 *
	 * @param {djs.model.Base} element
	 * @param {number} idx
	 *
	 * @return {ModdleElement} the form field
	 */
	FormHelper.getFormField = function(element, idx) {

	  var formFields = this.getFormFields(element);

	  return formFields[idx];
	};


	/**
	 * Get all constraints for a specific form field from the business object
	 *
	 * @param  {ModdleElement} formField
	 *
	 * @return {Array<ModdleElement>} a list of constraint objects
	 */
	FormHelper.getConstraints = function(formField) {
	  if (formField && formField.validation && formField.validation.constraints) {
	    return formField.validation.constraints;
	  }
	  return [];
	};


	/**
	 * Get all camunda:value objects for a specific form field from the business object
	 *
	 * @param  {ModdleElement} formField
	 *
	 * @return {Array<ModdleElement>} a list of camunda:value objects
	 */
	FormHelper.getEnumValues = function(formField) {
	  if (formField && formField.values) {
	    return formField.values;
	  }
	  return [];
	};

	var getBusinessObject$w = require$$0$1.getBusinessObject,
	    getExtensionElements$3 = ExtensionElementsHelper_1.getExtensionElements,
	    removeEntry = ExtensionElementsHelper_1.removeEntry,
	    extensionElements = ExtensionElements,
	    is$y = require$$0$1.is;

	function generateValueId() {
	  return Utils.nextId('Value_');
	}

	/**
	 * Generate a form field specific textField using entryFactory.
	 *
	 * @param {Function} translate
	 * @param {string} options.id
	 * @param {string} options.label
	 * @param {string} options.modelProperty
	 * @param {Function} options.validate
	 *
	 * @return {Object} an entryFactory.textField object
	 */
	function formFieldTextField(translate, options, getSelectedFormField) {

	  var id = options.id,
	      label = options.label,
	      modelProperty = options.modelProperty,
	      validate = options.validate;

	  return EntryFactory_1.textField(translate, {
	    id: id,
	    label: label,
	    modelProperty: modelProperty,
	    get: function(element, node) {
	      var selectedFormField = getSelectedFormField(element, node) || {},
	          values = {};

	      values[modelProperty] = selectedFormField[modelProperty];

	      return values;
	    },

	    set: function(element, values, node) {
	      var commands = [];

	      if (typeof options.set === 'function') {
	        var cmd = options.set(element, values, node);

	        if (cmd) {
	          commands.push(cmd);
	        }
	      }

	      var formField = getSelectedFormField(element, node),
	          properties = {};

	      properties[modelProperty] = values[modelProperty] || undefined;

	      commands.push(CmdHelper_1.updateBusinessObject(element, formField, properties));

	      return commands;
	    },
	    hidden: function(element, node) {
	      return !getSelectedFormField(element, node);
	    },
	    validate: validate
	  });
	}

	function ensureFormKeyAndDataSupported(element) {
	  return (
	    is$y(element, 'bpmn:StartEvent') && !is$y(element.parent, 'bpmn:SubProcess')
	  ) || is$y(element, 'bpmn:UserTask');
	}

	var FormProps = function(group, element, bpmnFactory, translate) {

	  if (!ensureFormKeyAndDataSupported(element)) {
	    return;
	  }


	  /**
	   * Return the currently selected form field querying the form field select box
	   * from the DOM.
	   *
	   * @param  {djs.model.Base} element
	   * @param  {DOMElement} node - DOM element of any form field text input
	   *
	   * @return {ModdleElement} the currently selected form field
	   */
	  function getSelectedFormField(element, node) {
	    var selected = formFieldsEntry.getSelected(element, node.parentNode);

	    if (selected.idx === -1) {
	      return;
	    }

	    return FormHelper_1.getFormField(element, selected.idx);
	  }

	  // [FormKey] form key text input field
	  group.entries.push(EntryFactory_1.textField(translate, {
	    id : 'form-key',
	    label : translate('Form Key'),
	    modelProperty: 'formKey',
	    get: function(element, node) {
	      var bo = getBusinessObject$w(element);

	      return {
	        formKey: bo.get('camunda:formKey')
	      };
	    },
	    set: function(element, values, node) {
	      var bo = getBusinessObject$w(element),
	          formKey = values.formKey || undefined;

	      return CmdHelper_1.updateBusinessObject(element, bo, { 'camunda:formKey': formKey });
	    }
	  }));

	  // [FormData] form field select box
	  var formFieldsEntry = extensionElements(element, bpmnFactory, {
	    id: 'form-fields',
	    label: translate('Form Fields'),
	    modelProperty: 'id',
	    prefix: 'FormField',
	    createExtensionElement: function(element, extensionElements, value) {
	      var bo = getBusinessObject$w(element), commands = [];

	      if (!extensionElements) {
	        extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', { values: [] }, bo, bpmnFactory);
	        commands.push(CmdHelper_1.updateProperties(element, { extensionElements: extensionElements }));
	      }

	      var formData = FormHelper_1.getFormData(element);

	      if (!formData) {
	        formData = ElementHelper_1.createElement('camunda:FormData', { fields: [] }, extensionElements, bpmnFactory);
	        commands.push(CmdHelper_1.addAndRemoveElementsFromList(
	          element,
	          extensionElements,
	          'values',
	          'extensionElements',
	          [formData],
	          []
	        ));
	      }

	      var field = ElementHelper_1.createElement('camunda:FormField', { id: value }, formData, bpmnFactory);
	      if (typeof formData.fields !== 'undefined') {
	        commands.push(CmdHelper_1.addElementsTolist(element, formData, 'fields', [ field ]));
	      } else {
	        commands.push(CmdHelper_1.updateBusinessObject(element, formData, {
	          fields: [ field ]
	        }));
	      }
	      return commands;
	    },
	    removeExtensionElement: function(element, extensionElements, value, idx) {
	      var formData = getExtensionElements$3(getBusinessObject$w(element), 'camunda:FormData')[0],
	          entry = formData.fields[idx],
	          commands = [];

	      if (formData.fields.length < 2) {
	        commands.push(removeEntry(getBusinessObject$w(element), element, formData));
	      } else {
	        commands.push(CmdHelper_1.removeElementsFromList(element, formData, 'fields', null, [entry]));

	        if (entry.id === formData.get('businessKey')) {
	          commands.push(CmdHelper_1.updateBusinessObject(element, formData, { 'businessKey': undefined }));
	        }
	      }

	      return commands;
	    },
	    getExtensionElements: function(element) {
	      return FormHelper_1.getFormFields(element);
	    },
	    hideExtensionElements: function(element, node) {
	      return false;
	    }
	  });
	  group.entries.push(formFieldsEntry);

	  // [FormData] business key form field select box
	  var formBusinessKeyFormFieldEntry = EntryFactory_1.selectBox(translate, {
	    id: 'form-business-key',
	    label: translate('Business Key'),
	    modelProperty: 'businessKey',
	    selectOptions: function(element, inputNode) {
	      var selectOptions = [{ name: '', value: '' }];
	      var formFields = FormHelper_1.getFormFields(element);
	      forEach_1(formFields, function(field) {
	        if (field.type !== 'boolean') {
	          selectOptions.push({ name: field.id, value: field.id });
	        }
	      });
	      return selectOptions;
	    },
	    get: function(element, node) {
	      var result = { businessKey: '' };
	      var bo = getBusinessObject$w(element);
	      var formDataExtension = getExtensionElements$3(bo, 'camunda:FormData');
	      if (formDataExtension) {
	        var formData = formDataExtension[0];
	        var storedValue = formData.get('businessKey');
	        result = { businessKey: storedValue };
	      }
	      return result;
	    },
	    set: function(element, values, node) {
	      var formData = getExtensionElements$3(getBusinessObject$w(element), 'camunda:FormData')[0];
	      return CmdHelper_1.updateBusinessObject(element, formData, { 'businessKey': values.businessKey || undefined });
	    },
	    hidden: function(element, node) {
	      var isStartEvent = is$y(element,'bpmn:StartEvent');
	      return !(isStartEvent && FormHelper_1.getFormFields(element).length > 0);
	    }
	  });
	  group.entries.push(formBusinessKeyFormFieldEntry);

	  // [FormData] Form Field label
	  group.entries.push(EntryFactory_1.label({
	    id: 'form-field-header',
	    labelText: translate('Form Field'),
	    showLabel: function(element, node) {
	      return !!getSelectedFormField(element, node);
	    }
	  }));

	  // [FormData] form field id text input field
	  group.entries.push(EntryFactory_1.validationAwareTextField(translate, {
	    id: 'form-field-id',
	    label: translate('ID (process variable name)'),
	    modelProperty: 'id',

	    getProperty: function(element, node) {
	      var selectedFormField = getSelectedFormField(element, node) || {};

	      return selectedFormField.id;
	    },

	    setProperty: function(element, properties, node) {
	      var formField = getSelectedFormField(element, node);

	      return CmdHelper_1.updateBusinessObject(element, formField, properties);
	    },

	    hidden: function(element, node) {
	      return !getSelectedFormField(element, node);
	    },

	    validate: function(element, values, node) {

	      var formField = getSelectedFormField(element, node);

	      if (formField) {

	        var idValue = values.id;

	        if (!idValue || idValue.trim() === '') {
	          return { id: 'Form field id must not be empty' };
	        }

	        var formFields = FormHelper_1.getFormFields(element);

	        var existingFormField = find_1(formFields, function(f) {
	          return f !== formField && f.id === idValue;
	        });

	        if (existingFormField) {
	          return { id: 'Form field id already used in form data.' };
	        }
	      }
	    }
	  }));

	  // [FormData] form field type combo box
	  group.entries.push(EntryFactory_1.comboBox(translate, {
	    id: 'form-field-type',
	    label: translate('Type'),
	    selectOptions: [
	      { name: 'string', value: 'string' },
	      { name: 'long', value: 'long' },
	      { name: 'boolean', value: 'boolean' },
	      { name: 'date', value: 'date' },
	      { name: 'enum', value: 'enum' }
	    ],
	    modelProperty: 'type',
	    emptyParameter: true,

	    get: function(element, node) {
	      var selectedFormField = getSelectedFormField(element, node);

	      if (selectedFormField) {
	        return { type: selectedFormField.type };
	      } else {
	        return {};
	      }
	    },
	    set: function(element, values, node) {
	      var selectedFormField = getSelectedFormField(element, node),
	          formData = getExtensionElements$3(getBusinessObject$w(element), 'camunda:FormData')[0],
	          commands = [];

	      if (selectedFormField.type === 'enum' && values.type !== 'enum') {

	        // delete camunda:value objects from formField.values when switching from type enum
	        commands.push(CmdHelper_1.updateBusinessObject(element, selectedFormField, { values: undefined }));
	      }
	      if (values.type === 'boolean' && selectedFormField.get('id') === formData.get('businessKey')) {
	        commands.push(CmdHelper_1.updateBusinessObject(element, formData, { 'businessKey': undefined }));
	      }
	      commands.push(CmdHelper_1.updateBusinessObject(element, selectedFormField, values));

	      return commands;
	    },
	    hidden: function(element, node) {
	      return !getSelectedFormField(element, node);
	    }
	  }));

	  // [FormData] form field label text input field
	  group.entries.push(formFieldTextField(translate, {
	    id: 'form-field-label',
	    label: translate('Label'),
	    modelProperty: 'label'
	  }, getSelectedFormField));

	  // [FormData] form field defaultValue text input field
	  group.entries.push(formFieldTextField(translate, {
	    id: 'form-field-defaultValue',
	    label: translate('Default Value'),
	    modelProperty: 'defaultValue'
	  }, getSelectedFormField));


	  // [FormData] form field enum values label
	  group.entries.push(EntryFactory_1.label({
	    id: 'form-field-enum-values-header',
	    labelText: translate('Values'),
	    divider: true,
	    showLabel: function(element, node) {
	      var selectedFormField = getSelectedFormField(element, node);

	      return selectedFormField && selectedFormField.type === 'enum';
	    }
	  }));

	  // [FormData] form field enum values table
	  group.entries.push(EntryFactory_1.table(translate, {
	    id: 'form-field-enum-values',
	    labels: [ translate('Id'), translate('Name') ],
	    modelProperties: [ 'id', 'name' ],
	    show: function(element, node) {
	      var selectedFormField = getSelectedFormField(element, node);

	      return selectedFormField && selectedFormField.type === 'enum';
	    },
	    getElements: function(element, node) {
	      var selectedFormField = getSelectedFormField(element, node);

	      return FormHelper_1.getEnumValues(selectedFormField);
	    },
	    addElement: function(element, node) {
	      var selectedFormField = getSelectedFormField(element, node),
	          id = generateValueId();

	      var enumValue = ElementHelper_1.createElement(
	        'camunda:Value',
	        { id: id, name: undefined },
	        getBusinessObject$w(element),
	        bpmnFactory
	      );

	      return CmdHelper_1.addElementsTolist(element, selectedFormField, 'values', [enumValue]);
	    },
	    removeElement: function(element, node, idx) {
	      var selectedFormField = getSelectedFormField(element, node),
	          enumValue = selectedFormField.values[idx];

	      return CmdHelper_1.removeElementsFromList(element, selectedFormField, 'values', null, [enumValue]);
	    },
	    updateElement: function(element, value, node, idx) {
	      var selectedFormField = getSelectedFormField(element, node),
	          enumValue = selectedFormField.values[idx];

	      value.name = value.name || undefined;
	      return CmdHelper_1.updateBusinessObject(element, enumValue, value);
	    },
	    validate: function(element, value, node, idx) {

	      var selectedFormField = getSelectedFormField(element, node),
	          enumValue = selectedFormField.values[idx];

	      if (enumValue) {

	        // check if id is valid
	        var validationError = Utils.isIdValid(enumValue, value.id, translate);

	        if (validationError) {
	          return { id: validationError };
	        }
	      }
	    }
	  }));

	  // [FormData] Validation label
	  group.entries.push(EntryFactory_1.label({
	    id: 'form-field-validation-header',
	    labelText: translate('Validation'),
	    divider: true,
	    showLabel: function(element, node) {
	      return !!getSelectedFormField(element, node);
	    }
	  }));

	  // [FormData] form field constraints table
	  group.entries.push(EntryFactory_1.table(translate, {
	    id: 'constraints-list',
	    modelProperties: [ 'name', 'config' ],
	    labels: [ translate('Name'), translate('Config') ],
	    addLabel: translate('Add Constraint'),
	    getElements: function(element, node) {
	      var formField = getSelectedFormField(element, node);

	      return FormHelper_1.getConstraints(formField);
	    },
	    addElement: function(element, node) {

	      var commands = [],
	          formField = getSelectedFormField(element, node),
	          validation = formField.validation;

	      if (!validation) {

	        // create validation business object and add it to form data, if it doesn't exist
	        validation = ElementHelper_1.createElement('camunda:Validation', {}, getBusinessObject$w(element), bpmnFactory);

	        commands.push(CmdHelper_1.updateBusinessObject(element, formField, { 'validation': validation }));
	      }

	      var newConstraint = ElementHelper_1.createElement(
	        'camunda:Constraint',
	        { name: undefined, config: undefined },
	        validation,
	        bpmnFactory
	      );

	      commands.push(CmdHelper_1.addElementsTolist(element, validation, 'constraints', [ newConstraint ]));

	      return commands;
	    },
	    updateElement: function(element, value, node, idx) {
	      var formField = getSelectedFormField(element, node),
	          constraint = FormHelper_1.getConstraints(formField)[idx];

	      value.name = value.name || undefined;
	      value.config = value.config || undefined;

	      return CmdHelper_1.updateBusinessObject(element, constraint, value);
	    },
	    removeElement: function(element, node, idx) {
	      var commands = [],
	          formField = getSelectedFormField(element, node),
	          constraints = FormHelper_1.getConstraints(formField),
	          currentConstraint = constraints[idx];

	      commands.push(CmdHelper_1.removeElementsFromList(
	        element,
	        formField.validation,
	        'constraints',
	        null,
	        [ currentConstraint ]
	      ));

	      if (constraints.length === 1) {

	        // remove camunda:validation if the last existing constraint has been removed
	        commands.push(CmdHelper_1.updateBusinessObject(element, formField, { validation: undefined }));
	      }

	      return commands;
	    },
	    show: function(element, node) {
	      return !!getSelectedFormField(element, node);
	    }
	  }));

	  // [FormData] Properties label
	  group.entries.push(EntryFactory_1.label({
	    id: 'form-field-properties-header',
	    labelText: translate('Properties'),
	    divider: true,
	    showLabel: function(element, node) {
	      return !!getSelectedFormField(element, node);
	    }
	  }));

	  // [FormData] camunda:properties table
	  group.entries.push(Properties$1(element, bpmnFactory, {
	    id: 'form-field-properties',
	    modelProperties: [ 'id', 'value' ],
	    labels: [ translate('Id'), translate('Value') ],
	    getParent: function(element, node) {
	      return getSelectedFormField(element, node);
	    },
	    show: function(element, node) {
	      return !!getSelectedFormField(element, node);
	    }
	  }, translate));
	};

	var is$z = require$$0$1.is,
	    getBusinessObject$x = require$$0$1.getBusinessObject;


	var StartEventInitiator = function(group, element, translate) {

	  var bo = getBusinessObject$x(element);

	  if (!bo) {
	    return;
	  }

	  if (is$z(element, 'camunda:Initiator') && !is$z(element.parent, 'bpmn:SubProcess')) {
	    group.entries.push(EntryFactory_1.textField(translate, {
	      id: 'initiator',
	      label: translate('Initiator'),
	      modelProperty: 'initiator'
	    }));
	  }
	};

	var is$A = require$$0$1.is,
	    isAny$6 = require$$1$3.isAny,
	    getBusinessObject$y = require$$0$1.getBusinessObject;









	/**
	  * return depend on parameter 'type' camunda:in or camunda:out extension elements
	  */
	function getCamundaInOutMappings(element, type) {
	  var bo = getBusinessObject$y(element);

	  var signalEventDefinition = EventDefinitionHelper_1.getSignalEventDefinition(bo);

	  return ExtensionElementsHelper_1.getExtensionElements(signalEventDefinition || bo, type) || [];
	}

	/**
	  * return depend on parameter 'type' camunda:in or camunda:out extension elements
	  * with source or sourceExpression attribute
	  */
	function getVariableMappings(element, type) {
	  var camundaMappings = getCamundaInOutMappings(element, type);

	  return filter_1(camundaMappings, function(mapping) {
	    return !mapping.businessKey;
	  });
	}

	function getInOutType(mapping) {
	  var inOutType = 'source';

	  if (mapping.variables === 'all') {
	    inOutType = 'variables';
	  }
	  else if (typeof mapping.source !== 'undefined') {
	    inOutType = 'source';
	  }
	  else if (typeof mapping.sourceExpression !== 'undefined') {
	    inOutType = 'sourceExpression';
	  }

	  return inOutType;
	}

	var CAMUNDA_IN_EXTENSION_ELEMENT = 'camunda:In',
	    CAMUNDA_OUT_EXTENSION_ELEMENT = 'camunda:Out';

	var WHITESPACE_REGEX = /\s/;


	var VariableMappingProps = function(group, element, bpmnFactory, translate) {

	  var inOutTypeOptions = [
	    {
	      name: translate('Source'),
	      value: 'source'
	    },
	    {
	      name: translate('Source Expression'),
	      value: 'sourceExpression'
	    },
	    {
	      name: translate('All'),
	      value: 'variables'
	    }
	  ];

	  var signalEventDefinition = EventDefinitionHelper_1.getSignalEventDefinition(element);

	  if (!is$A(element, 'camunda:CallActivity') && !signalEventDefinition) {
	    return;
	  }

	  if (signalEventDefinition && !(isAny$6(element, [
	    'bpmn:IntermediateThrowEvent',
	    'bpmn:EndEvent'
	  ]))) {
	    return;
	  }

	  var isSelected = function(element, node) {
	    return !!getSelected(element, node);
	  };

	  var getSelected = function(element, node) {
	    var parentNode = node.parentNode;
	    var selection = inEntry.getSelected(element, parentNode);

	    var parameter = getVariableMappings(element, CAMUNDA_IN_EXTENSION_ELEMENT)[selection.idx];

	    if (!parameter && outEntry) {
	      selection = outEntry.getSelected(element, parentNode);
	      parameter = getVariableMappings(element, CAMUNDA_OUT_EXTENSION_ELEMENT)[selection.idx];
	    }

	    return parameter;
	  };

	  var setOptionLabelValue = function(type) {
	    return function(element, node, option, property, value, idx) {
	      var variableMappings = getVariableMappings(element, type);
	      var mappingValue = variableMappings[idx];
	      var label = (mappingValue.target || '<undefined>') + ' := ';
	      var mappingType = getInOutType(mappingValue);

	      if (mappingType === 'variables') {
	        label = 'all';
	      }
	      else if (mappingType === 'source') {
	        label = label + (mappingValue.source || '<empty>');
	      }
	      else if (mappingType === 'sourceExpression') {
	        label = label + (mappingValue.sourceExpression || '<empty>');
	      } else {
	        label = label + '<empty>';
	      }

	      option.text = label;
	    };
	  };

	  var newElement = function(type) {
	    return function(element, extensionElements, value) {
	      var newElem = ElementHelper_1.createElement(type, { source: '' }, extensionElements, bpmnFactory);

	      return CmdHelper_1.addElementsTolist(element, extensionElements, 'values', [ newElem ]);
	    };
	  };

	  var removeElement = function(type) {
	    return function(element, extensionElements, value, idx) {
	      var variablesMappings= getVariableMappings(element, type);
	      var mapping = variablesMappings[idx];

	      if (mapping) {
	        return ExtensionElementsHelper_1
	          .removeEntry(signalEventDefinition || getBusinessObject$y(element), element, mapping);
	      }
	    };
	  };

	  // in mapping for source and sourceExpression ///////////////////////////////////////////////////////////////

	  var inEntry = ExtensionElements(element, bpmnFactory, {
	    id: 'variableMapping-in',
	    label: translate('In Mapping'),
	    modelProperty: 'source',
	    prefix: 'In',
	    idGeneration: false,
	    resizable: true,
	    businessObject: signalEventDefinition || getBusinessObject$y(element),

	    createExtensionElement: newElement(CAMUNDA_IN_EXTENSION_ELEMENT),
	    removeExtensionElement: removeElement(CAMUNDA_IN_EXTENSION_ELEMENT),

	    getExtensionElements: function(element) {
	      return getVariableMappings(element, CAMUNDA_IN_EXTENSION_ELEMENT);
	    },

	    onSelectionChange: function(element, node, event, scope) {
	      outEntry && outEntry.deselect(element, node.parentNode);
	    },

	    setOptionLabelValue: setOptionLabelValue(CAMUNDA_IN_EXTENSION_ELEMENT)
	  });
	  group.entries.push(inEntry);

	  // out mapping for source and sourceExpression ///////////////////////////////////////////////////////

	  if (!signalEventDefinition) {
	    var outEntry = ExtensionElements(element, bpmnFactory, {
	      id: 'variableMapping-out',
	      label: translate('Out Mapping'),
	      modelProperty: 'source',
	      prefix: 'Out',
	      idGeneration: false,
	      resizable: true,

	      createExtensionElement: newElement(CAMUNDA_OUT_EXTENSION_ELEMENT),
	      removeExtensionElement: removeElement(CAMUNDA_OUT_EXTENSION_ELEMENT),

	      getExtensionElements: function(element) {
	        return getVariableMappings(element, CAMUNDA_OUT_EXTENSION_ELEMENT);
	      },

	      onSelectionChange: function(element, node, event, scope) {
	        inEntry.deselect(element, node.parentNode);
	      },

	      setOptionLabelValue: setOptionLabelValue(CAMUNDA_OUT_EXTENSION_ELEMENT)
	    });
	    group.entries.push(outEntry);
	  }

	  // label for selected mapping ///////////////////////////////////////////////////////

	  group.entries.push(EntryFactory_1.label({
	    id: 'variableMapping-typeLabel',
	    get: function(element, node) {
	      var mapping = getSelected(element, node);

	      var value = '';
	      if (is$A(mapping, CAMUNDA_IN_EXTENSION_ELEMENT)) {
	        value = translate('In Mapping');
	      }
	      else if (is$A(mapping, CAMUNDA_OUT_EXTENSION_ELEMENT)) {
	        value = translate('Out Mapping');
	      }

	      return {
	        label: value
	      };
	    },

	    showLabel: function(element, node) {
	      return isSelected(element, node);
	    }
	  }));


	  group.entries.push(EntryFactory_1.selectBox(translate, {
	    id: 'variableMapping-inOutType',
	    label: translate('Type'),
	    selectOptions: inOutTypeOptions,
	    modelProperty: 'inOutType',
	    get: function(element, node) {
	      var mapping = getSelected(element, node) || {};
	      return {
	        inOutType: getInOutType(mapping)
	      };
	    },
	    set: function(element, values, node) {
	      var inOutType = values.inOutType;

	      var props = {
	        'source' : undefined,
	        'sourceExpression' : undefined,
	        'variables' : undefined
	      };

	      if (inOutType === 'source') {
	        props.source = '';
	      }
	      else if (inOutType === 'sourceExpression') {
	        props.sourceExpression = '';
	      }
	      else if (inOutType === 'variables') {
	        props.variables = 'all';
	        props.target = undefined;
	      }

	      var mapping = getSelected(element, node);
	      return CmdHelper_1.updateBusinessObject(element, mapping, props);
	    },
	    hidden: function(element, node) {
	      return !isSelected(element, node);
	    }

	  }));


	  group.entries.push(EntryFactory_1.textField(translate, {
	    id: 'variableMapping-source',
	    dataValueLabel: 'sourceLabel',
	    modelProperty: 'source',
	    get: function(element, node) {
	      var mapping = getSelected(element, node) || {};

	      var label = '';
	      var inOutType = getInOutType(mapping);
	      if (inOutType === 'source') {
	        label = translate('Source');
	      }
	      else if (inOutType === 'sourceExpression') {
	        label = translate('Source Expression');
	      }

	      return {
	        source: mapping[inOutType],
	        sourceLabel: label
	      };
	    },
	    set: function(element, values, node) {
	      values.source = values.source || undefined;

	      var mapping = getSelected(element, node);
	      var inOutType = getInOutType(mapping);

	      var props = {};
	      props[inOutType] = values.source || '';

	      return CmdHelper_1.updateBusinessObject(element, mapping, props);
	    },

	    // one of both (source or sourceExpression) must have a value to make
	    // the configuration easier and more understandable
	    // it is not engine conform
	    validate: function(element, values, node) {
	      var mapping = getSelected(element, node);

	      var validation = {};
	      if (mapping) {
	        if (!values.source) {
	          validation.source =
	          validation.source = values.sourceLabel ?
	            translate('Mapping must have a {value}', { value: values.sourceLabel.toLowerCase() }) :
	            translate('Mapping must have a value');
	        }

	        var inOutType = getInOutType(mapping);

	        if (WHITESPACE_REGEX.test(values.source) && inOutType !== 'sourceExpression') {
	          validation.source = translate('{label} must not contain whitespace', { label: values.sourceLabel });
	        }
	      }

	      return validation;
	    },
	    hidden: function(element, node) {
	      var selectedMapping = getSelected(element, node);
	      return !selectedMapping || (selectedMapping && selectedMapping.variables);
	    }
	  }));


	  group.entries.push(EntryFactory_1.textField(translate, {
	    id: 'variableMapping-target',
	    label: translate('Target'),
	    modelProperty: 'target',
	    get: function(element, node) {
	      return {
	        target: (getSelected(element, node) || {}).target
	      };
	    },
	    set: function(element, values, node) {
	      values.target = values.target || undefined;
	      var mapping = getSelected(element, node);
	      return CmdHelper_1.updateBusinessObject(element, mapping, values);
	    },
	    validate: function(element, values, node) {
	      var mapping = getSelected(element, node);

	      var validation = {};
	      if (mapping) {
	        var mappingType = getInOutType(mapping);

	        if (!values.target && mappingType !== 'variables') {
	          validation.target = translate('Mapping must have a target');
	        }

	        if (values.target
	          && WHITESPACE_REGEX.test(values.target)
	          && mappingType !== 'variables') {
	          validation.target = translate('Target must not contain whitespace');
	        }
	      }

	      return validation;
	    },
	    hidden: function(element, node) {
	      var selectedMapping = getSelected(element, node);
	      return !selectedMapping || (selectedMapping && selectedMapping.variables);
	    }
	  }));


	  group.entries.push(EntryFactory_1.checkbox(translate, {
	    id: 'variableMapping-local',
	    label: translate('Local'),
	    modelProperty: 'local',
	    get: function(element, node) {
	      return {
	        local: (getSelected(element, node) || {}).local
	      };
	    },
	    set: function(element, values, node) {
	      values.local = values.local || false;
	      var mapping = getSelected(element, node);
	      return CmdHelper_1.updateBusinessObject(element, mapping, values);
	    },
	    hidden: function(element, node) {
	      return !isSelected(element, node);
	    }
	  }));

	};

	var is$B = require$$0$1.is,
	    getBusinessObject$z = require$$0$1.getBusinessObject;

	var VersionTagProps = function(group, element, translate) {

	  var bo = getBusinessObject$z(element);

	  if (!bo) {
	    return;
	  }

	  if (is$B(element, 'bpmn:Process') || is$B(element, 'bpmn:Participant') && bo.get('processRef')) {
	    var versionTagEntry = EntryFactory_1.textField(translate, {
	      id: 'versionTag',
	      label: translate('Version Tag'),
	      modelProperty: 'versionTag'
	    });

	    // in participants we have to change the default behavior of set and get
	    if (is$B(element, 'bpmn:Participant')) {
	      versionTagEntry.get = function(element) {
	        var processBo = bo.get('processRef');

	        return {
	          versionTag: processBo.get('camunda:versionTag')
	        };
	      };

	      versionTagEntry.set = function(element, values) {
	        var processBo = bo.get('processRef');

	        return CmdHelper_1.updateBusinessObject(element, processBo, {
	          'camunda:versionTag': values.versionTag || undefined
	        });
	      };
	    }

	    group.entries.push(versionTagEntry);

	  }
	};

	/**
	 * Get a inputOutput from the business object
	 *
	 * @param {ModdleElement} element
	 *
	 * @return {ModdleElement} the inputOutput object
	 */
	function getInputOutput(element) {
	  return (getElements$1(element, 'camunda:InputOutput') || [])[0];
	}

	/**
	 * Return all input parameters existing in the business object, and
	 * an empty array if none exist.
	 *
	 * @param  {ModdleElement} element
	 *
	 * @return {Array<ModdleElement>} a list of input parameter objects
	 */
	function getInputParameters(element) {
	  return getParameters$1(element, 'inputParameters');
	}

	/**
	 * Return all output parameters existing in the business object, and
	 * an empty array if none exist.
	 *
	 * @param  {ModdleElement} element
	 * @param  {boolean} insideConnector
	 *
	 * @return {Array<ModdleElement>} a list of output parameter objects
	 */
	function getOutputParameters(element) {
	  return getParameters$1(element, 'outputParameters');
	}

	/**
	 * Return all form fields existing in the business object, and
	 * an empty array if none exist.
	 *
	 * @param {ModdleElement} element
	 *
	 * @return {Array<ModdleElement>} a list of form fields
	 */
	function getFormFields(element) {
	  var formData = getFormData(element);
	  return (formData && formData.get('fields')) || [];
	}

	/**
	 * Return form data existing in the business object
	 *
	 * @param {ModdleElement} element
	 *
	 * @return {ModdleElement}
	 */
	function getFormData(element) {
	  return (getElements$1(element, 'camunda:FormData') || [])[0];
	}

	/**
	 * Return out mappings existing in the business object
	 *
	 * @param {ModdleElement} element
	 *
	 * @return {Array<ModdleElement>}
	 */
	function getOutMappings(element) {
	  return getElements$1(element, 'camunda:Out') || [];
	}


	// helpers //////////

	function getElements$1(element, type, property) {
	  var elements = getExtensionElements$4(element, type) || [];

	  return !property ? elements : (elements[0] || {})[property] || [];
	}

	function getParameters$1(element, property) {
	  var inputOutput = getInputOutput(element);

	  return (inputOutput && inputOutput.get(property)) || [];
	}

	function getExtensionElements$4(element, type) {
	  var extensionElements = element.get('extensionElements');

	  if (typeof extensionElements !== 'undefined') {
	    var extensionValues = extensionElements.get('values');

	    if (typeof extensionValues !== 'undefined') {
	      var elements = filter(extensionValues, function(value) {
	        return is$C(value, type);
	      });

	      if (elements.length) {
	        return elements;
	      }
	    }
	  }
	}

	function is$C(element, type) {
	  return (
	    element &&
	    typeof element.$instanceOf === 'function' &&
	    element.$instanceOf(type)
	  );
	}

	/**
	 * Get all parent elements for a given element.
	 *
	 * @param {ModdleElement|string} element
	 *
	 * @returns {Array<ModdleElement>}
	 */
	function getParents$2(element) {
	  var parents = [];
	  var current = element;

	  while (current.$parent) {
	    parents.push(current.$parent);
	    current = current.$parent;
	  }

	  return parents;
	}

	/**
	 * Iterate over each element in a collection, calling the iterator function `fn`
	 * with (element, index, recursionDepth).
	 *
	 * Recurse into all elements that are returned by `fn`.
	 *
	 * @param  {Object|Array<Object>} elements
	 * @param  {Function} fn iterator function called with (element, index, recursionDepth)
	 * @param  {number} [depth] maximum recursion depth
	 */
	function eachElement$1(elements, fn, depth) {
	  depth = depth || 0;

	  if (!isArray(elements)) {
	    elements = [elements];
	  }

	  forEach(elements, function(s, i) {
	    var filter = fn(s, i, depth);

	    if (isArray(filter) && filter.length) {
	      eachElement$1(filter, fn, depth + 1);
	    }
	  });
	}

	/**
	 * Adds an element to a collection and returns true if the
	 * element was added.
	 *
	 * @param {Array<Object>} elements
	 * @param {Object} e
	 * @param {boolean} unique
	 */
	function add$2(elements, e, unique) {
	  var canAdd = !unique || elements.indexOf(e) === -1;

	  if (canAdd) {
	    elements.push(e);
	  }

	  return canAdd;
	}

	/**
	 * Collects self + flow elements up to a given depth from a list of elements.
	 *
	 * @param  {ModdleElement|Array<ModdleElement>} elements the elements to select the flowElements from
	 * @param  {boolean} unique whether to return a unique result set (no duplicates)
	 * @param  {number} maxDepth the depth to search through or -1 for infinite
	 *
	 * @return {Array<ModdleElement>} found elements
	 */
	function selfAndFlowElements(elements, unique, maxDepth) {
	  var result = [],
	      processedFlowElements = [];

	  eachElement$1(elements, function(element, i, depth) {
	    add$2(result, element, unique);

	    var flowElements = element.flowElements;

	    // max traversal depth not reached yet
	    if (maxDepth === -1 || depth < maxDepth) {

	      // flowElements exist && flowElements not yet processed
	      if (flowElements && add$2(processedFlowElements, flowElements, unique)) {
	        return flowElements;
	      }
	    }
	  });

	  return result;
	}

	/**
	 * Return self + ALL flowElements for a number of elements
	 *
	 * @param  {Array<ModdleElement>} elements to query
	 * @param  {boolean} allowDuplicates to allow duplicates in the result set
	 *
	 * @return {Array<ModdleElement>} the collected elements
	 */
	function selfAndAllFlowElements(elements, allowDuplicates) {
	  return selfAndFlowElements(elements, !allowDuplicates, -1);
	}

	/**
	 * Return full moddle element for given element id
	 *
	 * @param {string} elementId
	 * @param {ModdleElement} rootElement
	 *
	 * @returns {ModdleElement}
	 */
	function getElement(elementId, rootElement) {
	  var allElements = selfAndAllFlowElements(rootElement);

	  return find(allElements, function(element) {
	    return element.id === elementId;
	  });
	}

	function addVariableToList(variablesList, newVariable) {
	  var foundIdx = findIndex(variablesList, function(variable) {
	    return (
	      variable.name === newVariable.name && variable.scope === newVariable.scope
	    );
	  });

	  if (foundIdx >= 0) {
	    variablesList[foundIdx].origin = combineArrays(
	      variablesList[foundIdx].origin,
	      newVariable.origin
	    );
	  } else {
	    variablesList.push(newVariable);
	  }
	}

	/**
	 * Creates new process variable definition object
	 * Identifies correct (highest) scope, in which variable is available
	 *
	 * @param {ModdleElement} flowElement
	 * @param {String} name
	 * @param {ModdleElement} defaultScope
	 *
	 * @returns {ProcessVariable}
	 */
	function createProcessVariable(flowElement, name, defaultScope) {
	  var scope = getScope(flowElement, defaultScope, name);

	  return {
	    name: name,
	    origin: [flowElement],
	    scope: scope,
	  };
	}


	// helpers ////////////////////

	/**
	 * Set parent container if it defines it's own scope for the variable, so
	 * when it defines an input mapping for it. Otherwise returns the default global scope
	 */
	function getScope(element, globalScope, variableName) {
	  var parents = getParents$2(element);

	  var scopedParent = find(parents, function(parent) {
	    return (
	      is$1$1(parent, 'bpmn:SubProcess') && hasInputParameter(parent, variableName)
	    );
	  });

	  return scopedParent ? scopedParent : globalScope;
	}

	function is$1$1(element, type) {
	  return (
	    element &&
	      typeof element.$instanceOf === 'function' &&
	      element.$instanceOf(type)
	  );
	}

	function hasInputParameter(element, name) {
	  return find(getInputParameters(element), function(input) {
	    return input.name === name;
	  });
	}

	function combineArrays(a, b) {
	  return a.concat(b);
	}

	/**
	 * Retrieves process variables defined in output parameters, e.g.
	 *
	 * <camunda:inputOutput>
	 *   <camunda:outputParameter name="variable1">200</camunda:outputParameter>
	 *   <camunda:outputParameter name="variable2">${myLocalVar + 20}</camunda:outputParameter>
	 * </camunda:inputOutput>
	 *
	 * => Adds two variables "variable1" & "variable2" to the list.
	 *
	 */
	function extractOutputParameters(options) {
	  var elements = options.elements,
	      containerElement = options.containerElement,
	      processVariables = options.processVariables;

	  if (!isArray(elements)) {
	    elements = [ elements ];
	  }

	  forEach(elements, function(element) {

	    // variables are created by output parameters
	    var outputParameters = getOutputParameters(element);

	    // extract all variables with correct scope
	    forEach(outputParameters, function(parameter) {
	      var newVariable = createProcessVariable(
	        element,
	        parameter.name,
	        containerElement
	      );

	      addVariableToList(processVariables, newVariable);
	    });
	  });

	  return processVariables;
	}

	/**
	 * Retrieves process variables defined in result variables, e.g.
	 *
	 * <bpmn:sendTask
	 *   id="SendTask_1"
	 *   camunda:expression="${myBean.ready}"
	 *   camunda:resultVariable="variable1"
	 * />
	 *
	 * => Adds one variable "variable1"to the list.
	 *
	 */
	function extractResultVariables(options) {
	  var elements = options.elements,
	      containerElement = options.containerElement,
	      processVariables = options.processVariables;

	  if (!isArray(elements)) {
	    elements = [ elements ];
	  }

	  forEach(elements, function(element) {

	    var resultVariable = getResultVariable(element);

	    if (resultVariable) {
	      var newVariable = createProcessVariable(
	        element,
	        resultVariable,
	        containerElement
	      );

	      addVariableToList(processVariables, newVariable);
	    }
	  });

	  return processVariables;
	}


	// helpers ///////////////////////

	function getResultVariable(element) {
	  return element.get('camunda:resultVariable');
	}

	/**
	 * Retrieves process variables defined in form fields, e.g.
	 *
	 * <camunda:formData>
	 *   <camunda:formField id="variable1" />
	 *   <camunda:formField id="variable2" />
	 * </camunda:formData>
	 *
	 * => Adds two variables "variable1" & "variable2" to the list.
	 *
	 */
	function extractFormFields(options) {
	  var elements = options.elements,
	      containerElement = options.containerElement,
	      processVariables = options.processVariables;

	  if (!isArray(elements)) {
	    elements = [ elements ];
	  }

	  forEach(elements, function(element) {

	    var formFields = getFormFields(element);

	    // extract all variables with correct scope
	    forEach(formFields, function(field) {
	      var newVariable = createProcessVariable(
	        element,
	        field.id,
	        containerElement
	      );

	      addVariableToList(processVariables, newVariable);
	    });
	  });

	  return processVariables;
	}

	/**
	 * Retrieves process variables defined in output mappings and
	 * ignores local variables, e.g.
	 *
	 * <bpmn:extensionElements>
	 *   <camunda:out sourceExpression="${myBean.ready}" target="variable1" />
	 *   <camunda:out source="foo" target="variableLocal" local="true" />
	 * </bpmn:extensionElements>
	 *
	 * => Adds one variable "variable1" to the list.
	 *
	 */
	function extractOutMappings(options) {
	  var elements = options.elements,
	      containerElement = options.containerElement,
	      processVariables = options.processVariables;

	  if (!isArray(elements)) {
	    elements = [ elements ];
	  }

	  forEach(elements, function(element) {

	    var outMappings = getOutMappings(element);

	    // extract all variables with correct scope
	    forEach(outMappings, function(mapping) {

	      // do not use variables marked as <local>
	      if (mapping.local) {
	        return;
	      }

	      var newVariable = createProcessVariable(
	        element,
	        mapping.target,
	        containerElement
	      );

	      addVariableToList(processVariables, newVariable);
	    });
	  });

	  return processVariables;
	}

	/**
	 *
	 * @param {ModdleElement} element
	 * @param {string} [type] - optional
	 *
	 * @return {Array<ModdleElement>|undefined} collection of event definitions or none
	 */
	function getEventDefinitions(element, type) {
	  var eventDefinitions = element.eventDefinitions;

	  if (!eventDefinitions || !type) {
	    return eventDefinitions;
	  }

	  return filter(eventDefinitions, function(definition) {
	    return is$2$1(definition, type);
	  });
	}

	/**
	 * Returns error event definitions for a given element.
	 *
	 * @param {ModdleElement} element
	 *
	 * @return {Array<ModdleElement>} collection of error event definitions
	 */
	function getErrorEventDefinitions(element) {
	  return getEventDefinitions(element, 'bpmn:ErrorEventDefinition');
	}

	/**
	 * Returns escalation event definitions for a given element.
	 *
	 * @param {ModdleElement} element
	 *
	 * @return {Array<ModdleElement>} collection of escalation event definitions
	 */
	function getEscalationEventDefinitions(element) {
	  return getEventDefinitions(element, 'bpmn:EscalationEventDefinition');
	}


	// helper ////////////////

	function is$2$1(element, type) {
	  return (
	    element &&
	    typeof element.$instanceOf === 'function' &&
	    element.$instanceOf(type)
	  );
	}

	/**
	 * Retrieves process variables defined in event definitions, e.g.
	 *
	 * <bpmn:escalationEventDefinition
	 *   id="EscalationEventDefinition_1"
	 *   escalationRef="Escalation_1"
	 *   camunda:escalationCodeVariable="variable1"
	 * />
	 *
	 * => Adds one variable "variable1" to the list.
	 *
	 * <bpmn:errorEventDefinition
	 *   id="ErrorEventDefinition_1"
	 *   errorRef="Error_1"
	 *   camunda:errorCodeVariable="variable2"
	 *   camunda:errorMessageVariable="variable3"
	 * />
	 *
	 * => Adds two variables "variable2" & "variable3" to the list.
	 *
	 */
	function extractEventDefinitionVariables(options) {
	  var elements = options.elements,
	      containerElement = options.containerElement,
	      processVariables = options.processVariables;

	  var addVariable = function(element, name) {
	    var newVariable = createProcessVariable(
	      element,
	      name,
	      containerElement
	    );

	    addVariableToList(processVariables, newVariable);
	  };

	  if (!isArray(elements)) {
	    elements = [ elements ];
	  }

	  forEach(elements, function(element) {

	    // (1) error event code + message variable
	    var errorEventDefinitions = getErrorEventDefinitions(element);

	    forEach(errorEventDefinitions, function(definition) {

	      var errorCodeVariable = definition.get('errorCodeVariable'),
	          errorMessageVariable = definition.get('errorMessageVariable');

	      if (errorCodeVariable) {
	        addVariable(element, errorCodeVariable);
	      }

	      if (errorMessageVariable) {
	        addVariable(element, errorMessageVariable);
	      }
	    });

	    // (2) escalation code variable
	    var escalationEventDefinitions = getEscalationEventDefinitions(element);

	    forEach(escalationEventDefinitions, function(definition) {

	      var escalationCodeVariable = definition.get('escalationCodeVariable');

	      if (escalationCodeVariable) {
	        addVariable(element, escalationCodeVariable);
	      }
	    });

	  });

	  return processVariables;
	}

	var extractors = [
	  extractOutputParameters,
	  extractResultVariables,
	  extractFormFields,
	  extractOutMappings,
	  extractEventDefinitionVariables
	];

	/**
	 * @typedef {Object} ProcessVariable
	 * @property {string} name
	 * @property {Array<ModdleElement>} origin
	 * @property {ModdleElement} scope
	 */

	// api /////////////////////////

	/**
	 * Retrieves all process variables for a given container element.
	 * @param {ModdleElement} containerElement
	 *
	 * @returns {Array<ProcessVariable>}
	 */
	function getProcessVariables(containerElement) {
	  var processVariables = [];

	  // (1) extract all flow elements inside the container
	  var elements = selfAndAllFlowElements([containerElement], false);

	  // (2) extract all variables from the extractors
	  forEach(extractors, function(extractor) {
	    extractor({
	      elements: elements,
	      containerElement: containerElement,
	      processVariables: processVariables
	    });
	  });

	  return processVariables;
	}

	/**
	 * Retrieves all variables which are available in the given scope
	 *
	 * * Exclude variables which are only available in other scopes
	 * * Exclude variables which are produced by the given element
	 * * Include variables which are available in parent scopes
	 *
	 * @param {string} scope
	 * @param {ModdleElement} rootElement element from where to extract all variables
	 *
	 * @returns {Array<ProcessVariable>}
	 */
	function getVariablesForScope(scope, rootElement) {

	  var allVariables = getProcessVariables(rootElement);

	  var scopeElement = getElement(scope, rootElement);

	  // (1) get variables for given scope
	  var scopeVariables = filter(allVariables, function(variable) {
	    return variable.scope.id === scopeElement.id;
	  });

	  // (2) get variables for parent scopes
	  var parents = getParents$2(scopeElement);

	  var parentsScopeVariables = filter(allVariables, function(variable) {
	    return find(parents, function(parent) {
	      return parent.id === variable.scope.id;
	    });
	  });

	  return combineArrays$1(scopeVariables, parentsScopeVariables);
	}

	// helpers ////////////////////

	function combineArrays$1(a, b) {
	  return a.concat(b);
	}

	var index_esm$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getProcessVariables: getProcessVariables,
		getVariablesForScope: getVariablesForScope
	});

	var require$$2$2 = /*@__PURE__*/getAugmentedNamespace(index_esm$3);

	var getVariablesForScope$1 = require$$2$2.getVariablesForScope;

	var groupBy$1 = require$$0.groupBy,
	    flatten$2 = require$$0.flatten,
	    forEach$5 = require$$0.forEach,
	    keys$5 = require$$0.keys,
	    map$4 = require$$0.map,
	    sortBy$1 = require$$0.sortBy;

	var getBusinessObject$A = require$$0$1.getBusinessObject,
	    is$D = require$$0$1.is,
	    isAny$7 = require$$1$3.isAny;

	var escapeHTML$k = Utils.escapeHTML;






	var ProcessVariables = function(element, translate) {

	  var entries = [];

	  function createVariablesList(variables, scope) {
	    var scopePrefix = scope ? scope + '-' : '';

	    return flatten$2(map$4(variables, function(variable, idx) {

	      var name = variable.name,
	          origin = variable.origin,
	          variableEntries = [];

	      // title ///////////////////

	      var collapsible = EntryFactory_1.collapsible({
	        id: scopePrefix + 'variable- ' + idx + '-collapsible',
	        title: escapeHTML$k(name),
	        description: origin.toString(),
	        open: false,
	        get: function() {
	          return {
	            title: escapeHTML$k(name),
	            description: origin.toString()
	          };
	        }
	      });

	      var isOpen = collapsible.isOpen;

	      variableEntries.push(collapsible);

	      // created in //////////////////

	      var createdInHtml = '<div data-show="show">' +
	        '<b>' + escapeHTML$k(translate('Created in')) + '</b>' +
	        createdInList(origin) +
	      '</div>';

	      variableEntries.push({
	        id: scopePrefix + 'variable- ' + idx + '-created-in',
	        html: createdInHtml,
	        cssClasses: [
	          'bpp-process-variables',
	          'bpp-process-variables__created-in'
	        ],
	        show: function() {
	          return isOpen();
	        }
	      });

	      return variableEntries;
	    }));
	  }


	  if (!canHaveProcessVariables(element)) {
	    return entries;
	  }

	  var businessObject = getBusinessObject$A(element),
	      rootElement = getRootElement$1(businessObject),
	      scope = getScope$1(element);

	  var variables = getVariablesForScope$1(scope, rootElement),
	      sorted = sortByName(variables),
	      withNames = populateElementNames(sorted),
	      byScope = groupByScope(withNames);

	  // (1) tab description entry
	  var description = EntryFieldDescription(translate, translate('Available process variables, identified in the diagram.'));

	  entries.push({
	    id: 'process-variables-description',
	    html: description,
	    cssClasses: [
	      'bpp-process-variables',
	      'bpp-process-variables__description'
	    ]
	  });

	  // (2) empty list placeholder
	  if (!withNames.length) {
	    var placeholder = EntryFieldDescription(translate, translate('No variables found.'));

	    entries.push({
	      id: 'process-variables-placeholder',
	      html: placeholder
	    });

	    return entries;
	  }

	  if (keys$5(byScope).length > 1) {

	    // (3a) multiple scopes variables lists

	    // assumption: variables extractor fetches parent variables first
	    forEach$5(reverse(keys$5(byScope)), function(scope) {
	      var variables = byScope[scope];

	      entries.push({
	        id: scope + '-scope-title',
	        html: '<div>' + escapeHTML$k(translate('Scope: ')) + scope + '</div>',
	        cssClasses: [
	          'bpp-process-variables',
	          'bpp-process-variables__scope-title',
	          'bpp-collapsible-break'
	        ]
	      });

	      entries = entries.concat(createVariablesList(variables, scope));
	    });
	  } else {

	    // (3b) single scope variables list
	    entries = entries.concat(createVariablesList(withNames));
	  }


	  return entries;
	};


	// helpers //////////

	function getRootElement$1(element) {
	  var businessObject = getBusinessObject$A(element);

	  if (is$D(businessObject, 'bpmn:Participant')) {
	    return businessObject.processRef;
	  }

	  if (is$D(businessObject, 'bpmn:Process')) {
	    return businessObject;
	  }

	  var parent = businessObject;

	  while (parent.$parent && !is$D(parent, 'bpmn:Process')) {
	    parent = parent.$parent;
	  }

	  return parent;
	}

	function getScope$1(element) {
	  if (is$D(element, 'bpmn:Participant')) {
	    return getBusinessObject$A(element).processRef.id;
	  }

	  return element.id;
	}

	function sortByName(variables) {
	  return sortBy$1(variables, function(variable) {
	    return variable.name;
	  });
	}

	function populateElementNames(variables) {
	  forEach$5(variables, function(variable) {
	    var names = map$4(variable.origin, function(element) {
	      return element.name || element.id;
	    });

	    variable.origin = names;
	    variable.scope = variable.scope.name || variable.scope.id;
	  });

	  return variables;
	}

	function canHaveProcessVariables(element) {
	  var businessObject = getBusinessObject$A(element);

	  return (
	    isAny$7(element, ['bpmn:Process', 'bpmn:SubProcess']) ||
	      (is$D(element, 'bpmn:Participant') && businessObject.get('processRef'))
	  );
	}

	function groupByScope(variables) {
	  return groupBy$1(variables, 'scope');
	}

	function createdInList(origin) {
	  var html = '';

	  forEach$5(origin, function(o) {
	    html += '<p class="bpp-process-variables__created-in-item">' + o + '</p>';
	  });
	  return html;
	}

	function reverse(array) {
	  return map$4(array, function(a, i) {
	    return array[array.length - 1 - i];
	  });
	}

	var isAny$8 = require$$1$3.isAny,
	    is$E = require$$0$1.is,
	    getBusinessObject$B = require$$0$1.getBusinessObject;



	var ProcessVariablesProps = function(group, element, translate) {
	  if (canHaveOverview(element)) {
	    var processVariablesEntries = ProcessVariables(element, translate);

	    group.entries = group.entries.concat(processVariablesEntries);
	  }
	};


	// helpers //////////

	function canHaveOverview(element) {
	  var businessObject = getBusinessObject$B(element);

	  return (
	    isAny$8(element, ['bpmn:Process', 'bpmn:SubProcess']) ||
	    (is$E(element, 'bpmn:Participant') && businessObject.get('processRef'))
	  );
	}

	var is$F = require$$0$1.is,
	    getBusinessObject$C = require$$0$1.getBusinessObject;




	function getListeners(bo, type) {
	  return bo && ExtensionElementsHelper_1.getExtensionElements(bo, type) || [];
	}

	var CAMUNDA_EXECUTION_LISTENER_ELEMENT = 'camunda:ExecutionListener';
	var CAMUNDA_TASK_LISTENER_ELEMENT = 'camunda:TaskListener';

	var Listener = function(element, bpmnFactory, options, translate) {

	  var LISTENER_TYPE_LABEL = {
	    class: translate('Java Class'),
	    expression: translate('Expression'),
	    delegateExpression: translate('Delegate Expression'),
	    script: translate('Script')
	  };

	  var bo;

	  var result = {
	    getSelectedListener: getSelectedListener
	  };

	  var entries = result.entries = [];

	  var isSequenceFlow = ImplementationTypeHelper_1.isSequenceFlow(element);

	  function getSelectedListener(element, node) {
	    var selection = (executionListenerEntry && executionListenerEntry.getSelected(element, node)) || { idx: -1 };

	    var listener = getListeners(bo, CAMUNDA_EXECUTION_LISTENER_ELEMENT)[selection.idx];
	    if (!listener && taskListenerEntry) {
	      selection = taskListenerEntry.getSelected(element, node);
	      listener = getListeners(bo, CAMUNDA_TASK_LISTENER_ELEMENT)[selection.idx];
	    }
	    return listener;
	  }

	  var setOptionLabelValue = function(type) {
	    return function(element, node, option, property, value, idx) {
	      var listeners = getListeners(bo, type);
	      var listener = listeners[idx];
	      var listenerType = ImplementationTypeHelper_1.getImplementationType(listener);

	      var event = (listener.get('event')) ? listener.get('event') : '<empty>';

	      var label = (event || '*') + ' : ' + (LISTENER_TYPE_LABEL[listenerType] || '');

	      option.text = label;
	    };
	  };

	  var newElement = function(element, type, initialEvent) {
	    return function(element, extensionElements, value) {
	      var props = {
	        event: initialEvent,
	        class: ''
	      };

	      var newElem = ElementHelper_1.createElement(type, props, extensionElements, bpmnFactory);

	      return CmdHelper_1.addElementsTolist(element, extensionElements, 'values', [ newElem ]);
	    };
	  };

	  var removeElement = function(element, type) {
	    return function(element, extensionElements, value, idx) {
	      var listeners = getListeners(bo, type);
	      var listener = listeners[idx];
	      if (listener) {
	        return ExtensionElementsHelper_1.removeEntry(bo, element, listener);
	      }
	    };
	  };


	  // Execution Listener

	  if (is$F(element, 'bpmn:FlowElement') || is$F(element, 'bpmn:Process') || is$F(element, 'bpmn:Participant')) {
	    bo = getBusinessObject$C(element);
	    if (is$F(element, 'bpmn:Participant')) {
	      element = element.processRef;
	      bo = bo.get('processRef');
	    }

	    if (bo) {

	      var executionListenerEntry = ExtensionElements(element, bpmnFactory, {
	        id : 'executionListeners',
	        label : translate('Execution Listener'),
	        modelProperty: 'name',
	        idGeneration: 'false',
	        reference: 'processRef',

	        createExtensionElement: newElement(element, CAMUNDA_EXECUTION_LISTENER_ELEMENT, (isSequenceFlow) ? 'take' : 'start'),
	        removeExtensionElement: removeElement(element, CAMUNDA_EXECUTION_LISTENER_ELEMENT),

	        getExtensionElements: function(element) {
	          return getListeners(bo, CAMUNDA_EXECUTION_LISTENER_ELEMENT);
	        },

	        onSelectionChange: function(element, node, event, scope) {
	          taskListenerEntry && taskListenerEntry.deselect(element, node);
	        },

	        setOptionLabelValue: setOptionLabelValue(CAMUNDA_EXECUTION_LISTENER_ELEMENT)

	      });
	      entries.push(executionListenerEntry);

	    }
	  }


	  // Task Listener

	  if (is$F(element, 'bpmn:UserTask')) {
	    bo = getBusinessObject$C(element);

	    var taskListenerEntry = ExtensionElements(element, bpmnFactory, {
	      id : 'taskListeners',
	      label : translate('Task Listener'),
	      modelProperty: 'name',
	      idGeneration: 'false',

	      createExtensionElement: newElement(element, CAMUNDA_TASK_LISTENER_ELEMENT, 'create'),
	      removeExtensionElement: removeElement(element, CAMUNDA_TASK_LISTENER_ELEMENT),

	      getExtensionElements: function(element) {
	        return getListeners(bo, CAMUNDA_TASK_LISTENER_ELEMENT);
	      },

	      onSelectionChange: function(element, node, event, scope) {
	        executionListenerEntry.deselect(element, node);
	      },

	      setOptionLabelValue: setOptionLabelValue(CAMUNDA_TASK_LISTENER_ELEMENT)

	    });
	    entries.push(taskListenerEntry);
	  }

	  return result;

	};

	var ListenerProps = function(group, element, bpmnFactory, translate) {

	  var listenerEntry = Listener(element, bpmnFactory, {}, translate);

	  group.entries = group.entries.concat(listenerEntry.entries);

	  return {
	    getSelectedListener: listenerEntry.getSelectedListener
	  };

	};

	var is$G = require$$0$1.is;

	var find$4 = require$$0.find;





	var ListenerDetailProps = function(group, element, bpmnFactory, options, translate) {

	  var LISTENER_TYPE_LABEL = {
	    class: translate('Java Class'),
	    expression: translate('Expression'),
	    delegateExpression: translate('Delegate Expression'),
	    script: translate('Script')
	  };

	  options = options || {};

	  var getSelectedListener = options.getSelectedListener;

	  var classProp = 'class',
	      expressionProp = 'expression',
	      delegateExpressionProp = 'delegateExpression',
	      scriptProp = 'script';

	  var executionListenerEventTypeOptions = ImplementationTypeHelper_1.isSequenceFlow(element) ? [
	    { name: translate('take'), value: 'take' }
	  ] : [
	    { name: translate('start'), value: 'start' },
	    { name: translate('end'), value: 'end' }
	  ];

	  var taskListenerEventTypeOptions = [
	    { name: translate('create'), value: 'create' },
	    { name: translate('assignment'), value: 'assignment' },
	    { name: translate('complete'), value: 'complete' },
	    { name: translate('delete'), value: 'delete' },
	    { name: translate('update'), value: 'update' },
	    { name: translate('timeout'), value: 'timeout' }
	  ];

	  var isSelected = function(element, node) {
	    return getSelectedListener(element, node);
	  };


	  // eventType ////////////////
	  group.entries.push(EntryFactory_1.selectBox(translate, {
	    id: 'listener-event-type',
	    label: translate('Event Type'),
	    modelProperty: 'eventType',
	    emptyParameter: false,

	    get: function(element, node) {

	      var listener = getSelectedListener(element, node);

	      var eventType = listener && listener.get('event');

	      return {
	        eventType: eventType
	      };
	    },

	    set: function(element, values, node) {
	      var eventType = values.eventType,
	          listener = getSelectedListener(element, node),
	          eventDefinitions = listener && listener.eventDefinitions;

	      // ensure only timeout events can have timer event definitions
	      if (eventDefinitions && eventType !== 'timeout') {
	        eventDefinitions = [];
	      }

	      return CmdHelper_1.updateBusinessObject(element, listener,
	        {
	          event: eventType,
	          eventDefinitions: eventDefinitions
	        }
	      );
	    },

	    selectOptions: function(element, node) {
	      var eventTypeOptions;

	      var selectedListener = getSelectedListener(element, node);
	      if (ImplementationTypeHelper_1.isTaskListener(selectedListener)) {
	        eventTypeOptions = taskListenerEventTypeOptions;
	      } else if (ImplementationTypeHelper_1.isExecutionListener(selectedListener)) {
	        eventTypeOptions = executionListenerEventTypeOptions;
	      }

	      return eventTypeOptions;

	    },

	    hidden: function(element, node) {
	      return !isSelected(element, node);
	    }

	  }));


	  // listenerId ///////////////
	  group.entries.push(EntryFactory_1.textField(translate, {
	    id: 'listener-id',
	    label: translate('Listener Id'),
	    modelProperty: 'listenerId',

	    get: function(element, node) {
	      var value = {},
	          listener = getSelectedListener(element, node);

	      value.listenerId = (listener && listener.get('id')) || undefined;

	      return value;
	    },

	    set: function(element, values, node) {
	      var update = {},
	          listener = getSelectedListener(element, node);

	      update['id'] = values.listenerId || '';

	      return CmdHelper_1.updateBusinessObject(element, listener, update);
	    },

	    hidden: function(element, node) {
	      var listener = getSelectedListener(element, node);

	      return !ImplementationTypeHelper_1.isTaskListener(listener);
	    },

	    validate: function(element, values, node) {
	      var value = values.listenerId,
	          listener = getSelectedListener(element, node),
	          validate = {};

	      if (!value && isTimeoutTaskListener(listener)) {
	        validate.listenerId = translate('Must provide a value for timeout task listener');
	      }

	      return validate;
	    }

	  }));


	  // listenerType ///////////////
	  group.entries.push(EntryFactory_1.selectBox(translate, {
	    id: 'listener-type',
	    label: translate('Listener Type'),
	    selectOptions: [
	      { value: classProp, name: translate('Java Class') },
	      { value: expressionProp, name: translate('Expression') },
	      { value: delegateExpressionProp, name: translate('Delegate Expression') },
	      { value: scriptProp, name: translate('Script') }
	    ],
	    modelProperty: 'listenerType',
	    emptyParameter: false,

	    get: function(element, node) {
	      var listener = getSelectedListener(element, node);
	      return {
	        listenerType: ImplementationTypeHelper_1.getImplementationType(listener)
	      };
	    },

	    set: function(element, values, node) {
	      var listener = getSelectedListener(element, node),
	          listenerType = values.listenerType || undefined,
	          update = {};

	      update[classProp] = listenerType === classProp ? '' : undefined;
	      update[expressionProp] = listenerType === expressionProp ? '' : undefined;
	      update[delegateExpressionProp] = listenerType === delegateExpressionProp ? '' : undefined;
	      update[scriptProp] = listenerType === scriptProp ? bpmnFactory.create('camunda:Script') : undefined;

	      return CmdHelper_1.updateBusinessObject(element, listener, update);
	    },

	    hidden: function(element, node) {
	      return !isSelected(element, node);
	    }

	  }));


	  // listenerValue //////////////
	  group.entries.push(EntryFactory_1.textField(translate, {
	    id: 'listener-value',
	    dataValueLabel: 'listenerValueLabel',
	    modelProperty: 'listenerValue',

	    get: function(element, node) {
	      var value = {},
	          listener = getSelectedListener(element, node),
	          listenerType = ImplementationTypeHelper_1.getImplementationType(listener);

	      value.listenerValueLabel = LISTENER_TYPE_LABEL[listenerType] || '';
	      value.listenerValue = (listener && listener.get(listenerType)) || undefined;

	      return value;
	    },

	    set: function(element, values, node) {
	      var update = {},
	          listener = getSelectedListener(element, node),
	          listenerType = ImplementationTypeHelper_1.getImplementationType(listener);

	      update[listenerType] = values.listenerValue || '';

	      return CmdHelper_1.updateBusinessObject(element, listener, update);
	    },

	    hidden: function(element, node) {
	      var listener = getSelectedListener(element, node);
	      return !listener || listener.script;
	    },

	    validate: function(element, values) {
	      var value = values.listenerValue,
	          validate = {};

	      if (!value) {
	        validate.listenerValue = translate('Must provide a value');
	      }

	      return validate;
	    }

	  }));


	  // script ////////////////////
	  var script = Script('scriptFormat', 'value', true, translate);

	  group.entries.push({
	    id: 'listener-script-value',
	    html: '<div data-show="isScript">' +
	            script.template +
	          '</div>',

	    get: function(element, node) {
	      var listener = getSelectedListener(element, node);
	      return listener && listener.script ? script.get(element, listener.script) : {};
	    },

	    set: function(element, values, node) {
	      var listener = getSelectedListener(element, node);
	      var update = script.set(element, values, listener);
	      return CmdHelper_1.updateBusinessObject(element, listener.script, update);
	    },

	    validate: function(element, values, node) {
	      var listener = getSelectedListener(element, node);
	      return listener && listener.script ? script.validate(element, values) : {};
	    },

	    isScript: function(element, node) {
	      var listener = getSelectedListener(element, node);
	      return listener && listener.script;
	    },

	    script: script

	  });


	  // timerEventDefinition //////
	  var timerEventDefinitionHandler = function(element, node) {
	    var listener = getSelectedListener(element, node);

	    if (!listener || !isTimeoutTaskListener(listener)) {
	      return;
	    }

	    var timerEventDefinition = getTimerEventDefinition(listener);

	    if (!timerEventDefinition) {
	      return false;
	    }

	    return timerEventDefinition;
	  };

	  function createTimerEventDefinition(element, node) {

	    var listener = getSelectedListener(element, node);

	    if (!listener || !isTimeoutTaskListener(listener)) {
	      return;
	    }

	    var eventDefinitions = listener.get('eventDefinitions') || [],
	        timerEventDefinition = bpmnFactory.create('bpmn:TimerEventDefinition');

	    eventDefinitions.push(timerEventDefinition);

	    listener.eventDefinitions = eventDefinitions;

	    return timerEventDefinition;
	  }

	  var timerOptions = {
	    idPrefix: 'listener-',
	    createTimerEventDefinition: createTimerEventDefinition
	  };

	  TimerEventDefinition_1(group, element, bpmnFactory, timerEventDefinitionHandler, translate, timerOptions);

	};


	// helpers //////////////

	function isTimeoutTaskListener(listener) {
	  var eventType = listener && listener.event;
	  return eventType === 'timeout';
	}

	function getTimerEventDefinition(bo) {
	  var eventDefinitions = bo.eventDefinitions || [];

	  return find$4(eventDefinitions, function(event) {
	    return is$G(event, 'bpmn:TimerEventDefinition');
	  });

	}

	var getBusinessObject$D = require$$0$1.getBusinessObject;




	var DEFAULT_PROPS$1 = {
	  'stringValue': undefined,
	  'string': undefined,
	  'expression': undefined
	};

	var CAMUNDA_FIELD_EXTENSION_ELEMENT = 'camunda:Field';

	var FieldInjection = function(element, bpmnFactory, translate, options) {

	  options = options || {};

	  var insideListener = !!options.insideListener,
	      idPrefix = options.idPrefix || '',
	      getSelectedListener = options.getSelectedListener,
	      businessObject = options.businessObject || getBusinessObject$D(element);

	  var entries = [];

	  var isSelected = function(element, node) {
	    return getSelectedField(element, node);
	  };

	  function getSelectedField(element, node) {
	    var selected = fieldEntry.getSelected(element, node.parentNode);

	    if (selected.idx === -1) {
	      return;
	    }

	    var fields = getCamundaFields(element, node);

	    return fields[selected.idx];
	  }

	  function getCamundaFields(element, node) {
	    if (!insideListener) {
	      return (
	        businessObject &&
	        ExtensionElementsHelper_1.getExtensionElements(businessObject, CAMUNDA_FIELD_EXTENSION_ELEMENT)
	      ) || [];
	    }
	    return getCamundaListenerFields(element, node);
	  }

	  function getCamundaListenerFields(element, node) {
	    var selectedListener = getSelectedListener(element, node);
	    return selectedListener && selectedListener.fields || [];
	  }

	  function getFieldType(bo) {
	    var fieldType = 'string';

	    var expressionValue = bo && bo.expression;
	    var stringValue = bo && (bo.string || bo.stringValue);

	    if (typeof stringValue !== 'undefined') {
	      fieldType = 'string';
	    } else if (typeof expressionValue !== 'undefined') {
	      fieldType = 'expression';
	    }

	    return fieldType;
	  }

	  var setOptionLabelValue = function() {
	    return function(element, node, option, property, value, idx) {
	      var camundaFields = getCamundaFields(element, node);
	      var field = camundaFields[idx];

	      value = (field.name) ? field.name : '<empty>';

	      var label = idx + ' : ' + value;

	      option.text = label;
	    };
	  };

	  var newElement = function() {
	    return function(element, extensionElements, value, node) {

	      var props = {
	        name: '',
	        string: ''
	      };

	      var newFieldElem;

	      if (!insideListener) {

	        newFieldElem = ElementHelper_1.createElement(CAMUNDA_FIELD_EXTENSION_ELEMENT, props, extensionElements, bpmnFactory);
	        return CmdHelper_1.addElementsTolist(element, extensionElements, 'values', [ newFieldElem ]);

	      } else {

	        var selectedListener = getSelectedListener(element, node);
	        newFieldElem = ElementHelper_1.createElement(CAMUNDA_FIELD_EXTENSION_ELEMENT, props, selectedListener, bpmnFactory);
	        return CmdHelper_1.addElementsTolist(element, selectedListener, 'fields', [ newFieldElem ]);

	      }

	    };
	  };

	  var removeElement = function() {
	    return function(element, extensionElements, value, idx, node) {
	      var camundaFields= getCamundaFields(element, node);
	      var field = camundaFields[idx];
	      if (field) {
	        if (!insideListener) {
	          return ExtensionElementsHelper_1.removeEntry(businessObject, element, field);
	        }
	        var selectedListener = getSelectedListener(element, node);
	        return CmdHelper_1.removeElementsFromList(element, selectedListener, 'fields', null, [ field ]);
	      }
	    };
	  };


	  var fieldEntry = ExtensionElements(element, bpmnFactory, {
	    id : idPrefix + 'fields',
	    label : translate('Fields'),
	    modelProperty: 'fieldName',
	    idGeneration: 'false',

	    businessObject: businessObject,

	    createExtensionElement: newElement(),
	    removeExtensionElement: removeElement(),

	    getExtensionElements: function(element, node) {
	      return getCamundaFields(element, node);
	    },

	    setOptionLabelValue: setOptionLabelValue()

	  });
	  entries.push(fieldEntry);


	  entries.push(EntryFactory_1.validationAwareTextField(translate, {
	    id: idPrefix + 'field-name',
	    label: translate('Name'),
	    modelProperty: 'fieldName',

	    getProperty: function(element, node) {
	      return (getSelectedField(element, node) || {}).name;
	    },

	    setProperty: function(element, values, node) {
	      var selectedField = getSelectedField(element, node);
	      return CmdHelper_1.updateBusinessObject(element, selectedField, { name : values.fieldName });
	    },

	    validate: function(element, values, node) {
	      var bo = getSelectedField(element, node);

	      var validation = {};
	      if (bo) {
	        var nameValue = values.fieldName;

	        if (nameValue) {
	          if (Utils.containsSpace(nameValue)) {
	            validation.fieldName = translate('Name must not contain spaces');
	          }
	        } else {
	          validation.fieldName = translate('Parameter must have a name');
	        }
	      }

	      return validation;
	    },

	    hidden: function(element, node) {
	      return !isSelected(element, node);
	    }

	  }));

	  var fieldTypeOptions = [
	    {
	      name: translate('String'),
	      value: 'string'
	    },
	    {
	      name: translate('Expression'),
	      value: 'expression'
	    }
	  ];

	  entries.push(EntryFactory_1.selectBox(translate, {
	    id: idPrefix + 'field-type',
	    label: translate('Type'),
	    selectOptions: fieldTypeOptions,
	    modelProperty: 'fieldType',

	    get: function(element, node) {
	      var bo = getSelectedField(element, node);

	      var fieldType = getFieldType(bo);

	      return {
	        fieldType: fieldType
	      };
	    },

	    set: function(element, values, node) {
	      var props = assign_1({}, DEFAULT_PROPS$1);

	      var fieldType = values.fieldType;

	      if (fieldType === 'string') {
	        props.string = '';
	      }
	      else if (fieldType === 'expression') {
	        props.expression = '';
	      }

	      return CmdHelper_1.updateBusinessObject(element, getSelectedField(element, node), props);
	    },

	    hidden: function(element, node) {
	      return !isSelected(element, node);
	    }

	  }));


	  entries.push(EntryFactory_1.textBox(translate, {
	    id: idPrefix + 'field-value',
	    label: translate('Value'),
	    modelProperty: 'fieldValue',

	    get: function(element, node) {
	      var bo = getSelectedField(element, node);
	      var fieldType = getFieldType(bo);

	      var fieldValue;

	      if (fieldType === 'string') {
	        fieldValue = bo && (bo.string || bo.stringValue);
	      }
	      else if (fieldType === 'expression') {
	        fieldValue = bo && bo.expression;
	      }

	      return {
	        fieldValue: fieldValue
	      };
	    },

	    set: function(element, values, node) {
	      var bo = getSelectedField(element, node);
	      var fieldType = getFieldType(bo);

	      var props = assign_1({}, DEFAULT_PROPS$1);

	      var fieldValue = values.fieldValue || undefined;

	      if (fieldType === 'string') {
	        props.string = fieldValue;
	      }
	      else if (fieldType === 'expression') {
	        props.expression = fieldValue;
	      }

	      return CmdHelper_1.updateBusinessObject(element, bo, props);

	    },

	    validate: function(element, values, node) {
	      var bo = getSelectedField(element, node);

	      var validation = {};
	      if (bo) {
	        if (!values.fieldValue) {
	          validation.fieldValue = translate('Must provide a value');
	        }
	      }

	      return validation;
	    },

	    show: function(element, node) {
	      return isSelected(element, node);
	    }

	  }));

	  return entries;

	};

	var ListenerFieldInjectionProps = function(group, element, bpmnFactory, options, translate) {

	  options = assign_1({
	    idPrefix: 'listener-',
	    insideListener: true
	  }, options);

	  var fieldInjectionEntry = FieldInjection(element, bpmnFactory, translate, options);

	  if (fieldInjectionEntry && fieldInjectionEntry.length > 0) {
	    group.entries = group.entries.concat(fieldInjectionEntry);
	  }

	};

	var isAny$9 = require$$1$3.isAny;

	var ELEMENT_TEMPLATE_OPTION_EMPTY = 'element-template-option-empty';

	var ELEMENT_TEMPLATE_OPTION_EMPTY_1 = ELEMENT_TEMPLATE_OPTION_EMPTY;

	var emptyOption = {
	  name: '',
	  value: ELEMENT_TEMPLATE_OPTION_EMPTY
	};

	/**
	 * Get options for given element and templates.
	 *
	 * @param {dj.model.Base} element
	 * @param {ElementTemplates} elementTemplates
	 * @param {Translate} translate
	 */
	function getOptions(element, elementTemplates, translate) {
	  var options = [ emptyOption ];

	  var defaultTemplate = elementTemplates.getDefault(element);

	  if (defaultTemplate) {
	    options.push(option('element-template-option-0', defaultTemplate, translate));

	    return options;
	  }

	  var index = 0;

	  elementTemplates.getAll().forEach(function(template) {
	    if (!isAny$9(element, template.appliesTo)) {
	      return;
	    }

	    options.push(option('element-template-option-' + index, template, translate));

	    index++;
	  });

	  return options;
	}

	var getOptions_1 = getOptions;

	function getOption(optionId, options) {
	  return find_1(options, function(option) {
	    return optionId === option.value;
	  });
	}

	var getOption_1 = getOption;

	function option(value, template, translate) {
	  var name = translate(template.name);

	  if (template.version) {
	    name += ' (v' + template.version + ')';
	  }

	  var option = {
	    id: template.id,
	    name: name,
	    value: value
	  };

	  if (template.version) {
	    option.version = template.version;
	  }

	  return option;
	}

	var getVersionOrDateFromTemplate = function(template) {
	  var metadata = template.metadata,
	      version = template.version;

	  if (metadata) {
	    if (!isUndefined_1(metadata.created)) {
	      return 'Version ' + toDateString(metadata.created);
	    } else if (!isUndefined_1(metadata.updated)) {
	      return 'Version ' + toDateString(metadata.updated);
	    }
	  }

	  if (isUndefined_1(version)) {
	    return null;
	  }

	  return 'Version ' + version;
	};

	function toDateString(timestamp) {
	  var date = new Date(timestamp);

	  var year = date.getFullYear();

	  var month = leftPad(String(date.getMonth() + 1), 2, '0');

	  var day = leftPad(String(date.getDate()), 2, '0');

	  return day + '.' + month + '.' + year;
	}

	function leftPad(string, length, character) {
	  while (string.length < length) {
	    string = character + string;
	  }

	  return string;
	}

	var Helper$1 = {
		ELEMENT_TEMPLATE_OPTION_EMPTY: ELEMENT_TEMPLATE_OPTION_EMPTY_1,
		getOptions: getOptions_1,
		getOption: getOption_1,
		getVersionOrDateFromTemplate: getVersionOrDateFromTemplate
	};

	var escapeHTML$l = Utils.escapeHTML;

	var getTemplateId$3 = Helper.getTemplateId;

	var domClasses$6 = require$$1.classes,
	    domEvent$1 = require$$1.event,
	    domify$f = require$$1.domify,
	    domQuery$d = require$$1.query;



	var getBusinessObject$E = require$$0$1.getBusinessObject;

	var getVersionOrDateFromTemplate$1 = Helper$1.getVersionOrDateFromTemplate;

	var MAX_DESCRIPTION_LENGTH$1 = 200;

	var DescriptionProps = function(
	    element,
	    commandStack,
	    elementTemplates,
	    modeling,
	    replace,
	    selection,
	    translate) {
	  var currentElementTemplate = elementTemplates.get(element);

	  var entries = [];

	  var description,
	      newestElementTemplate;

	  if (currentElementTemplate) {
	    newestElementTemplate = findNewestElementTemplate(elementTemplates, currentElementTemplate);

	    if (newestElementTemplate) {
	      entries.push({
	        id: 'element-template-update',
	        cssClasses: [ 'bpp-entry--warning' ],
	        html: createUpdateTemplateEntry(element, currentElementTemplate, newestElementTemplate, commandStack, translate)
	      });
	    }

	    description = currentElementTemplate.description;

	    if (description) {
	      entries.push(createDescriptionEntry(description, translate));
	    }
	  } else {
	    entries.push({
	      id: 'element-template-not-found',
	      cssClasses: [ 'bpp-entry--warning' ],
	      html: createTemplateNotFoundEntry(element, modeling, translate)
	    });
	  }

	  if (currentElementTemplate && currentElementTemplate.version) {
	    entries.push({
	      id: 'element-template-version',
	      html: '<p>' + getVersionOrDateFromTemplate$1(currentElementTemplate) + '</p>'
	    });
	  }

	  return {
	    id: 'elementTemplateDescription',
	    label: currentElementTemplate ? currentElementTemplate.name : translate('Missing Template'),
	    dropdown: {
	      menu: [
	        {
	          id: 'element-template-unlink',
	          label: translate('Unlink'),
	          onClick: function() {
	            modeling.updateProperties(element, {
	              'camunda:modelerTemplate': null,
	              'camunda:modelerTemplateVersion': null
	            });
	          }
	        },
	        {
	          id: 'element-template-remove',
	          label: translate('Remove'),
	          onClick: function() {
	            var businessObject = getBusinessObject$E(element);

	            var type = businessObject.$type,
	                eventDefinitionType = getEventDefinitionType(businessObject);

	            var newElement = replace.replaceElement(element, {
	              type: type,
	              eventDefinitionType: eventDefinitionType
	            });

	            selection.select(newElement);
	          }
	        }
	      ]
	    },
	    entries: entries
	  };
	};

	// helpers //////////

	function createDescriptionEntry(description, translate) {
	  description = escapeHTML$l(description);

	  var html = domify$f('<p class="description description--expanded"></p>');

	  var descriptionText = domify$f('<span class="description__text">' + description + '</span>');

	  html.appendChild(descriptionText);

	  function toggleExpanded(expanded) {
	    if (expanded) {
	      domClasses$6(html).add('description--expanded');

	      descriptionText.textContent = description + ' ';

	      expand.textContent = translate('Less');
	    } else {
	      domClasses$6(html).remove('description--expanded');

	      descriptionText.textContent = descriptionShortened + ' ... ';

	      expand.textContent = translate('More');
	    }
	  }

	  var descriptionShortened,
	      expand,
	      expanded = false;

	  if (description.length > MAX_DESCRIPTION_LENGTH$1) {
	    descriptionShortened = description.slice(0, MAX_DESCRIPTION_LENGTH$1);

	    expand = domify$f(
	      '<span class="bpp-entry-link description__expand">' +
	        translate('More') +
	      '</span>'
	    );

	    domEvent$1.bind(expand, 'click', function() {
	      expanded = !expanded;

	      toggleExpanded(expanded);
	    });

	    html.appendChild(expand);

	    toggleExpanded(expanded);
	  }

	  return {
	    id: 'element-template-description',
	    html: html
	  };
	}

	function getEventDefinitionType(businessObject) {
	  if (!businessObject.eventDefinitions) {
	    return null;
	  }

	  var eventDefinition = businessObject.eventDefinitions[ 0 ];

	  if (!eventDefinition) {
	    return null;
	  }

	  return eventDefinition.$type;
	}

	function createTemplateNotFoundEntry(element, modeling, translate) {
	  var templateId = getTemplateId$3(element);

	  var html = domify$f(
	    '<p>' +
	    translate(
	      'The applied Template &lt;{templateId}&gt; was not found and therefore its data is not accessible.' +
	      '<br />' +
	      '<br />' +
	      'Unlink in order to access the data.', { templateId: templateId }
	    ) +
	    '</p>' +
	    '<p style="text-align: right;">' +
	    '<a class="bpp-entry-link bpp-entry-link-button">Unlink</a>' +
	    '</p>'
	  );

	  domQuery$d('.bpp-entry-link', html).addEventListener('click', function() {
	    modeling.updateProperties(element, {
	      'camunda:modelerTemplate': null
	    });
	  });

	  return html;
	}

	function createUpdateTemplateEntry(element, oldElementTemplate, newElementTemplate, commandStack, translate) {
	  var newElementTemplateVersion = getVersionOrDateFromTemplate$1(newElementTemplate);

	  var html = domify$f(
	    '<p>' +
	    translate(
	      'A new version of the Template ({newElementTemplateVersion}) is available.',
	      { newElementTemplateVersion: newElementTemplateVersion }
	    ) +
	    '</p>' +
	    '<p style="text-align: right;">' +
	    '<a class="bpp-entry-link bpp-entry-link-button">Update</a>' +
	    '</p>'
	  );

	  domQuery$d('.bpp-entry-link', html).addEventListener('click', function() {
	    commandStack.execute('propertiesPanel.camunda.changeTemplate', {
	      element: element,
	      newTemplate: newElementTemplate,
	      oldTemplate: oldElementTemplate
	    });
	  });

	  return html;
	}

	function findNewestElementTemplate(elementTemplates, currentElementTemplate) {
	  if (isUndefined_1(currentElementTemplate.version)) {
	    return null;
	  }

	  return elementTemplates
	    .getAll()
	    .filter(function(elementTemplate) {
	      return currentElementTemplate.id === elementTemplate.id && !isUndefined_1(elementTemplate.version);
	    })
	    .reduce(function(newestElementTemplate, elementTemplate) {
	      if (currentElementTemplate.version < elementTemplate.version) {
	        return elementTemplate;
	      }

	      if (newestElementTemplate && newestElementTemplate.version < elementTemplate.version) {
	        return elementTemplate;
	      }

	      return newestElementTemplate;
	    }, null);
	}

	/**
	 * Checks if `value` is `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	 * @example
	 *
	 * _.isNull(null);
	 * // => true
	 *
	 * _.isNull(void 0);
	 * // => false
	 */
	function isNull(value) {
	  return value === null;
	}

	var isNull_1 = isNull;

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!isObject_1(object)) {
	    return object;
	  }
	  path = _castPath(path, object);

	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = _toKey(path[index]),
	        newValue = value;

	    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
	      return object;
	    }

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject_1(objValue)
	          ? objValue
	          : (_isIndex(path[index + 1]) ? [] : {});
	      }
	    }
	    _assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}

	var _baseSet = baseSet;

	/**
	 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @param {Function} predicate The function invoked per property.
	 * @returns {Object} Returns the new object.
	 */
	function basePickBy(object, paths, predicate) {
	  var index = -1,
	      length = paths.length,
	      result = {};

	  while (++index < length) {
	    var path = paths[index],
	        value = _baseGet(object, path);

	    if (predicate(value, path)) {
	      _baseSet(result, _castPath(path, object), value);
	    }
	  }
	  return result;
	}

	var _basePickBy = basePickBy;

	/**
	 * The base implementation of `_.pick` without support for individual
	 * property identifiers.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @returns {Object} Returns the new object.
	 */
	function basePick(object, paths) {
	  return _basePickBy(object, paths, function(value, path) {
	    return hasIn_1(object, path);
	  });
	}

	var _basePick = basePick;

	/**
	 * A specialized version of `baseRest` which flattens the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */
	function flatRest(func) {
	  return _setToString(_overRest(func, undefined, flatten_1), func + '');
	}

	var _flatRest = flatRest;

	/**
	 * Creates an object composed of the picked `object` properties.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [paths] The property paths to pick.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pick(object, ['a', 'c']);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var pick$2 = _flatRest(function(object, paths) {
	  return object == null ? {} : _basePick(object, paths);
	});

	var pick_1 = pick$2;

	var getOption$1 = Helper$1.getOption,
	    getOptions$1 = Helper$1.getOptions,
	    getTemplateId$4 = Helper.getTemplateId,
	    ELEMENT_TEMPLATE_OPTION_EMPTY$1 = Helper.ELEMENT_TEMPLATE_OPTION_EMPTY;



	var ChooserProps = function(group, element, elementTemplates, translate) {
	  if (!isUndefined_1(getTemplateId$4(element)) && !isNull_1(getTemplateId$4(element))) {
	    return;
	  }

	  var options = getOptions$1(element, elementTemplates, translate);

	  // Return if empty option is only option
	  if (options.length === 1) {
	    return;
	  }

	  var selectOptions = options.map(function(option) {
	    return pick_1(option, [ 'name', 'value' ]);
	  });

	  // select element template (via dropdown)
	  group.entries.push(EntryFactory_1.selectBox(translate, {
	    id: 'elementTemplate-chooser',
	    label: translate('Element Template'),
	    modelProperty: 'elementTemplateOption',
	    selectOptions: selectOptions,
	    get: function(element) {
	      return {
	        elementTemplateOption: ELEMENT_TEMPLATE_OPTION_EMPTY$1
	      };
	    },
	    set: function(element, properties) {
	      var optionId = properties['elementTemplateOption'];

	      var option = getOption$1(optionId, options);

	      var id = option.id,
	          version = option.version;

	      var newTemplate = elementTemplates.get(id, version);

	      return applyTemplate(element, newTemplate, elementTemplates);
	    }
	  }));

	};


	// helpers //////////

	function applyTemplate(element, newTemplate, elementTemplates) {
	  var oldTemplate = elementTemplates.get(element);

	  if (oldTemplate === newTemplate) {
	    return;
	  }

	  return {
	    cmd: 'propertiesPanel.camunda.changeTemplate',
	    context: {
	      element: element,
	      oldTemplate: oldTemplate,
	      newTemplate: newTemplate
	    }
	  };
	}

	var getBusinessObject$F = require$$0$1.getBusinessObject;

	var findExtension$2 = Helper.findExtension,
	    findExtensions$2 = Helper.findExtensions,
	    findInputParameter$1 = Helper.findInputParameter,
	    findOutputParameter$1 = Helper.findOutputParameter,
	    findCamundaProperty$1 = Helper.findCamundaProperty,
	    findCamundaInOut$1 = Helper.findCamundaInOut;

	var createCamundaProperty$2 = CreateHelper.createCamundaProperty,
	    createInputParameter$2 = CreateHelper.createInputParameter,
	    createOutputParameter$2 = CreateHelper.createOutputParameter,
	    createCamundaIn$2 = CreateHelper.createCamundaIn,
	    createCamundaOut$2 = CreateHelper.createCamundaOut,
	    createCamundaInWithBusinessKey$2 = CreateHelper.createCamundaInWithBusinessKey,
	    createCamundaFieldInjection$2 = CreateHelper.createCamundaFieldInjection;



	var PROPERTY_TYPE$1 = 'property',
	    CAMUNDA_PROPERTY_TYPE$1 = 'camunda:property',
	    CAMUNDA_INPUT_PARAMETER_TYPE$1 = 'camunda:inputParameter',
	    CAMUNDA_OUTPUT_PARAMETER_TYPE$1 = 'camunda:outputParameter',
	    CAMUNDA_IN_TYPE$1 = 'camunda:in',
	    CAMUNDA_OUT_TYPE$1 = 'camunda:out',
	    CAMUNDA_IN_BUSINESS_KEY_TYPE$1 = 'camunda:in:businessKey',
	    CAMUNDA_EXECUTION_LISTENER_TYPE = 'camunda:executionListener',
	    CAMUNDA_FIELD$1 = 'camunda:field';

	var BASIC_MODDLE_TYPES = [
	  'Boolean',
	  'Integer',
	  'String'
	];

	var EXTENSION_BINDING_TYPES = [
	  CAMUNDA_PROPERTY_TYPE$1,
	  CAMUNDA_INPUT_PARAMETER_TYPE$1,
	  CAMUNDA_OUTPUT_PARAMETER_TYPE$1,
	  CAMUNDA_IN_TYPE$1,
	  CAMUNDA_OUT_TYPE$1,
	  CAMUNDA_IN_BUSINESS_KEY_TYPE$1,
	  CAMUNDA_FIELD$1
	];

	var IO_BINDING_TYPES = [
	  CAMUNDA_INPUT_PARAMETER_TYPE$1,
	  CAMUNDA_OUTPUT_PARAMETER_TYPE$1
	];

	var IN_OUT_BINDING_TYPES = [
	  CAMUNDA_IN_TYPE$1,
	  CAMUNDA_OUT_TYPE$1,
	  CAMUNDA_IN_BUSINESS_KEY_TYPE$1
	];

	/**
	 * Injects custom properties into the given group.
	 *
	 * @param {djs.model.Base} element
	 * @param {ElementTemplates} elementTemplates
	 * @param {BpmnFactory} bpmnFactory
	 * @param {Function} translate
	 */
	var CustomProps = function(element, elementTemplates, bpmnFactory, translate) {

	  var template = elementTemplates.get(element);

	  if (!template) {
	    return [];
	  }

	  var renderCustomField = function(id, p, idx) {
	    var propertyType = p.type;

	    var entryOptions = {
	      id: id,
	      description: p.description,
	      label: p.label ? translate(p.label) : p.label,
	      modelProperty: id,
	      get: propertyGetter(id, p),
	      set: propertySetter(id, p, bpmnFactory),
	      validate: propertyValidator(id, p, translate)
	    };

	    var entry;

	    if (!propertyType) {
	      propertyType = getDefaultType(p);
	    }

	    if (propertyType === 'Boolean') {
	      entry = EntryFactory_1.checkbox(translate, entryOptions);
	    }

	    if (propertyType === 'String') {
	      entry = EntryFactory_1.textField(translate, entryOptions);
	    }

	    if (propertyType === 'Text') {
	      entry = EntryFactory_1.textBox(translate, entryOptions);
	    }

	    if (propertyType === 'Dropdown') {
	      entryOptions.selectOptions = p.choices;

	      entry = EntryFactory_1.selectBox(translate, entryOptions);
	    }

	    return entry;
	  };

	  var groups = [];
	  var id, entry;

	  var customFieldsGroup = {
	    id: 'customField',
	    label: translate('Custom Fields'),
	    entries: []
	  };
	  template.properties.forEach(function(p, idx) {

	    id = 'custom-' + template.id + '-' + idx;

	    entry = renderCustomField(id, p);
	    if (entry) {
	      customFieldsGroup.entries.push(entry);
	    }
	  });
	  if (customFieldsGroup.entries.length > 0) {
	    groups.push(customFieldsGroup);
	  }

	  if (template.scopes) {

	    handleLegacyScopes(template.scopes).forEach(function(scope) {

	      var scopeType = scope.type;

	      var idScopeName = scopeType.replace(/:/g, '_');

	      var customScopeFieldsGroup = {
	        id: 'customField-' + idScopeName,
	        label: translate('Custom Fields for scope: ') + scopeType,
	        entries: []
	      };

	      scope.properties.forEach(function(p, idx) {

	        var propertyId = 'custom-' + template.id + '-' + idScopeName + '-' + idx;

	        var scopedProperty = propertyWithScope(p, scopeType);

	        entry = renderCustomField(propertyId, scopedProperty);
	        if (entry) {
	          customScopeFieldsGroup.entries.push(entry);
	        }
	      });

	      if (customScopeFieldsGroup.entries.length > 0) {
	        groups.push(customScopeFieldsGroup);
	      }
	    });
	  }

	  return groups;
	};


	// getters, setters and validators ///////////////


	/**
	 * Return a getter that retrieves the given property.
	 *
	 * @param {String} name
	 * @param {PropertyDescriptor} property
	 *
	 * @return {Function}
	 */
	function propertyGetter(name, property) {

	  /* getter */
	  return function get(element) {
	    var value = getPropertyValue(element, property);

	    return objectWithKey(name, value);
	  };
	}

	/**
	 * Return a setter that updates the given property.
	 *
	 * @param {String} name
	 * @param {PropertyDescriptor} property
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {Function}
	 */
	function propertySetter(name, property, bpmnFactory) {

	  /* setter */
	  return function set(element, values) {

	    var value = values[name];

	    return setPropertyValue(element, property, value, bpmnFactory);
	  };
	}

	/**
	 * Return a validator that ensures the property is ok.
	 *
	 * @param {String} name
	 * @param {PropertyDescriptor} property
	 * @param {Function} translate
	 *
	 * @return {Function}
	 */
	function propertyValidator(name, property, translate) {

	  /* validator */
	  return function validate(element, values) {
	    var value = values[name];

	    var error = validateValue(value, property, translate);

	    if (error) {
	      return objectWithKey(name, error);
	    }
	  };
	}


	// get, set and validate helpers ///////////////////

	/**
	 * Return the value of the specified property descriptor,
	 * on the passed diagram element.
	 *
	 * @param {djs.model.Base} element
	 * @param {PropertyDescriptor} property
	 *
	 * @return {Any}
	 */
	function getPropertyValue(element, property) {

	  var bo = getBusinessObject$F(element);

	  var binding = property.binding,
	      scope = property.scope;

	  var bindingType = binding.type,
	      bindingName = binding.name;

	  var propertyValue = property.value || '';

	  if (scope) {
	    bo = findExtension$2(bo, scope.name);
	    if (!bo) {
	      return propertyValue;
	    }
	  }

	  // property
	  if (bindingType === 'property') {

	    var value = bo.get(bindingName);

	    if (bindingName === 'conditionExpression') {
	      if (value) {
	        return value.body;
	      } else {

	        // return defined default
	        return propertyValue;
	      }
	    } else {

	      // return value; default to defined default
	      return typeof value !== 'undefined' ? value : propertyValue;
	    }
	  }

	  var camundaProperties,
	      camundaProperty;

	  if (bindingType === CAMUNDA_PROPERTY_TYPE$1) {
	    if (scope) {
	      camundaProperties = bo.get('properties');
	    } else {
	      camundaProperties = findExtension$2(bo, 'camunda:Properties');
	    }

	    if (camundaProperties) {
	      camundaProperty = findCamundaProperty$1(camundaProperties, binding);

	      if (camundaProperty) {
	        return camundaProperty.value;
	      }
	    }

	    return propertyValue;
	  }

	  var inputOutput,
	      ioParameter;

	  if (IO_BINDING_TYPES.indexOf(bindingType) !== -1) {

	    if (scope) {
	      inputOutput = bo.get('inputOutput');
	    } else {
	      inputOutput = findExtension$2(bo, 'camunda:InputOutput');
	    }

	    if (!inputOutput) {

	      // ioParameter cannot exist yet, return property value
	      return propertyValue;
	    }
	  }

	  // camunda input parameter
	  if (bindingType === CAMUNDA_INPUT_PARAMETER_TYPE$1) {
	    ioParameter = findInputParameter$1(inputOutput, binding);

	    if (ioParameter) {
	      if (binding.scriptFormat) {
	        if (ioParameter.definition) {
	          return ioParameter.definition.value;
	        }
	      } else {
	        return ioParameter.value || '';
	      }
	    }

	    return propertyValue;
	  }

	  // camunda output parameter
	  if (binding.type === CAMUNDA_OUTPUT_PARAMETER_TYPE$1) {
	    ioParameter = findOutputParameter$1(inputOutput, binding);

	    if (ioParameter) {
	      return ioParameter.name;
	    }

	    return propertyValue;
	  }


	  var ioElement;

	  if (IN_OUT_BINDING_TYPES.indexOf(bindingType) != -1) {
	    ioElement = findCamundaInOut$1(bo, binding);

	    if (ioElement) {
	      if (bindingType === CAMUNDA_IN_BUSINESS_KEY_TYPE$1) {
	        return ioElement.businessKey;
	      } else
	      if (bindingType === CAMUNDA_OUT_TYPE$1) {
	        return ioElement.target;
	      } else
	      if (bindingType === CAMUNDA_IN_TYPE$1) {
	        return ioElement[binding.expression ? 'sourceExpression' : 'source'];
	      }
	    }

	    return propertyValue;
	  }

	  if (bindingType === CAMUNDA_EXECUTION_LISTENER_TYPE) {
	    var executionListener;
	    if (scope) {
	      executionListener = bo.get('executionListener');
	    } else {
	      executionListener = findExtension$2(bo, 'camunda:ExecutionListener');
	    }

	    return executionListener.script.value;
	  }

	  var fieldInjection;
	  if (CAMUNDA_FIELD$1 === bindingType) {
	    var fieldInjections = findExtensions$2(bo, [ 'camunda:Field' ]);
	    fieldInjections.forEach(function(item) {
	      if (item.name === binding.name) {
	        fieldInjection = item;
	      }
	    });
	    if (fieldInjection) {
	      return fieldInjection.string || fieldInjection.expression;
	    } else {
	      return '';
	    }
	  }

	  throw unknownPropertyBinding(property);
	}

	var getPropertyValue_1 = getPropertyValue;


	/**
	 * Return an update operation that changes the diagram
	 * element's custom property to the given value.
	 *
	 * The response of this method will be processed via
	 * {@link PropertiesPanel#applyChanges}.
	 *
	 * @param {djs.model.Base} element
	 * @param {PropertyDescriptor} property
	 * @param {String} value
	 * @param {BpmnFactory} bpmnFactory
	 *
	 * @return {Object|Array<Object>} results to be processed
	 */
	function setPropertyValue(element, property, value, bpmnFactory) {
	  var bo = getBusinessObject$F(element);

	  var binding = property.binding,
	      scope = property.scope;

	  var bindingType = binding.type,
	      bindingName = binding.name;

	  var propertyValue;

	  var updates = [];

	  var extensionElements;

	  if (EXTENSION_BINDING_TYPES.indexOf(bindingType) !== -1) {
	    extensionElements = bo.get('extensionElements');

	    // create extension elements, if they do not exist (yet)
	    if (!extensionElements) {
	      extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', null, element, bpmnFactory);

	      updates.push(CmdHelper_1.updateBusinessObject(
	        element, bo, objectWithKey('extensionElements', extensionElements)
	      ));
	    }
	  }

	  if (scope) {
	    bo = findExtension$2(bo, scope.name);
	    if (!bo) {
	      bo = ElementHelper_1.createElement(scope.name, null, element, bpmnFactory);

	      updates.push(CmdHelper_1.addElementsTolist(
	        bo, extensionElements, 'values', [ bo ]
	      ));
	    }
	  }

	  // property
	  if (bindingType === 'property') {

	    if (bindingName === 'conditionExpression') {

	      propertyValue = ElementHelper_1.createElement('bpmn:FormalExpression', {
	        body: value,
	        language: binding.scriptFormat
	      }, bo, bpmnFactory);
	    } else {

	      var moddlePropertyDescriptor = bo.$descriptor.propertiesByName[bindingName];

	      var moddleType = moddlePropertyDescriptor.type;

	      // make sure we only update String, Integer, Real and
	      // Boolean properties (do not accidentally override complex objects...)
	      if (BASIC_MODDLE_TYPES.indexOf(moddleType) === -1) {
	        throw new Error('cannot set moddle type <' + moddleType + '>');
	      }

	      if (moddleType === 'Boolean') {
	        propertyValue = !!value;
	      } else
	      if (moddleType === 'Integer') {
	        propertyValue = parseInt(value, 10);

	        if (isNaN(propertyValue)) {

	          // do not write NaN value
	          propertyValue = undefined;
	        }
	      } else {
	        propertyValue = value;
	      }
	    }

	    if (propertyValue !== undefined) {
	      updates.push(CmdHelper_1.updateBusinessObject(
	        element, bo, objectWithKey(bindingName, propertyValue)
	      ));
	    }
	  }

	  // camunda:property
	  var camundaProperties,
	      existingCamundaProperty,
	      newCamundaProperty;

	  if (bindingType === CAMUNDA_PROPERTY_TYPE$1) {

	    if (scope) {
	      camundaProperties = bo.get('properties');
	    } else {
	      camundaProperties = findExtension$2(extensionElements, 'camunda:Properties');
	    }

	    if (!camundaProperties) {
	      camundaProperties = ElementHelper_1.createElement('camunda:Properties', null, bo, bpmnFactory);

	      if (scope) {
	        updates.push(CmdHelper_1.updateBusinessObject(
	          element, bo, { properties: camundaProperties }
	        ));
	      }
	      else {
	        updates.push(CmdHelper_1.addElementsTolist(
	          element, extensionElements, 'values', [ camundaProperties ]
	        ));
	      }
	    }

	    existingCamundaProperty = findCamundaProperty$1(camundaProperties, binding);

	    newCamundaProperty = createCamundaProperty$2(binding, value, bpmnFactory);

	    updates.push(CmdHelper_1.addAndRemoveElementsFromList(
	      element,
	      camundaProperties,
	      'values',
	      null,
	      [ newCamundaProperty ],
	      existingCamundaProperty ? [ existingCamundaProperty ] : []
	    ));
	  }

	  // camunda:inputParameter
	  // camunda:outputParameter
	  var inputOutput,
	      existingIoParameter,
	      newIoParameter;

	  if (IO_BINDING_TYPES.indexOf(bindingType) !== -1) {

	    if (scope) {
	      inputOutput = bo.get('inputOutput');
	    } else {
	      inputOutput = findExtension$2(extensionElements, 'camunda:InputOutput');
	    }

	    // create inputOutput element, if it do not exist (yet)
	    if (!inputOutput) {
	      inputOutput = ElementHelper_1.createElement('camunda:InputOutput', null, bo, bpmnFactory);

	      if (scope) {
	        updates.push(CmdHelper_1.updateBusinessObject(
	          element, bo, { inputOutput: inputOutput }
	        ));
	      }
	      else {
	        updates.push(CmdHelper_1.addElementsTolist(
	          element, extensionElements, 'values', inputOutput
	        ));
	      }
	    }
	  }

	  if (bindingType === CAMUNDA_INPUT_PARAMETER_TYPE$1) {

	    existingIoParameter = findInputParameter$1(inputOutput, binding);

	    newIoParameter = createInputParameter$2(binding, value, bpmnFactory);

	    updates.push(CmdHelper_1.addAndRemoveElementsFromList(
	      element,
	      inputOutput,
	      'inputParameters',
	      null,
	      [ newIoParameter ],
	      existingIoParameter ? [ existingIoParameter ] : []
	    ));
	  }

	  if (bindingType === CAMUNDA_OUTPUT_PARAMETER_TYPE$1) {

	    existingIoParameter = findOutputParameter$1(inputOutput, binding);

	    newIoParameter = createOutputParameter$2(binding, value, bpmnFactory);

	    updates.push(CmdHelper_1.addAndRemoveElementsFromList(
	      element,
	      inputOutput,
	      'outputParameters',
	      null,
	      [ newIoParameter ],
	      existingIoParameter ? [ existingIoParameter ] : []
	    ));
	  }


	  // camunda:in
	  // camunda:out
	  // camunda:in:businessKey
	  var existingInOut,
	      newInOut;

	  if (IN_OUT_BINDING_TYPES.indexOf(bindingType) !== -1) {

	    existingInOut = findCamundaInOut$1(bo, binding);

	    if (bindingType === CAMUNDA_IN_TYPE$1) {
	      newInOut = createCamundaIn$2(binding, value, bpmnFactory);
	    } else
	    if (bindingType === CAMUNDA_OUT_TYPE$1) {
	      newInOut = createCamundaOut$2(binding, value, bpmnFactory);
	    } else {
	      newInOut = createCamundaInWithBusinessKey$2(binding, value, bpmnFactory);
	    }

	    updates.push(CmdHelper_1.addAndRemoveElementsFromList(
	      element,
	      extensionElements,
	      'values',
	      null,
	      [ newInOut ],
	      existingInOut ? [ existingInOut ] : []
	    ));
	  }

	  if (bindingType === CAMUNDA_FIELD$1) {
	    var existingFieldInjections = findExtensions$2(bo, [ 'camunda:Field' ]);
	    var newFieldInjections = [];

	    if (existingFieldInjections.length > 0) {
	      existingFieldInjections.forEach(function(item) {
	        if (item.name === binding.name) {
	          newFieldInjections.push(createCamundaFieldInjection$2(binding, value, bpmnFactory));
	        } else {
	          newFieldInjections.push(item);
	        }
	      });
	    } else {
	      newFieldInjections.push(createCamundaFieldInjection$2(binding, value, bpmnFactory));
	    }

	    updates.push(CmdHelper_1.addAndRemoveElementsFromList(
	      element,
	      extensionElements,
	      'values',
	      null,
	      newFieldInjections,
	      existingFieldInjections ? existingFieldInjections : []
	    ));
	  }

	  if (updates.length) {
	    return updates;
	  }

	  // quick warning for better debugging
	  console.warn('no update', element, property, value);
	}

	var setPropertyValue_1 = setPropertyValue;

	/**
	 * Validate value of a given property.
	 *
	 * @param {String} value
	 * @param {PropertyDescriptor} property
	 * @param {Function} translate
	 *
	 * @return {Object} with validation errors
	 */
	function validateValue(value, property, translate) {

	  var constraints = property.constraints || {};

	  if (constraints.notEmpty && isEmpty$1(value)) {
	    return translate('Must not be empty');
	  }

	  if (constraints.maxLength && value.length > constraints.maxLength) {
	    return translate('Must have max length {length}', { length: constraints.maxLength });
	  }

	  if (constraints.minLength && value.length < constraints.minLength) {
	    return translate('Must have min length {length}', { length: constraints.minLength });
	  }

	  var pattern = constraints.pattern,
	      message;

	  if (pattern) {

	    if (typeof pattern !== 'string') {
	      message = pattern.message;
	      pattern = pattern.value;
	    }

	    if (!matchesPattern(value, pattern)) {
	      return message || translate('Must match pattern {pattern}', { pattern: pattern });
	    }
	  }
	}


	// misc helpers ///////////////////////////////

	function propertyWithScope(property, scopeName) {
	  if (!scopeName) {
	    return property;
	  }

	  return assign_1({}, property, {
	    scope: {
	      name: scopeName
	    }
	  });
	}

	/**
	 * Return an object with a single key -> value association.
	 *
	 * @param {String} key
	 * @param {Any} value
	 *
	 * @return {Object}
	 */
	function objectWithKey(key, value) {
	  var obj = {};

	  obj[key] = value;

	  return obj;
	}

	/**
	 * Does the given string match the specified pattern?
	 *
	 * @param {String} str
	 * @param {String} pattern
	 *
	 * @return {Boolean}
	 */
	function matchesPattern(str, pattern) {
	  var regexp = new RegExp(pattern);

	  return regexp.test(str);
	}

	function isEmpty$1(str) {
	  return !str || /^\s*$/.test(str);
	}

	/**
	 * Create a new {@link Error} indicating an unknown
	 * property binding.
	 *
	 * @param {PropertyDescriptor} property
	 *
	 * @return {Error}
	 */
	function unknownPropertyBinding(property) {
	  var binding = property.binding;

	  return new Error('unknown binding: <' + binding.type + '>');
	}

	function getDefaultType(property) {
	  var binding = property.binding,
	      bindingType = binding.type;

	  if (bindingType === PROPERTY_TYPE$1 ||
	      bindingType === CAMUNDA_PROPERTY_TYPE$1 ||
	      bindingType === CAMUNDA_IN_TYPE$1 ||
	      bindingType === CAMUNDA_IN_BUSINESS_KEY_TYPE$1 ||
	      bindingType === CAMUNDA_OUT_TYPE$1 ||
	      bindingType === CAMUNDA_FIELD$1) {
	    return 'String';
	  }

	  if (bindingType === CAMUNDA_EXECUTION_LISTENER_TYPE) {
	    return 'Hidden';
	  }
	}
	CustomProps.getPropertyValue = getPropertyValue_1;
	CustomProps.setPropertyValue = setPropertyValue_1;

	var is$H = require$$0$1.is,
	    getBusinessObject$G = require$$0$1.getBusinessObject;

	var isAny$a = require$$1$3.isAny;

	var getVariablesForScope$2 = require$$2$2.getVariablesForScope;

	var filter$2 = require$$0.filter,
	    map$5 = require$$0.map,
	    sortBy$2 = require$$0.sortBy;





	var domQuery$e = require$$1.query;

	var InputOutputParameter = function(parameter, bpmnFactory, options, translate) {

	  var typeInfo = {
	    'camunda:Map': {
	      value: 'map',
	      label: translate('Map')
	    },
	    'camunda:List': {
	      value: 'list',
	      label: translate('List')
	    },
	    'camunda:Script': {
	      value: 'script',
	      label: translate('Script')
	    }
	  };

	  options = options || {};

	  var idPrefix = options.idPrefix || '';

	  var getParameter =
	    (options.getParameter && typeof options.getParameter === 'function') ?
	      function() {
	        return options.getParameter();
	      } :
	      function() {
	        return parameter;
	      };

	  var result = {},
	      entries = [];

	  result.entries = entries;

	  // heading ////////////////////////////////////////////////////////
	  var collapsible = EntryFactory_1.collapsible({
	    id: idPrefix + 'collapsible',
	    title: parameter.name,
	    description: getDescription(parameter),
	    cssClasses: [ 'bpp-collapsible--with-mapping' ],
	    open: false,
	    onRemove: options.onRemove,
	    onToggle: options.onToggle,
	    get: function() {
	      return {
	        title: getParameter().name,
	        description: getDescription(getParameter())
	      };
	    }
	  });

	  var isOpen = options.isOpen || collapsible.isOpen;

	  result.setOpen = function(value) {
	    var entryNode = domQuery$e('[data-entry="' + collapsible.id + '"]');
	    collapsible.setOpen(value, entryNode);
	  };

	  entries.push(collapsible);

	  // parameter name ////////////////////////////////////////////////////////
	  entries.push(EntryFactory_1.validationAwareTextField(translate, {
	    id: idPrefix + 'parameterName',
	    label: is$H(parameter, 'camunda:InputParameter') ?
	      translate('Local Variable Name') : translate('Process Variable Name'),
	    modelProperty: 'name',

	    getProperty: function(element, node) {
	      return parameter.name;
	    },

	    setProperty: function(element, values, node) {
	      return CmdHelper_1.updateBusinessObject(element, parameter, values);
	    },

	    validate: function(element, values, node) {
	      var validation = {};
	      var nameValue = values.name;

	      if (nameValue) {
	        if (Utils.containsSpace(nameValue)) {
	          validation.name = translate('Name must not contain spaces');
	        }
	      } else {
	        validation.name = translate('Parameter must have a name');
	      }

	      return validation;
	    },

	    hidden: function(element, node) {
	      return !isOpen();
	    }
	  }));


	  // parameter type //////////////////////////////////////////////////////

	  var selectOptions = [
	    { value: 'text', name: translate('String or Expression') },
	    { value: 'script', name: translate('Script') },
	    { value: 'list', name: translate('List') },
	    { value: 'map', name: translate('Map') }
	  ];

	  entries.push(EntryFactory_1.selectBox(translate, {
	    id : idPrefix + 'parameterType',
	    label: translate('Variable Assignment Type'),
	    selectOptions: selectOptions,
	    modelProperty: 'parameterType',

	    get: function(element, node) {
	      var parameterType = 'text';

	      var definition = getParameter().get('definition');
	      if (typeof definition !== 'undefined') {
	        var type = definition.$type;
	        parameterType = typeInfo[type].value;
	      }

	      return {
	        parameterType: parameterType
	      };
	    },

	    set: function(element, values, node) {
	      var properties = {
	        value: undefined,
	        definition: undefined
	      };

	      var createParameterTypeElem = function(type) {
	        return createElement(type, getParameter(), bpmnFactory);
	      };

	      var parameterType = values.parameterType;

	      if (parameterType === 'script') {
	        properties.definition = createParameterTypeElem('camunda:Script');
	      }
	      else if (parameterType === 'list') {
	        properties.definition = createParameterTypeElem('camunda:List');
	      }
	      else if (parameterType === 'map') {
	        properties.definition = createParameterTypeElem('camunda:Map');
	      }

	      return CmdHelper_1.updateBusinessObject(element, getParameter(), properties);
	    },

	    hidden: function(element, node) {
	      return !isOpen();
	    }

	  }));


	  // parameter value (type = text) ///////////////////////////////////////////////////////

	  entries.push(EntryFactory_1.autoSuggest(translate, {
	    id : idPrefix + 'parameterType-text',
	    label : translate('Variable Assignment Value'),
	    description: translate('Start typing "${}" to create an expression.'),
	    modelProperty: 'value',
	    get: function(element, node) {
	      return {
	        value: getParameter().value
	      };
	    },

	    set: function(element, values, node) {
	      values.value = values.value || undefined;
	      return CmdHelper_1.updateBusinessObject(element, getParameter(), values);
	    },

	    show: function(element, node) {
	      return isOpen() && !getParameter().definition;
	    },

	    getItems: function(element) {
	      var scope = getScope$2(element),
	          rootElement = getRootElement$2(element);

	      // (1) get all available variables for the current scope
	      var variables = getVariablesForScope$2(scope, rootElement);

	      // (2) ignore all variables which are (only) written in the current element
	      variables = filter$2(variables, function(variable) {
	        var origin = variable.origin,
	            withOutCurrent = filter$2(origin, function(o) {
	              return o.id !== element.id;
	            });

	        return !!withOutCurrent.length;
	      });

	      // (3) sort by name
	      var sorted = sortByName$1(variables);

	      // (4) retrieve names as suggestion items
	      return map$5(sorted, function(variable) {
	        return variable.name;
	      });
	    },

	    canSuggest: function(word, editorNode, focusNode) {
	      var globalIndex = findWordInContentEditable(word, editorNode, focusNode);

	      if (isInsideExpression(editorNode.innerText, globalIndex)) {
	        return true;
	      }

	      if (isInsideUnclosedExpression(editorNode.innerText, globalIndex)) {
	        return true;
	      }

	      return false;
	    }

	  }));


	  // parameter value (type = script) ///////////////////////////////////////////////////////
	  var script = Script('scriptFormat', 'value', true, translate, { idPrefix: idPrefix });
	  entries.push({
	    id: idPrefix + 'parameterType-script',
	    html: '<div data-show="show">' +
	            script.template +
	          '</div>',
	    get: function(element, node) {
	      return isScript(getParameter().definition) ? script.get(element, getParameter().definition) : {};
	    },

	    set: function(element, values, node) {
	      var update = script.set(element, values);
	      return CmdHelper_1.updateBusinessObject(element, getParameter().definition, update);
	    },

	    validate: function(element, values, node) {
	      return isScript(getParameter().definition) ? script.validate(element, getParameter().definition) : {};
	    },

	    script: script,
	    show: function(element, node) {
	      return isOpen() && getParameter().definition && isScript(getParameter().definition);
	    }
	  });


	  // parameter value (type = list) ///////////////////////////////////////////////////////

	  entries.push(EntryFactory_1.table(translate, {
	    id: idPrefix + 'parameterType-list',
	    modelProperties: [ 'value' ],
	    labels: [ translate('Value') ],
	    addLabel: translate('Add Value'),

	    getElements: function(element, node) {

	      if (isList$1(getParameter().definition)) {
	        return getParameter().definition.items;
	      }

	      return [];
	    },

	    updateElement: function(element, values, node, idx) {
	      var item = getParameter().definition.items[idx];
	      return CmdHelper_1.updateBusinessObject(element, item, values);
	    },

	    addElement: function(element, node) {
	      var newValue = createElement('camunda:Value', getParameter().definition, bpmnFactory, { value: undefined });
	      return CmdHelper_1.addElementsTolist(element, getParameter().definition, 'items', [ newValue ]);
	    },

	    removeElement: function(element, node, idx) {
	      return CmdHelper_1.removeElementsFromList(element, getParameter().definition, 'items', null, [ getParameter().definition.items[idx] ]);
	    },

	    editable: function(element, node, prop, idx) {
	      var item = getParameter().definition.items[idx];
	      return !isMap(item) && !isList$1(item) && !isScript(item);
	    },

	    setControlValue: function(element, node, input, prop, value, idx) {
	      var item = getParameter().definition.items[idx];

	      if (!isMap(item) && !isList$1(item) && !isScript(item)) {
	        input.value = value;
	      } else {
	        input.value = typeInfo[item.$type].label;
	      }
	    },

	    show: function(element, node) {
	      return isOpen() && getParameter().definition && isList$1(getParameter().definition);
	    }

	  }));


	  // parameter value (type = map) ///////////////////////////////////////////////////////

	  entries.push(EntryFactory_1.table(translate, {
	    id: idPrefix + 'parameterType-map',
	    modelProperties: [ 'key', 'value' ],
	    labels: [ translate('Key'), translate('Value') ],
	    addLabel: translate('Add Entry'),

	    getElements: function(element, node) {

	      if (getParameter() && isMap(getParameter().definition)) {
	        return getParameter().definition.entries;
	      }

	      return [];
	    },

	    updateElement: function(element, values, node, idx) {
	      var entry = getParameter().definition.entries[idx];

	      if (isMap(entry.definition) || isList$1(entry.definition) || isScript(entry.definition)) {
	        values = {
	          key: values.key
	        };
	      }

	      return CmdHelper_1.updateBusinessObject(element, entry, values);
	    },

	    addElement: function(element, node) {
	      var newEntry = createElement('camunda:Entry', getParameter().definition, bpmnFactory, { key: undefined, value: undefined });
	      return CmdHelper_1.addElementsTolist(element, getParameter().definition, 'entries', [ newEntry ]);
	    },

	    removeElement: function(element, node, idx) {
	      return CmdHelper_1.removeElementsFromList(element, getParameter().definition, 'entries', null, [ getParameter().definition.entries[idx] ]);
	    },

	    editable: function(element, node, prop, idx) {
	      var entry = getParameter().definition.entries[idx];
	      return prop === 'key' || (!isMap(entry.definition) && !isList$1(entry.definition) && !isScript(entry.definition));
	    },

	    setControlValue: function(element, node, input, prop, value, idx) {
	      var entry = getParameter().definition.entries[idx];

	      if (prop === 'key' || (!isMap(entry.definition) && !isList$1(entry.definition) && !isScript(entry.definition))) {
	        input.value = value;
	      } else {
	        input.value = typeInfo[entry.definition.$type].label;
	      }
	    },

	    show: function(element, node) {
	      return isOpen() && getParameter().definition && isMap(getParameter().definition);
	    }

	  }));

	  return result;
	};



	// helper /////////////////////

	function createElement(type, parent, factory, properties) {
	  return ElementHelper_1.createElement(type, properties, parent, factory);
	}

	function isScript(elem) {
	  return is$H(elem, 'camunda:Script');
	}

	function isList$1(elem) {
	  return is$H(elem, 'camunda:List');
	}

	function isMap(elem) {
	  return is$H(elem, 'camunda:Map');
	}

	function sortByName$1(variables) {
	  return sortBy$2(variables, function(variable) {
	    return variable.name;
	  });
	}

	function getScope$2(element) {
	  var businessObject = getBusinessObject$G(element);

	  if (isAny$a(businessObject, [ 'bpmn:Process', 'bpmn:SubProcess' ])) {
	    return businessObject.id;
	  }

	  // look for processes or sub process in parents
	  var parent = businessObject;

	  while (parent.$parent && !isAny$a(parent, [ 'bpmn:Process', 'bpmn:SubProcess' ])) {
	    parent = parent.$parent;
	  }

	  return parent.id;
	}

	function getRootElement$2(element) {
	  var businessObject = getBusinessObject$G(element),
	      parent = businessObject;

	  while (parent.$parent && !is$H(parent, 'bpmn:Process')) {
	    parent = parent.$parent;
	  }

	  return parent;
	}

	function isInsideExpression(value, index) {
	  var openIndex = value.indexOf('${'),
	      closeIndex = value.indexOf('}');

	  return (
	    openIndex > -1 && openIndex <= index &&
	    closeIndex > -1 && index < closeIndex
	  );
	}

	function isInsideUnclosedExpression(value, index) {
	  var closeIndex = value.lastIndexOf('}', index),
	      openIndex = value.indexOf('${', closeIndex + 1);

	  return (
	    openIndex > -1 && openIndex <= index
	  );
	}

	function findWordInContentEditable(word, editorNode, focusNode) {

	  // retrieve value before focusNode (row)
	  var children = editorNode.childNodes,
	      textBefore = '';

	  for (var i = 0; i <= children.length - 1; i++) {
	    var child = children[i];

	    if (child.contains(focusNode)) {
	      break;
	    }

	    textBefore += (child.innerText || child.wholeText) + '\n';
	  }

	  return textBefore.length + (word.index || 0);
	}

	function getDescription(parameter) {
	  var definition = parameter.get('definition');

	  if (!definition) {
	    return parameter.value;
	  }

	  if (isScript(definition)) {
	    return definition.value;
	  } else if (isList$1(definition)) {
	    return 'List';
	  } else if (isMap(definition)) {
	    return 'Map';
	  }
	}

	var assign$4 = require$$0.assign,
	    flatten$3 = require$$0.flatten,
	    filter$3 = require$$0.filter,
	    findIndex$2 = require$$0.findIndex,
	    forEach$6 = require$$0.forEach;

	var domClasses$7 = require$$1.classes,
	    domEvent$2 = require$$1.event,
	    domify$g = require$$1.domify,
	    domQuery$f = require$$1.query;

	var getBusinessObject$H = require$$0$1.getBusinessObject;

	var findExtension$3 = Helper.findExtension,
	    findInputParameter$2 = Helper.findInputParameter;

	var createInputParameter$3 = CreateHelper.createInputParameter;

	var escapeHTML$m = Utils.escapeHTML;







	var CAMUNDA_INPUT_PARAMETER_TYPE$2 = 'camunda:inputParameter';

	var MAX_DESCRIPTION_LENGTH$2 = 200;

	var EMPTY_PARAMETER = {
	  get: function() {},
	  set: function() {}
	};


	/**
	 * Injects element template input parameters into the given group.
	 *
	 * @param {Object} group
	 * @param {djs.model.Base} element
	 * @param {ElementTemplates} elementTemplates
	 * @param {BpmnFactory} bpmnFactory
	 * @param {Function} translate
	 */
	var InputParametersProps = function(group, element, elementTemplates, bpmnFactory, translate) {

	  var template = elementTemplates.get(element);

	  if (!template) {
	    return [];
	  }

	  var inputEntries = [];


	  function onToggle(value, entryNode) {
	    if (!value) {
	      return;
	    }

	    var currentEntryId = entryNode.dataset.entry;

	    // collapse all other items
	    inputEntries.forEach(function(entries) {
	      var collapsible = entries[0];

	      if (collapsible.id === currentEntryId) {
	        return;
	      }

	      var entryNode = domQuery$f('[data-entry="' + collapsible.id + '"]');
	      collapsible.setOpen(false, entryNode);
	    });
	  }

	  function renderInputParameter(id, templateProperty) {

	    var parameterEntries = [],
	        collapsibleEntry;

	    var bo = getBusinessObject$H(element),
	        inputOutput = findExtension$3(bo, 'camunda:InputOutput');

	    if (!inputOutput) {
	      return parameterEntries;
	    }

	    var getParameter = function() {
	      return findInputParameter$2(inputOutput, templateProperty.binding) || EMPTY_PARAMETER;
	    };

	    var parameter = getParameter();

	    var isOpen = function() {
	      return collapsibleEntry.isOpen();
	    };

	    var assignmentIsOn = function() {
	      var inputOutput = findExtension$3(getBusinessObject$H(element), 'camunda:InputOutput'),
	          parameter = findInputParameter$2(inputOutput, templateProperty.binding);

	      return !!parameter;
	    };

	    var options = {
	      idPrefix: id + '-',
	      onToggle: onToggle,
	      getParameter: getParameter,
	      isOpen: function() {
	        return isOpen() && assignmentIsOn();
	      }
	    };


	    // (1) use input parameter implementation
	    var inputImplementation = InputOutputParameter(parameter, bpmnFactory, options, translate);
	    parameterEntries = inputImplementation.entries;

	    var nameIdx = findEntry(parameterEntries, id + '-parameterName');

	    collapsibleEntry = parameterEntries[findEntry(parameterEntries, id + '-collapsible')];

	    // (2) update title getter
	    var defaultGet = collapsibleEntry.get;
	    collapsibleEntry.get = function() {
	      return assign$4(defaultGet(), {
	        title: templateProperty.label ?
	          translate(templateProperty.label) :
	          templateProperty.binding.name
	      });
	    };

	    // (3) remove name property entry
	    removeEntry$1(parameterEntries, nameIdx);

	    // (4) add description entry
	    if (templateProperty.description) {
	      parameterEntries.splice(1, 0, createDescriptionEntry$1(
	        templateProperty.description,
	        id,
	        collapsibleEntry.isOpen,
	        translate
	      ));
	    }

	    // (5) add parameter toggle
	    parameterEntries.splice(templateProperty.description ? 2 : 1, 0, EntryFactory_1.toggleSwitch(translate, {
	      id: id + '-assignment-toggle',
	      label: translate('Local Variable Assignment'),
	      modelProperty: 'isActive',
	      labelOn: translate('On'),
	      labelOff: translate('Off'),
	      descriptionOff: translate('The parameter won\'t be created as local variable.'),
	      isOn: assignmentIsOn,
	      get: function(element, node) {
	        return { isActive: assignmentIsOn() };
	      },
	      set: function(element, values, node) {
	        var isActive = values.isActive || false;

	        if (isActive) {
	          return createNewInputParameter(element, templateProperty.binding, bpmnFactory);
	        } else {
	          return removeInputParameter(element, templateProperty.binding);
	        }

	      },
	      hidden: function(element, node) {
	        return !isOpen();
	      }
	    }));

	    return parameterEntries;
	  }


	  // filter specific input parameters from template
	  var inputParameters = filter$3(template.properties, function(p) {
	    return !p.type && p.binding.type === CAMUNDA_INPUT_PARAMETER_TYPE$2;
	  });

	  forEach$6(inputParameters, function(property, idx) {
	    var id = 'template-inputs-' + template.id + '-' + idx;
	    inputEntries.push(renderInputParameter(id, property));
	  });

	  group.entries = group.entries.concat(flatten$3(inputEntries));
	};


	// helper ///////////////////////

	function findEntry(entries, id) {
	  return findIndex$2(entries, function(entry) {
	    return entry.id === id;
	  });
	}

	function removeEntry$1(entries, idx) {
	  entries.splice(idx, 1);
	}

	function createDescriptionEntry$1(description, id, show, translate) {
	  description = escapeHTML$m(description);

	  var html = domify$g('<p class="description description--expanded" data-show="show"></p>');

	  var descriptionText = domify$g('<span class="description__text">' + description + '</span>');

	  html.appendChild(descriptionText);

	  function toggleExpanded(expanded) {
	    if (expanded) {
	      domClasses$7(html).add('description--expanded');

	      descriptionText.textContent = description + ' ';

	      expand.textContent = translate('Less');
	    } else {
	      domClasses$7(html).remove('description--expanded');

	      descriptionText.textContent = descriptionShortened + ' ... ';

	      expand.textContent = translate('More');
	    }
	  }

	  var descriptionShortened,
	      expand,
	      expanded = false;

	  if (description.length > MAX_DESCRIPTION_LENGTH$2) {
	    descriptionShortened = description.slice(0, MAX_DESCRIPTION_LENGTH$2);

	    expand = domify$g(
	      '<span class="bpp-entry-link description__expand">' +
	        translate('More') +
	      '</span>'
	    );

	    domEvent$2.bind(expand, 'click', function() {
	      expanded = !expanded;

	      toggleExpanded(expanded);
	    });

	    html.appendChild(expand);

	    toggleExpanded(expanded);
	  }

	  return {
	    id: id + '-description',
	    html: html,
	    show: show
	  };
	}

	function removeInputParameter(element, binding) {
	  var bo = getBusinessObject$H(element),
	      updates = [],
	      extensionElements = bo.get('extensionElements');

	  if (!extensionElements) {
	    return updates;
	  }

	  var inputOutput = findExtension$3(extensionElements, 'camunda:InputOutput');

	  if (!inputOutput) {
	    return updates;
	  }

	  var inputParameter = findInputParameter$2(inputOutput, binding);

	  if (!inputParameter) {
	    return updates;
	  }

	  updates.push(CmdHelper_1.removeElementsFromList(element, inputOutput, 'inputParameters', null, [inputParameter]));

	  return updates;
	}

	function createNewInputParameter(element, binding, bpmnFactory) {
	  var bo = getBusinessObject$H(element),
	      updates = [],
	      extensionElements = bo.get('extensionElements');

	  // (1) ensure extension elements
	  if (!extensionElements) {
	    extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', null, element, bpmnFactory);

	    updates.push(CmdHelper_1.updateBusinessObject(
	      element, bo, { extensionElements: extensionElements }
	    ));
	  }

	  var inputOutput = findExtension$3(extensionElements, 'camunda:InputOutput');

	  // (2) ensure inputOutput element
	  if (!inputOutput) {
	    inputOutput = ElementHelper_1.createElement('camunda:InputOutput', null, bo, bpmnFactory);

	    updates.push(CmdHelper_1.addElementsTolist(
	      element, extensionElements, 'values', inputOutput
	    ));
	  }

	  // (3) create input parameter
	  var inputParameter = createInputParameter$3(binding, null, bpmnFactory);

	  updates.push(CmdHelper_1.addAndRemoveElementsFromList(
	    element,
	    inputOutput,
	    'inputParameters',
	    null,
	    [ inputParameter ],
	    [ ]
	  ));

	  return updates;
	}

	var flatten$4 = require$$0.flatten,
	    filter$4 = require$$0.filter,
	    forEach$7 = require$$0.forEach;

	var getBusinessObject$I = require$$0$1.getBusinessObject;

	var findExtension$4 = Helper.findExtension,
	    findOutputParameter$2 = Helper.findOutputParameter;

	var createOutputParameter$3 = CreateHelper.createOutputParameter;

	var domClasses$8 = require$$1.classes,
	    domEvent$3 = require$$1.event,
	    domify$h = require$$1.domify,
	    domQuery$g = require$$1.query;

	var escapeHTML$n = Utils.escapeHTML;



	var CAMUNDA_OUTPUT_PARAMETER_TYPE$2 = 'camunda:outputParameter';

	var MAX_DESCRIPTION_LENGTH$3 = 200;

	var EMPTY_PARAMETER$1 = {
	  get: function() {},
	  set: function() {}
	};

	/**
	 * Injects element template output parameters into the given group.
	 *
	 * @param {Object} group
	 * @param {djs.model.Base} element
	 * @param {ElementTemplates} elementTemplates
	 * @param {BpmnFactory} bpmnFactory
	 * @param {Function} translate
	 */
	var OutputParametersProps = function(group, element, elementTemplates, bpmnFactory, translate) {

	  var template = elementTemplates.get(element);

	  if (!template) {
	    return [];
	  }

	  var outputEntries = [];


	  function onToggle(value, entryNode) {
	    if (!value) {
	      return;
	    }

	    var currentEntryId = entryNode.dataset.entry;

	    // collapse all other items
	    outputEntries.forEach(function(entries) {
	      var collapsible = entries[0];

	      if (collapsible.id === currentEntryId) {
	        return;
	      }

	      var entryNode = domQuery$g('[data-entry="' + collapsible.id + '"]');
	      collapsible.setOpen(false, entryNode);
	    });
	  }

	  function renderOutputParameter(id, templateProperty) {

	    var parameterEntries = [];

	    // find input parameter first
	    var bo = getBusinessObject$I(element),
	        inputOutput = findExtension$4(bo, 'camunda:InputOutput');

	    if (!inputOutput) {
	      return parameterEntries;
	    }

	    var getParameter = function() {
	      return findOutputParameter$2(inputOutput, templateProperty.binding) || EMPTY_PARAMETER$1;
	    };

	    // (1) add collapsible header
	    var collapsible = EntryFactory_1.collapsible({
	      id: id + '-collapsible',
	      title: translate(templateProperty.label),
	      cssClasses: [
	        'bpp-collapsible--with-mapping',
	        'bpp-collapsible--with-template-out'
	      ],
	      onToggle: onToggle,
	      open: false,
	      get: function() {
	        return {
	          title: translate(templateProperty.label),
	          description: getParameter().name
	        };
	      }
	    });
	    parameterEntries.push(collapsible);

	    var isOpen = collapsible.isOpen;

	    var assignmentIsOn = function() {
	      var inputOutput = findExtension$4(getBusinessObject$I(element), 'camunda:InputOutput'),
	          parameter = findOutputParameter$2(inputOutput, templateProperty.binding);

	      return !!parameter;
	    };

	    // (2) add description
	    if (templateProperty.description) {
	      parameterEntries.push(createDescriptionEntry$2(
	        templateProperty.description,
	        id,
	        isOpen,
	        translate
	      ));
	    }

	    // (3) add parameter toggle
	    parameterEntries.splice(templateProperty.description ? 2 : 1, 0, EntryFactory_1.toggleSwitch(translate, {
	      id: id + '-assignment-toggle',
	      label: translate('Process Variable Assignment'),
	      modelProperty: 'isActive',
	      labelOn: translate('On'),
	      labelOff: translate('Off'),
	      descriptionOff: translate('The parameter won\'t be available in the process scope.'),
	      isOn: assignmentIsOn,
	      get: function(element, node) {
	        return { isActive: assignmentIsOn() };
	      },
	      set: function(element, values, node) {
	        var isActive = values.isActive || false;

	        if (isActive) {
	          return createNewOutputParameter(element, templateProperty.binding, bpmnFactory);
	        } else {
	          return removeOutputParameter(element, templateProperty.binding);
	        }

	      },
	      hidden: function(element, node) {
	        return !isOpen();
	      }
	    }));

	    // (4) add process variable name field
	    parameterEntries.push(EntryFactory_1.validationAwareTextField(translate, {
	      id: id + '-variableName',
	      label: translate('Assign to Process Variable'),
	      modelProperty: 'variableName',
	      getProperty: function(element) {
	        return getParameter().name;
	      },
	      setProperty: function(element, values) {
	        return CmdHelper_1.updateBusinessObject(element, getParameter(), { name: values.variableName });
	      },
	      validate: function(element, values) {
	        var validation = {},
	            nameValue = values.variableName;

	        if (nameValue) {
	          if (Utils.containsSpace(nameValue)) {
	            validation.variableName = translate('Process Variable Name must not contain spaces.');
	          }
	        } else {
	          validation.variableName = translate('Process Variable Name must not be empty.');
	        }

	        return validation;
	      },
	      hidden: function(element, node) {
	        return !isOpen() || !assignmentIsOn();
	      }
	    }));

	    return parameterEntries;
	  }

	  // filter specific output parameters from template
	  var outputParameters = filter$4(template.properties, function(p) {
	    return !p.type && p.binding.type === CAMUNDA_OUTPUT_PARAMETER_TYPE$2;
	  });

	  forEach$7(outputParameters, function(property, idx) {
	    var id = 'template-outputs-' + template.id + '-' + idx;
	    outputEntries.push(renderOutputParameter(id, property));
	  });

	  group.entries = group.entries.concat(flatten$4(outputEntries));
	};

	// helpers ///////////////

	function createDescriptionEntry$2(description, id, show, translate) {
	  description = escapeHTML$n(description);

	  var html = domify$h('<p class="description description--expanded" data-show="show"></p>');

	  var descriptionText = domify$h('<span class="description__text">' + description + '</span>');

	  html.appendChild(descriptionText);

	  function toggleExpanded(expanded) {
	    if (expanded) {
	      domClasses$8(html).add('description--expanded');

	      descriptionText.textContent = description + ' ';

	      expand.textContent = translate('Less');
	    } else {
	      domClasses$8(html).remove('description--expanded');

	      descriptionText.textContent = descriptionShortened + ' ... ';

	      expand.textContent = translate('More');
	    }
	  }

	  var descriptionShortened,
	      expand,
	      expanded = false;

	  if (description.length > MAX_DESCRIPTION_LENGTH$3) {
	    descriptionShortened = description.slice(0, MAX_DESCRIPTION_LENGTH$3);

	    expand = domify$h(
	      '<span class="bpp-entry-link description__expand">' +
	        translate('More') +
	      '</span>'
	    );

	    domEvent$3.bind(expand, 'click', function() {
	      expanded = !expanded;

	      toggleExpanded(expanded);
	    });

	    html.appendChild(expand);

	    toggleExpanded(expanded);
	  }

	  return {
	    id: id + '-description',
	    html: html,
	    show: show
	  };
	}

	function removeOutputParameter(element, binding) {
	  var bo = getBusinessObject$I(element),
	      updates = [],
	      extensionElements = bo.get('extensionElements');

	  if (!extensionElements) {
	    return updates;
	  }

	  var inputOutput = findExtension$4(extensionElements, 'camunda:InputOutput');

	  if (!inputOutput) {
	    return updates;
	  }

	  var outputParameter = findOutputParameter$2(inputOutput, binding);

	  if (!outputParameter) {
	    return updates;
	  }

	  updates.push(CmdHelper_1.removeElementsFromList(element, inputOutput, 'outputParameters', null, [outputParameter]));

	  return updates;
	}

	function createNewOutputParameter(element, binding, bpmnFactory) {
	  var bo = getBusinessObject$I(element),
	      updates = [],
	      extensionElements = bo.get('extensionElements');

	  // (1) ensure extension elements
	  if (!extensionElements) {
	    extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', null, element, bpmnFactory);

	    updates.push(CmdHelper_1.updateBusinessObject(
	      element, bo, { extensionElements: extensionElements }
	    ));
	  }

	  var inputOutput = findExtension$4(extensionElements, 'camunda:InputOutput');

	  // (2) ensure inputOutput element
	  if (!inputOutput) {
	    inputOutput = ElementHelper_1.createElement('camunda:InputOutput', null, bo, bpmnFactory);

	    updates.push(CmdHelper_1.addElementsTolist(
	      element, extensionElements, 'values', inputOutput
	    ));
	  }

	  // (3) create output parameter
	  var outputParameter = createOutputParameter$3(binding, null, bpmnFactory);

	  updates.push(CmdHelper_1.addAndRemoveElementsFromList(
	    element,
	    inputOutput,
	    'outputParameters',
	    null,
	    [ outputParameter ],
	    [ ]
	  ));

	  return updates;
	}

	var getBusinessObject$J = require$$0$1.getBusinessObject;





	var domQuery$h = require$$1.query;



	var InputParameters = function(element, bpmnFactory, options, translate) {

	  options = options || {};

	  var insideConnector = !!options.insideConnector,
	      idPrefix = options.idPrefix || '';

	  var result = {};

	  var entries = result.entries = [];

	  if (!InputOutputHelper_1.isInputOutputSupported(element, insideConnector)) {
	    return result;
	  }

	  var parametersOptions = {
	    insideConnector: insideConnector,
	    idPrefix: idPrefix
	  };

	  // input parameters ///////////////////////////////////////////////////////////////
	  entries.push(
	    getParametersHeading(element, bpmnFactory, {
	      idPrefix: idPrefix,
	      insideConnector: insideConnector,
	      type: 'camunda:InputParameter',
	      prop: 'inputParameters',
	      prefix: 'Input'
	    }));

	  append$1(entries,
	    getInputParameterEntries(element, bpmnFactory, parametersOptions, translate)
	  );

	  return result;
	};

	function getParametersHeading(element, bpmnFactory, options) {
	  var idPrefix = options.idPrefix || '',
	      prefix = options.prefix,
	      type = options.type,
	      prop = options.prop,
	      insideConnector = options.insideConnector;

	  var entry = {
	    id: idPrefix + prefix + '-heading',
	    cssClasses: [ 'bpp-input-output' ],
	    html: '<div class="bpp-field-wrapper">' +
	      '<button type="button" class="bpp-input-output__add add action-button" ' + 'data-action="createElement">' +
	      '</button><input name="hidden" type="hidden">' +
	      '</div>'
	  };

	  entry.createElement = function(_, entryNode) {
	    var commands = createElement();

	    if (commands) {
	      scheduleCommands(commands, entryNode);
	      return true;
	    }
	  };

	  entry.set = function() {
	    var commands = entry._commands;

	    if (commands) {
	      delete entry._commands;
	      return commands;
	    }
	  };

	  function createElement() {
	    var commands = [];
	    var bo = getBusinessObject$J(element);
	    var extensionElements = bo.get('extensionElements');

	    if (!extensionElements) {
	      extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', { values: [] }, bo, bpmnFactory);
	      commands.push(CmdHelper_1.updateBusinessObject(element, bo, { extensionElements: extensionElements }));
	    }

	    var inputOutput = getInputOutput$1(element, insideConnector);
	    if (!inputOutput) {
	      var parent = !insideConnector ? extensionElements : getConnector(element);
	      inputOutput = createInputOutput(parent, bpmnFactory, {
	        inputParameters: [],
	        outputParameters: []
	      });

	      if (!insideConnector) {
	        commands.push(CmdHelper_1.addAndRemoveElementsFromList(
	          element,
	          extensionElements,
	          'values',
	          'extensionElements',
	          [ inputOutput ],
	          []
	        ));
	      } else {
	        commands.push(CmdHelper_1.updateBusinessObject(element, parent, { inputOutput: inputOutput }));
	      }
	    }

	    var newElem = createParameter(type, inputOutput, bpmnFactory, { name: generateElementId$1(prefix) });
	    commands.push(CmdHelper_1.addElementsTolist(element, inputOutput, prop, [], [ newElem ]));

	    return commands;
	  }

	  /**
	   * Schedule commands to be run with next `set` method call.
	   *
	   * @param {Array<any>} commands
	   * @param {HTMLElement} entryNode
	   */
	  function scheduleCommands(commands, entryNode) {
	    entry._commands = commands;

	    // @barmac: hack to make properties panel call `set`
	    var input = domQuery$h('input[type="hidden"]', entryNode);
	    input.value = 1;
	  }

	  return entry;
	}

	function getInputParameterEntries(element, bpmnFactory, options, translate) {
	  var idPrefix = options.idPrefix,
	      insideConnector = options.insideConnector,
	      inputOutput = getInputOutput$1(element, insideConnector),
	      params = getInputParameters$1(element, insideConnector),
	      entries;

	  if (!params.length) {
	    var description = EntryFieldDescription(translate, translate('No variables defined.'));

	    return [{
	      id: idPrefix + 'input-parameter' + '-placeholder',
	      cssClasses: [ 'bpp-input-output-placeholder' ],
	      html: description
	    }];
	  }

	  var inputParameters = params.map(function(param, index) {
	    function onRemove() {
	      var commands = [];
	      commands.push(CmdHelper_1.removeElementsFromList(element, inputOutput, 'inputParameters', null, [param]));

	      // remove inputOutput if there are no input/output parameters anymore
	      if (inputOutput.get('inputParameters').length === 1 && (inputOutput.get('outputParameters') || []).length === 0) {

	        if (!insideConnector) {
	          commands.push(ExtensionElementsHelper_1.removeEntry(getBusinessObject$J(element), element, inputOutput));
	        }
	        else {
	          var connector = getConnector(element);
	          commands.push(CmdHelper_1.updateBusinessObject(element, connector, { inputOutput: undefined }));
	        }
	      }

	      return commands;
	    }

	    return InputOutputParameter(param, bpmnFactory,
	      {
	        idPrefix: idPrefix + 'input-parameter-' + index,
	        onRemove: onRemove,
	        onToggle: onToggle
	      }, translate);
	  });

	  /**
	   * Close remaining collapsible entries within group.
	   *
	   * @param {boolean} value
	   * @param {HTMLElement} entryNode
	   */
	  function onToggle(value, entryNode) {
	    if (!value) {
	      return;
	    }

	    var currentEntryId = entryNode.dataset.entry;

	    inputParameters.forEach(function(inputParameter) {
	      if (inputParameter.entries[0].id === currentEntryId) {
	        return;
	      }

	      inputParameter.setOpen(false);
	    });
	  }

	  entries = inputParameters.map(function(input) {
	    return input.entries;
	  });

	  return flatten$5(entries);
	}


	function append$1(array, items) {
	  Array.prototype.push.apply(array, items);
	}

	function flatten$5(arrays) {
	  return Array.prototype.concat.apply([], arrays);
	}

	function generateElementId$1(prefix) {
	  prefix = prefix + '_';
	  return Utils.nextId(prefix);
	}

	function getInputOutput$1(element, insideConnector) {
	  return InputOutputHelper_1.getInputOutput(element, insideConnector);
	}

	function getConnector(element) {
	  return InputOutputHelper_1.getConnector(element);
	}

	function getInputParameters$1(element, insideConnector) {
	  return InputOutputHelper_1.getInputParameters(element, insideConnector);
	}

	function createElement$1(type, parent, factory, properties) {
	  return ElementHelper_1.createElement(type, properties, parent, factory);
	}

	function createInputOutput(parent, bpmnFactory, properties) {
	  return createElement$1('camunda:InputOutput', parent, bpmnFactory, properties);
	}

	function createParameter(type, parent, bpmnFactory, properties) {
	  return createElement$1(type, parent, bpmnFactory, properties);
	}

	var InputParametersProps$1 = function(group, element, bpmnFactory, elementTemplates, translate) {

	  var template = elementTemplates.get(element);

	  if (template) {
	    return;
	  }

	  var inputParametersEntry = InputParameters(element, bpmnFactory, {}, translate);

	  group.entries = group.entries.concat(inputParametersEntry.entries);
	};

	var getBusinessObject$K = require$$0$1.getBusinessObject;





	var domQuery$i = require$$1.query;



	var OutputParameters = function(element, bpmnFactory, options, translate) {

	  options = options || {};

	  var insideConnector = !!options.insideConnector,
	      idPrefix = options.idPrefix || '';

	  var result = {};

	  var entries = result.entries = [];

	  if (!InputOutputHelper_1.isInputOutputSupported(element, insideConnector) ||
	    !InputOutputHelper_1.areOutputParametersSupported(element, insideConnector)) {
	    return result;
	  }

	  var parametersOptions = {
	    insideConnector: insideConnector,
	    idPrefix: idPrefix
	  };

	  // output parameters ///////////////////////////////////////////////////////
	  entries.push(
	    getParametersHeading$1(element, bpmnFactory, {
	      idPrefix: idPrefix,
	      insideConnector: insideConnector,
	      type: 'camunda:OutputParameter',
	      prop: 'outputParameters',
	      prefix: 'Output'
	    }));

	  append$2(entries,
	    getOutputParameterEntries(element, bpmnFactory, parametersOptions, translate)
	  );

	  return result;
	};

	function getParametersHeading$1(element, bpmnFactory, options) {
	  var idPrefix = options.idPrefix || '',
	      prefix = options.prefix,
	      type = options.type,
	      prop = options.prop,
	      insideConnector = options.insideConnector;

	  var entry = {
	    id: idPrefix + prefix + '-heading',
	    cssClasses: [ 'bpp-input-output' ],
	    html: '<div class="bpp-field-wrapper">' +
	      '<button type="button" class="bpp-input-output__add add action-button" ' + 'data-action="createElement">' +
	      '</button><input name="hidden" type="hidden">' +
	      '</div>'
	  };

	  entry.createElement = function(_, entryNode) {
	    var commands = createElement();

	    if (commands) {
	      scheduleCommands(commands, entryNode);
	      return true;
	    }
	  };

	  entry.set = function() {
	    var commands = entry._commands;

	    if (commands) {
	      delete entry._commands;
	      return commands;
	    }
	  };

	  function createElement() {
	    var commands = [];
	    var bo = getBusinessObject$K(element);
	    var extensionElements = bo.get('extensionElements');

	    if (!extensionElements) {
	      extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', { values: [] }, bo, bpmnFactory);
	      commands.push(CmdHelper_1.updateBusinessObject(element, bo, { extensionElements: extensionElements }));
	    }

	    var inputOutput = getInputOutput$2(element, insideConnector);
	    if (!inputOutput) {
	      var parent = !insideConnector ? extensionElements : getConnector$1(element);
	      inputOutput = createInputOutput$1(parent, bpmnFactory, {
	        inputParameters: [],
	        outputParameters: []
	      });

	      if (!insideConnector) {
	        commands.push(CmdHelper_1.addAndRemoveElementsFromList(
	          element,
	          extensionElements,
	          'values',
	          'extensionElements',
	          [ inputOutput ],
	          []
	        ));
	      } else {
	        commands.push(CmdHelper_1.updateBusinessObject(element, parent, { inputOutput: inputOutput }));
	      }
	    }

	    var newElem = createParameter$1(type, inputOutput, bpmnFactory, { name: generateElementId$2(prefix) });
	    commands.push(CmdHelper_1.addElementsTolist(element, inputOutput, prop, [], [ newElem ]));

	    return commands;
	  }

	  /**
	   * Schedule commands to be run with next `set` method call.
	   *
	   * @param {Array<any>} commands
	   * @param {HTMLElement} entryNode
	   */
	  function scheduleCommands(commands, entryNode) {
	    entry._commands = commands;

	    // @barmac: hack to make properties panel call `set`
	    var input = domQuery$i('input[type="hidden"]', entryNode);
	    input.value = 1;
	  }

	  return entry;
	}

	function getOutputParameterEntries(element, bpmnFactory, options, translate) {
	  var idPrefix = options.idPrefix,
	      insideConnector = options.insideConnector,
	      inputOutput = getInputOutput$2(element, insideConnector),
	      params = getOutputParameters$1(element, insideConnector),
	      entries;

	  if (!params.length) {
	    var description = EntryFieldDescription(translate, translate('No variables defined.'));

	    return [{
	      id: idPrefix + 'output-parameter' + '-placeholder',
	      cssClasses: [ 'bpp-input-output-placeholder' ],
	      html: description
	    }];
	  }

	  var outputParameters = params.map(function(param, index) {
	    function onRemove() {
	      var commands = [];
	      commands.push(CmdHelper_1.removeElementsFromList(element, inputOutput, 'outputParameters', null, [param]));

	      // remove inputOutput if there are no input/output parameters anymore
	      if (inputOutput.get('outputParameters').length === 1 && (inputOutput.get('inputParameters') || []).length === 0) {

	        if (!insideConnector) {
	          commands.push(ExtensionElementsHelper_1.removeEntry(getBusinessObject$K(element), element, inputOutput));
	        }
	        else {
	          var connector = getConnector$1(element);
	          commands.push(CmdHelper_1.updateBusinessObject(element, connector, { inputOutput: undefined }));
	        }
	      }

	      return commands;
	    }

	    return InputOutputParameter(param, bpmnFactory,
	      {
	        idPrefix: idPrefix + 'output-parameter-' + index,
	        onRemove: onRemove,
	        onToggle: onToggle
	      }, translate);
	  });

	  /**
	   * Close remaining collapsible entries within group.
	   *
	   * @param {boolean} value
	   * @param {HTMLElement} entryNode
	   */
	  function onToggle(value, entryNode) {
	    if (!value) {
	      return;
	    }

	    var currentEntryId = entryNode.dataset.entry;

	    outputParameters.forEach(function(outputParameter) {
	      if (outputParameter.entries[0].id === currentEntryId) {
	        return;
	      }

	      outputParameter.setOpen(false);
	    });
	  }

	  entries = outputParameters.map(function(input) {
	    return input.entries;
	  });

	  return flatten$6(entries);
	}

	function append$2(array, items) {
	  Array.prototype.push.apply(array, items);
	}

	function flatten$6(arrays) {
	  return Array.prototype.concat.apply([], arrays);
	}

	function generateElementId$2(prefix) {
	  prefix = prefix + '_';
	  return Utils.nextId(prefix);
	}

	function getInputOutput$2(element, insideConnector) {
	  return InputOutputHelper_1.getInputOutput(element, insideConnector);
	}

	function getConnector$1(element) {
	  return InputOutputHelper_1.getConnector(element);
	}

	function getOutputParameters$1(element, insideConnector) {
	  return InputOutputHelper_1.getOutputParameters(element, insideConnector);
	}

	function createElement$2(type, parent, factory, properties) {
	  return ElementHelper_1.createElement(type, properties, parent, factory);
	}

	function createInputOutput$1(parent, bpmnFactory, properties) {
	  return createElement$2('camunda:InputOutput', parent, bpmnFactory, properties);
	}

	function createParameter$1(type, parent, bpmnFactory, properties) {
	  return createElement$2(type, parent, bpmnFactory, properties);
	}

	var OutputParametersProps$1 = function(group, element, bpmnFactory, elementTemplates, translate) {

	  var template = elementTemplates.get(element);

	  if (template) {
	    return;
	  }

	  var outputParametersEntry = OutputParameters(element, bpmnFactory, {}, translate);

	  group.entries = group.entries.concat(outputParametersEntry.entries);
	};

	var domQuery$j = require$$1.query;

	var ErrorsEntries = function(error, bpmnFactory, element, options, translate) {

	  options = options || {};

	  var idPrefix = options.idPrefix || '';

	  var getError =
	    (options.getError && typeof options.getError === 'function') ?
	      function() {
	        return options.getError();
	      } :
	      function() {
	        return error;
	      };

	  var result = {},
	      entries = [];

	  result.entries = entries;

	  var getCollapsibleTitle = function() {
	    var error = getError();
	    var title = 'No Error referenced';

	    if (error.errorRef) {
	      title = error.errorRef.name;
	      if (error.errorRef.errorCode) {
	        title += ' (code = ' + error.errorRef.errorCode + ')';
	      }
	    }
	    return title;
	  };

	  // heading ////////////////////////////////////////////////////////
	  var collapsible = EntryFactory_1.collapsible({
	    id: idPrefix + 'collapsible',
	    title: getCollapsibleTitle(),
	    description: getError().expression || '',
	    cssClasses: [ 'bpp-collapsible-error' ],
	    open: false,
	    onRemove: options.onRemove,
	    onToggle: options.onToggle,
	    get: function() {
	      return {
	        title: getCollapsibleTitle(),
	        description: getError().expression || '',
	      };
	    }
	  });

	  var isOpen = options.isOpen || collapsible.isOpen;

	  result.setOpen = function(value) {
	    var entryNode = domQuery$j('[data-entry="' + collapsible.id + '"]');
	    collapsible.setOpen(value, entryNode);
	  };

	  entries.push(collapsible);

	  entries.push(EntryFactory_1.validationAwareTextField(translate, {
	    id: idPrefix + 'error-expression',
	    label: translate('Throw Expression'),
	    modelProperty: 'expression',

	    getProperty: function(element, node) {
	      return error.expression;
	    },

	    setProperty: function(element, values, node) {
	      return CmdHelper_1.updateBusinessObject(element, error, values);
	    },

	    validate: function(element, values, node) {
	      var validation = {};
	      var expressionValue = values.expression;

	      if (!expressionValue) {
	        validation.expression = translate('Error must have an expression');
	      }

	      return validation;
	    },

	    hidden: function(element, node) {
	      return !isOpen();
	    }
	  }));


	  entries.push.apply(entries, EventDefinitionReference(element, error, bpmnFactory, {
	    id: idPrefix + 'error-reference',
	    label: translate('Global Error referenced'),
	    elementName: 'error',
	    elementType: 'bpmn:Error',
	    referenceProperty: 'errorRef',
	    newElementIdPrefix: 'Error_',

	    hidden: function(element, node) {
	      return !isOpen();
	    }
	  }));


	  entries.push.apply(entries, ElementReferenceProperty(element, error, bpmnFactory, translate, {
	    id: idPrefix + 'error-element-name',
	    label: translate('Name'),
	    referenceProperty: 'errorRef',
	    modelProperty: 'name',
	    shouldValidate: true,

	    hidden: function(element, node) {
	      return !isOpen();
	    }
	  }));


	  entries.push.apply(entries, ElementReferenceProperty(element, error, bpmnFactory, translate, {
	    id: idPrefix + 'error-element-code',
	    label: translate('Code'),
	    referenceProperty: 'errorRef',
	    modelProperty: 'errorCode',
	    shouldValidate: true,

	    hidden: function(element, node) {
	      return !isOpen();
	    }
	  }));


	  entries.push.apply(entries, ElementReferenceProperty(element, error, bpmnFactory, translate, {
	    id: idPrefix + 'error-element-message',
	    label: translate('Message'),
	    referenceProperty: 'errorRef',
	    modelProperty: 'errorMessage',

	    hidden: function(element, node) {
	      return !isOpen();
	    }
	  }));

	  return result;
	};

	var getBusinessObject$L = require$$0$1.getBusinessObject;








	var domQuery$k = require$$1.query;

	var Errors = function(element, bpmnFactory, options, translate) {

	  var result = {};

	  var entries = result.entries = [];

	  entries.push(
	    getErrorsHeading(element, bpmnFactory, {
	      type: 'camunda:ErrorEventDefinition',
	      prop: 'errorEventDefinition',
	      prefix: 'Error'
	    }));

	  append$3(entries,
	    getErrorsEntries(element, bpmnFactory, {}, translate)
	  );

	  return result;
	};

	function getErrorsHeading(element, bpmnFactory, options) {
	  var prefix = options.prefix;

	  var entry = {
	    id: prefix + '-heading',
	    cssClasses: [ 'bpp-error' ],
	    html: '<div class="bpp-field-wrapper">' +
	            '<button type="button" class="bpp-error__add add action-button" ' + 'data-action="createElement">' +
	            '</button><input name="hidden" type="hidden">' +
	          '</div>'
	  };

	  entry.createElement = function(_, entryNode) {
	    var commands = createElement();

	    if (commands) {
	      scheduleCommands(commands, entryNode);
	      return true;
	    }
	  };

	  entry.set = function() {
	    var commands = entry._commands;

	    if (commands) {
	      delete entry._commands;
	      return commands;
	    }
	  };

	  function createElement() {
	    var commands = [];
	    var bo = getBusinessObject$L(element);
	    var extensionElements = bo.get('extensionElements');

	    if (!extensionElements) {
	      extensionElements = ElementHelper_1.createElement('bpmn:ExtensionElements', { values: [] }, bo, bpmnFactory);
	      commands.push(CmdHelper_1.updateBusinessObject(element, bo, { extensionElements: extensionElements }));
	    }
	    var newElem = ElementHelper_1.createElement('camunda:ErrorEventDefinition', {}, extensionElements, bpmnFactory);
	    commands.push(CmdHelper_1.addElementsTolist(element, extensionElements, 'values', [ newElem ]));

	    return commands;
	  }

	  /**
	   * Schedule commands to be run with next `set` method call.
	   *
	   * @param {Array<any>} commands
	   * @param {HTMLElement} entryNode
	   */
	  function scheduleCommands(commands, entryNode) {
	    entry._commands = commands;

	    // @barmac: hack to make properties panel call `set`
	    var input = domQuery$k('input[type="hidden"]', entryNode);
	    input.value = 1;
	  }

	  return entry;
	}

	function getErrors(bo) {
	  return ExtensionElementsHelper_1.getExtensionElements(bo, 'camunda:ErrorEventDefinition') || [];
	}


	function getErrorsEntries(element, bpmnFactory, options, translate) {
	  var idPrefix = options.idPrefix || '',
	      bo = getBusinessObject$L(element),
	      errorEventDefinitions = getErrors(bo),
	      extensionElements = bo.get('extensionElements'),
	      entries;

	  if (errorEventDefinitions && !errorEventDefinitions.length) {
	    var description = EntryFieldDescription(translate, translate('No errors defined.'));

	    return [{
	      id: idPrefix + 'error-placeholder',
	      cssClasses: [ 'bpp-error-placeholder' ],
	      html: description
	    }];
	  }

	  var errorsEntries = errorEventDefinitions.map(function(definition, index) {

	    function onRemove() {
	      var commands = [];

	      commands.push(CmdHelper_1.removeElementsFromList(element, extensionElements, 'values', 'extensionElements', [definition]));
	      return commands;
	    }

	    return ErrorsEntries(definition, bpmnFactory, element,
	      {
	        idPrefix: idPrefix + 'error-' + index,
	        onRemove: onRemove,
	        onToggle: onToggle
	      }, translate);

	    /**
	     * Close remaining collapsible entries within group.
	     *
	     * @param {boolean} value
	     * @param {HTMLElement} entryNode
	     */
	    function onToggle(value, entryNode) {
	      if (!value) {
	        return;
	      }

	      var currentEntryId = entryNode.dataset.entry;

	      errorsEntries.forEach(function(entry) {
	        if (entry.entries[0].id === currentEntryId) {
	          return;
	        }

	        entry.setOpen(false);
	      });

	    }
	  });

	  entries = errorsEntries.map(function(input) {
	    return input.entries;
	  });

	  return flatten$7(entries);
	}

	function flatten$7(arrays) {
	  return Array.prototype.concat.apply([], arrays);
	}

	function append$3(array, items) {
	  Array.prototype.push.apply(array, items);
	}

	var ErrorsProps = function(group, element, bpmnFactory, elementTemplates, translate) {

	  var template = elementTemplates.get(element);

	  if (template) {
	    return;
	  }

	  var errorsEntry = Errors(element, bpmnFactory, {}, translate);

	  group.entries = group.entries.concat(errorsEntry.entries);
	};

	function getImplementationType$1(element) {
	  return ImplementationTypeHelper_1.getImplementationType(element);
	}

	function getBusinessObject$M(element) {
	  return ImplementationTypeHelper_1.getServiceTaskLikeBusinessObject(element);
	}

	function getConnector$2(bo) {
	  return InputOutputHelper_1.getConnector(bo);
	}

	function isConnector(element) {
	  return getImplementationType$1(element) === 'connector';
	}

	var ConnectorDetailProps = function(group, element, bpmnFactory, translate) {

	  group.entries.push(EntryFactory_1.textField(translate, {
	    id: 'connectorId',
	    label: translate('Connector Id'),
	    modelProperty: 'connectorId',

	    get: function(element, node) {
	      var bo = getBusinessObject$M(element);
	      var connector = bo && getConnector$2(bo);
	      var value = connector && connector.get('connectorId');
	      return { connectorId: value };
	    },

	    set: function(element, values, node) {
	      var bo = getBusinessObject$M(element);
	      var connector = getConnector$2(bo);
	      return CmdHelper_1.updateBusinessObject(element, connector, {
	        connectorId: values.connectorId || undefined
	      });
	    },

	    validate: function(element, values, node) {
	      return isConnector(element) && !values.connectorId ? { connectorId: translate('Must provide a value') } : {};
	    },

	    hidden: function(element, node) {
	      return !isConnector(element);
	    }

	  }));

	};

	var ConnectorInputParametersProps = function(group, element, bpmnFactory, translate) {

	  var inputParametersEntry = InputParameters(element, bpmnFactory, {
	    idPrefix: 'connector-',
	    insideConnector: true
	  }, translate);

	  group.entries = group.entries.concat(inputParametersEntry.entries);
	};

	var ConnectorOutputParametersProps = function(group, element, bpmnFactory, translate) {

	  var outputParametersEntry = OutputParameters(element, bpmnFactory, {
	    idPrefix: 'connector-',
	    insideConnector: true
	  }, translate);

	  group.entries = group.entries.concat(outputParametersEntry.entries);
	};

	var PropertiesProps = function(group, element, bpmnFactory, translate) {

	  var propertiesEntry = Properties$1(element, bpmnFactory, {
	    id: 'properties',
	    modelProperties: [ 'name', 'value' ],
	    labels: [ translate('Name'), translate('Value') ],

	    getParent: function(element, node, bo) {
	      return bo.extensionElements;
	    },

	    createParent: function(element, bo) {
	      var parent = ElementHelper_1.createElement('bpmn:ExtensionElements', { values: [] }, bo, bpmnFactory);
	      var cmd = CmdHelper_1.updateBusinessObject(element, bo, { extensionElements: parent });
	      return {
	        cmd: cmd,
	        parent: parent
	      };
	    }
	  }, translate);

	  if (propertiesEntry) {
	    group.entries.push(propertiesEntry);
	  }

	};

	var JobPriority = function(element, bpmnFactory, options, translate) {

	  var getBusinessObject = options.getBusinessObject;

	  var jobPriorityEntry = EntryFactory_1.textField(translate, {
	    id: 'jobPriority',
	    label: translate('Job Priority'),
	    modelProperty: 'jobPriority',

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      return {
	        jobPriority: bo.get('camunda:jobPriority')
	      };
	    },

	    set: function(element, values) {
	      var bo = getBusinessObject(element);
	      return CmdHelper_1.updateBusinessObject(element, bo, {
	        'camunda:jobPriority': values.jobPriority || undefined
	      });
	    }

	  });

	  return [ jobPriorityEntry ];

	};

	var is$I = require$$0$1.is,
	    getBusinessObject$N = require$$0$1.getBusinessObject;



	var JobConfigurationProps = function(group, element, bpmnFactory, translate) {
	  var businessObject = getBusinessObject$N(element);

	  if (is$I(element, 'camunda:JobPriorized') ||
	      is$I(element, 'bpmn:Participant') && businessObject.get('processRef')) {

	    group.entries = group.entries.concat(JobPriority(element, bpmnFactory, {
	      getBusinessObject: function(element) {
	        var bo = getBusinessObject$N(element);

	        if (!is$I(bo, 'bpmn:Participant')) {
	          return bo;
	        }

	        return bo.get('processRef');
	      }
	    }, translate));
	  }

	  if (is$I(element, 'camunda:AsyncCapable')) {
	    group.entries = group.entries.concat(JobRetryTimeCycle(element, bpmnFactory, {
	      getBusinessObject: getBusinessObject$N
	    }, translate));
	  }

	};

	var HistoryTimeToLive = function(element, bpmnFactory, options, translate) {

	  var getBusinessObject = options.getBusinessObject;

	  var historyTimeToLiveEntry = EntryFactory_1.textField(translate, {
	    id: 'historyTimeToLive',
	    label: translate('History Time To Live'),
	    modelProperty: 'historyTimeToLive',

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      var historyTimeToLive = bo.get('camunda:historyTimeToLive');

	      return {
	        historyTimeToLive: historyTimeToLive ? historyTimeToLive : ''
	      };
	    },

	    set: function(element, values) {
	      var bo = getBusinessObject(element);
	      return CmdHelper_1.updateBusinessObject(element, bo, {
	        'camunda:historyTimeToLive': values.historyTimeToLive || undefined
	      });
	    }

	  });

	  return [ historyTimeToLiveEntry ];
	};

	var is$J = require$$0$1.is,
	    getBusinessObject$O = require$$0$1.getBusinessObject;



	var HistoryTimeToLiveProps = function(group, element, bpmnFactory, translate) {
	  var businessObject = getBusinessObject$O(element);

	  if (is$J(element, 'camunda:Process') ||
	      is$J(element, 'bpmn:Participant') && businessObject.get('processRef')) {

	    group.entries = group.entries.concat(HistoryTimeToLive(element, bpmnFactory, {
	      getBusinessObject: function(element) {
	        var bo = getBusinessObject$O(element);

	        if (!is$J(bo, 'bpmn:Participant')) {
	          return bo;
	        }

	        return bo.get('processRef');
	      }
	    }, translate));

	  }
	};

	var CandidateStarter = function(element, bpmnFactory, options, translate) {

	  var getBusinessObject = options.getBusinessObject;

	  var candidateStarterGroupsEntry = EntryFactory_1.textField(translate, {
	    id: 'candidateStarterGroups',
	    label: translate('Candidate Starter Groups'),
	    modelProperty: 'candidateStarterGroups',
	    description: translate('Specify more than one group as a comma separated list.'),

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      var candidateStarterGroups = bo.get('camunda:candidateStarterGroups');

	      return {
	        candidateStarterGroups: candidateStarterGroups ? candidateStarterGroups : ''
	      };
	    },

	    set: function(element, values) {
	      var bo = getBusinessObject(element);
	      return CmdHelper_1.updateBusinessObject(element, bo, {
	        'camunda:candidateStarterGroups': values.candidateStarterGroups || undefined
	      });
	    }

	  });

	  var candidateStarterUsersEntry = EntryFactory_1.textField(translate, {
	    id: 'candidateStarterUsers',
	    label: translate('Candidate Starter Users'),
	    modelProperty: 'candidateStarterUsers',
	    description: translate('Specify more than one user as a comma separated list.'),

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      var candidateStarterUsers = bo.get('camunda:candidateStarterUsers');

	      return {
	        candidateStarterUsers: candidateStarterUsers ? candidateStarterUsers : ''
	      };
	    },

	    set: function(element, values) {
	      var bo = getBusinessObject(element);
	      return CmdHelper_1.updateBusinessObject(element, bo, {
	        'camunda:candidateStarterUsers': values.candidateStarterUsers || undefined
	      });
	    }

	  });

	  return [
	    candidateStarterGroupsEntry,
	    candidateStarterUsersEntry
	  ];
	};

	var is$K = require$$0$1.is,
	    getBusinessObject$P = require$$0$1.getBusinessObject;



	var CandidateStarterProps = function(group, element, bpmnFactory, translate) {
	  var businessObject = getBusinessObject$P(element);

	  if (is$K(element, 'camunda:Process') ||
	      is$K(element, 'bpmn:Participant') && businessObject.get('processRef')) {

	    group.entries = group.entries.concat(CandidateStarter(element, bpmnFactory, {
	      getBusinessObject: function(element) {
	        var bo = getBusinessObject$P(element);

	        if (!is$K(bo, 'bpmn:Participant')) {
	          return bo;
	        }

	        return bo.get('processRef');
	      }
	    }, translate));

	  }
	};

	var Tasklist = function(element, bpmnFactory, options, translate) {

	  var getBusinessObject = options.getBusinessObject;

	  var isStartableInTasklistEntry = EntryFactory_1.checkbox(translate, {
	    id: 'isStartableInTasklist',
	    label: translate('Startable'),
	    modelProperty: 'isStartableInTasklist',

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      var isStartableInTasklist = bo.get('camunda:isStartableInTasklist');

	      return {
	        isStartableInTasklist: isStartableInTasklist ? isStartableInTasklist : ''
	      };
	    },

	    set: function(element, values) {
	      var bo = getBusinessObject(element);
	      return CmdHelper_1.updateBusinessObject(element, bo, {
	        'camunda:isStartableInTasklist': !!values.isStartableInTasklist
	      });
	    }

	  });

	  return [
	    isStartableInTasklistEntry
	  ];
	};

	var is$L = require$$0$1.is,
	    getBusinessObject$Q = require$$0$1.getBusinessObject;



	var TasklistProps = function(group, element, bpmnFactory, translate) {
	  var businessObject = getBusinessObject$Q(element);

	  if (is$L(element, 'camunda:Process') ||
	      is$L(element, 'bpmn:Participant') && businessObject.get('processRef')) {

	    group.entries = group.entries.concat(Tasklist(element, bpmnFactory, {
	      getBusinessObject: function(element) {
	        var bo = getBusinessObject$Q(element);

	        if (!is$L(bo, 'bpmn:Participant')) {
	          return bo;
	        }

	        return bo.get('processRef');
	      }
	    }, translate));

	  }
	};

	var ExternalTaskPriority = function(element, bpmnFactory, options, translate) {

	  var getBusinessObject = options.getBusinessObject;

	  var externalTaskPriorityEntry = EntryFactory_1.textField(translate, {
	    id: 'externalTaskPriority',
	    label: translate('Task Priority'),
	    modelProperty: 'taskPriority',

	    get: function(element, node) {
	      var bo = getBusinessObject(element);
	      return {
	        taskPriority: bo.get('camunda:taskPriority')
	      };
	    },

	    set: function(element, values) {
	      var bo = getBusinessObject(element);
	      return CmdHelper_1.updateBusinessObject(element, bo, {
	        'camunda:taskPriority': values.taskPriority || undefined
	      });
	    }

	  });

	  return [ externalTaskPriorityEntry ];

	};

	var is$M = require$$0$1.is,
	    getBusinessObject$R = require$$0$1.getBusinessObject;





	function getServiceTaskLikeBusinessObject(element) {
	  var bo = ImplementationTypeHelper_1.getServiceTaskLikeBusinessObject(element);

	  // if the element is not a serviceTaskLike element, fetch the normal business object
	  // This avoids the loss of the process / participant business object
	  if (!bo) {
	    bo = getBusinessObject$R(element);
	  }

	  return bo;
	}

	var ExternalTaskConfigurationProps = function(group, element, bpmnFactory, translate) {

	  var bo = getServiceTaskLikeBusinessObject(element);

	  if (!bo) {
	    return;
	  }

	  if (is$M(bo, 'camunda:TaskPriorized') || (is$M(bo, 'bpmn:Participant')) && bo.get('processRef')) {
	    group.entries = group.entries.concat(ExternalTaskPriority(element, bpmnFactory, {
	      getBusinessObject: function(element) {
	        if (!is$M(bo, 'bpmn:Participant')) {
	          return bo;
	        }
	        return bo.get('processRef');
	      }
	    }, translate));
	  }
	};

	var FieldInjectionProps = function(group, element, bpmnFactory, translate) {

	  var bo = ImplementationTypeHelper_1.getServiceTaskLikeBusinessObject(element);

	  if (!bo) {
	    return;
	  }

	  var fieldInjectionEntry = FieldInjection(element, bpmnFactory, translate, { businessObject: bo });

	  if (fieldInjectionEntry && fieldInjectionEntry.length > 0) {
	    group.entries = group.entries.concat(fieldInjectionEntry);
	  }

	};

	var is$N = require$$0$1.is;

	// bpmn properties


	// camunda properties




	var getTemplateId$5 = Helper.getTemplateId;

	// Input/Output


	// Connector


	// properties


	// job configuration


	// history time to live


	// candidate starter groups/users


	// tasklist


	// external task configuration


	// field injection


	var getBusinessObject$S = require$$0$1.getBusinessObject,
	    implementationTypeHelper = ImplementationTypeHelper_1;

	// helpers ////////////////////////////////////////

	var isExternalTaskPriorityEnabled = function(element) {
	  var businessObject = getBusinessObject$S(element);

	  // show only if element is a process, a participant ...
	  if (is$N(element, 'bpmn:Process') || is$N(element, 'bpmn:Participant') && businessObject.get('processRef')) {
	    return true;
	  }

	  var externalBo = ImplementationTypeHelper_1.getServiceTaskLikeBusinessObject(element),
	      isExternalTask = ImplementationTypeHelper_1.getImplementationType(externalBo) === 'external';

	  // ... or an external task with selected external implementation type
	  return !!ImplementationTypeHelper_1.isExternalCapable(externalBo) && isExternalTask;
	};

	var isJobConfigEnabled = function(element) {
	  var businessObject = getBusinessObject$S(element);

	  if (is$N(element, 'bpmn:Process') || is$N(element, 'bpmn:Participant') && businessObject.get('processRef')) {
	    return true;
	  }

	  // async behavior
	  var bo = getBusinessObject$S(element);
	  if (AsyncCapableHelper.isAsyncBefore(bo) || AsyncCapableHelper.isAsyncAfter(bo)) {
	    return true;
	  }

	  // timer definition
	  if (is$N(element, 'bpmn:Event')) {
	    return !!EventDefinitionHelper_1.getTimerEventDefinition(element);
	  }

	  return false;
	};

	var getListenerLabel = function(param, translate) {

	  if (is$N(param, 'camunda:ExecutionListener')) {
	    return translate('Execution Listener');
	  }

	  if (is$N(param, 'camunda:TaskListener')) {
	    return translate('Task Listener');
	  }

	  return '';
	};

	var PROCESS_KEY_HINT = 'This maps to the process definition key.';
	var TASK_KEY_HINT = 'This maps to the task definition key.';

	function getIdOptions$1(element) {

	  if (is$N(element, 'bpmn:Participant')) {
	    return { id: 'participant-id', label: 'Participant Id' };
	  }

	  if (is$N(element, 'bpmn:Process')) {
	    return { description: PROCESS_KEY_HINT };
	  }

	  if (is$N(element, 'bpmn:UserTask')) {
	    return { description: TASK_KEY_HINT };
	  }
	}

	function getNameOptions$1(element) {
	  if (is$N(element, 'bpmn:Participant')) {
	    return { id: 'participant-name', label: 'Participant Name' };
	  }
	}

	function getProcessOptions(element) {
	  if (is$N(element, 'bpmn:Participant')) {
	    return { processIdDescription: PROCESS_KEY_HINT };
	  }
	}

	function createElementTemplateGroups(
	    element,
	    bpmnFactory,
	    canvas,
	    commandStack,
	    elementTemplates,
	    modeling,
	    replace,
	    selection,
	    translate) {
	  var templateId = getTemplateId$5(element);

	  if (!templateId) {
	    return [];
	  }

	  var descriptionGroup = DescriptionProps(
	    element, commandStack, elementTemplates, modeling, replace, selection, translate);

	  var idOptions = getIdOptions$1(element) || {};

	  idOptions.id = 'element-template-element-id';

	  var nameOptions = { id: 'element-template-element-name' };

	  IdProps(descriptionGroup, element, translate, idOptions);
	  NameProps(descriptionGroup, element, bpmnFactory, canvas, translate, nameOptions);
	  ProcessProps(descriptionGroup, element, translate, getProcessOptions(element));

	  var elementTemplateInputParametersGroup = {
	    id: 'template-inputs',
	    label: translate('Input Parameters'),
	    entries: []
	  };
	  InputParametersProps(elementTemplateInputParametersGroup, element, elementTemplates, bpmnFactory, translate);

	  var elementTemplateOutputParametersGroup = {
	    id: 'template-outputs',
	    label: translate('Output Parameters'),
	    entries: []
	  };
	  OutputParametersProps(elementTemplateOutputParametersGroup, element, elementTemplates, bpmnFactory, translate);

	  var customFieldsGroups = CustomProps(element, elementTemplates, bpmnFactory, translate);

	  return [
	    descriptionGroup,
	    elementTemplateInputParametersGroup,
	    elementTemplateOutputParametersGroup
	  ].concat(customFieldsGroups);
	}

	function createGeneralTabGroups$1(
	    element, canvas, bpmnFactory,
	    elementRegistry, elementTemplates, translate) {

	  // refer to target element for external labels
	  element = element.labelTarget || element;

	  var generalGroup = {
	    id: 'general',
	    label: translate('General'),
	    entries: []
	  };

	  IdProps(generalGroup, element, translate, getIdOptions$1(element));
	  NameProps(generalGroup, element, bpmnFactory, canvas, translate, getNameOptions$1(element));
	  ProcessProps(generalGroup, element, translate, getProcessOptions(element));
	  VersionTagProps(generalGroup, element, translate);
	  ExecutableProps(generalGroup, element, translate);
	  ChooserProps(generalGroup, element, elementTemplates, translate);

	  var detailsGroup = {
	    id: 'details',
	    label: translate('Details'),
	    entries: []
	  };
	  ServiceTaskDelegateProps(detailsGroup, element, bpmnFactory, translate);
	  UserTaskProps(detailsGroup, element, translate);
	  ScriptTaskProps(detailsGroup, element, bpmnFactory, translate);
	  LinkProps(detailsGroup, element, translate);
	  CallActivityProps(detailsGroup, element, bpmnFactory, translate);
	  EventProps(detailsGroup, element, bpmnFactory, elementRegistry, translate);
	  ErrorEventProps(detailsGroup, element, bpmnFactory, translate);
	  ConditionalProps(detailsGroup, element, bpmnFactory, translate);
	  StartEventInitiator(detailsGroup, element, translate); // this must be the last element of the details group!

	  var multiInstanceGroup = {
	    id: 'multiInstance',
	    label: translate('Multi Instance'),
	    entries: []
	  };
	  MultiInstanceLoopProps(multiInstanceGroup, element, bpmnFactory, translate);

	  var asyncGroup = {
	    id : 'async',
	    label: translate('Asynchronous Continuations'),
	    entries : []
	  };
	  AsynchronousContinuationProps(asyncGroup, element, bpmnFactory, translate);

	  var jobConfigurationGroup = {
	    id : 'jobConfiguration',
	    label : translate('Job Configuration'),
	    entries : [],
	    enabled: isJobConfigEnabled
	  };
	  JobConfigurationProps(jobConfigurationGroup, element, bpmnFactory, translate);

	  var externalTaskGroup = {
	    id : 'externalTaskConfiguration',
	    label : translate('External Task Configuration'),
	    entries : [],
	    enabled: isExternalTaskPriorityEnabled
	  };
	  ExternalTaskConfigurationProps(externalTaskGroup, element, bpmnFactory, translate);


	  var candidateStarterGroup = {
	    id: 'candidateStarterConfiguration',
	    label: translate('Candidate Starter Configuration'),
	    entries: []
	  };
	  CandidateStarterProps(candidateStarterGroup, element, bpmnFactory, translate);

	  var historyTimeToLiveGroup = {
	    id: 'historyConfiguration',
	    label: translate('History Configuration'),
	    entries: []
	  };
	  HistoryTimeToLiveProps(historyTimeToLiveGroup, element, bpmnFactory, translate);

	  var tasklistGroup = {
	    id: 'tasklist',
	    label: translate('Tasklist Configuration'),
	    entries: []
	  };
	  TasklistProps(tasklistGroup, element, bpmnFactory, translate);

	  var documentationGroup = {
	    id: 'documentation',
	    label: translate('Documentation'),
	    entries: []
	  };
	  DocumentationProps(documentationGroup, element, bpmnFactory, translate);

	  var groups = [];
	  groups.push(generalGroup);
	  groups.push(detailsGroup);
	  groups.push(externalTaskGroup);
	  groups.push(multiInstanceGroup);
	  groups.push(asyncGroup);
	  groups.push(jobConfigurationGroup);
	  groups.push(candidateStarterGroup);
	  groups.push(historyTimeToLiveGroup);
	  groups.push(tasklistGroup);
	  groups.push(documentationGroup);

	  return groups;
	}

	function createVariablesTabGroups(element, bpmnFactory, elementRegistry, translate) {
	  var variablesGroup = {
	    id : 'variables',
	    label : translate('Variables'),
	    entries: []
	  };
	  VariableMappingProps(variablesGroup, element, bpmnFactory, translate);

	  return [
	    variablesGroup
	  ];
	}

	function createProcessVariablesTabGroups(element, translate) {
	  var processVariablesGroup = {
	    id : 'process-variables',
	    label : translate('Variables'),
	    entries: []
	  };

	  ProcessVariablesProps(processVariablesGroup, element, translate);

	  return [
	    processVariablesGroup
	  ];
	}

	function createFormsTabGroups(element, bpmnFactory, elementRegistry, translate) {
	  var formGroup = {
	    id : 'forms',
	    label : translate('Forms'),
	    entries: []
	  };
	  FormProps(formGroup, element, bpmnFactory, translate);

	  return [
	    formGroup
	  ];
	}

	function createListenersTabGroups(element, bpmnFactory, elementRegistry, translate) {

	  var listenersGroup = {
	    id : 'listeners',
	    label: translate('Listeners'),
	    entries: []
	  };

	  var options = ListenerProps(listenersGroup, element, bpmnFactory, translate);

	  var listenerDetailsGroup = {
	    id: 'listener-details',
	    entries: [],
	    enabled: function(element, node) {
	      return options.getSelectedListener(element, node);
	    },
	    label: function(element, node) {
	      var param = options.getSelectedListener(element, node);
	      return getListenerLabel(param, translate);
	    }
	  };

	  ListenerDetailProps(listenerDetailsGroup, element, bpmnFactory, options, translate);

	  var listenerFieldsGroup = {
	    id: 'listener-fields',
	    label: translate('Field Injection'),
	    entries: [],
	    enabled: function(element, node) {
	      return options.getSelectedListener(element, node);
	    }
	  };

	  ListenerFieldInjectionProps(listenerFieldsGroup, element, bpmnFactory, options, translate);

	  return [
	    listenersGroup,
	    listenerDetailsGroup,
	    listenerFieldsGroup
	  ];
	}

	function createInputOutputTabGroups(element, bpmnFactory, elementTemplates, translate) {

	  var inputParametersGroup = {
	    id: 'input-parameters',
	    label: translate('Input Parameters'),
	    entries: []
	  };

	  InputParametersProps$1(inputParametersGroup, element, bpmnFactory, elementTemplates, translate);

	  var outputParametersGroup = {
	    id: 'output-parameters',
	    label: translate('Output Parameters'),
	    entries: []
	  };

	  OutputParametersProps$1(outputParametersGroup, element, bpmnFactory, elementTemplates, translate);

	  var errorsGroup = {
	    id: 'errors',
	    label: translate('Errors'),
	    entries: [],

	    enabled: function(element, node) {
	      var businessObject = getBusinessObject$S(element);
	      var isExternal = ImplementationTypeHelper_1.getImplementationType(businessObject) === 'external';

	      return is$N(element, 'bpmn:ServiceTask') && isExternal;
	    },
	  };

	  ErrorsProps(errorsGroup, element, bpmnFactory, elementTemplates, translate);

	  return [
	    inputParametersGroup,
	    outputParametersGroup,
	    errorsGroup
	  ];
	}

	function createConnectorTabGroups(element, bpmnFactory, elementRegistry, translate) {
	  var connectorDetailsGroup = {
	    id: 'connector-details',
	    label: translate('Details'),
	    entries: []
	  };

	  ConnectorDetailProps(connectorDetailsGroup, element, bpmnFactory, translate);

	  var connectorInputParametersGroup = {
	    id: 'connector-input-parameters',
	    label: translate('Input Parameters'),
	    entries: []
	  };

	  ConnectorInputParametersProps(connectorInputParametersGroup, element, bpmnFactory, translate);

	  var connectorOutputParametersGroup = {
	    id: 'connector-output-parameters',
	    label: translate('Output Parameters'),
	    entries: []
	  };

	  ConnectorOutputParametersProps(connectorOutputParametersGroup, element, bpmnFactory, translate);

	  return [
	    connectorDetailsGroup,
	    connectorInputParametersGroup,
	    connectorOutputParametersGroup
	  ];
	}

	function createFieldInjectionsTabGroups(element, bpmnFactory, elementRegistry, translate) {

	  var fieldGroup = {
	    id: 'field-injections-properties',
	    label: translate('Field Injections'),
	    entries: []
	  };

	  FieldInjectionProps(fieldGroup, element, bpmnFactory, translate);

	  return [
	    fieldGroup
	  ];
	}

	function createExtensionElementsGroups(element, bpmnFactory, elementRegistry, translate) {

	  var propertiesGroup = {
	    id : 'extensionElements-properties',
	    label: translate('Properties'),
	    entries: []
	  };
	  PropertiesProps(propertiesGroup, element, bpmnFactory, translate);

	  return [
	    propertiesGroup
	  ];
	}

	// Camunda Properties Provider /////////////////////////////////////


	/**
	 * A properties provider for Camunda related properties.
	 *
	 * @param {BpmnFactory} bpmnFactory
	 * @param {Canvas} canvas
	 * @param {ElementRegistry} elementRegistry
	 * @param {ElementTemplates} elementTemplates
	 * @param {EventBus} eventBus
	 * @param {Modeling} modeling
	 * @param {Replace} replace
	 * @param {Selection} selection
	 * @param {Translate} translate
	 */
	function CamundaPropertiesProvider(
	    bpmnFactory,
	    canvas,
	    commandStack,
	    elementRegistry,
	    elementTemplates,
	    eventBus,
	    modeling,
	    replace,
	    selection,
	    translate
	) {
	  PropertiesActivator_1.call(this, eventBus);

	  this.getTabs = function(element) {

	    var generalTab = {
	      id: 'general',
	      label: translate('General'),
	      groups: createGeneralTabGroups$1(
	        element, canvas, bpmnFactory,
	        elementRegistry, elementTemplates, translate)
	    };

	    var elementTemplateTab = {
	      id: 'element-template',
	      label: translate('Template'),
	      groups: createElementTemplateGroups(
	        element,
	        bpmnFactory,
	        canvas,
	        commandStack,
	        elementTemplates,
	        modeling,
	        replace,
	        selection,
	        translate
	      )
	    };

	    var variablesTab = {
	      id: 'variables',
	      label: translate('Variables'),
	      groups: createVariablesTabGroups(element, bpmnFactory, elementRegistry, translate)
	    };

	    var processVariablesTab = {
	      id: 'process-variables',
	      label: translate('Variables'),
	      groups: createProcessVariablesTabGroups(element, translate)
	    };

	    var formsTab = {
	      id: 'forms',
	      label: translate('Forms'),
	      groups: createFormsTabGroups(element, bpmnFactory, elementRegistry, translate)
	    };

	    var listenersTab = {
	      id: 'listeners',
	      label: translate('Listeners'),
	      groups: createListenersTabGroups(element, bpmnFactory, elementRegistry, translate),
	      enabled: function(element) {
	        return !EventDefinitionHelper_1.getLinkEventDefinition(element)
	          || (!is$N(element, 'bpmn:IntermediateThrowEvent')
	          && EventDefinitionHelper_1.getLinkEventDefinition(element));
	      }
	    };

	    var inputOutputTab = {
	      id: 'input-output',
	      label: translate('Input/Output'),
	      groups: createInputOutputTabGroups(element, bpmnFactory, elementTemplates, translate)
	    };

	    var connectorTab = {
	      id: 'connector',
	      label: translate('Connector'),
	      groups: createConnectorTabGroups(element, bpmnFactory, elementRegistry, translate),
	      enabled: function(element) {
	        var bo = implementationTypeHelper.getServiceTaskLikeBusinessObject(element);
	        return bo && implementationTypeHelper.getImplementationType(bo) === 'connector';
	      }
	    };

	    var fieldInjectionsTab = {
	      id: 'field-injections',
	      label: translate('Field Injections'),
	      groups: createFieldInjectionsTabGroups(element, bpmnFactory, elementRegistry, translate)
	    };

	    var extensionsTab = {
	      id: 'extensionElements',
	      label: translate('Extensions'),
	      groups: createExtensionElementsGroups(element, bpmnFactory, elementRegistry, translate)
	    };

	    return [
	      generalTab,
	      elementTemplateTab,
	      variablesTab,
	      processVariablesTab,
	      connectorTab,
	      formsTab,
	      listenersTab,
	      inputOutputTab,
	      fieldInjectionsTab,
	      extensionsTab
	    ];
	  };

	}

	CamundaPropertiesProvider.$inject = [
	  'bpmnFactory',
	  'canvas',
	  'commandStack',
	  'elementRegistry',
	  'elementTemplates',
	  'eventBus',
	  'modeling',
	  'replace',
	  'selection',
	  'translate'
	];

	inherits_browser(CamundaPropertiesProvider, PropertiesActivator_1);

	var CamundaPropertiesProvider_1 = CamundaPropertiesProvider;

	var camunda = {
	  __depends__: [
	    elementTemplates,
	    require$$1$1.default
	  ],
	  __init__: [ 'propertiesProvider' ],
	  propertiesProvider: [ 'type', CamundaPropertiesProvider_1 ]
	};

	var name$6 = "Camunda";
	var uri$5 = "http://camunda.org/schema/1.0/bpmn";
	var prefix$5 = "camunda";
	var xml$2 = {
		tagAlias: "lowerCase"
	};
	var associations$5 = [
	];
	var types$5 = [
		{
			name: "Definitions",
			isAbstract: true,
			"extends": [
				"bpmn:Definitions"
			],
			properties: [
				{
					name: "diagramRelationId",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "InOutBinding",
			superClass: [
				"Element"
			],
			isAbstract: true,
			properties: [
				{
					name: "source",
					isAttr: true,
					type: "String"
				},
				{
					name: "sourceExpression",
					isAttr: true,
					type: "String"
				},
				{
					name: "target",
					isAttr: true,
					type: "String"
				},
				{
					name: "businessKey",
					isAttr: true,
					type: "String"
				},
				{
					name: "local",
					isAttr: true,
					type: "Boolean",
					"default": false
				},
				{
					name: "variables",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "In",
			superClass: [
				"InOutBinding"
			],
			meta: {
				allowedIn: [
					"bpmn:CallActivity",
					"bpmn:SignalEventDefinition"
				]
			}
		},
		{
			name: "Out",
			superClass: [
				"InOutBinding"
			],
			meta: {
				allowedIn: [
					"bpmn:CallActivity"
				]
			}
		},
		{
			name: "AsyncCapable",
			isAbstract: true,
			"extends": [
				"bpmn:Activity",
				"bpmn:Gateway",
				"bpmn:Event"
			],
			properties: [
				{
					name: "async",
					isAttr: true,
					type: "Boolean",
					"default": false
				},
				{
					name: "asyncBefore",
					isAttr: true,
					type: "Boolean",
					"default": false
				},
				{
					name: "asyncAfter",
					isAttr: true,
					type: "Boolean",
					"default": false
				},
				{
					name: "exclusive",
					isAttr: true,
					type: "Boolean",
					"default": true
				}
			]
		},
		{
			name: "JobPriorized",
			isAbstract: true,
			"extends": [
				"bpmn:Process",
				"camunda:AsyncCapable"
			],
			properties: [
				{
					name: "jobPriority",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "SignalEventDefinitionExtension",
			isAbstract: true,
			"extends": [
				"bpmn:SignalEventDefinition"
			],
			properties: [
				{
					name: "async",
					isAttr: true,
					type: "Boolean",
					"default": false
				}
			]
		},
		{
			name: "ErrorEventDefinitionExtension",
			isAbstract: true,
			"extends": [
				"bpmn:ErrorEventDefinition"
			],
			properties: [
				{
					name: "errorCodeVariable",
					isAttr: true,
					type: "String"
				},
				{
					name: "errorMessageVariable",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "ErrorEventDefinition",
			superClass: [
				"bpmn:ErrorEventDefinition",
				"Element"
			],
			properties: [
				{
					name: "expression",
					isAttr: true,
					type: "String"
				}
			],
			meta: {
				allowedIn: [
					"bpmn:ServiceTask"
				]
			}
		},
		{
			name: "Error",
			isAbstract: true,
			"extends": [
				"bpmn:Error"
			],
			properties: [
				{
					name: "camunda:errorMessage",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "PotentialStarter",
			superClass: [
				"Element"
			],
			properties: [
				{
					name: "resourceAssignmentExpression",
					type: "bpmn:ResourceAssignmentExpression"
				}
			]
		},
		{
			name: "FormSupported",
			isAbstract: true,
			"extends": [
				"bpmn:StartEvent",
				"bpmn:UserTask"
			],
			properties: [
				{
					name: "formHandlerClass",
					isAttr: true,
					type: "String"
				},
				{
					name: "formKey",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "TemplateSupported",
			isAbstract: true,
			"extends": [
				"bpmn:Process",
				"bpmn:FlowElement"
			],
			properties: [
				{
					name: "modelerTemplate",
					isAttr: true,
					type: "String"
				},
				{
					name: "modelerTemplateVersion",
					isAttr: true,
					type: "Integer"
				}
			]
		},
		{
			name: "Initiator",
			isAbstract: true,
			"extends": [
				"bpmn:StartEvent"
			],
			properties: [
				{
					name: "initiator",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "ScriptTask",
			isAbstract: true,
			"extends": [
				"bpmn:ScriptTask"
			],
			properties: [
				{
					name: "resultVariable",
					isAttr: true,
					type: "String"
				},
				{
					name: "resource",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Process",
			isAbstract: true,
			"extends": [
				"bpmn:Process"
			],
			properties: [
				{
					name: "candidateStarterGroups",
					isAttr: true,
					type: "String"
				},
				{
					name: "candidateStarterUsers",
					isAttr: true,
					type: "String"
				},
				{
					name: "versionTag",
					isAttr: true,
					type: "String"
				},
				{
					name: "historyTimeToLive",
					isAttr: true,
					type: "String"
				},
				{
					name: "isStartableInTasklist",
					isAttr: true,
					type: "Boolean",
					"default": true
				}
			]
		},
		{
			name: "EscalationEventDefinitionExtension",
			isAbstract: true,
			"extends": [
				"bpmn:EscalationEventDefinition"
			],
			properties: [
				{
					name: "escalationCodeVariable",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "FormalExpression",
			isAbstract: true,
			"extends": [
				"bpmn:FormalExpression"
			],
			properties: [
				{
					name: "resource",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Assignable",
			"extends": [
				"bpmn:UserTask"
			],
			properties: [
				{
					name: "assignee",
					isAttr: true,
					type: "String"
				},
				{
					name: "candidateUsers",
					isAttr: true,
					type: "String"
				},
				{
					name: "candidateGroups",
					isAttr: true,
					type: "String"
				},
				{
					name: "dueDate",
					isAttr: true,
					type: "String"
				},
				{
					name: "followUpDate",
					isAttr: true,
					type: "String"
				},
				{
					name: "priority",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "CallActivity",
			"extends": [
				"bpmn:CallActivity"
			],
			properties: [
				{
					name: "calledElementBinding",
					isAttr: true,
					type: "String",
					"default": "latest"
				},
				{
					name: "calledElementVersion",
					isAttr: true,
					type: "String"
				},
				{
					name: "calledElementVersionTag",
					isAttr: true,
					type: "String"
				},
				{
					name: "calledElementTenantId",
					isAttr: true,
					type: "String"
				},
				{
					name: "caseRef",
					isAttr: true,
					type: "String"
				},
				{
					name: "caseBinding",
					isAttr: true,
					type: "String",
					"default": "latest"
				},
				{
					name: "caseVersion",
					isAttr: true,
					type: "String"
				},
				{
					name: "caseTenantId",
					isAttr: true,
					type: "String"
				},
				{
					name: "variableMappingClass",
					isAttr: true,
					type: "String"
				},
				{
					name: "variableMappingDelegateExpression",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "ServiceTaskLike",
			"extends": [
				"bpmn:ServiceTask",
				"bpmn:BusinessRuleTask",
				"bpmn:SendTask",
				"bpmn:MessageEventDefinition"
			],
			properties: [
				{
					name: "expression",
					isAttr: true,
					type: "String"
				},
				{
					name: "class",
					isAttr: true,
					type: "String"
				},
				{
					name: "delegateExpression",
					isAttr: true,
					type: "String"
				},
				{
					name: "resultVariable",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "DmnCapable",
			"extends": [
				"bpmn:BusinessRuleTask"
			],
			properties: [
				{
					name: "decisionRef",
					isAttr: true,
					type: "String"
				},
				{
					name: "decisionRefBinding",
					isAttr: true,
					type: "String",
					"default": "latest"
				},
				{
					name: "decisionRefVersion",
					isAttr: true,
					type: "String"
				},
				{
					name: "mapDecisionResult",
					isAttr: true,
					type: "String",
					"default": "resultList"
				},
				{
					name: "decisionRefTenantId",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "ExternalCapable",
			"extends": [
				"camunda:ServiceTaskLike"
			],
			properties: [
				{
					name: "type",
					isAttr: true,
					type: "String"
				},
				{
					name: "topic",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "TaskPriorized",
			"extends": [
				"bpmn:Process",
				"camunda:ExternalCapable"
			],
			properties: [
				{
					name: "taskPriority",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "Properties",
			superClass: [
				"Element"
			],
			meta: {
				allowedIn: [
					"*"
				]
			},
			properties: [
				{
					name: "values",
					type: "Property",
					isMany: true
				}
			]
		},
		{
			name: "Property",
			superClass: [
				"Element"
			],
			properties: [
				{
					name: "id",
					type: "String",
					isAttr: true
				},
				{
					name: "name",
					type: "String",
					isAttr: true
				},
				{
					name: "value",
					type: "String",
					isAttr: true
				}
			]
		},
		{
			name: "Connector",
			superClass: [
				"Element"
			],
			meta: {
				allowedIn: [
					"camunda:ServiceTaskLike"
				]
			},
			properties: [
				{
					name: "inputOutput",
					type: "InputOutput"
				},
				{
					name: "connectorId",
					type: "String"
				}
			]
		},
		{
			name: "InputOutput",
			superClass: [
				"Element"
			],
			meta: {
				allowedIn: [
					"bpmn:FlowNode",
					"camunda:Connector"
				]
			},
			properties: [
				{
					name: "inputOutput",
					type: "InputOutput"
				},
				{
					name: "connectorId",
					type: "String"
				},
				{
					name: "inputParameters",
					isMany: true,
					type: "InputParameter"
				},
				{
					name: "outputParameters",
					isMany: true,
					type: "OutputParameter"
				}
			]
		},
		{
			name: "InputOutputParameter",
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "value",
					isBody: true,
					type: "String"
				},
				{
					name: "definition",
					type: "InputOutputParameterDefinition"
				}
			]
		},
		{
			name: "InputOutputParameterDefinition",
			isAbstract: true
		},
		{
			name: "List",
			superClass: [
				"InputOutputParameterDefinition"
			],
			properties: [
				{
					name: "items",
					isMany: true,
					type: "InputOutputParameterDefinition"
				}
			]
		},
		{
			name: "Map",
			superClass: [
				"InputOutputParameterDefinition"
			],
			properties: [
				{
					name: "entries",
					isMany: true,
					type: "Entry"
				}
			]
		},
		{
			name: "Entry",
			properties: [
				{
					name: "key",
					isAttr: true,
					type: "String"
				},
				{
					name: "value",
					isBody: true,
					type: "String"
				},
				{
					name: "definition",
					type: "InputOutputParameterDefinition"
				}
			]
		},
		{
			name: "Value",
			superClass: [
				"InputOutputParameterDefinition"
			],
			properties: [
				{
					name: "id",
					isAttr: true,
					type: "String"
				},
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "value",
					isBody: true,
					type: "String"
				}
			]
		},
		{
			name: "Script",
			superClass: [
				"InputOutputParameterDefinition"
			],
			properties: [
				{
					name: "scriptFormat",
					isAttr: true,
					type: "String"
				},
				{
					name: "resource",
					isAttr: true,
					type: "String"
				},
				{
					name: "value",
					isBody: true,
					type: "String"
				}
			]
		},
		{
			name: "Field",
			superClass: [
				"Element"
			],
			meta: {
				allowedIn: [
					"camunda:ServiceTaskLike",
					"camunda:ExecutionListener",
					"camunda:TaskListener"
				]
			},
			properties: [
				{
					name: "name",
					isAttr: true,
					type: "String"
				},
				{
					name: "expression",
					type: "String"
				},
				{
					name: "stringValue",
					isAttr: true,
					type: "String"
				},
				{
					name: "string",
					type: "String"
				}
			]
		},
		{
			name: "InputParameter",
			superClass: [
				"InputOutputParameter"
			]
		},
		{
			name: "OutputParameter",
			superClass: [
				"InputOutputParameter"
			]
		},
		{
			name: "Collectable",
			isAbstract: true,
			"extends": [
				"bpmn:MultiInstanceLoopCharacteristics"
			],
			superClass: [
				"camunda:AsyncCapable"
			],
			properties: [
				{
					name: "collection",
					isAttr: true,
					type: "String"
				},
				{
					name: "elementVariable",
					isAttr: true,
					type: "String"
				}
			]
		},
		{
			name: "FailedJobRetryTimeCycle",
			superClass: [
				"Element"
			],
			meta: {
				allowedIn: [
					"camunda:AsyncCapable",
					"bpmn:MultiInstanceLoopCharacteristics"
				]
			},
			properties: [
				{
					name: "body",
					isBody: true,
					type: "String"
				}
			]
		},
		{
			name: "ExecutionListener",
			superClass: [
				"Element"
			],
			meta: {
				allowedIn: [
					"bpmn:Task",
					"bpmn:ServiceTask",
					"bpmn:UserTask",
					"bpmn:BusinessRuleTask",
					"bpmn:ScriptTask",
					"bpmn:ReceiveTask",
					"bpmn:ManualTask",
					"bpmn:ExclusiveGateway",
					"bpmn:SequenceFlow",
					"bpmn:ParallelGateway",
					"bpmn:InclusiveGateway",
					"bpmn:EventBasedGateway",
					"bpmn:StartEvent",
					"bpmn:IntermediateCatchEvent",
					"bpmn:IntermediateThrowEvent",
					"bpmn:EndEvent",
					"bpmn:BoundaryEvent",
					"bpmn:CallActivity",
					"bpmn:SubProcess",
					"bpmn:Process"
				]
			},
			properties: [
				{
					name: "expression",
					isAttr: true,
					type: "String"
				},
				{
					name: "class",
					isAttr: true,
					type: "String"
				},
				{
					name: "delegateExpression",
					isAttr: true,
					type: "String"
				},
				{
					name: "event",
					isAttr: true,
					type: "String"
				},
				{
					name: "script",
					type: "Script"
				},
				{
					name: "fields",
					type: "Field",
					isMany: true
				}
			]
		},
		{
			name: "TaskListener",
			superClass: [
				"Element"
			],
			meta: {
				allowedIn: [
					"bpmn:UserTask"
				]
			},
			properties: [
				{
					name: "expression",
					isAttr: true,
					type: "String"
				},
				{
					name: "class",
					isAttr: true,
					type: "String"
				},
				{
					name: "delegateExpression",
					isAttr: true,
					type: "String"
				},
				{
					name: "event",
					isAttr: true,
					type: "String"
				},
				{
					name: "script",
					type: "Script"
				},
				{
					name: "fields",
					type: "Field",
					isMany: true
				},
				{
					name: "id",
					type: "String",
					isAttr: true
				},
				{
					name: "eventDefinitions",
					type: "bpmn:TimerEventDefinition",
					isMany: true
				}
			]
		},
		{
			name: "FormProperty",
			superClass: [
				"Element"
			],
			meta: {
				allowedIn: [
					"bpmn:StartEvent",
					"bpmn:UserTask"
				]
			},
			properties: [
				{
					name: "id",
					type: "String",
					isAttr: true
				},
				{
					name: "name",
					type: "String",
					isAttr: true
				},
				{
					name: "type",
					type: "String",
					isAttr: true
				},
				{
					name: "required",
					type: "String",
					isAttr: true
				},
				{
					name: "readable",
					type: "String",
					isAttr: true
				},
				{
					name: "writable",
					type: "String",
					isAttr: true
				},
				{
					name: "variable",
					type: "String",
					isAttr: true
				},
				{
					name: "expression",
					type: "String",
					isAttr: true
				},
				{
					name: "datePattern",
					type: "String",
					isAttr: true
				},
				{
					name: "default",
					type: "String",
					isAttr: true
				},
				{
					name: "values",
					type: "Value",
					isMany: true
				}
			]
		},
		{
			name: "FormData",
			superClass: [
				"Element"
			],
			meta: {
				allowedIn: [
					"bpmn:StartEvent",
					"bpmn:UserTask"
				]
			},
			properties: [
				{
					name: "fields",
					type: "FormField",
					isMany: true
				},
				{
					name: "businessKey",
					type: "String",
					isAttr: true
				}
			]
		},
		{
			name: "FormField",
			superClass: [
				"Element"
			],
			properties: [
				{
					name: "id",
					type: "String",
					isAttr: true
				},
				{
					name: "label",
					type: "String",
					isAttr: true
				},
				{
					name: "type",
					type: "String",
					isAttr: true
				},
				{
					name: "datePattern",
					type: "String",
					isAttr: true
				},
				{
					name: "defaultValue",
					type: "String",
					isAttr: true
				},
				{
					name: "properties",
					type: "Properties"
				},
				{
					name: "validation",
					type: "Validation"
				},
				{
					name: "values",
					type: "Value",
					isMany: true
				}
			]
		},
		{
			name: "Validation",
			superClass: [
				"Element"
			],
			properties: [
				{
					name: "constraints",
					type: "Constraint",
					isMany: true
				}
			]
		},
		{
			name: "Constraint",
			superClass: [
				"Element"
			],
			properties: [
				{
					name: "name",
					type: "String",
					isAttr: true
				},
				{
					name: "config",
					type: "String",
					isAttr: true
				}
			]
		},
		{
			name: "ConditionalEventDefinitionExtension",
			isAbstract: true,
			"extends": [
				"bpmn:ConditionalEventDefinition"
			],
			properties: [
				{
					name: "variableName",
					isAttr: true,
					type: "String"
				},
				{
					name: "variableEvents",
					isAttr: true,
					type: "String"
				}
			]
		}
	];
	var emumerations = [
	];
	var camundaModdle = {
		name: name$6,
		uri: uri$5,
		prefix: prefix$5,
		xml: xml$2,
		associations: associations$5,
		types: types$5,
		emumerations: emumerations
	};

	var isFunction$2 = require$$0.isFunction,
	    isObject$4 = require$$0.isObject,
	    some$1 = require$$0.some;

	var WILDCARD = '*';


	function CamundaModdleExtension(eventBus) {

	  var self = this;

	  eventBus.on('moddleCopy.canCopyProperty', function(context) {
	    var property = context.property,
	        parent = context.parent;

	    return self.canCopyProperty(property, parent);
	  });
	}

	CamundaModdleExtension.$inject = [ 'eventBus' ];

	/**
	 * Check wether to disallow copying property.
	 */
	CamundaModdleExtension.prototype.canCopyProperty = function(property, parent) {

	  // (1) check wether property is allowed in parent
	  if (isObject$4(property) && !isAllowedInParent(property, parent)) {

	    return false;
	  }

	  // (2) check more complex scenarios

	  if (is$O(property, 'camunda:InputOutput') && !this.canHostInputOutput(parent)) {
	    return false;
	  }

	  if (isAny$b(property, [ 'camunda:Connector', 'camunda:Field' ]) && !this.canHostConnector(parent)) {
	    return false;
	  }

	  if (is$O(property, 'camunda:In') && !this.canHostIn(parent)) {
	    return false;
	  }
	};

	CamundaModdleExtension.prototype.canHostInputOutput = function(parent) {

	  // allowed in camunda:Connector
	  var connector = getParent$2(parent, 'camunda:Connector');

	  if (connector) {
	    return true;
	  }

	  // special rules inside bpmn:FlowNode
	  var flowNode = getParent$2(parent, 'bpmn:FlowNode');

	  if (!flowNode) {
	    return false;
	  }

	  if (isAny$b(flowNode, [ 'bpmn:StartEvent', 'bpmn:Gateway', 'bpmn:BoundaryEvent' ])) {
	    return false;
	  }

	  if (is$O(flowNode, 'bpmn:SubProcess') && flowNode.get('triggeredByEvent')) {
	    return false;
	  }

	  return true;
	};

	CamundaModdleExtension.prototype.canHostConnector = function(parent) {

	  var serviceTaskLike = getParent$2(parent, 'camunda:ServiceTaskLike');

	  if (is$O(serviceTaskLike, 'bpmn:MessageEventDefinition')) {

	    // only allow on throw and end events
	    return (
	      getParent$2(parent, 'bpmn:IntermediateThrowEvent') ||
	      getParent$2(parent, 'bpmn:EndEvent')
	    );
	  }

	  return true;
	};

	CamundaModdleExtension.prototype.canHostIn = function(parent) {

	  var callActivity = getParent$2(parent, 'bpmn:CallActivity');

	  if (callActivity) {
	    return true;
	  }

	  var signalEventDefinition = getParent$2(parent, 'bpmn:SignalEventDefinition');

	  if (signalEventDefinition) {

	    // only allow on throw and end events
	    return (
	      getParent$2(parent, 'bpmn:IntermediateThrowEvent') ||
	      getParent$2(parent, 'bpmn:EndEvent')
	    );
	  }

	  return true;
	};

	var extension = CamundaModdleExtension;

	// helpers //////////

	function is$O(element, type) {
	  return element && isFunction$2(element.$instanceOf) && element.$instanceOf(type);
	}

	function isAny$b(element, types) {
	  return some$1(types, function(t) {
	    return is$O(element, t);
	  });
	}

	function getParent$2(element, type) {
	  if (!type) {
	    return element.$parent;
	  }

	  if (is$O(element, type)) {
	    return element;
	  }

	  if (!element.$parent) {
	    return;
	  }

	  return getParent$2(element.$parent, type);
	}

	function isAllowedInParent(property, parent) {

	  // (1) find property descriptor
	  var descriptor = property.$type && property.$model.getTypeDescriptor(property.$type);

	  var allowedIn = descriptor && descriptor.meta && descriptor.meta.allowedIn;

	  if (!allowedIn || isWildcard(allowedIn)) {
	    return true;
	  }

	  // (2) check wether property has parent of allowed type
	  return some$1(allowedIn, function(type) {
	    return getParent$2(parent, type);
	  });
	}

	function isWildcard(allowedIn) {
	  return allowedIn.indexOf(WILDCARD) !== -1;
	}

	var lib$1 = {
	  __init__: [ 'camundaModdleExtension' ],
	  camundaModdleExtension: [ 'type', extension ]
	};

	/**
	 *
	 * @param {Object} options
	 */
	function Modeler$2(options = {}) {

	  options = {
	    ...options,
	    moddleExtensions: {
	      camunda: camundaModdle,
	      ...options.moddleExtensions
	    }
	  };

	  Modeler$1.call(this, options);
	}

	inherits_browser(Modeler$2, Modeler$1);

	Modeler$2.prototype._camundaPlatformModules = [
	  camunda,
	  lib$1
	];

	Modeler$2.prototype._modules = [].concat(
	  Modeler$1.prototype._modules,
	  Modeler$2.prototype._camundaPlatformModules
	);

	return Modeler$2;

})));
