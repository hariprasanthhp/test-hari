{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as go from 'gojs';\nimport { environment } from 'src/environments/environment';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/sys-admin/services/common.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../issues/service/issue.service\";\nimport * as i4 from \"src/app-services/translate.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@ng-select/ng-select\";\nimport * as i8 from \"@angular/common\";\nconst _c0 = [\"networkTopology\"];\nconst _c1 = [\"searchBar\"];\nfunction NetworkTopologyComponent_li_40_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"a\", 23);\n    i0.ɵɵlistener(\"click\", function NetworkTopologyComponent_li_40_Template_a_click_2_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.loadBreadCrumbData(\"Location\");\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.currentDiagram == \"Locations\" ? \"active\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", \"Location : \\u00A0 \", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.currentDiagram == \"Locations\" ? \"removeHyperLink\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.breadCrumbLocation);\n  }\n}\nfunction NetworkTopologyComponent_li_41_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 45);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"a\", 23);\n    i0.ɵɵlistener(\"click\", function NetworkTopologyComponent_li_41_Template_a_click_2_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.loadBreadCrumbData(\"System\");\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", \"System : \\u00A0 \", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.currentDiagram != \"Locations\" ? \"removeHyperLink\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.breadCrumbSystem);\n  }\n}\nfunction NetworkTopologyComponent_div_58_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵelementStart(1, \"div\", 47);\n    i0.ɵɵelementStart(2, \"div\", 48);\n    i0.ɵɵelementStart(3, \"span\", 49);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r3.language.Loading);\n  }\n}\nfunction NetworkTopologyComponent_div_61_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 50);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.language.nodata);\n  }\n}\nconst _c2 = function () {\n  return {\n    standalone: true\n  };\n};\nexport let NetworkTopologyComponent = /*#__PURE__*/(() => {\n  class NetworkTopologyComponent {\n    constructor(commonOrgService, http, issueService, translateService, changeDetector) {\n      this.commonOrgService = commonOrgService;\n      this.http = http;\n      this.issueService = issueService;\n      this.translateService = translateService;\n      this.changeDetector = changeDetector;\n      this.topoGraph = go.GraphObject.make;\n      this.loading = false;\n      this.canApplyFilter = false;\n      this.applyDisabled = false;\n      this.systemEventError = false;\n      this.locationEventError = false;\n      this.regionEventError = false;\n      this.regionsTopologyData = [{\n        id: 'All',\n        name: 'All'\n      }];\n      this.regionPostions = [];\n      this.locationPostions = [];\n      this.systemPostions = [];\n      this.regionsDataArray = ['All'];\n      this.searchDataArray = ['All'];\n      this.locationDataArray = ['All'];\n      this.locationsTopologyData = [{\n        id: 'All',\n        name: 'All'\n      }];\n      this.systemDataArray = ['All'];\n      this.systemTopologyData = [{\n        id: 'All',\n        name: 'All'\n      }];\n      this.systemError = false;\n      this.locationError = false;\n      this.regionError = false;\n      this.alarmType = 'Alarm';\n      this.alarmBy = '';\n      this.alarmEventName = '';\n      this.cloudImages = {\n        green: 'assets/img/Icon_Device_Cloud_Green.svg',\n        red: 'assets/img/Icon_Device_Cloud_Red.svg',\n        yellow: 'assets/img/Icon_Device_Cloud_Yellow.svg',\n        orange: 'assets/img/Icon_Device_Cloud_Orange.svg'\n      };\n      this.baseUrl = `${environment.API_BASE_URL}analytics-engine/`;\n      this.deviceBaseUrl = `${environment.API_BASE_URL}cnap/invmgr/`;\n      this.topologyUrl = `${environment.API_BASE_URL}topology/`;\n      this.url = '';\n      this.topologySystems = [{\n        id: 'All',\n        name: 'All'\n      }];\n      this.zoomFactorList = [{\n        factor: '25%',\n        value: 0.25\n      }, {\n        factor: '50%',\n        value: 0.5\n      }, {\n        factor: '75%',\n        value: 0.75\n      }, {\n        factor: '100%',\n        value: 1\n      }, {\n        factor: '125%',\n        value: 1.25\n      }, {\n        factor: '150%',\n        value: 1.5\n      }, {\n        factor: '175%',\n        value: 1.75\n      }, {\n        factor: '200%',\n        value: 2\n      }];\n      this.zoomScale = 1;\n      this.breadCrumbRegion = 'All';\n      this.breadCrumbLocation = 'All';\n      this.breadCrumbSystem = 'All';\n      this.noData = false;\n      this.roundedRectangleParams = {\n        parameter1: 2,\n        spot1: go.Spot.TopLeft,\n        spot2: go.Spot.BottomRight // make content go all the way to inside edges of rounded corners\n      };\n\n      this.systemLinksData = [];\n      this.systemDevicesData = [];\n      go.Diagram.licenseKey = '73f946e4b56e28a800ca0d2b113f69ed1bb37f3b9e8c1bf0595446a7ef0b6d173089ef2802868ac582ff19fd1829c0dcd5c46c7a9e1c0138e132d38c40e485ade16477b6435b448da3012f90ccaf2ff5ac2f77a0c3b672a68a70dff6eea8c59a59eff5861ace1cab2f2d5637562cff4ba5ebda7afa02d349746d9a';\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n    }\n    ngOnInit() {\n      this.regionsApiLoader();\n      setTimeout(() => {\n        this.loadIntialData();\n      }, 1000);\n    }\n    ngAfterViewInit() {}\n    regionsApiLoader() {\n      this.regionSelected = 'All';\n      this.locationSelected = 'All';\n      this.systemSelected = 'All';\n      this.regionsSubject = this.issueService.getRegions().subscribe(res => {\n        res.sort();\n        this.regionsDataArray = [...this.regionsDataArray, ...res];\n      }, error => {});\n    }\n    changeDynamicSize(diagramLevel) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const el = this.networkTopology.nativeElement;\n        if (diagramLevel != 'System') {\n          let ratio = 0.69;\n          let size = 130;\n          this.changeDetector.detectChanges();\n          let isScroll = false;\n          do {\n            console.log(size, isScroll, 'Check');\n            if (isScroll) {\n              this.clearDiagram();\n            }\n            let fontSize = size > 100 ? '12' : size >= 80 && size <= 100 ? '10' : size >= 60 && size <= 80 ? '8' : size >= 40 && size <= 60 ? '6' : size >= 20 && size <= 40 ? '4' : '2';\n            fontSize += 'px sans-serif';\n            if (diagramLevel == 'Region') {\n              this.regionsTopologyData.forEach(el => {\n                if (!el['isLocated']) {\n                  delete el['loc'];\n                }\n              });\n              yield this.loadRegionDiagram(size, Math.round(size * ratio), fontSize);\n            } else if (diagramLevel == 'Location') {\n              this.locationsTopologyData.forEach(el => {\n                if (!el['isLocated']) {\n                  delete el['loc'];\n                }\n              });\n              yield this.loadLocationDiagram(size, Math.round(size * ratio), fontSize);\n            }\n            this.changeDetector.detectChanges();\n            size = size - 10;\n            const content = el.querySelector('div');\n            isScroll = content.offsetHeight < content.scrollHeight;\n            if (size <= 20) {\n              isScroll = false;\n            }\n          } while (isScroll);\n        } else {\n          yield this.loadSystemDiagram();\n        }\n        this.setZoomScaleToFit();\n        // this.enableAllCommandHandler();\n        // this.zoomfunctionalities('Fit');\n        const canvas = el.querySelector('canvas');\n        canvas['style']['outline'] = 'none';\n        this.loading = false;\n      });\n    }\n    setZoomScaleToFit() {\n      let isScroll = false;\n      const el = this.networkTopology.nativeElement;\n      this.zoomScale = 1;\n      let currentDiagram = this.currentDiagram == 'Regions' ? this.regionDiagram : this.currentDiagram == 'Locations' ? this.locationDiagram : this.systemDiagram;\n      do {\n        currentDiagram.scale = this.zoomScale;\n        this.changeDetector.detectChanges();\n        const content = el.querySelector('div');\n        isScroll = content.offsetHeight < content.scrollHeight;\n        if (isScroll) {\n          this.zoomScale -= 0.25;\n        }\n        if (this.zoomScale <= 0.25) {\n          this.zoomScale += 0.25;\n          isScroll = false;\n        }\n      } while (isScroll);\n    }\n    loadRegionDiagram(cloudWidth, cloudHeight, fontSize) {\n      return new Promise((resolve, reject) => {\n        // Region diagram\n        this.currentDiagram = 'Regions';\n        this.regionDiagram = this.topoGraph(go.Diagram, 'networkTopology', {\n          // contentAlignment: go.Spot.Left,\n          // initialDocumentSpot: go.Spot.Left,\n          'undoManager.isEnabled': true,\n          scale: 1,\n          minScale: 0.25,\n          maxScale: 2,\n          // autoScale: go.Diagram.Uniform,\n          layout: this.topoGraph(go.GridLayout, {\n            spacing: new go.Size(10, 10)\n          }),\n          InitialLayoutCompleted: function (e) {\n            if (!e.diagram.nodes.all(function (n) {\n              return n.location.isReal();\n            })) {\n              e.diagram.layoutDiagram(true);\n            }\n            resolve(true);\n          }\n        });\n        this.regionDiagram.nodeTemplate = this.topoGraph(go.Node, 'Vertical', {\n          // resizable : true,\n          // resizeObjectName: \"SHAPE\",\n          // for nor horizontal dragging\n          // minLocation: new go.Point(-Infinity, NaN), maxLocation: new go.Point(Infinity, NaN) ,\n          dragComputation: this.avoidNodeOverlap,\n          selectionAdorned: false,\n          click: (data, obj) => {\n            this.onClickDiagrams('Location', obj.part.data.region);\n          }\n        }, new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify), this.topoGraph(go.Picture, {\n          // name: \"SHAPE\",\n          desiredSize: new go.Size(cloudWidth, cloudHeight),\n          minSize: new go.Size(30, 20.7)\n        }, new go.Binding('source')), this.topoGraph(go.TextBlock, {\n          // maxSize: new go.Size(40, 50),\n          maxSize: new go.Size(cloudWidth, cloudHeight),\n          // maxSize: new go.Size(NaN, NaN) ,\n          stroke: 'black',\n          maxLines: 1,\n          font: fontSize,\n          // font:\n          //   this.regionsTopologyData.length < 20\n          //     ? '12px sans-serif'\n          //     : '2px sans-serif',\n          overflow: go.TextBlock.OverflowClip\n          // wrap : go.TextBlock.WrapDesiredSize,\n        }, new go.Binding('font', '2px sans-serif'), new go.Binding('text', 'region'))\n        // new go.Binding('visible', 'region', function (l) {\n        //   return l != 'All' ? true : false;\n        // })\n        );\n\n        console.log(this.regionsTopologyData, 'Diagram');\n        this.regionDiagram.model = new go.GraphLinksModel(this.regionsTopologyData);\n      });\n    }\n    loadLocationDiagram(cloudWidth, cloudHeight, fontSize) {\n      return new Promise((resolve, reject) => {\n        this.currentDiagram = 'Locations';\n        console.log(this.locationsTopologyData);\n        // Location diagram\n        this.locationDiagram = this.topoGraph(go.Diagram, 'networkTopology', {\n          // contentAlignment: go.Spot.Left,\n          'undoManager.isEnabled': true,\n          scale: 1,\n          minScale: 0.25,\n          maxScale: 2,\n          // autoScale: go.Diagram.Uniform,\n          layout: this.topoGraph(go.GridLayout, {\n            spacing: new go.Size(10, 10)\n          }),\n          // InitialLayoutCompleted: enableZoomToFit,\n          InitialLayoutCompleted: e => {\n            // enableAllCommandHandler();\n            if (!e.diagram.nodes.all(function (n) {\n              return n.location.isReal();\n            })) {\n              e.diagram.layoutDiagram(true);\n            }\n            resolve(true);\n          }\n        });\n        this.locationDiagram.nodeTemplate = this.topoGraph(go.Node, 'Vertical', {\n          // visible: false,\n          dragComputation: this.avoidNodeOverlap,\n          selectionAdorned: false,\n          click: (data, obj) => {\n            this.onClickDiagrams('System', obj.part.data.location);\n          }\n        }, new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify),\n        // new go.Binding('location', 'loc', go.Point.parse),\n        this.topoGraph(go.Picture, {\n          desiredSize: new go.Size(cloudWidth, cloudHeight),\n          minSize: new go.Size(30, 20.7)\n        }, new go.Binding('source')),\n        // this.topoGraph(go.Shape, \"Rectangle\", { fill: 'lime' }),\n        this.topoGraph(go.TextBlock, {\n          // margin: 5,\n          // maxSize: new go.Size(40, 50),\n          maxSize: new go.Size(cloudWidth, cloudHeight),\n          font: fontSize,\n          maxLines: 1,\n          // font:\n          //   this.locationDataArray.length < 20\n          //     ? '12px sans-serif'\n          //     : '5px sans-serif',\n          stroke: 'black',\n          overflow: go.TextBlock.OverflowClip\n        }, new go.Binding('text', 'location'))\n        // new go.Binding('visible', 'id', function (l) {\n        //   return l != 'All' ? true : false;\n        // })\n        );\n\n        this.locationDiagram.model = new go.GraphLinksModel(this.locationsTopologyData);\n      });\n    }\n    loadSystemDiagram() {\n      return new Promise((resolve, reject) => {\n        this.currentDiagram = 'Systems';\n        let linkDataArray = [];\n        let nodeDataArray = [];\n        this.systemDiagram = this.topoGraph(go.Diagram, 'networkTopology', {\n          contentAlignment: go.Spot.Center,\n          'undoManager.isEnabled': true,\n          // autoScale: go.Diagram.Uniform,\n          scale: 1,\n          minScale: 0.25,\n          maxScale: 2,\n          layout: this.topoGraph(go.LayeredDigraphLayout, {\n            direction: linkDataArray.length > 0 ? 0 : 90,\n            layerSpacing: 150,\n            columnSpacing: 60,\n            linkSpacing: 0,\n            isInitial: false,\n            isOngoing: false\n          }),\n          InitialLayoutCompleted: function (e) {\n            // if not all Nodes have real locations, force a layout to happen\n            if (!e.diagram.nodes.all(function (n) {\n              return n.location.isReal();\n            })) {\n              e.diagram.layoutDiagram(true);\n            }\n            resolve(true);\n          }\n        });\n        var subNode = this.topoGraph(go.Node, 'Auto', {\n          // visible: false,\n          selectionAdorned: false\n          // selectionAdornmentTemplate:  // selection adornment to match shape of nodes\n          //     this.topoGraph(go.Adornment, \"Auto\",\n          //       this.topoGraph(go.Shape, \"RoundedRectangle\", this.roundedRectangleParams,\n          //         { fill: null, stroke: \"#7986cb\", strokeWidth: 3 }\n          //       ),\n          //       this.topoGraph(go.Placeholder)\n          //     )  // end Adornment\n        }, new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify), this.topoGraph(go.Shape, 'RoundedRectangle', this.roundedRectangleParams, {\n          width: 100,\n          height: 100,\n          name: 'SHAPE',\n          fill: '#ffffff',\n          strokeWidth: 0\n        },\n        // gold if highlighted, white otherwise\n        new go.Binding('fill', 'isHighlighted', function (h) {\n          return h ? 'gold' : '#ffffff';\n        }).ofObject()),\n        //circle\n        this.topoGraph(go.Panel, 'Vertical', this.topoGraph(go.Panel, 'Vertical', this.topoGraph(go.Panel, 'Auto', {\n          // alignment: go.Spot.TopRight,\n          visible: false,\n          width: 70,\n          // margin: new go.Margin(0, 0, 2, 60),\n          toolTip: this.topoGraph('ToolTip', {\n            'Border.stroke': '#41397B',\n            'Border.strokeWidth': 2\n          }, this.topoGraph(go.TextBlock, 'onts & Rgs', {\n            margin: 4,\n            overflow: go.TextBlock.OverflowClip\n          }, {\n            alignment: go.Spot.Top,\n            alignmentFocus: go.Spot.Bottom,\n            stroke: '#41397B'\n          }, {\n            alignment: go.Spot.Bottom,\n            alignmentFocus: go.Spot.Top,\n            stroke: '#41397B'\n          }, {\n            font: 'bold 12px'\n          }, new go.Binding('text', '', function (data) {\n            return data.countRgs.concat('\\n', data.countOnts);\n          })))\n        }, this.topoGraph(go.Shape, 'Circle', {\n          // alignment : go.Spot.Right,\n          width: 25,\n          height: 25,\n          fill: 'white',\n          stroke: '#41397B',\n          strokeWidth: 1,\n          margin: new go.Margin(0, 0, 2, 40)\n        }), this.topoGraph(go.TextBlock, {\n          font: '10px sans-serif',\n          overflow: go.TextBlock.OverflowClip\n        }, new go.Binding('text', 'passedClients', function (l) {\n          return l ? l : '';\n        })), new go.Binding('visible', 'tenantId', function (l) {\n          return l ? true : false;\n        }))),\n        //Sub node\n        this.topoGraph(go.Panel, 'Auto', {\n          margin: new go.Margin(0, 0, 0, 0),\n          toolTip: this.topoGraph('ToolTip', {\n            'Border.stroke': '#41397B',\n            'Border.strokeWidth': 2\n          }, this.topoGraph(go.TextBlock, {\n            margin: 4,\n            overflow: go.TextBlock.OverflowClip\n          }, {\n            alignment: go.Spot.Top,\n            alignmentFocus: go.Spot.Bottom,\n            stroke: '#41397B'\n          }, {\n            alignment: go.Spot.Bottom,\n            alignmentFocus: go.Spot.Top,\n            stroke: '#41397B'\n          }, {\n            font: 'bold 12px'\n          }, new go.Binding('text', '', function (data) {\n            return data.fqn.replace('DEVICE=', '').concat('\\n ( ', data.name, ' )');\n          })))\n        },\n        // new go.Binding('alignment', 'alignNode'),\n        {\n          // background: 'rgba(255,0,0,0.1)',\n          alignmentFocusName: 'shape'\n          // alignment: go.Spot.Right,\n          // alignment: new go.Binding('Spot', 'position', function(l){return l? l : ''}),\n          // alignmentFocus: go.Spot.BottomLeft\n        }, this.topoGraph(go.Shape, 'RoundedRectangle', {\n          parameter1: 10,\n          margin: new go.Margin(0, 0, 0, 0),\n          width: 80,\n          height: 40,\n          // maxSize: new go.Size(200, 30),\n          fill: 'white',\n          stroke: '#41397B',\n          strokeWidth: 3\n        }\n        // new go.Binding(\"text\", \"key\", function (l) { return l ? l : '' })\n        ), this.topoGraph(go.Panel, 'horizontal', {\n          alignment: go.Spot.Left\n        }, this.topoGraph(go.Shape, 'RoundedRectangle', {\n          parameter1: 5,\n          // alignment: go.Spot.Left,\n          margin: new go.Margin(2, 2, 2, 2),\n          width: 32,\n          height: 30,\n          // maxSize: new go.Size(40, 30),\n          fill: 'rgb(77, 68, 147)'\n        }\n        // new go.Binding(\"text\", \"key\", function (l) { return l ? l : '' })\n        ), this.topoGraph(go.TextBlock, {\n          stroke: 'white',\n          font: '15px sans-serif',\n          // alignment: go.Spot.Center,\n          margin: new go.Margin(5, 0, 0, 2),\n          maxSize: new go.Size(100, 30),\n          overflow: go.TextBlock.OverflowClip\n          // isMultiline: false,\n          // click: () => {\n          //   alert('label clicked');\n          // }\n        }, new go.Binding('text', '', function (data) {\n          return data.deviceModel.replace(' System', '');\n        })\n        // new go.Binding('text', 'deviceModel', function (l) {\n        //   return l ? l : '';\n        // })\n        )), this.topoGraph(go.Panel, 'horizontal', {\n          alignment: go.Spot.Right\n        }, this.topoGraph(go.Shape, 'RoundedRectangle', {\n          parameter1: 5,\n          // alignment: go.Spot.Right,\n          margin: new go.Margin(2, 2, 2, 2),\n          width: 32,\n          height: 30,\n          // maxSize: new go.Size(40, 30),\n          fill: 'rgb(77, 68, 147)'\n        }\n        // new go.Binding(\"text\", \"ap2\", function (l) { return l ? l : '' })\n        ), this.topoGraph(go.TextBlock, {\n          // alignment: go.Spot.Center,\n          stroke: 'white',\n          font: '15px sans-serif',\n          margin: new go.Margin(15, 0, 0, 5),\n          maxSize: new go.Size(100, 30),\n          // isMultiline: false,\n          overflow: go.TextBlock.OverflowClip\n          // click: () => {\n          //   alert('label clicked');\n          // }\n        }, new go.Binding('text', 'type', function (l) {\n          return l ? l : '';\n        })))),\n        //Bottom Text\n        this.topoGraph(go.Panel, 'Vertical', {\n          width: 80\n          // height : 50\n        }, new go.Binding('margin', 'name', function (l) {\n          return l ? new go.Margin(5, 0, 0, 0) : '';\n        }), new go.Binding('background', 'name', function (l) {\n          return l ? '#eaeaea' : '';\n        }), new go.Binding('padding', 'name', function (l) {\n          return l ? 3 : '';\n        }), this.topoGraph(go.TextBlock, {\n          margin: new go.Margin(0, 0, 0, 0),\n          maxSize: new go.Size(80, 30),\n          isMultiline: false,\n          maxLines: 1,\n          font: 'bold 10px sans-serif'\n          // click: () => {\n          //   alert('label clicked');\n          // }\n        }, new go.Binding('text', '', function (data) {\n          return data.name;\n        }))))\n        // new go.Binding('visible', 'subnode', function (l) {\n        //   return l ? true : false;\n        // })\n        );\n\n        var mainNode = this.topoGraph(go.Node, 'Auto',\n        //circle\n        {\n          // visible: false,\n          selectionAdorned: false\n          // selectionAdornmentTemplate:  // selection adornment to match shape of nodes\n          //     this.topoGraph(go.Adornment, \"Auto\",\n          //       this.topoGraph(go.Shape, \"RoundedRectangle\", this.roundedRectangleParams,\n          //         { fill: null, stroke: \"#7986cb\", strokeWidth: 3 }\n          //       ),\n          //       this.topoGraph(go.Placeholder)\n          //     )  // end Adornment\n        }, new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify), this.topoGraph(go.Shape, 'RoundedRectangle', this.roundedRectangleParams, {\n          width: 110,\n          height: 100,\n          name: 'SHAPE',\n          fill: '#ffffff',\n          strokeWidth: 0\n        },\n        // gold if highlighted, white otherwise\n        new go.Binding('fill', 'isHighlighted', function (h) {\n          return h ? 'gold' : '#ffffff';\n        }).ofObject()), this.topoGraph(go.Panel, 'Vertical', this.topoGraph(go.Panel, 'Vertical', this.topoGraph(go.Panel, 'Auto', {\n          // alignment: go.Spot.TopRight,\n          visible: false,\n          width: 70,\n          // margin: new go.Margin(0, 0, 2, 60),\n          toolTip: this.topoGraph('ToolTip', {\n            'Border.stroke': '#41397B',\n            'Border.strokeWidth': 2\n          }, this.topoGraph(go.TextBlock, 'onts & Rgs', {\n            margin: 4,\n            overflow: go.TextBlock.OverflowClip\n          }, {\n            alignment: go.Spot.Top,\n            alignmentFocus: go.Spot.Bottom,\n            stroke: '#41397B'\n          }, {\n            alignment: go.Spot.Bottom,\n            alignmentFocus: go.Spot.Top,\n            stroke: '#41397B'\n          }, {\n            font: 'bold 12px'\n          }, new go.Binding('text', '', function (data) {\n            return data.countRgs.concat('\\n', data.countOnts);\n          })))\n        }, this.topoGraph(go.Shape, 'Circle', {\n          // alignment : go.Spot.Right,\n          width: 25,\n          height: 25,\n          fill: 'white',\n          stroke: '#41397B',\n          strokeWidth: 1,\n          margin: new go.Margin(0, 0, 2, 40)\n        }), this.topoGraph(go.TextBlock, {\n          font: '10px sans-serif',\n          overflow: go.TextBlock.OverflowClip\n        }, new go.Binding('text', 'passedClients', function (l) {\n          return l ? l : '';\n        })), new go.Binding('visible', 'passedClients', function (l) {\n          return l ? true : false;\n        }))),\n        //main node\n        this.topoGraph(go.Panel, 'Auto', {\n          visible: false\n        }, this.topoGraph(go.Shape, 'RoundedRectangle', {\n          parameter1: 10,\n          margin: new go.Margin(0, 0, 0, 0),\n          width: 100,\n          height: 40,\n          // maxSize: new go.Size(200, 30),\n          fill: '#41397B',\n          stroke: '#41397B',\n          strokeWidth: 3\n        }\n        // new go.Binding(\"text\", \"key\", function (l) { return l ? l : '' })\n        ), this.topoGraph(go.TextBlock, {\n          stroke: 'white',\n          font: '18px sans-serif',\n          alignment: go.Spot.Left,\n          margin: new go.Margin(5, 0, 0, 2),\n          maxSize: new go.Size(100, 30),\n          overflow: go.TextBlock.OverflowClip\n          // isMultiline: false,\n          // click: () => {\n          //   alert('label clicked');\n          // }\n        }, new go.Binding('text', 'ap1', function (l) {\n          return l ? l : '';\n        }))),\n        //Bottom Text\n        this.topoGraph(go.Panel, 'Vertical', {\n          width: 80\n          // height : 50\n        }, new go.Binding('margin', 'deviceName', function (l) {\n          return l ? new go.Margin(5, 0, 0, 0) : '';\n        }), new go.Binding('background', 'deviceName', function (l) {\n          return l ? '#eaeaea' : '';\n        }), new go.Binding('padding', 'deviceName', function (l) {\n          return l ? 3 : '';\n        }), this.topoGraph(go.TextBlock, {\n          margin: new go.Margin(0, 0, 0, 0),\n          maxSize: new go.Size(80, 30),\n          isMultiline: false,\n          maxLines: 1,\n          font: 'bold 10px sans-serif'\n          // click: () => {\n          //   alert('label clicked');\n          // }\n        }, new go.Binding('text', '', function (data) {\n          return data.deviceName.replace('DEVICE=', '').concat('\\n ( ', data.name, ' )');\n        }))))\n        // new go.Binding('visible', 'mainnode', function (l) {\n        //   return l ? true : false;\n        // })\n        );\n\n        var templmap = new go.Map();\n        templmap.add('Sub', subNode);\n        // templmap.add('Main', mainNode);\n        this.systemDiagram.nodeTemplateMap = templmap;\n        this.systemDiagram.nodeTemplate = this.topoGraph(go.Node, 'Auto', {\n          // layoutConditions: go.Part.LayoutStandard & ~go.Part.LayoutNodeSized,\n          selectionAdorned: false\n          // selectionAdornmentTemplate:  // selection adornment to match shape of nodes\n          //     this.topoGraph(go.Adornment, \"Auto\",\n          //       this.topoGraph(go.Shape, \"RoundedRectangle\", this.roundedRectangleParams,\n          //         { fill: null, stroke: \"#7986cb\", strokeWidth: 3 }\n          //       ),\n          //       this.topoGraph(go.Placeholder)\n          //     )  // end Adornment\n        }, this.topoGraph(go.Shape, 'RoundedRectangle', this.roundedRectangleParams, {\n          width: 100,\n          height: 100,\n          name: 'SHAPE',\n          fill: '#ffffff',\n          strokeWidth: 0\n        },\n        // gold if highlighted, white otherwise\n        new go.Binding('fill', 'isHighlighted', function (h) {\n          return h ? 'gold' : '#ffffff';\n        }).ofObject()), new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify),\n        // ring node\n        this.topoGraph(go.Panel, 'Vertical', {\n          visible: false\n          // background : 'red'\n        }, this.topoGraph(go.Panel, 'Auto', {\n          alignment: go.Spot.TopRight,\n          visible: false,\n          toolTip: this.topoGraph('ToolTip', {\n            'Border.stroke': '#41397B',\n            'Border.strokeWidth': 2\n          }, this.topoGraph(go.TextBlock, 'onts & Rgs', {\n            margin: 4,\n            overflow: go.TextBlock.OverflowClip\n          }, {\n            alignment: go.Spot.Top,\n            alignmentFocus: go.Spot.Bottom,\n            stroke: '#41397B'\n          }, {\n            alignment: go.Spot.Bottom,\n            alignmentFocus: go.Spot.Top,\n            stroke: '#41397B'\n          }, {\n            font: 'bold 12px'\n          }, new go.Binding('text', '', function (data) {\n            return data.countRgs.concat('\\n', data.countOnts);\n          })))\n        }, this.topoGraph(go.Shape, 'Circle', {\n          width: 25,\n          height: 25,\n          fill: 'white',\n          stroke: '#41397B',\n          strokeWidth: 1,\n          margin: new go.Margin(0, 0, 2, 40)\n        }), this.topoGraph(go.TextBlock, {\n          font: '10px sans-serif',\n          // font: '5pt',\n          overflow: go.TextBlock.OverflowClip\n        }, new go.Binding('text', 'passedClients', function (l) {\n          return l ? l : '';\n        })), new go.Binding('visible', 'passedClients', function (l) {\n          return l ? true : false;\n        })), this.topoGraph(go.Panel, 'Auto', this.topoGraph(go.Shape, 'RoundedRectangle', {\n          parameter1: 10,\n          margin: new go.Margin(0, 0, 0, 0),\n          width: 80,\n          height: 40,\n          // maxSize: new go.Size(200, 30),\n          fill: 'white',\n          stroke: '#41397B',\n          strokeWidth: 3\n        }\n        // new go.Binding(\"text\", \"key\", function (l) { return l ? l : '' })\n        ), this.topoGraph(go.Panel, 'horizontal', {\n          alignment: go.Spot.Left\n        }, this.topoGraph(go.Shape, 'RoundedRectangle', {\n          parameter1: 5,\n          // alignment: go.Spot.Left,\n          margin: new go.Margin(2, 2, 2, 2),\n          width: 32,\n          height: 30,\n          // maxSize: new go.Size(40, 30),\n          fill: 'rgb(77, 68, 147)'\n        }\n        // new go.Binding(\"text\", \"key\", function (l) { return l ? l : '' })\n        ), this.topoGraph(go.TextBlock, {\n          stroke: 'white',\n          font: '15px sans-serif',\n          // alignment: go.Spot.Center,\n          margin: new go.Margin(5, 0, 0, 2),\n          maxSize: new go.Size(100, 30),\n          overflow: go.TextBlock.OverflowClip\n          // isMultiline: false,\n          // click: () => {\n          //   this.onClickDiagrams('');\n          // }\n        }, new go.Binding('text', 'ap1', function (l) {\n          return l ? l : '';\n        }))), this.topoGraph(go.Panel, 'horizontal', {\n          alignment: go.Spot.Right\n        }, this.topoGraph(go.Shape, 'RoundedRectangle', {\n          parameter1: 5,\n          // alignment: go.Spot.Right,\n          margin: new go.Margin(2, 2, 2, 2),\n          width: 32,\n          height: 30,\n          // maxSize: new go.Size(40, 30),\n          fill: 'rgb(77, 68, 147)'\n        }\n        // new go.Binding(\"text\", \"ap2\", function (l) { return l ? l : '' })\n        ), this.topoGraph(go.TextBlock, {\n          // alignment: go.Spot.Center,\n          stroke: 'white',\n          font: '15px sans-serif',\n          margin: new go.Margin(15, 0, 0, 5),\n          maxSize: new go.Size(100, 30),\n          overflow: go.TextBlock.OverflowClip\n          // isMultiline: false,\n          // click: () => {\n          //   alert('label clicked');\n          // }\n        }, new go.Binding('text', 'ap2', function (l) {\n          return l ? l : '';\n        })))),\n        //Bottom Text\n        this.topoGraph(go.Panel, 'Vertical', {\n          width: 80\n          // height : 50\n        }, new go.Binding('margin', 'deviceName', function (l) {\n          return l ? new go.Margin(5, 0, 0, 0) : '';\n        }), new go.Binding('background', 'deviceName', function (l) {\n          return l ? '#eaeaea' : '';\n        }), new go.Binding('padding', 'deviceName', function (l) {\n          return l ? 3 : '';\n        }), this.topoGraph(go.TextBlock, {\n          margin: new go.Margin(0, 0, 0, 0),\n          maxSize: new go.Size(80, 30),\n          isMultiline: false,\n          maxLines: 1,\n          font: 'bold 10px sans-serif'\n          // click: () => {\n          //   alert('label clicked');\n          // }\n        }, new go.Binding('text', '', function (data) {\n          return data.deviceName.replace('DEVICE=', '').concat('\\n ( ', data.name, ' )');\n        }))), new go.Binding('visible', 'ring', function (l) {\n          return l ? true : false;\n        })));\n        this.systemDiagram.groupTemplate = this.topoGraph(go.Group, 'Auto', {\n          layout: this.topoGraph(go.CircularLayout, {\n            aspectRatio: 0.62,\n            spacing: 20,\n            startAngle: 210\n          }),\n          selectionAdorned: false\n        }, this.topoGraph(go.Shape, 'Ellipse', {\n          minSize: new go.Size(200, 140),\n          stretch: go.GraphObject.Fill,\n          margin: new go.Margin(40, 40),\n          spot1: go.Spot.TopLeft,\n          spot2: go.Spot.BottomRight,\n          fill: 'transparent',\n          stroke: 'green',\n          strokeWidth: 2,\n          portId: ''\n        }), this.topoGraph(go.TextBlock, {\n          // overflow: go.TextBlock.OverflowEllipsis,\n          maxLines: 1\n        }, new go.Binding('text', 'ellipseText')), this.topoGraph(go.Placeholder));\n        //Filter and Map systemDevicesData data to systemTopologyData\n        // if(this.systemDevicesData.length > 0){\n        let systemDataArray = [];\n        if (this.systemDataArray.length > 1) {\n          systemDataArray = [...this.systemDataArray];\n        }\n        let systemDevice = systemDataArray.map(itm => {\n          let locObj = this.systemDevicesData.find(item => item.uuid == itm['uuid'] && item.uuid != '' && item && itm != 'All');\n          return Object.assign(Object.assign({}, locObj), itm);\n        });\n        nodeDataArray = this.systemTopologyData.map(itm => {\n          let locObj = systemDevice.find(item => item['fqn'] == itm['system'] && item['fqn'] != '' && item);\n          itm['category'] = 'Sub';\n          return Object.assign(Object.assign({}, locObj), itm);\n        });\n        // }\n        // if(this.systemLinksData.length > 0){\n        linkDataArray = this.systemLinksData.map(el => {\n          return {\n            from: el['from']['uuid'],\n            to: el['to']['uuid'],\n            // fromSpot: el['from']['fromSpot'],\n            // toSpot: el['from']['toSpot'],\n            adminState: el['from']['adminState'],\n            protocol: el['from']['protocol'],\n            name: '( ' + el['from']['name'] + ', ' + el['to']['name'] + ' )',\n            linkColor: el['from'].operState == 'UP' ? 'green' : 'red'\n          };\n        });\n        // }\n        console.log(linkDataArray);\n        console.log(nodeDataArray);\n        // let linkDataArray = [\n        //   {\n        //     from: 'mainnode',\n        //     to: 'ringnode',\n        //     color: '#41397B',\n        //     thick: '3',\n        //     curviness: 20,\n        //   },\n        //   {\n        //     from: 'mainnode',\n        //     to: 'subnode',\n        //     color: '#41397B',\n        //     thick: '3',\n        //     curviness: 20,\n        //   },\n        // ];\n        this.systemDiagram.linkTemplate = this.topoGraph(go.Link, {\n          curve: go.Link.Bezier,\n          // routing: go.Link.Orthogonal,\n          corner: 5,\n          toShortLength: 6,\n          relinkableFrom: true,\n          relinkableTo: true,\n          toolTip: this.topoGraph('ToolTip', {\n            'Border.stroke': '#41397B',\n            'Border.strokeWidth': 2\n          }, this.topoGraph(go.TextBlock, {\n            margin: 4,\n            overflow: go.TextBlock.OverflowClip\n          }, {\n            alignment: go.Spot.Top,\n            alignmentFocus: go.Spot.Bottom,\n            stroke: '#41397B'\n          }, {\n            alignment: go.Spot.Bottom,\n            alignmentFocus: go.Spot.Top,\n            stroke: '#41397B'\n          }, {\n            font: 'bold 12px'\n          }, new go.Binding('text', '', function (data) {\n            return data.protocol.concat('\\n', data.adminState);\n          })))\n          // fromSpot: go.Spot.RightSide,\n          // toSpot: go.Spot.LeftSide,\n        }, this.topoGraph(go.Shape, {\n          strokeWidth: 3,\n          width: 200\n        }, new go.Binding('stroke', 'linkColor')\n        // new go.Binding('strokeWidth', 'thick')\n        ),\n        // new go.Binding(\"fromSpot\", \"fromSpot\", go.Spot.parse),\n        // new go.Binding(\"toSpot\", \"toSpot\", go.Spot.parse),\n        // this.topoGraph(go.Shape),\n        // this.topoGraph(\n        //   go.Shape,\n        //   // { toArrow: 'Standard' },\n        //   new go.Binding('stroke', 'linkColor')\n        // ),\n        this.topoGraph(go.TextBlock, {\n          // margin: 4,\n          overflow: go.TextBlock.OverflowClip,\n          font: 'bold 8px',\n          segmentOffset: new go.Point(0, -10),\n          segmentOrientation: go.Link.OrientAlong\n        }, new go.Binding('text', '', function (data) {\n          return data.name;\n        })));\n        this.systemDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);\n      });\n    }\n    onClickDiagrams(showDiagram, selectedNode) {\n      let that = this;\n      if (showDiagram == 'Location') {\n        let clickedIndex = this.regionsDataArray.find(el => el['name'] == selectedNode);\n        // // static implementation\n        that.regionSelected = clickedIndex['id'];\n        that.loadLocationValue(that);\n        that.loadFilterData();\n      } else if (showDiagram == 'System') {\n        let clickedIndex = this.locationDataArray.find(el => el['name'] == selectedNode);\n        that.locationSelected = clickedIndex['id'];\n        that.loadSystemValue(that);\n        that.loadFilterData();\n      }\n    }\n    clearTopology() {\n      this.breadCrumbRegion = 'All';\n      this.breadCrumbLocation = 'All';\n      this.breadCrumbSystem = 'All';\n      this.regionSelected = 'All';\n      this.locationSelected = 'All';\n      this.systemSelected = 'All';\n      this.locationDataArray = ['All'];\n      this.systemDataArray = ['All'];\n      this.regionName = '';\n      this.locationName = '';\n      this.systemName = '';\n      this.searchSelected = '';\n      this.clearDiagram();\n      this.loadIntialData();\n    }\n    selectRegion(data) {\n      if (data != 'All') this.locationSelected = 'All';\n    }\n    loadLocationValue(event) {\n      this.clickedRegion = '';\n      this.locationSelected = 'All';\n      this.systemSelected = 'All';\n      let id = this.regionSelected;\n      if (this.regionSelected && this.regionSelected != 'All') {\n        this.canApplyFilter = true;\n        this.locationsSubject = this.issueService.getLocations(id).subscribe(res => {\n          this.locationDataArray = res;\n          this.locationDataArray.push('All');\n          this.canApplyFilter = false;\n        }, error => {\n          this.canApplyFilter = false;\n        });\n      }\n      this.regionsDataArray.forEach(element => {\n        if (element.id == this.regionSelected) {\n          this.regionName = element.name;\n        }\n      });\n      this.locationName = null;\n      if (this.regionSelected == 'All') {\n        this.regionName = null;\n        this.locationName = null;\n        this.systemName = null;\n        this.locationDataArray = ['All'];\n        this.systemDataArray = ['All'];\n      }\n    }\n    loadSystemValue(event) {\n      this.clickedLocation = '';\n      let regionid = this.regionSelected;\n      let locationid = this.locationSelected;\n      this.systemSelected = 'All';\n      if (this.locationSelected && this.regionSelected && this.locationSelected != 'All') {\n        this.canApplyFilter = true;\n        this.systemsSubject = this.issueService.getSystems(regionid, locationid).subscribe(res => {\n          this.systemDataArray = res;\n          this.systemDataArray.push('All');\n          this.canApplyFilter = false;\n        }, error => {\n          this.canApplyFilter = false;\n        });\n      }\n      this.locationDataArray.forEach(element => {\n        if (element.id == this.locationSelected) {\n          this.locationName = element.name;\n        }\n      });\n      this.systemName = null;\n      if (this.locationSelected == 'All') {\n        this.locationName = null;\n        this.systemName = null;\n        this.systemDataArray = ['All'];\n      }\n    }\n    selectSystem(event) {\n      this.systemDataArray.forEach(element => {\n        if (element.fqn == this.systemSelected) {\n          this.systemName = element.fqn;\n        }\n      });\n      if (this.systemSelected == 'All') {\n        this.systemName = null;\n      }\n    }\n    loadIntialData() {\n      this.loading = true;\n      let params = {\n        region: this.regionName,\n        location: this.locationName,\n        system: this.systemName,\n        notificationType: this.alarmType,\n        historyReport: true,\n        status: 'Both'\n      };\n      let query = '';\n      for (var key in params) {\n        if (params[key] == undefined) {\n          continue;\n        }\n        if (query != '') {\n          query += '&';\n        }\n        query += key + '=' + encodeURIComponent(params[key]);\n      }\n      this.url = `${this.baseUrl}alarmbyRegion?${query}`;\n      // static implementation\n      let obj = {\n        regionData: `${this.url}`,\n        regionPostions: `assets/data/topologyRegionsPostions.json`\n      };\n      let types = ['regionData', 'regionPostions'];\n      const requests = {};\n      console.log(obj, 'OBJ');\n      types.forEach(type => {\n        const req = this.http.get(`${obj[type]}`).pipe(catchError(err => of(err.status)));\n        requests[type] = req;\n      });\n      this.listObs = forkJoin(requests).subscribe(json => {\n        // this.loading = false;\n        if (json['regionData'].length > 0) {\n          if (json && typeof json['regionData'] != 'undefined') {\n            this.loadRegion = true;\n            this.regionError = false;\n          }\n          if (json && typeof json['regionPostions'] != 'undefined') {\n            this.regionPostions = json['regionPostions'];\n          }\n          this.setAlarmsColors(json['regionData'], this.regionPostions, [], [], 'regions');\n          this.clearDiagram();\n          setTimeout(() => {\n            this.changeDynamicSize('Region');\n          }, 1000);\n        }\n      }, err => {\n        this.pageErrorHandle(err);\n        console.log(err);\n      });\n      // this.regionSubscribe = this.http.get(`${this.url}`).subscribe(\n      //   (res: any) => {\n      //     // res.sort();\n      //     this.setAlarmsColors(res, 'regions');\n      //     console.log(JSON.stringify(this.regionsTopologyData));\n      //     this.changeDynamicSize();\n      //     this.regionError = false;\n      //     this.loading = false;\n      //   },\n      //   (err: HttpErrorResponse) => {\n      //     this.regionError = true;\n      //     if (err.status == 401) {\n      //       this.regionErrorInfo = this.language['Access Denied'];\n      //     } else {\n      //       this.regionErrorInfo = this.commonOrgService.pageErrorHandle(err);\n      //     }\n      //     if (this.alarmType == 'Both') {\n      //       this.regionEventError = true;\n      //       this.regionEventErrorInfo = this.regionErrorInfo;\n      //     }\n      //     this.loading = false;\n      //   }\n      // );\n    }\n\n    setAlarmsColors(array, positionsArray, links, devices, diagram_type) {\n      console.log(array);\n      this.regionsTopologyData = [];\n      this.locationsTopologyData = [];\n      this.systemTopologyData = [];\n      this.noData = false;\n      if (array && array.length > 0) {\n        // merge positions and diagram api\n        if (positionsArray.length > 0) {\n          array.map(itm => {\n            let locObj = positionsArray.find(item => item.region == itm['region'] && item.loc != '' && item);\n            return Object.assign(Object.assign({}, locObj), itm);\n          });\n        }\n        array.forEach(el => {\n          // change  cloud color\n          if (el['alarm'].cleared.critical > 0) {\n            el['source'] = this.cloudImages.red;\n          } else if (el['alarm'].cleared.critical <= 0 && el['alarm'].cleared.major > 0) {\n            el['source'] = this.cloudImages.orange;\n          } else if (el['alarm'].cleared.major <= 0 && el['alarm'].cleared.minor > 0) {\n            el['source'] = this.cloudImages.yellow;\n          } else if (el['alarm'].cleared.minor <= 0) {\n            el['source'] = this.cloudImages.green;\n          }\n        });\n        if (diagram_type == 'regions') {\n          this.regionsTopologyData = [...array];\n          this.regionsTopologyData.forEach(el => {\n            el['isLocated'] = false;\n            if (el['loc']) {\n              el['isLocated'] = true;\n            }\n          });\n          this.filteredRegions = [...array];\n        } else if (diagram_type == 'locations') {\n          this.locationsTopologyData = [...array];\n          this.locationsTopologyData.forEach(el => {\n            el['isLocated'] = false;\n            if (el['loc']) {\n              el['isLocated'] = true;\n            }\n          });\n          this.filteredLocations = [...array];\n        } else if (diagram_type == 'systems') {\n          this.systemLinksData = links['links'] || [];\n          this.systemDevicesData = devices || [];\n          this.systemTopologyData = [...array];\n          // this.filteredSystems = [...array];\n        }\n      } else {\n        this.noData = true;\n      }\n    }\n    loadFilterData() {\n      if (this.systemSelected == 'All') {\n        this.searchSelected = '';\n        // let category: any;\n        // if (this.category && this.category.length && this.category.indexOf('All') === -1) {\n        //   let filtered = this.category.filter(function (el) {\n        //     return (el && el.length && el !== 'All');\n        //   });\n        //   category = filtered;\n        // } else {\n        //   category = undefined;\n        // }\n        // if (this.fullScreen) {\n        //   this.applyFiltersInFullScreen();\n        //   return;\n        // }\n        this.clickedLocation = '';\n        this.clickedRegion = '';\n        // this.loadLocationChart = false;\n        // this.loadSystemChart = false;\n        // this.alarmsCount();\n        // this.serverityError = false;\n        this.systemError = false;\n        this.regionError = false;\n        this.locationError = false;\n        // this.severityChartData = null;\n        // this.systemChartData = null;\n        // this.locationChartData = null;\n        // this.regionChartData = null;\n        // this.severityChartOptions = null;\n        // this.systemChartOptions = null;\n        // this.locationChartOptions = null;\n        // this.regionChartOptions = null;\n        this.loading = true;\n        this.applyDisabled = true;\n        // if (this.alarmType == 'Both') {\n        //   this.both = true;\n        //   this.loadBothData();\n        //   return;\n        // } else {\n        //   this.both = false;\n        // }\n        this.breadCrumbRegion = this.regionName || 'All';\n        this.breadCrumbLocation = this.locationName || 'All';\n        this.breadCrumbSystem = this.systemName || 'All';\n        let system = '';\n        if (this.systemSelected !== 'All') {\n          system = this.systemSelected;\n        } else {\n          system = null;\n        }\n        let params = {\n          region: this.regionName,\n          location: this.locationName,\n          // fsan_serialnumber: this.FSAN,\n          // alarmEventName: this.eventName,\n          // severity: this.Severity != 'all' ? this.Severity : null,\n          // date: `${this.startISODate(this.FromDate)},${this.endISODate(this.ToDate)}`,\n          notificationType: this.alarmType,\n          historyReport: true,\n          status: 'Both',\n          // category: category,\n          system: system\n        };\n        let query = '';\n        let uuidQuery = 'uuid=' + this.systemDataArray.map(el => el['uuid']).filter(el => el != undefined);\n        // let uuiddeviceQuery = this.systemDataArray.map(el => el['uuid']).filter(el => el != undefined);\n        for (var key in params) {\n          if (params[key] == undefined || params[key] == '') {\n            continue;\n          }\n          if (query != '') {\n            query += '&';\n          }\n          query += key + '=' + encodeURIComponent(params[key]);\n        }\n        const requests = {};\n        let types = ['region', 'regionPosition'];\n        // if (this.alarmType !== 'Event') {\n        //   types.push('severity');\n        // }\n        // this.loadRegionChart = true;\n        if (params['region']) {\n          this.loadRegion = false;\n          let index = types.indexOf('region');\n          let index1 = types.indexOf('regionPosition');\n          types.splice(index, 1);\n          types.splice(index1, 1);\n          types.push('location');\n          types.push('locationPosition');\n          this.loadLocation = true;\n        }\n        if (params['location']) {\n          this.loadLocation = false;\n          let index = types.indexOf('location');\n          types.splice(index, 1);\n          types.push('system');\n          types.push('systemPosition');\n          types.push('links');\n          types.push('devices');\n          this.loadSystem = true;\n        }\n        // static implementation\n        let obj = {\n          region: `${this.baseUrl}alarmbyRegion?${query}`,\n          // regionPosition: `assets/data/topologyRegionsPostions.json`,\n          // locationPosition: `assets/data/topologyRegionsPostions.json`,\n          // systemPosition: `assets/data/topologyRegionsPostions.json`,\n          location: `${this.baseUrl}alarmbyLocation?${query}`,\n          system: `${this.baseUrl}alarmbySystem?${query}`,\n          links: `${this.topologyUrl}links?${uuidQuery}`,\n          devices: `${this.deviceBaseUrl}devices/`\n        };\n        console.log(obj, 'OBJ');\n        types.forEach(type => {\n          const req = this.http.get(`${obj[type]}`).pipe(catchError(err => of(err.status)));\n          requests[type] = req;\n        });\n        this.listObs = forkJoin(requests).subscribe(json => {\n          console.log(json);\n          if (json && typeof json['region'] != 'undefined') {\n            this.regionPostions = [];\n            if (json && typeof json['regionPosition'] != 'undefined') {\n              this.regionPostions = json['regionPosition'];\n            }\n            this.loadRegion = true;\n            this.setAlarmsColors(json['region'], this.regionPostions, [], [], 'regions');\n            this.clearDiagram();\n            this.changeDynamicSize('Region');\n            this.regionError = false;\n          }\n          if (json && typeof json['location'] != 'undefined') {\n            this.locationPostions = [];\n            if (json && typeof json['locationPosition'] != 'undefined') {\n              this.locationPostions = json['locationPosition'];\n            }\n            this.setAlarmsColors(json['location'], this.locationPostions, [], [], 'locations');\n            this.clearDiagram();\n            this.changeDynamicSize('Location');\n            this.locationError = false;\n          }\n          if (json && typeof json['system'] != 'undefined') {\n            this.systemPostions = [];\n            if (json && typeof json['systemPosition'] != 'undefined') {\n              this.systemPostions = json['systemPosition'];\n            }\n            this.setAlarmsColors(json['system'], this.systemPostions, json['links'], json['devices'], 'systems');\n            this.clearDiagram();\n            this.changeDynamicSize('System');\n            this.systemError = false;\n          }\n          // this.loading = false;\n        }, err => {\n          this.pageErrorHandle(err);\n          console.log(err);\n        });\n      } else {\n        this.searchDiagram(this.systemName, false);\n      }\n    }\n    clearDiagram() {\n      if (this.regionDiagram) {\n        this.regionDiagram.div = null;\n      }\n      if (this.locationDiagram) {\n        this.locationDiagram.div = null;\n      }\n      if (this.systemDiagram) {\n        this.systemDiagram.div = null;\n      }\n    }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = this.language['Access Denied'];\n      } else {\n        this.errorInfo = this.commonOrgService.pageErrorHandle(err);\n      }\n      this.error = true;\n      this.loading = false;\n    }\n    getRegionLoc(data, obj) {\n      // debugger;\n      this.regionDiagram.commit(function (d) {\n        var data = d.model.nodeDataArray;\n        console.log(data);\n        var node = d.findNodeForData(data);\n      });\n    }\n    ngOnDestroy() {\n      if (this.languageSubject) {\n        this.languageSubject.unsubscribe();\n      }\n      if (this.regionSubscribe) {\n        this.regionSubscribe.unsubscribe();\n      }\n      if (this.regionsSubject) {\n        this.regionsSubject.unsubscribe();\n      }\n      if (this.locationsSubject) {\n        this.locationsSubject.unsubscribe();\n      }\n      if (this.systemsSubject) {\n        this.systemsSubject.unsubscribe();\n      }\n    }\n    searchContext(searchSelected) {\n      if (this.currentDiagram == 'Regions') {\n        this.regionsTopologyData = this.getFilteredData(this.filteredRegions, searchSelected, 'region');\n        this.clearDiagram();\n        this.changeDynamicSize('Region');\n      }\n      if (this.currentDiagram == 'Locations') {\n        this.locationsTopologyData = this.getFilteredData(this.filteredLocations, searchSelected, 'location');\n        this.clearDiagram();\n        this.changeDynamicSize('Location');\n      }\n      if (this.currentDiagram == 'Systems') {\n        this.searchDiagram(searchSelected, true);\n        // this.systemTopologyData = this.getFilteredData(\n        //   this.filteredSystems,\n        //   this.searchSelected,\n        //   'system'\n        // );\n        // this.clearDiagram();\n        // this.changeDynamicSize('System');\n      }\n    }\n\n    searchDiagram(searchSelected, canFocusSearch) {\n      // called by button\n      // if (!this.searchSelected) return;\n      this.systemDiagram.focus();\n      this.systemDiagram.startTransaction('highlight search');\n      if (searchSelected) {\n        // search four different data properties for the string, any of which may match for success\n        // create a case insensitive RegExp from what the user typed\n        var safe = searchSelected.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        var regex = new RegExp(safe, 'i');\n        var results = this.systemDiagram.findNodesByExample({\n          uuid: regex\n        }, {\n          key: regex\n        }, {\n          deviceName: regex\n        }, {\n          fqn: regex\n        });\n        this.systemDiagram.highlightCollection(results);\n        // try to center the diagram at the first node that was found\n        if (results.count > 0) this.systemDiagram.centerRect(results.first().actualBounds);\n      } else {\n        // empty string only clears highlighteds collection\n        this.systemDiagram.clearHighlighteds();\n      }\n      this.systemDiagram.commitTransaction('highlight search');\n      if (canFocusSearch) this.searchBar.nativeElement.focus();\n    }\n    getFilteredData(originalList, value, key) {\n      this.noData = true;\n      if (this.searchSelected != '') {\n        originalList = originalList.filter(item => {\n          return item[key].toString().toLowerCase().indexOf(value.toString().toLowerCase()) !== -1;\n        });\n      }\n      if (originalList.length > 0) {\n        this.noData = false;\n      }\n      return originalList;\n    }\n    loadBreadCrumbData(level) {\n      if (level == 'Region') {\n        this.locationSelected = 'All';\n        this.systemSelected = 'All';\n        this.locationName = null;\n        this.systemName = null;\n      }\n      if (level == 'Location') {\n        this.systemSelected = 'All';\n        this.systemName = null;\n      }\n      this.loadFilterData();\n    }\n    enableAllCommandHandler() {\n      let currentDiagram = this.currentDiagram == 'Regions' ? this.regionDiagram : this.currentDiagram == 'Locations' ? this.locationDiagram : this.systemDiagram;\n      var cmdhnd = currentDiagram.commandHandler;\n      this.enable('ZoomOut', cmdhnd.canIncreaseZoom());\n      this.enable('ZoomIn', cmdhnd.canDecreaseZoom());\n      this.enable('ZoomFit', cmdhnd.canZoomToFit());\n    }\n    enable(name, ok) {\n      var button = document.getElementById(name);\n      if (button) button['disabled'] = !ok;\n    }\n    zoomfunctionalities(type) {\n      let currentDiagram = this.currentDiagram == 'Regions' ? this.regionDiagram : this.currentDiagram == 'Locations' ? this.locationDiagram : this.systemDiagram;\n      if (type == 'Out') {\n        currentDiagram.commandHandler.increaseZoom(1.25);\n      } else if (type == 'In') {\n        currentDiagram.commandHandler.decreaseZoom(0.75);\n      } else if (type == 'Fit') {\n        currentDiagram.commandHandler.zoomToFit();\n      }\n    }\n    avoidNodeOverlap(node, pt, gridpt) {\n      let that = this;\n      if (node.diagram instanceof go.Palette) return gridpt;\n      // this assumes each node is fully rectangular\n      var bnds = node.actualBounds;\n      var loc = node.location;\n      // use PT instead of GRIDPT if you want to ignore any grid snapping behavior\n      // see if the area at the proposed location is unoccupied\n      var r = new go.Rect(gridpt.x - (loc.x - bnds.x), gridpt.y - (loc.y - bnds.y), bnds.width, bnds.height);\n      // maybe inflate R if you want some space between the node and any other nodes\n      r.inflate(-0.5, -0.5); // by default, deflate to avoid edge overlaps with \"exact\" fits\n      // when dragging a node from another Diagram, choose an unoccupied area\n      if (!(node.diagram.currentTool instanceof go.DraggingTool) && (!node._temp || !node.layer.isTemporary)) {\n        // in Temporary Layer during external drag-and-drop\n        node._temp = true; // flag to avoid repeated searches during external drag-and-drop\n        while (!isUnoccupied(r, node)) {\n          r.x += 10; // note that this is an unimaginative search algorithm --\n          r.y += 2; // you can improve the search here to be more appropriate for your app\n        }\n\n        r.inflate(0.5, 0.5); // restore to actual size\n        // return the proposed new location point\n        return new go.Point(r.x - (loc.x - bnds.x), r.y - (loc.y - bnds.y));\n      }\n      if (isUnoccupied(r, node)) return gridpt; // OK\n      return loc; // give up -- don't allow the node to be moved to the new location\n      function isUnoccupied(r, node) {\n        var diagram = node.diagram;\n        // nested function used by Layer.findObjectsIn, below\n        // only consider Parts, and ignore the given Node, any Links, and Group members\n        function navig(obj) {\n          var part = obj.part;\n          if (part === node) return null;\n          if (part instanceof go.Link) return null;\n          if (part.isMemberOf(node)) return null;\n          if (node.isMemberOf(part)) return null;\n          return part;\n        }\n        // only consider non-temporary Layers\n        var lit = diagram.layers;\n        while (lit.next()) {\n          var lay = lit.value;\n          if (lay.isTemporary) continue;\n          if (lay.findObjectsIn(r, navig, null, true).count > 0) return false;\n        }\n        return true;\n      }\n    }\n    savePositions() {\n      let currentDiagram = this.currentDiagram == 'Regions' ? this.regionDiagram : this.currentDiagram == 'Locations' ? this.locationDiagram : this.systemDiagram;\n      currentDiagram.commit(function (d) {\n        var data = JSON.stringify(d.model.nodeDataArray);\n        let jsonFile = data.replace(/\\\\/g, '');\n        console.log(jsonFile);\n        var node = d.findNodeForData(data);\n      });\n    }\n    changeScaleDiagram(scale, type) {\n      let currentDiagram = this.currentDiagram == 'Regions' ? this.regionDiagram : this.currentDiagram == 'Locations' ? this.locationDiagram : this.systemDiagram;\n      var oldscale = currentDiagram.scale;\n      if (type == 'dropDown') {\n        currentDiagram.scale = scale;\n      } else if (type == 'decrease') {\n        currentDiagram.scale = oldscale - 0.25;\n      } else if (type == 'increase') {\n        currentDiagram.scale = oldscale + 0.25;\n      }\n      this.zoomScale = currentDiagram.scale;\n    }\n  }\n  NetworkTopologyComponent.ɵfac = function NetworkTopologyComponent_Factory(t) {\n    return new (t || NetworkTopologyComponent)(i0.ɵɵdirectiveInject(i1.CommonService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.IssueService), i0.ɵɵdirectiveInject(i4.TranslateService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  NetworkTopologyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NetworkTopologyComponent,\n    selectors: [[\"app-network-topology\"]],\n    viewQuery: function NetworkTopologyComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.networkTopology = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchBar = _t.first);\n      }\n    },\n    decls: 62,\n    vars: 41,\n    consts: [[1, \"row\"], [1, \"col-12\"], [1, \"col-md-12\", \"ccl-tabs\"], [\"id\", \"tabs\", 1, \"nav\", \"nav-tabs\"], [1, \"nav-item\"], [\"routerLink\", \"/cco/network-topology\", \"data-toggle\", \"tab\", \"routerLinkActive\", \"active\", 1, \"nav-link\", \"small\"], [1, \"big-text\"], [\"id\", \"tabsContent\", 1, \"tab-content\"], [\"id\", \"issue\", 1, \"tab-pane\", \"fade\", \"active\", \"show\"], [1, \"row\", \"pb-2\"], [\"id\", \"topology\", 1, \"tab-pane\", \"fade\"], [1, \"row\", \"my-3\", \"d-flex\", \"align-items-end\"], [1, \"col-12\", \"col-lg-3\", \"state-success\"], [\"for\", \"Name\", 1, \"col-form-label\", \"select-font\"], [\"id\", \"topologyRegion\", \"name\", \"trtype\", \"bindLabel\", \"name\", \"bindValue\", \"id\", 3, \"ngModel\", \"items\", \"clearable\", \"searchable\", \"ngModelOptions\", \"placeholder\", \"ngModelChange\"], [\"name\", \"tltype\", \"id\", \"topologyLocation\", \"bindLabel\", \"name\", \"bindValue\", \"id\", \"placeholder\", \"Location\", 3, \"ngModel\", \"ngModelOptions\", \"items\", \"clearable\", \"searchable\", \"ngModelChange\"], [\"name\", \"tstype\", \"id\", \"topologySystem\", \"bindLabel\", \"name\", \"bindValue\", \"fqn\", \"placeholder\", \"System\", 3, \"ngModel\", \"ngModelOptions\", \"items\", \"clearable\", \"searchable\", \"ngModelChange\"], [1, \"col-12\", \"col-lg-3\", \"state-success\", \"text-right\"], [\"type\", \"button\", \"id\", \"netops_report_load_bttn\", 1, \"btn-default\", \"primary\", \"px-3\", \"mr-3\", 3, \"disabled\", \"click\"], [\"type\", \"button\", \"id\", \"netops_report_load_bttn\", 1, \"btn-default\", \"primary\", \"px-3\", \"mr-3\", 3, \"click\"], [1, \"col-md-12\", \"col-lg-12\", \"col-xl-12\", \"px-0\"], [1, \"breadcrumb\", \"m-0\"], [1, \"breadcrumb-item\", \"fsize\", 3, \"ngClass\"], [\"role\", \"button\", 3, \"ngClass\", \"click\"], [\"class\", \"breadcrumb-item fsize\", 3, \"ngClass\", 4, \"ngIf\"], [\"class\", \"breadcrumb-item fsize\", 4, \"ngIf\"], [1, \"col-md-3\", \"d-inline-flex\", \"ccl-form\", \"p-0\", \"topology-search\"], [\"type\", \"search\", \"aria-label\", \"Search\", 1, \"form-control\", \"mr-sm-2\", \"ng-pristine\", \"ng-valid\", \"ng-touched\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"searchBar\", \"\"], [1, \"search-box-icon\"], [\"src\", \"assets/img/ic_search_white.svg\"], [1, \"col-md-12\", \"my-2\", \"text-right\"], [1, \"cus-button\"], [\"id\", \"ZoomIn zoom\", 1, \"mr-2\", \"pointer\", \"icon-hl\", \"bord-right\", \"f-size-24\", 3, \"click\"], [\"src\", \"assets/img/iconmonstr-minus.svg\", \"alt\", \"ZoomIn\", 1, \"zoom-img\"], [1, \"icon-hl\", \"w-70px\"], [\"bindLabel\", \"factor\", \"bindValue\", \"value\", 1, \"ngselect-perc\", 3, \"ngModel\", \"items\", \"clearable\", \"searchable\", \"ngModelOptions\", \"ngModelChange\"], [\"id\", \"ZoomOut zoom\", 1, \"mr-2\", \"pointer\", \"icon-hl\", \"bord-left\", \"f-size-24\", 3, \"click\"], [\"src\", \"assets/img/iconmonstr-plus.svg\", \"alt\", \"ZoomOut\", 1, \"zoom-img\"], [\"id\", \"savePositions\", 1, \"pointer\", \"f-size-24\", 3, \"click\"], [1, \"fas\", \"fa-save\", \"primary\"], [\"class\", \"mt-5\", 4, \"ngIf\"], [\"id\", \"networkTopology\", 1, \"topology-container\"], [\"networkTopology\", \"\"], [\"class\", \"text-center\", 4, \"ngIf\"], [1, \"breadcrumb-item\", \"fsize\"], [1, \"mt-5\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"text-center\"]],\n    template: function NetworkTopologyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"section\");\n        i0.ɵɵelementStart(3, \"div\", 0);\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵelementStart(5, \"ul\", 3);\n        i0.ɵɵelementStart(6, \"li\", 4);\n        i0.ɵɵelementStart(7, \"a\", 5);\n        i0.ɵɵelementStart(8, \"span\", 6);\n        i0.ɵɵtext(9, \"Network Systems\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 7);\n        i0.ɵɵelementStart(11, \"div\", 8);\n        i0.ɵɵelement(12, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 10);\n        i0.ɵɵelement(14, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"form\");\n        i0.ɵɵelementStart(16, \"div\", 11);\n        i0.ɵɵelementStart(17, \"div\", 12);\n        i0.ɵɵelementStart(18, \"label\", 13);\n        i0.ɵɵtext(19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"ng-select\", 14);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworkTopologyComponent_Template_ng_select_ngModelChange_20_listener($event) {\n          return ctx.regionSelected = $event;\n        })(\"ngModelChange\", function NetworkTopologyComponent_Template_ng_select_ngModelChange_20_listener($event) {\n          return ctx.loadLocationValue($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 12);\n        i0.ɵɵelementStart(22, \"label\", 13);\n        i0.ɵɵtext(23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"ng-select\", 15);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworkTopologyComponent_Template_ng_select_ngModelChange_24_listener($event) {\n          return ctx.locationSelected = $event;\n        })(\"ngModelChange\", function NetworkTopologyComponent_Template_ng_select_ngModelChange_24_listener($event) {\n          return ctx.loadSystemValue($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 12);\n        i0.ɵɵelementStart(26, \"label\", 13);\n        i0.ɵɵtext(27);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"ng-select\", 16);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworkTopologyComponent_Template_ng_select_ngModelChange_28_listener($event) {\n          return ctx.systemSelected = $event;\n        })(\"ngModelChange\", function NetworkTopologyComponent_Template_ng_select_ngModelChange_28_listener($event) {\n          return ctx.selectSystem($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"div\", 17);\n        i0.ɵɵelementStart(30, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function NetworkTopologyComponent_Template_button_click_30_listener() {\n          return ctx.loadFilterData();\n        });\n        i0.ɵɵtext(31);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"button\", 19);\n        i0.ɵɵlistener(\"click\", function NetworkTopologyComponent_Template_button_click_32_listener() {\n          return ctx.clearTopology();\n        });\n        i0.ɵɵtext(33);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"div\", 20);\n        i0.ɵɵelementStart(35, \"ol\", 21);\n        i0.ɵɵelementStart(36, \"li\", 22);\n        i0.ɵɵtext(37);\n        i0.ɵɵelementStart(38, \"a\", 23);\n        i0.ɵɵlistener(\"click\", function NetworkTopologyComponent_Template_a_click_38_listener() {\n          return ctx.loadBreadCrumbData(\"Region\");\n        });\n        i0.ɵɵtext(39);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(40, NetworkTopologyComponent_li_40_Template, 4, 4, \"li\", 24);\n        i0.ɵɵtemplate(41, NetworkTopologyComponent_li_41_Template, 4, 3, \"li\", 25);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"div\", 26);\n        i0.ɵɵelementStart(43, \"input\", 27, 28);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworkTopologyComponent_Template_input_ngModelChange_43_listener($event) {\n          return ctx.searchSelected = $event;\n        })(\"ngModelChange\", function NetworkTopologyComponent_Template_input_ngModelChange_43_listener() {\n          return ctx.searchContext(ctx.searchSelected);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"span\", 29);\n        i0.ɵɵelement(46, \"img\", 30);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"div\", 31);\n        i0.ɵɵelementStart(48, \"div\", 32);\n        i0.ɵɵelementStart(49, \"span\", 33);\n        i0.ɵɵlistener(\"click\", function NetworkTopologyComponent_Template_span_click_49_listener($event) {\n          return ctx.changeScaleDiagram($event, \"decrease\");\n        });\n        i0.ɵɵelement(50, \"img\", 34);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(51, \"span\", 35);\n        i0.ɵɵelementStart(52, \"ng-select\", 36);\n        i0.ɵɵlistener(\"ngModelChange\", function NetworkTopologyComponent_Template_ng_select_ngModelChange_52_listener($event) {\n          return ctx.zoomScale = $event;\n        })(\"ngModelChange\", function NetworkTopologyComponent_Template_ng_select_ngModelChange_52_listener($event) {\n          return ctx.changeScaleDiagram($event, \"dropDown\");\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"span\", 37);\n        i0.ɵɵlistener(\"click\", function NetworkTopologyComponent_Template_span_click_53_listener($event) {\n          return ctx.changeScaleDiagram($event, \"increase\");\n        });\n        i0.ɵɵelement(54, \"img\", 38);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"span\", 39);\n        i0.ɵɵlistener(\"click\", function NetworkTopologyComponent_Template_span_click_55_listener() {\n          return ctx.savePositions();\n        });\n        i0.ɵɵelement(56, \"i\", 40);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"div\");\n        i0.ɵɵtemplate(58, NetworkTopologyComponent_div_58_Template, 5, 1, \"div\", 41);\n        i0.ɵɵelement(59, \"div\", 42, 43);\n        i0.ɵɵtemplate(61, NetworkTopologyComponent_div_61_Template, 2, 1, \"div\", 44);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(19);\n        i0.ɵɵtextInterpolate(ctx.language.Topology_Regions);\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.language.region);\n        i0.ɵɵproperty(\"ngModel\", ctx.regionSelected)(\"items\", ctx.regionsDataArray)(\"clearable\", false)(\"searchable\", true)(\"ngModelOptions\", i0.ɵɵpureFunction0(37, _c2));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.language.Topology_Locations);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.locationSelected)(\"ngModelOptions\", i0.ɵɵpureFunction0(38, _c2))(\"items\", ctx.locationDataArray)(\"clearable\", false)(\"searchable\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.language.Topology_Systems);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.systemSelected)(\"ngModelOptions\", i0.ɵɵpureFunction0(39, _c2))(\"items\", ctx.systemDataArray)(\"clearable\", false)(\"searchable\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.canApplyFilter);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.apply, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.Clear_Filters, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", ctx.currentDiagram == \"Regions\" ? \"active\" : \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", \"Region : \\u00A0 \", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.currentDiagram == \"Regions\" ? \"removeHyperLink\" : \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.breadCrumbRegion);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.regionSelected != \"All\" && ctx.currentDiagram != \"Regions\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.locationSelected != \"All\" && ctx.currentDiagram != \"Locations\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.language.Search);\n        i0.ɵɵproperty(\"ngModel\", ctx.searchSelected);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngModel\", ctx.zoomScale)(\"items\", ctx.zoomFactorList)(\"clearable\", false)(\"searchable\", false)(\"ngModelOptions\", i0.ɵɵpureFunction0(40, _c2));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.noData);\n      }\n    },\n    directives: [i5.RouterLinkWithHref, i5.RouterLinkActive, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.NgForm, i7.NgSelectComponent, i6.NgControlStatus, i6.NgModel, i8.NgClass, i8.NgIf, i6.DefaultValueAccessor],\n    styles: [\".gshHeader{border-color:#a768be;font-size:13px;margin-bottom:7px}.fsize[_ngcontent-%COMP%]{font-size:14px!important}.breadcrumb[_ngcontent-%COMP%]{padding:8px!important;background-color:#fff!important;border-bottom:1px solid #cccccc}.search-box-icon[_ngcontent-%COMP%]{width:43px;height:37px;background-color:#0279ff;padding:7px;border-radius:25px;position:relative;right:46px}.topology-container[_ngcontent-%COMP%]{width:100%;height:300px;top:50px}.breadcrumb-item[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:underline;color:#0279ff}.removeHyperLink[_ngcontent-%COMP%]{text-decoration:none!important;color:#000!important}.outline-none[_ngcontent-%COMP%]{outline:none!important}.topology-search[_ngcontent-%COMP%]{position:absolute;right:-40px;top:-5px}.zoom[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:43px;height:37px}.combined[_ngcontent-%COMP%]{width:10%;display:flex;flex-direction:row;justify-content:space-between}.cus-button[_ngcontent-%COMP%]{float:right;min-width:200px;position:relative;height:40px;display:block;border-radius:60px;border:1px solid #dcdcdc;padding:0 8px}.cus-button[_ngcontent-%COMP%]   span.icon-hl[_ngcontent-%COMP%]{display:inline-block}.cus-button[_ngcontent-%COMP%]   .bord-right[_ngcontent-%COMP%]{border-right:1px solid #dcdcdc;padding-right:8px}.cus-button[_ngcontent-%COMP%]   .bord-left[_ngcontent-%COMP%]{border-left:1px solid #dcdcdc;padding-left:8px}.cus-button[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{background-color:#fff!important;border:none!important}.cus-button[_ngcontent-%COMP%]   .ng-dropdown-panel-items[_ngcontent-%COMP%]{overflow-y:hidden!important}.zoom-img[_ngcontent-%COMP%]{height:25px;margin-bottom:5px}.w-70px[_ngcontent-%COMP%]{width:70px}.ngselect-perc[_ngcontent-%COMP%]{width:70px;background-color:#fff;border:none}\"]\n  });\n  return NetworkTopologyComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}