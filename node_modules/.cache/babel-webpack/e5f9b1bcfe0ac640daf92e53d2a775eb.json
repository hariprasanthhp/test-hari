{"ast":null,"code":"'use strict';\n\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * A component that decides upon the visibility / editable\n * state of properties in the properties panel.\n *\n * Implementors must subclass this component and override\n * {@link PropertiesActivator#isEntryVisible} and\n * {@link PropertiesActivator#isPropertyEditable} to provide\n * custom behavior.\n *\n * @class\n * @constructor\n *\n * @param {EventBus} eventBus\n * @param {Number} [priority] at which priority to hook into the activation\n */\nfunction PropertiesActivator(eventBus, priority) {\n  var self = this;\n  priority = priority || DEFAULT_PRIORITY;\n  eventBus.on('propertiesPanel.isEntryVisible', priority, function (context) {\n    var element = context.element,\n      entry = context.entry,\n      group = context.group,\n      tab = context.tab;\n    return self.isEntryVisible(element, entry, group, tab);\n  });\n  eventBus.on('propertiesPanel.isPropertyEditable', priority, function (context) {\n    var element = context.element,\n      entry = context.entry,\n      group = context.group,\n      propertyName = context.propertyName,\n      tab = context.tab;\n    return self.isPropertyEditable(propertyName, element, entry, group, tab);\n  });\n}\nPropertiesActivator.$inject = ['eventBus'];\nmodule.exports = PropertiesActivator;\n\n/**\n * Should the given entry be visible for the specified element.\n *\n * @method  PropertiesActivator#isEntryVisible\n *\n * @param {ModdleElement} element\n * @param {Object} entry\n * @param {Object} group\n * @param {Object} tab\n *\n * @returns {boolean}\n */\nPropertiesActivator.prototype.isEntryVisible = function (element, entry, group, tab) {\n  return true;\n};\n\n/**\n * Should the given property be editable for the specified element\n *\n * @method  PropertiesActivator#isPropertyEditable\n *\n * @param {string} propertyName\n * @param {ModdleElement} element\n * @param {Object} entry\n * @param {Object} group\n * @param {Object} tab\n *\n * @returns {boolean}\n */\nPropertiesActivator.prototype.isPropertyEditable = function (propertyName, element, entry, group, tab) {\n  return true;\n};","map":null,"metadata":{},"sourceType":"script"}