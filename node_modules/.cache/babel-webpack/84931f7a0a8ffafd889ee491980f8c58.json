{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./../../../shared/services/sso-auth.service\";\nexport let SupportServiceService = /*#__PURE__*/(() => {\n  class SupportServiceService {\n    constructor(http, ssoService) {\n      this.http = http;\n      this.ssoService = ssoService;\n      this.API_URI = `${environment.SUPPORT_URL}/device-summary`;\n      this.API_URI2 = `${environment.SUPPORT_URL}`;\n    }\n    ngOnChanges() {\n      this.serialNo = this.ssoService.getSerialNo();\n      this.orgId = this.ssoService.getOrgId();\n      this.getXsdlDetails(this.serialNo, this.orgId);\n    }\n    getResetVoice(orgId, serialNumber, index) {\n      const ID = this.ssoService.getOrg(orgId);\n      return this.http.put(`${this.API_URI}/voice/reset/${index}?${ID}serialNumber=${serialNumber}`, '').pipe(catchError(this.handleError));\n    }\n    getRestartVoice(orgId, serialNumber, index) {\n      const ID = this.ssoService.getOrg(orgId);\n      return this.http.put(`${this.API_URI}/voice/restart/${index}?${ID}serialNumber=${serialNumber}`, '').pipe(catchError(this.handleError));\n    }\n    getXsdlDetails(serialNo, orgId) {\n      const ID = this.ssoService.getOrg(orgId);\n      return this.http.get(`${this.API_URI2}/device-ts/service/xdsl?${ID}serialNumber=${serialNo}`).pipe(catchError(this.handleError));\n    }\n    getGfastData(serialNo, orgId) {\n      const ID = this.ssoService.getOrg(orgId);\n      return this.http.get(`${this.API_URI2}/device-ts/gfast?${ID}serialNumber=${serialNo}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    getAsmData(uuid, oiName) {\n      return this.http.get(`${environment.API_BASE_URL}cnap/invmgr/subscriber/${uuid}?ont-interface-name=${oiName}`).pipe(catchError(this.handleError));\n    }\n  }\n  SupportServiceService.ɵfac = function SupportServiceService_Factory(t) {\n    return new (t || SupportServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  SupportServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SupportServiceService,\n    factory: SupportServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return SupportServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}