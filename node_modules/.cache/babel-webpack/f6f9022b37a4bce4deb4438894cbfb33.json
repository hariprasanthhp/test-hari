{"ast":null,"code":"import { getBusinessObject } from 'bpmn-js/lib/util/ModelUtil';\nimport { isAny } from 'bpmn-js/lib/features/modeling/util/ModelingUtil';\nimport extensionElementsHelper from 'bpmn-js-properties-panel/lib/helper/ExtensionElementsHelper';\nimport elementHelper from 'bpmn-js-properties-panel/lib/helper/ElementHelper';\nfunction getElements(bo, type, prop) {\n  const elems = extensionElementsHelper.getExtensionElements(bo, type) || [];\n  return !prop ? elems : (elems[0] || {})[prop] || [];\n}\nfunction getParameters(element, prop) {\n  const inputOutput = getInputOutput(element);\n  return inputOutput && inputOutput.get(prop) || [];\n}\n\n/**\n   * Get a inputOutput from the business object\n   *\n   * @param {djs.model.Base} element\n   *\n   * @return {ModdleElement} the inputOutput object\n   */\nexport function getInputOutput(element) {\n  const bo = getBusinessObject(element);\n  return (getElements(bo, 'zeebe:IoMapping') || [])[0];\n}\n\n/**\n   * Return all input parameters existing in the business object, and\n   * an empty array if none exist.\n   *\n   * @param  {djs.model.Base} element\n   *\n   * @return {Array} a list of input parameter objects\n   */\nexport function getInputParameters(element) {\n  return getParameters.apply(this, [element, 'inputParameters']);\n}\n\n/**\n   * Return all output parameters existing in the business object, and\n   * an empty array if none exist.\n   *\n   * @param  {djs.model.Base} element\n   *\n   * @return {Array} a list of output parameter objects\n   */\nexport function getOutputParameters(element) {\n  return getParameters.apply(this, [element, 'outputParameters']);\n}\n\n/**\n   * Get a input parameter from the business object at given index\n   *\n   * @param {djs.model.Base} element\n   * @param {number} idx\n   *\n   * @return {ModdleElement} input parameter\n   */\nexport function getInputParameter(element, idx) {\n  return getInputParameters(element)[idx];\n}\n\n/**\n   * Get a output parameter from the business object at given index\n   *\n   * @param {djs.model.Base} element\n   * @param {number} idx\n   *\n   * @return {ModdleElement} output parameter\n   */\nexport function getOutputParameter(element, idx) {\n  return getOutputParameters(element)[idx];\n}\n\n/**\n   * Returns 'true' if the given element supports inputOutput\n   *\n   * @param {djs.model.Base} element\n   *\n   * @return {boolean} a boolean value\n   */\nexport function isInputOutputSupported(element) {\n  return areOutputParametersSupported(element) || areInputParametersSupported(element);\n}\n\n/**\n   * Returns 'true' if the given element supports input parameters\n   *\n   * @param {djs.model.Base} element\n   *\n   * @return {boolean} a boolean value\n   */\nexport function areInputParametersSupported(element) {\n  return isAny(element, ['bpmn:ServiceTask', 'bpmn:UserTask', 'bpmn:SubProcess', 'bpmn:CallActivity']);\n}\n\n/**\n   * Returns 'true' if the given element supports output parameters\n   *\n   * @param {djs.model.Base} element\n   *\n   * @return {boolean} a boolean value\n   */\nexport function areOutputParametersSupported(element) {\n  return isAny(element, ['bpmn:ServiceTask', 'bpmn:UserTask', 'bpmn:SubProcess', 'bpmn:ReceiveTask', 'bpmn:CallActivity', 'bpmn:Event']);\n}\nexport function createElement(type, parent, factory, properties) {\n  return elementHelper.createElement(type, properties, parent, factory);\n}\nexport function createIOMapping(parent, bpmnFactory, properties) {\n  return createElement('zeebe:IoMapping', parent, bpmnFactory, properties);\n}\n\n/**\n * Get getter function for IOMapping parameters according to provided property name\n *\n * @param {string} property\n *\n * @returns {Function} Getter function for the IOMapping parameters according to provided property name\n */\nexport function determineParamGetFunc(property) {\n  if (property == 'inputParameters') {\n    return getInputParameters;\n  }\n  if (property == 'outputParameters') {\n    return getOutputParameters;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}