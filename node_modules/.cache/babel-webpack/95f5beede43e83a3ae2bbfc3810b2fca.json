{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from '../../command/CommandInterceptor';\n\n/**\n * An abstract provider that allows modelers to implement a custom\n * ordering of diagram elements on the canvas.\n *\n * It makes sure that the order is always preserved during element\n * creation and move operations.\n *\n * In order to use this behavior, inherit from it and override\n * the method {@link OrderingProvider#getOrdering}.\n *\n * @example\n *\n * ```javascript\n * function CustomOrderingProvider(eventBus) {\n *   OrderingProvider.call(this, eventBus);\n *\n *   this.getOrdering = function(element, newParent) {\n *     // always insert elements at the front\n *     // when moving\n *     return {\n *       index: 0,\n *       parent: newParent\n *     };\n *   };\n * }\n * ```\n *\n * @param {EventBus} eventBus\n */\nexport default function OrderingProvider(eventBus) {\n  CommandInterceptor.call(this, eventBus);\n  var self = this;\n  this.preExecute(['shape.create', 'connection.create'], function (event) {\n    var context = event.context,\n      element = context.shape || context.connection,\n      parent = context.parent;\n    var ordering = self.getOrdering(element, parent);\n    if (ordering) {\n      if (ordering.parent !== undefined) {\n        context.parent = ordering.parent;\n      }\n      context.parentIndex = ordering.index;\n    }\n  });\n  this.preExecute(['shape.move', 'connection.move'], function (event) {\n    var context = event.context,\n      element = context.shape || context.connection,\n      parent = context.newParent || element.parent;\n    var ordering = self.getOrdering(element, parent);\n    if (ordering) {\n      if (ordering.parent !== undefined) {\n        context.newParent = ordering.parent;\n      }\n      context.newParentIndex = ordering.index;\n    }\n  });\n}\n\n/**\n * Return a custom ordering of the element, both in terms\n * of parent element and index in the new parent.\n *\n * Implementors of this method must return an object with\n * `parent` _and_ `index` in it.\n *\n * @param {djs.model.Base} element\n * @param {djs.model.Shape} newParent\n *\n * @return {Object} ordering descriptor\n */\nOrderingProvider.prototype.getOrdering = function (element, newParent) {\n  return null;\n};\ninherits(OrderingProvider, CommandInterceptor);","map":null,"metadata":{},"sourceType":"module"}