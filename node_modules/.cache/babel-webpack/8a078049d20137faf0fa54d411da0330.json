{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as go from 'gojs';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../services/issues.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"ngx-spinner\";\nimport * as i6 from \"src/app/shared/services/sso-auth.service\";\nimport * as i7 from \"../../data.service\";\nimport * as i8 from \"src/app/sys-admin/services/common.service\";\nimport * as i9 from \"../../support-wifi/services/support-wifi.service\";\nimport * as i10 from \"src/app/cco/health/service/health.service\";\nimport * as i11 from \"@angular/platform-browser\";\nimport * as i12 from \"../../shared/component/subscriber-menu/subscriber-menu.component\";\nimport * as i13 from \"@angular/common\";\nimport * as i14 from \"@angular/forms\";\nimport * as i15 from \"@ng-select/ng-select\";\nconst _c0 = [\"APDiagram\"];\nconst _c1 = [\"searchValue\"];\nconst _c2 = [\"issueBox\"];\nfunction SupportTopologyComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵelementStart(1, \"span\", 16);\n    i0.ɵɵelement(2, \"img\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function SupportTopologyComponent_div_3_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.closeAlert();\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r0.errorInfo, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction SupportTopologyComponent_li_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 20);\n    i0.ɵɵelementStart(1, \"a\", 21);\n    i0.ɵɵelementStart(2, \"span\", 7);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/\", ctx_r1.MODULE, \"/overview/topology\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.language.Topology);\n  }\n}\nfunction SupportTopologyComponent_li_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 22);\n    i0.ɵɵelementStart(1, \"a\", 21);\n    i0.ɵɵelementStart(2, \"span\", 7);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/\", ctx_r2.MODULE, \"/overview/quality-of-experience\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"Quality of Experience\"]);\n  }\n}\nfunction SupportTopologyComponent_div_17_div_27_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵelementStart(1, \"div\", 53);\n    i0.ɵɵelementStart(2, \"div\", 54);\n    i0.ɵɵelementStart(3, \"span\", 55);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r11.language.Loading);\n  }\n}\nfunction SupportTopologyComponent_div_17_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49, 50);\n    i0.ɵɵtemplate(2, SupportTopologyComponent_div_17_div_27_div_2_Template, 5, 1, \"div\", 51);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.loading);\n  }\n}\nfunction SupportTopologyComponent_div_17_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r8.language.nodata);\n  }\n}\nfunction SupportTopologyComponent_div_17_div_29_div_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"p\", 64);\n    i0.ɵɵelementStart(2, \"span\", 65);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" - \");\n    i0.ɵɵelementStart(5, \"span\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const rgErr_r16 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(rgErr_r16.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(rgErr_r16.note);\n  }\n}\nfunction SupportTopologyComponent_div_17_div_29_div_2_div_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵelementStart(2, \"span\", 65);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" - \");\n    i0.ɵɵelementStart(5, \"span\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const clientErr_r18 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(clientErr_r18.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(clientErr_r18.note);\n  }\n}\nfunction SupportTopologyComponent_div_17_div_29_div_2_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 61);\n    i0.ɵɵtemplate(1, SupportTopologyComponent_div_17_div_29_div_2_div_5_div_1_Template, 7, 2, \"div\", 62);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r15.clientArr);\n  }\n}\nfunction SupportTopologyComponent_div_17_div_29_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 59);\n    i0.ɵɵelementStart(1, \"p\", 60);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 61);\n    i0.ɵɵtemplate(4, SupportTopologyComponent_div_17_div_29_div_2_div_4_Template, 7, 2, \"div\", 62);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, SupportTopologyComponent_div_17_div_29_div_2_div_5_Template, 2, 1, \"div\", 63);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r13.language.issue, \":\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r13.rgArr);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.selectedAPValue);\n  }\n}\nfunction SupportTopologyComponent_div_17_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", null, 57);\n    i0.ɵɵtemplate(2, SupportTopologyComponent_div_17_div_29_div_2_Template, 6, 3, \"div\", 58);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r9.rgflag);\n  }\n}\nconst _c3 = function () {\n  return {\n    standalone: true\n  };\n};\nfunction SupportTopologyComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵelementStart(1, \"div\", 23);\n    i0.ɵɵelementStart(2, \"div\", 24);\n    i0.ɵɵelementStart(3, \"div\", 25);\n    i0.ɵɵelementStart(4, \"label\", 26);\n    i0.ɵɵelementStart(5, \"span\", 27);\n    i0.ɵɵlistener(\"click\", function SupportTopologyComponent_div_17_Template_span_click_5_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.refreshClick();\n    });\n    i0.ɵɵelement(6, \"i\", 28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 29);\n    i0.ɵɵelementStart(8, \"div\", 30);\n    i0.ɵɵelementStart(9, \"div\", 31);\n    i0.ɵɵelementStart(10, \"input\", 32, 33);\n    i0.ɵɵlistener(\"ngModelChange\", function SupportTopologyComponent_div_17_Template_input_ngModelChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.searchText = $event;\n    })(\"ngModelChange\", function SupportTopologyComponent_div_17_Template_input_ngModelChange_10_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.searchDiagram();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 34);\n    i0.ɵɵelementStart(13, \"img\", 35);\n    i0.ɵɵlistener(\"click\", function SupportTopologyComponent_div_17_Template_img_click_13_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.searchDiagram();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"label\", 36);\n    i0.ɵɵelementStart(15, \"input\", 37);\n    i0.ɵɵlistener(\"change\", function SupportTopologyComponent_div_17_Template_input_change_15_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.accessPoint();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"span\");\n    i0.ɵɵelement(17, \"small\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"div\", 38);\n    i0.ɵɵelementStart(20, \"div\", 39);\n    i0.ɵɵelementStart(21, \"span\", 40);\n    i0.ɵɵlistener(\"click\", function SupportTopologyComponent_div_17_Template_span_click_21_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.changeScaleDiagram($event, \"decrease\");\n    });\n    i0.ɵɵelement(22, \"img\", 41);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"span\", 42);\n    i0.ɵɵelementStart(24, \"ng-select\", 43);\n    i0.ɵɵlistener(\"ngModelChange\", function SupportTopologyComponent_div_17_Template_ng_select_ngModelChange_24_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.zoomScale = $event;\n    })(\"ngModelChange\", function SupportTopologyComponent_div_17_Template_ng_select_ngModelChange_24_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.changeScaleDiagram($event, \"dropDown\");\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"span\", 44);\n    i0.ɵɵlistener(\"click\", function SupportTopologyComponent_div_17_Template_span_click_25_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.changeScaleDiagram($event, \"increase\");\n    });\n    i0.ɵɵelement(26, \"img\", 45);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(27, SupportTopologyComponent_div_17_div_27_Template, 3, 1, \"div\", 46);\n    i0.ɵɵtemplate(28, SupportTopologyComponent_div_17_div_28_Template, 2, 1, \"div\", 47);\n    i0.ɵɵtemplate(29, SupportTopologyComponent_div_17_div_29_Template, 3, 1, \"div\", 48);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r3.language.Topology_Search);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.searchText);\n    i0.ɵɵadvance(8);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.language.Show_Connectivity, \" \");\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.zoomScale)(\"items\", ctx_r3.zoomFactorList)(\"clearable\", false)(\"searchable\", false)(\"ngModelOptions\", i0.ɵɵpureFunction0(11, _c3));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.noData);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.noData);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r3.rgArr == null ? null : ctx_r3.rgArr.length) > 0 || (ctx_r3.clientArr == null ? null : ctx_r3.clientArr.length) > 0);\n  }\n}\nexport let SupportTopologyComponent = /*#__PURE__*/(() => {\n  class SupportTopologyComponent {\n    constructor(translateService, http, issuseservice, route, spinner, ssoAuthService, dataService, router, changeDetector, commonOrgService, api, healthService, titleService) {\n      this.translateService = translateService;\n      this.http = http;\n      this.issuseservice = issuseservice;\n      this.route = route;\n      this.spinner = spinner;\n      this.ssoAuthService = ssoAuthService;\n      this.dataService = dataService;\n      this.router = router;\n      this.changeDetector = changeDetector;\n      this.commonOrgService = commonOrgService;\n      this.api = api;\n      this.healthService = healthService;\n      this.titleService = titleService;\n      this.expandedNodes = [];\n      this.nodeLinkColor = {\n        green: '#c8d652',\n        red: '#c7a9a2',\n        yellow: '#ffeb3b'\n      };\n      this.nodeColor = {\n        green: '#f6f8e9',\n        red: '#f6e6e8',\n        yellow: '#fff17a8c'\n      };\n      this.searchSubject = new Subject();\n      this.locationFixed = false;\n      this.MODULE = 'support';\n      this.serialNumber = \" \";\n      this.isIconClicked = [];\n      this.primaryActionButton = [];\n      this.Description = [];\n      this.severity = [];\n      this.reason = [];\n      this.apiCallDone = false;\n      this.loading = false;\n      this.lastDeviceClickData = {};\n      this.uniqueDevices = [];\n      this.uniqueHostnames = [];\n      this.clientData = {};\n      this.twoHrsCategory = [];\n      this.twoHrsData = [];\n      this.sixHrsData = [];\n      this.oneDayData = [];\n      this.width = '100%';\n      this.height = 400;\n      this.type = 'msline';\n      this.title = 'app';\n      this.apInformtion = '';\n      this.VisitedPage = '';\n      this.routerKey = '';\n      this.nextVisitedPage = '';\n      this.nextRouterKey = '';\n      this.nextTabledataUniqueId = '';\n      this.currentPage = 'main';\n      this.dblClkFired = false;\n      this.$ = go.GraphObject.make;\n      this.apData = {};\n      this.apImageUrl = '';\n      this.apNodeData = [];\n      this.apLinkData = [];\n      this.topologyData = {\n        phy: [],\n        legacy: [],\n        clientWifi: []\n      };\n      this.topologyView = true;\n      this.tplgyType = '';\n      this.tableView = false;\n      this.legacyChecked = false;\n      this.phyChecked = false;\n      this.signalChecked = false;\n      this.filterEnabled = false;\n      this.successFilterEnabled = false;\n      this.deviceDatas = [];\n      this.deviceDatasUpdated = [];\n      this.backBtnDisabled = true;\n      this.accessPointId = '';\n      this.nodeDataArray = [];\n      this.linkDataArray = [];\n      this.hostnameFilterData = [];\n      this.topRow = true;\n      this.onClickClients = '';\n      this.clientArr = [];\n      this.rgArr = [];\n      this.clientDeviceSSID = false;\n      this.rgflag = false;\n      this.rgDetails = [];\n      this.rgModel = '';\n      this.raManufacture = '';\n      this.ipv4 = '';\n      this.ipv6 = '';\n      this.pageNumber = 1;\n      this.pageSize = 10;\n      this.makemodel = [];\n      this.zoomFactorList = [{\n        factor: '25%',\n        value: 0.25\n      }, {\n        factor: '50%',\n        value: 0.5\n      }, {\n        factor: '75%',\n        value: 0.75\n      }, {\n        factor: '100%',\n        value: 1\n      }, {\n        factor: '125%',\n        value: 1.25\n      }, {\n        factor: '150%',\n        value: 1.5\n      }, {\n        factor: '175%',\n        value: 1.75\n      }, {\n        factor: '200%',\n        value: 2\n      }];\n      this.zoomScale = 1;\n      this.images = ['assets/images/tv-all-clear.png', 'assets/images/printer-clear.png', 'assets/images/ipad-all-clear.png', 'assets/images/laptop-all-clear.png', 'assets/images/phone-all-clear-state.png', 'assets/images/camera-clear.png', 'assets/images/audiobox-clear.png', 'assets/images/gaming-clear.png', 'assets/images/ipad-all-clear.png', 'assets/images/laptop-all-clear.png'];\n      this.clientDevicesImages = ['assets/images/deviceicons/question_mark_grey_icon.png', 'assets/images/deviceicons/phone_grey_icon.png', 'assets/images/deviceicons/computer_grey_icon.png', 'assets/images/deviceicons/console_grey_icon.png', 'assets/images/deviceicons/media_player_grey_icon.png', 'assets/images/deviceicons/printer_grey_icon.png', 'assets/images/deviceicons/television_grey_icon.png', 'assets/images/deviceicons/network_icon_grey.png', 'assets/images/deviceicons/camera_grey_icon.png', 'assets/images/deviceicons/tablet_grey_icon.png', 'assets/images/deviceicons/voip_grey.png', 'assets/images/deviceicons/iot_grey.png', 'assets/images/deviceicons/ic_modem-24px.svg', 'assets/images/deviceicons/question_mark_grey_icon.png'];\n      this.imagesObj = {\n        Television: 'assets/images/tv-all-clear.png',\n        Tablet: 'assets/images/ipad-all-clear.png',\n        Phone: 'assets/images/phone-all-clear-state.png',\n        Camera: 'assets/images/camera-clear.png',\n        'Media Player': 'assets/images/audiobox-clear.png',\n        Console: 'assets/images/gaming-clear.png',\n        'Wi-Fi IoT': 'assets/images/iot.png',\n        'Wi Fi IoT': 'assets/images/iot.png',\n        'Wifi IoT': 'assets/images/iot.png',\n        Computer: 'assets/images/computer.png',\n        Printer: 'assets/images/printer-clear.png',\n        Network: 'assets/images/network.png',\n        Voip: 'assets/images/voip.png',\n        Fridge: 'assets/images/iot.png',\n        'Television-red': 'assets/images/tv-critical-issues.png',\n        'Tablet-red': 'assets/images/ipad-critical.png',\n        'Phone-red': 'assets/images/phone-critical-state.png',\n        'Camera-red': 'assets/images/camera-critical.png',\n        'Media Player-red': 'assets/images/audiobox-critical.png',\n        'Console-red': 'assets/images/gaming-critical.png',\n        'Wi-Fi IoT-red': 'assets/images/iot-critical.png',\n        'Wi Fi IoT-red': 'assets/images/iot-critical.png',\n        'Wifi IoT-red': 'assets/images/iot-critical.png',\n        'Computer-red': 'assets/images/computer-critical.png',\n        'Printer-red': 'assets/images/printer-critical.png',\n        'Network-red': 'assets/images/network-critical.png',\n        'Voip-red': 'assets/images/voip-critical.png',\n        'Fridge-red': 'assets/images/iot-critical.png',\n        'iot-red': 'assets/images/iot-critical.png',\n        'wireless-excellent': 'assets/img/wireless-excellent.svg',\n        'wireless-good': 'assets/img/wireless-good.svg',\n        'wireless-toofar': 'assets/img/wireless-toofar.svg',\n        'wireless-tooclose': 'assets/img/wireless-tooclose.svg',\n        'wireless-unavailable': 'assets/img/wireless-unavailable.svg'\n      };\n      this.accessPointImages = {\n        yellow: 'assets/images/myRouter_yellow.svg',\n        green: 'assets/images/myRouter.svg',\n        red: 'assets/images/myRouter_red.svg'\n      };\n      this.ssid = '';\n      this.radio = '';\n      this.ethOrAPType = '';\n      this.ethOrAPImageUrl = '';\n      this.accesspoint = false;\n      this.noData = false;\n      this.noRG = false;\n      this.innerChildsNodes = [];\n      this.isDevEnv = false;\n      this.ont_serialNo = '';\n      this.issue_reason = '';\n      this.aps_issue = '';\n      this.client_issue = '';\n      this.ont_issue = '';\n      this.isAPSNodeClicked = false;\n      this.issueCode = '';\n      this.issueType = '';\n      this.issueName = '';\n      this.bhissueCode = '';\n      this.bhissueType = '';\n      this.bhissueName = '';\n      this.isClientNodeClicked = false;\n      this.backhaul_issue = '';\n      this.isBHNodeClicked = false;\n      this.isrgWithIssue = false;\n      this.isapWithIssue = false;\n      this.scope = {\n        qoeRead: false\n      };\n      this.showTopologyTab = false;\n      this.showQoeTab = false;\n      go.Diagram.licenseKey = environment.GO_JS_KEY;\n      go.Shape.defineFigureGenerator('Badge', function (shape, w, h) {\n        var radius = h / 2,\n          geo = new go.Geometry();\n        // a single figure consisting of straight lines and half-circle arcs\n        geo.add(new go.PathFigure(0, radius).add(new go.PathSegment(go.PathSegment.Arc, 90, 180, radius, radius, radius, radius)).add(new go.PathSegment(go.PathSegment.Line, w - radius, 0)).add(new go.PathSegment(go.PathSegment.Arc, 270, 180, w - radius, radius, radius, radius)).add(new go.PathSegment(go.PathSegment.Line, radius, h).close()));\n        // don't intersect with two top corners when used in an \"Auto\" Panel\n        geo.spot1 = new go.Spot(0, 0, 0.1 * radius, 0.1 * radius);\n        geo.spot2 = new go.Spot(1, 1, -0.1 * radius, 0);\n        return geo;\n      });\n      let url = this.router.url;\n      if (url.indexOf('/support/') > -1) {\n        this.MODULE = 'support';\n      } else this.MODULE = 'cco';\n    }\n    ngOnInit() {\n      this.isDevEnv = this.ssoAuthService.API.includes('dev');\n      this.commandIQDataSubs = this.ssoAuthService.commandIQData.subscribe(data => {\n        this.scope.qoeRead = true;\n        //this.qoeCheck();\n      });\n\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.titleService.setTitle(`${this.language['Topology']} - ${this.language['Overview']} - ${this.language['Service']} - ${this.language['Calix Cloud']}`);\n        this.rgArr = [];\n        this.getData();\n      });\n      this.titleService.setTitle(`${this.language['Topology']} - ${this.language['Overview']} - ${this.language['Service']} - ${this.language['Calix Cloud']}`);\n      this.backBtnDisabled = true;\n      this.route.queryParams.subscribe(params => {\n        this.routerMac = params['routerMac'];\n        this.getData();\n        this.getAllClientsData(this.routerMac);\n      });\n      this.dataService.showTopology.subscribe(flag => {\n        this.showTopologyTab = flag;\n      });\n      setTimeout(() => {\n        this.qoeSubscribed = this.dataService.showQoe.subscribe(flag => {\n          this.showQoeTab = flag;\n        });\n      }, 100);\n    }\n    ngAfterViewInit() {}\n    getData() {\n      this.loading = true;\n      let url = `assets/data/rg.json`;\n      var Devices = JSON.parse(this.ssoAuthService.getSerialNo());\n      var SubscriberId = this.ssoAuthService.getCSCSubscriberId();\n      var serialNo = [];\n      let ont = JSON.parse(sessionStorage.getItem(`${this.ssoAuthService.getTabId()}calix.deviceData`));\n      let ontUUID = '';\n      let SerialNo = '';\n      Devices.forEach(element => {\n        if (element.serialNumber) {\n          var newElement = {};\n          newElement['serialNumber'] = element.serialNumber, newElement['opMode'] = element.opMode;\n          ont.forEach(element => {\n            if (element.hasOwnProperty('ont')) {\n              this.ont_serialNo = element.serialNumber;\n              let ontValue = element.ont;\n              ontUUID = ontValue.uuid;\n              SerialNo = element.serialNumber;\n              newElement[\"isOnt\"] = true;\n              newElement[\"ontSerialNumber\"] = ontValue.serialNo;\n              newElement[\"vendorId\"] = ontValue.vendorId;\n            }\n          });\n          serialNo.push(newElement);\n        }\n      });\n      let data = {\n        subscriberId: SubscriberId,\n        devices: serialNo\n      };\n      let orgId = +localStorage.getItem('calix.org_id');\n      this.issuseservice.topologyValue(orgId, data).subscribe(json => {\n        // this.http.get(url).subscribe(\n        //   (json: any) => {\n        this.swVersion = parseFloat(json.landing.rg.version);\n        if (Object.keys(json.landing.rg).length > 0 && json.landing.rg.aps && json.landing.rg.aps.length == 0) {\n          this.loading = false;\n          this.noData = true;\n          return;\n        }\n        if (json.landing.ont && this.ont_serialNo != json.landing.rg['sn']) {\n          if (json.landing.ont['ont-color'] == 'red' || json.landing.ont['ont-color'] == 'yellow') {\n            this.rgflag = true;\n            let name = '';\n            name = this.ont_serialNo;\n            let ontIssue = json.landing.ont['ont-issue-list'],\n              mapTrSerial = [];\n            // let rgIssue = json.landing.rg['rg-issue-list'], mapTrSerial = [];\n            const wapFailed = ontIssue.filter(obj => [\"GATEWAY_FAILED\", \"WAP_FAILED\"].includes(obj === null || obj === void 0 ? void 0 : obj.code)).map(obj => obj.serialNumber);\n            ontIssue = ontIssue.filter((obj, i) => {\n              if (!(wapFailed.includes(obj === null || obj === void 0 ? void 0 : obj.serialNumber) && (obj === null || obj === void 0 ? void 0 : obj.code) == \"MAP_CONNECTIVITY_FAILED\")) {\n                return obj;\n              } else {\n                mapTrSerial.push(obj === null || obj === void 0 ? void 0 : obj.serialNumber);\n              }\n            });\n            for (let i = ontIssue.length - 1; i >= 0; i--) {\n              if (mapTrSerial.includes(ontIssue[i][\"serialNumber\"]) && [\"GATEWAY_FAILED\", \"WAP_FAILED\"].includes(ontIssue[i][\"code\"])) {\n                ontIssue.push({\n                  \"code\": \"UI_CREATED_ISSUE_FOR_TR069MAPDOWN\",\n                  \"subscriberId\": \"\",\n                  \"serialNumber\": ontIssue[i][\"serialNumber\"],\n                  \"source\": ontIssue[i][\"serialNumber\"],\n                  \"sourceId\": ontIssue[i][\"serialNumber\"],\n                  \"type\": \"ROUTER\",\n                  \"severity\": 0,\n                  \"reason\": \"High Operating Temperature Observed\",\n                  \"isValid\": true\n                });\n                ontIssue.splice(i, 1);\n              }\n            }\n            this.issueData = ontIssue.filter(obj => {\n              var _a, _b;\n              return this.issueCode.indexOf(obj.hasOwnProperty('code') ? (_a = obj.code) === null || _a === void 0 ? void 0 : _a.toUpperCase() : (_b = obj.Code) === null || _b === void 0 ? void 0 : _b.toUpperCase()) > -1;\n            });\n            this.issueData = this.issueData.sort((a, b) => a.severity < b.severity ? -1 : a.severity > b.severity ? 1 : 0);\n            this.issueList = this.issueData;\n            this.totalissues = this.issueList.length;\n            this.initalize();\n            if (ontIssue.length > 0) {\n              this.ont_issue = '';\n              for (let issue = 0; issue < ontIssue.length; issue++) {\n                this.issueDescription(ontIssue[issue].code, 'ont', name, '');\n              }\n            }\n            let params = {\n              name: name,\n              note: this.ont_issue\n            };\n            JSON.stringify(this.rgArr.push(params));\n          }\n        }\n        if (json.landing.rg['rg-color'] == 'red' || json.landing.rg['rg-color'] == 'yellow') {\n          this.rgflag = true;\n          let name = '';\n          if (json.landing.rg['hostname']) {\n            name = json.landing.rg['hostname'];\n          } else {\n            name = json.landing.rg['sn'];\n          }\n          let rgIssue = json.landing.rg['rg-issue-list'],\n            mapTrSerial = [];\n          // let issueData = json.landing.rg['rg-issue-list'], mapTrSerial = [];\n          const wapFailed = rgIssue.filter(obj => [\"GATEWAY_FAILED\", \"WAP_FAILED\"].includes(obj === null || obj === void 0 ? void 0 : obj.code)).map(obj => obj.serialNumber);\n          rgIssue = rgIssue.filter((obj, i) => {\n            if (!(wapFailed.includes(obj === null || obj === void 0 ? void 0 : obj.serialNumber) && (obj === null || obj === void 0 ? void 0 : obj.code) == \"MAP_CONNECTIVITY_FAILED\")) {\n              return obj;\n            } else {\n              mapTrSerial.push(obj === null || obj === void 0 ? void 0 : obj.serialNumber);\n            }\n          });\n          for (let i = rgIssue.length - 1; i >= 0; i--) {\n            if (mapTrSerial.includes(rgIssue[i][\"serialNumber\"]) && [\"GATEWAY_FAILED\", \"WAP_FAILED\"].includes(rgIssue[i][\"code\"])) {\n              rgIssue.push({\n                \"code\": \"UI_CREATED_ISSUE_FOR_TR069MAPDOWN\",\n                \"subscriberId\": \"\",\n                \"serialNumber\": rgIssue[i][\"serialNumber\"],\n                \"source\": rgIssue[i][\"serialNumber\"],\n                \"sourceId\": rgIssue[i][\"serialNumber\"],\n                \"type\": \"ROUTER\",\n                \"severity\": 0,\n                \"reason\": \"High Operating Temperature Observed\",\n                \"isValid\": true\n              });\n              rgIssue.splice(i, 1);\n            }\n          }\n          this.issueData = rgIssue.filter(obj => {\n            var _a, _b;\n            return this.issueCode.indexOf(obj.hasOwnProperty('code') ? (_a = obj.code) === null || _a === void 0 ? void 0 : _a.toUpperCase() : (_b = obj.Code) === null || _b === void 0 ? void 0 : _b.toUpperCase()) > -1;\n          });\n          this.issueData = this.issueData.sort((a, b) => a.severity < b.severity ? -1 : a.severity > b.severity ? 1 : 0);\n          this.issueList = this.issueData;\n          this.totalissues = this.issueList.length;\n          this.initalize();\n          if (rgIssue.length > 0) {\n            this.issue_reason = '';\n            for (let issue = 0; issue < rgIssue.length; issue++) {\n              this.issueDescription(rgIssue[issue].code, 'rg', name, '');\n            }\n            let params = {\n              name: name,\n              note: this.issue_reason\n            };\n            JSON.stringify(this.rgArr.push(params));\n          }\n        }\n        var date = new Date();\n        let fromDate = new Date(date.getTime() - 10 * 24 * 60 * 60 * 1000);\n        let todate = new Date();\n        let params = {\n          tenant: \"0\",\n          granularity: \"15min\",\n          fsan: SerialNo,\n          startTime: `${this.startISODate(fromDate, false)}`,\n          endTime: `${this.startISODate(todate, true)}`\n          // startTime: `${year}-${month}-${day}T00:00:00Z`,\n          // endTime: `${year}-${month}-${day}T23:59:00Z`,\n          // ont: ontUUID\n        };\n\n        let query = \"\";\n        for (var key in params) {\n          if (params[key] == undefined || params[key] == \"undefined\" || params[key] == \"\") {\n            continue;\n          }\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n        let serialNumber = '';\n        if (!json.landing.rg.mac && json.landing.rg.aps && json.landing.rg.aps.length > 0) {\n          serialNumber = json.landing.rg.aps[0].sn;\n          this.noRG = true;\n        } else if (json.landing.rg.sn) {\n          serialNumber = json.landing.rg.sn;\n        }\n        let pageNumber = 1;\n        let pageSize = 10;\n        if (json.landing.ont) {\n          this.healthService.timeseries(query, 'ont').subscribe(res => {\n            this.loading = false;\n            if (res && res.length > 0) {\n              let lightLevel = '',\n                rxPower = '',\n                downStream = '',\n                upStream = '';\n              let lightLevalStatus = false,\n                rxPowerStatus = false,\n                dsStatus = false,\n                usStatus = false;\n              for (let i = res.length - 1; i >= 0; i--) {\n                // if((lightLevel || lightLevel == 0) && (rxPower || rxPower == 0) && (downStream || downStream == 0) && (upStream || upStream == 0)) {\n                //   return;\n                // } else {\n                // if ((res[i].neOptSignalLvl || res[i].neOptSignalLvl == 0) && !lightLevalStatus) {\n                // lightLevel = lightLevel || lightLevel != '' ? lightLevel : res[i].neOptSignalLvl;\n                // this.lightLevel = lightLevel.toString();\n                if (res[i].neOptSignalLvl && res[i].neOptSignalLvl > -40 && !lightLevalStatus) {\n                  this.lightLevel = res[i].neOptSignalLvl.toFixed('2');\n                  lightLevalStatus = true;\n                }\n                if (res[i].rxOptPwr && res[i].rxOptPwr > -40 && !rxPowerStatus) {\n                  this.rxPower = res[i].rxOptPwr.toFixed('2');\n                  rxPowerStatus = true;\n                }\n                if ((res[i].dsBipErr || res[i].dsBipErr == 0) && !dsStatus) {\n                  downStream = downStream || downStream != '' ? downStream : res[i].dsBipErr;\n                  this.downStream = downStream.toString();\n                  dsStatus = true;\n                }\n                if ((res[i].usBipErr || res[i].usBipErr == 0) && !usStatus) {\n                  upStream = upStream || upStream != '' ? upStream : res[i].usBipErr;\n                  this.upStream = upStream.toString();\n                  usStatus = true;\n                }\n              }\n            }\n            this.dataService.performSearch(orgId, serialNumber, pageNumber, pageSize).subscribe(searchData => __awaiter(this, void 0, void 0, function* () {\n              this.loading = false;\n              this.rgDetails = searchData;\n              for (let i = 0; i < this.rgDetails.records.length; i++) {\n                for (let j = 0; j < this.rgDetails.records[i].devices.length; j++) {\n                  if (this.rgDetails.records[i].devices[j].serialNumber == serialNumber) {\n                    this.rgModel = this.rgDetails.records[i].devices[j].modelName;\n                    this.raManufacture = this.rgDetails.records[i].devices[j].manufacturer;\n                    this.ipv4 = this.rgDetails.records[i].devices[j].ipAddress;\n                    this.ipv6 = this.rgDetails.records[i].devices[j].secondIpAddress;\n                  }\n                  let params = {\n                    model: this.rgDetails.records[i].devices[j].modelName,\n                    manufacture: this.rgDetails.records[i].devices[j].manufacturer,\n                    sno: this.rgDetails.records[i].devices[j].serialNumber\n                  };\n                  this.makemodel.push(params);\n                }\n              }\n              // this.resValue = JSON.parse(JSON.stringify(json));\n              this.resValue = json;\n              this.loadInitialDiagram(json);\n            }), err => {\n              this.pageErrorHandle(err);\n              this.loading = false;\n            });\n          }, err => {\n            this.pageErrorHandle(err);\n            this.loading = false;\n          });\n        } else {\n          this.dataService.performSearch(orgId, serialNumber, pageNumber, pageSize).subscribe(searchData => __awaiter(this, void 0, void 0, function* () {\n            this.loading = false;\n            this.rgDetails = searchData;\n            for (let i = 0; i < this.rgDetails.records.length; i++) {\n              for (let j = 0; j < this.rgDetails.records[i].devices.length; j++) {\n                if (this.rgDetails.records[i].devices[j].serialNumber == serialNumber) {\n                  this.rgModel = this.rgDetails.records[i].devices[j].modelName;\n                  this.raManufacture = this.rgDetails.records[i].devices[j].manufacturer;\n                  this.ipv4 = this.rgDetails.records[i].devices[j].ipAddress;\n                  this.ipv6 = this.rgDetails.records[i].devices[j].secondIpAddress;\n                }\n                let params = {\n                  model: this.rgDetails.records[i].devices[j].modelName,\n                  manufacture: this.rgDetails.records[i].devices[j].manufacturer,\n                  sno: this.rgDetails.records[i].devices[j].serialNumber\n                };\n                this.makemodel.push(params);\n              }\n            }\n            // this.resValue = JSON.parse(JSON.stringify(json));\n            this.resValue = json;\n            this.loadInitialDiagram(json);\n          }), err => {\n            this.pageErrorHandle(err);\n            this.loading = false;\n          });\n        }\n      }, err => {\n        this.pageErrorHandle(err);\n        this.loading = false;\n      });\n    }\n    loadInitialDiagram(json) {\n      var _a;\n      return __awaiter(this, void 0, void 0, function* () {\n        this.nodeDataArray = [];\n        this.linkDataArray = [];\n        let rgColor = '';\n        let linkColor = '';\n        let uplinkText = [];\n        let uplinkRate = [];\n        let linkColumn;\n        let ontSN = '';\n        if (Object.keys(json.landing.uplink).length > 0) {\n          // uplinkText = `MAC : ${json.landing.uplink.mac}`;\n          // uplinkRate = `Download Rate : ${json.landing.uplink.downloadRate} Mbps \\n Upload Rate : ${json.landing.uplink.uploadRate} Mbps `;\n          linkColumn = [{\n            attr: \"property\",\n            text: \"\",\n            column: 0\n          }, {\n            attr: \"value\",\n            text: \"\",\n            column: 1\n          }];\n          if (json.landing.uplink.mac) {\n            uplinkText = [{\n              columns: [{\n                attr: \"property\",\n                text: this.language.MAC\n              }, {\n                attr: \"value\",\n                text: `${json.landing.uplink.mac}`\n              }]\n            }];\n            uplinkRate = [{\n              columns: [{\n                attr: \"property\",\n                text: this.language.Download_Rate\n              }, {\n                attr: \"value\",\n                text: `${json.landing.uplink.downloadRate} Mbps`\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Upload_Rate\n              }, {\n                attr: \"value\",\n                text: `${json.landing.uplink.uploadRate} Mbps`\n              }]\n            }];\n          }\n        }\n        let ontRgSN = true;\n        let ontDataArr = {};\n        // ONT Function\n        let entArr = this.ssoAuthService.getEntitlementsArr();\n        let cscType = this.ssoAuthService.getCscType();\n        if (json.landing.ont && Object.keys(json.landing.ont).length > 0) {\n          if (entArr.indexOf('102') > -1 && cscType == 'EME') {\n            ontSN = json.landing.ont['discoveredSerialNumber'];\n            json.landing.rg['ontSN'] = this.ont_serialNo;\n            let rgSN = json.landing.rg['sn'].substring(json.landing.rg['sn'].indexOf('CXNK00') + 6);\n            if (ontSN == rgSN) {\n              json.landing.rg['category'] = 'ontNode';\n              ontRgSN = true;\n            } else {\n              ontRgSN = false;\n              ontDataArr = {\n                isONT: true,\n                label: this.ont_serialNo,\n                source: 'assets/images/ic_ONT.svg',\n                key: json.landing.ont['ontId'],\n                width: 15,\n                height: 30,\n                category: 'otherNode'\n              };\n              json.landing.rg['category'] = 'otherNode';\n            }\n            let ontConnection = '';\n            if (json.landing.ont['ont-online'] == 'true') {\n              ontConnection = `ONT ${this.language.Connection}: ${this.language.Online}`;\n            } else {\n              ontConnection = `ONT ${this.language.Connection}: ${this.language.Offline}`;\n            }\n            // json.landing.rg['ontTooltip'] = `Serial Number: ${json.landing.ont['discoveredVendorId']}${ontSN} \\n CLEI: ${json.landing.ont['clei']} \\n Model: ${json.landing.ont['discoveredModel']} \\n Pon Port: ${json.landing.ont['discoveredPonPort']} \\n ONT Issue: ${json.landing.ont['ont-tech-note']}`\n            json.landing.rg['ontSourceIcon'] = 'assets/images/ic_ONT.svg';\n            json.landing.rg['props'] = `Serial Number \\n CLEI \\n Model \\n Pon Port \\n ONT Issues`;\n            json.landing.rg['values'] = `${json.landing.ont['discoveredVendorId']}${ontSN} \\n ${json.landing.ont['clei']} \\n ${json.landing.ont['discoveredModel']} \\n ${json.landing.ont['discoveredPonPort']} \\n ${json.landing.ont['ont-tech-note']}`;\n            let ontSerialNo = ontSN ? `${json.landing.ont['discoveredVendorId']}${ontSN}` : `-`;\n            let ontMacAdd = json.landing.ont['discoveredMacAddress'] ? json.landing.ont['discoveredMacAddress'] : `-`;\n            let ontVersion = json.landing.ont['discoveredVersion'] ? json.landing.ont['discoveredVersion'] : `-`;\n            let ontCLEI = json.landing.ont['clei'] ? json.landing.ont['clei'] : `-`;\n            let ontModel = json.landing.ont['discoveredModel'] ? json.landing.ont['discoveredModel'] : `-`;\n            let ontPonPort = json.landing.ont['discoveredPonPort'] ? json.landing.ont['discoveredPonPort'] : `-`;\n            let oltname = json.landing.ont['oltName'] ? json.landing.ont['oltName'] : `-`;\n            let ontregion = json.landing.ont['region'] ? json.landing.ont['region'] : `-`;\n            let ontlocation = json.landing.ont['location'] ? json.landing.ont['location'] : `-`;\n            let ontregionlocation = `${ontregion}/${ontlocation}`;\n            let ontID = json.landing.ont['ontId'] ? json.landing.ont['ontId'] : `-`;\n            if (json.landing.ont['ont-tech-note']) {\n              this.ont_issue = '';\n              for (let i = 0; i < json.landing.ont['ont-issue-list'].length; i++) {\n                this.issueDescription(json.landing.ont['ont-issue-list'][i].code, 'ont', '', '');\n              }\n            }\n            let ontIssue = json.landing.ont['ont-tech-note'] ? this.ont_issue : `-`;\n            json.landing.rg['columnDefinitions'] = [\n            // each column definition needs to specify the column used\n            {\n              attr: \"property\",\n              text: \"\",\n              column: 0\n            }, {\n              attr: \"value\",\n              text: \"\",\n              column: 1\n            }];\n            let lightLev = this.lightLevel ? `${this.lightLevel} dBm` : `-`;\n            let rxPower = this.rxPower ? `${this.rxPower} dBm` : `-`;\n            let downStream = this.downStream ? this.downStream : `-`;\n            let upStream = this.upStream ? this.upStream : `-`;\n            json.landing.rg['isontIssue'] = ontIssue;\n            json.landing.rg['ont/rgData'] = [{\n              columns: [{\n                attr: \"property\",\n                text: `ONT - ${this.ont_serialNo}`\n              }, {\n                attr: \"value\",\n                text: ''\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Serial_Number\n              }, {\n                attr: \"value\",\n                text: this.ont_serialNo\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.MAC_Address\n              }, {\n                attr: \"value\",\n                text: ontMacAdd\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Version\n              }, {\n                attr: \"value\",\n                text: ontVersion\n              }]\n            },\n            // { columns: [{ attr: \"property\", text: \"CLEI\" }, { attr: \"value\", text: ontCLEI }] },\n            {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Model\n              }, {\n                attr: \"value\",\n                text: ontModel\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Pon_Port\n              }, {\n                attr: \"value\",\n                text: ontPonPort\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.ONT_Name\n              }, {\n                attr: \"value\",\n                text: oltname\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Region_Location\n              }, {\n                attr: \"value\",\n                text: ontregionlocation\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.ONT_ID\n              }, {\n                attr: \"value\",\n                text: ontID\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.OLT_Rx_Power\n              }, {\n                attr: \"value\",\n                text: lightLev\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.ONT_Rx_Power\n              }, {\n                attr: \"value\",\n                text: rxPower\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.DS_BIP_Error_Count\n              }, {\n                attr: \"value\",\n                text: downStream\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.US_BIP_Error_Count\n              }, {\n                attr: \"value\",\n                text: upStream\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.issue\n              }, {\n                attr: \"value\",\n                text: ontIssue\n              }]\n            }];\n            json.landing.rg['ontData'] = [{\n              columns: [{\n                attr: \"property\",\n                text: this.language.Serial_Number\n              }, {\n                attr: \"value\",\n                text: this.ont_serialNo\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.MAC_Address\n              }, {\n                attr: \"value\",\n                text: ontMacAdd\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Version\n              }, {\n                attr: \"value\",\n                text: ontVersion\n              }]\n            },\n            // { columns: [{ attr: \"property\", text: \"CLEI\" }, { attr: \"value\", text: ontCLEI }] },\n            {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Model\n              }, {\n                attr: \"value\",\n                text: ontModel\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Pon_Port\n              }, {\n                attr: \"value\",\n                text: ontPonPort\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.ONT_Name\n              }, {\n                attr: \"value\",\n                text: oltname\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Region_Location\n              }, {\n                attr: \"value\",\n                text: ontregionlocation\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.ONT_ID\n              }, {\n                attr: \"value\",\n                text: ontID\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.OLT_Rx_Power\n              }, {\n                attr: \"value\",\n                text: lightLev\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.ONT_Rx_Power\n              }, {\n                attr: \"value\",\n                text: rxPower\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.DS_BIP_Error_Count\n              }, {\n                attr: \"value\",\n                text: downStream\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.US_BIP_Error_Count\n              }, {\n                attr: \"value\",\n                text: upStream\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.issue\n              }, {\n                attr: \"value\",\n                text: ontIssue\n              }]\n            }];\n            ontDataArr['columnDefinitions'] = json.landing.rg['columnDefinitions'];\n            ontDataArr['rgData'] = json.landing.rg['ontData'];\n            if (json.landing.ont['ont-color'] == 'green') {\n              ontDataArr['color'] = this.nodeColor['green'];\n            } else if (json.landing.ont['ont-color'] == 'red') {\n              ontDataArr['color'] = this.nodeColor['red'];\n            } else if (json.landing.ont['ont-color'] == 'yellow') {\n              ontDataArr['color'] = '#fff17a8c';\n            }\n          } else {\n            json.landing.rg['category'] = 'otherNode';\n          }\n        } else {\n          json.landing.rg['category'] = 'otherNode';\n        }\n        let connection = '';\n        let ipv6Addr = '';\n        ipv6Addr = this.ipv6 && this.ssoAuthService.isIpv6Address(this.ipv6 ? this.ipv6.split('/')[0] : '') ? this.ipv6 : ipv6Addr;\n        if (json.landing.rg.online == 'true' && ipv6Addr) {\n          connection = `IPv4: ${this.language.Connected} \\n IPv6: ${this.language.Connected}`;\n        } else if (json.landing.rg.online == 'true' && !ipv6Addr) {\n          connection = `IPv4: ${this.language.Connected} \\n IPv6: ${this.language.Disconnected}`;\n          linkColor = this.nodeLinkColor.red;\n        } else if (json.landing.rg.online == 'false' && ipv6Addr) {\n          connection = `IPv4: ${this.language.Disconnected} \\n IPv6: ${this.language.Connected}`;\n          linkColor = this.nodeLinkColor.red;\n        }\n        rgColor = '#f3f3f3';\n        linkColor = 'grey';\n        // if (json.landing.rg.online == 'true') {\n        //   connection = `IPv4: Connected`;\n        // } else \n        if (json.landing.rg.online == 'false' || ((_a = json.landing.rg['rg-tech-notes']) === null || _a === void 0 ? void 0 : _a.includes('The RG is not reachable'))) {\n          connection = `IPv4: ${this.language.Disconnected} \\n IPv6: ${this.language.Disconnected}`;\n          linkColor = this.nodeLinkColor.red;\n        }\n        let uplinkData = {\n          isInternet: true,\n          columnDefinitions: linkColumn,\n          rgData: uplinkText,\n          label: connection,\n          source: 'assets/images/global.svg',\n          key: 'Internet',\n          accessPointId: '',\n          width: 30,\n          height: 30,\n          color: rgColor,\n          mac: 'Internet',\n          category: 'otherNode'\n        };\n        let uplinkEthernetData = {\n          text: `Ethernet Port`,\n          label: `Ethernet Port`,\n          source: 'assets/images/ethernet.png',\n          key: 'ethernet',\n          accessPointId: '',\n          color: '#f3f3f3',\n          width: 17,\n          height: 30\n        };\n        // ****** RG NOTE\n        if (json.landing && json.landing.rg.mac) {\n          let color;\n          color = json.landing.rg['online'] ? 'red' : 'green';\n          if (ontRgSN) {\n            this.linkDataArray.push({\n              from: uplinkData.key,\n              to: json.landing.rg.mac,\n              color: linkColor,\n              thick: 2,\n              routing: go.Link.Normal,\n              linkColumn: linkColumn,\n              linkText: uplinkRate\n            });\n          } else {\n            this.linkDataArray.push({\n              from: uplinkData.key,\n              to: ontDataArr['key'],\n              color: linkColor,\n              thick: 2,\n              routing: go.Link.Normal,\n              linkColumn: linkColumn,\n              linkText: uplinkRate\n            });\n            this.linkDataArray.push({\n              from: ontDataArr['key'],\n              to: json.landing.rg.mac,\n              color: linkColor,\n              thick: 2,\n              routing: go.Link.Normal,\n              linkColumn: linkColumn,\n              linkText: uplinkRate\n            });\n          }\n          let rgDetails = '';\n          let freq_band = '';\n          let rgConnection = '';\n          if (json.landing.rg['online']) {\n            if (json.landing.rg['online'] == 'true') {\n              rgConnection = this.language.Online;\n            } else {\n              rgConnection = this.language.Offline;\n            }\n          }\n          // rgDetails += json.landing.rg['ip']\n          //   ? `\\n IP Address : ${json.landing.rg['ip']}`\n          //   : ``;\n          // rgDetails += json.landing.rg['mac']\n          //   ? `\\n MAC Address: ${json.landing.rg['mac']}`\n          //   : ``;\n          // rgDetails += json.landing.rg['version']\n          //   ? `\\n Software Version : ${json.landing.rg['version']}`\n          //   : ``;\n          // rgDetails += json.landing.rg['sn']\n          //   ? `\\n Serial Number: ${json.landing.rg['sn']}`\n          //   : ``;\n          // rgDetails += json.landing.rg['hostname']\n          //   ? `\\n Device : ${json.landing.rg['hostname']}`\n          //   : ``;\n          // rgDetails += this.rgModel ? `\\n Model : ${this.rgModel}` : ``;\n          // rgDetails += this.raManufacture\n          //   ? `\\n Manufacturer : ${this.raManufacture}`\n          //   : ``;\n          // if (json.landing.rg['radio-info']) {\n          //   var radioInfo = json.landing.rg['radio-info'];\n          //   var freqArr = [];\n          //   if (radioInfo.length > 0) {\n          //     for (let fband = 0; fband < radioInfo.length; fband++) {\n          //       let fbandValue = radioInfo[fband]['freq-band'] + 'GHz';\n          //       freqArr.push(fbandValue);\n          //     }\n          //     freq_band = freqArr.join(', ');\n          //   }\n          //   rgDetails += freq_band ? `\\n Frequency Band: ${freq_band}` : ``;\n          // }\n          // if (json.landing.rg.clients) {\n          //   if (json.landing.rg.clients.length > 0) {\n          //     rgDetails += json.landing.rg.clients\n          //       ? `\\n Total Devices: ${json.landing.rg.clients.length}`\n          //       : `\\n Total Devices: 0`;\n          //   }\n          // }\n          // rgDetails +=\n          //   json.landing.rg['passed-clients'] != 0\n          //     ? `\\n Devices without issues and warnings: ${json.landing.rg['passed-clients']}`\n          //     : `\\n Devices without issues and warnings: 0`;\n          // rgDetails +=\n          //   json.landing.rg['failed-clients'] != 0\n          //     ? `\\n Devices with issues and warnings: ${json.landing.rg['failed-clients']}`\n          //     : `\\n Devices with issues and warnings: 0`;\n          // rgDetails += json.landing.rg['rg-tech-notes']\n          //   ? `\\n Issue(s) : ${json.landing.rg['rg-tech-notes']}`\n          //   : ``;\n          // json.landing.rg['tooltip'] = rgDetails;\n          let rgIpAdd = json.landing.rg['ip'] ? `${json.landing.rg['ip']}` : `-`;\n          let rgMacAdd = json.landing.rg['mac'] ? `${json.landing.rg['mac']}` : `-`;\n          let rgName = json.landing.rg['name'] ? `${json.landing.rg['name']}` : `-`;\n          let rgSwVersion = json.landing.rg['version'] ? `${json.landing.rg['version']}` : `-`;\n          let rgSerialNo = json.landing.rg['sn'] ? `${json.landing.rg['sn']}` : `-`;\n          let selctedModel = JSON.parse(sessionStorage.getItem('calix.deviceData')).find(obj => obj.modelName == this.rgModel);\n          let rgHostname = json.landing.rg['hostname'] ? `${json.landing.rg['hostname']}` : selctedModel.opModeWithOnt;\n          let rgModel = this.rgModel ? `${this.rgModel}` : `-`;\n          let rgManufacture = this.raManufacture ? `${this.raManufacture}` : ``;\n          let rgFreq_band = '';\n          if (json.landing.rg['radio-info']) {\n            var radioInfo = json.landing.rg['radio-info'];\n            var freqArr = [];\n            if (radioInfo.length > 0) {\n              for (let fband = 0; fband < radioInfo.length; fband++) {\n                let fbandValue = radioInfo[fband]['freq-band'] + 'GHz';\n                freqArr.push(fbandValue);\n              }\n              freq_band = freqArr.join(', ');\n            }\n            rgFreq_band = freq_band ? `${freq_band}` : `-`;\n          }\n          let totDev = '';\n          if (json.landing.rg.clients) {\n            for (let i = 0; i < json.landing.rg.clients.length; i++) {\n              if (json.landing.rg.clients[i]['client-color'] == 'red') {\n                this.isrgWithIssue = true;\n              }\n            }\n            if (this.isrgWithIssue == true) {\n              json.landing.rg['isrgWithIssue'] = true;\n            }\n            if (json.landing.rg.clients.length > 0) {\n              totDev = json.landing.rg.clients.length;\n            }\n          }\n          let rgTotDev = totDev ? totDev : 0;\n          let rgPassClients = json.landing.rg['passed-clients'] != 0 ? `${json.landing.rg['passed-clients']}` : `0`;\n          let rgFailClients = json.landing.rg['failed-clients'] != 0 ? `${json.landing.rg['failed-clients']}` : `0`;\n          let rgTechNote = json.landing.rg['rg-tech-notes'] ? `${this.issue_reason}` : `-`;\n          json.landing.rg['columnDefinitions'] = [\n          // each column definition needs to specify the column used\n          {\n            attr: \"property\",\n            text: \"\",\n            column: 0\n          }, {\n            attr: \"value\",\n            text: \"\",\n            column: 1\n          }];\n          json.landing.rg['isrgIssue'] = rgTechNote;\n          json.landing.rg['rg/ontData'] = [\n          // each row is a person with an Array of Objects associating a column name with a text value\n          {\n            columns: [{\n              attr: \"property\",\n              text: `RG - ${this.ont_serialNo}`\n            }, {\n              attr: \"value\",\n              text: ''\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Connection\n            }, {\n              attr: \"value\",\n              text: `${rgConnection}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.IP_Address\n            }, {\n              attr: \"value\",\n              text: `${rgIpAdd}`\n            }]\n          },\n          // { columns: [{ attr: \"property\", text: this.language.MAC_Address }, { attr: \"value\", text: `${rgMacAdd}` }] },\n          // { columns: [{ attr: \"property\", text: this.language.Software_Version }, { attr: \"value\", text: `${rgSwVersion}` }] },\n          // { columns: [{ attr: \"property\", text: this.language.Serial_Number }, { attr: \"value\", text: `${rgSerialNo}` }] },\n          {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Device\n            }, {\n              attr: \"value\",\n              text: `${rgHostname}`\n            }]\n          },\n          // { columns: [{ attr: \"property\", text: this.language.Model }, { attr: \"value\", text: `${rgModel}` }] },\n          {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Manufacturer\n            }, {\n              attr: \"value\",\n              text: `${rgManufacture}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Frequency_Band\n            }, {\n              attr: \"value\",\n              text: `${rgFreq_band}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Total_Clients\n            }, {\n              attr: \"value\",\n              text: `${rgTotDev}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Devices_without_issues_and_warnings\n            }, {\n              attr: \"value\",\n              text: `${rgPassClients}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Devices_with_issues_and_warnings\n            }, {\n              attr: \"value\",\n              text: `${rgFailClients}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.issue\n            }, {\n              attr: \"value\",\n              text: `${rgTechNote}`\n            }]\n          }];\n          json.landing.rg['rgData'] = [\n          // each row is a person with an Array of Objects associating a column name with a text value\n          {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Connection\n            }, {\n              attr: \"value\",\n              text: `${rgConnection}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.IP_Address\n            }, {\n              attr: \"value\",\n              text: `${rgIpAdd}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.MAC_Address\n            }, {\n              attr: \"value\",\n              text: `${rgMacAdd}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Name\n            }, {\n              attr: \"value\",\n              text: `${rgName}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Software_Version\n            }, {\n              attr: \"value\",\n              text: `${rgSwVersion}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Serial_Number\n            }, {\n              attr: \"value\",\n              text: `${rgSerialNo}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Device\n            }, {\n              attr: \"value\",\n              text: `${rgHostname}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Model\n            }, {\n              attr: \"value\",\n              text: `${rgModel}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Manufacturer\n            }, {\n              attr: \"value\",\n              text: `${rgManufacture}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Frequency_Band\n            }, {\n              attr: \"value\",\n              text: `${rgFreq_band}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Total_Clients\n            }, {\n              attr: \"value\",\n              text: `${rgTotDev}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Devices_without_issues_and_warnings\n            }, {\n              attr: \"value\",\n              text: `${rgPassClients}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Devices_with_issues_and_warnings\n            }, {\n              attr: \"value\",\n              text: `${rgFailClients}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.issue\n            }, {\n              attr: \"value\",\n              text: `${rgTechNote}`\n            }]\n          }];\n          json.landing.rg['source'] = json.landing.rg['online'] ? 'assets/images/myRouter.svg' : 'assets/images/router-critical-state.png';\n          if (json.landing.rg['rg-tech-notes'].includes('The RG is not reachable')) {\n            json.landing.rg['source'] = this.accessPointImages['red'];\n          }\n          json.landing.rg['key'] = json.landing.rg.mac;\n          this.rgKey = json.landing.rg.mac;\n          if (json.landing.rg['category'] != 'ontNode') {\n            if (json.landing.rg['rg-color'] == 'green') {\n              json.landing.rg['color'] = this.nodeColor['green'];\n            } else if (json.landing.rg['rg-color'] == 'red') {\n              json.landing.rg['color'] = this.nodeColor['red'];\n            } else if (json.landing.rg['rg-color'] == 'yellow') {\n              json.landing.rg['color'] = '#fff17a8c';\n            }\n          } else {\n            if (json.landing.rg['rg-color'] == 'green' && json.landing.ont['ont-color'] == 'green') {\n              json.landing.rg['color'] = this.nodeColor['green'];\n            } else if (json.landing.rg['rg-color'] == 'red' || json.landing.ont['ont-color'] == 'red') {\n              json.landing.rg['color'] = this.nodeColor['red'];\n            } else if (json.landing.rg['rg-color'] == 'yellow' || json.landing.ont['ont-color'] == 'yellow') {\n              json.landing.rg['color'] = '#fff17a8c';\n            }\n          }\n          if (json.landing.rg['online'] == 'false') {\n            json.landing.rg['color'] = this.nodeColor['red'];\n          }\n          json.landing.rg['width'] = 30;\n          json.landing.rg['height'] = 30;\n          json.landing.rg['model'] = this.rgModel;\n          json.landing.rg['isRg'] = true;\n          if (json.landing.rg['name']) {\n            json.landing.rg['isInternet'] = true;\n          }\n          json.landing.rg['ethernetId'] = `ethernet-${json.landing.rg.sn}`;\n          if (json.landing.rg['name']) {\n            if (json.landing.rg['hostname']) {\n              json.landing.rg['label'] = `${json.landing.rg['hostname']} \\n ${json.landing.rg['name']}`;\n            } else {\n              json.landing.rg['label'] = `${json.landing.rg['sn']} ${json.landing.rg['name']}`;\n            }\n          } else {\n            if (json.landing.rg['hostname']) {\n              json.landing.rg['label'] = `${json.landing.rg['hostname']}`;\n            } else {\n              json.landing.rg['label'] = `${json.landing.rg['sn']}`;\n            }\n          }\n          // if (!this.clientDeviceSSID) {\n          //   this.expandedNodes = [];\n          this.expandedNodes.push(uplinkData.key);\n          // }\n          let rgData = json.landing.rg.aps;\n          this.nodeDataArray.push(uplinkData);\n          this.nodeDataArray.push(ontDataArr);\n          this.nodeDataArray.push(json.landing.rg);\n          if (rgData && rgData.length > 0) {\n            yield this.populateAps(rgData, json, json.landing.rg, uplinkEthernetData);\n          }\n          this.setClientDetailsNode();\n        } else {\n          let rgData = json.landing.rg.aps;\n          uplinkData['noRg'] = true;\n          this.nodeDataArray.push(uplinkData);\n          if (rgData && rgData.length > 0) {\n            yield this.populateAps(rgData, json, uplinkData, uplinkEthernetData);\n          }\n          this.setClientDetailsNode();\n        }\n      });\n    }\n    issueDescription(code, type, name, index) {\n      let rgReason = '';\n      code = code.toUpperCase();\n      if (code == \"ATTACK_DETECTED\" || code == \"VIRUS_ATTACK\") {\n        rgReason = `${this.language['Issue_Reason1']}`;\n      } else if (code == 'CLIENT_DEVICE_LOW_SIGNAL_DETECTED') {\n        rgReason = `${this.language['Issue_Reason2']}`;\n      } else if (code == 'CLIENT_DEVICE_LOW_EFFICIENCY_SCORE_DETECTED') {\n        rgReason = `${this.language['Issue_Reason3']}`;\n      } else if (code == 'CLIENT_DEVICE_LOW_PHY_RATE_DETECTED') {\n        rgReason = `${this.language['Issue_Reason_new4']}`;\n      } else if (code == 'CLIENT_DEVICE_LEGACY_DEVICE_DETECTED') {\n        rgReason = `${this.language['Issue_Reason4']}`;\n      } else if (code == 'REBOOT_ISSUE') {\n        rgReason = `${this.language['Issue_Reason5']}`;\n      } else if (code == 'SOFTWARE_UPGRADE_FAILED') {\n        rgReason = `${this.language['Issue_Reason6']}`;\n      } else if (code == 'STALE_SOFTWARE_VERSION') {\n        rgReason = `${this.language['Issue_Reason7']}`;\n      } else if (code == 'The memory usage on the RG has crossed X threshold - discussion on if to track ') {\n        rgReason = `${this.language['Issue_Reason_DEVICE8']}`;\n      } else if (code == 'The Operation Temperature has crossed X threshold - intenral threshold') {\n        rgReason = `${this.language['Issue_Reason9']}`;\n      } else if (code == 'WAP_FAILED') {\n        rgReason = `${this.language['Issue_Reason_mapNtr10']}`;\n      } else if (code == 'GATEWAY_FAILED') {\n        rgReason = `${this.language['Issue_Reason44']}`;\n      } else if (code == \"SPEED_LOW_75_80\") {\n        rgReason = `${this.language['Issue_Reason12']}`;\n      } else if (code == \"SPEED_LOW_75\") {\n        rgReason = `${this.language['Issue_Reason13']}`;\n      } else if (code == \"TRAFFIC_HIGH\") {\n        rgReason = `${this.language['Issue_Reason14']}`;\n      } else if (code == \"LATENCY_HIGH\") {\n        rgReason = `${this.language['Issue_Reason15']}`;\n      } else if (code == 'A configured voice service has been detect as down.') {\n        rgReason = `${this.language['Issue_Reason16']}`;\n      } else if (code == 'WIFI_INTERFERENCE_HIGH_24G') {\n        rgReason = `${this.language['Issue_Reason17']}`;\n      } else if (code == 'WIFI_INTERFERENCE_HIGH_5G') {\n        rgReason = `${this.language['Issue_Reason18']}`;\n      } else if (code == 'LOW_CHANNEL_SCORE_WITH_SELFHEAL_ON_24G') {\n        rgReason = `${this.language['Issue_Reason19']}`;\n      } else if (code == 'LOW_CHANNEL_SCORE_WITH_SELFHEAL_ON_5G') {\n        rgReason = `${this.language['Issue_Reason20']}`;\n      } else if (code == 'LOW_CHANNEL_SCORE_WITH_SELFHEAL_OFF_24G') {\n        rgReason = `${this.language['Issue_Reason21']}`;\n      } else if (code == 'LOW_CHANNEL_SCORE_WITH_SELFHEAL_OFF_5G') {\n        rgReason = `${this.language['Issue_Reason22']}`;\n      } else if (code == 'MESH_DEGRADE') {\n        rgReason = `${this.language['Issue_Reason23']}`;\n      } else if (code == 'BACKHAUL_TOO_CLOSE') {\n        rgReason = `${this.language['Issue_Reason24']}`;\n      } else if (code == 'BACKHAUL_TOO_FAR') {\n        rgReason = `${this.language['Issue_Reason25']}`;\n      } else if (code == 'Utilization of Wi-Fi Airtime has crossed 50% Average for bin on radio (2.4Ghz|5Ghz)') {\n        rgReason = `${this.language['Issue_Reason26']}`;\n      } else if (code == 'Detected DFS (radar)') {\n        rgReason = `${this.language['Issue_Reason27']}`;\n      } else if (code == 'WIFI_RADIO_DISABLED') {\n        rgReason = `${this.language['Issue_Reason28']}`;\n      } else if (code == 'WIFI_RADIO_DISABLED_24G') {\n        rgReason = `${this.language['Issue_Reason29']}`;\n      } else if (code == 'WIFI_RADIO_DISABLED_5G') {\n        rgReason = `${this.language['Issue_Reason30']}`;\n      } else if (code == \"DS_SPEED_LOW_85\") {\n        rgReason = `${this.language['Issue_Reason31']}`;\n      } else if (code == \"US_SPEED_LOW_85\") {\n        rgReason = `${this.language['Issue_Reason32']}`;\n      } else if (code == \"DS_SPEED_LOW_75\") {\n        rgReason = `${this.language['Issue_Reason33']}`;\n      } else if (code == \"US_SPEED_LOW_75\") {\n        rgReason = `${this.language['Issue_Reason34']}`;\n      } else if (code == \"THERMAL_HIGH\") {\n        rgReason = `${this.language['Issue_Reason35']}`;\n      } else if (code == \"THERMAL_TOO_HIGH\") {\n        rgReason = `${this.language['Issue_Reason36']}`;\n      } else if (code == \"ONT_OFFLINE\") {\n        rgReason = `${this.language['issue_reason37']}`;\n      } else if (code == \"GC_MAX_DOWNSTREAM_ACHIEVED\") {\n        rgReason = `${this.language['issue_reason38']}`;\n      } else if (code == \"GC_MAX_UPSTREAM_ACHIEVED\") {\n        rgReason = `${this.language['issue_reason39']}`;\n      } else if (code == \"WFH_SSID_WITHOUT_CIQ\") {\n        rgReason = `${this.language['issue_reason40']}`;\n      } else if (code == 'QOS_DAMP_ALERT') {\n        rgReason = `${this.language['Issue_Reason41']}`;\n      } else if (code == 'MAP_CONNECTIVITY_FAILED') {\n        const opMode = JSON.parse(sessionStorage.getItem(`calix.deviceData`)).filter(obj => obj.serialNumber == name).map(obj => obj.opMode);\n        const lang = opMode.length && opMode[0] == 'RG' ? '11' : '10';\n        rgReason = `${this.language[`Issue_Reason${lang}`]}`;\n      } else if (code == 'UI_CREATED_ISSUE_FOR_TR069MAPDOWN') {\n        const opMode = JSON.parse(sessionStorage.getItem(`calix.deviceData`)).filter(obj => obj.serialNumber == name).map(obj => obj.opMode);\n        const lang = opMode.length && opMode[0] == 'RG' ? '11' : '10';\n        rgReason = `${this.language[`Issue_Reason_mapNtr${lang}`]}`;\n      }\n      if (type == 'rg') {\n        let issue = rgReason.slice(-1);\n        if (issue == '.') {\n          this.issue_reason += rgReason + ' ';\n        } else {\n          this.issue_reason += rgReason.substring(0, rgReason.length) + '. ';\n        }\n      } else if (type == 'aps') {\n        let issue = rgReason.slice(-1);\n        if (issue == '.') {\n          this.aps_issue += rgReason + ' ';\n        } else {\n          this.aps_issue += rgReason.substring(0, rgReason.length) + '. ';\n        }\n        if (index + 1 == this.aps_issue_length) {\n          let params = {\n            note: this.aps_issue,\n            name: name\n          };\n          JSON.stringify(this.clientArr.push(params));\n        }\n      } else if (type == 'client') {\n        let issue = rgReason.slice(-1);\n        if (issue == '.') {\n          this.client_issue += rgReason + ' ';\n        } else {\n          this.client_issue += rgReason.substring(0, rgReason.length) + '. ';\n        }\n        if (index + 1 == this.client_issue_length) {\n          let params = {\n            note: this.client_issue,\n            name: name\n          };\n          JSON.stringify(this.clientArr.push(params));\n        }\n      } else if (type == 'backhaul') {\n        let issue = rgReason.slice(-1);\n        if (issue == '.') {\n          this.backhaul_issue += rgReason + ' ';\n        } else {\n          this.backhaul_issue += rgReason.substring(0, rgReason.length) + '. ';\n        }\n        if (index + 1 == this.backhaul_issue_length) {\n          let params = {\n            note: this.backhaul_issue,\n            name: this.language.Backhaul_Issue\n          };\n          JSON.stringify(this.clientArr.push(params));\n        }\n      } else if (type == 'ont') {\n        let issue = rgReason.slice(-1);\n        if (issue == '.') {\n          this.ont_issue += rgReason + ' ';\n        } else {\n          this.ont_issue += rgReason.substring(0, rgReason.length) + '. ';\n        }\n      }\n    }\n    loadSupportTopology() {\n      if (!this.clientDeviceSSID) {\n        this.nodeDataArray.forEach(function (v) {\n          delete v['isSSIDClient'];\n        });\n      }\n      let $ = this.$;\n      var colors = {\n        blue: '#2a6dc0',\n        orange: '#ea2857',\n        green: '#1cc1bc',\n        gray: '#5b5b5b',\n        white: '#F5F5F5'\n      };\n      if (this.APTopology) {\n        this.APTopology.div = null;\n      }\n      this.APTopology = $(go.Diagram, 'mainDiagram', {\n        minScale: 0.25,\n        maxScale: 2.0,\n        initialContentAlignment: go.Spot.Top,\n        'undoManager.isEnabled': true,\n        LayoutCompleted: e => {\n          this.updateDivHeight();\n          this.enableAllCommandHandler();\n          if (this.rgArr.length > 0) {\n            this.scroll();\n          }\n        },\n        InitialLayoutCompleted: e => {\n          this.setZoomScaleToFit();\n          collapseDefault();\n          addMakeCustomExpander();\n        },\n        initialAutoScale: go.Diagram.UniformToFill,\n        layout: $(go.TreeLayout,\n        //LayeredDigraphLayout\n        {\n          // direction: 0,\n          layerSpacing: 110,\n          // columnSpacing: 33,\n          // linkSpacing: 5,\n          // isOngoing: false,\n          angle: 0\n        })\n      });\n      this.APTopology.toolManager.toolTipDuration = 60000;\n      this.APTopology.toolManager.hoverDelay = 500;\n      this.APTopology.linkSelectionAdornmentTemplate.pickable = false;\n      // function linkInfo4(d) {\n      //   // Tooltip info for a link data object\n      //   if (d.name == '') {\n      //     return '';\n      //   } else {\n      //     return `${d.name}`;\n      //   }\n      // }\n      // this.APTopology.nodeTemplate = $(\n      //   go.Node,\n      //   'Auto',\n      //   // { isTreeExpanded: false },\n      //   {\n      //     selectionAdorned: false,\n      //     click: (e, obj) => {\n      //       this.clientArr = [];\n      //       this.selectedAPValue = '';\n      //       let params: any;\n      //       if (obj.part.data['ap-tech-note'] || obj.part.data['backhaul']) {\n      //         this.selectedAPValue = obj.part.data;\n      //         if (obj.part.data['ap-tech-note']) {\n      //           params = {\n      //             note: obj.part.data['ap-tech-note'],\n      //             name: obj.part.data['sn'],\n      //           };\n      //           JSON.stringify(this.clientArr.push(params));\n      //         }\n      //         if (obj.part.data['backhaul']['backhaul-tech-note'] && obj.part.data['ap-tech-note'] != obj.part.data['backhaul']['backhaul-tech-note']) {\n      //           params = {\n      //             note: obj.part.data.backhaul['backhaul-tech-note'],\n      //             name: 'Backhaul Issue:',\n      //           };\n      //           JSON.stringify(this.clientArr.push(params));\n      //         }\n      //       } else if (obj.part.data['client-note']) {\n      //         this.selectedAPValue = obj.part.data;\n      //         params = {\n      //           note: obj.part.data['client-note'],\n      //           name: obj.part.data['hostname']\n      //             ? obj.part.data['hostname']\n      //             : obj.part.data['mac'],\n      //         };\n      //         JSON.stringify(this.clientArr.push(params));\n      //       }\n      //       // this.selectedAPValue = '';\n      //       // if (obj.part.data['ap-tech-note'] || obj.part.data['rg-tech-notes']) {\n      //       //   this.apInformtion = obj.part.data['ap-tech-note'];\n      //       //   if (obj.part.data['failed-clients'] != 0) {\n      //       //     this.selectedAPValue = obj.part.data;\n      //       //   }\n      //       //   if (obj.part.data.clients && obj.part.data.clients.length > 0) {\n      //       //     for (let i = 0; i < obj.part.data.clients.length; i++) {\n      //       //       let name = '';\n      //       //       if (this.resValue.landing.rg.hostname) {\n      //       //         name = this.resValue.landing.rg.hostname;\n      //       //       } else {\n      //       //         name = this.resValue.landing.rg.mac;\n      //       //       }\n      //       //       if (i == 0 && obj.part.data['rg-color'] == 'red') {\n      //       //         let params = {\n      //       //           note: obj.part.data['rg-tech-notes'],\n      //       //           name: name,\n      //       //         };\n      //       //         JSON.stringify(this.clientArr.push(params));\n      //       //       }\n      //       //       if (\n      //       //         obj.part.data.clients[i]['legacy-device-test-result'] !=\n      //       //           'PASS' ||\n      //       //         obj.part.data.clients[i]['signal-strength-test-result'] !=\n      //       //           'PASS' ||\n      //       //         obj.part.data.clients[i]['phy-rate-test-result'] != 'PASS'\n      //       //       ) {\n      //       //         let hostname = '';\n      //       //         if (obj.part.data.clients[i]['hostname']) {\n      //       //           hostname = obj.part.data.clients[i]['hostname'];\n      //       //         } else {\n      //       //           hostname = obj.part.data.clients[i]['mac'];\n      //       //         }\n      //       //         let params = {\n      //       //           note: obj.part.data.clients[i]['client-note'],\n      //       //           name: hostname,\n      //       //         };\n      //       //         JSON.stringify(this.clientArr.push(params));\n      //       //       }\n      //       //     }\n      //       //   } else if (!obj.part.data['rg-tech-notes']) {\n      //       //     this.selectedAPValue = obj.part.data;\n      //       //     let hostname = '';\n      //       //     if (obj.part.data['hostname']) {\n      //       //       hostname = obj.part.data['hostname'];\n      //       //     } else {\n      //       //       hostname = obj.part.data['sn'];\n      //       //     }\n      //       //     let params = {\n      //       //       note: obj.part.data['ap-tech-note'],\n      //       //       name: hostname,\n      //       //     };\n      //       //     JSON.stringify(this.clientArr.push(params));\n      //       //   }\n      //       // } else {\n      //       //   this.apInformtion = obj.part.data['rg-tech-notes'];\n      //       // }\n      //       if (this.clientArr.length > 0) {\n      //         this.scroll();\n      //       }\n      //     },\n      //     mouseHover: function (e, obj) {\n      //       let node = obj.part;\n      //       if (node.data.key === 'internet') {\n      //         return;\n      //       }\n      //       if (node.data.key === 'ethernet') {\n      //         return;\n      //       }\n      //     },\n      //   },\n      //   // new go.Binding('visible'),\n      //   $(\n      //     go.Shape,\n      //     {\n      //       // background : 'red',\n      //       width: 210,\n      //       height: 120,\n      //       fill: 'white',\n      //     },\n      //     new go.Binding('strokeWidth', 'isHighlighted', function (h) {\n      //       return h ? 2 : 0;\n      //     }).ofObject(),\n      //     new go.Binding('stroke', 'isHighlighted', function (h) {\n      //       return h ? 'gold' : 'white';\n      //     }).ofObject()\n      //   ),\n      //   $(\n      //     go.Shape,\n      //     new go.Binding('cursor', 'label', function (l) {\n      //       return l ? 'pointer' : '';\n      //     }),\n      //     {\n      //       width: 210,\n      //       height: 40,\n      //       strokeWidth: 0,\n      //       toolTip: $(\n      //         'ToolTip',\n      //         {\n      //           alignment: go.Spot.Left,\n      //           'Border.stroke': colors['blue'],\n      //           'Border.strokeWidth': 1,\n      //           visible: false,\n      //         },\n      //         new go.Binding('visible', 'tooltip', function (text) {\n      //           return text != '';\n      //         }),\n      //         $(\n      //           go.TextBlock,\n      //           {\n      //             maxSize: new go.Size(500, NaN),\n      //             minSize: new go.Size(250, NaN),\n      //             text: \"textAlign: 'left'\",\n      //             isMultiline: true,\n      //           },\n      //           { font: 'bold 12px sans-serif' },\n      //           new go.Binding('text', 'tooltip')\n      //         )\n      //       ),\n      //     },\n      //     new go.Binding('fill', '', function (node) {\n      //       return node.color || 'white';\n      //     })\n      //   ),\n      //   $(\n      //     go.Panel,\n      //     'Auto',\n      //     new go.Binding('cursor', 'label', function (l) {\n      //       return l ? 'pointer' : '';\n      //     }),\n      //     {\n      //       width: 220,\n      //       height: 120,\n      //     },\n      //     $(\n      //       go.Panel,\n      //       'Spot',\n      //       {\n      //         visible: false,\n      //       },\n      //       $(\n      //         go.Picture,\n      //         {\n      //           // background : 'blue',\n      //           desiredSize: new go.Size(25, 20),\n      //           alignment: go.Spot.TopLeft,\n      //           visible: false,\n      //           margin: new go.Margin(25, 0, 0, 10),\n      //           toolTip: $(\n      //             'ToolTip',\n      //             {\n      //               visible: false,\n      //               'Border.stroke': colors['blue'],\n      //               'Border.strokeWidth': 1,\n      //             },\n      //             new go.Binding('visible', 'ap-online', function (data) {\n      //               return data == 'true'\n      //             }),\n      //             new go.Binding('visible', 'int-type', function (data) {\n      //               return data != 'LAN'\n      //             }),\n      //             // new go.Binding('visible', '', function (data) {\n      //             //   return (\n      //             //     data.wirelessIcon &&\n      //             //     data.wirelessIcon != '' &&\n      //             //     data['ap-online'] == 'true'\n      //             //   );\n      //             // }),\n      //             $(\n      //               go.TextBlock,\n      //               { margin: 4, font: 'bold 12px sans-serif', visible: false },\n      //               new go.Binding('text', 'ap_rssi_tooltip'),\n      //               new go.Binding('visible', 'ap-online', function (data) {\n      //                 return data == 'true'\n      //               }),\n      //               new go.Binding('visible', 'int-type', function (data) {\n      //                 return data != 'LAN'\n      //               }),\n      //               // new go.Binding('visible', '', function (data) {\n      //               //   return (\n      //               //     data.wirelessIcon &&\n      //               //     data.wirelessIcon != '' &&\n      //               //     data['ap-online'] == 'true'\n      //               //   );\n      //               // })\n      //             ),\n      //           ),\n      //         },\n      //         new go.Binding('source', 'wirelessIcon', function (image) {\n      //           return image ? image : '';\n      //         }),\n      //         new go.Binding('width', 'width', function (data) {\n      //           return data - 5;\n      //         }),\n      //         new go.Binding('height', 'height', function (data) {\n      //           return data - 10;\n      //         }),\n      //         new go.Binding('visible', 'ap-online', function (data) {\n      //           return data == 'true'\n      //         }),\n      //         new go.Binding('visible', 'int-type', function (data) {\n      //           return data != 'LAN'\n      //         }),\n      //         // new go.Binding('visible', '', function (data) {\n      //         //   return (\n      //         //     data.wirelessIcon &&\n      //         //     data.wirelessIcon != '' &&\n      //         //     data['ap-online'] == 'true'\n      //         //   );\n      //         // })\n      //       ),\n      //       // new go.Binding('visible', '', function (data) {\n      //       //   return (\n      //       //     data.wirelessIcon &&\n      //       //     data.wirelessIcon != '' &&\n      //       //     data['ap-online'] == 'true'\n      //       //   );\n      //       // })\n      //       new go.Binding('visible', 'ap-online', function (data) {\n      //         return data == 'true'\n      //       }),\n      //       new go.Binding('visible', 'int-type', function (data) {\n      //         return data != 'LAN'\n      //       }),\n      //     ),\n      //     $(\n      //       go.Panel,\n      //       'Spot',\n      //       {\n      //         visible: false,\n      //         alignment: go.Spot.TopLeft,\n      //       },\n      //       new go.Binding('visible', 'freqBand', function (freqBand) {\n      //         return freqBand != '';\n      //       }),\n      //       $(\n      //         go.TextBlock,\n      //         { margin: new go.Margin(25, 0, 0, 10) },\n      //         new go.Binding('text', 'freqBand')\n      //       )\n      //     ),\n      //     $(\n      //       go.Panel,\n      //       'Horizontal', // the row of status indicators\n      //       $(\n      //         go.Panel,\n      //         'Horizontal',\n      //         { height: 35, width: 60 },\n      //         $(\n      //           go.Picture,\n      //           { margin: new go.Margin(0, 0, 0, 25) },\n      //           new go.Binding('source', 'source', function (image) {\n      //             return image ? image : '';\n      //           }),\n      //           new go.Binding('element', 'source-video', function (video) {\n      //             return video ? video : '';\n      //           }),\n      //           new go.Binding('width', 'width'),\n      //           new go.Binding('height', 'height')\n      //         )\n      //       ),\n      //       $(\n      //         go.Panel,\n      //         'Horizontal',\n      //         { height: 40, width: 160 },\n      //         $(\n      //           go.TextBlock,\n      //           {\n      //             margin: new go.Margin(0, 0, 0, 10),\n      //             width: 120,\n      //             overflow: go.TextBlock.OverflowEllipsis,\n      //             // isMultiline : false,\n      //             // maxLines: 1,\n      //             // maxSize: new go.Size(200, 60),\n      //           },\n      //           new go.Binding('text', 'label', function (l) {\n      //             return l ? l : '';\n      //           }),\n      //           new go.Binding('maxLines', '', function (l) {\n      //             return l['isInternet'] ? 2 : 1;\n      //           })\n      //         )\n      //       ),\n      //       {\n      //         toolTip: $(\n      //           'ToolTip',\n      //           {\n      //             alignment: go.Spot.Left,\n      //             'Border.stroke': colors['blue'],\n      //             'Border.strokeWidth': 1,\n      //             visible: false,\n      //           },\n      //           new go.Binding('visible', 'tooltip', function (text) {\n      //             return text != '';\n      //           }),\n      //           $(\n      //             go.TextBlock,\n      //             {\n      //               maxSize: new go.Size(500, NaN),\n      //               minSize: new go.Size(250, NaN),\n      //               text: \"textAlign: 'left'\",\n      //               isMultiline: true,\n      //             },\n      //             { font: 'bold 12px sans-serif' },\n      //             new go.Binding('text', 'tooltip')\n      //           )\n      //         ),\n      //       }\n      //     ),\n      //     //Passed Clients\n      //     $(\n      //       go.Panel,\n      //       'Auto',\n      //       {\n      //         click: function (e, obj) {\n      //           var node = obj.part; // get the Node containing this Button\n      //           if (node === null) return;\n      //           e.handled = true;\n      //           that.clientDeviceSSID\n      //             ? expandSSIDNode(node, true, 'isPassedClient')\n      //             : expandNode(node, true, 'isPassedClient');\n      //         },\n      //       },\n      //       new go.Binding('margin', 'label', function (l) {\n      //         return l ? new go.Margin(-55, 0, 0, 50) : '';\n      //       }),\n      //       new go.Binding('cursor', 'label', function (l) {\n      //         return l ? 'pointer' : '';\n      //       }),\n      //       // decorations:\n      //       $(\n      //         go.Shape,\n      //         'Circle',\n      //         {\n      //           width: 24,\n      //           height: 24,\n      //           // fill: 'white',\n      //           stroke: 'green',\n      //           strokeWidth: 2,\n      //           margin: 5,\n      //           visible: false,\n      //         },\n      //         new go.Binding('fill', '_othersPassedExpanded', function (node) {\n      //           return node ? 'green' : 'white';\n      //         }),\n      //         new go.Binding('visible', 'passed-clients', function (l) {\n      //           return l ? l : false;\n      //         })\n      //       ),\n      //       $(\n      //         go.TextBlock,\n      //         {\n      //           margin: 5,\n      //         },\n      //         new go.Binding('stroke', '', function (node) {\n      //           return node._othersPassedExpanded ? 'white' : 'black';\n      //         }),\n      //         new go.Binding('text', 'passed-clients', function (l) {\n      //           return l ? l : '';\n      //         })\n      //       )\n      //     ),\n      //     //Failed Clients\n      //     $(\n      //       go.Panel,\n      //       'Auto',\n      //       {\n      //         click: function (e, obj) {\n      //           var node = obj.part; // get the Node containing this Button\n      //           if (node === null) return;\n      //           e.handled = true;\n      //           that.clientDeviceSSID\n      //             ? expandSSIDNode(node, true, 'isFailedClient')\n      //             : expandNode(node, true, 'isFailedClient');\n      //         },\n      //       },\n      //       new go.Binding('margin', 'label', function (l) {\n      //         return l ? new go.Margin(-45, 0, 0, 90) : '';\n      //       }),\n      //       new go.Binding('cursor', 'label', function (l) {\n      //         return l ? 'pointer' : '';\n      //       }),\n      //       // decorations:\n      //       $(\n      //         go.Shape,\n      //         'Circle',\n      //         {\n      //           width: 24,\n      //           height: 24,\n      //           // fill: 'white',\n      //           stroke: 'orange',\n      //           strokeWidth: 2,\n      //           margin: 5,\n      //           visible: false,\n      //         },\n      //         new go.Binding('fill', '_othersFailedExpanded', function (node) {\n      //           return node ? 'orange' : 'white';\n      //         }),\n      //         new go.Binding('visible', 'failed-clients', function (l) {\n      //           return l ? l : false;\n      //         })\n      //       ),\n      //       $(\n      //         go.TextBlock,\n      //         {\n      //           margin: 5,\n      //         },\n      //         new go.Binding('stroke', '', function (node) {\n      //           return node._othersFailedExpanded ? 'white' : 'black';\n      //         }),\n      //         new go.Binding('text', 'failed-clients', function (l) {\n      //           return l ? l : '';\n      //         })\n      //       )\n      //     ),\n      //     $(\n      //       go.Panel,\n      //       'Auto',\n      //       {\n      //         margin: new go.Margin(0, 0, 0, 175),\n      //       },\n      //       makeCustomExpander(false)\n      //     )\n      //   )\n      //   // new go.Binding('visible', 'isClient', function (o) {\n      //   //   return !o;\n      //   // })\n      // );\n      var ontNode = $(go.Node, 'Auto', {\n        selectionAdorned: false,\n        click: (e, obj) => {\n          var _a, _b, _c;\n          this.clientArr = [];\n          this.selectedAPValue = '';\n          let params;\n          if (obj.part.data['ap-tech-note'] || obj.part.data['backhaul']) {\n            this.selectedAPValue = obj.part.data;\n            if (obj.part.data['ap-tech-note']) {\n              params = {\n                note: obj.part.data['ap-tech-note'],\n                name: obj.part.data['sn']\n              };\n              JSON.stringify(this.clientArr.push(params));\n            }\n            if (((_a = obj.part.data['backhaul']) === null || _a === void 0 ? void 0 : _a['backhaul-tech-note']) && obj.part.data['ap-tech-note'] != ((_b = obj.part.data['backhaul']) === null || _b === void 0 ? void 0 : _b['backhaul-tech-note'])) {\n              params = {\n                note: (_c = obj.part.data.backhaul) === null || _c === void 0 ? void 0 : _c['backhaul-tech-note'],\n                name: `${this.language.Backhaul_Issue}:`\n              };\n              JSON.stringify(this.clientArr.push(params));\n            }\n          } else if (obj.part.data['client-note']) {\n            this.selectedAPValue = obj.part.data;\n            params = {\n              note: obj.part.data['client-note'],\n              name: obj.part.data['hostname'] ? obj.part.data['hostname'] : obj.part.data['mac']\n            };\n            JSON.stringify(this.clientArr.push(params));\n          }\n          if (this.clientArr.length > 0) {\n            this.scroll();\n          }\n        },\n        mouseHover: function (e, obj) {\n          let node = obj.part;\n          if (node.data.key === 'internet') {\n            return;\n          }\n          if (node.data.key === 'ethernet') {\n            return;\n          }\n        }\n      }, $(go.Shape, {\n        width: 210,\n        height: 150,\n        fill: 'white'\n      }, new go.Binding('strokeWidth', 'isHighlighted', function (h) {\n        return h ? 2 : 0;\n      }).ofObject(), new go.Binding('stroke', 'isHighlighted', function (h) {\n        return h ? 'gold' : 'white';\n      }).ofObject()), $(go.Shape, \"RoundedRectangle\", new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }), {\n        width: 210,\n        height: 80,\n        strokeWidth: 0,\n        parameter1: 25\n      }, new go.Binding('fill', '', function (node) {\n        return node.color || 'white';\n      })),\n      // $(\n      //   go.Panel,\n      //   'Auto',\n      //   new go.Binding('cursor', 'label', function (l) {\n      //     return l ? 'pointer' : '';\n      //   }),\n      //   {\n      //     width: 210,\n      //     height: 78,\n      //     background : 'blue'\n      //   },\n      $(go.Panel, 'Vertical',\n      // the row of status indicators\n      new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }), {\n        width: 210,\n        height: 80\n      }, $(go.Panel, 'Auto', {\n        margin: new go.Margin(0, 0, 0, 15),\n        toolTip: $(go.Adornment, \"Auto\", {\n          visible: false,\n          isShadowed: true,\n          shadowColor: \"rgba(128, 128, 128, 0.25)\",\n          shadowOffset: new go.Point(4, 4)\n        }, new go.Binding('visible', 'ontData', function (text) {\n          return text.length > 0;\n        }), $(go.Shape, \"RoundedRectangle\", {\n          fill: 'white',\n          parameter1: 10,\n          strokeWidth: 1,\n          stroke: 'lightgray',\n          width: 900\n        }), $(go.Panel, \"Table\", {\n          padding: 10,\n          alignment: go.Spot.TopLeft\n        }, new go.Binding(\"itemArray\", \"ont/rgData\"), $(go.RowColumnDefinition, {\n          column: 0\n        }), {\n          name: \"TABLE\",\n          defaultAlignment: go.Spot.Left,\n          itemTemplate: $(go.Panel, \"TableRow\", new go.Binding(\"itemArray\", \"columns\"), {\n            itemTemplate: $(go.Panel, {\n              margin: new go.Margin(3, 0, 3, 0),\n              stretch: go.GraphObject.Fill,\n              alignment: go.Spot.TopLeft\n            }, new go.Binding(\"column\", \"attr\", function (a, elt) {\n              var cd = findColumnDefinitionForName(elt.part.data, a);\n              if (cd !== null) return cd.column;\n              throw new Error(\"unknown column name: \" + a);\n            }), $(go.TextBlock, {\n              maxSize: new go.Size(230, NaN),\n              minSize: new go.Size(200, NaN),\n              isMultiline: true,\n              // font: \"normal 15px Source Sans Pro\",\n              spacingAbove: 5\n            }, new go.Binding(\"text\"), new go.Binding('font', '', function (text) {\n              return text.text.includes(`ONT -`) ? \"bold 16px Source Sans Pro\" : \"normal 15px Source Sans Pro\";\n            })))\n          })\n        }), $(go.Panel, \"Table\", {\n          padding: 10,\n          alignment: go.Spot.TopRight\n        }, new go.Binding(\"itemArray\", \"rg/ontData\"), $(go.RowColumnDefinition, {\n          column: 0,\n          width: 200\n        }), {\n          name: \"TABLE\",\n          defaultAlignment: go.Spot.Right,\n          itemTemplate: $(go.Panel, \"TableRow\", new go.Binding(\"itemArray\", \"columns\"), {\n            itemTemplate: $(go.Panel, {\n              margin: new go.Margin(3, 0, 3, 0),\n              stretch: go.GraphObject.Fill,\n              alignment: go.Spot.TopLeft\n            }, new go.Binding(\"column\", \"attr\", function (a, elt) {\n              var cd = findColumnDefinitionForName(elt.part.data, a);\n              if (cd !== null) return cd.column;\n              throw new Error(\"unknown column name: \" + a);\n            }), $(go.TextBlock, {\n              maxSize: new go.Size(230, NaN),\n              minSize: new go.Size(200, NaN),\n              isMultiline: true,\n              // font: \"normal 15px Source Sans Pro\",\n              spacingAbove: 5\n            }, new go.Binding(\"text\"), new go.Binding('font', '', function (text) {\n              return text.text.includes(`RG -`) ? \"bold 16px Source Sans Pro\" : \"normal 15px Source Sans Pro\";\n            })))\n          })\n        }))\n      }, $(go.Shape, \"RoundedRectangle\", {\n        parameter1: 10,\n        width: 210,\n        height: 40,\n        strokeWidth: 0,\n        fill: \"transparent\"\n      }), $(go.Panel, 'Horizontal', {\n        width: 210,\n        height: 40\n      }, $(go.Panel, 'Auto', {\n        height: 40,\n        width: 60\n      }, $(go.Picture, {\n        width: 13,\n        height: 30,\n        margin: new go.Margin(5, 0, 0, 25)\n      }, new go.Binding('source', 'ontSourceIcon', function (image) {\n        return image ? image : '';\n      }))), $(go.Panel, 'Auto', {\n        height: 40,\n        width: 160\n      }, $(go.TextBlock, {\n        margin: new go.Margin(13, 0, 0, 0),\n        width: 120,\n        overflow: go.TextBlock.OverflowEllipsis\n      }, new go.Binding('text', 'ontSN', function (l) {\n        return l ? l : '';\n      }), new go.Binding('maxLines', '', function (l) {\n        return l['isInternet'] ? 2 : 1;\n      }))))), $(go.Panel, 'Auto', {\n        margin: new go.Margin(0, 0, 0, 15),\n        toolTip: $(go.Adornment, \"Auto\", {\n          visible: false,\n          isShadowed: true,\n          shadowColor: \"rgba(128, 128, 128, 0.25)\",\n          shadowOffset: new go.Point(4, 4)\n        }, new go.Binding('visible', 'rgData', function (text) {\n          return text.length > 0;\n        }), $(go.Shape, \"RoundedRectangle\", {\n          fill: 'white',\n          parameter1: 10,\n          strokeWidth: 1,\n          stroke: 'lightgray',\n          width: 900\n        }), $(go.Panel, \"Table\", {\n          padding: 10,\n          alignment: go.Spot.TopLeft\n        }, new go.Binding(\"itemArray\", \"ont/rgData\"), $(go.RowColumnDefinition, {\n          column: 0,\n          width: 200\n        }), {\n          name: \"TABLE\",\n          defaultAlignment: go.Spot.Left,\n          itemTemplate:\n          // bound to a person/row data object\n          $(go.Panel, \"TableRow\",\n          // {width: 20},\n          new go.Binding(\"itemArray\", \"columns\"), {\n            itemTemplate:\n            // bound to a cell object\n            $(go.Panel,\n            // each of which as \"attr\" and \"text\" properties\n            {\n              margin: new go.Margin(3, 0, 3, 0),\n              stretch: go.GraphObject.Fill,\n              alignment: go.Spot.TopLeft\n            }, new go.Binding(\"column\", \"attr\", function (a, elt) {\n              var cd = findColumnDefinitionForName(elt.part.data, a);\n              if (cd !== null) return cd.column;\n              throw new Error(\"unknown column name: \" + a);\n            }), $(go.TextBlock, {\n              maxSize: new go.Size(230, NaN),\n              minSize: new go.Size(200, NaN),\n              isMultiline: true,\n              // font: \"normal 15px Source Sans Pro\",\n              spacingAbove: 5\n            }, new go.Binding(\"text\"), new go.Binding('font', '', function (text) {\n              return text.text.includes(`ONT -`) ? \"bold 16px Source Sans Pro\" : \"normal 15px Source Sans Pro\";\n            })))\n          })\n        }), $(go.Panel, \"Table\", {\n          padding: 10,\n          alignment: go.Spot.TopRight\n        }, new go.Binding(\"itemArray\", \"rg/ontData\"), $(go.RowColumnDefinition, {\n          column: 0,\n          width: 200\n        }), {\n          name: \"TABLE\",\n          defaultAlignment: go.Spot.Left,\n          itemTemplate:\n          // bound to a person/row data object\n          $(go.Panel, \"TableRow\",\n          // {width: 20},\n          new go.Binding(\"itemArray\", \"columns\"), {\n            itemTemplate:\n            // bound to a cell object\n            $(go.Panel,\n            // each of which as \"attr\" and \"text\" properties\n            {\n              margin: new go.Margin(3, 0, 3, 0),\n              stretch: go.GraphObject.Fill,\n              alignment: go.Spot.TopLeft\n            }, new go.Binding(\"column\", \"attr\", function (a, elt) {\n              var cd = findColumnDefinitionForName(elt.part.data, a);\n              if (cd !== null) return cd.column;\n              throw new Error(\"unknown column name: \" + a);\n            }), $(go.TextBlock, {\n              maxSize: new go.Size(230, NaN),\n              minSize: new go.Size(200, NaN),\n              isMultiline: true,\n              // font: \"normal 15px Source Sans Pro\",\n              spacingAbove: 5\n            }, new go.Binding(\"text\"), new go.Binding('font', '', function (text) {\n              return text.text.includes(`RG -`) ? \"bold 16px Source Sans Pro\" : \"normal 15px Source Sans Pro\";\n            })))\n          })\n        }))\n      }, $(go.Shape, \"RoundedRectangle\", {\n        parameter1: 10,\n        width: 210,\n        height: 40,\n        strokeWidth: 0,\n        fill: \"transparent\"\n      }), $(go.Panel, 'Horizontal', {\n        width: 210,\n        height: 40\n      }, $(go.Panel, 'Auto', {\n        height: 40,\n        width: 60\n      }, $(go.Picture, {\n        margin: new go.Margin(6, 0, 0, 18),\n        height: 28\n      }, new go.Binding('source', 'source', function (image) {\n        return image ? image : '';\n      }), new go.Binding('element', 'source-video', function (video) {\n        return video ? video : '';\n      }), new go.Binding('width', 'width'))), $(go.Panel, 'Auto', {\n        height: 40,\n        width: 160\n      }, $(go.TextBlock, {\n        margin: new go.Margin(10, 0, 0, 0),\n        width: 120,\n        overflow: go.TextBlock.OverflowEllipsis\n      }, new go.Binding('text', 'label', function (l) {\n        return l ? l : '';\n      }), new go.Binding('maxLines', '', function (l) {\n        return l['isInternet'] ? 2 : 1;\n      })))))),\n      //Passed Clients\n      $(go.Panel, 'Auto', {\n        click: function (e, obj) {\n          var node = obj.part; // get the Node containing this Button\n          if (node === null) return;\n          e.handled = true;\n          that.clientDeviceSSID ? expandSSIDNode(node, true, 'isPassedClient') : expandNode(node, true, 'isPassedClient');\n        }\n      }, new go.Binding('margin', 'label', function (l) {\n        return l ? new go.Margin(-70, 0, 0, 50) : '';\n      }), new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }),\n      // decorations:\n      $(go.Shape, 'Circle', {\n        width: 24,\n        height: 24,\n        // fill: 'white',\n        stroke: 'green',\n        strokeWidth: 2,\n        margin: 5,\n        visible: false\n      }, new go.Binding('fill', '_othersPassedExpanded', function (node) {\n        return node ? 'green' : 'white';\n      }), new go.Binding('visible', 'passed-clients', function (l) {\n        return l ? l : false;\n      })), $(go.TextBlock, {\n        margin: 5\n      }, new go.Binding('stroke', '', function (node) {\n        return node._othersPassedExpanded ? 'white' : 'black';\n      }), new go.Binding('text', 'passed-clients', function (l) {\n        return l ? l : '';\n      }))),\n      //Failed Clients\n      $(go.Panel, 'Auto', {\n        click: function (e, obj) {\n          var node = obj.part; // get the Node containing this Button\n          if (node === null) return;\n          e.handled = true;\n          that.clientDeviceSSID ? expandSSIDNode(node, true, 'isFailedClient') : expandNode(node, true, 'isFailedClient');\n        }\n      }, new go.Binding('margin', 'label', function (l) {\n        return l ? new go.Margin(-60, 0, 0, 90) : '';\n      }), new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }),\n      // decorations:\n      $(go.Shape, 'Circle', {\n        width: 24,\n        height: 24,\n        // fill: 'white',\n        // stroke: 'orange',\n        strokeWidth: 2,\n        margin: 5,\n        visible: false\n      }, new go.Binding('fill', '', function (node) {\n        return node._othersFailedExpanded && (node.isrgWithIssue || node.isapWithIssue) ? 'red' : node._othersFailedExpanded && (!node.isrgWithIssue || !node.isapWithIssue) ? 'orange' : 'white';\n      }), new go.Binding('visible', 'failed-clients', function (l) {\n        return l ? l : false;\n      }), new go.Binding('stroke', '', function (node) {\n        return node.isrgWithIssue || node.isapWithIssue ? 'red' : 'orange';\n      })), $(go.TextBlock, {\n        margin: 5\n      }, new go.Binding('stroke', '', function (node) {\n        return node._othersFailedExpanded ? 'white' : 'black';\n      }), new go.Binding('text', 'failed-clients', function (l) {\n        return l ? l : '';\n      }))), $(go.Panel, 'Auto', {\n        margin: new go.Margin(0, 0, 0, 175)\n      }, makeCustomExpander(false)));\n      function findColumnDefinitionForName(nodedata, attrname) {\n        var columns = nodedata.columnDefinitions;\n        for (var i = 0; i < columns.length; i++) {\n          if (columns[i].attr === attrname) return columns[i];\n        }\n        return null;\n      }\n      var templmap = new go.Map();\n      templmap.add('ontNode', ontNode);\n      // templmap.add('Main', mainNode);\n      this.APTopology.nodeTemplateMap = templmap;\n      var otherNode = $(go.Node, 'Auto',\n      // { isTreeExpanded: false },\n      {\n        selectionAdorned: false,\n        click: (e, obj) => {\n          var _a, _b, _c, _d;\n          this.clientArr = [];\n          this.selectedAPValue = '';\n          let params;\n          if (obj.part.data['ap-tech-note'] || obj.part.data['backhaul']) {\n            this.selectedAPValue = obj.part.data;\n            if (obj.part.data['ap-tech-note']) {\n              this.isAPSNodeClicked = true;\n              this.isClientNodeClicked = false;\n              let apIssue = obj.part.data['ap-issue-list'],\n                mapTrSerial = [];\n              ;\n              const wapFailed = apIssue.filter(obj => [\"GATEWAY_FAILED\", \"WAP_FAILED\"].includes(obj === null || obj === void 0 ? void 0 : obj.code)).map(obj => obj.serialNumber);\n              apIssue = apIssue.filter((obj, i) => {\n                if (!(wapFailed.includes(obj === null || obj === void 0 ? void 0 : obj.serialNumber) && (obj === null || obj === void 0 ? void 0 : obj.code) == \"MAP_CONNECTIVITY_FAILED\")) {\n                  return obj;\n                } else {\n                  mapTrSerial.push(obj === null || obj === void 0 ? void 0 : obj.serialNumber);\n                }\n              });\n              for (let i = apIssue.length - 1; i >= 0; i--) {\n                if (mapTrSerial.includes(apIssue[i][\"serialNumber\"]) && [\"GATEWAY_FAILED\", \"WAP_FAILED\"].includes(apIssue[i][\"code\"])) {\n                  apIssue.push({\n                    \"code\": \"UI_CREATED_ISSUE_FOR_TR069MAPDOWN\",\n                    \"subscriberId\": \"\",\n                    \"serialNumber\": apIssue[i][\"serialNumber\"],\n                    \"source\": apIssue[i][\"serialNumber\"],\n                    \"sourceId\": apIssue[i][\"serialNumber\"],\n                    \"type\": \"ROUTER\",\n                    \"severity\": 0,\n                    \"reason\": \"High Operating Temperature Observed\",\n                    \"isValid\": true\n                  });\n                  apIssue.splice(i, 1);\n                }\n              }\n              this.issueData = apIssue.filter(obj => {\n                var _a, _b;\n                return this.issueCode.indexOf(obj.hasOwnProperty('code') ? (_a = obj.code) === null || _a === void 0 ? void 0 : _a.toUpperCase() : (_b = obj.Code) === null || _b === void 0 ? void 0 : _b.toUpperCase()) > -1;\n              });\n              this.issueData = this.issueData.sort((a, b) => a.severity < b.severity ? -1 : a.severity > b.severity ? 1 : 0);\n              this.issueList = this.issueData;\n              this.totalissues = this.issueList.length;\n              this.initalize();\n              if (apIssue.length > 0) {\n                this.rgflag = true;\n                this.aps_issue = '';\n                this.aps_issue_length = apIssue.length;\n                this.clickedAPS = obj.part.data;\n                for (let apiss = 0; apiss < apIssue.length; apiss++) {\n                  this.issueDescription(apIssue[apiss].code, 'aps', obj.part.data['sn'], apiss);\n                  this.issueCode = apIssue[apiss].code;\n                  this.serialNumber = apIssue[apiss].serialNumber;\n                  this.issueType = 'aps';\n                  this.issueName = obj.part.data['sn'];\n                }\n                // params = {\n                //   note: this.aps_issue,\n                //   name: obj.part.data['sn'],\n                // };\n                // JSON.stringify(this.clientArr.push(params));\n              }\n            }\n\n            if (((_a = obj.part.data['backhaul']) === null || _a === void 0 ? void 0 : _a['backhaul-tech-note']) && obj.part.data['ap-tech-note'] != ((_b = obj.part.data['backhaul']) === null || _b === void 0 ? void 0 : _b['backhaul-tech-note'])) {\n              let bhIssueList = (_c = obj.part.data['backhaul']) === null || _c === void 0 ? void 0 : _c['backhaul-issue-list'];\n              this.isBHNodeClicked = true;\n              this.isClientNodeClicked = false;\n              this.backhaul_issue = '';\n              let name = `${this.language.Backhaul_Issue}:`;\n              this.backhaul_issue_length = bhIssueList.length;\n              this.clickedBackhaul = (_d = obj.part.data['backhaul']) === null || _d === void 0 ? void 0 : _d['backhaul-issue-list'];\n              for (let bhiss = 0; bhiss < bhIssueList.length; bhiss++) {\n                this.issueDescription(bhIssueList[bhiss].code, 'backhaul', name, bhiss);\n                this.bhissueCode = bhIssueList[bhiss].code;\n                this.bhissueType = 'backhaul';\n                this.bhissueName = `${this.language.Backhaul_Issue}:`;\n              }\n              // params = {\n              //   note: obj.part.data.backhaul['backhaul-tech-note'],\n              //   name: 'Backhaul Issue:',\n              // };\n              // JSON.stringify(this.clientArr.push(params));\n            }\n          } else if (obj.part.data['client-note']) {\n            this.isAPSNodeClicked = false;\n            this.isBHNodeClicked = false;\n            this.isClientNodeClicked = true;\n            this.selectedAPValue = obj.part.data;\n            let clientIssue = obj.part.data['client-issue-list'];\n            if (clientIssue.length > 0) {\n              this.rgflag = true;\n              this.client_issue = '';\n              this.client_issue_length = clientIssue.length;\n              this.clickedClient = obj.part.data;\n              let clientSN = obj.part.data['hostname'] ? obj.part.data['hostname'] : obj.part.data['mac'];\n              for (let clientiss = 0; clientiss < clientIssue.length; clientiss++) {\n                this.issueDescription(clientIssue[clientiss].code, 'client', clientSN, clientiss);\n                this.issueCode = clientIssue[clientiss].code;\n                this.issueType = 'client';\n                this.issueName = clientSN;\n              }\n              // params = {\n              //   note: this.client_issue,\n              //   name: obj.part.data['hostname']\n              // ? obj.part.data['hostname']\n              // : obj.part.data['mac'],\n              // };\n              // JSON.stringify(this.clientArr.push(params));\n            }\n          }\n\n          if (this.clientArr.length > 0) {\n            this.scroll();\n          }\n        },\n        mouseHover: function (e, obj) {\n          let node = obj.part;\n          if (node.data.key === 'internet') {\n            return;\n          }\n          if (node.data.key === 'ethernet') {\n            return;\n          }\n        }\n      }, $(go.Shape, {\n        width: 210,\n        height: 120,\n        fill: 'white'\n      }, new go.Binding('strokeWidth', 'isHighlighted', function (h) {\n        return h ? 2 : 0;\n      }).ofObject(), new go.Binding('stroke', 'isHighlighted', function (h) {\n        return h ? 'gold' : 'white';\n      }).ofObject()), $(go.Shape, \"Badge\", {\n        visible: false\n      }, new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }), new go.Binding('visible', '', function (data) {\n        if (data['isConnectivityNode'] || data['isInternet']) {\n          return true;\n        } else {\n          return false;\n        }\n      }), {\n        width: 210,\n        height: 40,\n        strokeWidth: 0,\n        toolTip: $(go.Adornment, \"Auto\", {\n          visible: false,\n          isShadowed: true,\n          shadowColor: \"rgba(128, 128, 128, 0.25)\",\n          shadowOffset: new go.Point(4, 4)\n        }, new go.Binding('visible', 'rgData', function (text) {\n          return text.length > 0;\n        }), $(go.Shape, \"RoundedRectangle\", {\n          fill: 'white',\n          parameter1: 10,\n          strokeWidth: 1,\n          stroke: 'lightgray'\n        }), $(go.Panel, \"Table\", {\n          margin: new go.Margin(0, 5, 0, 5)\n        }, new go.Binding(\"itemArray\", \"rgData\"), $(go.RowColumnDefinition, {\n          column: 0,\n          width: 200\n        }), {\n          name: \"TABLE\",\n          defaultAlignment: go.Spot.Left,\n          itemTemplate: $(go.Panel, \"TableRow\", new go.Binding(\"itemArray\", \"columns\"), {\n            itemTemplate: $(go.Panel, {\n              margin: new go.Margin(3, 0, 3, 0),\n              stretch: go.GraphObject.Fill,\n              alignment: go.Spot.TopLeft\n            }, new go.Binding(\"column\", \"attr\", function (a, elt) {\n              var cd = findColumnDefinitionForName(elt.part.data, a);\n              if (cd !== null) return cd.column;\n              throw new Error(\"unknown column name: \" + a);\n            }), $(go.TextBlock, {\n              maxSize: new go.Size(350, NaN),\n              minSize: new go.Size(100, NaN),\n              isMultiline: true,\n              font: \"normal 15px Source Sans Pro\",\n              spacingAbove: 5\n            }, new go.Binding(\"text\")))\n          })\n        }))\n      }, new go.Binding('fill', '', function (node) {\n        return node.color || 'white';\n      })), $(go.Shape, \"RoundedRectangle\", {\n        visible: false,\n        parameter1: 15\n      }, new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }), new go.Binding('visible', '', function (data) {\n        if (!data['isConnectivityNode'] && !data['isInternet']) {\n          return true;\n        } else {\n          return false;\n        }\n      }), {\n        width: 210,\n        height: 40,\n        strokeWidth: 0,\n        toolTip: $(go.Adornment, \"Auto\", {\n          visible: false,\n          isShadowed: true,\n          shadowColor: \"rgba(128, 128, 128, 0.25)\",\n          shadowOffset: new go.Point(4, 4)\n        }, new go.Binding('visible', 'rgData', function (text) {\n          return text.length > 0;\n        }), $(go.Shape, \"RoundedRectangle\", {\n          fill: 'white',\n          parameter1: 10,\n          strokeWidth: 1,\n          stroke: 'lightgray'\n        }), $(go.Panel, \"Table\", {\n          margin: new go.Margin(0, 5, 0, 5)\n        }, new go.Binding(\"itemArray\", \"rgData\"), $(go.RowColumnDefinition, {\n          column: 0,\n          width: 200\n        }), {\n          name: \"TABLE\",\n          defaultAlignment: go.Spot.Left,\n          itemTemplate: $(go.Panel, \"TableRow\", new go.Binding(\"itemArray\", \"columns\"), {\n            itemTemplate: $(go.Panel, {\n              margin: new go.Margin(3, 0, 3, 0),\n              stretch: go.GraphObject.Fill,\n              alignment: go.Spot.TopLeft\n            }, new go.Binding(\"column\", \"attr\", function (a, elt) {\n              var cd = findColumnDefinitionForName(elt.part.data, a);\n              if (cd !== null) return cd.column;\n              throw new Error(\"unknown column name: \" + a);\n            }), $(go.TextBlock, {\n              maxSize: new go.Size(350, NaN),\n              minSize: new go.Size(100, NaN),\n              isMultiline: true,\n              font: \"normal 15px Source Sans Pro\",\n              spacingAbove: 5\n            }, new go.Binding(\"text\")))\n          })\n        }))\n      }, new go.Binding('fill', '', function (node) {\n        return node.color || 'white';\n      })), $(go.Panel, 'Auto', new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }), {\n        width: 220,\n        height: 120\n      }, $(go.Panel, 'Spot', {\n        visible: false\n      }, $(go.Picture, {\n        desiredSize: new go.Size(25, 20),\n        alignment: go.Spot.TopLeft,\n        visible: false,\n        margin: new go.Margin(25, 0, 0, 10),\n        toolTip: $(go.Adornment, \"Auto\", {\n          visible: false,\n          isShadowed: true,\n          shadowColor: \"rgba(128, 128, 128, 0.25)\",\n          shadowOffset: new go.Point(4, 4)\n        }, new go.Binding('visible', '', function (data) {\n          return data['int-type'] != 'LAN' && data['ap-online'] == 'true' && data.hasOwnProperty('satPlacementRating');\n        }), $(go.Shape, \"RoundedRectangle\", {\n          fill: 'white',\n          parameter1: 10,\n          strokeWidth: 1,\n          stroke: 'lightgray'\n        }), $(go.Panel, \"Table\", {\n          margin: new go.Margin(0, 5, 0, 5)\n        }, new go.Binding(\"itemArray\", \"ap_rssi_tooltip\"), $(go.RowColumnDefinition, {\n          column: 0,\n          width: 200\n        }), {\n          name: \"TABLE\",\n          defaultAlignment: go.Spot.Left,\n          itemTemplate: $(go.Panel, \"TableRow\", new go.Binding(\"itemArray\", \"columns\"), {\n            itemTemplate: $(go.Panel, {\n              margin: new go.Margin(3, 0, 3, 0),\n              stretch: go.GraphObject.Fill,\n              alignment: go.Spot.TopLeft\n            }, new go.Binding(\"column\", \"attr\", function (a, elt) {\n              var cd = findColumnDefinitionForName(elt.part.data, a);\n              if (cd !== null) return cd.column;\n              throw new Error(\"unknown column name: \" + a);\n            }), $(go.TextBlock, {\n              maxSize: new go.Size(350, NaN),\n              minSize: new go.Size(100, NaN),\n              isMultiline: true,\n              font: \"normal 15px Source Sans Pro\",\n              spacingAbove: 5\n            }, new go.Binding(\"text\")))\n          })\n        }))\n      }, new go.Binding('source', 'wirelessIcon', function (image) {\n        return image ? image : '';\n      }), new go.Binding('width', 'width', function (data) {\n        return data - 5;\n      }), new go.Binding('height', 'height', function (data) {\n        return data - 10;\n      }), new go.Binding('visible', '', function (data) {\n        return data['int-type'] != 'LAN' && data['ap-online'] == 'true' && data.hasOwnProperty('satPlacementRating');\n      })), new go.Binding('visible', '', function (data) {\n        return data['int-type'] != 'LAN' && data['ap-online'] == 'true' && data.hasOwnProperty('satPlacementRating');\n      })), $(go.Panel, 'Spot', {\n        visible: false,\n        alignment: go.Spot.TopLeft\n      }, new go.Binding('visible', 'freqBand', function (freqBand) {\n        return freqBand != '';\n      }), $(go.TextBlock, {\n        margin: new go.Margin(25, 0, 0, 10)\n      }, new go.Binding('text', 'freqBand'))), $(go.Panel, 'Horizontal',\n      // the row of status indicators\n      $(go.Panel, 'Horizontal', {\n        height: 35,\n        width: 60\n      }, $(go.Picture, {\n        margin: new go.Margin(0, 0, 0, 25)\n      }, new go.Binding('source', 'source', function (image) {\n        return image ? image : '';\n      }), new go.Binding('element', 'source-video', function (video) {\n        return video ? video : '';\n      }), new go.Binding('width', 'width'), new go.Binding('height', 'height'))), $(go.Panel, 'Horizontal', {\n        height: 40,\n        width: 160\n      }, $(go.TextBlock, {\n        margin: new go.Margin(0, 0, 0, 10),\n        width: 120,\n        overflow: go.TextBlock.OverflowEllipsis\n      }, new go.Binding('text', 'label', function (l) {\n        return l ? l : '';\n      }), new go.Binding('maxLines', '', function (l) {\n        return l['isInternet'] ? 2 : 1;\n      }))), {\n        toolTip: $(go.Adornment, \"Auto\", {\n          visible: false,\n          isShadowed: true,\n          shadowColor: \"rgba(128, 128, 128, 0.25)\",\n          shadowOffset: new go.Point(4, 4)\n        }, new go.Binding('visible', 'rgData', function (text) {\n          return text.length > 0;\n        }), $(go.Shape, \"RoundedRectangle\", {\n          fill: 'white',\n          parameter1: 10,\n          strokeWidth: 1,\n          stroke: 'lightgray'\n        }), $(go.Panel, \"Table\", {\n          margin: new go.Margin(0, 5, 0, 5)\n        }, new go.Binding(\"itemArray\", \"rgData\"), $(go.RowColumnDefinition, {\n          column: 0,\n          width: 200\n        }), {\n          name: \"TABLE\",\n          defaultAlignment: go.Spot.Left,\n          itemTemplate: $(go.Panel, \"TableRow\", new go.Binding(\"itemArray\", \"columns\"), {\n            itemTemplate: $(go.Panel, {\n              margin: new go.Margin(3, 0, 3, 0),\n              stretch: go.GraphObject.Fill,\n              alignment: go.Spot.TopLeft\n            }, new go.Binding(\"column\", \"attr\", function (a, elt) {\n              var cd = findColumnDefinitionForName(elt.part.data, a);\n              if (cd !== null) return cd.column;\n              throw new Error(\"unknown column name: \" + a);\n            }), $(go.TextBlock, {\n              maxSize: new go.Size(350, NaN),\n              minSize: new go.Size(100, NaN),\n              isMultiline: true,\n              font: \"normal 15px Source Sans Pro\",\n              spacingAbove: 5\n            }, new go.Binding(\"text\")))\n          })\n        }))\n      }),\n      //Passed Clients\n      $(go.Panel, 'Auto', {\n        click: function (e, obj) {\n          var node = obj.part; // get the Node containing this Button\n          if (node === null) return;\n          e.handled = true;\n          that.clientDeviceSSID ? expandSSIDNode(node, true, 'isPassedClient') : expandNode(node, true, 'isPassedClient');\n        }\n      }, new go.Binding('margin', 'label', function (l) {\n        return l ? new go.Margin(-55, 0, 0, 50) : '';\n      }), new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }),\n      // decorations:\n      $(go.Shape, 'Circle', {\n        width: 24,\n        height: 24,\n        // fill: 'white',\n        stroke: 'green',\n        strokeWidth: 2,\n        margin: 5,\n        visible: false\n      }, new go.Binding('fill', '_othersPassedExpanded', function (node) {\n        return node ? 'green' : 'white';\n      }), new go.Binding('visible', 'passed-clients', function (l) {\n        return l ? l : false;\n      })), $(go.TextBlock, {\n        margin: 5\n      }, new go.Binding('stroke', '', function (node) {\n        return node._othersPassedExpanded ? 'white' : 'black';\n      }), new go.Binding('text', 'passed-clients', function (l) {\n        return l ? l : '';\n      }))),\n      //Failed Clients\n      $(go.Panel, 'Auto', {\n        click: function (e, obj) {\n          var node = obj.part; // get the Node containing this Button\n          if (node === null) return;\n          e.handled = true;\n          that.clientDeviceSSID ? expandSSIDNode(node, true, 'isFailedClient') : expandNode(node, true, 'isFailedClient');\n        }\n      }, new go.Binding('margin', 'label', function (l) {\n        return l ? new go.Margin(-45, 0, 0, 90) : '';\n      }), new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }),\n      // decorations:\n      $(go.Shape, 'Circle', {\n        width: 24,\n        height: 24,\n        // fill: 'white',\n        stroke: 'orange',\n        strokeWidth: 2,\n        margin: 5,\n        visible: false\n      }, new go.Binding('fill', '', function (node) {\n        return node._othersFailedExpanded && (node.isrgWithIssue || node.isapWithIssue) ? 'red' : node._othersFailedExpanded && (!node.isrgWithIssue || !node.isapWithIssue) ? 'orange' : 'white';\n      }), new go.Binding('visible', 'failed-clients', function (l) {\n        return l ? l : false;\n      }), new go.Binding('stroke', '', function (node) {\n        return node.isrgWithIssue || node.isapWithIssue ? 'red' : 'orange';\n      })), $(go.TextBlock, {\n        margin: 5\n      }, new go.Binding('stroke', '', function (node) {\n        return node._othersFailedExpanded ? 'white' : 'black';\n      }), new go.Binding('text', 'failed-clients', function (l) {\n        return l ? l : '';\n      }))), $(go.Panel, 'Auto', {\n        margin: new go.Margin(0, 0, 0, 175)\n      }, makeCustomExpander(false))));\n      // var templmap = new go.Map<string, go.Node>();\n      templmap.add('otherNode', otherNode);\n      // templmap.add('Main', mainNode);\n      this.APTopology.nodeTemplateMap = templmap;\n      this.APTopology.linkTemplate = $(go.Link, {\n        curve: go.Link.Bezier,\n        // toShortLength: 6,\n        relinkableFrom: true,\n        relinkableTo: true\n      },\n      // allow the user to relink existing links\n      $(go.Shape, {\n        strokeWidth: 3,\n        width: 200\n      }, new go.Binding('stroke', 'color'), new go.Binding('strokeWidth', 'thick')), {\n        toolTip: $(go.Adornment, \"Auto\", {\n          visible: false,\n          isShadowed: true,\n          shadowColor: \"rgba(128, 128, 128, 0.25)\",\n          shadowOffset: new go.Point(4, 4)\n        }, new go.Binding('visible', 'linkText', function (text) {\n          return text.length > 0;\n        }), $(go.Shape, \"RoundedRectangle\", {\n          fill: 'white',\n          parameter1: 10,\n          strokeWidth: 1,\n          stroke: 'lightgray'\n        }), $(go.Panel, \"Table\", {\n          margin: new go.Margin(0, 5, 0, 5)\n        }, new go.Binding(\"itemArray\", \"linkText\"), $(go.RowColumnDefinition, {\n          column: 0,\n          width: 200\n        }), {\n          name: \"TABLE\",\n          defaultAlignment: go.Spot.Left,\n          itemTemplate: $(go.Panel, \"TableRow\", new go.Binding(\"itemArray\", \"columns\"), {\n            itemTemplate: $(go.Panel, {\n              margin: new go.Margin(3, 0, 3, 0),\n              stretch: go.GraphObject.Fill,\n              alignment: go.Spot.TopLeft\n            }, new go.Binding(\"column\", \"attr\", function (a, elt) {\n              var cd = findLinkColumnDefinitionForName(elt.part.data, a);\n              if (cd !== null) return cd.column;\n              throw new Error(\"unknown column name: \" + a);\n            }), $(go.TextBlock, {\n              maxSize: new go.Size(350, NaN),\n              minSize: new go.Size(100, NaN),\n              isMultiline: true,\n              font: \"normal 15px Source Sans Pro\",\n              spacingAbove: 5\n            }, new go.Binding(\"text\")))\n          })\n        }))\n      });\n      function findLinkColumnDefinitionForName(nodedata, attrname) {\n        var columns = nodedata.linkColumn;\n        for (var i = 0; i < columns.length; i++) {\n          if (columns[i].attr === attrname) return columns[i];\n        }\n        return null;\n      }\n      let that = this;\n      function makeCustomExpander(others) {\n        return $('Button', {\n          visible: false,\n          // alignment: align,\n          click: function (e, obj) {\n            var node = obj.part; // get the Node containing this Button\n            if (node === null) return;\n            e.handled = true;\n            that.clientDeviceSSID ? expandSSIDNode(node, others, 'isClient') : expandNode(node, others, 'isClient');\n          }\n        }, $(go.Shape,\n        // the icon\n        {\n          name: 'ButtonIcon',\n          figure: 'TriangleLeft',\n          stroke: '#424242',\n          strokeWidth: 2,\n          desiredSize: new go.Size(8, 8)\n        },\n        // bind the Shape.figure to the node.data._othersExpanded value using this converter:\n        new go.Binding('figure', others ? '_othersExpanded' : '_primariesExpanded', function (exp, shape) {\n          var but = shape.panel;\n          return exp ? 'TriangleLeft' : 'TriangleRight';\n        })), new go.Binding('visible', '', function (node) {\n          return !node.isTreeLeaf && node.apHasChildAp ? true : false;\n        }));\n      }\n      function expandNode(node, others, type) {\n        that.APTopology.startTransaction('CollapseExpandTree');\n        var children = node.findTreeChildrenNodes();\n        var visibleNodes;\n        children.each(function (c) {\n          var cd = c.data;\n          if (others && !cd[type]) return;\n          if (!others && cd[type]) return;\n          if (c.visible) {\n            //find no child visible to collapse ssid\n            var hasPassedChild = false;\n            var hasFailedChild = false;\n            var hasPrimaryChild = false;\n            if (!that.clientDeviceSSID) {\n              that.expandedNodes = that.expandedNodes.filter(el => el != c.data.key);\n              node.findTreeChildrenNodes().each(function (n) {\n                if (n.data['isPassedClient']) {\n                  hasPassedChild = true;\n                } else if (n.data['isFailedClient']) {\n                  hasFailedChild = true;\n                } else if (n.data['isAPS']) {\n                  hasPrimaryChild = true;\n                }\n              });\n            } else {\n              c.findTreeChildrenNodes().each(function (n) {\n                if (n.data['isPassedClient']) {\n                  hasPassedChild = true;\n                } else if (n.data['isFailedClient']) {\n                  hasFailedChild = true;\n                } else if (n.data['isAPS']) {\n                  hasPrimaryChild = true;\n                }\n              });\n            }\n            if (type == 'isPassedClient') {\n              if (!hasFailedChild || !node.data['_othersFailedExpanded']) {\n                that.expandedNodes = that.expandedNodes.filter(el => el != node.data['sn'] + '-' + c.data['ssid'] + '-' + c.data['freq-band'] + '-client');\n              }\n              if ((!hasFailedChild || !node.data['_othersFailedExpanded']) && (!hasPrimaryChild || !node.data['_primariesExpanded'])) {\n                that.expandedNodes = that.expandedNodes.filter(el => el != `ethernet-${c.data['eth-port']}-${node.data['sn']}`);\n              }\n            }\n            if (type == 'isFailedClient') {\n              if (!hasPassedChild || !node.data['_othersPassedExpanded']) {\n                that.expandedNodes = that.expandedNodes.filter(el => el != node.data['sn'] + '-' + c.data['ssid'] + '-' + c.data['freq-band'] + '-client');\n              }\n              if ((!hasPassedChild || !node.data['_othersPassedExpanded']) && (!hasPrimaryChild || !node.data['_primariesExpanded'])) {\n                that.expandedNodes = that.expandedNodes.filter(el => el != `ethernet-${c.data['eth-port']}-${node.data['sn']}`);\n              }\n            }\n            // if (type == 'isClient') {\n            //   that.expandedNodes = that.expandedNodes.filter(\n            //     (el) => el != node.data['sn'] + '-' + c.data['ssid']\n            //   );\n            //   if (\n            //     (!hasPassedChild && !hasFailedChild) ||\n            //     (!node.data['_othersFailedExpanded'] &&\n            //       !node.data['_othersPassedExpanded'])\n            //   ) {\n            //     that.expandedNodes = that.expandedNodes.filter(\n            //       (el) => el != `ethernet-${c.data['eth-port']}-${node.data['sn']}`\n            //     );\n            //   }\n            // }\n            if (type == 'isPassedClient' && !node.data['_othersFailedExpanded'] && !node.data['_primariesExpanded'] || type == 'isFailedClient' && !node.data['_othersPassedExpanded'] && !node.data['_primariesExpanded']) {\n              that.expandedNodes = that.expandedNodes.filter(el => el != c.data.key && el != node.data['sn'] + '-' + c.data['ssid'] + '-' + c.data['freq-band'] + '-client' && el != `ethernet-${node.data['sn']}`);\n            } else if (type == 'isPassedClient' || type == 'isFailedClient') {\n              that.expandedNodes = that.expandedNodes.filter(el => el != c.data.key);\n            } else {\n              that.expandedNodes = that.expandedNodes.filter(el => el != c.data.key && el != node.data['sn'] + '-' + c.data['ssid'] && el != `ethernet-${node.data['sn']}`);\n            }\n            c.visible = false;\n            c.collapseTree();\n            // collapseAllInnerChilds(c, node);\n            if (!c.data['isPassedClient'] && !c.data['isFailedClient']) {\n              collapseAllInnerChilds(c, node);\n            }\n          } else {\n            //Push Expanded Nodes in an array\n            if (c.data['isPassedClient'] || c.data['isFailedClient']) {\n              that.expandedNodes.push(c.data.key, node.data.key, node.data['sn'] + '-' + c.data['ssid'] + '-' + c.data['freq-band'] + '-client', `ethernet-${c.data['eth-port']}-${node.data['sn']}`);\n            } else {\n              that.expandedNodes.push(c.data.key, node.data.key, node.data['sn'] + '-' + c.data['ssid'], `ethernet-${node.data['sn']}`);\n            }\n            that.expandedNodes = [...new Set(that.expandedNodes)];\n            c.visible = true;\n            c.expandTree();\n          }\n        });\n        if (others) {\n          if (type == 'isPassedClient') {\n            that.APTopology.model.set(node.data, '_othersPassedExpanded', !node.data._othersPassedExpanded);\n          } else if (type == 'isFailedClient') {\n            that.APTopology.model.set(node.data, '_othersFailedExpanded', !node.data._othersFailedExpanded);\n          }\n        } else {\n          that.APTopology.model.set(node.data, '_primariesExpanded', !node.data._primariesExpanded);\n        }\n        that.APTopology.commitTransaction('CollapseExpandTree');\n      }\n      function expandSSIDNode(node, others, type) {\n        others = node.data['isSSID'] ? true : others;\n        if (node.data['isSSID'] || node.data['isAPSSID']) {\n          expandSSIDClients(node, others, type);\n          return;\n        }\n        that.APTopology.startTransaction('CollapseExpandTree');\n        var children = node.findTreeChildrenNodes();\n        var visibleNodes;\n        children.each(function (child) {\n          //find no child visible to collapse ssid\n          var hasPassedChild = false;\n          var hasFailedChild = false;\n          var hasPrimaryChild = false;\n          child.findTreeChildrenNodes().each(function (n) {\n            if (n.data['isPassedClient']) {\n              hasPassedChild = true;\n            } else if (n.data['isFailedClient']) {\n              hasFailedChild = true;\n            } else if (n.data['isAPS']) {\n              hasPrimaryChild = true;\n            }\n          });\n          if (child.data['offlineAP'] || child.data['isRg']) {\n            hasPrimaryChild = true;\n          }\n          if (type == 'isPassedClient' && hasPassedChild && !node.data['_othersPassedExpanded'] || type == 'isFailedClient' && hasFailedChild && !node.data['_othersFailedExpanded'] || type == 'isClient' && hasPrimaryChild && !node.data['_primariesExpanded']) {\n            if (child.data['offlineAP'] || child.data['isRg']) {\n              that.expandedNodes.push(child.data.key);\n            }\n            child.visible = true;\n            child.expandTree();\n          } else if ((!hasFailedChild || !node.data['_othersFailedExpanded']) && (!hasPrimaryChild || !node.data['_primariesExpanded']) && type == 'isPassedClient' || (!hasPassedChild || !node.data['_othersPassedExpanded']) && (!hasPrimaryChild || !node.data['_primariesExpanded']) && type == 'isFailedClient' || (!hasPassedChild || !node.data['_othersPassedExpanded']) && (!hasFailedChild || !node.data['_othersFailedExpanded']) && type == 'isClient') {\n            that.expandedNodes = that.expandedNodes.filter(el => el != child.data.key);\n            child.visible = false;\n            child.collapseTree();\n          }\n          var childData = child.data;\n          //Expand APs and Clients which is a child of connectivity (SSID or Ethernet)\n          var subChildren = child.findTreeChildrenNodes();\n          if (subChildren && subChildren != null && subChildren['count'] > 0) {\n            // collapseChildNodes(subChildren, type)\n            var primarySet = false;\n            subChildren.each(function (subnode) {\n              if (type == 'isPassedClient' && !subnode.data['isPassedClient']) return;\n              if (type == 'isFailedClient' && !subnode.data['isFailedClient']) return;\n              if (type == 'isClient' && !subnode.data['isAPS']) return;\n              if (type == 'isPassedClient' && node.data['_othersPassedExpanded'] || type == 'isFailedClient' && node.data['_othersFailedExpanded'] || type == 'isClient' && node.data['_primariesExpanded']) {\n                that.expandedNodes = that.expandedNodes.filter(el => el != subnode.data.key);\n                subnode.visible = false;\n                subnode.collapseTree();\n                visibleNodes = false;\n              } else {\n                if (type == 'isClient' && child.data['_primariesExpanded'] || child.data['_primariesExpanded'] || !node.data['_othersPassedExpanded'] && !node.data['_primariesExpanded'] && !node.data['_othersFailedExpanded']) {\n                  primarySet = true;\n                  subnode.visible = true;\n                  subnode.expandTree();\n                }\n                visibleNodes = true;\n                that.expandedNodes.push(subnode.data.key, child.data.key);\n              }\n              if (!subnode.data['isPassedClient'] && !subnode.data['isFailedClient']) {\n                collapseAllInnerChilds(subnode, child, primarySet);\n              }\n              // else if (child.data['isAPSSID'] || child.data['isSSID']) {\n              //   that.APTopology.model.set(child.data, '_primariesExpanded', true);\n              // }\n            });\n\n            if ((child.data['isAPSSID'] || child.data['isSSID']) && primarySet) {\n              that.APTopology.model.set(child.data, '_primariesExpanded', true);\n            }\n          }\n          if ((child.data['ap-online'] == 'false' || child.data['isRg']) && !node.data['_primariesExpanded']) {\n            visibleNodes = true;\n          }\n        });\n        if (!visibleNodes) {\n          if (type == 'isPassedClient') {\n            that.APTopology.model.set(node.data, '_othersPassedExpanded', false);\n          } else if (type == 'isFailedClient') {\n            that.APTopology.model.set(node.data, '_othersFailedExpanded', false);\n          } else if (type == 'isClient') {\n            that.APTopology.model.set(node.data, '_primariesExpanded', false);\n          }\n        } else {\n          if (type == 'isPassedClient') {\n            that.APTopology.model.set(node.data, '_othersPassedExpanded', true);\n          } else if (type == 'isFailedClient') {\n            that.APTopology.model.set(node.data, '_othersFailedExpanded', true);\n          } else if (type == 'isClient') {\n            that.APTopology.model.set(node.data, '_primariesExpanded', true);\n          }\n        }\n        that.expandedNodes = [...new Set(that.expandedNodes)];\n        that.APTopology.commitTransaction('CollapseExpandTree');\n      }\n      function collapseAllInnerChilds(subnode, child, primarySet = false) {\n        var children = subnode.findTreeChildrenNodes();\n        if (children && children != null && children['count'] > 0) {\n          children.each(function (c) {\n            c.visible = false;\n            c.collapseTree();\n            that.innerChildsNodes.push(c.data.key);\n            that.expandedNodes = that.expandedNodes.filter(el => el != c.data.key);\n            let grandParent = child.findTreeParentNode();\n            if (that.clientDeviceSSID) {\n              if (c.data['isPassedClient']) {\n                that.APTopology.model.set(child.data, '_othersPassedExpanded', false);\n              } else if (c.data['isFailedClient']) {\n                that.APTopology.model.set(child.data, '_othersFailedExpanded', false);\n              } else if (c.data['isAPS'] || c.data['isSSID'] || c.data['isAPSSID']) {\n                that.APTopology.model.set(subnode.data, '_primariesExpanded', false);\n              }\n            } else {\n              if (c.data['isPassedClient']) {\n                that.APTopology.model.set(subnode.data, '_othersPassedExpanded', false);\n              } else if (c.data['isFailedClient']) {\n                that.APTopology.model.set(subnode.data, '_othersFailedExpanded', false);\n              } else if (c.data['isAPS'] || c.data['isSSID'] || c.data['isAPSSID']) {\n                that.APTopology.model.set(subnode.data, '_primariesExpanded', false);\n              }\n            }\n            var subChild = c.findTreeChildrenNodes();\n            if (subChild && subChild != null && subChild['count'] > 0 && !c.data['isPassedClient'] && !c.data['isFailedClient']) {\n              collapseAllInnerChilds(c, subnode);\n            }\n          });\n        } else if ((child.data['isAPSSID'] || child.data['isSSID']) && primarySet) {\n          that.APTopology.model.set(child.data, '_primariesExpanded', true);\n        }\n      }\n      function expandSSIDClients(node, others, type) {\n        that.APTopology.startTransaction('CollapseExpandTree');\n        var children = node.findTreeChildrenNodes();\n        var parentNode = node.findTreeParentNode();\n        var hasPassedChild = false;\n        var hasFailedChild = false;\n        var hasPrimaryChild = false;\n        parentNode.findTreeChildrenNodes().each(function (n) {\n          if (n.data['isPassedClient']) {\n            hasPassedChild = true;\n          } else if (n.data['isFailedClient']) {\n            hasFailedChild = true;\n          } else if (n.data['isAPS']) {\n            hasPrimaryChild = true;\n          }\n        });\n        if (parentNode.data['_othersFailedExpanded'] && parentNode.data['_othersPassedExpanded'] && parentNode.data['_primariesExpanded']) {\n          type = 'allClients';\n        } else if (parentNode.data['_othersFailedExpanded'] && parentNode.data['_othersPassedExpanded']) {\n          type = 'passedFailedClients';\n        } else if (parentNode.data['_othersFailedExpanded'] && parentNode.data['_primariesExpanded']) {\n          type = 'primaryFailedClients';\n        } else if (parentNode.data['_othersPassedExpanded'] && parentNode.data['_primariesExpanded']) {\n          type = 'primaryPassedClients';\n        } else if (parentNode.data['_othersFailedExpanded']) {\n          type = 'isFailedClient';\n        } else if (parentNode.data['_othersPassedExpanded']) {\n          type = 'isPassedClient';\n        } else if (parentNode.data['_primariesExpanded']) {\n          type = 'isClient';\n        }\n        // if (\n        //   (parentNode.data['_othersFailedExpanded'] &&\n        //     parentNode.data['_othersPassedExpanded'] &&\n        //     parentNode.data['_primariesExpanded']) ||\n        //   (parentNode.data['_othersFailedExpanded'] &&\n        //     parentNode.data['_othersPassedExpanded'] && !hasPrimaryChild) ||\n        //   (parentNode.data['_othersPassedExpanded'] &&\n        //     parentNode.data['_primariesExpanded'] && !hasFailedChild) ||\n        //   (parentNode.data['_othersFailedExpanded'] &&\n        //     parentNode.data['_primariesExpanded'] && !hasPassedChild)\n        // ) {\n        //   type = 'allClients';\n        // } else if (parentNode.data['_othersFailedExpanded']) {\n        //   type = 'isFailedClient';\n        // } else if (parentNode.data['_othersPassedExpanded']) {\n        //   type = 'isPassedClient';\n        // } else if (parentNode.data['_primariesExpanded']) {\n        //   type = 'isClient';\n        // }\n        children.each(function (c) {\n          if (type == 'isPassedClient' && c.data['isPassedClient'] || type == 'isFailedClient' && c.data['isFailedClient'] || type == 'passedFailedClients' && !c.data['isAPS'] || type == 'primaryFailedClients' && !c.data['isPassedClient'] || type == 'primaryPassedClients' && !c.data['isFailedClient'] || type == 'isClient' && c.data['isAPS'] || type == 'allClients') {\n            if (c.visible) {\n              c.visible = false;\n              c.collapseTree();\n            } else {\n              c.visible = true;\n              c.expandTree();\n            }\n          }\n        });\n        that.APTopology.model.set(node.data, '_primariesExpanded', !node.data._primariesExpanded);\n        that.APTopology.commitTransaction('CollapseExpandTree');\n      }\n      function collapseDefault() {\n        return __awaiter(this, void 0, void 0, function* () {\n          yield collapseRecursive();\n          locateIssueFix();\n          setDefaultExpandForSSID();\n        });\n      }\n      function setDefaultExpandForSSID() {\n        that.APTopology.startTransaction('CollapseExpandTree');\n        that.APTopology.nodes.each(function (obj) {\n          let node = obj.part;\n          if (that.expandedNodes.includes(node.data.key)) {\n            if (node.data['isSSID'] || node.data['isAPSSID']) {\n              //find no child visible to collapse ssid\n              let hasPassedChild = false;\n              let hasFailedChild = false;\n              let hasPrimaryChild = false;\n              node.findTreeChildrenNodes().each(function (subNode) {\n                if (subNode.data['isPassedClient']) {\n                  hasPassedChild = true;\n                } else if (subNode.data['isFailedClient']) {\n                  hasFailedChild = true;\n                } else if (subNode.data['isAPS']) {\n                  hasPrimaryChild = true;\n                }\n              });\n              if (node.findTreeParentNode().data['_othersPassedExpanded'] && hasPassedChild || node.findTreeParentNode().data['_othersFailedExpanded'] && hasFailedChild || node.findTreeParentNode().data['_primariesExpanded'] && hasPrimaryChild) {\n                node.visible = true;\n                node.expandTree();\n              }\n            } else {\n              // let parentVisible = node.findTreeParentNode();\n              // if((parentVisible && parentVisible.visible) || node.data['isRg'] || node.data['is']){\n              node.visible = true;\n              node.expandTree();\n              // }\n            }\n\n            var parentFill = that.APTopology.findNodesByExample({\n              mac: node.data['parent-host-name']\n            });\n            if (node.data['isSSID'] || node.data['isAPSSID']) {\n              that.APTopology.model.set(node.data, '_primariesExpanded', true);\n            }\n            if (parentFill) {\n              parentFill.each(c => {\n                if (!c.data['isSSID'] && !c.data['isAPSSID'] && !c.data['isInternet']) {\n                  if (node.data['isPassedClient']) {\n                    that.APTopology.model.set(c.data, '_othersPassedExpanded', true);\n                  } else if (node.data['isFailedClient']) {\n                    that.APTopology.model.set(c.data, '_othersFailedExpanded', true);\n                  } else {\n                    that.APTopology.model.set(c.data, '_primariesExpanded', true);\n                  }\n                }\n              });\n            }\n          }\n        });\n        that.APTopology.commitTransaction('CollapseExpandTree');\n      }\n      function collapseRecursive() {\n        that.APTopology.startTransaction('CollapseExpandTree');\n        that.APTopology.nodes.each(function (obj) {\n          let node = obj.part;\n          var parentNode = node.findTreeParentNode();\n          if (!that.clientDeviceSSID) {\n            if (node.data['isInternet'] && node.data['_primariesExpethernetanded'] || node.data['isRg'] && node.data['_primariesExpanded'] || node.data['isAPS'] && node.data['apHasChildAp'] && node.data['_primariesExpanded'] || node.data['isONT'] && node.data['_primariesExpanded']) {\n              that.expandedNodes.push(node.data['key']);\n              that.APTopology.model.set(node.data, '_primariesExpanded', true);\n            }\n            if (node.data['isAPS']) {\n              if (parentNode && parentNode != null) {\n                that.expandedNodes.push(parentNode.data['sn'] + '-' + node.data['ssid'], `ethernet-${node.data['eth-port']}-${parentNode.data['sn']}`);\n              }\n            }\n            that.expandedNodes = [...new Set(that.expandedNodes)];\n          }\n          if (!node.data['isInternet'] && !node.data['isRg'] && !node.data['isONT'] && !node.data['isAPS'] && !node.data['noRg'] || node.data['isAPS'] && !(parentNode === null || parentNode === void 0 ? void 0 : parentNode.data['_primariesExpanded']) && !(parentNode === null || parentNode === void 0 ? void 0 : parentNode.data['isAPSSID']) || node.data['isAPS'] && !(parentNode === null || parentNode === void 0 ? void 0 : parentNode.data['_primariesExpanded']) && node.data['ap-online'] == 'true' && !(parentNode === null || parentNode === void 0 ? void 0 : parentNode.data['isAPSSID']) || that.noRG && node.data['isClient']) {\n            that.APTopology.model.set(node.data, '_primariesExpanded', false);\n            node.visible = false;\n            node.collapseTree();\n          }\n          if (parentNode === null || parentNode === void 0 ? void 0 : parentNode.data['isAPSSID']) {\n            let grandParent = parentNode.findTreeParentNode();\n            if (grandParent && grandParent != null) {\n              if (node.data['isAPS'] && !(grandParent === null || grandParent === void 0 ? void 0 : grandParent.data['_primariesExpanded']) || node.data['isAPS'] && !(grandParent === null || grandParent === void 0 ? void 0 : grandParent.data['_primariesExpanded']) && node.data['ap-online'] == 'true') {\n                that.APTopology.model.set(node.data, '_primariesExpanded', false);\n                node.visible = false;\n                node.collapseTree();\n              }\n            }\n          }\n          if (that.noRG) {\n            let internetNodes = that.APTopology.findNodesByExample({\n              isInternet: true\n            });\n            if (internetNodes && internetNodes != null) {\n              internetNodes.each(function (obj) {\n                let node = obj.part;\n                var children = node.findTreeChildrenNodes();\n                if (children && children != null && children['count'] > 0) {\n                  children.each(function (d) {\n                    d.visible = true;\n                    d.expandTree();\n                  });\n                }\n              });\n            }\n          }\n        });\n        that.APTopology.commitTransaction('CollapseExpandTree');\n      }\n      function locateIssueFix() {\n        that.APTopology.startTransaction('CollapseExpandTree');\n        that.APTopology.findTreeRoots().each(function (e) {\n          if (e.data['isInternet']) e.location.y = e.location.y + 1;\n          that.locationFixed = true;\n        });\n        // node.location.y = node.location.y + 1;\n        // node.location = new go.Point(0, 141);\n        that.APTopology.commitTransaction('CollapseExpandTree');\n      }\n      function addMakeCustomExpander() {\n        that.APTopology.startTransaction('CollapseExpandTree');\n        that.APTopology.nodes.each(function (obj) {\n          let node = obj.part;\n          let childrenExists = obj.part.findTreeChildrenNodes();\n          let childExists = false;\n          childrenExists.each(function (c) {\n            var cd = c.data;\n            if (!cd['isClient'] || cd['isSSIDClient']) {\n              childExists = true;\n            }\n            that.APTopology.model.set(node.data, 'apHasChildAp', childExists);\n          });\n        });\n        that.APTopology.commitTransaction('CollapseExpandTree');\n      }\n      that.APTopology.model = new go.GraphLinksModel(that.nodeDataArray, that.linkDataArray);\n      const el = this.APDiagram.nativeElement;\n      const canvas = el.querySelector('canvas');\n      canvas['style']['outline'] = 'none';\n    }\n    setClientDetailsNode() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // if (!this.clientDeviceSSID) {\n        yield this.nodeDataArray.forEach(el => {\n          if (el.clients && el.clients.length > 0) {\n            this.objData = el;\n            this.onClickClients = '';\n            this.getAPData(this.objData);\n          }\n        });\n        this.setOthersPrimary();\n      });\n    }\n    setOthersPrimary() {\n      this.nodeDataArray.forEach(el => {\n        let expandCollapse = false;\n        if ((el['isInternet'] || el['isRg'] || el['isAPS']) && !el.hasOwnProperty('_primariesExpanded')) {\n          expandCollapse = true;\n        }\n        el['apHasChildAp'] = el.hasOwnProperty('apHasChildAp') ? el['apHasChildAp'] : false;\n        el['_othersPassedExpanded'] = el.hasOwnProperty('_othersPassedExpanded') ? el['_othersPassedExpanded'] : false;\n        el['_othersFailedExpanded'] = el.hasOwnProperty('_othersFailedExpanded') ? el['_othersFailedExpanded'] : false;\n        el['_primariesExpanded'] = el.hasOwnProperty('_primariesExpanded') ? el['_primariesExpanded'] : expandCollapse;\n      });\n      this.loadSupportTopology();\n    }\n    clientNodeDetails(clientAttributes) {\n      this.clientDetails = '';\n      let clientIpAdd = clientAttributes['ip-address'] ? clientAttributes['ip-address'] : `-`;\n      let clientHostname = clientAttributes['hostname'] ? clientAttributes['hostname'] : `-`;\n      let clientVersion = clientAttributes['version'] ? clientAttributes['version'] : `-`;\n      let clientMacAdd = clientAttributes['mac'] ? clientAttributes['mac'] : `-`;\n      let clientModel = clientAttributes['fingerprint-model'] && clientAttributes['fingerprint-model'] != 'Unknown' ? clientAttributes['fingerprint-model'] : `-`;\n      let clientManufacture = clientAttributes['fingerprint-vendor'] && clientAttributes['fingerprint-vendor'] != 'Unknown' ? clientAttributes['fingerprint-vendor'] : `-`;\n      let clientConType = clientAttributes['intf-type'] ? clientAttributes['intf-type'] : `-`;\n      let clientSignalStrength = clientAttributes['signal-strength'] ? `${clientAttributes['signal-strength']}dBm` : `-`;\n      let clientEffScr = ``;\n      // if (clientAttributes['client-efficiency-score'] <= 0) {\n      let scoreType = '';\n      let clientEffScore = (clientAttributes === null || clientAttributes === void 0 ? void 0 : clientAttributes['client-efficiency-score']) > 0 ? ((clientAttributes === null || clientAttributes === void 0 ? void 0 : clientAttributes['client-efficiency-score']) * 100).toFixed(2) : (clientAttributes === null || clientAttributes === void 0 ? void 0 : clientAttributes['client-efficiency-score']) < 0 ? (0 * 100).toFixed(2) : (clientAttributes === null || clientAttributes === void 0 ? void 0 : clientAttributes['client-efficiency-score']) == 0 ? (0 * 100).toFixed(2) : '-';\n      if (parseInt(clientEffScore) >= 45) {\n        scoreType = 'Good';\n      } else if (parseInt(clientEffScore) >= 20 && parseInt(clientEffScore) < 45) {\n        scoreType = 'Fair';\n      } else if (parseInt(clientEffScore) < 20) {\n        scoreType = 'Poor';\n      }\n      if (clientEffScore != '-') {\n        clientEffScr = clientEffScore + '% (' + scoreType + ')';\n      } else {\n        clientEffScr = clientEffScore;\n      }\n      // } else {\n      //   clientEffScr = `-`;\n      // }\n      let clientAirtimeUse = clientAttributes['Airtime-usage'] ? clientAttributes['Airtime-usage'] : `-`;\n      let clientChannelNo = clientAttributes['Channel-number'] ? clientAttributes['Channel-number'] : `-`;\n      let clientdsusPhyRate = ``;\n      if (clientAttributes['DS-phy-rate'] || clientAttributes['US-phy-rate']) {\n        clientdsusPhyRate = `${this.kbpsTO(clientAttributes['DS-phy-rate'])}bps/${this.kbpsTO(clientAttributes['US-phy-rate'])}bps`;\n      } else {\n        clientdsusPhyRate = `-`;\n      }\n      let clientrxtxUsage = ``;\n      if (clientAttributes['RX-bandwidth-usage'] || clientAttributes['TX-bandwidth-usage']) {\n        clientrxtxUsage = `${this.kbpsTO(clientAttributes['RX-bandwidth-usage'])}bps/${this.kbpsTO(clientAttributes['TX-bandwidth-usage'])}bps`;\n      } else {\n        clientrxtxUsage = `-`;\n      }\n      let clientSNR = clientAttributes['SNR'] ? `${clientAttributes['SNR']}dB` : `-`;\n      let clientFreqBand = clientAttributes['freq-band'] ? `${clientAttributes['freq-band']}GHz` : `-`;\n      if (clientAttributes['client-issue-list'] && !this.isClientNodeClicked) {\n        this.client_issue = '';\n        for (let i = 0; i < clientAttributes['client-issue-list'].length; i++) {\n          this.issueDescription(clientAttributes['client-issue-list'][i].code, 'client', '', i);\n        }\n      }\n      let clientTechNote = clientAttributes['client-note'] ? this.client_issue : `-`;\n      let EffScore = {};\n      if (this.swVersion > 21.2) {\n        EffScore = {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Efficiency_Score\n          }, {\n            attr: \"value\",\n            text: `${clientEffScr}`\n          }]\n        };\n      }\n      clientAttributes['columnDefinitions'] = [\n      // each column definition needs to specify the column used\n      {\n        attr: \"property\",\n        text: \"\",\n        column: 0\n      }, {\n        attr: \"value\",\n        text: \"\",\n        column: 1\n      }];\n      let airtimeUsage = {};\n      if (clientAirtimeUse != '-') {\n        airtimeUsage = {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Airtime_Usage\n          }, {\n            attr: \"value\",\n            text: `${clientAirtimeUse}`\n          }]\n        };\n      }\n      if (clientAttributes['intf-type'] == 'WiFi') {\n        clientAttributes['rgData'] = [{\n          columns: [{\n            attr: \"property\",\n            text: this.language.IP_Address\n          }, {\n            attr: \"value\",\n            text: `${clientIpAdd}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Hostname\n          }, {\n            attr: \"value\",\n            text: `${clientHostname}`\n          }]\n        },\n        // { columns: [{ attr: \"property\", text: this.language.Software_Version }, { attr: \"value\", text: `${clientVersion}` }] },\n        {\n          columns: [{\n            attr: \"property\",\n            text: this.language.MAC_Address\n          }, {\n            attr: \"value\",\n            text: `${clientMacAdd}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Model\n          }, {\n            attr: \"value\",\n            text: `${clientModel}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Manufacturer\n          }, {\n            attr: \"value\",\n            text: `${clientManufacture}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Connection_Type\n          }, {\n            attr: \"value\",\n            text: `${clientConType}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Signal_Strength\n          }, {\n            attr: \"value\",\n            text: `${clientSignalStrength}`\n          }]\n        }, EffScore, airtimeUsage, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Channel_Number\n          }, {\n            attr: \"value\",\n            text: `${clientChannelNo}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.DS_US_Phy_Rate\n          }, {\n            attr: \"value\",\n            text: `${clientdsusPhyRate}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.RX_TX_BW_Usage\n          }, {\n            attr: \"value\",\n            text: `${clientrxtxUsage}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: \"SNR\"\n          }, {\n            attr: \"value\",\n            text: `${clientSNR}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Frequency_Band\n          }, {\n            attr: \"value\",\n            text: `${clientFreqBand}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.issue\n          }, {\n            attr: \"value\",\n            text: `${clientTechNote}`\n          }]\n        }];\n      } else if (clientAttributes['intf-type'] == 'LAN') {\n        clientAttributes['rgData'] = [{\n          columns: [{\n            attr: \"property\",\n            text: this.language.IP_Address\n          }, {\n            attr: \"value\",\n            text: `${clientIpAdd}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Hostname\n          }, {\n            attr: \"value\",\n            text: `${clientHostname}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.MAC_Address\n          }, {\n            attr: \"value\",\n            text: `${clientMacAdd}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Model\n          }, {\n            attr: \"value\",\n            text: `${clientModel}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Manufacturer\n          }, {\n            attr: \"value\",\n            text: `${clientManufacture}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Connection_Type\n          }, {\n            attr: \"value\",\n            text: `${clientConType}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.issue\n          }, {\n            attr: \"value\",\n            text: `${clientTechNote}`\n          }]\n        }];\n      }\n    }\n    getAPData(apMac) {\n      this.searchText = '';\n      this.apInformtion = '';\n      // Client Devices connected with RG\n      //Populate Client Devices of Rg and APS\n      if (apMac.clients && apMac.clients.length > 0) {\n        this.populateClientDevices(apMac.clients, apMac);\n      }\n    }\n    getAllClientsData(apMac, singleClick, dblClick) {\n      let signalImages = {\n        0: 'assets/images/no-wifi-signal.png',\n        1: 'assets/images/low-wifi-signal.png',\n        2: 'assets/images/all-green-wifi.png',\n        3: 'assets/images/all-green-wifi.png'\n      };\n      this.spinner.show();\n    }\n    accessPoint() {\n      this.clientDeviceSSID = !this.clientDeviceSSID;\n      this.loadInitialDiagram(this.resValue);\n    }\n    enableAllCommandHandler() {\n      var cmdhnd = this.APTopology.commandHandler;\n      this.enable('ScrollToPart', cmdhnd.canScrollToPart());\n    }\n    enable(name, ok) {\n      var button = document.getElementById(name);\n      if (button) button['disabled'] = !ok;\n    }\n    zoomfunctionalities(type) {\n      if (type == 'ScrollToPart') {\n        this.APTopology.commandHandler.scrollToPart();\n      }\n    }\n    searchDiagram() {\n      if (this.searchText.length > 1) {\n        let that = this;\n        this.searchSubject.next();\n        this.searchSubject.pipe(debounceTime(1000)).subscribe(() => {\n          // this.APTopology.highlighteds.each(e => {e.visible = true})\n          that.APTopology.focus();\n          that.APTopology.startTransaction('highlight search');\n          if (that.searchText) {\n            var safe = that.searchText.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n            var regex = new RegExp(safe, 'i');\n            var results = that.APTopology.findNodesByExample({\n              label: regex\n            }, {\n              mac: regex\n            }, {\n              model: regex\n            });\n            that.APTopology.highlightCollection(results);\n            that.APTopology.highlighteds.each(e => {\n              let parent = e.findTreeParentNode();\n              if (parent) {\n                visibleAllChilds(parent);\n              }\n              function visibleAllChilds(parent) {\n                e.visible = true;\n                e.expandTree();\n                var hasPassedClient = false,\n                  hasFailedClient = false,\n                  hasApChild = false;\n                parent.findTreeChildrenNodes().each(el => {\n                  if (el.data['isPassedClient']) {\n                    hasPassedClient = true;\n                  }\n                  if (el.data['isFailedClient']) {\n                    hasFailedClient = true;\n                  }\n                  if (!el.data['isClient']) {\n                    hasApChild = true;\n                  }\n                  el.visible = true;\n                  el.expandTree();\n                  bindButtonValues(el, hasPassedClient, hasFailedClient, hasApChild);\n                });\n                let subParent = parent.findTreeParentNode();\n                bindButtonValues(parent, hasPassedClient, hasFailedClient, hasApChild);\n                if (subParent) {\n                  visibleAllChilds(subParent);\n                }\n              }\n              function bindButtonValues(parent, hasPassedClient, hasFailedClient, hasApChild) {\n                if (hasPassedClient) {\n                  that.APTopology.model.set(parent.data, '_othersPassedExpanded', true);\n                }\n                if (hasFailedClient) {\n                  that.APTopology.model.set(parent.data, '_othersFailedExpanded', true);\n                }\n                if (hasApChild) {\n                  that.APTopology.model.set(parent.data, '_primariesExpanded', true);\n                }\n              }\n              // e.expandTree();\n            });\n\n            if (results.count > 0) that.APTopology.centerRect(results.first().actualBounds);\n          } else {\n            // empty string only clears highlighteds collection\n            that.APTopology.clearHighlighteds();\n          }\n          that.APTopology.commitTransaction('highlight search');\n          that.searchValue.nativeElement.focus();\n          setTimeout(() => {\n            that.zoomfunctionalities('ScrollToPart');\n          }, 100);\n        });\n      }\n    }\n    refreshClick() {\n      if (this.loading == false) {\n        this.searchText = '';\n        this.clientArr = [];\n        this.rgArr = [];\n        this.nodeDataArray = [];\n        this.linkDataArray = [];\n        this.expandedNodes = [];\n        let showConnection = document.getElementById('showConnection');\n        if (showConnection) {\n          showConnection['checked'] = false;\n        }\n        this.clientDeviceSSID = false;\n        this.APTopology.clearHighlighteds();\n        this.getData();\n      }\n    }\n    changeScaleDiagram(scale, type) {\n      var oldscale = this.APTopology.scale;\n      if (type == 'dropDown') {\n        this.APTopology.scale = scale;\n      } else if (type == 'decrease') {\n        this.APTopology.scale = oldscale - 0.25;\n      } else if (type == 'increase') {\n        this.APTopology.scale = oldscale + 0.25;\n      }\n      this.zoomScale = this.APTopology.scale;\n      this.updateDivHeight();\n    }\n    setZoomScaleToFit() {\n      let isScroll = false;\n      let nativeDiagram;\n      const el = this.APDiagram.nativeElement;\n      this.zoomScale = 1;\n      do {\n        this.APTopology.scale = this.zoomScale;\n        isScroll = false;\n      } while (isScroll);\n      this.updateDivHeight();\n    }\n    updateDivHeight() {\n      let divElement = document.getElementById('mainDiagram');\n      divElement.style.height = Number(this.APTopology.documentBounds.height) + 100 + 'px' || '500px';\n      this.APTopology.requestUpdate();\n    }\n    kbpsTO(val, valueOnly, unitOnly) {\n      let kbpsString = this.api.kbpsTO(val, valueOnly, unitOnly);\n      return kbpsString;\n    }\n    bytesToSize(bytes) {\n      const units = ['bytes', 'Kbps', 'Mbps', 'Gbps', 'Tbps', 'Pbps', 'Ebps', 'Zbps', 'Ybps'];\n      let l = 0,\n        n = parseInt(bytes, 10) || 0;\n      while (n >= 1024 && ++l) {\n        n = n / 1024;\n      }\n      return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l];\n    }\n    scroll() {\n      setTimeout(() => {\n        this.issueBox.nativeElement.scrollIntoView();\n      }, 100);\n    }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = this.language['Access Denied'];\n      } else {\n        this.errorInfo = this.ssoAuthService.pageErrorHandle(err);\n      }\n      this.closeAlert();\n      this.error = true;\n    }\n    closeAlert() {\n      this.error = false;\n    }\n    populateAps(apsData, json, prevElement, uplinkEthernetData) {\n      var nodeFreqArr = [];\n      var freqArr = [];\n      if (this.isAPSNodeClicked == true) {\n        this.clientArr = [];\n        let clickedApsValue = this.clickedAPS['ap-issue-list'];\n        this.aps_issue = '';\n        this.aps_issue_length = this.clickedAPS['ap-issue-list'].length;\n        let apIssue = this.clickedAPS['ap-issue-list'],\n          mapTrSerial = [];\n        ;\n        const wapFailed = apIssue.filter(obj => [\"GATEWAY_FAILED\", \"WAP_FAILED\"].includes(obj === null || obj === void 0 ? void 0 : obj.code)).map(obj => obj.serialNumber);\n        apIssue = apIssue.filter((obj, i) => {\n          if (!(wapFailed.includes(obj === null || obj === void 0 ? void 0 : obj.serialNumber) && (obj === null || obj === void 0 ? void 0 : obj.code) == \"MAP_CONNECTIVITY_FAILED\")) {\n            return obj;\n          } else {\n            mapTrSerial.push(obj === null || obj === void 0 ? void 0 : obj.serialNumber);\n          }\n        });\n        for (let i = apIssue.length - 1; i >= 0; i--) {\n          if (mapTrSerial.includes(apIssue[i][\"serialNumber\"]) && [\"GATEWAY_FAILED\", \"WAP_FAILED\"].includes(apIssue[i][\"code\"])) {\n            apIssue.push({\n              \"code\": \"UI_CREATED_ISSUE_FOR_TR069MAPDOWN\",\n              \"subscriberId\": \"\",\n              \"serialNumber\": apIssue[i][\"serialNumber\"],\n              \"source\": apIssue[i][\"serialNumber\"],\n              \"sourceId\": apIssue[i][\"serialNumber\"],\n              \"type\": \"ROUTER\",\n              \"severity\": 0,\n              \"reason\": \"High Operating Temperature Observed\",\n              \"isValid\": true\n            });\n            apIssue.splice(i, 1);\n          }\n        }\n        this.issueData = apIssue.filter(obj => {\n          var _a, _b;\n          return this.issueCode.indexOf(obj.hasOwnProperty('code') ? (_a = obj.code) === null || _a === void 0 ? void 0 : _a.toUpperCase() : (_b = obj.Code) === null || _b === void 0 ? void 0 : _b.toUpperCase()) > -1;\n        });\n        this.issueData = this.issueData.sort((a, b) => a.severity < b.severity ? -1 : a.severity > b.severity ? 1 : 0);\n        this.issueList = this.issueData;\n        this.totalissues = this.issueList.length;\n        this.initalize();\n        for (let i = 0; i < apIssue.length; i++) {\n          this.issueDescription(apIssue[i]['code'], this.issueType, this.issueName, i);\n        }\n        if (this.isBHNodeClicked == true) {\n          this.backhaul_issue = '';\n          let clickedBackhaulValue = this.clickedBackhaul;\n          for (let j = 0; j < clickedBackhaulValue.length; j++) {\n            this.issueDescription(clickedBackhaulValue[j]['code'], this.bhissueType, this.bhissueName, j);\n          }\n        }\n      }\n      apsData.forEach(element => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n        let rgMainAPDetails = '';\n        let modelName = '';\n        let manufactureName = '';\n        let apsHostname = '';\n        if (!element['isRg']) {\n          element['category'] = 'otherNode';\n        }\n        if (!element.ssid) {\n          element['backhaul'] = {\n            // \"channel\":100,\n            // \"rx-phy-rate\":915152,\n            // \"tx-phy-rate\":478266,\n            // \"backhaul-color\":\"green\",\n            // \"rssi\":-9,\n            // \"rtx-packets\":82171,\n            // \"transmit-drops\":0,\n            // \"Avg-Wifi-score\":4.98,\n            // \"SNR\":85,\n            // \"Airtime-usage\":0,\n            // \"MACAddress\":\"b8:94:70:29:9c:d0\",\n            // \"Connection-type\":\"WiFi\",\n            // \"SSID\":\"Calix-5G-backhaulFF9B55\",\n            // \"Mode\":\"11ax\",\n            // \"AccessPoint\":\"CXNK00FF9B55\",\n            \"Band\": \"5\"\n            // \"satPlacementRating\":11,\n            // \"client-efficiency-score\":0.3982\n          };\n          // element['backhaul']['Band'] = 5;\n          element.ssid = \"Backhaul SSID\";\n        }\n        let apsIpAdd = element['ip'] ? `${element['ip']}` : `-`;\n        //mesh name filed\n        let apsName = element['name'] ? `${element['name']}` : `-`;\n        let apsMacAdd = element['mac'] ? `${element['mac']}` : `-`;\n        let apsSwVersion = element['version'] ? `${element['version']}` : `-`;\n        let apsSerialNo = element['sn'] ? `${element['sn']}` : `-`;\n        // let selctedModelMesh = JSON.parse(sessionStorage.getItem('calix.deviceData')).find((obj) => obj.modelName == modelName); \n        //let apsHostname = element['hostname'] ? `${element['hostname']}` : `-`;\n        if (this.makemodel) {\n          for (let n = 0; n < this.makemodel.length; n++) {\n            if (element.sn == this.makemodel[n]['sno']) {\n              element['model'] = `${this.makemodel[n]['model']}`;\n              modelName = this.makemodel[n]['model'];\n              let selectedMesh = JSON.parse(sessionStorage.getItem('calix.deviceData')).find(obj => obj.modelName == modelName);\n              if (selectedMesh.opModeWithOnt == 'WAP') {\n                apsHostname = 'Mesh(SAT)';\n              }\n              manufactureName = this.makemodel[n]['manufacture'];\n            }\n          }\n        }\n        let apsModel = modelName ? modelName : `-`;\n        let apsManufacture = manufactureName ? manufactureName : `-`;\n        let effScore = '';\n        if ((_a = element['backhaul']) === null || _a === void 0 ? void 0 : _a['client-efficiency-score']) {\n          let clientEffScore = Number((Number((_b = element['backhaul']) === null || _b === void 0 ? void 0 : _b['client-efficiency-score']) * 100).toFixed(2));\n          effScore = `${clientEffScore}%`;\n        }\n        let cliEffScore = effScore ? effScore : `-`;\n        // Tx Phy Rate: ${this.kbpsTO(\n        //       element.backhaul['tx-phy-rate']\n        //     )}bps`\n        // if (element['radio-info']) {\n        //   var radioInfo = element['radio-info'];\n        //   let freq_band = '';\n        //   if (radioInfo.length > 0) {\n        //     for (let fband = 0; fband < radioInfo.length; fband++) {\n        //       let fbandValue = radioInfo[fband]['freq-band'] + 'GHz';\n        //       freqArr.push(fbandValue);\n        //       nodeFreqArr.push(radioInfo[fband]['freq-band']);\n        //     }\n        //     freqArr = [...new Set(freqArr)];\n        //     freq_band = freqArr.join(', ');\n        //   }\n        //   rgMainAPDetails += freq_band ? `\\n Frequency Band: ${freq_band}` : ``;\n        //   var uniq = [...new Set(nodeFreqArr)];\n        //   uniq.forEach((element) => {\n        //     freqBandValue = freqBandValue + element + 'GHz / ';\n        //   });\n        //   freqBandValue = freqBandValue.slice(0, -3);\n        // }\n        var freqBandValue = '';\n        if (element['backhaul'] && Object.keys(element['backhaul']).length > 0) {\n          freqBandValue = element['backhaul'].Band + 'GHz';\n          // freqBandValue = '6GHz';\n        }\n\n        let totClient = '';\n        if (element.clients) {\n          for (let i = 0; i < element.clients.length; i++) {\n            if (element.clients[i]['client-color'] == 'red') {\n              this.isapWithIssue = true;\n            }\n          }\n          if (this.isapWithIssue == true) {\n            element['isapWithIssue'] = true;\n          }\n          if (element.clients.length > 0) {\n            totClient = `${element.clients.length}`;\n          }\n        }\n        let apsTotClient = totClient ? totClient : 0;\n        let apsPassClients = element['passed-clients'] ? element['passed-clients'] : `0`;\n        let apsFailClients = element['failed-clients'] ? element['failed-clients'] : ` 0`;\n        element['columnDefinitions'] = [\n        // each column definition needs to specify the column used\n        {\n          attr: \"property\",\n          text: \"\",\n          column: 0\n        }, {\n          attr: \"value\",\n          text: \"\",\n          column: 1\n        }];\n        if (element['ap-issue-list'] && !this.isAPSNodeClicked) {\n          this.aps_issue = '';\n          this.aps_issue_length = element['ap-issue-list'].length;\n          let apIssue = element['ap-issue-list'],\n            mapTrSerial = [];\n          ;\n          const wapFailed = apIssue.filter(obj => [\"GATEWAY_FAILED\", \"WAP_FAILED\"].includes(obj === null || obj === void 0 ? void 0 : obj.code)).map(obj => obj.serialNumber);\n          apIssue = apIssue.filter((obj, i) => {\n            if (!(wapFailed.includes(obj === null || obj === void 0 ? void 0 : obj.serialNumber) && (obj === null || obj === void 0 ? void 0 : obj.code) == \"MAP_CONNECTIVITY_FAILED\")) {\n              return obj;\n            } else {\n              mapTrSerial.push(obj === null || obj === void 0 ? void 0 : obj.serialNumber);\n            }\n          });\n          for (let i = apIssue.length - 1; i >= 0; i--) {\n            if (mapTrSerial.includes(apIssue[i][\"serialNumber\"]) && [\"GATEWAY_FAILED\", \"WAP_FAILED\"].includes(apIssue[i][\"code\"])) {\n              apIssue.push({\n                \"code\": \"UI_CREATED_ISSUE_FOR_TR069MAPDOWN\",\n                \"subscriberId\": \"\",\n                \"serialNumber\": apIssue[i][\"serialNumber\"],\n                \"source\": apIssue[i][\"serialNumber\"],\n                \"sourceId\": apIssue[i][\"serialNumber\"],\n                \"type\": \"ROUTER\",\n                \"severity\": 0,\n                \"reason\": \"High Operating Temperature Observed\",\n                \"isValid\": true\n              });\n              apIssue.splice(i, 1);\n            }\n          }\n          this.issueData = apIssue.filter(obj => {\n            var _a, _b;\n            return this.issueCode.indexOf(obj.hasOwnProperty('code') ? (_a = obj.code) === null || _a === void 0 ? void 0 : _a.toUpperCase() : (_b = obj.Code) === null || _b === void 0 ? void 0 : _b.toUpperCase()) > -1;\n          });\n          this.issueData = this.issueData.sort((a, b) => a.severity < b.severity ? -1 : a.severity > b.severity ? 1 : 0);\n          this.issueList = this.issueData;\n          this.totalissues = this.issueList.length;\n          this.initalize();\n          for (let i = 0; i < apIssue.length; i++) {\n            this.issueDescription(apIssue[i].code, 'aps', '', i);\n          }\n          if ((_c = element['backhaul']) === null || _c === void 0 ? void 0 : _c['backhaul-issue-list']) {\n            //   if(this.backhaul_issue == '') {\n            this.backhaul_issue = '';\n            for (let j = 0; j < ((_d = element['backhaul']) === null || _d === void 0 ? void 0 : _d['backhaul-issue-list'].length); j++) {\n              this.issueDescription((_e = element['backhaul']) === null || _e === void 0 ? void 0 : _e['backhaul-issue-list'][j].code, 'backhaul', '', j);\n            }\n          }\n        }\n        // }\n        let apsTechNote = element['ap-tech-note'] ? this.aps_issue : `-`;\n        let backhaulTechNote = ((_f = element['backhaul']) === null || _f === void 0 ? void 0 : _f['backhaul-tech-note']) ? this.backhaul_issue : `-`;\n        let EffScore = {};\n        if (this.swVersion > 21.2) {\n          EffScore = {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Efficiency_Score\n            }, {\n              attr: \"value\",\n              text: `${cliEffScore}`\n            }]\n          };\n        }\n        element['rgData'] = [{\n          columns: [{\n            attr: \"property\",\n            text: this.language.IP_Address\n          }, {\n            attr: \"value\",\n            text: `${apsIpAdd}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.MAC_Address\n          }, {\n            attr: \"value\",\n            text: `${apsMacAdd}`\n          }]\n        },\n        //mesh name filed\n        {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Name\n          }, {\n            attr: \"value\",\n            text: `${apsName}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Software_Version\n          }, {\n            attr: \"value\",\n            text: `${apsSwVersion}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Serial_Number\n          }, {\n            attr: \"value\",\n            text: `${apsSerialNo}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Device\n          }, {\n            attr: \"value\",\n            text: `${apsHostname}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Model\n          }, {\n            attr: \"value\",\n            text: `${apsModel}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Manufacturer\n          }, {\n            attr: \"value\",\n            text: `${apsManufacture}`\n          }]\n        }, EffScore, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Total_Clients\n          }, {\n            attr: \"value\",\n            text: `${apsTotClient}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Devices_without_issues_and_warnings\n          }, {\n            attr: \"value\",\n            text: `${apsPassClients}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Devices_with_issues_and_warnings\n          }, {\n            attr: \"value\",\n            text: `${apsFailClients}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.issue\n          }, {\n            attr: \"value\",\n            text: `${apsTechNote}`\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Backhaul_Issue\n          }, {\n            attr: \"value\",\n            text: `${backhaulTechNote}`\n          }]\n        }];\n        // element['tooltip'] = rgMainAPDetails;\n        // Ap Node Background color based on condition\n        if (element['ap-color'] == 'green' && ((_g = element['backhaul']) === null || _g === void 0 ? void 0 : _g['backhaul-color']) == 'green') {\n          element['color'] = this.nodeColor['green'];\n          element['source'] = this.accessPointImages['green'];\n        } else if (element['ap-color'] == 'green' || ((_h = element['backhaul']) === null || _h === void 0 ? void 0 : _h['backhaul-color']) == 'red') {\n          element['color'] = this.nodeColor['green'];\n          element['source'] = this.accessPointImages['green'];\n        } else if (element['ap-color'] == 'red' || ((_j = element['backhaul']) === null || _j === void 0 ? void 0 : _j['backhaul-color']) == 'red') {\n          element['color'] = this.nodeColor['red'];\n          element['source'] = this.accessPointImages['red'];\n        } else if (element['ap-color'] == 'yellow' || ((_k = element['backhaul']) === null || _k === void 0 ? void 0 : _k['backhaul-color']) == 'yellow') {\n          element['color'] = '#fff17a8c';\n          element['source'] = this.accessPointImages['yellow'];\n        }\n        if (element['ap-online'] == 'false') {\n          element['color'] = this.nodeColor['red'];\n        }\n        element['width'] = 30;\n        element['height'] = 30;\n        // element['source'] = this.accessPointImages[element['ap-color']];\n        element['key'] = element.mac;\n        element['isAPS'] = true;\n        if (element['name']) {\n          element['isInternet'] = true;\n        }\n        element['parent-host-name'] = prevElement['mac'];\n        if (element['name']) {\n          if (element['hostname']) {\n            element['label'] = `${element['hostname']}\\n ${element['name']}`;\n          } else {\n            element['label'] = `${element['sn']} \\n ${element['name']}`;\n          }\n        } else {\n          if (element['hostname']) {\n            element['label'] = `${element['hostname']}`;\n          } else {\n            element['label'] = `${element['sn']}`;\n          }\n        }\n        let backhaul_rx_phy_rate = ((_l = element.backhaul) === null || _l === void 0 ? void 0 : _l['rx-phy-rate']) ? this.kbpsTO((_m = element.backhaul) === null || _m === void 0 ? void 0 : _m['rx-phy-rate']) + 'bps' : this.kbpsTO(0) + 'bps';\n        // element.backhaul['rx-phy-rate'] = backhaul_rx_phy_rate;\n        let backhaul_tx_phy_rate = ((_o = element.backhaul) === null || _o === void 0 ? void 0 : _o['tx-phy-rate']) ? this.kbpsTO((_p = element.backhaul) === null || _p === void 0 ? void 0 : _p['tx-phy-rate']) + 'bps' : this.kbpsTO(0) + 'bps';\n        // element.backhaul['tx-phy-rate'] = backhaul_tx_phy_rate;\n        if (element['int-type'] == 'WiFi' && element['backhaul']['satPlacementRating']) {\n          if (element['backhaul']['satPlacementRating'] == 10) {\n            element['wirelessIcon'] = this.imagesObj['wireless-excellent'];\n            // element['rssi_signal_strength'] = 'Excellent';\n            element['satellite_placement'] = 'Excellent';\n          } else if (element['backhaul']['satPlacementRating'] == 11) {\n            element['wirelessIcon'] = this.imagesObj['wireless-good'];\n            // element['rssi_signal_strength'] = 'Good';\n            element['satellite_placement'] = 'Good';\n          } else if (element['backhaul']['satPlacementRating'] == 12) {\n            element['wirelessIcon'] = this.imagesObj['wireless-good'];\n            // No icons as of now so good's icon was used\n            // element['rssi_signal_strength'] = 'Ok';\n            element['satellite_placement'] = 'Ok';\n          } else if (element['backhaul']['satPlacementRating'] == 13) {\n            element['wirelessIcon'] = this.imagesObj['wireless-toofar'];\n            // element['rssi_signal_strength'] = 'Too Far';\n            element['satellite_placement'] = 'Too Far';\n          }\n          // no placementrating defined for too close \n          else if (element['backhaul']['satPlacementRating'] == 0) {\n            element['wirelessIcon'] = this.imagesObj['wireless-tooclose'];\n            // element['rssi_signal_strength'] = 'Too Close';\n            element['satellite_placement'] = 'Too Close';\n          } else if (element['backhaul']['satPlacementRating'] == -1) {\n            element['wirelessIcon'] = this.imagesObj['wireless-unavailable'];\n            // element['rssi_signal_strength'] = 'Too Close';\n            element['satellite_placement'] = 'Unknown';\n          }\n          if (element['backhaul']['rssi'] >= -50) {\n            // element['wirelessIcon'] = this.imagesObj['wireless-green'];\n            element['rssi_signal_strength'] = 'Excellent';\n          } else if (element['backhaul']['rssi'] >= -66 && element['backhaul']['rssi'] <= -51) {\n            // element['wirelessIcon'] = this.imagesObj['wireless-green'];\n            element['rssi_signal_strength'] = 'Good';\n          } else if (element['backhaul']['rssi'] >= -69 && element['backhaul']['rssi'] <= -67) {\n            // element['wirelessIcon'] = this.imagesObj['wireless-orange'];\n            element['rssi_signal_strength'] = 'Ok';\n          } else if (element['backhaul']['rssi'] >= -79 && element['backhaul']['rssi'] <= -70) {\n            // element['wirelessIcon'] = this.imagesObj['wireless-red'];\n            element['rssi_signal_strength'] = 'Weak';\n          } else if (element['backhaul']['rssi'] <= -80) {\n            // element['wirelessIcon'] = this.imagesObj['wireless-red'];\n            element['rssi_signal_strength'] = 'Very Weak';\n          }\n          element['ap_rssi'] = element['backhaul']['rssi'];\n          element['satPlacementRating'] = element['backhaul']['satPlacementRating'];\n          element['ap_rssi_signal_strength'] = element['backhaul']['rssi'];\n          element['ap_backhaul_tech_note'] = ((_q = element['backhaul']) === null || _q === void 0 ? void 0 : _q['backhaul-tech-note']) || '-';\n          let satellitePlacement = element['satellite_placement'] ? element['satellite_placement'] : `-`;\n          let rssi = element['ap_rssi'] ? element['ap_rssi'] : `-`;\n          let signalStrength = element['rssi_signal_strength'] ? element['rssi_signal_strength'] : `-`;\n          let issues = element['ap_backhaul_tech_note'] ? this.backhaul_issue : `-`;\n          element['columnDefinitions'] = [{\n            attr: \"property\",\n            text: \"\",\n            column: 0\n          }, {\n            attr: \"value\",\n            text: \"\",\n            column: 1\n          }];\n          element['ap_rssi_tooltip'] = [{\n            columns: [{\n              attr: \"property\",\n              text: this.language.Satellite_Placement\n            }, {\n              attr: \"value\",\n              text: `${satellitePlacement}`\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: \"RSSI\"\n            }, {\n              attr: \"value\",\n              text: `${rssi} dBm`\n            }]\n          },\n          // { columns: [{ attr: \"property\", text: this.language.Signal_Strength }, { attr: \"value\", text: `${signalStrength}` }] },\n          {\n            columns: [{\n              attr: \"property\",\n              text: `${this.language.issue} ${this.language.warning}`\n            }, {\n              attr: \"value\",\n              text: `${issues}`\n            }]\n          }];\n          // element['ap_rssi_tooltip'] =\n          //   'Satellite Placement : ' +\n          //   element['satellite_placement'] +\n          //   '\\n' +\n          //   'RSSI : ' +\n          //   element['ap_rssi'] +\n          //   ' dBm' +\n          //   '\\n' +\n          //   'Signal Strength : ' +\n          //   element['rssi_signal_strength'] +\n          //   '\\n' +\n          //   'Issue(s) and warning(s): ' +\n          //   element['ap_backhaul_tech_note'];\n          // rgMainAPDetails += element['backhaul'].rssi\n          //   ? `\\n RSSI : ${element['backhaul'].rssi}dBm`\n          //   : ``;\n          // rgMainAPDetails += element['backhaul']['tx-phy-rate']\n          //   ? `\\n TX Phy Rate : ${this.kbpsTO(element.backhaul['tx-phy-rate'])}bps`\n          //   : ``;\n          // rgMainAPDetails += element['backhaul']['rx-phy-rate']\n          //   ? `\\n RX Phy Rate : ${this.kbpsTO(element.backhaul['rx-phy-rate'])}bps`\n          //   : ``;\n        }\n        // var tx_rate = element.backhaul['tx-phy-rate']\n        //   ? ` \\n Tx Phy Rate: ${this.kbpsTO(\n        //       element.backhaul['tx-phy-rate']\n        //     )}bps`\n        //   : `\\n Tx Phy Rate: ${this.kbpsTO(0)}bps`;\n        // var rx_rate = element.backhaul['rx-phy-rate']\n        //   ? ` \\n Rx Phy Rate: ${this.kbpsTO(\n        //       element.backhaul['rx-phy-rate']\n        //     )}bps`\n        //   : ` \\n Rx Phy Rate: ${this.kbpsTO(0)}bps`;\n        // var backhaul_note = element.backhaul['backhaul-tech-note']\n        //   ? ` \\n Backhaul Tech Note : ${element.backhaul['backhaul-tech-note']}`\n        //   : '';\n        this.nodeDataArray.push(element);\n        if (this.clientDeviceSSID && element['ap-online'] == 'true') {\n          let backhaulColor = '#f3f3f3';\n          // if(element['backhaul']['backhaul-color'] == 'green'){\n          //   backhaulColor = this.nodeColor['green'];\n          // } else if(element['backhaul']['backhaul-color'] == 'red') {\n          //   backhaulColor = this.nodeColor['red'];\n          // } else if(element['backhaul']['backhaul-color'] == 'yellow') {\n          //   backhaulColor = this.nodeColor['yellow'];\n          // } else {\n          //   backhaulColor = '#f3f3f3';\n          // }\n          var ethPortLabel = 'Ethernet Port';\n          if (element['eth-port']) {\n            ethPortLabel = `${ethPortLabel} ${element['eth-port']}`;\n          }\n          var channelNumber = element['Channel-number'] ? `\\n Channel: ${element['Channel-number']}` : '',\n            // if you are changing this ssid key and ethernet's key for some purpose, then make sure you change that in all pushed and filtered array of expandedNodes array\n            ssid = {\n              text: `ssid`,\n              key: `${prevElement.sn}-${element.ssid}`,\n              accessPointId: '',\n              color: backhaulColor,\n              label: element.ssid,\n              source: 'assets/images/Icon_Device_Wifi scaled.svg',\n              freqBand: freqBandValue,\n              // tooltip: `Connection Type: ${element['int-type']} \\n SSID: ${element['ssid']} \\n Channel: ${element.backhaul['channel']}`,\n              ssidKey: '',\n              isAPSSID: true,\n              isConnectivityNode: true,\n              category: 'otherNode'\n            },\n            ethernet = {\n              text: `ethernet`,\n              key: `ethernet-${element['eth-port']}-${prevElement.sn}`,\n              accessPointId: '',\n              color: '#f3f3f3',\n              label: ethPortLabel,\n              source: 'assets/images/ethernet.png',\n              width: 17,\n              height: 30,\n              // tooltip: `Connection Type: ${element['int-type']}`,\n              isAPSSID: true,\n              isEthernet: true,\n              isConnectivityNode: true,\n              category: 'otherNode'\n            };\n          ssid['columnDefinitions'] = [{\n            attr: \"property\",\n            text: \"\",\n            column: 0\n          }, {\n            attr: \"value\",\n            text: \"\",\n            column: 1\n          }];\n          let airtimeUsage = '-';\n          let airtimeInterference = '-';\n          if (prevElement['radio-airtime']) {\n            prevElement['radio-airtime'].forEach(el => {\n              var _a;\n              var getAirtimeBandVal = el.name.split('RadioAirtime');\n              if ((_a = element === null || element === void 0 ? void 0 : element.ssid) === null || _a === void 0 ? void 0 : _a.includes(getAirtimeBandVal[1])) {\n                airtimeUsage = el.result['ChannelUtilization'];\n                airtimeInterference = el.result['ChannelInterferenceTime'];\n              }\n            });\n          }\n          ssid['rgData'] = [{\n            columns: [{\n              attr: \"property\",\n              text: this.language.Connection_Type\n            }, {\n              attr: \"value\",\n              text: element['int-type']\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: \"SSID\"\n            }, {\n              attr: \"value\",\n              text: element['ssid']\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Channel\n            }, {\n              attr: \"value\",\n              text: ((_r = element.backhaul) === null || _r === void 0 ? void 0 : _r['channel']) ? (_s = element.backhaul) === null || _s === void 0 ? void 0 : _s['channel'] : '-'\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: 'Airtime Utilization'\n            }, {\n              attr: \"value\",\n              text: airtimeUsage\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: 'Airtime Interference'\n            }, {\n              attr: \"value\",\n              text: airtimeInterference\n            }]\n          }];\n          ethernet['columnDefinitions'] = [{\n            attr: \"property\",\n            text: \"\",\n            column: 0\n          }, {\n            attr: \"value\",\n            text: \"\",\n            column: 1\n          }];\n          ethernet['rgData'] = [{\n            columns: [{\n              attr: \"property\",\n              text: this.language.Connection_Type\n            }, {\n              attr: \"value\",\n              text: element['int-type']\n            }]\n          }];\n          prevElement['ethernetId'] = ethernet['key'];\n          prevElement['ssidId'] = ssid['key'];\n          let trsRecRate;\n          let linkColumn = [\n          // each column definition needs to specify the column used\n          {\n            attr: \"property\",\n            text: \"\",\n            column: 0\n          }, {\n            attr: \"value\",\n            text: \"\",\n            column: 1\n          }];\n          if (element && element['int-type'] == 'WiFi') {\n            trsRecRate = [{\n              columns: [{\n                attr: \"property\",\n                text: this.language.Transmit_rate\n              }, {\n                attr: \"value\",\n                text: backhaul_tx_phy_rate\n              }]\n            }, {\n              columns: [{\n                attr: \"property\",\n                text: this.language.Receive_rate\n              }, {\n                attr: \"value\",\n                text: backhaul_rx_phy_rate\n              }]\n            }];\n          } else {\n            trsRecRate = [{\n              columns: [{\n                attr: \"property\",\n                text: this.language.Connection_Type\n              }, {\n                attr: \"value\",\n                text: element['int-type']\n              }]\n            }];\n          }\n          if (element['int-type'] == 'WiFi') {\n            if (element.ssid) {\n              let isSSIDExists = this.nodeDataArray.find(el => el.key == ssid.key);\n              if (!isSSIDExists) {\n                this.nodeDataArray.push(ssid);\n                ssid['ssidKey'] = element.ssid;\n              }\n            }\n            if (!this.linkDataArray.find(el => el.from == prevElement['mac'] && el.to == ssid.key)) {\n              let linkColumn = [\n              // each column definition needs to specify the column used\n              {\n                attr: \"property\",\n                text: \"\",\n                column: 0\n              }, {\n                attr: \"value\",\n                text: \"\",\n                column: 1\n              }];\n              let linkValue = [{\n                columns: [{\n                  attr: \"property\",\n                  text: this.language.Connection_Type\n                }, {\n                  attr: \"value\",\n                  text: element['int-type']\n                }]\n              }, {\n                columns: [{\n                  attr: \"property\",\n                  text: \"SSID\"\n                }, {\n                  attr: \"value\",\n                  text: element['ssid']\n                }]\n              }, {\n                columns: [{\n                  attr: \"property\",\n                  text: this.language.Band\n                }, {\n                  attr: \"value\",\n                  text: `${element['backhaul']['Band']}GHz`\n                }]\n              }, {\n                columns: [{\n                  attr: \"property\",\n                  text: this.language.Mode\n                }, {\n                  attr: \"value\",\n                  text: element['backhaul']['Mode']\n                }]\n              }];\n              if (element.ssid) {\n                this.linkDataArray.push({\n                  from: prevElement['mac'],\n                  to: ssid.key,\n                  color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n                  thick: 2,\n                  routing: go.Link.Normal,\n                  linkColumn: linkColumn,\n                  linkText: linkValue\n                });\n              }\n            }\n            if (element.ssid) {\n              this.linkDataArray.push({\n                from: ssid.key,\n                to: element.mac,\n                color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n                thick: 2,\n                routing: go.Link.Normal,\n                linkColumn: linkColumn,\n                linkText: trsRecRate\n              });\n            } else {\n              this.linkDataArray.push({\n                from: prevElement['mac'],\n                to: element.mac,\n                color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n                thick: 2,\n                routing: go.Link.Normal,\n                name: ``\n              });\n            }\n          } else if (element['int-type'] === 'eth' || element['int-type'] == 'LAN') {\n            if (element['int-type']) {\n              let isSSIDExists = this.nodeDataArray.find(el => el.key == ethernet.key);\n              if (!isSSIDExists) {\n                this.nodeDataArray.push(ethernet);\n              }\n            }\n            if (!this.linkDataArray.find(el => el.from == prevElement['mac'] && el.to == ethernet.key)) {\n              this.linkDataArray.push({\n                from: prevElement['mac'],\n                to: ethernet.key,\n                color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n                thick: 2,\n                routing: go.Link.Normal,\n                linkColumn: linkColumn,\n                linkText: [{\n                  columns: [{\n                    attr: \"property\",\n                    text: this.language.Connection_Type\n                  }, {\n                    attr: \"value\",\n                    text: element['int-type']\n                  }]\n                }]\n                // name: `Connection Type: ${element['int-type']}`,\n              });\n            }\n\n            this.linkDataArray.push({\n              from: ethernet.key,\n              to: element.mac,\n              color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n              thick: 2,\n              routing: go.Link.Normal,\n              linkColumn: linkColumn,\n              linkText: trsRecRate\n            });\n          } else {\n            this.linkDataArray.push({\n              from: prevElement['mac'],\n              to: element.mac,\n              color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n              thick: 2,\n              routing: go.Link.Normal,\n              name: ``\n            });\n          }\n        } else {\n          let linkColumn = [\n          // each column definition needs to specify the column used\n          {\n            attr: \"property\",\n            text: \"\",\n            column: 0\n          }, {\n            attr: \"value\",\n            text: \"\",\n            column: 1\n          }];\n          if (element['ap-online'] == 'false' && this.clientDeviceSSID) {\n            element['offlineAP'] = true;\n          }\n          if (element['int-type'] === 'eth' || element['int-type'] === 'LAN') {\n            let color = 'black';\n            // uplinkEthernetData['key'] = `ethernet-${prevElement.sn}`;\n            // this.nodeDataArray.push(uplinkEthernetData);\n            // this.linkDataArray.push({\n            //   from: prevElement['mac'],\n            //   to: uplinkEthernetData.key,\n            //   color:\n            //     element['ap-online'] == 'true'\n            //       ? this.nodeLinkColor['green']\n            //       : this.nodeLinkColor['red'],\n            //   thick: 2,\n            //   routing: go.Link.Normal,\n            //   name: `${prevElement['hostname']} to Ethernet`,\n            // });\n            // this.linkDataArray.push({\n            //   from: uplinkEthernetData.key,\n            //   to: element.mac,\n            //   color:\n            //     element['ap-online'] == 'true'\n            //       ? this.nodeLinkColor['green']\n            //       : this.nodeLinkColor['red'],\n            //   thick: 2,\n            //   routing: go.Link.Normal,\n            //   name: `Ethernet to ${element.hostname}`,\n            // });\n            this.linkDataArray.push({\n              from: prevElement['mac'],\n              to: element.mac,\n              color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n              thick: 2,\n              routing: go.Link.Normal,\n              linkColumn: linkColumn,\n              linkText: [{\n                columns: [{\n                  attr: \"property\",\n                  text: this.language.Connection_Type\n                }, {\n                  attr: \"value\",\n                  text: element['int-type']\n                }]\n              }]\n              // name: `Connection Type: ${element['int-type']}`,\n            });\n          } else {\n            let trsRecRate;\n            if (element && element['int-type'] == 'WiFi') {\n              trsRecRate = [{\n                columns: [{\n                  attr: \"property\",\n                  text: this.language.Transmit_rate\n                }, {\n                  attr: \"value\",\n                  text: backhaul_tx_phy_rate\n                }]\n              }, {\n                columns: [{\n                  attr: \"property\",\n                  text: this.language.Receive_rate\n                }, {\n                  attr: \"value\",\n                  text: backhaul_rx_phy_rate\n                }]\n              }];\n            } else if (element && element['int-type'] == 'LAN') {\n              trsRecRate = [{\n                columns: [{\n                  attr: \"property\",\n                  text: this.language.Connection_Type\n                }, {\n                  attr: \"value\",\n                  text: element['int-type']\n                }]\n              }];\n            } else {\n              trsRecRate = ``;\n            }\n            if (element['ap-online'] == 'false') {\n              trsRecRate = ``;\n            }\n            this.linkDataArray.push({\n              from: prevElement['mac'],\n              to: element.mac,\n              color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n              thick: 2,\n              routing: go.Link.Normal,\n              linkColumn: linkColumn,\n              linkText: trsRecRate\n            });\n          }\n        }\n        // Check for child node\n        if (Array.isArray(element.aps) && element.aps.length > 0) {\n          this.populateAps(element.aps, json, element, uplinkEthernetData);\n        }\n      });\n    }\n    populateClientDevices(clientDevices, parentNode) {\n      clientDevices.sort(function (a, b) {\n        var _a, _b, _c, _d;\n        if (((_a = a.hostname) === null || _a === void 0 ? void 0 : _a.toLowerCase()) < ((_b = b.hostname) === null || _b === void 0 ? void 0 : _b.toLowerCase())) {\n          return -1;\n        }\n        if (((_c = a.hostname) === null || _c === void 0 ? void 0 : _c.toLowerCase()) > ((_d = b.hostname) === null || _d === void 0 ? void 0 : _d.toLowerCase())) {\n          return 1;\n        }\n        return 0;\n      });\n      var freqBandPassedArr = [];\n      var freqBandFailedArr = [];\n      if (this.isClientNodeClicked == true) {\n        this.clientArr = [];\n        this.client_issue = '';\n        let clickedClientValue = this.clickedClient['client-issue-list'];\n        for (let i = 0; i < clickedClientValue.length; i++) {\n          this.issueDescription(clickedClientValue[i]['code'], this.issueType, this.issueName, i);\n        }\n      }\n      clientDevices.forEach(element => {\n        this.clientNodeDetails(element);\n        element['key'] = element.mac;\n        element['category'] = 'otherNode';\n        element['parent-host-name'] = parentNode['key'];\n        var signalStatus = element['signal-strength-test-result'];\n        var legacyStatus = element['legacy-device-test-result'];\n        var phyRateTestResult = element['phy-rate-test-result'];\n        // let linkDetails = '';\n        let clientLinkstrength = element['signal-strength'] ? `${element['signal-strength']} dBm` : `-`;\n        let clientWifiMode = element['wifi-mode'] ? element['wifi-mode'] : `-`;\n        let dsPhyRate = ``;\n        if (element['DS-phy-rate']) {\n          dsPhyRate = this.kbpsTO(element['DS-phy-rate']) + 'bps';\n        } else {\n          dsPhyRate = this.kbpsTO(0) + 'bps';\n        }\n        let usPhyRate = ``;\n        if (element['US-phy-rate']) {\n          usPhyRate = this.kbpsTO(element['US-phy-rate']) + 'bps';\n        } else {\n          usPhyRate = this.kbpsTO(0) + 'bps';\n        }\n        let clientFreBnd = element['freq-band'] ? `${element['freq-band']}GHz` : `-`;\n        if (element['intf-type'] == 'WiFi') {\n          let clientType = element['ssid'] ? element['ssid'] : `-`;\n        }\n        let clientConType = element['intf-type'] ? element['intf-type'] : `-`;\n        // var eachLine = linkDetails.split('\\n');\n        // if (eachLine.length - 1 == 1) {\n        //   linkDetails += `\\n`;\n        // }\n        let clientHostname = '';\n        if (element.hostname) {\n          clientHostname = element.hostname;\n        } else {\n          clientHostname = element['mac'];\n        }\n        let linkColumn = [{\n          attr: \"property\",\n          text: \"\",\n          column: 0\n        }, {\n          attr: \"value\",\n          text: \"\",\n          column: 1\n        }];\n        let linkDetails = [{\n          columns: [{\n            attr: \"property\",\n            text: \"RSSI\"\n          }, {\n            attr: \"value\",\n            text: clientLinkstrength\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Mode\n          }, {\n            attr: \"value\",\n            text: clientWifiMode\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.DS_PHY_Rate\n          }, {\n            attr: \"value\",\n            text: dsPhyRate\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.US_PHY_Rate\n          }, {\n            attr: \"value\",\n            text: usPhyRate\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Band\n          }, {\n            attr: \"value\",\n            text: clientFreBnd\n          }]\n        }, {\n          columns: [{\n            attr: \"property\",\n            text: this.language.Connection_Type\n          }, {\n            attr: \"value\",\n            text: clientConType\n          }]\n        }];\n        let linkConType = [{\n          columns: [{\n            attr: \"property\",\n            text: this.language.Connection_Type\n          }, {\n            attr: \"value\",\n            text: element['intf-type']\n          }]\n        }];\n        // linkDetails = linkDetails.replace(/[^\\x20-\\x7E]/gmi, \"\");\n        element['label'] = clientHostname;\n        // element['tooltip'] = this.clientDetails;\n        element['width'] = 30;\n        element['height'] = 30;\n        element['model'] = element['fingerprint-model'];\n        let clientLinkColor = '';\n        if (element['client-color'] == 'red') {\n          element['color'] = this.nodeColor.red;\n          clientLinkColor = this.nodeLinkColor.red;\n        } else if (element['client-color'] == 'green') {\n          element['color'] = this.nodeColor.green;\n          clientLinkColor = this.nodeLinkColor.green;\n        } else if (element['client-color'] == 'yellow') {\n          element['color'] = this.nodeColor.yellow;\n          clientLinkColor = this.nodeLinkColor.yellow;\n        } else {\n          element['color'] = '#f3f3f3';\n        }\n        // if (\n        //   signalStatus == 'PASS' &&\n        //   legacyStatus == 'PASS' &&\n        //   phyRateTestResult == 'PASS'\n        // ) {\n        //   element['color'] = this.nodeColor.green;\n        // } else {\n        //   element['color'] = this.nodeColor.red;\n        // }\n        //source image for clients\n        if (element['client-type'] != 30 && [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].includes(element['client-type'])) {\n          element['source'] = this.clientDevicesImages[element['client-type']];\n        } else if (element['client-type'] == 30) {\n          element['source'] = this.clientDevicesImages[12];\n        } else {\n          element['source'] = this.clientDevicesImages[13];\n        }\n        this.nodeDataArray.push(element);\n        var withoutSSID = {};\n        if (signalStatus == 'PASS' && legacyStatus == 'PASS' && phyRateTestResult == 'PASS' && element['client-color'] != 'red' && !element['client-note'].includes('Low efficiency score observed')) {\n          element['isPassedClient'] = true;\n          withoutSSID = {\n            from: parentNode.key,\n            to: element.key,\n            color: clientLinkColor,\n            thick: 2,\n            routing: go.Link.Normal,\n            linkColumn: linkColumn,\n            linkText: element['intf-type'] != 'WiFi' ? linkConType : linkDetails\n          };\n        } else {\n          element['isFailedClient'] = true;\n          withoutSSID = {\n            from: parentNode.key,\n            to: element.key,\n            color: clientLinkColor,\n            thick: 2,\n            routing: go.Link.Normal,\n            linkColumn: linkColumn,\n            linkText: element['intf-type'] != 'WiFi' ? linkConType : linkDetails\n          };\n        }\n        if (this.clientDeviceSSID) {\n          element['isSSIDClient'] = true;\n          var ethPortLabel = 'Ethernet Port';\n          if (element['eth-port']) {\n            ethPortLabel = `${ethPortLabel} ${element['eth-port']}`;\n          }\n          var channelNumber = element['Channel-number'] ? `${element['Channel-number']}` : '',\n            // if you are changing this ssid key and ethernet's key for some purpose, then make sure you change that in all pushed and filtered array of expandedNodes array\n            ssid = {\n              text: `ssid`,\n              // change ssid to parents ssidId if ssid is same as parent ssid only\n              key: `${parentNode.sn}-${element.ssid}-${element['freq-band']}-client`,\n              accessPointId: '',\n              color: '#f3f3f3',\n              label: element.ssid,\n              source: 'assets/images/Icon_Device_Wifi scaled.svg',\n              freqBand: `${element['freq-band']}GHz`,\n              // tooltip: `Connection Type: ${element['intf-type']} \\n SSID: ${element['ssid']} ${channelNumber}`,\n              ssidKey: '',\n              isClient: true,\n              isSSID: true,\n              isConnectivityNode: true,\n              category: 'otherNode'\n            },\n            ethernet = {\n              text: `ethernet`,\n              // key: `ethernet-${parentNode.sn}-client`,\n              key: `ethernet-${element['eth-port']}-${parentNode.sn}`,\n              // key: `${parentNode['ethernetId']}`,\n              accessPointId: '',\n              color: '#f3f3f3',\n              label: ethPortLabel,\n              source: 'assets/images/ethernet.png',\n              width: 17,\n              height: 30,\n              // tooltip: `Connection Type: ${element['intf-type']}`,\n              isClient: true,\n              isSSID: true,\n              isEthernet: true,\n              isConnectivityNode: true,\n              category: 'otherNode'\n            };\n          ssid['columnDefinitions'] = [{\n            attr: \"property\",\n            text: \"\",\n            column: 0\n          }, {\n            attr: \"value\",\n            text: \"\",\n            column: 1\n          }];\n          let airtimeUsage = '-';\n          let airtimeInterference = '-';\n          parentNode['radio-airtime'].forEach(el => {\n            var _a;\n            var getAirtimeBandVal = el.name.split('RadioAirtime');\n            if ((_a = element.Connection) === null || _a === void 0 ? void 0 : _a.includes(getAirtimeBandVal[1])) {\n              airtimeUsage = el.result['ChannelUtilization'];\n              airtimeInterference = el.result['ChannelInterferenceTime'];\n            }\n          });\n          ssid['rgData'] = [{\n            columns: [{\n              attr: \"property\",\n              text: this.language.Connection_Type\n            }, {\n              attr: \"value\",\n              text: element['intf-type']\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: \"SSID\"\n            }, {\n              attr: \"value\",\n              text: element['ssid']\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: this.language.Channel\n            }, {\n              attr: \"value\",\n              text: channelNumber\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: 'Airtime Utilization'\n            }, {\n              attr: \"value\",\n              text: airtimeUsage\n            }]\n          }, {\n            columns: [{\n              attr: \"property\",\n              text: 'Airtime Interference'\n            }, {\n              attr: \"value\",\n              text: airtimeInterference\n            }]\n          }];\n          ethernet['columnDefinitions'] = [{\n            attr: \"property\",\n            text: \"\",\n            column: 0\n          }, {\n            attr: \"value\",\n            text: \"\",\n            column: 1\n          }];\n          ethernet['rgData'] = [{\n            columns: [{\n              attr: \"property\",\n              text: this.language.Connection_Type\n            }, {\n              attr: \"value\",\n              text: element['intf-type']\n            }]\n          }];\n          // if (element['isPassedClient']) {\n          //   ssid['isPassedClient'] = true;\n          //   ethernet['isPassedClient'] = true;\n          //   ssid['key'] = ssid['key'] + 'isPassedClient';\n          //   ethernet['key'] = ethernet['key'] + 'isPassedClient';\n          // } else {\n          //   ssid['isFailedClient'] = true;\n          //   ethernet['isFailedClient'] = true;\n          //   ssid['key'] = ssid['key'] + 'isFailedClient';\n          //   ethernet['key'] = ethernet['key'] + 'isFailedClient';\n          // }\n          let linkColumn = [{\n            attr: \"property\",\n            text: \"\",\n            column: 0\n          }, {\n            attr: \"value\",\n            text: \"\",\n            column: 1\n          }];\n          if (element['intf-type'] == 'WiFi') {\n            // let freqBandValue = '';\n            // var uniq = [];\n            // if (element['isPassedClient']) {\n            //   freqBandPassedArr.push(element['freq-band']);\n            //   uniq = [...new Set(freqBandPassedArr)];\n            // } else {\n            //   freqBandFailedArr.push(element['freq-band']);\n            //   uniq = [...new Set(freqBandFailedArr)];\n            // }\n            // uniq.forEach((element) => {\n            //   freqBandValue = freqBandValue + element + 'GHz / ';\n            // });\n            // freqBandValue = freqBandValue.slice(0, -3);\n            // ssid['freqBand'] = freqBandValue;\n            if (element.ssid) {\n              var isSSIDExist = this.nodeDataArray.find(el => el.key == ssid.key && !el['isAPSSID']);\n              if (!isSSIDExist) {\n                this.nodeDataArray.push(ssid);\n                ssid['ssidKey'] = element.ssid;\n              } else {\n                // isSSIDExist['freqBand'] = element['freq-band'];\n              }\n            }\n            if (!this.linkDataArray.find(el => el.from == parentNode.key && el.to == ssid.key)) {\n              let linkText = [{\n                columns: [{\n                  attr: \"property\",\n                  text: this.language.Connection_Type\n                }, {\n                  attr: \"value\",\n                  text: element['intf-type']\n                }]\n              }, {\n                columns: [{\n                  attr: \"property\",\n                  text: \"SSID\"\n                }, {\n                  attr: \"value\",\n                  text: element['ssid']\n                }]\n              }, {\n                columns: [{\n                  attr: \"property\",\n                  text: this.language.Band\n                }, {\n                  attr: \"value\",\n                  text: `${element['freq-band']}GHz`\n                }]\n              }, {\n                columns: [{\n                  attr: \"property\",\n                  text: this.language.Mode\n                }, {\n                  attr: \"value\",\n                  text: element['wifi-mode']\n                }]\n              }];\n              this.linkDataArray.push({\n                from: parentNode.key,\n                to: ssid.key,\n                color: clientLinkColor,\n                thick: 2,\n                routing: go.Link.Normal,\n                linkColumn: linkColumn,\n                linkText: linkText\n              });\n            }\n            this.linkDataArray.push({\n              from: ssid.key,\n              to: element.key,\n              color: clientLinkColor,\n              thick: 2,\n              routing: go.Link.Normal,\n              linkColumn: linkColumn,\n              linkText: linkDetails\n            });\n          } else if (element['intf-type'] === 'eth' || element['intf-type'] == 'LAN') {\n            if (element['intf-type']) {\n              if (!this.nodeDataArray.find(el => el.key == ethernet.key && !el['isAPSSID'])) {\n                this.nodeDataArray.push(ethernet);\n              }\n            }\n            if (!this.linkDataArray.find(el => el.from == parentNode.key && el.to == ethernet.key)) {\n              this.linkDataArray.push({\n                from: parentNode.key,\n                to: ethernet.key,\n                color: clientLinkColor,\n                thick: 2,\n                routing: go.Link.Normal,\n                linkColumn: linkColumn,\n                linkText: ethernet['rgData']\n              });\n            }\n            this.linkDataArray.push({\n              from: ethernet.key,\n              to: element.key,\n              color: clientLinkColor,\n              thick: 2,\n              routing: go.Link.Normal,\n              linkColumn: linkColumn,\n              linkText: ethernet['rgData']\n            });\n          }\n        } else {\n          if (signalStatus == 'PASS' && legacyStatus == 'PASS' && phyRateTestResult == 'PASS' && element['client-color'] != 'red' && !element['client-note'].includes('Low efficiency score observed')) {\n            element['isPassedClient'] = true;\n          } else {\n            element['isFailedClient'] = true;\n          }\n          element['isClient'] = true;\n          this.linkDataArray.push(withoutSSID);\n        }\n      });\n    }\n    startISODate(startDate, enddata) {\n      if (startDate == undefined) return undefined;\n      let date = new Date(startDate);\n      let year = date.getFullYear();\n      let month = `${date.getMonth() + 1}`;\n      let day = `${date.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let stdate;\n      if (enddata) stdate = `${year}-${month}-${day}T23:59:00Z`;else stdate = `${year}-${month}-${day}T00:00:00Z`;\n      // let d = new Date(stdate)\n      // return d.getTime();\n      return stdate;\n    }\n    // alignTooltip(text) {\n    //   var preElement = document.createElement(\"PRE\");\n    //   var t = document.createTextNode(text);\n    //   preElement.appendChild(t);\n    //   var arr = preElement.innerText.split('\\n');\n    //   for (var i = 0, l = arr.length; i < l; i++) {\n    //     if (arr[i].indexOf(':') > -1) {\n    //       var pieces = arr[i].split(':');\n    //       arr[i] = \"<span class='tooltip-left'>\" + pieces[0] + \"</span>: \" + pieces[1];\n    //     }\n    //   }\n    //   preElement.innerText = arr.join(\"\\n\");\n    //   var maxWidth = Math.max.apply(null, $('.tooltip-left').map(function () {\n    //     return $(this).outerWidth(true);\n    //   }).get());\n    //   $('.tooltip-left').css('width', maxWidth + 15);\n    // }\n    initalize() {\n      for (let i = 0; i < this.totalissues; i++) {\n        this.isIconClicked[i] = false;\n        this.primaryActionButton[i] = false;\n        this.Description[i] = \" \";\n        this.reason[i] = \" \";\n        this.severity[i] = \" \";\n      }\n    }\n    ngOnDestroy() {\n      if (this.commandIQDataSubs) this.commandIQDataSubs.unsubscribe();\n      if (this.qoeSubscribed) this.qoeSubscribed.unsubscribe();\n    }\n    qoeCheck() {\n      let scopes = this.ssoAuthService.getScopes();\n      let validScopes = Object.keys(scopes);\n      this.scope.qoeRead = false;\n      if (environment.VALIDATE_SCOPE) {\n        scopes['cloud.rbac.csc.qoe'] = scopes['cloud.rbac.csc.qoe'] ? scopes['cloud.rbac.csc.qoe'] : [];\n        if (scopes && scopes['cloud.rbac.csc.qoe'] && scopes['cloud.rbac.csc.qoe'].length) {\n          if (scopes['cloud.rbac.csc.qoe'].indexOf('read') !== -1) this.scope.qoeRead = true;\n        }\n      } else {\n        this.scope.qoeRead = true;\n      }\n      // let onboarded = sessionStorage.getItem('calix.routerOnboard') == 'true' ? true : false;\n      let modelName = sessionStorage.getItem(\"calix.deviceData\") ? JSON.parse(sessionStorage.getItem(\"calix.deviceData\"))[0].modelName : '';\n      let fduser = sessionStorage.getItem('calix.userFdUser') == 'true' ? true : false;\n      if (this.ssoAuthService.acceptGSModel(modelName)) {\n        this.showQoeTab = this.ssoAuthService.exosVersionCheck('21.4') && this.scope.qoeRead;\n        return sessionStorage.getItem('qoeCheck');\n      } else {\n        this.showQoeTab = this.scope.qoeRead;\n        return sessionStorage.getItem('qoeCheck');\n      }\n    }\n  }\n  SupportTopologyComponent.ɵfac = function SupportTopologyComponent_Factory(t) {\n    return new (t || SupportTopologyComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.IssuesService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i5.NgxSpinnerService), i0.ɵɵdirectiveInject(i6.SsoAuthService), i0.ɵɵdirectiveInject(i7.DataServiceService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i8.CommonService), i0.ɵɵdirectiveInject(i9.SupportWifiService), i0.ɵɵdirectiveInject(i10.HealthService), i0.ɵɵdirectiveInject(i11.Title));\n  };\n  SupportTopologyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SupportTopologyComponent,\n    selectors: [[\"app-support-topology\"]],\n    viewQuery: function SupportTopologyComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.APDiagram = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchValue = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.issueBox = _t.first);\n      }\n    },\n    decls: 18,\n    vars: 6,\n    consts: [[1, \"m-2\"], [1, \"row\"], [\"class\", \"w-100 alert alert alert-danger fade show\", 4, \"ngIf\"], [1, \"col-md-12\", \"ccl-tabs\"], [\"id\", \"tabs\", 1, \"nav\", \"nav-tabs\"], [\"id\", \"top-issue-tab\", 1, \"nav-item\"], [\"data-toggle\", \"tab\", \"routerLinkActive\", \"active\", 1, \"nav-link\", \"small\", 3, \"routerLink\", \"Click\"], [1, \"big-text\"], [\"class\", \"nav-item\", \"id\", \"top-topology-tab\", 4, \"ngIf\"], [\"class\", \"nav-item\", \"id\", \"top-qoe-tab\", 4, \"ngIf\"], [\"id\", \"tabsContent\", 1, \"tab-content\"], [\"id\", \"issue\", 1, \"tab-pane\", \"fade\", \"active\", \"show\"], [1, \"row\", \"pb-2\"], [\"id\", \"topology\", 1, \"tab-pane\", \"fade\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"w-100\", \"alert\", \"alert\", \"alert-danger\", \"fade\", \"show\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [\"id\", \"top-topology-tab\", 1, \"nav-item\"], [\"data-toggle\", \"tab\", \"routerLinkActive\", \"active\", 1, \"nav-link\", \"small\", 3, \"routerLink\"], [\"id\", \"top-qoe-tab\", 1, \"nav-item\"], [1, \"col-md-12\"], [1, \"toggle-swtbtn\", \"checkbox\", \"switcher\"], [1, \"col-md-3\"], [1, \"refreshButton\"], [\"id\", \"serviceDataRefresh\", 1, \"cursor-pointer\", \"primary\", 3, \"click\"], [1, \"fas\", \"fa-sync\", \"refreshicon\"], [1, \"col-md-9\", \"pr-0\"], [1, \"accessPoint\"], [1, \"d-inline-flex\", \"align-items-center\", \"justify-content-between\", \"search-box-input\"], [\"name\", \"search\", \"id\", \"mySearch\", \"id\", \"mySearch\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"], [\"searchValue\", \"\"], [1, \"search-box-icon\"], [\"id\", \"searchSubscriberIcon\", \"src\", \"assets/img/ic_search_white.svg\", 1, \"search-icon\", \"primary\", 3, \"click\"], [\"for\", \"showConnection\", 2, \"margin-top\", \"10px\"], [\"type\", \"checkbox\", \"id\", \"showConnection\", 3, \"change\"], [1, \"zoom\"], [1, \"cus-button\"], [\"id\", \"ZoomIn\", 1, \"mr-2\", \"pointer\", 2, \"font-size\", \"24px\", 3, \"click\"], [\"src\", \"assets/images/iconmonstr-minus.svg\", 2, \"height\", \"25px\"], [1, \"icon-hl\", 2, \"width\", \"70px\"], [\"bindLabel\", \"factor\", \"bindValue\", \"value\", 2, \"width\", \"75px\", \"background-color\", \"#ffffff\", \"border\", \"none\", 3, \"ngModel\", \"items\", \"clearable\", \"searchable\", \"ngModelOptions\", \"ngModelChange\"], [\"id\", \"ZoomOut\", 1, \"pointer\", 2, \"font-size\", \"24px\", 3, \"click\"], [\"src\", \"assets/images/iconmonstr-plus.svg\", 2, \"height\", \"25px\"], [\"id\", \"mainDiagram\", \"class\", \"diagram-info\", 4, \"ngIf\"], [\"class\", \"nodata-info\", 4, \"ngIf\"], [4, \"ngIf\"], [\"id\", \"mainDiagram\", 1, \"diagram-info\"], [\"APDiagram\", \"\"], [\"class\", \"loader load\", 4, \"ngIf\"], [1, \"loader\", \"load\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"nodata-info\"], [\"issueBox\", \"\"], [\"class\", \"topo-info-box\", 4, \"ngIf\"], [1, \"topo-info-box\"], [2, \"font-weight\", \"600\", \"line-height\", \"0.4\"], [2, \"margin-left\", \"10px\"], [4, \"ngFor\", \"ngForOf\"], [\"style\", \"margin-left: 10px\", 4, \"ngIf\"], [1, \"m-0\"], [2, \"font-weight\", \"600\"]],\n    template: function SupportTopologyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-subscriber-menu\");\n        i0.ɵɵelementStart(1, \"section\", 0);\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵtemplate(3, SupportTopologyComponent_div_3_Template, 6, 1, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"ul\", 4);\n        i0.ɵɵelementStart(6, \"li\", 5);\n        i0.ɵɵelementStart(7, \"a\", 6);\n        i0.ɵɵlistener(\"Click\", function SupportTopologyComponent_Template_a_Click_7_listener($event) {\n          return $event.preventDefault();\n        });\n        i0.ɵɵelementStart(8, \"span\", 7);\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(10, SupportTopologyComponent_li_10_Template, 4, 2, \"li\", 8);\n        i0.ɵɵtemplate(11, SupportTopologyComponent_li_11_Template, 4, 2, \"li\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 10);\n        i0.ɵɵelementStart(13, \"div\", 11);\n        i0.ɵɵelement(14, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 13);\n        i0.ɵɵelement(16, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, SupportTopologyComponent_div_17_Template, 30, 12, \"div\", 14);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/\", ctx.MODULE, \"/overview/issues\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.language.Issues);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showTopologyTab);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showQoeTab);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.showTopologyTab);\n      }\n    },\n    directives: [i12.SubscriberMenuComponent, i13.NgIf, i4.RouterLinkWithHref, i4.RouterLinkActive, i14.DefaultValueAccessor, i14.NgControlStatus, i14.NgModel, i15.NgSelectComponent, i13.NgForOf],\n    styles: [\".gshHeader{border-color:#a768be;font-size:13px;margin-bottom:7px}.diagram-info[_ngcontent-%COMP%]{width:100%;min-height:500px;margin-top:20px}.nodata-info[_ngcontent-%COMP%]{text-align:center;min-height:100px;margin-top:50px}.toggle-swtbtn[_ngcontent-%COMP%]{display:flex;justify-content:space-between}.toggle-swtbtn[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{margin-right:13px}.toggle-swtbtn[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-left:40px;cursor:pointer;color:#0279ff;font-size:larger;font-weight:700}.toggle-swtbtn[_ngcontent-%COMP%]   .refreshButton[_ngcontent-%COMP%]   .refreshicon[_ngcontent-%COMP%]{font-size:24px;color:#0279ff;margin-left:30px}.toggle-swtbtn[_ngcontent-%COMP%]   .accessPoint[_ngcontent-%COMP%]{display:flex;justify-content:flex-end}.toggle-swtbtn[_ngcontent-%COMP%]   .accessPoint[_ngcontent-%COMP%]   .zoom[_ngcontent-%COMP%]{margin-left:40px;display:flex}.cus-button[_ngcontent-%COMP%]{float:right;min-width:168px;position:relative;height:42px;display:block;border-radius:60px;border:1px solid #dcdcdc;padding:0 0 0 12px}.cus-button[_ngcontent-%COMP%]   span.icon-hl[_ngcontent-%COMP%]{display:inline-block}.cus-button[_ngcontent-%COMP%]   .bord-right[_ngcontent-%COMP%]{border-right:1px solid #dcdcdc;padding-right:8px}.cus-button[_ngcontent-%COMP%]   .bord-left[_ngcontent-%COMP%]{border-left:1px solid #dcdcdc;padding-left:8px}.cus-button[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{background-color:#fff!important;border:none!important}.cus-button[_ngcontent-%COMP%]   .ng-dropdown-panel-items[_ngcontent-%COMP%]{overflow-y:hidden!important}.cus-button[_ngcontent-%COMP%]   .ng-dropdown-panel[_ngcontent-%COMP%]   .ng-dropdown-panel-items[_ngcontent-%COMP%]{width:75px!important}.topo-info-box[_ngcontent-%COMP%]{width:100%;padding:15px;background-color:#ebeaef;border-radius:10px}.ng-dropdown-panel[_ngcontent-%COMP%]   .ng-dropdown-panel-items[_ngcontent-%COMP%]{max-height:240px!important}.search-box-input[_ngcontent-%COMP%]{border-radius:26px;background:#F8F8FA;padding:0 0 0 15px;font-size:14px;font-weight:400;width:30%;color:#646363;border:1px solid #dfdfdf;margin-right:5px}.search-box-input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;height:38px;line-height:inherit!important;border-radius:26px;background:transparent;padding:0;font-size:14px;font-weight:400;color:#646363;border:none}.search-box-icon[_ngcontent-%COMP%]{width:42px;height:40px;background-color:#0279ff;padding:10px;border-radius:25px;cursor:pointer}\"]\n  });\n  return SupportTopologyComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}