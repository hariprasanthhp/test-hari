{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../issues/service/issue.service\";\nexport let AlarmNotificationsApisService = /*#__PURE__*/(() => {\n  class AlarmNotificationsApisService {\n    constructor(http, issueService) {\n      this.http = http;\n      this.issueService = issueService;\n      this.baseUrl = `${environment.API_BASE_URL}analytics-engine/`;\n    }\n    getCategories() {\n      return new Promise((resolve, reject) => {\n        this.http.get(`${this.baseUrl}alarmMasterCategory`).subscribe(json => {\n          let categories = [{\n            id: 'All',\n            name: 'All'\n          }];\n          if (json && json.length > 0) {\n            categories = [];\n            json.forEach(element => {\n              if (!element) {\n                return;\n              }\n              categories.push({\n                id: element,\n                name: element\n              });\n            });\n          }\n          categories.sort((a, b) => (a.name || '').toString().localeCompare((b.name || '').toString(), 'en', {\n            numeric: false\n          }));\n          resolve(categories);\n        }, err => {\n          // this.loading = false;\n          resolve([]);\n        });\n      });\n    }\n    getIndividualAlarmData() {\n      return new Promise((resolve, reject) => {\n        this.http.get(`${this.baseUrl}alarmMasterDetailsWithCustomSeverity`).subscribe(json => {\n          let alarmsData = [];\n          if (json && json.length > 0) {\n            // json = [...json.filter((el) => el['name'] != 'ont-dying-gasp')];\n            json = [...json.filter(el => {\n              var _a;\n              return ((_a = el['name']) === null || _a === void 0 ? void 0 : _a.toLowerCase()) != 'ont-power-off';\n            })];\n            json.forEach(element => {\n              element['alarm_name'] = element['name'] ? element['name'] : '';\n              element['alarm_category'] = element['category'] ? element['category'] : '';\n              element['severity'] = element['perceivedSeverity'] ? element['perceivedSeverity'] : '';\n              element['alarm_id'] = element['id'] ? element['id'] : '';\n              alarmsData.push(element);\n            });\n          }\n          resolve(alarmsData);\n        }, err => {\n          resolve([]);\n        });\n      });\n    }\n    getGroupAlarmData() {\n      return new Promise((resolve, reject) => {\n        this.http.get(`${this.baseUrl}alarmgroupscount`).subscribe(json => {\n          let groups = [];\n          if (json && json.length > 0) {\n            groups = [];\n            json.forEach(element => {\n              if (!element) {\n                return;\n              }\n              groups.push({\n                group_name: element.name,\n                no_of_alarms: element.count,\n                group_id: element.uuid\n              });\n            });\n          }\n          resolve(groups);\n        }, err => {\n          resolve([]);\n        });\n      });\n    }\n    getTransformAlarmData() {\n      return new Promise((resolve, reject) => {\n        this.http.get(`${this.baseUrl}alarmRules`).subscribe(json => {\n          let alarmsData = [];\n          if (json && json.length > 0) {\n            json.forEach(element => {\n              element['alarm_name'] = element['name'] ? element['name'] : '';\n              element['alarmRuleId'] = element['alarmRuleId'] ? element['alarmRuleId'] : '';\n              alarmsData.push(element);\n            });\n          }\n          resolve(alarmsData);\n        }, err => {\n          // this.loading = false;\n          resolve([]);\n        });\n      });\n    }\n    regionsApiLoader() {\n      return new Promise((resolve, reject) => {\n        this.regionsSubject = this.issueService.getRegions().subscribe(res => {\n          let counts = {};\n          res.forEach(x => {\n            counts[x.name] = (counts[x.name] || 0) + 1;\n          });\n          res.forEach((element, index) => {\n            var _a, _b;\n            element['check_region_name'] = element.name + \" (\" + ((_a = element.fqn) === null || _a === void 0 ? void 0 : _a.split('=')[1].split(',')[0]) + \")\";\n            if (counts[element['name']] > 1) {\n              element.name = element.name + \" (\" + ((_b = element.fqn) === null || _b === void 0 ? void 0 : _b.split('=')[1].split(',')[0]) + \")\";\n            }\n          });\n          res.sort();\n          resolve(res);\n        }, error => {\n          resolve([]);\n        });\n      });\n    }\n    ngOnDestroy() {\n      if (this.regionsSubject) this.regionsSubject.unsubscribe();\n    }\n  }\n  AlarmNotificationsApisService.ɵfac = function AlarmNotificationsApisService_Factory(t) {\n    return new (t || AlarmNotificationsApisService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.IssueService));\n  };\n  AlarmNotificationsApisService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlarmNotificationsApisService,\n    factory: AlarmNotificationsApisService.ɵfac,\n    providedIn: 'root'\n  });\n  return AlarmNotificationsApisService;\n})();","map":null,"metadata":{},"sourceType":"module"}