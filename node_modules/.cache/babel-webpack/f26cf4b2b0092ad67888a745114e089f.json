{"ast":null,"code":"import { of } from 'rxjs';\nimport * as Highcharts from \"highcharts/highstock\";\nimport * as constants from \"../shared/constants/marketing.constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../marketing-explore-data/basic/shared/services/explore-data-common.service\";\nimport * as i2 from \"src/app-services/translate.service\";\nrequire('highcharts/highcharts-more')(Highcharts);\nrequire('highcharts/modules/solid-gauge')(Highcharts);\nconst IndicatorsCore = require(\"highcharts/indicators/indicators\");\nIndicatorsCore(Highcharts);\nconst IndicatorZigZag = require(\"highcharts/indicators/zigzag\");\nIndicatorZigZag(Highcharts);\nconst borderRadius = require('highcharts-border-radius');\nborderRadius(Highcharts);\n// const $: any = require('jquery');\nexport let MarketingHighchartServiceService = /*#__PURE__*/(() => {\n  class MarketingHighchartServiceService {\n    constructor(marketingExploreCommonService, translateService) {\n      this.marketingExploreCommonService = marketingExploreCommonService;\n      this.translateService = translateService;\n      this.pieChartColurs = ['#5acfea', '#B926F0', '#b3d974', '#FF8238', '#FF489D'];\n      this.stackedColumnColors = constants.chartColorCodes;\n      this.stackedAqiteColors = constants.chartColorCodes;\n      this.commonHighChartOptions = {\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        responsive: {\n          rules: [{\n            condition: {},\n            chartOptions: {\n              chart: {\n                styledMode: true,\n                color: '#1A1F22'\n              },\n              subtitle: {\n                text: null\n              },\n              navigator: {\n                enabled: false\n              }\n            }\n          }]\n        }\n      };\n      this.selectOptions = {\n        enabled: true,\n        color: null,\n        borderWidth: 2,\n        borderColor: '#AAAAAA'\n      };\n      this.styleOptions = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '14px',\n        color: '#1A1F22',\n        lineHeight: '18px'\n      };\n      this.styleOptions_stacklabel = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '12px',\n        color: '#1A1F22',\n        lineHeight: '18px'\n      };\n      this.styleOptions_legendtext = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '14px',\n        color: '#1A1F22'\n      };\n      this.styleOptions_xaxis = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '14px',\n        color: '#1A1F22'\n      };\n      this.styleOptions_yaxis = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '14px',\n        color: '#1A1F22'\n      };\n      this.styleOptions_tooltip = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '14px',\n        color: '#1A1F22'\n      };\n      this.xAxisLabels = {\n        style: {\n          fontSize: '14px',\n          color: '#1A1F22'\n        },\n        autoRotationLimit: 40\n      };\n      this.linePlotOptions = {\n        states: {\n          inactive: {\n            enabled: false\n          }\n        }\n      };\n      this.plotOptions = {\n        stacking: 'normal',\n        series: {\n          allowPointSelect: true\n        },\n        states: {\n          inactive: {\n            enabled: false\n          },\n          select: {\n            color: null,\n            borderWidth: 7,\n            borderColor: 'rgb(170, 170, 170)'\n          }\n        }\n      };\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.isRerender = true;\n      });\n    }\n    // SUSBSCRIBERS SERVICE BY TECH\n    serviceTierTechnologyOptions(data) {\n      // data.series.filter(arrayData => {\n      //   arrayData.data.filter((value, index) => {\n      //     if (value === 0) {\n      //       arrayData.data.splice(index, 1, null);\n      //     }\n      //   })\n      // })\n      let totalsubs;\n      totalsubs = this.marketingExploreCommonService.sumOfObjectValues(data.totals);\n      let that = this;\n      let serviceTierTechnologyOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedAqiteColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: data.categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        tooltip: {\n          formatter: function () {\n            return this.series.xAxis.categories[this.point.x] + ' ' + that.language['Total'] + ': ' + Highcharts.numberFormat(data.totals[this.key], 0, '', ',') + ' (' + Highcharts.numberFormat(data.totals[this.key] / (totalsubs / 100), 1) + '%' + ')<br>' + '<b>' + this.series.name + ': ' + Highcharts.numberFormat(this.point.y, 0, '', ',') + ' (' + Highcharts.numberFormat(this.point.y / (data.totals[this.key] / 100), 1) + '%)</b><br>';\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            allowPointSelect: true,\n            maxPointWidth: 24,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              }\n            }\n          }),\n          column: {\n            borderWidth: 0,\n            minPointLength: 3\n          }\n        },\n        // series: data.series,\n        series: data.series,\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          title: {\n            text: this.language.Subscribers,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          gridLineColor: '#E6E6E6',\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            formatter: function () {\n              return Highcharts.numberFormat(this.total / (totalsubs / 100), 1) + '%';\n            },\n            style: Object.assign({}, this.styleOptions_stacklabel)\n          },\n          reversedStacks: false\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(serviceTierTechnologyOptions);\n    }\n    //Acquisation Trends\n    aquisationTrendsOption(data) {\n      let category = this.addMonthOnCategories(data.categories);\n      let that = this;\n      let aquisationTrendsOption = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: ['#0027ff'],\n        xAxis: {\n          categories: category,\n          labels: Object.assign({}, this.xAxisLabels)\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language.Subscribers,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_yaxis)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: Object.assign(Object.assign({}, this.linePlotOptions), {\n          series: {\n            marker: {\n              enabled: false\n            },\n            states: {\n              inactive: {\n                enabled: false\n              }\n            },\n            point: {\n              events: {}\n            }\n          }\n        }),\n        tooltip: {\n          formatter: function () {\n            return `${data.categories[this.point.x]}: <b>${Highcharts.numberFormat(this.point.y, 0, '', ',')} ${that.language['Subscribers']}</b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        series: [{\n          showInLegend: false,\n          data: data.categoryFeatureTotal\n        }],\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(aquisationTrendsOption);\n    }\n    //Churn Trends\n    churnTrendsOption(data) {\n      let category = this.addMonthOnCategories(data.categories);\n      let that = this;\n      let aquisationTrendsOption = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: ['#0027ff'],\n        xAxis: {\n          categories: category,\n          labels: Object.assign({}, this.xAxisLabels)\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language.Subscribers,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_yaxis)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: Object.assign(Object.assign({}, this.linePlotOptions), {\n          series: {\n            marker: {\n              enabled: false\n            },\n            states: {\n              inactive: {\n                enabled: false\n              }\n            },\n            point: {\n              events: {}\n            }\n          }\n        }),\n        tooltip: {\n          formatter: function () {\n            return `${data.categories[this.point.x]}: <b>${Highcharts.numberFormat(this.point.y, 0, '', ',')} ${that.language['Subscribers']} </b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        series: [{\n          showInLegend: false,\n          data: data.categoryFeatureTotal\n        }],\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(aquisationTrendsOption);\n    }\n    // LINE CHARTS\n    multiLineChartOptions() {\n      let object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedColumnColors.reverse(),\n        chart: {\n          type: 'line',\n          events: {\n            load: function (event) {\n              $('.highcharts-legend-item path').attr('height', '13').attr('y', '5');\n            }\n          }\n        },\n        yAxis: {\n          labels: {\n            formatter: function () {\n              {\n                return this.value.toFixed(0) >= 1000 ? (this.value / 1000).toFixed(0) + 'K' : this.value.toFixed(0);\n              }\n            }\n          },\n          title: {\n            text: 'Usage',\n            style: Object.assign({}, this.styleOptions_yaxis)\n          }\n        },\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name} <br/> \n                    <b>${Highcharts.numberFormat(this.point.y, 0, '', ',')} Subscribers</b> <br/>`;\n          }\n        },\n        legend: {\n          // enabled: true,\n          // symbolHeight: 50,\n          // symbolWidth: 0,\n          // symbolRadius: 30,\n          itemStyle: Object.assign({}, this.styleOptions_tooltip)\n        },\n        xAxis: {\n          categories: ['Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep'],\n          crosshair: false\n        },\n        plotOptions: {\n          series: {\n            states: {\n              inactive: {\n                enabled: false\n              }\n            },\n            marker: {\n              enabled: false\n            },\n            label: {\n              connectorAllowed: false\n            }\n          }\n        },\n        series: [{\n          name: 'Total Usage (TB)',\n          showInLegend: false,\n          data: [5717, 658, 9731, 1931, 1133, 1175]\n        }, {\n          name: 'Streamingl Usage (TB)',\n          showInLegend: false,\n          data: [292, 2851, 490, 3282, 3821, 4434]\n        }],\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(object);\n    }\n    // SOME COMMON FUNCTIONS\n    addMonthOnCategories(categoryArray) {\n      let newMonth;\n      let newCategories = [];\n      categoryArray.forEach(element => {\n        let type = typeof element;\n        let category;\n        if (type == 'object') {\n          element = element[0];\n        }\n        newMonth = element.split('-');\n        category = `${constants.monthsArray[+newMonth[1]]}-${+newMonth[0] - 2000}`;\n        newCategories.push(category);\n      });\n      return newCategories;\n    }\n  }\n  MarketingHighchartServiceService.ɵfac = function MarketingHighchartServiceService_Factory(t) {\n    return new (t || MarketingHighchartServiceService)(i0.ɵɵinject(i1.MarketingExploreCommonService), i0.ɵɵinject(i2.TranslateService));\n  };\n  MarketingHighchartServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MarketingHighchartServiceService,\n    factory: MarketingHighchartServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return MarketingHighchartServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}