{"ast":null,"code":"import * as Highcharts from 'highcharts/highstock';\nimport * as $ from 'jquery';\nimport { catchError, map } from 'rxjs/operators';\nimport { combineLatest, of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"../../services/support-wifi.service\";\nimport * as i3 from \"src/app/sys-admin/services/common.service\";\nimport * as i4 from \"src/app/shared/services/sso-auth.service\";\nexport let HistorySiteScanComponent = /*#__PURE__*/(() => {\n  class HistorySiteScanComponent {\n    constructor(translateService, api, commonOrgService, ssoAuthService) {\n      this.translateService = translateService;\n      this.api = api;\n      this.commonOrgService = commonOrgService;\n      this.ssoAuthService = ssoAuthService;\n      this.results = [];\n    }\n    ngOnInit() {\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.siteScanData(this.chartData, this.type);\n      });\n      this.siteScanData(this.chartData, this.type);\n    }\n    ngOnChanges() {\n      this.siteScanData(this.chartData, this.type);\n      // if (this.prevFSAN && this.fsan && this.prevFSAN == this.fsan && this.prevtType != this.type && this.results) {\n      //   this.siteScanData(this.results, this.type);\n      // } else {\n      //   this.prevFSAN = this.fsan;\n      //   this.prevtType = this.type;\n      //   this.getData()\n      // }\n    }\n\n    loadSiteScanChart(data) {\n      let xFilter = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153, 157, 161, 165];\n      const chartOption = {\n        credits: {\n          enabled: false\n        },\n        exporting: {\n          enabled: false\n        },\n        legend: {\n          verticalAlign: 'top',\n          title: {\n            text: `${this.language && this.language[\"Busyness\"] ? this.language[\"Busyness\"] : 'Busyness'}:`,\n            style: {\n              color: '#F7C343' // yellow\n            }\n          },\n\n          enabled: this.busynessChecked && this.minBusynessAvail ? true : false\n        },\n        colors: ['#029A7C', '#836EE8', '#0279FF', '#FF489D'],\n        chart: {\n          type: 'line',\n          alignTicks: false,\n          zoomType: 'xy',\n          panKey: 'shift',\n          panning: true,\n          events: {\n            /* load: titleMove,\r\n            redraw: titleMove */\n          }\n        },\n        title: {\n          text: ''\n        },\n        subtitle: {\n          text: ''\n        },\n        tooltip: {\n          //enabled: true,\n          formatter: function () {\n            var s = '<b>' + this.x + '</b>';\n            if (!this.point.myData) {\n              return false;\n            }\n            return this.point.myData.bssid ? this.point.myData.bssid : '';\n          }\n        },\n        xAxis: {\n          allowDecimals: false,\n          showEmpty: false,\n          title: {\n            enabled: true,\n            text: this.language && this.language[\"Channel\"] ? this.language[\"Channel\"] : \"Channel\"\n          },\n          tickInterval: 1,\n          labels: {\n            step: 1,\n            formatter: function () {\n              //Log.debug(\"Determine:\" + this.value);\n              if (xFilter.includes(this.value)) {\n                //Log.debug(\"DISPLAY:\" + this.value);\n                return this.value;\n              }\n            }\n          }\n        },\n        yAxis: [{\n          title: {\n            text: this.language && this.language[\"Power\"] ? this.language[\"Power\"] + ' (dBm)' : \"Power (dBm)\"\n          },\n          min: -100,\n          max: 10,\n          offset: 10,\n          tickInterval: 10\n        }, {\n          title: {\n            text: this.language && this.language[\"Busyness\"] ? this.language[\"Busyness\"] + ' (%)' : \"Busyness (%)\",\n            style: {\n              color: '#F7C343' // yellow\n            }\n          },\n\n          gridLineWidth: 0,\n          min: 0,\n          max: 100,\n          offset: 10,\n          tickInterval: 10,\n          opposite: true,\n          allowDecimals: false\n        }],\n        plotOptions: {\n          line: {\n            showInLegend: false,\n            lineWidth: 1,\n            marker: {\n              enabled: false\n            }\n          },\n          area: {\n            lineWidth: 1,\n            marker: {\n              enabled: false\n            },\n            fillOpacity: 0.1,\n            color: '#F7C343' // yellow\n          },\n\n          series: {\n            dataLabels: {\n              enabled: false,\n              borderRadius: 5,\n              borderWidth: 1,\n              padding: 4,\n              allowOverlap: true,\n              useHTML: true,\n              style: {\n                fontWeight: 'normal'\n              },\n              formatter: function () {\n                return $('<div/>').css({\n                  'color': this.series.color,\n                  'border': '1px solid',\n                  'padding': '0 15px 0 15px'\n                }).text(this.point.name)[0].outerHTML;\n              }\n            },\n            marker: {\n              symbol: 'vertical',\n              lineColor: null,\n              lineWidth: 1,\n              enabled: false\n            }\n          }\n        },\n        series: data\n      };\n      Highcharts.chart('siteScan', chartOption);\n    }\n    get5GChannelSpan(current_channel, bandwidth) {\n      let data = [];\n      let search;\n      const bandwidth_20mhz = [[36], [40], [44], [48], [52], [56], [60], [64], [100], [104], [108], [112], [116], [132], [136], [149], [153], [157], [161], [165]];\n      const bandwidth_40mhz = [[36, 40], [44, 48], [52, 56], [60, 64], [100, 104], [108, 112], [132, 136], [140, 144], [149, 153], [157, 161]];\n      const bandwidth_80mhz = [[36, 40, 44, 48], [52, 56, 60, 64], [100, 104, 108, 112], [116, 120, 124, 128], [132, 136, 140, 144], [149, 153, 157, 161]];\n      const bandwidth_160mhz = [[36, 40, 44, 48, 52, 56, 60, 64], [100, 104, 108, 112, 116, 120, 124, 128]];\n      if (bandwidth === '20MHz') {\n        search = bandwidth_20mhz;\n      } else if (bandwidth === '40MHz') {\n        search = bandwidth_40mhz;\n      } else if (bandwidth === '80MHz') {\n        search = bandwidth_80mhz;\n      } else if (bandwidth === '160MHz') {\n        search = bandwidth_160mhz;\n      } else {\n        return data;\n      }\n      //search in predefined span data\n      data = search.find(r => {\n        return r.includes(current_channel);\n      });\n      return data;\n    }\n    genSiteChartNeighborData(data) {\n      let myData = data;\n      var shiftLeft = 2;\n      var shiftRight = 2;\n      var bandwidth = data.channel_bandwidth;\n      var channel = data.channel;\n      var frequency = data.radio;\n      var rssi = data.rssi;\n      var ssid = data.ssid || data.bssid;\n      if (!ssid || ssid.toUpperCase() == 'HIDDEN') {\n        ssid = data.macaddress ? data.macaddress : data.bssid;\n      } else if (ssid && ssid.indexOf('Hidden') > -1 && data.bssid) {\n        ssid = data.macaddress ? data.macaddress : data.bssid;\n      }\n      var ret = {\n        data: []\n      };\n      if (frequency === '5g') {\n        let data = this.get5GChannelSpan(channel, bandwidth);\n        //Log.debug(\"5g channel span:\" + JSON.stringify(data));\n        if (!data || data.length < 1) {\n          return ret;\n        } else {\n          shiftLeft = channel - data[0];\n          shiftRight = data[data.length - 1] - channel;\n        }\n        //Log.debug(\"left:\" + shiftLeft + \"  right:\" + shiftRight);\n        ret.data.push({\n          x: data[0] - 2,\n          y: -100,\n          myData: myData\n        });\n        if (shiftLeft) {\n          ret.data.push({\n            x: channel - shiftLeft,\n            y: rssi,\n            myData: myData\n          });\n        }\n        ret.data.push({\n          x: channel,\n          y: rssi,\n          name: ssid,\n          dataLabels: {\n            enabled: true\n          },\n          marker: {\n            enabled: true\n          },\n          myData: myData\n        });\n        if (shiftRight) {\n          ret.data.push({\n            x: channel + shiftRight,\n            y: rssi,\n            myData: myData\n          });\n        }\n        ret.data.push({\n          x: data[data.length - 1] + 2,\n          y: -100,\n          myData: myData\n        });\n      } else {\n        if (bandwidth === '20MHz') {\n          shiftLeft = 2;\n          shiftRight = 2;\n        } else if (bandwidth === '40MHz') {\n          if (channel < 8) {\n            shiftLeft = 2;\n            shiftRight = 6;\n          } else {\n            shiftLeft = 6;\n            shiftRight = 2;\n          }\n        } else if (bandwidth === '80MHz') {\n          shiftLeft = 8;\n          shiftRight = 8;\n        } else if (bandwidth === '160MHz') {\n          shiftLeft = 16;\n          shiftRight = 16;\n        }\n        //add left two data\n        if (channel - shiftLeft <= 0) {\n          ret.data.push({\n            x: 0,\n            y: -100,\n            myData: myData\n          });\n          ret.data.push({\n            x: 0.5,\n            y: rssi,\n            myData: myData\n          });\n        } else {\n          ret.data.push({\n            x: channel - shiftLeft,\n            y: -100,\n            myData: myData\n          });\n          ret.data.push({\n            x: channel - shiftLeft + 1,\n            y: rssi,\n            myData: myData\n          });\n        }\n        //add current channel dot\n        ret.data.push({\n          x: channel,\n          y: rssi,\n          name: ssid,\n          dataLabels: {\n            enabled: true\n          },\n          marker: {\n            enabled: true\n          },\n          myData: myData\n        });\n        //add right two data\n        if (channel - shiftLeft <= 0) {\n          ret.data.push({\n            x: channel + shiftRight - 0.5,\n            y: rssi,\n            myData: myData\n          });\n        } else {\n          ret.data.push({\n            x: channel + shiftRight - 1,\n            y: rssi,\n            myData: myData\n          });\n        }\n        ret.data.push({\n          x: channel + shiftRight,\n          y: -100,\n          myData: myData\n        });\n      }\n      //Log.debug(\"genSiteChartData:\" + JSON.stringify(ret.data));\n      return ret;\n    }\n    genSiteChartBusynessData(data) {\n      let shiftLeft = 2;\n      let shiftRight = 2;\n      let bandwidth = data.channel_bandwidth;\n      let channel = data.channel;\n      let frequency = data.radio;\n      let name = data.channel_bandwidth;\n      let busyness = data.busyness / 10;\n      let ret = {\n        data: [],\n        type: \"area\",\n        name: name,\n        yAxis: 1\n      };\n      if (frequency === '5g') {\n        let data = this.get5GChannelSpan(channel, bandwidth);\n        //Log.debug(\"5g channel span:\" + JSON.stringify(data));\n        if (!data || data.length < 1) {\n          return ret;\n        }\n        //Log.debug(\"left:\" + shiftLeft + \"  right:\" + shiftRight);\n        ret.data.push({\n          x: data[0] - 2,\n          y: 0\n        });\n        ret.data.push({\n          x: data[0] - 2,\n          y: busyness\n        });\n        ret.data.push({\n          x: (data[0] + data[data.length - 1]) / 2,\n          y: busyness,\n          name: name,\n          dataLabels: {\n            enabled: true\n          },\n          marker: {\n            enabled: true\n          }\n        });\n        ret.data.push({\n          x: data[data.length - 1] + 2,\n          y: busyness\n        });\n        ret.data.push({\n          x: data[data.length - 1] + 2,\n          y: 0\n        });\n      } else {\n        if (bandwidth === '20MHz') {\n          shiftLeft = 2;\n          shiftRight = 2;\n        } else if (bandwidth === '40MHz') {\n          if (channel < 8) {\n            shiftLeft = 2;\n            shiftRight = 6;\n          } else {\n            shiftLeft = 6;\n            shiftRight = 2;\n          }\n        } else if (bandwidth === '80MHz') {\n          shiftLeft = 8;\n          shiftRight = 8;\n        } else if (bandwidth === '160MHz') {\n          shiftLeft = 16;\n          shiftRight = 16;\n        }\n        //add left two data\n        if (channel - shiftLeft <= 0) {\n          ret.data.push({\n            x: 0,\n            y: 0\n          });\n          ret.data.push({\n            x: 0,\n            y: busyness\n          });\n        } else {\n          ret.data.push({\n            x: channel - shiftLeft,\n            y: 0\n          });\n          ret.data.push({\n            x: channel - shiftLeft,\n            y: busyness\n          });\n        }\n        //add current bandwidth dot\n        ret.data.push({\n          x: channel > shiftLeft ? (channel - shiftLeft + channel + shiftRight) / 2 : (channel + shiftRight) / 2,\n          y: busyness,\n          name: name,\n          dataLabels: {\n            enabled: true\n          },\n          marker: {\n            enabled: true\n          }\n        });\n        //add right two data\n        ret.data.push({\n          x: channel + shiftRight,\n          y: busyness\n        });\n        ret.data.push({\n          x: channel + shiftRight,\n          y: 0\n        });\n      }\n      //Log.debug(\"genSiteChartBusyData:\" + JSON.stringify(ret.data));\n      return ret;\n    }\n    siteScanData(json, type) {\n      var _a, _b;\n      let sitedata = [],\n        radio = type ? \"24g\" : \"5g\",\n        scanRes = json ? json : {};\n      if (!scanRes || !Object.keys(scanRes).length) {\n        return;\n      }\n      scanRes.neighbor.forEach(r => {\n        if (r.radio === radio) {\n          //sitedata.push(this.genSiteChartNeighborData(r));\n          if (!this.siteScanChannelSelected.length && !this.siteScanSSIDSelected.length) {\n            sitedata.push(this.genSiteChartNeighborData(r));\n          } else if (this.siteScanChannelSelected.length && !this.siteScanSSIDSelected.length && this.siteScanChannelSelected.includes(r.channel)) {\n            sitedata.push(this.genSiteChartNeighborData(r));\n          } else if (!this.siteScanChannelSelected.length && this.siteScanSSIDSelected.length && this.siteScanSSIDSelected.includes(r.ssid)) {\n            sitedata.push(this.genSiteChartNeighborData(r));\n          } else if (this.siteScanChannelSelected.length && this.siteScanSSIDSelected.length && this.siteScanChannelSelected.includes(r.channel) && this.siteScanSSIDSelected.includes(r.ssid)) {\n            sitedata.push(this.genSiteChartNeighborData(r));\n          }\n        }\n      });\n      if (!this.ssidChecked) {\n        sitedata = [];\n        // sitedata.push({\n        //   data: [\n        //     { x: null, y: null },\n        //     // { x: 0, y: 0 },\n        //     // { x: 0, y: -3, name: this.fsan, dataLabels: { enabled: true }, marker: { enabled: true } },\n        //     // { x: 2.5, y: -3 },\n        //     { x: null, y: null }\n        //   ]\n        // })\n      }\n\n      if (!sitedata.length) {\n        // let ssid = {\n        //   \"rssi\": scanRes[radio].current.power,\n        //   \"security\": \"wpa-wpa2\",\n        //   \"channel_bandwidth\": scanRes[radio].channel_bandwidth,\n        //   \"bssid\": this.fsan,\n        //   \"channel\": scanRes[radio].current.channel,\n        //   \"ssid\": this.fsan,\n        //   \"radio\": radio\n        // };\n        // sitedata.push(this.genSiteChartNeighborData(ssid));\n        sitedata.push({\n          data: [{\n            x: null,\n            y: null\n          }, {\n            x: null,\n            y: null\n          }]\n        });\n      }\n      let rankingList = ((_a = scanRes[radio]) === null || _a === void 0 ? void 0 : _a['ranking_list']) ? (_b = scanRes[radio]) === null || _b === void 0 ? void 0 : _b['ranking_list'] : [];\n      let skip = [];\n      rankingList.forEach(r => {\n        skip.push(r['channel']);\n      });\n      //delete scanRes.busyness;\n      this.minBusynessAvail = false;\n      if (scanRes.busyness && this.busynessChecked) {\n        scanRes.busyness.forEach(r => {\n          if (r.radio === radio) {\n            if (skip.includes(r.channel)) {\n              this.minBusynessAvail = true;\n              sitedata.push(this.genSiteChartBusynessData(r));\n            }\n          }\n        });\n      }\n      //Filter busyness legend\n      let blist = [];\n      sitedata.forEach(r => {\n        if (r.type) {\n          if (blist.includes(r.name)) {\n            r.linkedTo = r.name;\n          } else {\n            blist.push(r.name);\n            r.id = r.name;\n          }\n        }\n      });\n      this.loadSiteScanChart(sitedata);\n    }\n    getData() {\n      const requestEndpoints = [`${environment.SUPPORT_URL}/device-systools/site-scan/results?${this.ssoAuthService.getOrg(this.orgId)}sn=${this.fsan}`, `${environment.SUPPORT_URL}/device-systools/site-scan/results/latest?${this.ssoAuthService.getOrg(this.orgId)}sn=${this.fsan}`];\n      const requests = [];\n      requestEndpoints.forEach(endpoint => {\n        const req = this.api.callRestApi(endpoint).pipe(map(res => {\n          return res;\n        }), catchError(error => {\n          return of(error);\n        }));\n        requests.push(req);\n      });\n      this.combineLatest = combineLatest(requests);\n      this.makeParallelRequest();\n    }\n    makeParallelRequest() {\n      this.parallelReqSubscribtion = this.combineLatest.subscribe(response => {\n        if (response.length) {\n          for (let e of response) {\n            if (e != null && e.error != undefined) {\n              this.loading = false;\n              this.pageErrorHandle(e);\n              this.commonOrgService.pageScrollTop();\n              return;\n            }\n          }\n        }\n        if (response[0].length) {\n          this.results = response[0][0];\n          this.siteScanData(this.results, this.type);\n        }\n        if (response[1]) {\n          this.resultsLatest = response[1][0];\n        }\n        this.loading = false;\n      }, err => {\n        // this.showChart24G = false;\n        // this.showChart5G = false;\n        // this.pageErrorHandle(err);\n        this.loading = false;\n      }, () => {});\n    }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = this.language['Access Denied'];\n      } else {\n        this.errorInfo = this.ssoAuthService.pageErrorHandle(err);\n      }\n      this.closeAlert();\n      this.error = true;\n    }\n    closeAlert() {\n      this.error = false;\n    }\n  }\n  HistorySiteScanComponent.ɵfac = function HistorySiteScanComponent_Factory(t) {\n    return new (t || HistorySiteScanComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.SupportWifiService), i0.ɵɵdirectiveInject(i3.CommonService), i0.ɵɵdirectiveInject(i4.SsoAuthService));\n  };\n  HistorySiteScanComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HistorySiteScanComponent,\n    selectors: [[\"app-history-site-scan\"]],\n    inputs: {\n      chartData: \"chartData\",\n      fsan: \"fsan\",\n      orgId: \"orgId\",\n      type: \"type\",\n      siteScanChannelSelected: \"siteScanChannelSelected\",\n      siteScanSSIDSelected: \"siteScanSSIDSelected\",\n      ssidChecked: \"ssidChecked\",\n      busynessChecked: \"busynessChecked\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"siteScan\"]],\n    template: function HistorySiteScanComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    styles: [\"\"]\n  });\n  return HistorySiteScanComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}