{"ast":null,"code":"import { clear as domClear, delegate as domDelegate, query as domQuery, classes as domClasses, attr as domAttr, domify } from 'min-dom';\nimport { getBBox as getBoundingBox } from '../../util/Elements';\nimport { escapeHTML } from '../../util/EscapeUtil';\n\n/**\n * Provides searching infrastructure\n */\nexport default function SearchPad(canvas, eventBus, overlays, selection) {\n  this._open = false;\n  this._results = [];\n  this._eventMaps = [];\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._overlays = overlays;\n  this._selection = selection;\n\n  // setup elements\n  this._container = domify(SearchPad.BOX_HTML);\n  this._searchInput = domQuery(SearchPad.INPUT_SELECTOR, this._container);\n  this._resultsContainer = domQuery(SearchPad.RESULTS_CONTAINER_SELECTOR, this._container);\n\n  // attach search pad\n  this._canvas.getContainer().appendChild(this._container);\n\n  // cleanup on destroy\n  eventBus.on(['canvas.destroy', 'diagram.destroy'], this.close, this);\n}\nSearchPad.$inject = ['canvas', 'eventBus', 'overlays', 'selection'];\n\n/**\n * Binds and keeps track of all event listereners\n */\nSearchPad.prototype._bindEvents = function () {\n  var self = this;\n  function listen(el, selector, type, fn) {\n    self._eventMaps.push({\n      el: el,\n      type: type,\n      listener: domDelegate.bind(el, selector, type, fn)\n    });\n  }\n\n  // close search on clicking anywhere outside\n  listen(document, 'html', 'click', function (e) {\n    self.close();\n  });\n\n  // stop event from propagating and closing search\n  // focus on input\n  listen(this._container, SearchPad.INPUT_SELECTOR, 'click', function (e) {\n    e.stopPropagation();\n    e.delegateTarget.focus();\n  });\n\n  // preselect result on hover\n  listen(this._container, SearchPad.RESULT_SELECTOR, 'mouseover', function (e) {\n    e.stopPropagation();\n    self._scrollToNode(e.delegateTarget);\n    self._preselect(e.delegateTarget);\n  });\n\n  // selects desired result on mouse click\n  listen(this._container, SearchPad.RESULT_SELECTOR, 'click', function (e) {\n    e.stopPropagation();\n    self._select(e.delegateTarget);\n  });\n\n  // prevent cursor in input from going left and right when using up/down to\n  // navigate results\n  listen(this._container, SearchPad.INPUT_SELECTOR, 'keydown', function (e) {\n    // up\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n\n    // down\n    if (e.keyCode === 40) {\n      e.preventDefault();\n    }\n  });\n\n  // handle keyboard input\n  listen(this._container, SearchPad.INPUT_SELECTOR, 'keyup', function (e) {\n    // escape\n    if (e.keyCode === 27) {\n      return self.close();\n    }\n\n    // enter\n    if (e.keyCode === 13) {\n      var selected = self._getCurrentResult();\n      return selected ? self._select(selected) : self.close();\n    }\n\n    // up\n    if (e.keyCode === 38) {\n      return self._scrollToDirection(true);\n    }\n\n    // down\n    if (e.keyCode === 40) {\n      return self._scrollToDirection();\n    }\n\n    // left && right\n    // do not search while navigating text input\n    if (e.keyCode === 37 || e.keyCode === 39) {\n      return;\n    }\n\n    // anything else\n    self._search(e.delegateTarget.value);\n  });\n};\n\n/**\n * Unbinds all previously established listeners\n */\nSearchPad.prototype._unbindEvents = function () {\n  this._eventMaps.forEach(function (m) {\n    domDelegate.unbind(m.el, m.type, m.listener);\n  });\n};\n\n/**\n * Performs a search for the given pattern.\n *\n * @param  {string} pattern\n */\nSearchPad.prototype._search = function (pattern) {\n  var self = this;\n  this._clearResults();\n\n  // do not search on empty query\n  if (!pattern || pattern === '') {\n    return;\n  }\n  var searchResults = this._searchProvider.find(pattern);\n  if (!searchResults.length) {\n    return;\n  }\n\n  // append new results\n  searchResults.forEach(function (result) {\n    var id = result.element.id;\n    var node = self._createResultNode(result, id);\n    self._results[id] = {\n      element: result.element,\n      node: node\n    };\n  });\n\n  // preselect first result\n  var node = domQuery(SearchPad.RESULT_SELECTOR, this._resultsContainer);\n  this._scrollToNode(node);\n  this._preselect(node);\n};\n\n/**\n * Navigate to the previous/next result. Defaults to next result.\n * @param  {boolean} previous\n */\nSearchPad.prototype._scrollToDirection = function (previous) {\n  var selected = this._getCurrentResult();\n  if (!selected) {\n    return;\n  }\n  var node = previous ? selected.previousElementSibling : selected.nextElementSibling;\n  if (node) {\n    this._scrollToNode(node);\n    this._preselect(node);\n  }\n};\n\n/**\n * Scroll to the node if it is not visible.\n *\n * @param  {Element} node\n */\nSearchPad.prototype._scrollToNode = function (node) {\n  if (!node || node === this._getCurrentResult()) {\n    return;\n  }\n  var nodeOffset = node.offsetTop;\n  var containerScroll = this._resultsContainer.scrollTop;\n  var bottomScroll = nodeOffset - this._resultsContainer.clientHeight + node.clientHeight;\n  if (nodeOffset < containerScroll) {\n    this._resultsContainer.scrollTop = nodeOffset;\n  } else if (containerScroll < bottomScroll) {\n    this._resultsContainer.scrollTop = bottomScroll;\n  }\n};\n\n/**\n * Clears all results data.\n */\nSearchPad.prototype._clearResults = function () {\n  domClear(this._resultsContainer);\n  this._results = [];\n  this._resetOverlay();\n  this._eventBus.fire('searchPad.cleared');\n};\n\n/**\n * Get currently selected result.\n *\n * @return {Element}\n */\nSearchPad.prototype._getCurrentResult = function () {\n  return domQuery(SearchPad.RESULT_SELECTED_SELECTOR, this._resultsContainer);\n};\n\n/**\n * Create result DOM element within results container\n * that corresponds to a search result.\n *\n * 'result' : one of the elements returned by SearchProvider\n * 'id' : id attribute value to assign to the new DOM node\n * return : created DOM element\n *\n * @param  {SearchResult} result\n * @param  {string} id\n * @return {Element}\n */\nSearchPad.prototype._createResultNode = function (result, id) {\n  var node = domify(SearchPad.RESULT_HTML);\n\n  // create only if available\n  if (result.primaryTokens.length > 0) {\n    createInnerTextNode(node, result.primaryTokens, SearchPad.RESULT_PRIMARY_HTML);\n  }\n\n  // secondary tokens (represent element ID) are allways available\n  createInnerTextNode(node, result.secondaryTokens, SearchPad.RESULT_SECONDARY_HTML);\n  domAttr(node, SearchPad.RESULT_ID_ATTRIBUTE, id);\n  this._resultsContainer.appendChild(node);\n  return node;\n};\n\n/**\n * Register search element provider.\n *\n * SearchProvider.find - provides search function over own elements\n *  (pattern) => [{ text: <String>, element: <Element>}, ...]\n *\n * @param  {SearchProvider} provider\n */\nSearchPad.prototype.registerProvider = function (provider) {\n  this._searchProvider = provider;\n};\n\n/**\n * Open search pad.\n */\nSearchPad.prototype.open = function () {\n  if (!this._searchProvider) {\n    throw new Error('no search provider registered');\n  }\n  if (this.isOpen()) {\n    return;\n  }\n  this._bindEvents();\n  this._open = true;\n  domClasses(this._container).add('open');\n  this._searchInput.focus();\n  this._eventBus.fire('searchPad.opened');\n};\n\n/**\n * Close search pad.\n */\nSearchPad.prototype.close = function () {\n  if (!this.isOpen()) {\n    return;\n  }\n  this._unbindEvents();\n  this._open = false;\n  domClasses(this._container).remove('open');\n  this._clearResults();\n  this._searchInput.value = '';\n  this._searchInput.blur();\n  this._resetOverlay();\n  this._eventBus.fire('searchPad.closed');\n};\n\n/**\n * Toggles search pad on/off.\n */\nSearchPad.prototype.toggle = function () {\n  this.isOpen() ? this.close() : this.open();\n};\n\n/**\n * Report state of search pad.\n */\nSearchPad.prototype.isOpen = function () {\n  return this._open;\n};\n\n/**\n * Preselect result entry.\n *\n * @param  {Element} element\n */\nSearchPad.prototype._preselect = function (node) {\n  var selectedNode = this._getCurrentResult();\n\n  // already selected\n  if (node === selectedNode) {\n    return;\n  }\n\n  // removing preselection from current node\n  if (selectedNode) {\n    domClasses(selectedNode).remove(SearchPad.RESULT_SELECTED_CLASS);\n  }\n  var id = domAttr(node, SearchPad.RESULT_ID_ATTRIBUTE);\n  var element = this._results[id].element;\n  domClasses(node).add(SearchPad.RESULT_SELECTED_CLASS);\n  this._resetOverlay(element);\n  this._centerViewbox(element);\n  this._selection.select(element);\n  this._eventBus.fire('searchPad.preselected', element);\n};\n\n/**\n * Select result node.\n *\n * @param  {Element} element\n */\nSearchPad.prototype._select = function (node) {\n  var id = domAttr(node, SearchPad.RESULT_ID_ATTRIBUTE);\n  var element = this._results[id].element;\n  this.close();\n  this._resetOverlay();\n  this._centerViewbox(element);\n  this._selection.select(element);\n  this._eventBus.fire('searchPad.selected', element);\n};\n\n/**\n * Center viewbox on the element middle point.\n *\n * @param  {Element} element\n */\nSearchPad.prototype._centerViewbox = function (element) {\n  var viewbox = this._canvas.viewbox();\n  var box = getBoundingBox(element);\n  var newViewbox = {\n    x: box.x + box.width / 2 - viewbox.outer.width / 2,\n    y: box.y + box.height / 2 - viewbox.outer.height / 2,\n    width: viewbox.outer.width,\n    height: viewbox.outer.height\n  };\n  this._canvas.viewbox(newViewbox);\n  this._canvas.zoom(viewbox.scale);\n};\n\n/**\n * Reset overlay removes and, optionally, set\n * overlay to a new element.\n *\n * @param  {Element} element\n */\nSearchPad.prototype._resetOverlay = function (element) {\n  if (this._overlayId) {\n    this._overlays.remove(this._overlayId);\n  }\n  if (element) {\n    var box = getBoundingBox(element);\n    var overlay = constructOverlay(box);\n    this._overlayId = this._overlays.add(element, overlay);\n  }\n};\n\n/**\n * Construct overlay object for the given bounding box.\n *\n * @param  {BoundingBox} box\n * @return {Object}\n */\nfunction constructOverlay(box) {\n  var offset = 6;\n  var w = box.width + offset * 2;\n  var h = box.height + offset * 2;\n  var styles = ['width: ' + w + 'px', 'height: ' + h + 'px'].join('; ');\n  return {\n    position: {\n      bottom: h - offset,\n      right: w - offset\n    },\n    show: true,\n    html: '<div style=\"' + styles + '\" class=\"' + SearchPad.OVERLAY_CLASS + '\"></div>'\n  };\n}\n\n/**\n * Creates and appends child node from result tokens and HTML template.\n *\n * @param  {Element} node\n * @param  {Array<Object>} tokens\n * @param  {string} template\n */\nfunction createInnerTextNode(parentNode, tokens, template) {\n  var text = createHtmlText(tokens);\n  var childNode = domify(template);\n  childNode.innerHTML = text;\n  parentNode.appendChild(childNode);\n}\n\n/**\n * Create internal HTML markup from result tokens.\n * Caters for highlighting pattern matched tokens.\n *\n * @param  {Array<Object>} tokens\n * @return {string}\n */\nfunction createHtmlText(tokens) {\n  var htmlText = '';\n  tokens.forEach(function (t) {\n    if (t.matched) {\n      htmlText += '<strong class=\"' + SearchPad.RESULT_HIGHLIGHT_CLASS + '\">' + escapeHTML(t.matched) + '</strong>';\n    } else {\n      htmlText += escapeHTML(t.normal);\n    }\n  });\n  return htmlText !== '' ? htmlText : null;\n}\n\n/**\n * CONSTANTS\n */\nSearchPad.CONTAINER_SELECTOR = '.djs-search-container';\nSearchPad.INPUT_SELECTOR = '.djs-search-input input';\nSearchPad.RESULTS_CONTAINER_SELECTOR = '.djs-search-results';\nSearchPad.RESULT_SELECTOR = '.djs-search-result';\nSearchPad.RESULT_SELECTED_CLASS = 'djs-search-result-selected';\nSearchPad.RESULT_SELECTED_SELECTOR = '.' + SearchPad.RESULT_SELECTED_CLASS;\nSearchPad.RESULT_ID_ATTRIBUTE = 'data-result-id';\nSearchPad.RESULT_HIGHLIGHT_CLASS = 'djs-search-highlight';\nSearchPad.OVERLAY_CLASS = 'djs-search-overlay';\nSearchPad.BOX_HTML = '<div class=\"djs-search-container djs-draggable djs-scrollable\">' + '<div class=\"djs-search-input\">' + '<input type=\"text\"/>' + '</div>' + '<div class=\"djs-search-results\"></div>' + '</div>';\nSearchPad.RESULT_HTML = '<div class=\"djs-search-result\"></div>';\nSearchPad.RESULT_PRIMARY_HTML = '<div class=\"djs-search-result-primary\"></div>';\nSearchPad.RESULT_SECONDARY_HTML = '<p class=\"djs-search-result-secondary\"></p>';","map":null,"metadata":{},"sourceType":"module"}