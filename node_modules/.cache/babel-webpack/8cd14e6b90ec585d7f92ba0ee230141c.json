{"ast":null,"code":"'use strict';\n\nvar reduce = require('lodash/transform'),\n  is = require('bpmn-js/lib/util/ModelUtil').is,\n  keys = require('lodash/keys'),\n  forEach = require('lodash/forEach');\n\n/**\n * A handler that implements a BPMN 2.0 property update\n * for business objects which are not represented in the\n * diagram.\n *\n * This is useful in the context of the properties panel in\n * order to update child elements of elements visible in\n * the diagram.\n *\n * Example: perform an update of a specific event definition\n * of an intermediate event.\n *\n * @class\n * @constructor\n */\nfunction UpdateBusinessObjectHandler(elementRegistry) {\n  this._elementRegistry = elementRegistry;\n}\nUpdateBusinessObjectHandler.$inject = ['elementRegistry'];\nmodule.exports = UpdateBusinessObjectHandler;\n\n/**\n * returns the root element\n */\nfunction getRoot(businessObject) {\n  var parent = businessObject;\n  while (parent.$parent) {\n    parent = parent.$parent;\n  }\n  return parent;\n}\nfunction getProperties(businessObject, propertyNames) {\n  return reduce(propertyNames, function (result, key) {\n    result[key] = businessObject.get(key);\n    return result;\n  }, {});\n}\nfunction setProperties(businessObject, properties) {\n  forEach(properties, function (value, key) {\n    businessObject.set(key, value);\n  });\n}\n\n// api /////////////////////////////////////////////\n\n/**\n * Updates a business object with a list of new properties\n *\n * @method  UpdateBusinessObjectHandler#execute\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element the element which has a child business object updated\n * @param {moddle.businessObject} context.businessObject the businessObject to update\n * @param {Object} context.properties a list of properties to set on the businessObject\n *\n * @return {Array<djs.mode.Base>} the updated element\n */\nUpdateBusinessObjectHandler.prototype.execute = function (context) {\n  var element = context.element,\n    businessObject = context.businessObject,\n    rootElements = getRoot(businessObject).rootElements,\n    referenceType = context.referenceType,\n    referenceProperty = context.referenceProperty,\n    changed = [element]; // this will not change any diagram-js elements\n\n  if (!element) {\n    throw new Error('element required');\n  }\n  if (!businessObject) {\n    throw new Error('businessObject required');\n  }\n  var properties = context.properties,\n    oldProperties = context.oldProperties || getProperties(businessObject, keys(properties));\n\n  // check if there the update needs an external element for reference\n  if (typeof referenceType !== 'undefined' && typeof referenceProperty !== 'undefined') {\n    forEach(rootElements, function (rootElement) {\n      if (is(rootElement, referenceType)) {\n        if (rootElement.id === properties[referenceProperty]) {\n          properties[referenceProperty] = rootElement;\n        }\n      }\n    });\n  }\n\n  // update properties\n  setProperties(businessObject, properties);\n\n  // store old values\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n/**\n * Reverts the update\n *\n * @method  UpdateBusinessObjectHandler#revert\n *\n * @param {Object} context\n *\n * @return {djs.mode.Base} the updated element\n */\nUpdateBusinessObjectHandler.prototype.revert = function (context) {\n  var oldProperties = context.oldProperties,\n    businessObject = context.businessObject;\n\n  // update properties\n  setProperties(businessObject, oldProperties);\n  return context.changed;\n};","map":null,"metadata":{},"sourceType":"script"}