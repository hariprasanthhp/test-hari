{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SubscriberService = /*#__PURE__*/(() => {\n  class SubscriberService {\n    constructor(http) {\n      this.http = http;\n      this.bandwidhtbaseUrl = `${environment.COC_SERVICES_ACTIVATION_URL}/bandwidthTiers`;\n      this.baseUrl = `${environment.COC_SERVICES_ACTIVATION_URL}/serviceTemplates`;\n    }\n    getbandwidth() {\n      return this.http.get(this.bandwidhtbaseUrl).pipe(map(res => {\n        if (typeof res === 'object') {\n          res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n            numeric: false\n          }));\n          return res;\n        } else return res;\n      }), catchError(this.handleError));\n    }\n    getsubscriber() {\n      return this.http.get(this.baseUrl).pipe(map(res => {\n        if (typeof res === 'object') {\n          res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n            numeric: false\n          }));\n          return res;\n        } else return res;\n      }), catchError(this.handleError));\n    }\n    getsubscriberDetail(name) {\n      return this.http.get(`${this.baseUrl}?name=${name}`).pipe(catchError(this.handleError));\n    }\n    delsubscriber(name) {\n      return this.http.delete(this.baseUrl + \"/\" + `${name}`).pipe(catchError(this.handleError));\n    }\n    postdata(data) {\n      return this.http.post(this.baseUrl, data).pipe(catchError(this.handleError));\n    }\n    putdata(data) {\n      return this.http.put(this.baseUrl, data).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n  }\n  SubscriberService.ɵfac = function SubscriberService_Factory(t) {\n    return new (t || SubscriberService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  SubscriberService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SubscriberService,\n    factory: SubscriberService.ɵfac,\n    providedIn: 'root'\n  });\n  return SubscriberService;\n})();","map":null,"metadata":{},"sourceType":"module"}