{"ast":null,"code":"import * as i0 from \"@angular/core\";\nvar CryptoJS = require('crypto-js');\nexport let CommonFunctionsService = /*#__PURE__*/(() => {\n  class CommonFunctionsService {\n    constructor() {}\n    getUniqueId(length) {\n      var result = [];\n      var characters = '_-ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var charactersLength = characters.length;\n      for (var i = 0; i < length; i++) {\n        result.push(characters.charAt(Math.floor(Math.random() * charactersLength)));\n      }\n      return result.join('');\n    }\n    decryptKeys(encryptedTxt = '', secretKey = '*poj.ocj;l\\iljoewapkm,cyju-taoil=yi76+l646_31237#$%x9!\"@sh9853($)^') {\n      const bytes = CryptoJS.AES.decrypt(encryptedTxt, secretKey);\n      const originalText = bytes.toString(CryptoJS.enc.Utf8);\n      return originalText;\n    }\n    encryptKeys(encryptedTxt = '', secretKey = '*poj.ocj;l\\iljoewapkm,cyju-taoil=yi76+l646_31237#$%x9!\"@sh9853($)^') {\n      const encrpyt = CryptoJS.AES.encrypt(encryptedTxt, secretKey).toString();\n      return encrpyt;\n    }\n    cdDecryptPwd(encryptedTxt = '', secretKey = '') {\n      const salt = \"dc0da04af8fee58593442bf834b30739\"; //CryptoJS.lib.WordArray.random(128 / 8);\n      const key128 = CryptoJS.PBKDF2(secretKey, CryptoJS.enc.Hex.parse(salt), {\n        keySize: 128 / 32,\n        iterations: 1000\n      });\n      const cipherParams = CryptoJS.lib.CipherParams.create({\n        ciphertext: CryptoJS.enc.Base64.parse(encryptedTxt)\n      });\n      const bytes = CryptoJS.AES.decrypt(cipherParams, key128, {\n        iv: CryptoJS.enc.Hex.parse(salt)\n      });\n      const originalText = bytes.toString(CryptoJS.enc.Utf8);\n      return originalText;\n    }\n    decryptObj(encryptedTxt = '', secretKey = 'jygjy^)$%??//??jkD|\";\\|htdhscsacsfwrfiy~~`@!') {\n      const bytes = CryptoJS.AES.decrypt(encryptedTxt, secretKey);\n      const originalText = bytes.toString(CryptoJS.enc.Utf8);\n      return originalText;\n    }\n    trimSpaceFromNonObjectInputs(value) {\n      return value.trim();\n    }\n    trackPendoEvents(event, eventName) {\n      pendo.track(eventName, {\n        accountId: localStorage.getItem(\"calix.spid\"),\n        visitorId: localStorage.getItem(\"calix.userId\")\n      });\n    }\n  }\n  CommonFunctionsService.ɵfac = function CommonFunctionsService_Factory(t) {\n    return new (t || CommonFunctionsService)();\n  };\n  CommonFunctionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommonFunctionsService,\n    factory: CommonFunctionsService.ɵfac,\n    providedIn: 'root'\n  });\n  return CommonFunctionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}