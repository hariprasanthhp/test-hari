{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory');\nvar cmdHelper = require('../../../../helper/CmdHelper');\n\n/**\n * Create an entry to modify a property of an element which\n * is referenced by a event definition.\n *\n * @param  {djs.model.Base} element\n * @param  {ModdleElement} definition\n * @param  {BpmnFactory} bpmnFactory\n * @param  {Object} options\n * @param  {string} options.id the id of the entry\n * @param  {string} options.label the label of the entry\n * @param  {string} options.referenceProperty the name of referencing property\n * @param  {string} options.modelProperty the name of property to modify\n * @param  {string} options.shouldValidate a flag indicate whether to validate or not\n *\n * @return {Array<Object>} return an array containing the entries\n */\nmodule.exports = function (element, definition, bpmnFactory, translate, options) {\n  var id = options.id || 'element-property';\n  var label = options.label;\n  var referenceProperty = options.referenceProperty;\n  var modelProperty = options.modelProperty || 'name';\n  var shouldValidate = options.shouldValidate || false;\n  var description = options.description;\n  var canBeHidden = !!options.hidden && typeof options.hidden === 'function';\n  var entry = entryFactory.textField(translate, {\n    id: id,\n    label: label,\n    modelProperty: modelProperty,\n    description: description,\n    get: function (element, node) {\n      var reference = definition.get(referenceProperty);\n      var props = {};\n      props[modelProperty] = reference && reference.get(modelProperty);\n      return props;\n    },\n    set: function (element, values, node) {\n      var reference = definition.get(referenceProperty);\n      var props = {};\n      props[modelProperty] = values[modelProperty] || undefined;\n      return cmdHelper.updateBusinessObject(element, reference, props);\n    },\n    hidden: function (element, node) {\n      if (canBeHidden) {\n        return options.hidden.apply(definition, arguments) || !definition.get(referenceProperty);\n      }\n      return !definition.get(referenceProperty);\n    }\n  });\n  if (shouldValidate) {\n    entry.validate = function (element, values, node) {\n      var reference = definition.get(referenceProperty);\n      if (reference && !values[modelProperty]) {\n        var validationErrors = {};\n        validationErrors[modelProperty] = 'Must provide a value';\n        return validationErrors;\n      }\n    };\n  }\n  return [entry];\n};","map":null,"metadata":{},"sourceType":"script"}