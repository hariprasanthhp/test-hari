{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from \"../../../../../environments/environment\";\nimport { HttpParams } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let MyCommunityService = /*#__PURE__*/(() => {\n  class MyCommunityService {\n    constructor(http, sso) {\n      this.http = http;\n      this.sso = sso;\n    }\n    getMicrosites(micrositeId) {\n      return this.http.get(`${environment.API_BASE_URL}/mycommunityiq/bsp-provider/microsite?micrositeId=${micrositeId}`).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getRadiusStatus() {\n      return this.http.get(`${environment.API_BASE_URL}csc/partner/feature/eleven/health`);\n    }\n    getMyCommunityStatus(orgId, subId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}/subscriber-systems/edge-suites?${ID}subscriberId=${subId}`).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    resetMyCommPasswrd(orgId, subId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.post(`${environment.FOUNDATION_BASE_URL}/subscriber-systems/edge-suites/mycommunityiq/subscriber/password/reset-email?${ID}subscriberId=${subId}`, {}).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    myCommWelcomeMail(orgId, subId, communityId) {\n      const ID = this.sso.getOrg(orgId);\n      const community = communityId == 'All' ? '' : `&micrositeId=${communityId}`;\n      return this.http.post(`${environment.FOUNDATION_BASE_URL}/subscriber-systems/edge-suites/mycommunityiq/subscriber/community/welcome-email?${ID}subscriberId=${subId}${community}`, {}).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getSubscriberInfo(orgId, subId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-summary/${subId}?${ID}`).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    GetOnboardedDevices(inpParam) {\n      const params = new HttpParams().set(\"providerId\", inpParam.providerId).set(\"subscriber\", inpParam.subscriber).set(\"limit\", inpParam.limit).set(\"pageNumber\", inpParam.pageNumber);\n      return this.http.get(`${environment.SUPPORT_URL}/partner/report/eleven/deviceAuthentications?`, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    GetOnboardedDevicesApi(inpParam) {\n      const params = new HttpParams().set(\"providerId\", inpParam.providerId).set(\"subscriber\", inpParam.subscriber).set(\"limit\", inpParam.limit);\n      // .set(\"pageNumber\", inpParam.pageNumber)\n      return this.http.get(`${environment.SUPPORT_URL}/partner/report/eleven/deviceAuthentications?providerId=${inpParam.providerId}&subscriber=${encodeURIComponent(inpParam.subscriber)}&limit=${inpParam.limit}`).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n  }\n  MyCommunityService.ɵfac = function MyCommunityService_Factory(t) {\n    return new (t || MyCommunityService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  MyCommunityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MyCommunityService,\n    factory: MyCommunityService.ɵfac,\n    providedIn: 'root'\n  });\n  return MyCommunityService;\n})();","map":null,"metadata":{},"sourceType":"module"}