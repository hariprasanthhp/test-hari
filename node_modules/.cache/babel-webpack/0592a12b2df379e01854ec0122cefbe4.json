{"ast":null,"code":"import { getBusinessObject } from 'bpmn-js/lib/util/ModelUtil';\nimport elementHelper from 'bpmn-js-properties-panel/lib/helper/ElementHelper';\nimport extensionElementsHelper from 'bpmn-js-properties-panel/lib/helper/ExtensionElementsHelper';\nimport cmdHelper from 'bpmn-js-properties-panel/lib/helper/CmdHelper';\nimport { query as domQuery } from 'min-dom';\nimport entryFieldDescription from 'bpmn-js-properties-panel/lib/factory/EntryFieldDescription';\nimport { areOutputParametersSupported, areInputParametersSupported, createIOMapping, createElement as createParameter, determineParamGetFunc, getInputOutput, isInputOutputSupported } from '../../../../helper/InputOutputHelper';\nimport InputOutputParameter from './InputOutputParameter';\nimport OutputParameterToggle from './OutputParameterToggle';\n\n/**\n * Create an input or output mapping entry (containing multiple sub-entries).\n * @param {Object} element - diagram-js element.\n * @param {Object} bpmnFactory - bpmn-js bpmn-factory.\n * @param {Function} translate - translate function.\n * @param {Object} options - Options.\n * @param {string} [options.type] - moddle (zeebe-bpmn-moddle) type name for the IOMapping.\n * @param {string} [options.prop] - moddle (zeebe-bpmn-moddle) property name for the IOMapping.\n * @param {string} [options.prefix] - prefix to be used when constructing id attribute of HTMLElements.\n *\n * @returns {Object} An Object containing multiple Objects in its `entries` attribute,\n * each representing a properties-panel entry. First entry will always be a heading followed\n * by n input / output parameter entries.\n */\nexport default function (element, bpmnFactory, translate, options = {}) {\n  const result = {\n    entries: []\n  };\n\n  // Return if given moddle property is not supported for given element\n  if (!options.prop || !isInputOutputSupported(element) || options.prop === 'inputParameters' && !areInputParametersSupported(element) || options.prop === 'outputParameters' && !areOutputParametersSupported(element)) {\n    return result;\n  }\n\n  // Heading ///////////////////////////////////////////////////////////////\n  const heading = getParametersHeadingEntry(element, bpmnFactory, {\n    type: options.type,\n    prop: options.prop,\n    prefix: options.prefix\n  });\n  result.entries = result.entries.concat(heading);\n\n  // Toggle ///////////////////////////////////////////////////////////////////\n  const toggle = OutputParameterToggle(element, bpmnFactory, translate, {\n    prefix: options.prefix,\n    prop: options.prop\n  });\n  result.entries = result.entries.concat(toggle);\n\n  // Parameters ///////////////////////////////////////////////////////////////\n  result.entries = result.entries.concat(getIOMappingEntries(element, bpmnFactory, translate, {\n    prefix: options.prefix,\n    prop: options.prop\n  }));\n  return result;\n}\n\n/**\n * Create an input or output mapping heading entry.\n * @param {Object} element - diagram-js element.\n * @param {Object} bpmnFactory - bpmn-js bpmn-factory.\n * @param {Object} options - Options.\n * @param {string} [options.type] - moddle (zeebe-bpmn-moddle) type name for the IOMapping.\n * @param {string} [options.prop] - moddle (zeebe-bpmn-moddle) property name for the IOMapping.\n * @param {string} [options.prefix] - prefix to be used when constructing id attribute of HTMLElements.\n *\n * @returns {Object} An Object representing a properties-panel heading entry.\n */\nfunction getParametersHeadingEntry(element, bpmnFactory, options) {\n  const entry = {\n    id: `${options.prefix}-heading`,\n    cssClasses: ['bpp-input-output'],\n    html: `<div class=\"bpp-field-wrapper\">\n      <button type=\"button\" class=\"bpp-input-output__add add action-button\" data-action=\"createElement\">\n      </button><input name=\"hidden\" type=\"hidden\">\n      </div>`,\n    createElement: function (_, entryNode) {\n      const commands = createElement();\n      if (commands) {\n        scheduleCommands(commands, entryNode);\n        return true;\n      }\n    },\n    set: function () {\n      const commands = entry._commands;\n      if (commands) {\n        delete entry._commands;\n        return commands;\n      }\n    }\n  };\n  return entry;\n  function createElement() {\n    const commands = [],\n      bo = getBusinessObject(element);\n    let extensionElements = bo.get('extensionElements');\n    if (!extensionElements) {\n      extensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n        values: []\n      }, bo, bpmnFactory);\n      commands.push(cmdHelper.updateBusinessObject(element, bo, {\n        extensionElements: extensionElements\n      }));\n    }\n\n    // Get the IOMapping\n    let inputOutput = getInputOutput(element);\n    if (!inputOutput) {\n      const parent = extensionElements;\n      inputOutput = createIOMapping(parent, bpmnFactory, {\n        inputParameters: [],\n        outputParameters: []\n      });\n      commands.push(cmdHelper.addAndRemoveElementsFromList(element, extensionElements, 'values', 'extensionElements', [inputOutput], []));\n    }\n    const newElem = createParameter(options.type, inputOutput, bpmnFactory, {\n      source: '= source',\n      target: 'target'\n    });\n    commands.push(cmdHelper.addElementsTolist(element, inputOutput, options.prop, [newElem]));\n    return commands;\n  }\n\n  /**\n   * Schedule commands to be run with next `set` method call.\n   *\n   * @param {Array<any>} commands\n   * @param {HTMLElement} entryNode\n   */\n  function scheduleCommands(commands, entryNode) {\n    entry._commands = commands;\n\n    // @maxtru, adapted from @barmac: hack to make properties panel call `set`\n    const input = domQuery('input[type=\"hidden\"]', entryNode);\n    input.value = 1;\n  }\n}\n\n/**\n * Create a list of Input or Output Mapping properties-panel entries.\n * @param {Object} element - diagram-js element.\n * @param {Object} bpmnFactory - bpmn-js bpmn-factory.\n * @param {Function} translate - translate.\n * @param {Object} options - Options.\n * @param {string} [options.prop] - moddle (zeebe-bpmn-moddle) property name for the IOMapping.\n * @param {string} [options.prefix] - prefix to be used when constructing id attribute of HTMLElements.\n *\n * @returns {Object} An Object representing a properties-panel heading entry.\n */\nfunction getIOMappingEntries(element, bpmnFactory, translate, options) {\n  // Get the IOMapping and determine whether we are dealing with input or output parameters\n  const inputOutput = getInputOutput(element, false),\n    params = determineParamGetFunc(options.prop)(element, false);\n  if (!params.length) {\n    const description = entryFieldDescription(translate, translate('No Variables defined'));\n    return [{\n      id: `${options.prefix}-parameter-placeholder`,\n      cssClasses: ['bpp-input-output-placeholder'],\n      html: description\n    }];\n  }\n  const parameters = params.map(function (param, index) {\n    return InputOutputParameter(param, translate, {\n      idPrefix: `${options.prefix}-parameter-${index}`,\n      onRemove: onRemove,\n      onToggle: onToggle,\n      prop: options.prop\n    });\n    function onRemove() {\n      let commands = [];\n      commands.push(cmdHelper.removeElementsFromList(element, inputOutput, options.prop, null, [param]));\n\n      // remove inputOutput if there are no input/output parameters anymore\n      if (inputOutput.get('inputParameters').length + inputOutput.get('outputParameters').length === 1) {\n        commands.push(extensionElementsHelper.removeEntry(getBusinessObject(element), element, inputOutput));\n      }\n      return commands;\n    }\n  });\n\n  // Return only the entries in a flat structure\n  const entries = parameters.flatMap(function (entry) {\n    return entry.entries;\n  });\n  return entries;\n\n  /**\n   * Close remaining collapsible entries within group.\n   *\n   * @param {boolean} value\n   * @param {HTMLElement} entryNode\n   */\n  function onToggle(value, entryNode) {\n    if (!value) {\n      return;\n    }\n    const currentEntryId = entryNode.dataset.entry;\n\n    // Add closing behavior to the parameters\n    parameters.forEach(function (parameter) {\n      // Each parameter has 3 entries, the first one always is the collapsbile\n      if (parameter.entries[0].id === currentEntryId) {\n        return;\n      }\n      parameter.setOpen(false);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}