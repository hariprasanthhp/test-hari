{"ast":null,"code":"import { isArray, isFunction, forEach } from 'min-dash';\nimport { domify, query as domQuery, attr as domAttr, clear as domClear, classes as domClasses, matches as domMatches, delegate as domDelegate, event as domEvent } from 'min-dom';\nvar TOGGLE_SELECTOR = '.djs-palette-toggle',\n  ENTRY_SELECTOR = '.entry',\n  ELEMENT_SELECTOR = TOGGLE_SELECTOR + ', ' + ENTRY_SELECTOR;\nvar PALETTE_OPEN_CLS = 'open',\n  PALETTE_TWO_COLUMN_CLS = 'two-column';\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * A palette containing modeling elements.\n */\nexport default function Palette(eventBus, canvas) {\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  var self = this;\n  eventBus.on('tool-manager.update', function (event) {\n    var tool = event.tool;\n    self.updateToolHighlight(tool);\n  });\n  eventBus.on('i18n.changed', function () {\n    self._update();\n  });\n  eventBus.on('diagram.init', function () {\n    self._diagramInitialized = true;\n    self._rebuild();\n  });\n}\nPalette.$inject = ['eventBus', 'canvas'];\n\n/**\n * Register a provider with the palette\n *\n * @param  {number} [priority=1000]\n * @param  {PaletteProvider} provider\n *\n * @example\n * const paletteProvider = {\n *   getPaletteEntries: function() {\n *     return function(entries) {\n *       return {\n *         ...entries,\n *         'entry-1': {\n *           label: 'My Entry',\n *           action: function() { alert(\"I have been clicked!\"); }\n *         }\n *       };\n *     }\n *   }\n * };\n *\n * palette.registerProvider(800, paletteProvider);\n */\nPalette.prototype.registerProvider = function (priority, provider) {\n  if (!provider) {\n    provider = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  this._eventBus.on('palette.getProviders', priority, function (event) {\n    event.providers.push(provider);\n  });\n  this._rebuild();\n};\n\n/**\n * Returns the palette entries\n *\n * @return {Object<string, PaletteEntryDescriptor>} map of entries\n */\nPalette.prototype.getEntries = function () {\n  var providers = this._getProviders();\n  return providers.reduce(addPaletteEntries, {});\n};\nPalette.prototype._rebuild = function () {\n  if (!this._diagramInitialized) {\n    return;\n  }\n  var providers = this._getProviders();\n  if (!providers.length) {\n    return;\n  }\n  if (!this._container) {\n    this._init();\n  }\n  this._update();\n};\n\n/**\n * Initialize\n */\nPalette.prototype._init = function () {\n  var self = this;\n  var eventBus = this._eventBus;\n  var parentContainer = this._getParentContainer();\n  var container = this._container = domify(Palette.HTML_MARKUP);\n  parentContainer.appendChild(container);\n  domDelegate.bind(container, ELEMENT_SELECTOR, 'click', function (event) {\n    var target = event.delegateTarget;\n    if (domMatches(target, TOGGLE_SELECTOR)) {\n      return self.toggle();\n    }\n    self.trigger('click', event);\n  });\n\n  // prevent drag propagation\n  domEvent.bind(container, 'mousedown', function (event) {\n    event.stopPropagation();\n  });\n\n  // prevent drag propagation\n  domDelegate.bind(container, ENTRY_SELECTOR, 'dragstart', function (event) {\n    self.trigger('dragstart', event);\n  });\n  eventBus.on('canvas.resized', this._layoutChanged, this);\n  eventBus.fire('palette.create', {\n    container: container\n  });\n};\nPalette.prototype._getProviders = function (id) {\n  var event = this._eventBus.createEvent({\n    type: 'palette.getProviders',\n    providers: []\n  });\n  this._eventBus.fire(event);\n  return event.providers;\n};\n\n/**\n * Update palette state.\n *\n * @param  {Object} [state] { open, twoColumn }\n */\nPalette.prototype._toggleState = function (state) {\n  state = state || {};\n  var parent = this._getParentContainer(),\n    container = this._container;\n  var eventBus = this._eventBus;\n  var twoColumn;\n  var cls = domClasses(container);\n  if ('twoColumn' in state) {\n    twoColumn = state.twoColumn;\n  } else {\n    twoColumn = this._needsCollapse(parent.clientHeight, this._entries || {});\n  }\n\n  // always update two column\n  cls.toggle(PALETTE_TWO_COLUMN_CLS, twoColumn);\n  if ('open' in state) {\n    cls.toggle(PALETTE_OPEN_CLS, state.open);\n  }\n  eventBus.fire('palette.changed', {\n    twoColumn: twoColumn,\n    open: this.isOpen()\n  });\n};\nPalette.prototype._update = function () {\n  var entriesContainer = domQuery('.djs-palette-entries', this._container),\n    entries = this._entries = this.getEntries();\n  domClear(entriesContainer);\n  forEach(entries, function (entry, id) {\n    var grouping = entry.group || 'default';\n    var container = domQuery('[data-group=' + grouping + ']', entriesContainer);\n    if (!container) {\n      container = domify('<div class=\"group\" data-group=\"' + grouping + '\"></div>');\n      entriesContainer.appendChild(container);\n    }\n    var html = entry.html || (entry.separator ? '<hr class=\"separator\" />' : '<div class=\"entry\" draggable=\"true\"></div>');\n    var control = domify(html);\n    container.appendChild(control);\n    if (!entry.separator) {\n      domAttr(control, 'data-action', id);\n      if (entry.title) {\n        domAttr(control, 'title', entry.title);\n      }\n      if (entry.className) {\n        addClasses(control, entry.className);\n      }\n      if (entry.imageUrl) {\n        control.appendChild(domify('<img src=\"' + entry.imageUrl + '\">'));\n      }\n    }\n  });\n\n  // open after update\n  this.open();\n};\n\n/**\n * Trigger an action available on the palette\n *\n * @param  {string} action\n * @param  {Event} event\n */\nPalette.prototype.trigger = function (action, event, autoActivate) {\n  var entries = this._entries,\n    entry,\n    handler,\n    originalEvent,\n    button = event.delegateTarget || event.target;\n  if (!button) {\n    return event.preventDefault();\n  }\n  entry = entries[domAttr(button, 'data-action')];\n\n  // when user clicks on the palette and not on an action\n  if (!entry) {\n    return;\n  }\n  handler = entry.action;\n  originalEvent = event.originalEvent || event;\n\n  // simple action (via callback function)\n  if (isFunction(handler)) {\n    if (action === 'click') {\n      handler(originalEvent, autoActivate);\n    }\n  } else {\n    if (handler[action]) {\n      handler[action](originalEvent, autoActivate);\n    }\n  }\n\n  // silence other actions\n  event.preventDefault();\n};\nPalette.prototype._layoutChanged = function () {\n  this._toggleState({});\n};\n\n/**\n * Do we need to collapse to two columns?\n *\n * @param {number} availableHeight\n * @param {Object} entries\n *\n * @return {boolean}\n */\nPalette.prototype._needsCollapse = function (availableHeight, entries) {\n  // top margin + bottom toggle + bottom margin\n  // implementors must override this method if they\n  // change the palette styles\n  var margin = 20 + 10 + 20;\n  var entriesHeight = Object.keys(entries).length * 46;\n  return availableHeight < entriesHeight + margin;\n};\n\n/**\n * Close the palette\n */\nPalette.prototype.close = function () {\n  this._toggleState({\n    open: false,\n    twoColumn: false\n  });\n};\n\n/**\n * Open the palette\n */\nPalette.prototype.open = function () {\n  this._toggleState({\n    open: true\n  });\n};\nPalette.prototype.toggle = function (open) {\n  if (this.isOpen()) {\n    this.close();\n  } else {\n    this.open();\n  }\n};\nPalette.prototype.isActiveTool = function (tool) {\n  return tool && this._activeTool === tool;\n};\nPalette.prototype.updateToolHighlight = function (name) {\n  var entriesContainer, toolsContainer;\n  if (!this._toolsContainer) {\n    entriesContainer = domQuery('.djs-palette-entries', this._container);\n    this._toolsContainer = domQuery('[data-group=tools]', entriesContainer);\n  }\n  toolsContainer = this._toolsContainer;\n  forEach(toolsContainer.children, function (tool) {\n    var actionName = tool.getAttribute('data-action');\n    if (!actionName) {\n      return;\n    }\n    var toolClasses = domClasses(tool);\n    actionName = actionName.replace('-tool', '');\n    if (toolClasses.contains('entry') && actionName === name) {\n      toolClasses.add('highlighted-entry');\n    } else {\n      toolClasses.remove('highlighted-entry');\n    }\n  });\n};\n\n/**\n * Return true if the palette is opened.\n *\n * @example\n *\n * palette.open();\n *\n * if (palette.isOpen()) {\n *   // yes, we are open\n * }\n *\n * @return {boolean} true if palette is opened\n */\nPalette.prototype.isOpen = function () {\n  return domClasses(this._container).has(PALETTE_OPEN_CLS);\n};\n\n/**\n * Get container the palette lives in.\n *\n * @return {Element}\n */\nPalette.prototype._getParentContainer = function () {\n  return this._canvas.getContainer();\n};\n\n/* markup definition */\n\nPalette.HTML_MARKUP = '<div class=\"djs-palette\">' + '<div class=\"djs-palette-entries\"></div>' + '<div class=\"djs-palette-toggle\"></div>' + '</div>';\n\n// helpers //////////////////////\n\nfunction addClasses(element, classNames) {\n  var classes = domClasses(element);\n  var actualClassNames = isArray(classNames) ? classNames : classNames.split(/\\s+/g);\n  actualClassNames.forEach(function (cls) {\n    classes.add(cls);\n  });\n}\nfunction addPaletteEntries(entries, provider) {\n  var entriesOrUpdater = provider.getPaletteEntries();\n  if (isFunction(entriesOrUpdater)) {\n    return entriesOrUpdater(entries);\n  }\n  forEach(entriesOrUpdater, function (entry, id) {\n    entries[id] = entry;\n  });\n  return entries;\n}","map":null,"metadata":{},"sourceType":"module"}