{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/shared/services/custom-translate.service\";\nimport * as i3 from \"src/app/shared/services/sso-auth.service\";\nimport * as i4 from \"../services/endpoint-management.service\";\nimport * as i5 from \"@angular/common\";\nconst _c0 = function () {\n  return [\"active\"];\n};\nfunction ConfigurationComponent_div_0_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 5);\n    i0.ɵɵelementStart(1, \"a\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menu_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", menu_r2.title);\n    i0.ɵɵpropertyInterpolate(\"routerLink\", menu_r2.link);\n    i0.ɵɵproperty(\"routerLinkActive\", i0.ɵɵpureFunction0(4, _c0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(menu_r2.title);\n  }\n}\nfunction ConfigurationComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelementStart(1, \"ul\", 3);\n    i0.ɵɵtemplate(2, ConfigurationComponent_div_0_li_2_Template, 3, 5, \"li\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.menus);\n  }\n}\nexport let ConfigurationComponent = /*#__PURE__*/(() => {\n  class ConfigurationComponent {\n    constructor(router, customTranslateService, sso, service) {\n      this.router = router;\n      this.customTranslateService = customTranslateService;\n      this.sso = sso;\n      this.service = service;\n      this.pageAvailable = false;\n      this.menus = []; // Initialize menus as an empty array\n      this.isSecureAccess = false;\n      this.isProd = false;\n      this.isSysAdmin = false;\n      this.cocEntitlementCheck = false;\n      let url = this.router.url;\n      this.ORG_ID = this.sso.getOrganizationID(url);\n      this.MODULE = this.sso.getRedirectModule(url);\n      this.isSecureAccess = this.sso.isSecureAccess();\n      this.isProd = this.sso.isProdCheckFromBaseURL();\n      this.checkSysAdmin();\n    }\n    ngOnInit() {\n      this.language = this.customTranslateService.defualtLanguage;\n      if (this.language) {\n        this.pageAvailable = true;\n      }\n      this.service.flowDataSync.subscribe(res => {\n        if (!res.flowDataTab && this.menus) {\n          const index = this.menus.findIndex(obj => obj.link.includes('flow-data'));\n          if (index !== -1) {\n            this.menus.splice(index, 1);\n          }\n        }\n      });\n      this.customTranslateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.menus[0].title = this.language['Real-time Delay'];\n        this.menus[1].title = this.language['Flow Data'];\n        if (this.menus.length === 3) {\n          this.menus[2].title = this.language['Unmapped IP Aggregation'];\n        } else if (this.menus.length === 4) {\n          this.menus[2].title = this.language['1-Minute Aggregation'];\n          this.menus[3].title = this.language['Unmapped IP Aggregation'];\n        }\n        // if (this.MODULE === 'systemAdministration' && !this.isSecureAccess) {\n        //   if (!this.cocEntitlementCheck) {\n        // this.menus[1].title = this.language['1-Minute Aggregation']\n        //   }\n        // }\n        // this.menus[2].title = this.language['Unmapped IP Aggregation']\n      });\n\n      this.menus = [{\n        title: this.language['Real-time Delay'],\n        link: 'realtime-delay',\n        subMenuLink: `/${this.MODULE}/flowAnalyze/configurations/realtime-delay`\n      }];\n      this.getData();\n      this.activeRoute = this.router.url;\n    }\n    ngOnDestroy() {\n      if (this.orgSubs) {\n        this.orgSubs.unsubscribe();\n      }\n    }\n    onActivate(event) {\n      window.scroll({\n        top: 0,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }\n    languageChange(language) {\n      sessionStorage.setItem('defaultLanguage', language);\n      this.customTranslateService.changeLanguage(language);\n    }\n    goPage(page) {\n      this.router.navigate([page]);\n    }\n    pageChange(menu) {\n      this.activeRoute = menu.subMenuLink;\n    }\n    checkSysAdmin() {\n      let roles = this.sso.getRoles();\n      if (roles === null || roles === void 0 ? void 0 : roles.includes('SysAdmin')) {\n        this.isSysAdmin = true;\n      } else {\n        this.isSysAdmin = false;\n      }\n    }\n    getData() {\n      this.orgSubs = this.service.getOrg(this.ORG_ID).subscribe(res => {\n        // let cocEntitlementCheck = false;\n        if (res) {\n          if (res && res.entitlement && res.entitlement.length) {\n            this.cocEntitlementCheck = res.entitlement.split(',').includes('COC') ? true : false;\n          } else {\n            this.cocEntitlementCheck = false;\n          }\n        } else {\n          this.cocEntitlementCheck = false;\n        }\n        if (this.MODULE === 'systemAdministration' && !this.isSecureAccess) {\n          if (!this.cocEntitlementCheck) {\n            this.menus.push({\n              title: this.language['1-Minute Aggregation'],\n              link: 'one-minute-agggregation',\n              subMenuLink: `/${this.MODULE}/flowAnalyze/configurations/one-minute-agggregation`\n            });\n          }\n          this.menus.push({\n            title: this.language['Unmapped IP Aggregation'],\n            link: 'unmapped-ip-aggregation',\n            subMenuLink: `/${this.MODULE}/flowAnalyze/configurations/unmapped-ip-aggregation`\n          });\n        }\n        if (res.useAsmApplications) {\n          this.menus.push({\n            title: this.language['Flow Data'],\n            link: 'flow-data',\n            subMenuLink: `/${this.MODULE}/flowAnalyze/configurations/flow-data`\n          });\n        }\n      });\n    }\n  }\n  ConfigurationComponent.ɵfac = function ConfigurationComponent_Factory(t) {\n    return new (t || ConfigurationComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.CustomTranslateService), i0.ɵɵdirectiveInject(i3.SsoAuthService), i0.ɵɵdirectiveInject(i4.EndpointManagementService));\n  };\n  ConfigurationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConfigurationComponent,\n    selectors: [[\"app-configuration\"]],\n    decls: 2,\n    vars: 1,\n    consts: [[\"class\", \"flow-config-sub-tab\", 4, \"ngIf\"], [3, \"activate\"], [1, \"flow-config-sub-tab\"], [1, \"nav\"], [\"class\", \"nav-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"nav-item\"], [1, \"nav-link\", 3, \"id\", \"routerLink\", \"routerLinkActive\"]],\n    template: function ConfigurationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ConfigurationComponent_div_0_Template, 3, 1, \"div\", 0);\n        i0.ɵɵelementStart(1, \"router-outlet\", 1);\n        i0.ɵɵlistener(\"activate\", function ConfigurationComponent_Template_router_outlet_activate_1_listener($event) {\n          return ctx.onActivate($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.pageAvailable);\n      }\n    },\n    directives: [i5.NgIf, i1.RouterOutlet, i5.NgForOf, i1.RouterLinkWithHref, i1.RouterLinkActive],\n    styles: [\"\"]\n  });\n  return ConfigurationComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}