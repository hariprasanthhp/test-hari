{"ast":null,"code":"import SnapContext from './SnapContext';\nimport { bottomRight, getChildren, isSnapped, setSnapped, topLeft } from './SnapUtil';\nimport { isCmd } from '../keyboard/KeyboardUtil';\nimport { asTRBL, getMid } from '../../layout/LayoutUtil';\nimport { forEach } from 'min-dash';\nvar HIGHER_PRIORITY = 1250;\n\n/**\r\n * Snap during resize.\r\n *\r\n * @param {EventBus} eventBus\r\n * @param {Snapping} snapping\r\n */\nexport default function ResizeSnapping(eventBus, snapping) {\n  var self = this;\n  eventBus.on(['resize.start'], function (event) {\n    self.initSnap(event);\n  });\n  eventBus.on(['resize.move', 'resize.end'], HIGHER_PRIORITY, function (event) {\n    var context = event.context,\n      shape = context.shape,\n      parent = shape.parent,\n      direction = context.direction,\n      snapContext = context.snapContext;\n    if (event.originalEvent && isCmd(event.originalEvent)) {\n      return;\n    }\n    if (isSnapped(event)) {\n      return;\n    }\n    var snapPoints = snapContext.pointsForTarget(parent);\n    if (!snapPoints.initialized) {\n      snapPoints = self.addSnapTargetPoints(snapPoints, shape, parent, direction);\n      snapPoints.initialized = true;\n    }\n    if (isHorizontal(direction)) {\n      setSnapped(event, 'x', event.x);\n    }\n    if (isVertical(direction)) {\n      setSnapped(event, 'y', event.y);\n    }\n    snapping.snap(event, snapPoints);\n  });\n  eventBus.on(['resize.cleanup'], function () {\n    snapping.hide();\n  });\n}\nResizeSnapping.prototype.initSnap = function (event) {\n  var context = event.context,\n    shape = context.shape,\n    direction = context.direction,\n    snapContext = context.snapContext;\n  if (!snapContext) {\n    snapContext = context.snapContext = new SnapContext();\n  }\n  var snapOrigin = getSnapOrigin(shape, direction);\n  snapContext.setSnapOrigin('corner', {\n    x: snapOrigin.x - event.x,\n    y: snapOrigin.y - event.y\n  });\n  return snapContext;\n};\nResizeSnapping.prototype.addSnapTargetPoints = function (snapPoints, shape, target, direction) {\n  var snapTargets = this.getSnapTargets(shape, target);\n  forEach(snapTargets, function (snapTarget) {\n    snapPoints.add('corner', bottomRight(snapTarget));\n    snapPoints.add('corner', topLeft(snapTarget));\n  });\n  snapPoints.add('corner', getSnapOrigin(shape, direction));\n  return snapPoints;\n};\nResizeSnapping.$inject = ['eventBus', 'snapping'];\nResizeSnapping.prototype.getSnapTargets = function (shape, target) {\n  return getChildren(target).filter(function (child) {\n    return !isAttached(child, shape) && !isConnection(child) && !isHidden(child) && !isLabel(child);\n  });\n};\n\n// helpers //////////\n\nfunction getSnapOrigin(shape, direction) {\n  var mid = getMid(shape),\n    trbl = asTRBL(shape);\n  var snapOrigin = {\n    x: mid.x,\n    y: mid.y\n  };\n  if (direction.indexOf('n') !== -1) {\n    snapOrigin.y = trbl.top;\n  } else if (direction.indexOf('s') !== -1) {\n    snapOrigin.y = trbl.bottom;\n  }\n  if (direction.indexOf('e') !== -1) {\n    snapOrigin.x = trbl.right;\n  } else if (direction.indexOf('w') !== -1) {\n    snapOrigin.x = trbl.left;\n  }\n  return snapOrigin;\n}\nfunction isAttached(element, host) {\n  return element.host === host;\n}\nfunction isConnection(element) {\n  return !!element.waypoints;\n}\nfunction isHidden(element) {\n  return !!element.hidden;\n}\nfunction isLabel(element) {\n  return !!element.labelTarget;\n}\nfunction isHorizontal(direction) {\n  return direction === 'n' || direction === 's';\n}\nfunction isVertical(direction) {\n  return direction === 'e' || direction === 'w';\n}","map":null,"metadata":{},"sourceType":"module"}