{"ast":null,"code":"import { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let NetworkDevicesApiService = /*#__PURE__*/(() => {\n  class NetworkDevicesApiService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseURL = environment.faAdminURL;\n      this.org_id = +localStorage.getItem('calix.org_id');\n      this.deviceDelete = this.baseURL + `device`;\n      this.export = this.baseURL + `export/`;\n      this.fa_import = this.baseURL + `fa_import/`;\n      this.deviceUpdate = this.baseURL + `device`;\n    }\n    DeviceList(orgId) {\n      return this.httpClient.get(this.baseURL + `device?org-id=${orgId}`);\n    }\n    DeviceAdd(reqBody, orgId) {\n      return this.httpClient.post(this.baseURL + `device?org-id=${orgId}`, reqBody);\n    }\n    DeviceDelete(id, orgId) {\n      return this.httpClient.delete(`${this.deviceDelete}/${id}?org-id=${orgId}`);\n    }\n    DeviceUpdate(id, reqBody, orgId) {\n      return this.httpClient.put(`${this.deviceUpdate}/${id}?org-id=${orgId}`, reqBody);\n    }\n    Export(module, orgId) {\n      return this.httpClient.get(`${this.export}${module}?org-id=${orgId}`);\n    }\n    Import(module, reqBody, orgId) {\n      return this.httpClient.put(`${this.fa_import}${module}?org-id=${orgId}`, reqBody);\n    }\n    DeviceStatusList(orgId) {\n      return this.httpClient.get(`${environment.FLOW_BASE_URL}metrics/reports/fcr/devicestatus?OrgId=${orgId}`);\n    }\n    DeviceMatricSeries(deviceIp, startTime, endTime, orgId) {\n      let url = `${environment.FLOW_BASE_URL}metrics/timeseries?deviceIP=${deviceIp}&startTime=${startTime}&OrgId=${orgId}`;\n      if (endTime) {\n        url = `${url}&endTime=${endTime}`;\n      }\n      return this.httpClient.get(url);\n    }\n    GetPacketTimingData(deviceIp, orgId) {\n      let url = `${environment.FLOW_BASE_URL}metrics/timestats?deviceIP=${deviceIp}&OrgId=${orgId}`;\n      return this.httpClient.get(url);\n    }\n  }\n  NetworkDevicesApiService.ɵfac = function NetworkDevicesApiService_Factory(t) {\n    return new (t || NetworkDevicesApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  NetworkDevicesApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NetworkDevicesApiService,\n    factory: NetworkDevicesApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return NetworkDevicesApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}