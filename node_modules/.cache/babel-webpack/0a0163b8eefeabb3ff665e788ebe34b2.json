{"ast":null,"code":"import { environment } from \"../../../environments/environment\";\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DashboardService = /*#__PURE__*/(() => {\n  class DashboardService {\n    constructor(http) {\n      this.http = http;\n      this.result$ = new Subject();\n    }\n    getData(data) {\n      let params = {\n        precision: 6,\n        window: \"15min\",\n        location: {\n          topLeft: {\n            lat: 90,\n            lon: -180\n          },\n          bottomRight: {\n            lat: -90,\n            lon: 180\n          }\n        }\n      };\n      this.doService = this.http.post(environment.SP_API_BASE_URL + '/geo/telemetry/all', params).subscribe(res => {\n        let mdata = res['result'];\n        let mlength = mdata.length;\n        let locations = [];\n        for (let i = 0; i < mlength; i++) {\n          if (mdata[i] && typeof mdata[i].location == \"object\" && mdata[i].location) {\n            locations.push({\n              lat: parseFloat(mdata[i].location.lat),\n              lng: parseFloat(mdata[i].location.lon),\n              macAddr: mdata[i].macAddr\n            });\n          }\n        }\n        res['locations'] = locations;\n        this.result$.next(res);\n      }, err => {\n        //console.log(err);\n        this.result$.next({\n          error: true,\n          errorMsg: err.statusText\n        });\n      });\n    }\n    getGeoTelemetryData(macAddr) {\n      let locked;\n      if (locked) {\n        return;\n      }\n      locked = true;\n      return this.http.get(environment.SP_API_BASE_URL + '/geo/telemetry/data?macAddr=' + macAddr);\n    }\n    undoService() {\n      if (this.doService) {\n        this.doService.unsubscribe();\n      }\n    }\n  }\n  DashboardService.ɵfac = function DashboardService_Factory(t) {\n    return new (t || DashboardService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  DashboardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DashboardService,\n    factory: DashboardService.ɵfac,\n    providedIn: 'root'\n  });\n  return DashboardService;\n})();","map":null,"metadata":{},"sourceType":"module"}