{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { isNil } from 'lodash';\nimport * as i0 from \"@angular/core\";\nexport let CustomDropdownDirective = /*#__PURE__*/(() => {\n  class CustomDropdownDirective {\n    constructor() {\n      this.internalOpen = false;\n      this.openChange = new EventEmitter();\n    }\n    get isOpen() {\n      return this.internalOpen;\n    }\n    onKeyupEsc() {\n      this.close();\n    }\n    onDocumentClick(event) {\n      if (event.button !== 2 && !this.isEventFromToggle(event)) {\n        this.close();\n      }\n    }\n    onDocumentClickedEnter(event) {\n      this.close();\n    }\n    open() {\n      if (!this.internalOpen) {\n        this.internalOpen = true;\n        this.openChange.emit(true);\n      }\n    }\n    close() {\n      if (this.internalOpen) {\n        this.internalOpen = false;\n        this.openChange.emit(false);\n      }\n    }\n    toggle() {\n      if (this.isOpen) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n    isEventFromToggle(event) {\n      return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\n    }\n  }\n  CustomDropdownDirective.ɵfac = function CustomDropdownDirective_Factory(t) {\n    return new (t || CustomDropdownDirective)();\n  };\n  CustomDropdownDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: CustomDropdownDirective,\n    selectors: [[\"\", \"customDropdown\", \"\"]],\n    hostVars: 2,\n    hostBindings: function CustomDropdownDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keyup.esc\", function CustomDropdownDirective_keyup_esc_HostBindingHandler() {\n          return ctx.onKeyupEsc();\n        })(\"click\", function CustomDropdownDirective_click_HostBindingHandler($event) {\n          return ctx.onDocumentClick($event);\n        }, false, i0.ɵɵresolveDocument)(\"keyup.enter\", function CustomDropdownDirective_keyup_enter_HostBindingHandler() {\n          return ctx.onDocumentClickedEnter();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"show\", ctx.isOpen);\n      }\n    },\n    inputs: {\n      internalOpen: [\"open\", \"internalOpen\"]\n    },\n    outputs: {\n      openChange: \"openChange\"\n    },\n    exportAs: [\"customDropdown\"]\n  });\n  return CustomDropdownDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}