{"ast":null,"code":"'use strict';\n\nvar escapeHTML = require('../Utils').escapeHTML;\nvar domify = require('min-dom').domify,\n  domQuery = require('min-dom').query;\nvar forEach = require('lodash/forEach');\nvar entryFieldDescription = require('./EntryFieldDescription');\nvar isList = function (list) {\n  return !(!list || Object.prototype.toString.call(list) !== '[object Array]');\n};\nvar addEmptyParameter = function (list) {\n  return list.concat([{\n    name: '',\n    value: ''\n  }]);\n};\nvar createOption = function (option) {\n  return '<option value=\"' + option.value + '\">' + option.name + '</option>';\n};\n\n/**\n * @param  {Object} options\n * @param  {string} options.id\n * @param  {string} [options.label]\n * @param  {Array<Object>} options.selectOptions\n * @param  {string} options.modelProperty\n * @param  {boolean} options.emptyParameter\n * @param  {function} options.disabled\n * @param  {function} options.hidden\n * @param  {Object} defaultParameters\n *\n * @return {Object}\n */\nvar selectbox = function (translate, options, defaultParameters) {\n  var resource = defaultParameters,\n    label = options.label || resource.id,\n    selectOptions = options.selectOptions || [{\n      name: '',\n      value: ''\n    }],\n    modelProperty = options.modelProperty,\n    emptyParameter = options.emptyParameter,\n    canBeDisabled = !!options.disabled && typeof options.disabled === 'function',\n    canBeHidden = !!options.hidden && typeof options.hidden === 'function',\n    description = options.description;\n  if (emptyParameter) {\n    selectOptions = addEmptyParameter(selectOptions);\n  }\n  resource.html = domify('<label for=\"camunda-' + escapeHTML(resource.id) + '\"' + (canBeDisabled ? 'data-disable=\"isDisabled\" ' : '') + (canBeHidden ? 'data-show=\"isHidden\" ' : '') + '>' + escapeHTML(label) + '</label>' + '<select id=\"camunda-' + escapeHTML(resource.id) + '-select\" name=\"' + escapeHTML(modelProperty) + '\"' + (canBeDisabled ? 'data-disable=\"isDisabled\" ' : '') + (canBeHidden ? 'data-show=\"isHidden\" ' : '') + ' data-value></select>');\n  var select = domQuery('select', resource.html);\n  if (isList(selectOptions)) {\n    forEach(selectOptions, function (option) {\n      select.appendChild(domify('<option value=\"' + escapeHTML(option.value) + (option.title ? '\" title=\"' + escapeHTML(option.title) : '') + '\">' + (option.name ? escapeHTML(option.name) : '') + '</option>'));\n    });\n  }\n\n  // add description below select box entry field\n  if (description && typeof options.showCustomInput !== 'function') {\n    resource.html.appendChild(entryFieldDescription(translate, description, {\n      show: canBeHidden && 'isHidden'\n    }));\n  }\n\n  /**\n   * Fill the select box options dynamically.\n   *\n   * Calls the defined function #selectOptions in the entry to get the\n   * values for the options and set the value to the inputNode.\n   *\n   * @param {djs.model.Base} element\n   * @param {HTMLElement} entryNode\n   * @param {EntryDescriptor} inputNode\n   * @param {Object} inputName\n   * @param {Object} newValue\n   */\n  resource.setControlValue = function (element, entryNode, inputNode, inputName, newValue) {\n    if (typeof selectOptions === 'function') {\n      var options = selectOptions(element, inputNode);\n      if (options) {\n        // remove existing options\n        while (inputNode.firstChild) {\n          inputNode.removeChild(inputNode.firstChild);\n        }\n\n        // add options\n        forEach(options, function (option) {\n          var template = domify(createOption(option));\n          inputNode.appendChild(template);\n        });\n      }\n    }\n\n    // set select value\n    if (newValue !== undefined) {\n      inputNode.value = newValue;\n    }\n  };\n  if (canBeDisabled) {\n    resource.isDisabled = function () {\n      return options.disabled.apply(resource, arguments);\n    };\n  }\n  if (canBeHidden) {\n    resource.isHidden = function () {\n      return !options.hidden.apply(resource, arguments);\n    };\n  }\n  resource.cssClasses = ['bpp-dropdown'];\n  return resource;\n};\nmodule.exports = selectbox;","map":null,"metadata":{},"sourceType":"script"}