{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { WindowRefService } from './window-ref.service';\nimport { saveAs } from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"src/app/shared-utils/date-utils.service\";\nimport * as i5 from \"./common-functions.service\";\n// import { CustomTranslateService } from \"../../app-services/custom-translate.service\";\n// import { OrgSecureAccessService } from './../organisation/shared/services/org-secure-access.service';\nexport var AcessModifiers = /*#__PURE__*/(() => {\n  (function (AcessModifiers) {\n    AcessModifiers[\"READ\"] = \"read\";\n    AcessModifiers[\"WRITE\"] = \"write\";\n  })(AcessModifiers || (AcessModifiers = {}));\n  return AcessModifiers;\n})();\nexport var CheckScopes = /*#__PURE__*/(() => {\n  (function (CheckScopes) {\n    CheckScopes[\"VALIDATE_SCOPE\"] = \"VALIDATE_SCOPE\";\n    CheckScopes[\"VALIDATE_FOUNDATION_SCOPE\"] = \"VALIDATE_FOUNDATION_SCOPE\";\n  })(CheckScopes || (CheckScopes = {}));\n  return CheckScopes;\n})();\nexport let SsoAuthService = /*#__PURE__*/(() => {\n  class SsoAuthService {\n    constructor(http, auth, router,\n    // private language: CustomTranslateService,\n    // private secService: OrgSecureAccessService\n    dateUtils, commonFunction) {\n      this.http = http;\n      this.auth = auth;\n      this.router = router;\n      this.dateUtils = dateUtils;\n      this.commonFunction = commonFunction;\n      this.API = `${environment.AUTH_API_HOST}`;\n      this.authorization = 'apikey=' + environment.X_CALIX_CLIENTID;\n      this.client_secret = environment.X_CALIX_SECURE_CLIENTID;\n      this.shadSp = false;\n      this.secResult$ = new Subject();\n      this.federatedLogin$ = new Subject();\n      this.relativeUrlResult$ = new Subject();\n      this.logoutResult$ = new Subject();\n      this.cmcTos$ = new Subject();\n      this.cscTos$ = new Subject();\n      this.ccoTos$ = new Subject();\n      this.foundationTos$ = new Subject();\n      this.apiError$ = new Subject();\n      this.subscriberEndPointId$ = new Subject();\n      this.refreshTokenNew$ = new Subject();\n      this.apigeeError$ = new Subject();\n      this.isExosModel = new Subject();\n      this.commandIQData = new Subject();\n      this.hasPageAccess$ = new Subject();\n      this.toggled$ = new Subject();\n      this.isFromCcoModule = false;\n      this.thoughtspotLougoutUrl = 'https://dashboards-dev.calix.com/callosum/v1/tspublic/v1/session/logout';\n      this.EfficiencyScore = new Subject();\n      this.currentSubscriberInfo = new Subject();\n    }\n    logoutThoughtspot() {\n      return this.http.post(this.thoughtspotLougoutUrl, null, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'X-Requested-By': 'ThoughtSpot'\n        }\n      });\n    }\n    checkUsername(username) {\n      return this.http.get(`${this.API}/usertype?username=${encodeURIComponent(username)}`);\n    }\n    getAuthCode(userCredentials) {\n      return this.http.post(`${this.API}/LocalAuth?${this.authorization}`, userCredentials).pipe(tap(error => this.errorHandler(error)));\n    }\n    getAuthToken(formData, grantType) {\n      //console.log(grantType);\n      let param = '';\n      if (grantType === 'authorization_code') {\n        param = `grant_type=${grantType}&auth_code=${formData.code}&redirect_uri=${formData.redirect_uri}&client_secret=${formData.client_secret}`;\n      } else if (grantType === 'password') {\n        param = `grant_type=${grantType}&username=${formData.username}&password=${(encodeURIComponent(formData.password) || '').replace('&', '%26')}&client_secret=${formData.client_secret}`;\n        /* param = {\r\n          grant_type: grantType,\r\n          username: formData.username,\r\n          password: encodeURI(formData.password),\r\n          client_secret: formData.client_secret\r\n        } */\n      } else if (grantType === 'refresh_token') {\n        const refreshToken = localStorage.getItem('refresh-token');\n        param = `grant_type=${grantType}&refresh_token=${refreshToken}&scope=openid`;\n      } else if (grantType === 'secure_access') {\n        param = `grant_type=${grantType}&client_secret=${formData.client_secret}&access_token=${this.getAccessToken()}&orgid=${formData.orgId}`;\n      }\n      let headers = new HttpHeaders();\n      headers = headers.append('X-Calix-ClientID', environment.X_CALIX_CLIENTID);\n      headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n      return this.http.post(`${this.API}/token`, param, {\n        headers\n      });\n    }\n    getallsupportedlanguages() {\n      return this.http.get(`${environment.SUPPORT_URL}/locale/language`);\n    }\n    getspecificliterals(getlangid) {\n      return this.http.get(`${environment.SUPPORT_URL}/locale?lang_id=${getlangid}`);\n    }\n    errorHandler(error) {\n      //console.log('## ERROR ##', error);\n    }\n    getUrlParams(paramsObj) {\n      let params = \"\";\n      for (var key in paramsObj) {\n        if (params != \"\") {\n          params += \"&\";\n        }\n        params += key + \"=\" + encodeURIComponent(paramsObj[key]);\n      }\n      return params;\n    }\n    setAccessToken(token) {\n      if (!token) {\n        window.localStorage.removeItem('calix.sso_access_token');\n      } else {\n        window.localStorage.setItem('calix.sso_access_token', token);\n      }\n    }\n    getAccessToken() {\n      return window.localStorage.getItem('calix.sso_access_token');\n    }\n    setRefreshToken(token) {\n      if (!token) {\n        window.localStorage.removeItem('calix.sso_refresh_token');\n      } else {\n        window.localStorage.setItem('calix.sso_refresh_token', token);\n      }\n    }\n    getRefreshToken() {\n      return window.localStorage.getItem('calix.sso_refresh_token');\n    }\n    setShadToken(token) {\n      if (!token) {\n        window.localStorage.removeItem('calix.sso_shadToken');\n      } else {\n        window.localStorage.setItem('calix.sso_shadToken', token);\n      }\n    }\n    setSpid(spid) {\n      this.setSPID(spid);\n    }\n    manageScopes(scopeArr) {\n      let okey = '';\n      let val = [];\n      let obj = {};\n      let scopes = [];\n      for (let i = 0; i < scopeArr.length; i++) {\n        let arr = scopeArr[i].split(':');\n        okey = arr[0];\n        val = arr[1].split(',');\n        obj[okey] = val;\n        //scopes.push(obj);\n      }\n\n      window.localStorage.setItem('calix.scopes', JSON.stringify(obj));\n    }\n    getScopes() {\n      return window.localStorage.getItem('calix.scopes') ? JSON.parse(window.localStorage.getItem('calix.scopes')) : {};\n    }\n    manageEntitlements(entitlements) {\n      let obj = {};\n      let date = new Date(this.getTodayDateStr());\n      date.setHours(0, 0, 0, 0);\n      // let currentDate = date;\n      // let endDate: any = '';\n      // let overriddenDate: any = '';\n      let skipAppTypes = [122];\n      for (let i = 0; i < entitlements.length; i++) {\n        if (skipAppTypes.indexOf(entitlements[i].apptype) !== -1) {\n          continue;\n        }\n        // endDate = entitlements[i].enddate ? new Date(entitlements[i].enddate) : \"\";\n        // overriddenDate = entitlements[i].overriddendate ? new Date(entitlements[i].overriddendate) : \"\";\n        // if (((!endDate && !overriddenDate && !entitlements[i].enddate) || ((endDate && endDate >= currentDate) || (overriddenDate && overriddenDate >= currentDate)))) {\n        //   if (typeof obj[entitlements[i].apptype] == \"undefined\") {\n        //     obj[entitlements[i].apptype] = entitlements[i];\n        //   }\n        // }\n        obj[entitlements[i].apptype] = entitlements[i];\n      }\n      window.localStorage.setItem('calix.entitlements', JSON.stringify(obj));\n    }\n    getEntitlements() {\n      return window.localStorage.getItem('calix.entitlements') ? JSON.parse(window.localStorage.getItem('calix.entitlements')) : [];\n    }\n    getEntitlementsStr() {\n      let entStr = [];\n      let enttlmnts = this.getEntitlements();\n      let entKeys = Object.keys(enttlmnts).length === 0 ? [] : Object.keys(enttlmnts);\n      return entKeys.join(',');\n    }\n    getEntitlementsArr() {\n      let entStr = [];\n      let enttlmnts = this.getEntitlements();\n      let entKeys = Object.keys(enttlmnts).length === 0 ? [] : Object.keys(enttlmnts);\n      return entKeys;\n    }\n    setUserInfo(data) {\n      let name = '';\n      name = data.firstName !== 'undefined' ? data.firstName : '';\n      if (name) {\n        name = name + ', ';\n      } else {\n        name = '';\n      }\n      let str = `${name} ${data.lastName ? data.lastName : ''}`;\n      str = `${str.trim() != '' ? str : data.username} `;\n      window.localStorage.setItem('calix.userInfo', str);\n      this.setUserId(data['UserId']);\n      this.setOrgName(data.OrgName);\n    }\n    getUserInfo() {\n      return localStorage.getItem('calix.userInfo') ? localStorage.getItem('calix.userInfo') : '';\n    }\n    getAuthTokenByRT() {\n      let grantType = 'refresh_token';\n      let param = '';\n      const refreshToken = this.getRefreshToken();\n      param = `grant_type=${grantType}&refresh_token=${refreshToken}&client_secret=${this.client_secret}`;\n      let headers = new HttpHeaders();\n      headers = headers.append('X-Calix-ClientID', environment.X_CALIX_CLIENTID);\n      headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n      if (this.isFederatedLogin()) {\n        return this.http.post(`${environment.API_BASE_URL}grantor/changeorg_refreshtoken`, param, {\n          headers\n        });\n      } else {\n        return this.http.post(`${this.API}/token`, param, {\n          headers\n        });\n      }\n    }\n    setLandingPage(page) {\n      if (!page) {\n        window.localStorage.removeItem('calix.landing_page');\n      } else {\n        window.localStorage.setItem('calix.landing_page', page);\n      }\n    }\n    getLandingPage() {\n      return window.localStorage.getItem('calix.landing_page');\n    }\n    setRoles(roles) {\n      if (!roles) {\n        window.localStorage.removeItem('calix.roles');\n      } else {\n        window.localStorage.setItem('calix.roles', JSON.stringify(roles));\n      }\n    }\n    getRoles() {\n      return JSON.parse(window.localStorage.getItem('calix.roles'));\n    }\n    setOrgId(org_id) {\n      if (!org_id) {\n        window.localStorage.removeItem('calix.org_id');\n      } else {\n        window.localStorage.setItem('calix.org_id', org_id);\n      }\n    }\n    getOrgId() {\n      return window.localStorage.getItem('calix.org_id') ? window.localStorage.getItem('calix.org_id') : '';\n    }\n    getOrg(orgId) {\n      // return 'orgId=' + `${orgId}`;\n      return '';\n    }\n    getSerialNo() {\n      return window.sessionStorage.getItem(`${this.getTabId()}calix.deviceData`) ? window.sessionStorage.getItem(`${this.getTabId()}calix.deviceData`) : '';\n    }\n    getDeviceData() {\n      return this.getSerialNo() ? JSON.parse(this.getSerialNo()) : [];\n    }\n    setServiceDownSpeed(downSpeed) {\n      !downSpeed ? window.localStorage.removeItem('calix.serviceDownSpeed') : window.localStorage.setItem('calix.serviceDownSpeed', downSpeed);\n    }\n    getServiceDownSpeed() {\n      return window.localStorage.getItem('calix.serviceDownSpeed') ? window.localStorage.getItem('calix.serviceDownSpeed') : '';\n    }\n    setLoggedIn(flag) {\n      this.loggedIn = flag ? true : false;\n      if (!this.loggedIn) {\n        window.localStorage.removeItem('calix.loggedIn');\n      } else {\n        this.shadSp = true;\n        window.localStorage.setItem('calix.loggedIn', 'true');\n      }\n    }\n    isLoggedIn() {\n      try {\n        return this.loggedIn = window.localStorage.getItem('calix.loggedIn') ? true : false;\n      } catch (ex) {\n        //\n      }\n    }\n    setShowHeader(key) {\n      if (key) {\n        window.localStorage.setItem('showHeader', 'true');\n      } else {\n        window.localStorage.removeItem('showHeader');\n      }\n    }\n    getShowHeader() {\n      return window.localStorage.getItem('showHeader') ? true : false;\n    }\n    setLoginInfo(res) {\n      this.setCscLoggedOut(false);\n      this.setCSCLoggedIn(false);\n      this.setAccessToken(res['access_token']);\n      this.setLoggedIn(true);\n      this.manageScopes(res.scopes);\n      this.manageEntitlements(res.entitlements);\n      this.setRefreshToken(res['refresh_token']);\n      this.setShadToken(res['access_token']);\n      this.setSpid(res['SpId']);\n      this.setOrgId(res['OrgId']);\n      this.setLandingPage(res['landingPage']);\n      this.setUserInfo(res);\n      this.setCSCToken(res['cscToken']);\n      this.setUserId(res['UserId']);\n      this.setRoles(res['roles']);\n      this.setUsername(res['username']);\n      this.setOrgSFID(res['org_sfid']);\n      let entArr = this.getEntitlementsArr();\n      if (entArr.indexOf(\"118\") !== -1) {\n        this.setCscType('EME');\n      } else {\n        this.setCscType('DME');\n      }\n      this.insertScopesForOrgAdmin();\n      this.removeScopesForFlowLtdEnt();\n    }\n    doLogout() {\n      this.setLoggedIn(false);\n      this.manageScopes([]);\n      this.manageEntitlements([]);\n      this.setAccessToken('');\n      this.setRefreshToken('');\n      this.setShadToken('');\n      this.setSpid('');\n      this.setOrgId('');\n      this.setLandingPage('');\n      this.setUserInfo([]);\n      this.setCSCToken('');\n      this.setUserId('');\n      this.setRoles([]);\n      this.setUsername('');\n      //this.removeGracePeriobShown();\n      this.removeGracePeriobShownNew();\n      sessionStorage.setItem('defaultLanguage', 'en');\n      //this.language.changeLanguage('en');\n      //this.auth.doLogout();\n      this.removeOrgSFID();\n      this.setCSCLoggedIn(false);\n      this.setMarketingTermsAccept(false);\n      this.setSupportTermsAccept(false);\n      this.setCcoTermsAccept(false);\n      this.setFoundationTermsAccept(false);\n      this.setLogoutFlag(true);\n      this.setCscType('');\n      this.removeRefresh();\n      this.setSecureAccess('');\n      this.removeActionLogInfo();\n      this.setFederatedLogin('');\n      this.setSecureAccessLoginData('');\n      localStorage.removeItem('defaultLanguage');\n      localStorage.removeItem('defaultLanguage');\n      sessionStorage.removeItem('showSensitiveInfo');\n      //this.router.navigate(['login']);\n    }\n\n    setRefresh(value) {\n      localStorage.setItem('refresh', value);\n    }\n    getRefresh() {\n      return localStorage.getItem('refresh');\n    }\n    removeRefresh() {\n      localStorage.removeItem('refresh');\n    }\n    setCSCToken(token) {\n      if (token) {\n        window.localStorage.setItem('calix.csc_token', token);\n      } else {\n        window.localStorage.removeItem('calix.csc_token');\n      }\n    }\n    getCSCToken() {\n      return window.localStorage.getItem('calix.csc_token') ? window.localStorage.getItem('calix.csc_token') : '';\n    }\n    setUserId(userId) {\n      if (userId) {\n        window.localStorage.setItem('calix.userId', userId);\n      } else {\n        window.localStorage.removeItem('calix.userId');\n      }\n    }\n    getUserId() {\n      return window.localStorage.getItem('calix.userId') ? window.localStorage.getItem('calix.userId') : '';\n    }\n    getSecureOrgList() {\n      let url = `${environment.CALIX_ADMIN_ORG_BASE_URL}secureaccess/orglist/${this.getUserId()}/count`;\n      return this.http.get(url);\n    }\n    setLoginData(res) {\n      if (res) {\n        //this.setGracePeriodsByData(res.entitlements);\n        window.localStorage.setItem('calix.login_data', JSON.stringify(res));\n      } else {\n        window.localStorage.removeItem('calix.login_data');\n      }\n    }\n    getLoginData() {\n      return window.localStorage.getItem('calix.login_data') ? JSON.parse(window.localStorage.getItem('calix.login_data')) : [];\n    }\n    getspecificlangliterals() {\n      return window.localStorage.getItem('specificlangliterals') ? JSON.parse(window.localStorage.getItem('specificlangliterals')) : '';\n    }\n    setSecureAccessLoginData(res) {\n      if (res) {\n        //this.setGracePeriodsByData(res.entitlements);\n        window.localStorage.setItem('calix.secure_access_login_data', JSON.stringify(res));\n      } else {\n        window.localStorage.removeItem('calix.secure_access_login_data');\n      }\n    }\n    getSecureAccessLoginData() {\n      return window.localStorage.getItem('calix.secure_access_login_data') ? JSON.parse(window.localStorage.getItem('calix.secure_access_login_data')) : [];\n    }\n    setUsername(username) {\n      if (username) {\n        window.localStorage.setItem('calix.username', username);\n      } else {\n        window.localStorage.removeItem('calix.username');\n      }\n    }\n    getUsername() {\n      return window.localStorage.getItem('calix.username') ? window.localStorage.getItem('calix.username') : '';\n    }\n    setSecureAccess(secure) {\n      if (secure) {\n        window.localStorage.setItem('calix.secure_access', 'true');\n        this.secResult$.next({\n          secure: true\n        });\n      } else {\n        window.localStorage.removeItem('calix.secure_access');\n        this.secResult$.next({\n          secure: false\n        });\n      }\n    }\n    isSecureAccess(checkExitedWithin5sec = false) {\n      /* Below code finds the seconds diff between secure access exited time and current time and whether it is within 5 secs */\n      const exitedWithin = !checkExitedWithin5sec || Math.floor((new Date().getTime() - (Number(localStorage.getItem('secureAccessExitedAt')) || 0)) / 1000) <= 5;\n      return (window.localStorage.getItem('calix.secure_access') ? true : false) || (checkExitedWithin5sec ? exitedWithin : checkExitedWithin5sec);\n    }\n    isPageVisible() {\n      var stateKey,\n        eventKey,\n        keys = {\n          hidden: \"visibilitychange\",\n          webkitHidden: \"webkitvisibilitychange\",\n          mozHidden: \"mozvisibilitychange\",\n          msHidden: \"msvisibilitychange\"\n        };\n      for (stateKey in keys) {\n        if (stateKey in document) {\n          eventKey = keys[stateKey];\n          break;\n        }\n      }\n      return function (c) {\n        if (c) document.addEventListener(eventKey, c);\n        return !document[stateKey];\n      };\n    }\n    doLogoutCSC() {\n      this.setCscLoggedOut(true);\n    }\n    isCscLoggedOut() {\n      return window.localStorage.getItem('calix.csc_logged_out') ? true : false;\n    }\n    setCscLoggedOut(flag) {\n      if (flag) {\n        window.localStorage.setItem('calix.csc_logged_out', 'true');\n      } else {\n        window.localStorage.removeItem('calix.csc_logged_out');\n      }\n    }\n    doExitSecureAccess() {\n      this.setAccessToken('');\n      this.setCSCLoggedIn(false);\n      let res = this.getLoginData();\n      this.manageEntitlements(res.entitlements);\n      this.setLoginInfo(this.getLoginData());\n      this.doLogoutCSC();\n      this.setSecureAccess('');\n      this.setSecureAccessLoginData('');\n      //this.router.navigate(['org-access']);\n      window.location.href = `${WindowRefService.prototype.nativeWindow}/org-access`;\n    }\n    setGracePeriodsByData(entitlements) {\n      let gracePeriods = [];\n      let oDate;\n      let cDate = new Date(this.getTodayDateStr());\n      let date = new Date();\n      let currentDate = date.getTime();\n      let endDate = '';\n      let overriddenDate = '';\n      this.manageEntitlements(entitlements);\n      let enttlmnts = this.getEntitlements();\n      let obj = {};\n      let missedEntitlements = {};\n      let skipAppTypes = [122];\n      for (let i = 0; i < entitlements.length; i++) {\n        if (skipAppTypes.indexOf(entitlements[i].apptype) !== -1) {\n          continue;\n        }\n        let data = entitlements[i];\n        endDate = entitlements[i].enddate ? new Date(entitlements[i].enddate) : \"\";\n        overriddenDate = entitlements[i].overriddendate ? new Date(entitlements[i].overriddendate) : \"\";\n        if (enttlmnts[data.apptype] && data.overriddendate) {\n          oDate = new Date(data.overriddendate);\n          const diffTime = Math.abs(oDate - cDate);\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          //console.log(diffDays);\n          if (diffDays <= 30) {\n            obj[data.apptype] = {\n              valid: true,\n              message: `${data.name} expires in ${diffDays} ${diffDays ? 'days' : 'day'}`\n            };\n            missedEntitlements[data.apptype] = data;\n          }\n        } else if (enttlmnts[data.apptype] && data.enddate) {\n          oDate = new Date(data.enddate);\n          const diffTime = Math.abs(oDate - cDate);\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          //console.log(diffDays);\n          if (Math.sign(oDate - cDate) === 1) {\n            if (diffDays <= 30) {\n              obj[data.apptype] = {\n                valid: true,\n                message: `${data.name} expires in ${diffDays} ${diffDays ? 'days' : 'day'}`\n              };\n              missedEntitlements[data.apptype] = data;\n            }\n          } else {\n            if (diffDays <= 30) {\n              obj[data.apptype] = {\n                valid: true,\n                message: `${data.name} has expired on ${data.overriddendate}. Please renew in ${Math.ceil(30 - diffDays)} days to prevent service disruption`\n              };\n              missedEntitlements[data.apptype] = data;\n            }\n          }\n        } else if (!data.startdate && !data.enddate && data.overriddendate) {\n          oDate = new Date(data.overriddendate);\n          const diffTime = Math.abs(oDate - cDate);\n          const diff = diffTime / (1000 * 60 * 60 * 24);\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          obj[data.apptype] = {\n            valid: false,\n            message: `${data.name} has expired on ${data.overriddendate}. Please renew in ${Math.ceil(30 - diff)} days to prevent service disruption`\n          };\n          if (diffDays <= 30) {\n            missedEntitlements[data.apptype] = data;\n          }\n        } else if (data.enddate && data.overriddendate) {\n          oDate = new Date(data.overriddendate);\n          const diffTime = Math.abs(oDate - cDate);\n          const diff = diffTime / (1000 * 60 * 60 * 24);\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          obj[data.apptype] = {\n            valid: false,\n            message: `${data.name} has expired on ${data.overriddendate}. Please renew in ${Math.ceil(30 - diff)} days to prevent service disruption`\n          };\n          if (diffDays <= 30) {\n            missedEntitlements[data.apptype] = data;\n          }\n        } else if (data.enddate && !data.overriddendate) {\n          oDate = new Date(data.enddate);\n          const diffTime = Math.abs(oDate - cDate);\n          const diff = diffTime / (1000 * 60 * 60 * 24);\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          obj[data.apptype] = {\n            valid: false,\n            message: `${data.name} has expired on ${data.overriddendate}. Please renew in ${Math.ceil(30 - diff)} days to prevent service disruption`\n          };\n          if (diffDays <= 30) {\n            missedEntitlements[data.apptype] = data;\n          }\n        } else if (data.overriddendate) {\n          oDate = new Date(data.overriddendate);\n          const diffTime = Math.abs(oDate - cDate);\n          const diff = diffTime / (1000 * 60 * 60 * 24);\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          obj[data.apptype] = {\n            valid: false,\n            message: `${data.name} has expired on ${data.overriddendate}. Please renew in ${Math.ceil(30 - diff)} days to prevent service disruption`\n          };\n          if (diffDays <= 30) {\n            missedEntitlements[data.apptype] = data;\n          }\n        }\n      }\n      let newentitelments = Object.assign(Object.assign({}, enttlmnts), missedEntitlements);\n      window.localStorage.setItem('calix.entitlements', JSON.stringify(newentitelments));\n      if (Object.keys(obj).length) {\n        // if (obj[200] || obj[201]) {\n        //   if ((obj[200] && !this.checkEntitlementInGPByApp(200)) || (obj[201] && !this.checkEntitlementInGPByApp(201))) {\n        //     //no need to push grace period\n        //   } else {\n        //     if (obj[200]) {\n        //       gracePeriods.push(obj[200]);\n        //     }\n        //     if (obj[201]) {\n        //       gracePeriods.push(obj[201]);\n        //     }\n        //   }\n        // }\n        // if (obj[119] || obj[122]) {\n        //   if ((obj[119] && !this.checkEntitlementInGPByApp(119)) || (obj[122] && !this.checkEntitlementInGPByApp(122))) {\n        //     //no need to push grace period\n        //   } else {\n        //     if (obj[119]) {\n        //       gracePeriods.push(obj[119]);\n        //     }\n        //     if (obj[122]) {\n        //       gracePeriods.push(obj[122]);\n        //     }\n        //   }\n        // }\n        // if (obj[118] || obj[120]) {\n        //   if ((obj[118] && !this.checkEntitlementInGPByApp(118)) || (obj[120] && !this.checkEntitlementInGPByApp(120))) {\n        //     //no need to push grace period\n        //   } else {\n        //     if (obj[118]) {\n        //       gracePeriods.push(obj[118]);\n        //     }\n        //     if (obj[120]) {\n        //       gracePeriods.push(obj[120]);\n        //     }\n        //   }\n        // }\n        let entArr = this.getEntitlementsArr();\n        if (entArr.indexOf(\"118\") !== -1) {\n          this.setCscType('EME');\n        } else {\n          this.setCscType('DME');\n        }\n        let keys = Object.keys(obj);\n        let cscType = this.getCscType();\n        if (cscType === \"EME\") {\n          let cscDmeType = keys.indexOf(\"120\");\n          if (cscDmeType !== -1) {\n            keys.splice(cscDmeType, 1);\n          }\n        }\n        if (keys.indexOf(\"122\") !== -1) {\n          let mIndex = keys.indexOf(\"122\");\n          keys.splice(mIndex, 1);\n        }\n        if (entArr.indexOf(\"200\") !== -1 || entArr.indexOf(\"201\") !== -1) {\n          if (obj[\"201\"] && obj[\"201\"][\"valid\"] || entArr.indexOf(\"201\") !== -1 && !obj[\"201\"]) {\n            let mIndex = keys.indexOf(\"200\");\n            if (mIndex !== -1) {\n              keys.splice(mIndex, 1);\n            }\n          } else if (obj[\"200\"] && obj[\"200\"][\"valid\"] || entArr.indexOf(\"200\") !== -1 && !obj[\"200\"]) {\n            let mIndex = keys.indexOf(\"201\");\n            if (mIndex !== -1) {\n              keys.splice(mIndex, 1);\n            }\n          }\n        }\n        if (entArr.indexOf(\"203\") !== -1 || entArr.indexOf(\"204\") !== -1 || entArr.indexOf(\"205\") !== -1) {\n          if (obj[\"205\"] && obj[\"205\"][\"valid\"] || entArr.indexOf(\"205\") !== -1 && !obj[\"205\"]) {\n            let mIndex = keys.indexOf(\"203\");\n            if (mIndex !== -1) {\n              keys.splice(mIndex, 1);\n            }\n            mIndex = keys.indexOf(\"204\");\n            if (mIndex !== -1) {\n              keys.splice(mIndex, 1);\n            }\n          } else if (obj[\"203\"] && obj[\"203\"][\"valid\"] || entArr.indexOf(\"203\") !== -1 && !obj[\"203\"]) {\n            let mIndex = keys.indexOf(\"205\");\n            if (mIndex !== -1) {\n              keys.splice(mIndex, 1);\n            }\n            mIndex = keys.indexOf(\"204\");\n            if (mIndex !== -1) {\n              keys.splice(mIndex, 1);\n            }\n          } else if (obj[\"204\"] && obj[\"204\"][\"valid\"] || entArr.indexOf(\"204\") !== -1 && !obj[\"204\"]) {\n            let mIndex = keys.indexOf(\"205\");\n            if (mIndex !== -1) {\n              keys.splice(mIndex, 1);\n            }\n            mIndex = keys.indexOf(\"203\");\n            if (mIndex !== -1) {\n              keys.splice(mIndex, 1);\n            }\n          }\n        }\n        for (let i = 0; i < keys.length; i++) {\n          gracePeriods.push(obj[keys[i]]['message']);\n        }\n      }\n      this.setGracePeriodNew(entitlements);\n      return;\n      window.localStorage.setItem('calix.grace_periods', JSON.stringify(gracePeriods));\n      // let date = new Date();\n      // let currentDate = date.getTime();\n      // let endDate: any = '';\n      // let overriddenDate: any = '';\n      // for (let i = 0; i < entitlements.length; i++) {\n      //   endDate = entitlements[i].enddate ? new Date(entitlements[i].enddate) : \"\";\n      //   overriddenDate = entitlements[i].overriddendate ? new Date(entitlements[i].overriddendate) : \"\";\n      //   if (entitlements[i].entitlement && ((!endDate && !overriddenDate && !entitlements[i].enddate) || ((endDate && endDate > currentDate) || (overriddenDate && overriddenDate > currentDate)))) {\n      //     if (typeof obj[entitlements[i].apptype] == \"undefined\") {\n      //       obj[entitlements[i].apptype] = entitlements[i];\n      //     }\n      //   }\n      // }\n    }\n\n    setGracePeriodNew(entitlements) {\n      let gracePeriods = [];\n      entitlements.forEach(obj => {\n        if (obj.ingraceperiod == 'yes') {\n          gracePeriods.push(`${obj.name} is in Grace Period`);\n        }\n        if (obj.bannernoofdays) {\n          gracePeriods.push(`${obj.name} expires in ${obj.bannernoofdays} ${obj.bannernoofdays > 1 ? 'days' : 'day'}`);\n        }\n      });\n      window.localStorage.setItem('calix.grace_periods_new', JSON.stringify(gracePeriods));\n    }\n    setGracePeriods() {\n      let gracePeriods = [];\n      let enttlmnts = this.getEntitlements();\n      let oDate;\n      let cDate = new Date();\n      if (enttlmnts[102]) {\n        let data = enttlmnts[102];\n        if (data.overriddendate) {\n          oDate = new Date(data.overriddendate);\n          const diffTime = Math.abs(oDate - cDate);\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          //console.log(diffDays);\n          if (diffDays <= 30) {\n            gracePeriods.push(`Your grace period for FA Plus is ${diffDays} days`);\n          }\n        }\n      }\n      if (enttlmnts[200] || enttlmnts[201]) {\n        if (enttlmnts[200]) {\n          let data = enttlmnts[200];\n          if (data.overriddendate) {\n            oDate = new Date(data.overriddendate);\n            const diffTime = Math.abs(oDate - cDate);\n            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n            //console.log(diffDays);\n            if (diffDays <= 30) {\n              gracePeriods.push(`Your grace period for SHAD is ${diffDays} days`);\n            }\n          }\n        }\n        if (enttlmnts[201]) {\n          let data = enttlmnts[201];\n          if (data.overriddendate) {\n            oDate = new Date(data.overriddendate);\n            const diffTime = Math.abs(oDate - cDate);\n            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n            //console.log(diffDays);\n            if (diffDays <= 30) {\n              gracePeriods.push(`Your grace period for SHAD is ${diffDays} days`);\n            }\n          }\n        }\n      }\n      if (enttlmnts[119]) {\n        let data = enttlmnts[119];\n        if (data.overriddendate) {\n          oDate = new Date(data.overriddendate);\n          const diffTime = Math.abs(oDate - cDate);\n          const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n          //console.log(diffDays);\n          if (diffDays <= 30) {\n            gracePeriods.push(`Your grace period for Marketing Cloud is ${diffDays} days`);\n          }\n        }\n      }\n      window.localStorage.setItem('calix.grace_periods', JSON.stringify(gracePeriods));\n    }\n    checkEntitlementInGPByApp(data) {\n      let oDate;\n      let cDate = new Date();\n      if (data.overriddendate) {\n        oDate = new Date(data.overriddendate);\n        const diffTime = Math.abs(oDate - cDate);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        //console.log(diffDays);\n        if (diffDays <= 30) {\n          return true;\n        }\n      }\n      return false;\n    }\n    getGracePeriods() {\n      let data = window.localStorage.getItem('calix.grace_periods') ? JSON.parse(window.localStorage.getItem('calix.grace_periods')) : [];\n      if (this.getGracePeriobShown()) {\n        data = [];\n      }\n      this.setGracePeriobShown();\n      return data;\n    }\n    getGracePeriodsNew() {\n      let data = window.localStorage.getItem('calix.grace_periods_new') ? JSON.parse(window.localStorage.getItem('calix.grace_periods_new')) : [];\n      if (this.getGracePeriobShownNew()) {\n        data = [];\n      }\n      this.setGracePeriobShownNew();\n      return data;\n    }\n    setGracePeriobShown() {\n      window.localStorage.setItem('calix.grace_periods_shown', 'true');\n    }\n    removeGracePeriobShown() {\n      window.localStorage.removeItem('calix.grace_periods_shown');\n    }\n    getGracePeriobShown() {\n      return window.localStorage.getItem('calix.grace_periods_shown') ? true : false;\n    }\n    setGracePeriobShownNew() {\n      window.localStorage.setItem('calix.grace_periods_shown_new', 'true');\n    }\n    removeGracePeriobShownNew() {\n      window.localStorage.removeItem('calix.grace_periods_shown_new');\n    }\n    getGracePeriobShownNew() {\n      return window.localStorage.getItem('calix.grace_periods_shown_new') ? true : false;\n    }\n    checkUserHasServiceAccess(app, page, route) {\n      let scopes = this.getScopes();\n      let scopeNames = Object.keys(scopes);\n      let appName = `cloud.${app}`;\n      let appScopes = {};\n      scopeNames.forEach(element => {\n        if (element.indexOf(appName) !== -1) {\n          let arr = element.split(`${appName}.`);\n          let scopeName = arr[1];\n          if (typeof appScopes[appName] !== 'undefined') {\n            appScopes[appName].push(scopeName);\n          } else {\n            appScopes[appName] = [scopeName];\n          }\n        }\n      });\n      if (appScopes[appName]) {\n        if (appScopes[appName].indexOf(page) === -1) {\n          let appRoutes = this.getAppRoutes(app);\n          if (appRoutes[appScopes[appName][0]]) {\n            this.router.navigate([`/${route}/${appRoutes[appScopes[appName][0]]}`]);\n          } else {\n            this.router.navigate([`/${route}`]);\n          }\n        }\n      }\n    }\n    checkUserHasServiceAccessByAppId(app) {\n      let scopes = this.getScopes();\n      let scopeNames = Object.keys(scopes);\n      let appName = `cloud.${app}`;\n      let appRbacName = `cloud.rbac.${app}`;\n      let appScopes = {};\n      scopeNames.forEach(element => {\n        if (element.indexOf(appName) !== -1) {\n          let arr = element.split(`${appName}.`);\n          let scopeName = arr[1];\n          if (typeof appScopes[appName] !== 'undefined') {\n            appScopes[appName].push(scopeName);\n          } else {\n            appScopes[appName] = [scopeName];\n          }\n        }\n        if (element.indexOf(appRbacName) !== -1) {\n          let arr = element.split(`${appRbacName}.`);\n          let scopeName = arr[1];\n          if (typeof appScopes[appRbacName] !== 'undefined') {\n            appScopes[appRbacName].push(appRbacName);\n          } else {\n            appScopes[appRbacName] = [scopeName];\n          }\n        }\n      });\n      if (appScopes[appName] || appScopes[appRbacName]) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    getAppRoutes(app) {\n      const routes = {\n        cmc: {\n          insights: 'insights',\n          upsell: 'upsell',\n          retention: 'retention',\n          acquisition: 'acquisition',\n          mobilenotifications: 'promotions',\n          search: 'search'\n        }\n      };\n      return routes[app] ? routes[app] : {};\n    }\n    setLogoURL(apps) {\n      let logoRedirectURL = '/support';\n      if (apps.csc) {\n        logoRedirectURL = '/support';\n      } else if (apps.cmc) {\n        logoRedirectURL = '/engagement';\n      } else if (apps.shad) {\n        logoRedirectURL = '/shad';\n      } else if (apps.fa) {\n        logoRedirectURL = '/fa';\n      } else {\n        let entArr = this.getEntitlementsArr();\n        let ent = {\n          102: 'fa',\n          118: 'support',\n          119: 'marketing',\n          200: 'shad',\n          201: 'shad'\n        };\n        if (entArr && entArr[0]) {\n          logoRedirectURL = ent[entArr[0]];\n        } else {\n          logoRedirectURL = '/no-entitlements';\n        }\n      }\n      return logoRedirectURL;\n    }\n    setOrgSFID(org_sfid) {\n      if (typeof org_sfid !== 'undefined') {\n        window.localStorage.setItem('calix.sfid', org_sfid);\n      } else {\n        this.removeOrgSFID();\n      }\n    }\n    getOrgSFID() {\n      return typeof window.localStorage.getItem('calix.sfid') !== 'undefined' ? window.localStorage.getItem('calix.sfid') : 'undefined';\n    }\n    removeOrgSFID() {\n      window.localStorage.removeItem('calix.sfid');\n    }\n    setCSCLoggedIn(flag) {\n      if (flag) {\n        window.localStorage.setItem(\"calix.csc_logged_in\", \"true\");\n      } else {\n        window.localStorage.removeItem(\"calix.csc_logged_in\");\n      }\n    }\n    isCSCLoggedIn() {\n      return window.localStorage.getItem(\"calix.csc_logged_in\") ? true : false;\n    }\n    setSecureAccessStartTime(time) {\n      window.localStorage.setItem('calix.secure_access_start_time', time);\n    }\n    getSecureAccessStartTime() {\n      return window.localStorage.getItem('calix.secure_access_start_time') ? window.localStorage.getItem('calix.secure_access_start_time') : \"\";\n    }\n    setSecureAccessEndTime(time) {\n      window.localStorage.setItem('calix.secure_access_end_time', time);\n    }\n    getSecureAccessEndTime() {\n      return window.localStorage.getItem('calix.secure_access_end_time') ? window.localStorage.getItem('calix.secure_access_end_time') : \"\";\n    }\n    checkValidSecureAccessTime() {\n      // let sbeginTime = this.getSecureAccessStartTime();\n      // let sendTime = this.getSecureAccessEndTime();\n      // if (!sbeginTime && !sendTime) {\n      //   return false;\n      // }\n      // let startTime = this.secService.roundOffTimestamp(sbeginTime); // Start time in UTC timestamp to Local timestamp\n      // let now = new Date().getTime(); // Current time in Local timestamp\n      // if (sendTime == -1) {\n      //   if (now >= startTime) {\n      //     return true;\n      //   }\n      // } else {\n      //   let endTime = this.secService.roundOffTimestamp(sendTime); // End time in UTC timestamp to Local timestamp\n      //   if (now >= startTime && now < endTime) {\n      //     return true;\n      //   }\n      // }\n      // return false;\n    }\n    setRelativeUrl(page) {\n      if (page) {\n        window.localStorage.setItem('calix.current_module', page);\n        this.relativeUrlResult$.next({\n          page: page\n        });\n      } else {\n        window.localStorage.removeItem('calix.current_module');\n      }\n    }\n    getRelativeUrl() {\n      return window.localStorage.getItem('calix.current_module') ? window.localStorage.getItem('calix.current_module') : '';\n    }\n    setMarketingTermsAccept(flag) {\n      if (flag) {\n        window.localStorage.setItem('calix.marketing_tos_accept', 'true');\n      } else {\n        window.localStorage.removeItem('calix.marketing_tos_accept');\n      }\n    }\n    isMarketingTermsAccept() {\n      return window.localStorage.getItem('calix.marketing_tos_accept') ? true : false;\n    }\n    setSupportTermsAccept(flag) {\n      if (flag) {\n        window.localStorage.setItem('calix.support_tos_accept', 'true');\n      } else {\n        window.localStorage.removeItem('calix.support_tos_accept');\n      }\n    }\n    isSupportTermsAccept() {\n      return window.localStorage.getItem('calix.support_tos_accept') ? true : false;\n    }\n    setCcoTermsAccept(flag) {\n      if (flag) {\n        window.localStorage.setItem('calix.cco_tos_accept', 'true');\n      } else {\n        window.localStorage.removeItem('calix.cco_tos_accept');\n      }\n    }\n    isCcoTermsAccept() {\n      return window.localStorage.getItem('calix.cco_tos_accept') ? true : false;\n    }\n    setFoundationTermsAccept(flag) {\n      if (flag) {\n        window.localStorage.setItem('calix.foundation_tos_accept', 'true');\n      } else {\n        window.localStorage.removeItem('calix.foundation_tos_accept');\n      }\n    }\n    isFoundationTermsAccept() {\n      return window.localStorage.getItem('calix.foundation_tos_accept') ? true : false;\n    }\n    setLogoutFlag(flag) {\n      this.logoutResult$.next({\n        logout: flag\n      });\n    }\n    setCmcTos(flag) {\n      this.setMarketingTermsAccept(true);\n      this.cmcTos$.next({\n        accept: true\n      });\n    }\n    setCscTos(flag) {\n      this.setSupportTermsAccept(true);\n      this.cscTos$.next({\n        accept: true\n      });\n    }\n    setCcoTos(flag) {\n      this.setCcoTermsAccept(true);\n      this.ccoTos$.next({\n        accept: true\n      });\n    }\n    setFoundationTos(flag) {\n      this.setFoundationTermsAccept(true);\n      this.foundationTos$.next({\n        accept: true\n      });\n    }\n    checkCMCTOS() {\n      let url = `${environment.TOS_API_URL}/marketing/${environment.CMC_TOS_MD_HASH}`;\n      return this.http.get(url);\n    }\n    setCscType(type) {\n      if (type) {\n        window.localStorage.setItem('calix.csc_type', type);\n      } else {\n        window.localStorage.removeItem('calix.csc_type');\n      }\n    }\n    getCscType() {\n      return window.localStorage.getItem('calix.csc_type') ? window.localStorage.getItem('calix.csc_type') : '';\n    }\n    setApiError(error) {\n      this.apiError$.next(error);\n    }\n    getOrganizationID(url) {\n      let orgId = '50';\n      let sysAdmin = `${environment.SYS_ADMIN_ROUTE}`;\n      if (url.indexOf(`/${sysAdmin}/`) > -1) {\n        orgId = sessionStorage.getItem('calixAdminOrgID') ? sessionStorage.getItem('calixAdminOrgID') : '';\n        return `${orgId}`;\n      } else {\n        orgId = this.getOrgId();\n        return orgId ? `${orgId}` : '';\n      }\n    }\n    getRedirectModule(url) {\n      let sysAdmin = `${environment.SYS_ADMIN_ROUTE}`;\n      if (url.indexOf(`/${sysAdmin}/`) > -1) {\n        return `${environment.SYS_ADMIN_ROUTE}`;\n      } else {\n        return `${environment.ORG_ADMIN_ROUTE}`;\n      }\n    }\n    setSPID(spid) {\n      if (spid) {\n        window.localStorage.setItem('calix.spid', spid);\n      } else {\n        window.localStorage.removeItem('calix.spid');\n      }\n    }\n    getSPID() {\n      return window.localStorage.getItem('calix.spid');\n    }\n    setOrgName(name) {\n      if (name) {\n        window.localStorage.setItem('calix.org_name', name);\n      } else {\n        window.localStorage.removeItem('calix.org_name');\n      }\n    }\n    getOrgName() {\n      return window.localStorage.getItem('calix.org_name');\n    }\n    getQlikTOkenByAppType(type) {\n      let url = `${environment.API_BASE_URL}qlik/ticket?app=${type}`;\n      return this.http.get(url);\n    }\n    getCleanupSessionApi() {\n      let url = `${environment.CALIX_URL}cleanupSession`;\n      return this.http.get(url);\n    }\n    setCmcQlikToken(token) {\n      if (token) {\n        window.localStorage.setItem('calix.cmc_qlik_token', token);\n      } else {\n        window.localStorage.removeItem('calix.cmc_qlik_token');\n      }\n    }\n    getCmcQlikToken() {\n      return window.localStorage.getItem('calix.cmc_qlik_token') ? window.localStorage.getItem('calix.cmc_qlik_token') : '';\n    }\n    setCscQlikToken(token) {\n      if (token) {\n        window.localStorage.setItem('calix.csc_qlik_token', token);\n      } else {\n        window.localStorage.removeItem('calix.csc_qlik_token');\n      }\n    }\n    getCscQlikToken() {\n      return window.sessionStorage.getItem('calix.csc_qlik_token') ? window.sessionStorage.getItem('calix.csc_qlik_token') : '';\n    }\n    getSubscriberEndpointId() {\n      return window.sessionStorage.getItem(`calix.endpointId`) ? window.sessionStorage.getItem(`calix.endpointId`) : '';\n    }\n    setSubscriberEndpointId(id) {\n      this.subscriberEndPointId$.next(id);\n      if (id) {\n        window.sessionStorage.setItem(`calix.endpointId`, id);\n      } else {\n        return window.sessionStorage.removeItem(`calix.endpointId`);\n      }\n    }\n    getReportChartSubscriberInfo() {\n      return window.localStorage.getItem('calix.reportChartSubscriberInfo') ? window.localStorage.getItem('calix.reportChartSubscriberInfo') : '';\n    }\n    setReportChartSubscriberInfo(sn) {\n      if (sn) {\n        window.localStorage.setItem('calix.reportChartSubscriberInfo', sn);\n      } else {\n        return window.localStorage.removeItem('calix.reportChartSubscriberInfo');\n      }\n    }\n    getTrafficReportChartSubscriberInfo() {\n      return window.sessionStorage.getItem('calix.trafficreportChartSubscriberInfo') ? window.sessionStorage.getItem('calix.trafficreportChartSubscriberInfo') : '';\n    }\n    setTrafficReportChartSubscriberInfo(sn) {\n      if (sn) {\n        window.sessionStorage.setItem('calix.trafficreportChartSubscriberInfo', sn);\n      } else {\n        return window.sessionStorage.removeItem('calix.trafficreportChartSubscriberInfo');\n      }\n    }\n    getRealtimeDelay() {\n      return window.localStorage.getItem('calix.traffic.realtimedelay') ? window.localStorage.getItem('calix.traffic.realtimedelay') : 0;\n    }\n    setRealtimeDelay(sn) {\n      if (sn) {\n        window.localStorage.setItem('calix.traffic.realtimedelay', sn);\n      } else {\n        return window.localStorage.removeItem('calix.traffic.realtimedelay');\n      }\n    }\n    getCSCSubscriberId() {\n      return window.sessionStorage.getItem(`${this.getTabId()}calix.subscriberId`) ? window.sessionStorage.getItem(`${this.getTabId()}calix.subscriberId`) : '';\n    }\n    actionAuditLog(path, request) {\n      return this.http.post(`${environment.API_BASE}${path}`, request);\n    }\n    setRefreshTokenNew() {\n      this.refreshTokenNew$.next(true);\n    }\n    setLastActivityTime() {\n      window.localStorage.setItem('calix.lastActivityMs', Date.now().toString());\n    }\n    getLastActivityTime() {\n      return window.localStorage.getItem('calix.lastActivityMs') ? parseInt(window.localStorage.getItem('calix.lastActivityMs')) : Date.now();\n    }\n    redirectByUrl(url, additionalParam = {}) {\n      let timer = 0;\n      const ind = this.router.url.indexOf('/cco-foundation') == 0 ? 2 : this.router.url.indexOf('/cco/operations/software-images-form') == 0 ? 3 : this.router.url.indexOf('/cco/operations/configuration') == 0 ? 3 : this.router.url.indexOf('/cco/services/configuration') == 0 ? 3 : this.router.url.indexOf('/cco') == 0 ? 1 : 0;\n      const module = this.router.url.split('/').filter(str => {\n        if (['cco-system-operations', 'configuration', 'cco-network-operations', 'foundation-system-operation', 'foundation-reports'].indexOf(str) > -1) return str;\n      });\n      const destUrl = url[ind] ? url[ind] : '';\n      if (ind) {\n        destUrl.replace(new RegExp(\"cco-system-operations|configuration|cco-network-operations|foundation-system-operation|foundation-reports\", \"gi\"), module.length ? module[0] : ind == 2 ? 'foundation-system-operation' : this.router.url.indexOf('/cco/operations/software-images-form') == 0 ? 'configuration' : 'cco-system-operations');\n      }\n      if (this.router.url.indexOf(destUrl) > -1 && this.router.url.replace(destUrl, '').length < 5) {\n        this.router.navigate(['cco/operations/cco-system-operations/dummy']);\n        timer = 100;\n      }\n      setTimeout(() => {\n        this.router.navigate([destUrl], additionalParam);\n      }, timer);\n    }\n    redirectByUrlForWorkflow(url, additionalParam = {}) {\n      let timer = 0;\n      const ind = this.router.url.indexOf('/cco-foundation') == 0 ? 2 : this.router.url.indexOf('/cco/operations/software-images-form') == 0 ? 3 : this.router.url.indexOf('/cco/operations/configuration') == 0 ? 3 : this.router.url.indexOf('/cco') == 0 ? 1 : 0;\n      const module = this.router.url.split('/').filter(str => {\n        if (['cco-system-operations', 'foundation-configuration', 'cco-network-operations', 'foundation-system-operation', 'foundation-reports'].indexOf(str) > -1) return str;\n      });\n      const destUrl = (url[ind] ? url[ind] : '').replace(new RegExp(\"cco-system-operations|foundation-configuration|cco-network-operations|foundation-system-operation|foundation-reports\", \"gi\"), module.length ? module[0] : ind == 2 ? 'foundation-system-operation' : this.router.url.indexOf('/cco/operations/software-images-form') == 0 ? 'foundation-configuration' : 'cco-system-operations');\n      if (this.router.url.indexOf(destUrl) > -1 && this.router.url.replace(destUrl, '').length < 5) {\n        this.router.navigate(['cco/operations/cco-system-operations/dummy']);\n        timer = 100;\n      }\n      setTimeout(() => {\n        this.router.navigate([destUrl], additionalParam);\n      }, timer);\n    }\n    setTabId(tabId) {\n      if (!sessionStorage.getItem('browserTabId') || window.performance.navigation.type == 2) {\n        sessionStorage.setItem('browserTabId', tabId);\n      }\n    }\n    getTabId() {\n      //return sessionStorage.getItem('browserTabId') || '';\n      return '';\n    }\n    changeStorage() {\n      const prefix = sessionStorage.getItem('browserTabId');\n      Storage.prototype.setItem = function (key, value) {\n        this.call(localStorage, prefix + key, value);\n      }.bind(Storage.prototype.setItem);\n      Storage.prototype.getItem = function (key) {\n        return this.call(localStorage, prefix + key);\n      }.bind(Storage.prototype.getItem);\n    }\n    setActionLog(appId, optype, module, path, message, onlyMessage = false, returnObservable = false) {\n      let url = `${environment.CALIX_URL}support/system/actionlog`;\n      let time = this.dateUtils.currentDateToUTC();\n      appId = 'NEW-CSC';\n      let params = {\n        // orgid: this.getOrg(this.orgId),\n        orgName: this.getOrgName(),\n        user: this.getUsername(),\n        appid: appId ? appId : \"NEW-CSC\",\n        optype: optype ? optype : \"pageHit\",\n        target: path ? path : \"system\",\n        pathname: path ? path : \"system\",\n        oracleid: this.getOrgOracleId(),\n        clientSessionId: this.getClientSessionId(),\n        timestamp: time,\n        clientLocalTime: this.dateUtils.getCurrentLocalDateTimeString('MM/dd/yyyy HH:mm:ss'),\n        severity: 0,\n        message: onlyMessage ? message : `CCO - ${message ? message : 'Page hit'}`\n      };\n      if (returnObservable) return this.http.post(url, params);else {\n        this.http.post(url, params).subscribe(res => {\n          console.log(res);\n        });\n      }\n    }\n    setValidMailChimpAuth(flag) {\n      let valid = flag ? true : false;\n      if (!valid) {\n        window.localStorage.removeItem('calix.ValidMailChimpAuth');\n      } else {\n        this.shadSp = true;\n        window.localStorage.setItem('calix.ValidMailChimpAuth', 'true');\n      }\n    }\n    isValidMailChimpAuth() {\n      try {\n        return this.loggedIn = window.localStorage.getItem('calix.ValidMailChimpAuth') ? true : false;\n      } catch (ex) {\n        //\n      }\n    }\n    //COnstant\n    setValidConstantAuth(flag) {\n      let valid = flag ? true : false;\n      if (!valid) {\n        window.localStorage.removeItem('calix.ValidConstantAuth');\n      } else {\n        this.shadSp = true;\n        window.localStorage.setItem('calix.ValidConstantAuth', 'true');\n      }\n    }\n    isValidConstantAuth() {\n      try {\n        return this.loggedIn = window.localStorage.getItem('calix.ValidConstantAuth') ? true : false;\n      } catch (ex) {\n        //\n      }\n    }\n    //Hubspot\n    setValidHubSpotAuth(flag) {\n      let valid = flag ? true : false;\n      if (!valid) {\n        window.localStorage.removeItem('calix.ValidHubspotAuth');\n      } else {\n        this.shadSp = true;\n        window.localStorage.setItem('calix.ValidHubspotAuth', 'true');\n      }\n    }\n    isValidHubSpotAuth() {\n      try {\n        return this.loggedIn = window.localStorage.getItem('calix.ValidHubspotAuth') ? true : false;\n      } catch (ex) {\n        //\n      }\n    }\n    //\n    setOrgOracleId(oracle_id) {\n      window.localStorage.setItem('calix.org_oracle_id', oracle_id);\n    }\n    getOrgOracleId() {\n      return window.localStorage.getItem('calix.org_oracle_id') ? window.localStorage.getItem('calix.org_oracle_id') : '';\n    }\n    setClientSessionId() {\n      let sessionId = '';\n      sessionId = this.commonFunction.getUniqueId(17);\n      window.localStorage.setItem('calix.client_session_id', sessionId);\n    }\n    getClientSessionId() {\n      return window.localStorage.getItem('calix.client_session_id') ? window.localStorage.getItem('calix.client_session_id') : '';\n    }\n    removeActionLogInfo() {\n      window.localStorage.removeItem('calix.org_oracle_id');\n      window.localStorage.removeItem('calix.client_session_id');\n    }\n    getTodayDateStr() {\n      var d = new Date(),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    }\n    isIpv4Address(val) {\n      const ipV4Regex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n      return ipV4Regex.test(val);\n    }\n    isIpv6Address(val) {\n      const ipV6Regex = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/;\n      return ipV6Regex.test(val);\n    }\n    setAdminOrgInfo(orgInfo) {\n      sessionStorage.setItem('calix.admin_org_information', JSON.stringify(orgInfo));\n    }\n    getAdminOrgInfo() {\n      return sessionStorage.getItem('calix.admin_org_information') ? sessionStorage.getItem('calix.admin_org_information') : '';\n    }\n    getAdminSPID(orgId) {\n      var _a, _b;\n      let orgData = this.getAdminOrgInfo() ? JSON.parse(this.getAdminOrgInfo()) : {};\n      if (orgData && orgData.spId && orgData.calixOrganization && ((_a = orgData.calixOrganization) === null || _a === void 0 ? void 0 : _a.id) && ((_b = orgData.calixOrganization) === null || _b === void 0 ? void 0 : _b.id) == orgId) {\n        return orgData.spId;\n      }\n      return '';\n    }\n    setApigeeError(error) {\n      console.log('set apigee error');\n      this.apigeeError$.next(error);\n    }\n    setEPRredirectFrom(relativePath) {\n      if (relativePath) {\n        window.sessionStorage.setItem('calix.ep_url_redirect_from', relativePath);\n      } else {\n        window.sessionStorage.removeItem('calix.ep_url_redirect_from');\n      }\n    }\n    getEPRredirectFrom() {\n      return window.sessionStorage.getItem('calix.ep_url_redirect_from') ? window.sessionStorage.getItem('calix.ep_url_redirect_from') : '';\n    }\n    setEndpointRedirectTo(path) {\n      if (path) {\n        window.sessionStorage.setItem('calix.endpoint_redirect_to', JSON.stringify(path));\n      } else {\n        window.sessionStorage.removeItem('calix.endpoint_redirect_to');\n      }\n    }\n    getEndpointRedirectTo() {\n      return window.sessionStorage.getItem('calix.endpoint_redirect_to') ? JSON.parse(window.sessionStorage.getItem('calix.endpoint_redirect_to')) : [];\n    }\n    pageErrorHandle(err) {\n      if (err.error != undefined && err.error != null && typeof err.error == 'string') {\n        this.errorInfo = `${err.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.message != undefined && typeof err.error.message == 'string') {\n        this.errorInfo = `${err.error.message}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.errorDesc != undefined && typeof err.error.errorDesc == 'string') {\n        this.errorInfo = `${err.error.errorDesc}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.error != undefined && typeof err.error.error == 'string') {\n        this.errorInfo = `${err.error.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.error_code != undefined && typeof err.error.error_code == 'string') {\n        this.errorInfo = `${err.error.error_code}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'string') {\n        this.errorInfo = `${err.error.fault}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'object' && err.error.fault.faultstring != undefined && typeof err.error.fault.faultstring == 'string') {\n        this.errorInfo = `${err.error.fault.faultstring}`;\n      } else if (err.error && err.error.errorMessage) {\n        this.errorInfo = `${err.error.errorMessage}`;\n      } else if (err.error && err.error.message) {\n        this.errorInfo = `${err.error.message}`;\n      } else if (err.statusText == 'Unknown Error' && err.status == 0) {\n        // this.errorInfo = \"U\\nknown Error - Please refresh the page\"; // remove later\n        this.errorInfo = \"An unknown error has occurred. Refresh the page to try again\";\n      } else if (err.status && err.status == 401) {\n        this.errorInfo = \"User Unauthorized\";\n      } else {\n        this.errorInfo = `${err.message}`;\n      }\n      let langfromapi = this.getspecificlangliterals();\n      this.errorInfo = this.errorInfo != 'undefined' && this.errorInfo && langfromapi[this.errorInfo] ? langfromapi[this.errorInfo] : this.errorInfo;\n      return this.errorInfo != 'undefined' && this.errorInfo.length ? this.errorInfo : Object.values(this.flatten(err)).join(' - ');\n    }\n    traverseAndFlatten(currentNode, target, flattenedKey) {\n      for (var key in currentNode) {\n        if (currentNode.hasOwnProperty(key)) {\n          var newKey;\n          if (flattenedKey === undefined) {\n            newKey = key;\n          } else {\n            newKey = flattenedKey + '.' + key;\n          }\n          var value = currentNode[key];\n          if (typeof value === \"object\") {\n            this.traverseAndFlatten(value, target, newKey);\n          } else {\n            target[newKey] = value;\n          }\n        }\n      }\n    }\n    flatten(obj) {\n      let flattenedObject = {};\n      try {\n        this.traverseAndFlatten(obj, flattenedObject);\n      } catch (ex) {\n        flattenedObject = {};\n      }\n      return flattenedObject;\n    }\n    checFoundationScope(access, checkScopes) {\n      let scopes = this.getScopes();\n      if (checkScopes) {\n        if (checkScopes == CheckScopes.VALIDATE_FOUNDATION_SCOPE) {\n          if (environment.VALIDATE_FOUNDATION_SCOPE) {\n            scopes['cloud.rbac.foundation'] = scopes['cloud.rbac.foundation'] ? scopes['cloud.rbac.foundation'] : [];\n            if (scopes && scopes['cloud.rbac.foundation']) {\n              if (scopes['cloud.rbac.foundation'].includes('read') && access == AcessModifiers.READ) {\n                return true;\n              }\n              if (scopes['cloud.rbac.foundation'].includes('write') && access == AcessModifiers.WRITE) {\n                return true;\n              }\n              return false;\n            } else {\n              return false;\n            }\n          } else {\n            return true;\n          }\n        } else if (checkScopes == CheckScopes.VALIDATE_SCOPE) {\n          if (environment.VALIDATE_SCOPE) {\n            scopes['cloud.rbac.foundation'] = scopes['cloud.rbac.foundation'] ? scopes['cloud.rbac.foundation'] : [];\n            if (scopes && scopes['cloud.rbac.foundation']) {\n              if (scopes['cloud.rbac.foundation'].includes('read') && access == AcessModifiers.READ) {\n                return true;\n              }\n              if (scopes['cloud.rbac.foundation'].includes('write') && access == AcessModifiers.WRITE) {\n                return true;\n              }\n              return false;\n            } else {\n              return false;\n            }\n          } else {\n            return true;\n          }\n        }\n      } else {\n        if (environment.VALIDATE_SCOPE && environment.VALIDATE_FOUNDATION_SCOPE) {\n          scopes['cloud.rbac.foundation'] = scopes['cloud.rbac.foundation'] ? scopes['cloud.rbac.foundation'] : [];\n          if (scopes && scopes['cloud.rbac.foundation']) {\n            if (scopes['cloud.rbac.foundation'].includes('read') && access == AcessModifiers.READ) {\n              return true;\n            }\n            if (scopes['cloud.rbac.foundation'].includes('write') && access == AcessModifiers.WRITE) {\n              return true;\n            }\n            return false;\n          } else {\n            return false;\n          }\n        } else {\n          return true;\n        }\n      }\n    }\n    checkExosModel(checkVersion, equal) {\n      let Id_org = this.getOrg(this.orgId);\n      let getserialno = this.getSerialNo();\n      let serialNumber = getserialno ? JSON.parse(getserialno) : '';\n      if (serialNumber && serialNumber.length != 0 && serialNumber[0].serialNumber) {\n        this.http.get(`${environment.API_BASE_URL}calix/support/device/feature-properties?${Id_org}serialNumber=${serialNumber[0].serialNumber}`).subscribe(res => {\n          if (checkVersion) {\n            const v1 = res.softwareVersion.substring(0, res.softwareVersion.indexOf(\".\") + 1);\n            const version = v1 + res.softwareVersion.replace(v1, '').substring(0, res.softwareVersion.replace(v1, '').indexOf(\".\"));\n            const check = equal ? parseFloat(version) == parseFloat(checkVersion) : false;\n            if (this.acceptGSModel(res.modelName)) sessionStorage.setItem('exosVersion', version);\n            if (this.acceptGSModel(res.modelName) && (parseFloat(version) > parseFloat(checkVersion) || check)) {\n              this.isExosModel.next(true);\n            } else {\n              this.isExosModel.next(false);\n            }\n          } else if (this.acceptGSModel(res.modelName)) {\n            this.isExosModel.next(true);\n          } else {\n            this.isExosModel.next(false);\n          }\n        }, error => {\n          this.isExosModel.next(false);\n        });\n      }\n    }\n    exosVersionCheck(version, notReqModel = false, selectedSn = '') {\n      let versionMatched = false;\n      let deviceData = this.getSerialNo();\n      let obj = deviceData ? JSON.parse(deviceData).filter(obj => selectedSn ? obj.serialNumber == selectedSn : obj.opMode == 'RG') : '';\n      if (obj && obj.length != 0) {\n        //if (obj.length) {\n        obj = obj[0];\n        obj.softwareVersion = obj.softwareVersion || '0';\n        const v1 = obj.softwareVersion.substring(0, obj.softwareVersion.indexOf(\".\") + 1);\n        const sv = v1 + obj.softwareVersion.replace(v1, '').substring(0, obj.softwareVersion.replace(v1, '').indexOf(\".\"));\n        versionMatched = (notReqModel || this.acceptGSModel(obj.modelName || '')) && parseFloat(sv) >= parseFloat(version);\n      }\n      return versionMatched;\n    }\n    getSoftwareVersion(notReqModel = false) {\n      let versionMatched = false;\n      let getserialnodata = this.getSerialNo();\n      let obj = getserialnodata ? JSON.parse(getserialnodata).filter(obj => obj.opMode == 'RG') : '';\n      if (obj && obj.length != 0) {\n        //if (obj.length) {\n        obj = obj[0];\n        obj.softwareVersion = obj.softwareVersion || '0';\n        const v1 = obj.softwareVersion.substring(0, obj.softwareVersion.indexOf(\".\") + 1);\n        const sv = v1 + obj.softwareVersion.replace(v1, '').substring(0, obj.softwareVersion.replace(v1, '').indexOf(\".\"));\n        if (notReqModel || this.acceptGSModel(obj.modelName || '')) {\n          return parseFloat(sv);\n        }\n      }\n    }\n    sendUserCommandIQData(data) {\n      this.commandIQData.next(data);\n    }\n    getISOString(time) {\n      return time.toISOString().substr(0, 16) + ':00';\n    }\n    checkAdminScopes(access) {\n      let scopeAvail = false;\n      let scopes = this.getScopes();\n      if (environment.VALIDATE_SCOPE) {\n        if (access == AcessModifiers.READ) {\n          if (scopes['cloud.admin.orgs'] && (scopes['cloud.admin.orgs'].includes('write') || scopes['cloud.admin.orgs'].includes('read'))) {\n            scopeAvail = true;\n          }\n          if (scopes['cloud.admin.users'] && (scopes['cloud.admin.users'].includes('write') || scopes['cloud.admin.users'].includes('read'))) {\n            scopeAvail = true;\n          }\n        } else if (access == AcessModifiers.WRITE) {\n          if (scopes['cloud.admin.orgs'] && scopes['cloud.admin.orgs'].includes('write')) {\n            scopeAvail = true;\n          }\n          if (scopes['cloud.admin.users'] && scopes['cloud.admin.users'].includes('write')) {\n            scopeAvail = true;\n          }\n        }\n      } else {\n        scopeAvail = true;\n      }\n      return scopeAvail;\n    }\n    isDevCheckFromBaseURL() {\n      let base = `${environment.API_BASE}`;\n      let isDev = false;\n      if (base.indexOf('/dev.api.calix.ai') > -1) {\n        isDev = true;\n      }\n      //isDev = true;\n      return isDev;\n    }\n    isProdCheckFromBaseURL() {\n      const base = `${environment.API_BASE}`;\n      let isProd = false;\n      if (base.indexOf('/api.calix.ai') > -1) {\n        isProd = true;\n      }\n      return isProd;\n    }\n    validateUrl(value) {\n      return /^((https?):\\/\\/)?([w|W]{3}\\.)+[a-zA-Z0-9\\-\\.]{3,}\\.[a-zA-Z]{2,}(\\.[a-zA-Z]{2,})?$/i.test(value);\n    }\n    matchDomainAlone(str) {\n      return /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9][\\.a-zA-Z\\.]{0,20}\\.[a-zA-Z]{2,}$/i.test(str);\n    }\n    supportsGS(specificDevice = []) {\n      var _a;\n      return specificDevice.length ? this.acceptGSModel(((_a = specificDevice[0]) === null || _a === void 0 ? void 0 : _a.modelName) || \"\") : (JSON.parse(this.getSerialNo()) || []).filter(obj => this.acceptGSModel((obj === null || obj === void 0 ? void 0 : obj.modelName) || \"\"));\n    }\n    supportsGsRg() {\n      return (JSON.parse(this.getSerialNo()) || []).filter(obj => ((obj === null || obj === void 0 ? void 0 : obj.opMode) || \"\").includes(\"RG\") && this.acceptGSModel((obj === null || obj === void 0 ? void 0 : obj.modelName) || \"\"));\n    }\n    setPageAccess(flag) {\n      this.hasPageAccess$.next({\n        access: flag\n      });\n    }\n    isTSeries(modelName) {\n      const tSeriesModelPattern = new RegExp(\"^T07(1|2|3|6|7)G\");\n      if (modelName) {\n        return tSeriesModelPattern.test(modelName.toUpperCase());\n      }\n      return false;\n    }\n    getSubscriberInfo() {\n      return JSON.parse(sessionStorage.getItem('calix.subscriberInfo') || '{}');\n    }\n    copyToClipboard(subId, bodyContentSelector) {\n      let text = 'Subject:\\n';\n      text += `${document.querySelector(subId).textContent.trim()}\\n\\nBody:\\n`;\n      document.querySelectorAll(bodyContentSelector).forEach(elem => {\n        text += elem.textContent.trim() + '\\n';\n      });\n      if (!navigator.clipboard) {\n        this.copyForOldBrowser(text);\n      } else {\n        navigator.clipboard.writeText(text).then(function () {\n          //console.log('Async: Copying to clipboard was successful!');\n        }, function (err) {\n          //console.error('Async: Could not copy text: ', err);\n        });\n      }\n    }\n    copyForOldBrowser(text) {\n      let textArea = document.createElement(\"textarea\");\n      // Place in the top-left corner of screen regardless of scroll position.\n      textArea.style.position = 'fixed';\n      textArea.style.top = 0;\n      textArea.style.left = 0;\n      // Ensure it has a small width and height. Setting to 1px / 1em\n      // doesn't work as this gives a negative w/h on some browsers.\n      textArea.style.width = '2em';\n      textArea.style.height = '2em';\n      // We don't need padding, reducing the size if it does flash render.\n      textArea.style.padding = 0;\n      // Clean up any borders.\n      textArea.style.border = 'none';\n      textArea.style.outline = 'none';\n      textArea.style.boxShadow = 'none';\n      // Avoid flash of the white box if rendered for any reason.\n      textArea.style.background = 'transparent';\n      textArea.value = text;\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      try {\n        var successful = document.execCommand('copy');\n        var msg = successful ? 'successful' : 'unsuccessful';\n        //console.log('Copying text command was ' + msg);\n      } catch (err) {\n        //console.log('Oops, unable to copy');\n      }\n      document.body.removeChild(textArea);\n    }\n    acceptGSModel(model) {\n      return (model === null || model === void 0 ? void 0 : model.includes('GS')) || (model === null || model === void 0 ? void 0 : model.includes('GPR')) || (model === null || model === void 0 ? void 0 : model.includes('GM'));\n    }\n    triggerToggle() {\n      this.toggled$.next(true);\n    }\n    getCCOUrlInfo() {\n      return {\n        home: {\n          networktrends: {\n            scope: 'cloud.rbac.coc.insights.networktrends',\n            path: '/cco/home/network-trends'\n          },\n          'networktrends.activealarm': {\n            scope: 'cloud.rbac.coc.insights.networktrends.activealarm',\n            path: '/cco/home/network-trends'\n          },\n          'networktrends.biperrors': {\n            scope: 'cloud.rbac.coc.insights.networktrends.biperrors',\n            path: '/cco/home/network-trends'\n          },\n          'networktrends.activepons': {\n            scope: 'cloud.rbac.coc.insights.networktrends.activepons',\n            path: '/cco/home/network-trends'\n          },\n          'networktrends.subscriberimpacted': {\n            scope: 'cloud.rbac.coc.insights.networktrends.subscriberimpacted',\n            path: '/cco/home/network-trends'\n          },\n          systemtrends: {\n            scope: 'cloud.rbac.coc.insights.subscribersystems',\n            path: '/cco/home/system-service-trends'\n          },\n          'systemtrends.cmndiqstatus': {\n            scope: 'cloud.rbac.coc.insights.subscribersystems.cmndiqstatus',\n            path: '/cco/home/system-service-trends'\n          },\n          'systemtrends.revedgesuiteecosystemstatus': {\n            scope: 'cloud.rbac.coc.insights.subscribersystems.revedgesuiteecosystemstatus',\n            path: '/cco/home/system-service-trends'\n          },\n          'systemtrends.revedgesuitestatus': {\n            scope: 'cloud.rbac.coc.insights.subscribersystems.revedgesuitestatus',\n            path: '/cco/home/system-service-trends'\n          },\n          'systemtrends.systemmodel': {\n            scope: 'cloud.rbac.coc.insights.subscribersystems.systemmodel',\n            path: '/cco/home/system-service-trends'\n          },\n          'systemtrends.systemstatus': {\n            scope: 'cloud.rbac.coc.insights.subscribersystems.systemstatus',\n            path: '/cco/home/system-service-trends'\n          },\n          'systemtrends.systemtype': {\n            scope: 'cloud.rbac.coc.insights.subscribersystems.systemtype',\n            path: '/cco/home/system-service-trends'\n          },\n          'systemtrends.systembyrevenueedgeiqsuites': {\n            scope: 'cloud.rbac.coc.insights.subscribersystems.systembyrevenueedgeiqsuites',\n            path: '/cco/home/system-service-trends'\n          },\n          'insights.activdevicesgeomap': {\n            scope: 'cloud.rbac.coc.insights.activdevicesgeomap',\n            path: '/cco/home/active-systems-geomap'\n          }\n        },\n        issues: {\n          'cloud.rbac.coc.issues.systemalarms.realtime': {\n            scope: 'cloud.rbac.coc.issues.systemalarms.realtime',\n            path: '/cco/alerts/system/realtime/current-issues'\n          },\n          'cloud.rbac.coc.issues.systemalarms.activereports': {\n            scope: 'cloud.rbac.coc.issues.systemalarms.activereports',\n            path: '/cco/alerts/system/active-reports'\n          },\n          'cloud.rbac.coc.issues.systemalarms.historicalreports': {\n            scope: 'cloud.rbac.coc.issues.systemalarms.historicalreports',\n            path: '/cco/alerts/system/history-reports'\n          },\n          'cloud.rbac.coc.issues.transformalarms.realtime': {\n            scope: 'cloud.rbac.coc.issues.transformalarms.realtime',\n            path: '/cco/alerts/transformed/realtime/current-issues'\n          },\n          'cloud.rbac.coc.issues.transformalarms.activereports': {\n            scope: 'cloud.rbac.coc.issues.transformalarms.activereports',\n            path: '/cco/alerts/transformed/active-reports'\n          },\n          'cloud.rbac.coc.issues.transformalarms.historicalreports': {\n            scope: 'cloud.rbac.coc.issues.transformalarms.historicalreports',\n            path: '/cco/alerts/transformed/history-reports'\n          },\n          'cloud.rbac.coc.issues.healthalerts.realtime': {\n            scope: 'cloud.rbac.coc.issues.healthalerts.realtime',\n            path: '/cco/alerts/health/realtime/current-issues'\n          },\n          'cloud.rbac.coc.issues.healthalerts.activereports': {\n            scope: 'cloud.rbac.coc.issues.healthalerts.activereports',\n            path: '/cco/alerts/health/active-reports'\n          },\n          'cloud.rbac.coc.issues.healthalerts.historicalreports': {\n            scope: 'cloud.rbac.coc.issues.healthalerts.historicalreports',\n            path: '/cco/alerts/health/history-reports'\n          },\n          'cloud.rbac.coc.issues.cloudconnectivity.realtime': {\n            scope: 'cloud.rbac.coc.issues.cloudconnectivity.realtime',\n            path: '/cco/alerts/connectivity/realtime/current-issues'\n          },\n          'cloud.rbac.coc.issues.cloudconnectivity.activereports': {\n            scope: 'cloud.rbac.coc.issues.cloudconnectivity.activereports',\n            path: '/cco/alerts/connectivity/active-reports'\n          },\n          'cloud.rbac.coc.issues.cloudconnectivity.historicalreports': {\n            scope: 'cloud.rbac.coc.issues.cloudconnectivity.historicalreports',\n            path: '/cco/alerts/connectivity/history-reports'\n          },\n          'cloud.rbac.coc.issues.servicedisruptions': {\n            scope: 'cloud.rbac.coc.issues.servicedisruptions',\n            path: '/cco/alerts/disruption/list'\n          },\n          'cloud.rbac.coc.issues.events': {\n            scope: 'cloud.rbac.coc.issues.events',\n            path: '/cco/alerts/events/view'\n          }\n        },\n        health: {\n          pon_realtime: {\n            scope: 'cloud.rbac.coc.health.pon.realtime',\n            path: '/cco/health/pon-utilization/realtime'\n          },\n          pon_reports: {\n            scope: 'cloud.rbac.coc.health.pon.report',\n            path: '/cco/health/pon-utilization/overview'\n          },\n          ethernet: {\n            scope: 'cloud.rbac.coc.health.ethernet',\n            path: '/cco/health/uplink'\n          },\n          ont: {\n            scope: 'cloud.rbac.coc.health.ont',\n            path: '/cco/health/ont'\n          },\n          ae: {\n            scope: 'cloud.rbac.coc.health.ae',\n            path: '/cco/health/ae'\n          },\n          'cloud.rbac.coc.health.dsl': {\n            scope: 'cloud.rbac.coc.health.dsl',\n            path: '/cco/health/dsl'\n          }\n        },\n        traffic: {\n          network_realtime: {\n            scope: 'cloud.rbac.coc.traffic.network.realtime',\n            path: '/cco/traffic/network/realtime'\n          },\n          network_report: {\n            scope: 'cloud.rbac.coc.traffic.network.report',\n            path: '/cco/traffic/network/reports'\n          },\n          location_realtime: {\n            scope: 'cloud.rbac.coc.traffic.location.realtime',\n            path: '/cco/traffic/locations/realtime'\n          },\n          location_report: {\n            scope: 'cloud.rbac.coc.traffic.location.report',\n            path: '/cco/traffic/locations/reports'\n          },\n          application_realtime: {\n            scope: 'cloud.rbac.coc.traffic.applications.realtime',\n            path: '/cco/traffic/applications/realtime'\n          },\n          application_report: {\n            scope: 'cloud.rbac.coc.traffic.applications.report',\n            path: '/cco/traffic/applications/reports'\n          }\n        },\n        services: {\n          'cloud.rbac.coc.services.subscribers.subscriberslist': {\n            scope: 'cloud.rbac.coc.services.subscribers.subscriberslist',\n            path: '/cco/services/subscribers/system/list'\n          },\n          'cloud.rbac.coc.services.serviceprofiles.serviceprofiles': {\n            scope: 'cloud.rbac.coc.services.serviceprofiles.serviceprofiles',\n            path: '/cco/services/service-profiles/ONT-profile'\n          },\n          'cloud.rbac.coc.services.serviceprofiles.rgprofiles': {\n            scope: 'cloud.rbac.coc.services.serviceprofiles.rgprofiles',\n            path: '/cco/services/service-profiles/profiles'\n          },\n          'cloud.rbac.coc.services.serviceprofiles.rgdialplans': {\n            scope: 'cloud.rbac.coc.services.serviceprofiles.rgdialplans',\n            path: '/cco/services/service-profiles/dial-plan'\n          },\n          'cloud.rbac.coc.services.configuration.ontconfigurations': {\n            scope: 'cloud.rbac.coc.services.configuration.ontconfigurations',\n            path: '/cco/services/configuration/ONT-configurations'\n          },\n          'cloud.rbac.coc.services.configuration.externalfileserver': {\n            scope: 'cloud.rbac.coc.services.configuration.externalfileserver',\n            path: '/cco/services/configuration/external-file-server-list'\n          },\n          'cloud.rbac.coc.services.configuration.secureonboarding': {\n            scope: 'cloud.rbac.coc.services.configuration.secureonboarding',\n            path: '/cco/services/configuration/secure-onboarding'\n          },\n          'cloud.rbac.coc.services.configuration.stalesystempurge': {\n            scope: 'cloud.rbac.coc.services.configuration.stalesystempurge',\n            path: '/cco/services/configuration/stale-system-purge'\n          },\n          'cloud.rbac.coc.services.configuration.subnetconfiguration': {\n            scope: 'cloud.rbac.coc.services.configuration.subnetconfiguration',\n            path: '/cco/services/configuration/subnet-configuration'\n          },\n          'cloud.rbac.coc.services.configuration.speedtest': {\n            scope: 'cloud.rbac.coc.services.configuration.speedtest',\n            path: '/cco/services/configuration/speed-test'\n          }\n        },\n        operations: {\n          'cloud.rbac.coc.operations.systemonboarding.axoscallhome.systems': {\n            scope: 'cloud.rbac.coc.operations.systemonboarding.axoscallhome.systems',\n            path: '/cco/operations/system-onboarding/axos-callhome/axos/list'\n          },\n          'cloud.rbac.coc.operations.systemonboarding.axoscallhome.callhome': {\n            scope: 'cloud.rbac.coc.operations.systemonboarding.axoscallhome.callhome',\n            path: '/cco/operations/system-onboarding/axos-callhome/callhome/list'\n          },\n          'cloud.rbac.coc.operations.systemonboarding.cmsexacallhome': {\n            scope: 'cloud.rbac.coc.operations.systemonboarding.cmsexacallhome',\n            path: '/cco/operations/system-onboarding/cms-exa/list'\n          },\n          'cloud.rbac.coc.operations.systemonboarding.regionsettings': {\n            scope: 'cloud.rbac.coc.operations.systemonboarding.regionsettings',\n            path: '/cco/operations/system-onboarding/region-settings'\n          },\n          'cloud.rbac.coc.operations.alarms.transformalarmrules': {\n            scope: 'cloud.rbac.coc.operations.alarms.transformalarmrules',\n            path: '/cco/operations/alarms/transform-alarm-rules'\n          },\n          'cloud.rbac.coc.operations.alarms.alarmsandhealthnotifications': {\n            scope: 'cloud.rbac.coc.operations.alarms.alarmsandhealthnotifications',\n            path: '/cco/operations/alarms/health-alarm-notifications'\n          },\n          'cloud.rbac.coc.operations.alarms.alarmsettings': {\n            scope: 'cloud.rbac.coc.operations.alarms.alarmsettings',\n            path: '/cco/operations/alarms/settings'\n          },\n          'cloud.rbac.coc.operations.health.monitoringthresholds': {\n            scope: 'cloud.rbac.coc.operations.health.monitoringthresholds',\n            path: '/cco/operations/health/monitoring-thresholds'\n          },\n          'cloud.rbac.coc.operations.configuration.workflows': {\n            scope: 'cloud.rbac.coc.operations.configuration.workflows',\n            path: '/cco/operations/configuration/workflows'\n          },\n          'cloud.rbac.coc.operations.configuration.systemgroups': {\n            scope: 'cloud.rbac.coc.operations.configuration.systemgroups',\n            path: '/cco/operations/configuration/system-groups'\n          },\n          'cloud.rbac.coc.operations.configuration.softwareimages': {\n            scope: 'cloud.rbac.coc.operations.configuration.softwareimages',\n            path: '/cco/operations/configuration/software-images-list'\n          },\n          'cloud.rbac.coc.operations.configuration.performancetesting': {\n            scope: 'cloud.rbac.coc.operations.configuration.performancetesting',\n            path: '/cco/operations/configuration/performance-testing'\n          },\n          'cloud.rbac.coc.operations.configuration.configurationfiles': {\n            scope: 'cloud.rbac.coc.operations.configuration.configurationfiles',\n            path: '/cco/operations/configuration/configuration-files-list'\n          },\n          'cloud.rbac.coc.operations.configuration.axosmigration': {\n            scope: 'cloud.rbac.coc.operations.configuration.axosmigration',\n            path: '/cco/operations/configuration/migrations'\n          },\n          'cloud.rbac.coc.operations.report.mappedeplists': {\n            scope: 'cloud.rbac.coc.operations.report.mappedeplists',\n            path: '/cco/operations/cco-reports/mapped-endpoint-list'\n          },\n          'cloud.rbac.coc.operations.report.epcountbymapper': {\n            scope: 'cloud.rbac.coc.operations.report.epcountbymapper',\n            path: '/cco/operations/cco-reports/endpoint-count-bymapper'\n          },\n          'cloud.rbac.coc.operations.report.ontdevices': {\n            scope: 'cloud.rbac.coc.operations.report.ontdevices',\n            path: '/cco/operations/cco-reports/ont-devices'\n          },\n          'cloud.rbac.coc.operations.report.unmappedips': {\n            scope: 'cloud.rbac.coc.operations.report.unmappedips',\n            path: '/cco/operations/cco-reports/unmapped-ips'\n          },\n          'cloud.rbac.coc.operations.report.invreports': {\n            scope: 'cloud.rbac.coc.operations.report.invreports',\n            path: '/cco/operations/cco-reports/inventory-report'\n          },\n          'cloud.rbac.coc.operations.report.calloutcomereports': {\n            scope: 'cloud.rbac.coc.operations.report.calloutcomereports',\n            path: '/cco/operations/cco-reports/call-outcome-report'\n          },\n          'cloud.rbac.coc.operations.report.auditreports': {\n            scope: 'cloud.rbac.coc.operations.report.auditreports',\n            path: '/cco/operations/cco-reports/Audit-report'\n          },\n          'cloud.rbac.coc.operations.report.unassociatedsystems': {\n            scope: 'cloud.rbac.coc.operations.report.unassociatedsystems',\n            path: '/cco/operations/cco-reports/unassociated-devices'\n          }\n        },\n        dashboard: {\n          dashboard: {\n            scope: 'cloud.rbac.coc.dashboard',\n            path: '/cco/dashboard'\n          }\n        }\n      };\n    }\n    /* Sanitizes the given input and returns only the accepted input to search */\n    sanitizeSearch(val) {\n      return (val.match(/[A-Za-z0-9&@,.()-]*/g) || []).join('');\n    }\n    getModelWithSn(sn) {\n      return JSON.parse(this.getSerialNo()).filter(obj => obj.serialNumber == sn).map(obj => obj.modelName).join('');\n    }\n    queryStringToJSON(qs) {\n      qs = qs || location.search.slice(1);\n      var pairs = qs.split('&');\n      var result = {};\n      pairs.forEach(function (p) {\n        var pair = p.split('=');\n        var key = pair[0];\n        var value = decodeURIComponent(pair[1] || '');\n        if (result[key]) {\n          if (Object.prototype.toString.call(result[key]) === '[object Array]') {\n            result[key].push(value);\n          } else {\n            result[key] = [result[key], value];\n          }\n        } else {\n          result[key] = value;\n        }\n      });\n      return JSON.parse(JSON.stringify(result));\n    }\n    jsonToQueryString(json = {}) {\n      return Object.entries(json).map(e => e.join('=')).join('&');\n    }\n    setFederatedLogin(value) {\n      if (value) {\n        window.localStorage.setItem('calix.federated_login', 'true');\n        this.federatedLogin$.next({\n          secure: true\n        });\n      } else {\n        window.localStorage.removeItem('calix.federated_login');\n        this.federatedLogin$.next({\n          secure: false\n        });\n      }\n    }\n    isFederatedLogin() {\n      return window.localStorage.getItem('calix.federated_login') ? true : false;\n    }\n    doExitFederatedAccess() {\n      this.setAccessToken('');\n      this.setCSCLoggedIn(false);\n      let res = this.isSecureAccess() ? this.getSecureAccessLoginData() : this.getLoginData();\n      this.manageEntitlements(res.entitlements);\n      this.setLoginInfo(this.isSecureAccess() ? this.getSecureAccessLoginData() : this.getLoginData());\n      this.setFederatedLogin('');\n      window.location.href = `${WindowRefService.prototype.nativeWindow}/federated-dashboard`;\n    }\n    getDefaultRoute() {\n      let entArr = this.getEntitlementsArr();\n      let ent = this.getValidEntitlements();\n      let redirectRoute = '';\n      if (entArr) {\n        for (let i = 0; i < entArr.length; i++) {\n          if (ent[entArr[i]]) {\n            redirectRoute = ent[entArr[i]];\n            break;\n          }\n        }\n      }\n      if (redirectRoute) {\n        return redirectRoute;\n      } else {\n        return '/no-entitlements';\n      }\n    }\n    showApps(res) {\n      var _a;\n      let apps = {};\n      let enttlmnts = {},\n        roles = [];\n      if (res && Object.keys(res).length) {\n        (_a = res === null || res === void 0 ? void 0 : res.entitlements) === null || _a === void 0 ? void 0 : _a.forEach(ent => {\n          enttlmnts[ent.apptype] = ent;\n        });\n        roles = res === null || res === void 0 ? void 0 : res['roles'];\n      } else {\n        enttlmnts = this.getEntitlements();\n        roles = this.getRoles();\n      }\n      if (enttlmnts[200] || enttlmnts[201] || enttlmnts[218]) {\n        apps.foundation = true;\n      }\n      if (enttlmnts[119] || enttlmnts[209]) {\n        apps.cmc = true;\n      }\n      if (enttlmnts[118] || enttlmnts[120]) {\n        apps.csc = true;\n      }\n      if (enttlmnts[102] || enttlmnts[210]) {\n        apps.cco = true;\n      }\n      if (roles && roles.indexOf('OrgAdmin') !== -1) {\n        apps.orgAdmin = true;\n      }\n      if (roles && roles.indexOf('System Admin') !== -1) {\n        apps.calixAdmin = true;\n      }\n      if (roles && roles.indexOf('SysAdmin') !== -1) {\n        apps.calixAdmin = true;\n      }\n      return apps;\n    }\n    getValidEntitlements() {\n      return {\n        210: 'cco',\n        102: 'cco',\n        118: 'support',\n        120: 'support',\n        119: 'marketing',\n        122: 'marketing',\n        209: 'marketing',\n        200: 'cco-foundation',\n        201: 'cco-foundation',\n        218: 'cco-foundation'\n      };\n    }\n    isSmbEnabled(onboard = true, checkUnassociated = false) {\n      var _a;\n      const subInfo = JSON.parse(sessionStorage.getItem('calix.subscriberInfo'));\n      return (((subInfo === null || subInfo === void 0 ? void 0 : subInfo.devices) || []).some(obj => obj.bSmbMode) || ((_a = subInfo === null || subInfo === void 0 ? void 0 : subInfo.device) === null || _a === void 0 ? void 0 : _a.bSmbMode)) && (onboard ? subInfo === null || subInfo === void 0 ? void 0 : subInfo.isSmbOnboarded : true); // || unassoSmb;\n    }\n\n    validateHexCode(testcase) {\n      return testcase ? new RegExp(\"^#([A-Fa-f0-9]{3,6})$\").test(testcase) : true;\n    }\n    sleep(milliseconds) {\n      const date = Date.now();\n      let currentDate = null;\n      do {\n        currentDate = Date.now();\n      } while (currentDate - date < milliseconds);\n    }\n    checkScope(path, access) {\n      const scopes = this.getScopes();\n      return scopes[path] && scopes[path].includes(access);\n    }\n    checkSubWithinTime() {\n      return parseInt(sessionStorage.getItem('outcomeTimer') || new Date(new Date().getTime() + 5000).toString()) < new Date().getTime();\n    }\n    commonOutcomeWarnConditn(scopeCheck = true) {\n      return (scopeCheck ? this.checkScope('cloud.rbac.csc.calloutcome.enforce', 'read') : true) && sessionStorage.getItem('calloutcomeSubmitted') != 'true' && !this.isSecureAccess(true) && this.checkSubWithinTime();\n    }\n    isMenuActive(menuName) {\n      if (window.location.pathname.indexOf(`/${menuName}/`) !== -1) {\n        return true;\n      }\n      return false;\n    }\n    auditLogParam(msg, objectType) {\n      var _a, _b, _c;\n      const subInfo = this.getSubscriberInfo();\n      const rgDetail = (this.getDeviceData() || []).filter(device => device.opMode == \"RG\");\n      return {\n        \"accessType\": sessionStorage.getItem('Orgacceforssid') == 'true' ? 'Calix' : 'BSP',\n        \"accountId\": subInfo.subscriberLocationId,\n        \"accountName\": subInfo.name,\n        \"action\": msg,\n        \"actionTimestamp\": this.dateUtils.currentDateToUTC(),\n        \"deviceId\": rgDetail.length ? (_a = rgDetail[0]) === null || _a === void 0 ? void 0 : _a.deviceId : '',\n        \"deviceType\": rgDetail.length ? (_b = rgDetail[0]) === null || _b === void 0 ? void 0 : _b.modelName : '',\n        \"objectType\": objectType,\n        \"orgId\": this.getOrgId(),\n        \"originator\": (_c = this.getLoginData()) === null || _c === void 0 ? void 0 : _c.username,\n        \"description\": msg\n      };\n    }\n    insertScopesForOrgAdmin() {\n      let enttlmnts = this.getEntitlements();\n      if (enttlmnts[210] && !enttlmnts[102]) {\n        return;\n      }\n      let scopes = this.getScopes();\n      let roles = this.getRoles();\n      let scopesToInsert = ['cloud.rbac.coc.operations.systemonboarding.axoscallhome.callhome', 'cloud.rbac.coc.operations.health.monitoringthresholds', 'cloud.rbac.coc.operations.systemonboarding.regionsettings', 'cloud.rbac.coc.operations.alarms.alarmsettings', 'cloud.rbac.coc.services.configuration.ontconfigurations'];\n      if ((roles === null || roles === void 0 ? void 0 : roles.indexOf('OrgAdmin')) !== -1) {\n        scopesToInsert === null || scopesToInsert === void 0 ? void 0 : scopesToInsert.forEach(scope => {\n          scopes[scope] = [\"read\", \"write\"];\n        });\n        window.localStorage.setItem('calix.scopes', JSON.stringify(scopes));\n      }\n    }\n    removeScopesForFlowLtdEnt() {\n      var _a, _b;\n      let scopes = this.getScopes();\n      let enttlmnts = this.getEntitlements();\n      if (enttlmnts[210] && !enttlmnts[102] && ((_a = Object.keys(scopes)) === null || _a === void 0 ? void 0 : _a.length)) {\n        delete scopes['cloud.rbac.coc.services.subscribers'];\n        delete scopes['cloud.rbac.coc.services.subscribers.subscriberslist'];\n        delete scopes['cloud.rbac.coc.services.serviceprofiles.serviceprofiles'];\n        delete scopes['cloud.rbac.coc.services.serviceprofiles'];\n        delete scopes['cloud.rbac.coc.operations.configuration.axosmigration'];\n        delete scopes['cloud.rbac.coc.operations.configuration'];\n        const readScopes = ['workflows', 'systemgroups', 'softwareimages', 'performancetesting', 'configurationfiles'];\n        readScopes === null || readScopes === void 0 ? void 0 : readScopes.forEach(scope => {\n          if (scopes[`cloud.rbac.coc.operations.configuration.${scope}`]) {\n            scopes[`cloud.rbac.coc.operations.configuration.${scope}`] = ['read'];\n          }\n        });\n        if ((_b = scopes['cloud.rbac.coc.services.configuration.subnetconfiguration']) === null || _b === void 0 ? void 0 : _b.length) {\n          scopes['cloud.rbac.coc.services.configuration.subnetconfiguration'] = ['read'];\n        }\n        if (scopes['cloud.rbac.coc.services.serviceprofiles.rgprofiles']) {\n          scopes['cloud.rbac.coc.services.serviceprofiles.rgprofiles'] = ['read'];\n        }\n        if (scopes['cloud.rbac.coc.services.configuration.speedtest']) {\n          scopes['cloud.rbac.coc.services.configuration.speedtest'] = ['read'];\n        }\n        window.localStorage.setItem('calix.scopes', JSON.stringify(scopes));\n      }\n    }\n    parseStored(key) {\n      return JSON.parse(sessionStorage[key] || '{}');\n    }\n    callOutcomeBeforeUnload(e) {\n      if (this.commonOutcomeWarnConditn()) {\n        if (!e) e = window.event;\n        const message = \"Are you sure you want to close the tab\";\n        //e.cancelBubble is supported by IE - this will kill the bubbling process.\n        e.cancelBubble = true;\n        e.returnValue = message;\n        //e.stopPropagation works in Firefox.\n        if (e.stopPropagation) {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n        //return works for Chrome and Safari\n        return message;\n      }\n    }\n    callOutcomeOnUnload() {\n      if (this.commonOutcomeWarnConditn()) {\n        const url = `${environment.SUPPORT_URL}/useraudit/saveAuditLog`;\n        //const data = ((this.auditLogParam(`Call Outcome not saved on tab close`, 'Call outcome not saved')) as unknown) as BodyInit;\n        const data = this.auditLogParam(`Call Outcome not saved on tab close`, 'Call outcome not saved');\n        navigator.sendBeacon = (url, data) => {\n          const params = {\n            method: 'POST',\n            body: data,\n            headers: {\n              'X-Calix-ClientID': environment.X_CALIX_CLIENTID,\n              'X-Calix-AccessToken': this.getAccessToken() ? this.getAccessToken() : 'token'\n            }\n          };\n          window.fetch(url, params).then(res => {\n            console.log(\"Updated tab close event\");\n          });\n          this.sleep(2000);\n          return true;\n        };\n        navigator.sendBeacon(url, JSON.stringify(data));\n        /* const params: RequestInit = {\r\n          method: 'POST',\r\n          body: data,\r\n          headers: {\r\n            'X-Calix-ClientID': environment.X_CALIX_CLIENTID, //todo sample\r\n            'X-Calix-AccessToken': this.getAccessToken() ? this.getAccessToken() : 'token'\r\n          }\r\n        }\r\n        sessionStorage.removeItem('outcomeTimer');\r\n        window.fetch(url, params).then(res => {\r\n          console.log(\"Updated tab close event\");\r\n        }); */\n      }\n    }\n\n    setCcoWrkflwReportId(id) {\n      if (id) {\n        window.sessionStorage.setItem('calix.cco_wrkflw_rpt_id', id);\n      } else {\n        window.sessionStorage.removeItem('calix.cco_wrkflw_rpt_id');\n      }\n    }\n    getCcoWrkflwReportId() {\n      return window.sessionStorage.getItem('calix.cco_wrkflw_rpt_id') ? window.sessionStorage.getItem('calix.cco_wrkflw_rpt_id') : undefined;\n    }\n    dwnldCcoWrkflwReportId() {\n      const ccoWrkflwRptId = this.getCcoWrkflwReportId();\n      if (!ccoWrkflwRptId) {\n        return;\n      }\n      this.http.get(`${environment.API_BASE_URL}cco/report/download?shortId=${ccoWrkflwRptId}`, {\n        responseType: 'text',\n        observe: 'response'\n      }).subscribe(response => {\n        console.log(response);\n        this.setCcoWrkflwReportId(undefined);\n        let filename;\n        try {\n          filename = response.headers.get('Content-Disposition').split('=')[1];\n        } catch (e) {\n          filename = 'reports.csv';\n        }\n        const blob = new Blob([response.body], {\n          type: 'text/csv'\n        });\n        saveAs(blob, filename);\n      }, err => {\n        console.log(err);\n        this.setCcoWrkflwReportId(undefined);\n      });\n    }\n  }\n  SsoAuthService.ɵfac = function SsoAuthService_Factory(t) {\n    return new (t || SsoAuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.DateUtilsService), i0.ɵɵinject(i5.CommonFunctionsService));\n  };\n  SsoAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SsoAuthService,\n    factory: SsoAuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return SsoAuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}