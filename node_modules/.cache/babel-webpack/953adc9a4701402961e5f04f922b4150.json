{"ast":null,"code":"import { find, forEach, isArray, isDefined, isObject, matchPattern, reduce, has, sortBy } from 'min-dash';\nvar DISALLOWED_PROPERTIES = ['artifacts', 'dataInputAssociations', 'dataOutputAssociations', 'default', 'flowElements', 'lanes', 'incoming', 'outgoing'];\n\n/**\n * @typedef {Function} <moddleCopy.canCopyProperties> listener\n *\n * @param {Object} context\n * @param {Array<string>} context.propertyNames\n * @param {ModdleElement} context.sourceElement\n * @param {ModdleElement} context.targetElement\n *\n * @returns {Array<string>|boolean} - Return properties to be copied or false to disallow\n * copying.\n */\n\n/**\n * @typedef {Function} <moddleCopy.canCopyProperty> listener\n *\n * @param {Object} context\n * @param {ModdleElement} context.parent\n * @param {*} context.property\n * @param {string} context.propertyName\n *\n * @returns {*|boolean} - Return copied property or false to disallow\n * copying.\n */\n\n/**\n * @typedef {Function} <moddleCopy.canSetCopiedProperty> listener\n *\n * @param {Object} context\n * @param {ModdleElement} context.parent\n * @param {*} context.property\n * @param {string} context.propertyName\n *\n * @returns {boolean} - Return false to disallow\n * setting copied property.\n */\n\n/**\n * Utility for copying model properties from source element to target element.\n *\n * @param {EventBus} eventBus\n * @param {BpmnFactory} bpmnFactory\n * @param {BpmnModdle} moddle\n */\nexport default function ModdleCopy(eventBus, bpmnFactory, moddle) {\n  this._bpmnFactory = bpmnFactory;\n  this._eventBus = eventBus;\n  this._moddle = moddle;\n\n  // copy extension elements last\n  eventBus.on('moddleCopy.canCopyProperties', function (context) {\n    var propertyNames = context.propertyNames;\n    if (!propertyNames || !propertyNames.length) {\n      return;\n    }\n    return sortBy(propertyNames, function (propertyName) {\n      return propertyName === 'extensionElements';\n    });\n  });\n\n  // default check whether property can be copied\n  eventBus.on('moddleCopy.canCopyProperty', function (context) {\n    var parent = context.parent,\n      parentDescriptor = isObject(parent) && parent.$descriptor,\n      propertyName = context.propertyName;\n    if (propertyName && DISALLOWED_PROPERTIES.indexOf(propertyName) !== -1) {\n      // disallow copying property\n      return false;\n    }\n    if (propertyName && parentDescriptor && !find(parentDescriptor.properties, matchPattern({\n      name: propertyName\n    }))) {\n      // disallow copying property\n      return false;\n    }\n  });\n\n  // do NOT allow to copy empty extension elements\n  eventBus.on('moddleCopy.canSetCopiedProperty', function (context) {\n    var property = context.property;\n    if (is(property, 'bpmn:ExtensionElements') && (!property.values || !property.values.length)) {\n      // disallow setting copied property\n      return false;\n    }\n  });\n}\nModdleCopy.$inject = ['eventBus', 'bpmnFactory', 'moddle'];\n\n/**\n * Copy model properties of source element to target element.\n *\n * @param {ModdleElement} sourceElement\n * @param {ModdleElement} targetElement\n * @param {Array<string>} [propertyNames]\n *\n * @param {ModdleElement}\n */\nModdleCopy.prototype.copyElement = function (sourceElement, targetElement, propertyNames) {\n  var self = this;\n  if (propertyNames && !isArray(propertyNames)) {\n    propertyNames = [propertyNames];\n  }\n  propertyNames = propertyNames || getPropertyNames(sourceElement.$descriptor);\n  var canCopyProperties = this._eventBus.fire('moddleCopy.canCopyProperties', {\n    propertyNames: propertyNames,\n    sourceElement: sourceElement,\n    targetElement: targetElement\n  });\n  if (canCopyProperties === false) {\n    return targetElement;\n  }\n  if (isArray(canCopyProperties)) {\n    propertyNames = canCopyProperties;\n  }\n\n  // copy properties\n  forEach(propertyNames, function (propertyName) {\n    var sourceProperty;\n    if (has(sourceElement, propertyName)) {\n      sourceProperty = sourceElement.get(propertyName);\n    }\n    var copiedProperty = self.copyProperty(sourceProperty, targetElement, propertyName);\n    var canSetProperty = self._eventBus.fire('moddleCopy.canSetCopiedProperty', {\n      parent: targetElement,\n      property: copiedProperty,\n      propertyName: propertyName\n    });\n    if (canSetProperty === false) {\n      return;\n    }\n    if (isDefined(copiedProperty)) {\n      targetElement.set(propertyName, copiedProperty);\n    }\n  });\n  return targetElement;\n};\n\n/**\n * Copy model property.\n *\n * @param {*} property\n * @param {ModdleElement} parent\n * @param {string} propertyName\n *\n * @returns {*}\n */\nModdleCopy.prototype.copyProperty = function (property, parent, propertyName) {\n  var self = this;\n\n  // allow others to copy property\n  var copiedProperty = this._eventBus.fire('moddleCopy.canCopyProperty', {\n    parent: parent,\n    property: property,\n    propertyName: propertyName\n  });\n\n  // return if copying is NOT allowed\n  if (copiedProperty === false) {\n    return;\n  }\n  if (copiedProperty) {\n    if (isObject(copiedProperty) && copiedProperty.$type && !copiedProperty.$parent) {\n      copiedProperty.$parent = parent;\n    }\n    return copiedProperty;\n  }\n  var propertyDescriptor = this._moddle.getPropertyDescriptor(parent, propertyName);\n\n  // do NOT copy Ids and references\n  if (propertyDescriptor.isId || propertyDescriptor.isReference) {\n    return;\n  }\n\n  // copy arrays\n  if (isArray(property)) {\n    return reduce(property, function (childProperties, childProperty) {\n      // recursion\n      copiedProperty = self.copyProperty(childProperty, parent, propertyName);\n\n      // copying might NOT be allowed\n      if (copiedProperty) {\n        copiedProperty.$parent = parent;\n        return childProperties.concat(copiedProperty);\n      }\n      return childProperties;\n    }, []);\n  }\n\n  // copy model elements\n  if (isObject(property) && property.$type) {\n    if (this._moddle.getElementDescriptor(property).isGeneric) {\n      return;\n    }\n    copiedProperty = self._bpmnFactory.create(property.$type);\n    copiedProperty.$parent = parent;\n\n    // recursion\n    copiedProperty = self.copyElement(property, copiedProperty);\n    return copiedProperty;\n  }\n\n  // copy primitive properties\n  return property;\n};\n\n// helpers //////////\n\nexport function getPropertyNames(descriptor, keepDefaultProperties) {\n  return reduce(descriptor.properties, function (properties, property) {\n    if (keepDefaultProperties && property.default) {\n      return properties;\n    }\n    return properties.concat(property.name);\n  }, []);\n}\nfunction is(element, type) {\n  return element && typeof element.$instanceOf === 'function' && element.$instanceOf(type);\n}","map":null,"metadata":{},"sourceType":"module"}