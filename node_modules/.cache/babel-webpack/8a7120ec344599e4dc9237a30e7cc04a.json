{"ast":null,"code":"import { of } from 'rxjs';\nimport * as Highcharts from \"highcharts/highstock\";\nimport * as constants from \"../../../../shared/constants/marketing.constants\";\nimport * as moment from 'moment';\nimport { DatePipe } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./explore-data-common.service\";\nimport * as i2 from \"src/app-services/translate.service\";\nrequire('highcharts/highcharts-more')(Highcharts);\nrequire('highcharts/modules/solid-gauge')(Highcharts);\nconst IndicatorsCore = require(\"highcharts/indicators/indicators\");\nIndicatorsCore(Highcharts);\nconst IndicatorZigZag = require(\"highcharts/indicators/zigzag\");\nIndicatorZigZag(Highcharts);\nconst borderRadius = require('highcharts-border-radius');\nborderRadius(Highcharts);\nconst $ = require('jquery');\nexport let ExportDataChartOptionsService = /*#__PURE__*/(() => {\n  class ExportDataChartOptionsService {\n    constructor(marketingExploreCommonService, translateService) {\n      this.marketingExploreCommonService = marketingExploreCommonService;\n      this.translateService = translateService;\n      this.isRerender = false;\n      this.stackedColumnColors = constants.chartColorCodes;\n      this.stackedWfhColors = ['#0027FF', '#5ACFEA'];\n      this.stackedAqiteColors = constants.chartColorCodes;\n      this.stackedColumnInlineColors = ['#5ACFEA', '#FF8238', '#0027FF'];\n      this.data_usage_series = [];\n      this.data_household_series = [];\n      this.data_tier_series = [];\n      this.data_Pie_series = [];\n      this.tier_Service_Array = [];\n      this.tierAndTech_Service_Array = [];\n      this.data_Servicetier_series = [];\n      this.data1_Acquisation_Revenue = [];\n      this.data_Revenue_series = [];\n      this.data_Series_WHHGamming = [];\n      this.data_Series_ChurnInsightRate = [];\n      this.data1_Active_WHHGamming = [];\n      this.data1_Active_ChurnInsightRate = [];\n      this.data_RateInsight_series = [];\n      this.data1_acquisation_rate = [];\n      this.data_PieBlock_series = [];\n      this.commonHighChartOptions = {\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        responsive: {\n          rules: [{\n            condition: {},\n            chartOptions: {\n              chart: {\n                color: '#4c4c4c'\n              },\n              subtitle: {\n                text: null\n              },\n              navigator: {\n                enabled: false\n              }\n            }\n          }]\n        }\n      };\n      this.plotOptions = {\n        stacking: 'normal',\n        series: {\n          allowPointSelect: true\n        },\n        states: {\n          inactive: {\n            enabled: false\n          },\n          select: {\n            color: null,\n            borderWidth: 7,\n            borderColor: 'rgb(170, 170, 170)'\n          }\n        }\n      };\n      this.selectOptions = {\n        enabled: true,\n        color: null,\n        borderWidth: 2,\n        borderColor: '#AAAAAA'\n      };\n      this.styleOptions = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '14px',\n        color: '#1A1F22',\n        fontStyle: \"normal\",\n        lineHeight: '18px'\n      };\n      this.styleOptions_stacklabel = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '12px',\n        color: '#1A1F22',\n        fontStyle: \"normal\",\n        lineHeight: '18px'\n      };\n      this.styleOptions_usage_insights = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '10px',\n        color: '#1A1F22',\n        fontStyle: \"normal\",\n        lineHeight: '18px'\n      };\n      this.styleOptions_usage_application = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '12px',\n        color: '#1A1F22',\n        fontStyle: \"normal\",\n        lineHeight: '18px'\n      };\n      this.styleOptions_legendtext = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '14px',\n        color: '#1A1F22',\n        fontStyle: \"normal\",\n        lineHeight: '18px'\n      };\n      this.styleOptions_xaxis = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '14px',\n        color: '#1A1F22',\n        fontStyle: \"normal\",\n        lineHeight: '18px'\n      };\n      this.styleOptions_yaxis = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '14px',\n        color: '#1A1F22',\n        fontStyle: \"normal\"\n      };\n      this.styleOptions_tooltip = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '14px',\n        color: '#1A1F22',\n        fontStyle: \"normal\"\n      };\n      this.xAxisLabels = {\n        style: {\n          fontFamily: 'Source Sans Pro,Regular',\n          fontSize: '14px',\n          color: '#1A1F22',\n          fontStyle: \"normal\"\n        },\n        autoRotationLimit: 40\n      };\n      this.linePlotOptions = {\n        states: {\n          inactive: {\n            enabled: false\n          }\n        }\n      };\n      this.datePipe = new DatePipe('en-US');\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.isRerender = true;\n      });\n    }\n    // ngOnInit(): void {\n    //     this.language = this.translateService.defualtLanguage;\n    //     this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n    //       this.language = data;\n    //       this.isRerender = true;\n    //     });\n    // }\n    // ngOnDestroy(): void {\n    //     if (this.languageSubject) {\n    //         this.languageSubject.unsubscribe();\n    //       }\n    // }\n    // SUBSCRIBERS TAB\n    // SUBSCRIBER DATA USAGE\n    subscriberDataUsageOptions(data, selected = {}) {\n      const that = this;\n      if (selected.tier != null && selected.tier != undefined) {\n        if (!selected.tier.includes('GB') && !selected.tier.includes('TB')) {\n          const sizes = ['GB', 'TB'];\n          var size1 = \"\";\n          var size2 = \"\";\n          var value1 = \"\";\n          var value2 = \"\";\n          var conversion1 = \"\";\n          var conversion2 = \"\";\n          var keydata = selected.tier.split(\"-\");\n          if (keydata[0] != null && keydata[0] != undefined && keydata.length == 2) {\n            if (Number(keydata[0]) >= 1000) {\n              size1 = sizes[1];\n              if (keydata[0].includes('001')) {\n                let value = keydata[0];\n                value1 = ((Number(value) + 9) / 1000).toFixed(2);\n              } else {\n                value1 = (keydata[0] / 1000).toFixed(2);\n              }\n            } else if (Number(keydata[0]) < 1000) {\n              size1 = sizes[0];\n              value1 = keydata[0];\n              // if(Number(keydata[0] == 501)) {\n              //     size1 = sizes[0];\n              //   }\n            }\n\n            conversion1 = value1 + size1;\n          }\n          if (keydata[1] != null && keydata[1] != undefined && keydata.length == 2) {\n            if (Number(keydata[1]) >= 1000) {\n              size2 = sizes[1];\n              if (keydata[1].includes('001')) {\n                let value = keydata[1];\n                value2 = ((Number(value) + 9) / 1000).toFixed(2);\n              } else {\n                value2 = (keydata[1] / 1000).toFixed(2);\n              }\n              // value2 = ((keydata[1] + 9) / 1000).toFixed(2);\n            } else if (Number(keydata[1]) < 1000) {\n              size2 = sizes[0];\n              value2 = keydata[1];\n            }\n            conversion2 = \"-\" + value2 + size2;\n          } else {\n            var keydata = selected.tier.split(\"+\");\n            if (Number(keydata[0]) >= 1000) {\n              size1 = sizes[1];\n              if (keydata[0].includes('001')) {\n                let value = keydata[0];\n                value1 = ((Number(value) + 9) / 1000).toFixed(2);\n              } else {\n                value1 = (keydata[0] / 1000).toFixed(2);\n              }\n            } else if (Number(keydata[0]) < 1000) {\n              size1 = sizes[0];\n              value1 = keydata[0];\n            }\n            conversion1 = value1 + size1 + \"+\";\n          }\n          selected.tier = conversion1 + conversion2;\n        }\n      }\n      this.data_usage_series = [];\n      for (var i = 0; i < data.categories.length; i++) {\n        if (data.categories[i] == selected.tier) {\n          this.data_usage_series.push({\n            'y': data.series[i],\n            borderColor: '#008000',\n            'selected': true\n          });\n        } else {\n          this.data_usage_series.push({\n            'y': data.series[i]\n          });\n        }\n      }\n      let subscriberDataUsageOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: ['#0027FF'],\n        chart: {\n          type: 'column',\n          inverted: false,\n          style: Object.assign({}, this.styleOptions),\n          events: {}\n        },\n        xAxis: {\n          categories: data.categories,\n          crosshair: true,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis),\n            rotation: -25\n          }),\n          title: {\n            useHTML: true,\n            text: `<p class=\"giga-text\" id=\"giga\" style=\"font-size:12px !important;margin-top:5px;\">${this.language.Usage}</p>`,\n            align: 'middle',\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          }\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          reversedStacks: false,\n          title: {\n            style: Object.assign({}, this.styleOptions_legendtext),\n            text: this.language.Subscribers\n          },\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            formatter: function () {\n              let totalDivider = data.totalSubs / 100;\n              return Highcharts.numberFormat(this.total / (totalDivider == 0 ? 1 : totalDivider), 1) + '%';\n            },\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_legendtext)\n          }\n        },\n        tooltip: {\n          formatter: function () {\n            return ` ${this.key}  ${that.language.Usage}<br/> <b>${Highcharts.numberFormat(this.y, 0, '', ',')}  ${that.language.Subscribers} ( ${Highcharts.numberFormat(this.total / (data.totalSubs / 100), 1) + '%'}) </b>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        plotOptions: {\n          series: {\n            allowPointSelect: true,\n            maxPointWidth: 24,\n            borderRadius: 0,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            }\n          },\n          column: {\n            stacking: 'normal',\n            minPointLength: 3,\n            borderWidth: 0,\n            dataLabels: {\n              enabled: false\n            }\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        series: [{\n          showInLegend: false,\n          // borderRadiusTopLeft: 20,\n          // borderRadiusTopRight: 20,\n          // data: data.series,\n          data: this.data_usage_series\n        }],\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(subscriberDataUsageOptions);\n    }\n    translatestreamingGamingWFHSubscriberOptionsChartLabelName(name) {\n      switch (name) {\n        case 'Streaming':\n          return this.language['Streaming'];\n        case 'Non-Streaming':\n          return this.language['Non-Streaming'];\n        case 'Gaming':\n          return this.language['Gaming'];\n        case \"Non-Gaming\":\n          return this.language['Non-Gaming'];\n        default:\n          return name;\n      }\n    }\n    // STREAMING, GAMING, WFH SUBSCRIBERS\n    streamingGamingWFHSubscriberOptions(data, selected = {}) {\n      const that = this;\n      this.data_Series_WHHGamming = [];\n      for (var i = 0; i < data.series.length; i++) {\n        this.data1_Active_WHHGamming = [];\n        for (var j = 0; j < data.series[i].data.length; j++) {\n          // if(data.series[i].data[j]==selected.yValue){\n          if (i == selected.indexS) {\n            if (j == selected.index) {\n              this.data1_Active_WHHGamming.push({\n                'y': data.series[i].data[j],\n                borderColor: '#008000',\n                'selected': true\n              });\n            } else {\n              this.data1_Active_WHHGamming.push({\n                'y': data.series[i].data[j]\n              });\n            }\n          } else {\n            this.data1_Active_WHHGamming.push({\n              'y': data.series[i].data[j]\n            });\n          }\n        }\n        // if (sessionStorage.getItem('defaultLanguage') == 'fr') {\n        //     if (data.series[i].name === 'Streaming') {\n        //         data.series[i].name = 'Vidéo';\n        //     } else if (data.series[i].name === 'Non-Streaming') {\n        //         data.series[i].name = 'Non Vidéo'\n        //     } else if (data.series[i].name === 'Gaming') {\n        //         data.series[i].name = 'Jeux'\n        //     } else if (data.series[i].name === 'Non-Gaming') {\n        //         data.series[i].name = 'Non jeux'\n        //     } else if (data.series[i].name === 'WFH') {\n        //         data.series[i].name = 'TAM'\n        //     } else if (data.series[i].name === 'Non-WFH') {\n        //         data.series[i].name = 'Non-TAM'\n        //     }\n        // }\n        data.series[i].name = this.translatestreamingGamingWFHSubscriberOptionsChartLabelName(data.series[i].name);\n        this.data_Series_WHHGamming.push({\n          'name': data.series[i].name,\n          'data': this.data1_Active_WHHGamming\n        });\n      }\n      let seriesNames = [data.series[0].name, data.series[1].name];\n      let streamingGamingWFHSubscriberOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: this.stackedColumnColors,\n        xAxis: {\n          categories: data.categories,\n          crosshair: false,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          }),\n          title: {\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          reversedStacks: false,\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          title: {\n            style: Object.assign({}, this.styleOptions_legendtext),\n            text: this.language.Subscribers\n          },\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            style: Object.assign({}, this.styleOptions_legendtext),\n            formatter: function () {\n              if (seriesNames.length === 1) {\n                const total = data.series[0].data[this.x] + data.series[1].data[this.x];\n                return Highcharts.numberFormat(this.total / (total / 100), 1) + '%';\n              } else {\n                const itemTotal = data.series.find(s => !s.name.includes('Non')).data[this.x];\n                return Highcharts.numberFormat(itemTotal / (this.total / 100), 1) + '%';\n              }\n            }\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: {\n            allowPointSelect: true,\n            maxPointWidth: 16,\n            borderRadius: 0,\n            cursor: 'pointer',\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: {\n                color: null,\n                borderWidth: 2,\n                borderColor: 'Grey'\n              }\n            },\n            point: {\n              events: {}\n            },\n            marker: {\n              enabled: false\n            },\n            events: {\n              legendItemClick: function (e) {\n                if (this.visible) {\n                  seriesNames = seriesNames.filter(s => s != this.name);\n                } else {\n                  seriesNames.push(this.name);\n                }\n              }\n            }\n          },\n          column: {\n            stacking: 'normal',\n            minPointLength: 3,\n            borderWidth: 0\n            /* dataLabels: {\r\n                y: -15,\r\n                enabled: true,\r\n                useHTML: false,\r\n                allowOverlap: true,\r\n                // x: -20,\r\n                formatter: function () {\r\n                    if (!this.series.name.includes('Non')) {\r\n                        if (!data.totals[this.x]) {\r\n                            data.totals[this.x] = this.total;\r\n                        }\r\n                        return Highcharts.numberFormat(this.y / (data.totals[this.x] / 100), 1) + '%';\r\n                    }\r\n                },\r\n                style: {\r\n                    stacking: 'normal',\r\n                    ...this.styleOptions\r\n                }\r\n            }, */\n          }\n        },\n\n        tooltip: {\n          formatter: function () {\n            return ` ${this.key} ${that.language.Total}:  ${Highcharts.numberFormat(data.totals[this.key], 0, '', ',')}   <br/>\n                             <b>${this.series.name} : ${Highcharts.numberFormat(this.y, 0, '', ',')} ( ${(100 * this.y / (data.totals[this.key] == 0 ? 1 : data.totals[this.key])).toFixed(1)}% ) </b>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        series: this.data_Series_WHHGamming[0].data == undefined ? [] : this.data_Series_WHHGamming,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(streamingGamingWFHSubscriberOptions);\n    }\n    // DATA USAGE TRENDS\n    dataUsageTrendsOptions(data) {\n      for (var i = 0; i < data.series.length; i++) {\n        if (data.series[i].name === 'Total Usage(TB)') {\n          for (var j = 0; j < data.series[i].data.length; j++) {\n            data.series[i].data[j] = data.series[i].data[j] / 1024;\n          }\n          // if (sessionStorage.getItem('defaultLanguage') === 'fr') {\n          //     data.series[i].name = 'Utilisation totale (TB)'\n          // }\n          //  data.series[i].name = this.language['totalusageLabel'];\n        } else if (data.series[i].name === 'Streaming Usage(TB)') {\n          for (var j = 0; j < data.series[i].data.length; j++) {\n            data.series[i].data[j] = data.series[i].data[j] / 1024;\n          }\n          // data.series[i].name = this.language['streamingUsageLabel'];\n          // if (sessionStorage.getItem('defaultLanguage') === 'fr') {\n          //     data.series[i].name = 'Utilisation vidéo (TB)';\n          // }\n        }\n      }\n      //   console.log(data.series, \"after\")\n      let category = this.addMonthOnCategories(data.categories);\n      let dataUsageTrendsOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: this.stackedColumnColors,\n        xAxis: {\n          categories: category,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language.Usage,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_yaxis)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            }\n          },\n          style: Object.assign({}, this.styleOptions_yaxis)\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: Object.assign(Object.assign({}, this.linePlotOptions), {\n          series: {\n            marker: {\n              enabled: false\n            },\n            states: {\n              inactive: {\n                enabled: false\n              }\n            },\n            point: {\n              events: {}\n            }\n          }\n        }),\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name} <br/> \n                            <b>${data.categories[this.point.x]}: ${Highcharts.numberFormat(this.point.y, 2, '.', ',')} TB</b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        series: data.series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(dataUsageTrendsOptions);\n    }\n    // SUBSCRIBERS ACTIVITY TRENDS\n    subscriberActivityTrendsOptions(data) {\n      const that = this;\n      let category = this.addMonthOnCategories(data.categories);\n      let activitylineChartOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: this.stackedColumnColors,\n        xAxis: {\n          categories: category,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          // showEmpty: true,\n          allowDecimals: false,\n          title: {\n            text: this.language.Subscribers,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          }\n        },\n        legend: {\n          reversed: false,\n          align: 'center',\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name} <br/>  <b>${data.categories[this.point.x]}: ${Highcharts.numberFormat(this.point.y, 0, '', ',')} ${that.language.Subscribers} </b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.linePlotOptions), {\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            }\n          })\n        },\n        series: data.series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(activitylineChartOptions);\n    }\n    // DEVICE PER HOUSEHOLD\n    deviceperHouseHoldOptions(data, selected = {}) {\n      const that = this;\n      this.data_household_series = [];\n      // let toolTipText;\n      for (var i = 0; i < data.categories.length; i++) {\n        if (data.categories[i] == selected.tier) {\n          this.data_household_series.push({\n            'y': data.series[i],\n            borderColor: '#008000',\n            'selected': true\n          });\n        } else {\n          this.data_household_series.push({\n            'y': data.series[i]\n          });\n        }\n      }\n      /* if (sessionStorage.getItem('defaultLanguage') == 'fr') {\r\n          toolTipText = '<span x=\"3\" style=\"fill:#4c4c4c;\" y=\"15\">Systèmes<span>';\r\n      } else {\r\n          toolTipText = '<span x=\"3\" style=\"fill:#4c4c4c;\" y=\"15\">Devices<span>';\r\n      } */\n      let deviceperOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: ['#0027FF'],\n        xAxis: {\n          categories: data.categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions)\n          }),\n          title: {\n            useHTML: true,\n            //text: '<span x=\"3\" style=\"fill:#4c4c4c;\" y=\"15\">Devices<span>',\n            text: `<p class=\"giga-text\" id=\"giga\" style=\"font-size:14px !important;margin-top:20px;\">${this.language.devices}</p>`,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_xaxis),\n            align: 'middle',\n            margin: -15\n          }\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language.Subscribers,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_yaxis)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          }\n        },\n        legend: {\n          reversed: false,\n          align: 'left',\n          symbolHeight: .001,\n          symbolWidth: .001,\n          symbolRadius: .001,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: {\n            allowPointSelect: true,\n            maxPointWidth: 24,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            }\n          },\n          column: {\n            minPointLength: 3,\n            borderWidth: 0,\n            dataLabels: {\n              enabled: true,\n              useHTML: false,\n              allowOverlap: true,\n              x: 0,\n              formatter: function () {\n                return ` ${Highcharts.numberFormat(this.y * 100 / (data.totalSubs == 0 ? 1 : data.totalSubs), 1)}%`;\n              },\n              style: Object.assign({\n                stacking: 'normal'\n              }, this.styleOptions)\n            }\n          }\n        },\n        tooltip: {\n          formatter: function () {\n            return `${this.x} ${that.language['devices']} <br/> \n                            <b> ${Highcharts.numberFormat(this.point.y, 0, '', ',')}  ${that.language.Subscribers}  (${Highcharts.numberFormat(this.point.y * 100 / data.totalSubs, 1)}%)</b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        series: [{\n          name: '',\n          // borderRadiusTopLeft: 20,\n          // borderRadiusTopRight: 20,\n          // data: data.series\n          data: this.data_household_series\n        }],\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(deviceperOptions);\n    }\n    // SERVICES TAB\n    // SUSBSCRIBERS SERVICE BY TECH\n    serviceTierTechnologyOptions(data, selected = {}) {\n      const that = this;\n      // data.series.filter(arrayData => {\n      //     arrayData.data.filter((value, index) => {\n      //         if (value === 0) {\n      //             arrayData.data.splice(index, 1, null);\n      //         }\n      //     })\n      // })\n      this.data_Servicetier_series = [];\n      for (var i = 0; i < data.series.length; i++) {\n        this.tierAndTech_Service_Array = [];\n        for (var j = 0; j < data.series[i].data.length; j++) {\n          if (i == selected.indexS) {\n            if (j == selected.index) {\n              this.tierAndTech_Service_Array.push({\n                'y': data.series[i].data[j],\n                borderColor: '#008000',\n                'selected': true\n              });\n            } else {\n              this.tierAndTech_Service_Array.push({\n                'y': data.series[i].data[j]\n              });\n            }\n          } else {\n            this.tierAndTech_Service_Array.push({\n              'y': data.series[i].data[j]\n            });\n          }\n        }\n        // if (sessionStorage.getItem('defaultLanguage') == 'fr') {\n        //     if (data.series[i].name === 'Fiber') {\n        //         data.series[i].name = 'Fibre'\n        //     }\n        // }\n        data.series[i].name = data.series[i].name;\n        this.data_Servicetier_series.push({\n          'name': data.series[i].name,\n          'data': this.tierAndTech_Service_Array\n        });\n      }\n      let totalsubs;\n      totalsubs = this.marketingExploreCommonService.sumOfObjectValues(data.totals);\n      // let serviceTierTechnologyOptions = {\n      //     ...this.commonHighChartOptions,\n      //     colors: this.stackedAqiteColors,\n      //     chart: {\n      //         type: 'column',\n      //         style: {\n      //             ...this.styleOptions\n      //         },\n      //     },\n      //     xAxis: {\n      //         categories: data.categories,\n      //         labels: {\n      //             ...this.xAxisLabels,\n      //             style: {\n      //                 ...this.styleOptions_xaxis\n      //             },\n      //         },\n      //     },\n      //     legend: {\n      //         reversed: false,\n      //         itemStyle: {\n      //             ...this.styleOptions\n      //         }\n      //     },\n      //     tooltip: {\n      //         formatter: function () {\n      //             return this.series.xAxis.categories[this.point.x] + ' ' + 'Total' + ': ' + Highcharts.numberFormat(data.totals[this.key], 0, '', ',') +\n      //                 ' (' + Highcharts.numberFormat(data.totals[this.key] / (totalsubs / 100), 1) + '%' + ')<br>' +\n      //                 '<b>' + this.series.name + ': ' + Highcharts.numberFormat(this.point.y, 0, '', ',') + ' (' +\n      //                 Highcharts.numberFormat(this.point.y / (data.totals[this.key] / 100), 1) + '%)</b><br>';\n      //         },\n      //         style: {\n      //             ...this.styleOptions_tooltip\n      //         }\n      //     },\n      //     plotOptions: {\n      //         series: {\n      //             ...this.plotOptions,\n      //             allowPointSelect: true,\n      //             maxPointWidth: 24,\n      //             cursor: 'pointer',\n      //             point: {\n      //                 events: {}\n      //             },\n      //             states: {\n      //                 inactive: {\n      //                     enabled: false\n      //                 },\n      //                 select: {\n      //                     ...this.selectOptions,\n      //                 }\n      //             },\n      //         },\n      //         column: {\n      //             borderWidth: 0,\n      //             minPointLength: 3,\n      //         }\n      //     },\n      //     // series: data.series,\n      //     series: this.data_Servicetier_series,\n      //     yAxis: {\n      //         min: 0,\n      //         softMax: 1,\n      //         title: {\n      //             text: this.language.Subscribers,\n      //             style: {\n      //                 stacking: 'normal',\n      //                 ...this.styleOptions\n      //             },\n      //         },\n      //         labels:\n      //         {\n      //             formatter: function () {\n      //                 var label = this.axis.defaultLabelFormatter.call(this);\n      //                 // Use thousands separator for four-digit numbers too\n      //                 if (/^[0-9]{4,}$/.test(label)) {\n      //                     return Highcharts.numberFormat(this.value, 0);\n      //                 }\n      //                 return label;\n      //             },\n      //             style: {\n      //                 ...this.styleOptions_yaxis\n      //             },\n      //         },\n      //         gridLineColor: '#E6E6E6',\n      //         stackLabels: {\n      //             enabled: true,\n      //             allowOverlap: true,\n      //             formatter: function () {\n      //                 return Highcharts.numberFormat(this.total / (totalsubs / 100), 1) + '%';\n      //             },\n      //             style: {\n      //                 ...this.styleOptions\n      //             },\n      //         },\n      //         reversedStacks: false,\n      //     },\n      // };\n      let serviceTierTechnologyOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedAqiteColors,\n        chart: {\n          type: 'column',\n          inverted: false,\n          style: Object.assign({}, this.styleOptions),\n          events: {}\n        },\n        xAxis: {\n          categories: data.categories,\n          crosshair: true,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis),\n            rotation: -25\n          }),\n          title: {\n            useHTML: true,\n            text: `<p class=\"giga-text\" id=\"giga\" style=\"font-size:12px !important;margin-top:5px;\">${this.language.Usage}</p>`,\n            align: 'middle',\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          }\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          reversedStacks: false,\n          title: {\n            style: Object.assign({}, this.styleOptions_legendtext),\n            text: this.language.Subscribers\n          },\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            formatter: function () {\n              return Highcharts.numberFormat(this.total / (totalsubs / 100), 1) + '%';\n            },\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          }\n        },\n        tooltip: {\n          formatter: function () {\n            return this.series.xAxis.categories[this.point.x] + ' ' + `${that.language.Total}` + ': ' + Highcharts.numberFormat(data.totals[this.key], 0, '', ',') + ' (' + Highcharts.numberFormat(data.totals[this.key] / (totalsubs / 100), 1) + '%' + ')<br>' + '<b>' + this.series.name + ': ' + Highcharts.numberFormat(this.point.y, 0, '', ',') + ' (' + Highcharts.numberFormat(this.point.y / (data.totals[this.key] / 100), 1) + '%)</b><br>';\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        plotOptions: {\n          series: {\n            allowPointSelect: true,\n            maxPointWidth: 24,\n            borderRadius: 0,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            }\n          },\n          column: {\n            stacking: 'normal',\n            minPointLength: 3,\n            borderWidth: 0,\n            dataLabels: {\n              enabled: false\n            }\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        series: this.data_Servicetier_series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(serviceTierTechnologyOptions);\n    }\n    // HOUSEHOLD DEVICE TRENDS\n    houseHoldDeviceTrendsOptions(data) {\n      let category = this.addMonthOnCategories(data.categories);\n      let householdOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: this.stackedColumnColors,\n        xAxis: [{\n          categories: category,\n          crosshair: true,\n          labels: {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          }\n        }],\n        yAxis: [{\n          min: 0,\n          allowDecimals: false,\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: {\n              color: '#5ACFEA',\n              fontSize: '13px'\n            }\n          },\n          title: {\n            text: this.language.WiFi_Score,\n            style: {\n              color: '#5ACFEA',\n              fontSize: '12px'\n            }\n          },\n          opposite: true\n        }, {\n          min: 0,\n          allowDecimals: false,\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: {\n              color: '#0027FF',\n              fontSize: '13px'\n            }\n          },\n          title: {\n            style: {\n              color: '#0027FF',\n              fontSize: '12px'\n            },\n            text: this.language.Devices\n          }\n        }],\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name}<br/>\n                            <b>${data.categories[this.point.x]}: ${this.y}</b> `;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        legend: {\n          reversed: false,\n          align: 'center',\n          itemStyle: Object.assign({}, this.styleOptions_legendtext)\n        },\n        series: [{\n          name: this.language.Average_Home_Device_Count,\n          yAxis: 1,\n          data: data.numberOfDevices\n        }, {\n          name: this.language.WiFi_Score,\n          data: data.wifiScore\n        }],\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            cursor: 'pointer',\n            maxPointWidth: 24,\n            borderRadius: 0,\n            borderWidth: 0,\n            minPointLength: 3,\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            }\n          })\n        },\n        responsive: {\n          rules: [{\n            condition: {},\n            chartOptions: {\n              yAxis: [{\n                labels: {\n                  align: 'right',\n                  x: 15,\n                  y: 5\n                },\n                title: {\n                  x: 15\n                },\n                showLastLabel: true\n              }, {\n                labels: {\n                  align: 'left',\n                  x: -15,\n                  y: 5\n                },\n                title: {\n                  x: -15\n                },\n                showLastLabel: true\n              }, {\n                visible: false\n              }]\n            }\n          }]\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(householdOptions);\n    }\n    // CommandIQ Status\n    commandIQStatusOptions(data, yLabel, showLegend) {\n      let that = this;\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          },\n          plotBorderWidth: 1\n        },\n        colors: this.stackedAqiteColors,\n        title: {\n          text: null\n        },\n        xAxis: [{\n          min: 0,\n          gridLineWidth: 1,\n          categories: data.categories,\n          //tickInterval: 5,\n          tickmarkPlacement: 'on',\n          tickInterval: function () {\n            let sLength = data.series ? data.series.length : 0;\n            let xCategLength = data.categories ? data.categories.length : 0;\n            let xAxisLen = Math.floor(xCategLength / sLength);\n            let f = 1;\n            if (xCategLength <= 6) {\n              f = 1;\n            } else if (xCategLength > 6 && xCategLength < 13) {\n              f = 2;\n            } else {\n              f = Math.floor(xCategLength / 6) ? Math.floor(xCategLength / 6) : 1;\n            }\n            return f;\n          }(),\n          labels: {\n            rotation: -25\n          }\n          //crosshair: true,\n        }],\n        yAxis: [{\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: yLabel && this.language ? this.language[yLabel] : yLabel ? yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        lang: {\n          noData: that.language[\"No Data Available\"]\n        },\n        legend: {\n          symbol: 'square',\n          enabled: showLegend ? true : false\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true\n        },\n        series: [...data.series],\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            //pointPadding: 2, // Defaults to 0.1\n            groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            pointPlacement: 'on',\n            point: {\n              events: {}\n            }\n          },\n          states: {\n            inactive: {\n              enabled: false\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n          }]\n        }\n      });\n      return of(options);\n    }\n    commandIQStatus30recordOptions(data, yLabel, showLegend) {\n      let that = this;\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          },\n          plotBorderWidth: 1\n        },\n        colors: this.stackedAqiteColors,\n        title: {\n          text: null\n        },\n        xAxis: [{\n          min: 0,\n          gridLineWidth: 1,\n          categories: data.categories,\n          //tickInterval: 5,\n          tickmarkPlacement: 'on',\n          showLastLabel: true,\n          tickPositions: [0, 5, 10, 15, 20, 25, 29],\n          tickInterval: function () {\n            let sLength = data.series ? data.series.length : 0;\n            let xCategLength = data.categories ? data.categories.length : 0;\n            let xAxisLen = Math.floor(xCategLength / sLength);\n            let f = 1;\n            if (xCategLength <= 6) {\n              f = 1;\n            } else if (xCategLength > 6 && xCategLength < 13) {\n              f = 2;\n            } else {\n              f = Math.floor(xCategLength / 6) ? Math.floor(xCategLength / 6) : 1;\n            }\n            return f;\n          }(),\n          labels: {\n            rotation: -25\n          }\n          //crosshair: true,\n        }],\n        yAxis: [{\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: yLabel && this.language ? this.language[yLabel] : yLabel ? yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        lang: {\n          noData: that.language[\"No Data Available\"]\n        },\n        legend: {\n          symbol: 'square',\n          enabled: showLegend ? true : false\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true\n        },\n        series: [...data.series],\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            //pointPadding: 2, // Defaults to 0.1\n            groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            pointPlacement: 'on',\n            point: {\n              events: {}\n            }\n          },\n          states: {\n            inactive: {\n              enabled: false\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n          }]\n        }\n      });\n      return of(options);\n    }\n    // SERVICE MODULE ADOPTION RATE\n    serviceModuleAdoptionRateOptions(data) {\n      let chartSeries = data && data.series.map(obj => Object.assign({}, obj, {\n        name: constants.ADOPTION_MODULE_RENAME[obj.name]\n      }));\n      let adoptionOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: this.stackedAqiteColors,\n        xAxis: {\n          categories: this.addMonthOnCategories(data.categories),\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language.Subscribers,\n            style: Object.assign({}, this.styleOptions_legendtext)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          }\n        },\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name}     <br/> \n                            <b>${data.categories[this.point.x]}: ${Highcharts.numberFormat(this.point.y, 0, '', ',')}</b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.linePlotOptions), {\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            }\n          })\n        },\n        series: chartSeries,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(adoptionOptions);\n    }\n    //SYSTEM MODEL\n    getCommonSubscribersChartOptions(cData, yLabel, showLegend) {\n      let last_index = cData.categories.length - 1;\n      if (cData.categories.length == 30) {\n        var val = last_index + 1;\n        cData.categories[val] = cData.categories[last_index];\n        //  cData.series[0].data[val] = cData.series[0].data[last_index];\n      }\n\n      if (cData.series[0].name == \"\") {\n        cData.series = [];\n      }\n      let that = this;\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          },\n          plotBorderWidth: 1\n        },\n        colors: this.stackedAqiteColors,\n        title: {\n          text: null\n        },\n        xAxis: [{\n          min: 0,\n          gridLineWidth: 1,\n          categories: cData.categories,\n          //tickInterval: 5,\n          tickmarkPlacement: 'on',\n          tickInterval: function () {\n            let sLength = cData.series ? cData.series.length : 0;\n            let xCategLength = cData.categories ? cData.categories.length : 0;\n            let xAxisLen = Math.floor(xCategLength / sLength);\n            let f = 1;\n            if (xCategLength <= 6) {\n              f = 1;\n            } else if (xCategLength > 6 && xCategLength < 13) {\n              f = 2;\n            } else {\n              f = Math.floor(xCategLength / 6) ? Math.floor(xCategLength / 6) : 1;\n            }\n            return f;\n          }(),\n          //crosshair: true,\n          labels: {\n            rotation: -25\n          }\n        }],\n        yAxis: [{\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: yLabel && this.language ? this.language[yLabel] : yLabel ? yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        lang: {\n          noData: that.language[\"No Data Available\"]\n        },\n        legend: {\n          symbol: 'square',\n          enabled: showLegend ? true : false\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true\n        },\n        series: [...cData.series],\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            //pointPadding: 2, // Defaults to 0.1\n            groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            pointPlacement: 'on',\n            point: {\n              events: {}\n            }\n          },\n          states: {\n            inactive: {\n              enabled: false\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n          }]\n        }\n      });\n      return of(options);\n    }\n    getCommonSubscribersChartOptionsSystemMyModel(cData, yLabel, showLegend) {\n      let that = this;\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          },\n          plotBorderWidth: 1\n        },\n        colors: this.stackedAqiteColors,\n        title: {\n          text: null\n        },\n        xAxis: [{\n          min: 0,\n          gridLineWidth: 1,\n          categories: cData.categories,\n          //tickInterval: 5,\n          tickmarkPlacement: 'on',\n          tickInterval: function () {\n            let sLength = cData.series ? cData.series.length : 0;\n            let xCategLength = cData.categories ? cData.categories.length : 0;\n            let xAxisLen = Math.floor(xCategLength / sLength);\n            let f = 1;\n            if (xCategLength <= 6) {\n              f = 1;\n            } else if (xCategLength > 6 && xCategLength < 13) {\n              f = 2;\n            } else {\n              f = Math.floor(xCategLength / 6) ? Math.floor(xCategLength / 6) : 1;\n            }\n            return f;\n          }(),\n          //crosshair: true,\n          labels: {\n            rotation: -25\n          }\n        }],\n        yAxis: [{\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: yLabel && this.language ? this.language[yLabel] : yLabel ? yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        lang: {\n          noData: that.language[\"No Data Available\"]\n        },\n        legend: {\n          symbol: 'square',\n          enabled: showLegend ? true : false\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true,\n          outside: true\n        },\n        series: [...cData.series],\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            //pointPadding: 2, // Defaults to 0.1\n            groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            pointPlacement: 'on',\n            point: {\n              events: {}\n            }\n          },\n          states: {\n            inactive: {\n              enabled: false\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n          }]\n        }\n      });\n      return of(options);\n    }\n    getCommonSubscribersChartOptionsfor30records(cData, yLabel, showLegend, chartName) {\n      let that = this;\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          },\n          plotBorderWidth: 1\n        },\n        colors: this.stackedAqiteColors,\n        title: {\n          text: null\n        },\n        xAxis: [{\n          min: 0,\n          gridLineWidth: 1,\n          categories: cData.categories,\n          //tickInterval: 5,\n          tickmarkPlacement: 'on',\n          showLastLabel: true,\n          tickPositions: [0, 5, 10, 15, 20, 25, 29],\n          tickInterval: function () {\n            let sLength = cData.series ? cData.series.length : 0;\n            let xCategLength = cData.categories ? cData.categories.length : 0;\n            let xAxisLen = Math.floor(xCategLength / sLength);\n            let f = 1;\n            if (xCategLength <= 6) {\n              f = 1;\n            } else if (xCategLength > 6 && xCategLength < 13) {\n              f = 2;\n            } else {\n              f = Math.floor(xCategLength / 6) ? Math.floor(xCategLength / 6) : 1;\n            }\n            return f;\n          }(),\n          //crosshair: true,\n          labels: {\n            rotation: -25\n          }\n        }],\n        yAxis: [{\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: yLabel && this.language ? this.language[yLabel] : yLabel ? yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        lang: {\n          noData: that.language[\"No Data Available\"]\n        },\n        legend: {\n          symbol: 'square',\n          enabled: showLegend ? true : false\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true,\n          outside: true\n        },\n        series: [...cData.series],\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            //pointPadding: 2, // Defaults to 0.1\n            groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            pointPlacement: 'on',\n            point: {\n              events: {}\n            }\n          },\n          states: {\n            inactive: {\n              enabled: false\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n          }]\n        }\n      });\n      return of(options);\n    }\n    // WIFI DEVICE CATEGORY TRENDS\n    wifiDeviceCategoryTrendsOptions(data) {\n      let wifiTrendOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        color: this.stackedAqiteColors,\n        xAxis: {\n          categories: this.addMonthOnCategories(data.categories),\n          crosshair: true,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        yAxis: {\n          min: 0,\n          allowDecimals: false,\n          title: {\n            text: this.language.Devices,\n            style: Object.assign({}, this.styleOptions_legendtext)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.linePlotOptions), {\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            }\n          })\n        },\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name}     <br/> \n                            <b>${data.categories[this.point.x]}: ${Highcharts.numberFormat(this.point.y, 0, '', ',')}</b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        series: data.series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(wifiTrendOptions);\n    }\n    // BLOCK THREATS INSIGHTS\n    blockedThreatsInsightsOptions(result, selected = {}) {\n      let data = [];\n      result && result.map(item => {\n        data.push({\n          name: constants.THREATS_RENAME[item[0]],\n          realName: item[0],\n          y: item[1]\n        });\n      });\n      this.data_PieBlock_series = [];\n      for (var i = 0; i < data.length; i++) {\n        if (data[i].realName == selected.tech) {\n          this.data_PieBlock_series.push({\n            'name': data[i].name,\n            'realName': data[i].realName,\n            'y': data[i].y,\n            borderColor: '#008000',\n            'selected': true,\n            'sliced': true\n          });\n        } else {\n          this.data_PieBlock_series.push({\n            'name': data[i].name,\n            'realName': data[i].realName,\n            'y': data[i].y\n          });\n        }\n      }\n      let usageByApplicationOptions = {\n        colors: this.stackedColumnColors,\n        chart: {\n          type: 'pie',\n          style: Object.assign({}, this.styleOptions)\n        },\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        accessibility: {\n          announceNewData: {\n            enabled: true\n          },\n          point: {\n            valueSuffix: '%'\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions_legendtext)\n        },\n        plotOptions: {\n          series: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            },\n            dataLabels: {\n              enabled: true,\n              format: '{point.name}'\n            }\n          },\n          pie: {\n            size: '100%',\n            allowPointSelect: true,\n            cursor: 'pointer',\n            dataLabels: {\n              enabled: true,\n              format: '{point.name}',\n              //useHTML: true,\n              crop: false,\n              distance: 10,\n              overflow: \"visible\",\n              style: {\n                width: '100px',\n                color: '#4c4c4c',\n                fontSize: '12px'\n              }\n            }\n          }\n        },\n        tooltip: {\n          headerFormat: '{series.name}',\n          pointFormat: '{point.key}<br><b>{point.name}: {point.percentage:.1f}%</b><br><b>{point.y}</b>',\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        series: [{\n          name: this.language.BlockedThreats_ToolTip,\n          colorByPoint: true,\n          data: this.data_PieBlock_series\n        }],\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      };\n      return of(usageByApplicationOptions);\n    }\n    // APPLICATIONS TAB\n    // USAGE BY APP && AQUISITION INLINE CHART\n    usageByApplicationOptions(result, selected = {}) {\n      const that = this;\n      this.data_Pie_series = [];\n      for (var i = 0; i < result.length; i++) {\n        if (result[i].name == selected.tech) {\n          this.data_Pie_series.push({\n            'name': result[i].name,\n            'y': result[i].y,\n            borderColor: '#008000',\n            'selected': true,\n            'sliced': true\n          });\n        } else {\n          this.data_Pie_series.push({\n            'name': result[i].name,\n            'y': result[i].y\n          });\n        }\n      }\n      let percentage = this.marketingExploreCommonService.arraysObjectsPercentageCalculator;\n      let usageByApplicationOptions = {\n        colors: this.stackedColumnColors,\n        chart: {\n          type: 'pie',\n          style: Object.assign({}, this.styleOptions)\n        },\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        accessibility: {\n          announceNewData: {\n            enabled: true\n          },\n          point: {\n            valueSuffix: '%'\n          }\n        },\n        plotOptions: {\n          series: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            },\n            dataLabels: {\n              enabled: true,\n              format: '{point.name}'\n            }\n          },\n          pie: {\n            size: '80%',\n            allowPointSelect: true,\n            cursor: 'pointer',\n            borderWidth: 0,\n            dataLabels: {\n              enabled: true,\n              format: '{point.name}',\n              //useHTML: true,\n              crop: false,\n              distance: 2,\n              overflow: \"visible\",\n              style: Object.assign({\n                width: '70px',\n                height: '100px'\n              }, this.styleOptions_usage_application)\n            }\n          }\n        },\n        tooltip: {\n          opacity: '1',\n          formatter: function () {\n            let arrayofUsage = [];\n            result.forEach(el => {\n              arrayofUsage.push(+el.originalValue);\n            });\n            // let unscalled = true;\n            let scaleUnit = 'TB';\n            let usage = this.point.y;\n            usage = usage / 1024;\n            // if (usage < 100) {\n            //     scaleUnit = 'GB';\n            //     unscalled = false;\n            // }\n            return `${that.language.applicationGroup} <br/>\n                            <b>${result[this.point.x].name}: ${percentage(arrayofUsage, result[this.point.x].originalValue, 1)}% </b> <br/> \n                            <b> ${Highcharts.numberFormat(usage, 2, '.', ',')} ${scaleUnit}</b>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        legend: {\n          reversed: false,\n          align: 'center',\n          itemStyle: {\n            fontSize: '10px'\n          }\n        },\n        series: [{\n          // name: \"\",\n          colorByPoint: true,\n          // data: result\n          data: this.data_Pie_series\n        }],\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      };\n      return of(usageByApplicationOptions);\n    }\n    usageByAppInsightOptions(result) {\n      let that = this;\n      // debugger;\n      // if (1) {\n      //     result = [\n      //         {\n      //             name: 'Chrome',\n      //             y: 61.41,\n      //             sliced: true,\n      //             selected: true\n      //         }, {\n      //             name: 'Internet ExplorerInternet ExplorerInternet ExplorerInternet Explorer',\n      //             y: 11.84\n      //         }, {\n      //             name: 'FirefoxFirefoxFirefoxFirefoxFirefoxFirefox',\n      //             y: 10.85\n      //         }, {\n      //             name: 'Edge',\n      //             y: 4.67\n      //         }, {\n      //             name: 'Safari',\n      //             y: 4.18\n      //         }, {\n      //             name: 'Sogou Explorer',\n      //             y: 1.64\n      //         }, {\n      //             name: 'Opera',\n      //             y: 1.6\n      //         }, {\n      //             name: 'QQ',\n      //             y: 1.2\n      //         }, {\n      //             name: 'Other',\n      //             y: 2.61\n      //         }]\n      // }\n      let percentage = this.marketingExploreCommonService.arraysObjectsPercentageCalculator;\n      let usageByApplicationOptions = {\n        colors: this.stackedColumnColors,\n        chart: {\n          type: 'pie',\n          style: Object.assign({}, this.styleOptions)\n        },\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        accessibility: {\n          announceNewData: {\n            enabled: true\n          },\n          point: {\n            valueSuffix: '%'\n          }\n        },\n        plotOptions: {\n          series: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            },\n            dataLabels: {\n              enabled: true,\n              format: '{point.name}'\n            }\n          },\n          pie: {\n            size: '55%',\n            allowPointSelect: true,\n            cursor: 'pointer',\n            borderWidth: 0,\n            dataLabels: {\n              enabled: true,\n              format: '{point.name}',\n              //useHTML: true,\n              // crop: false,\n              distance: 2,\n              overflow: \"visible\",\n              style: Object.assign({\n                width: '70px',\n                height: '150px'\n              }, this.styleOptions_usage_insights)\n            }\n          }\n        },\n        tooltip: {\n          opacity: '1',\n          formatter: function () {\n            let arrayofUsage = [];\n            result.forEach(el => {\n              arrayofUsage.push(+el.originalValue);\n            });\n            // let unscalled = true;\n            let scaleUnit = 'TB';\n            let usage = this.point.y;\n            usage = usage / 1024;\n            // if (usage < 100) {\n            //     scaleUnit = 'GB';\n            //     unscalled = false;\n            // }\n            // console.log(percentage(arrayofUsage, result[this.point.x].originalValue));\n            // console.log(result[this.point.x].originalValue);\n            // console.log(arrayofUsage);\n            var data = percentage(arrayofUsage, result[this.point.x].originalValue);\n            if (data == \"NaN\" || data == \"\" || data == undefined) {\n              data = \"0\";\n            }\n            return `${that.language['applicationGroup']}<br/>\n                            <b>${result[this.point.x].name}: ${data}% </b> <br/> \n                            <b> ${Highcharts.numberFormat(usage, 2, '.', ',')} ${scaleUnit}</b>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        legend: {\n          reversed: false,\n          align: 'center',\n          itemStyle: {\n            fontSize: '10px'\n          }\n        },\n        series: [{\n          // name: \"\",\n          colorByPoint: true,\n          data: result\n          // data: [{\n          //     name: 'Chrome',\n          //     y: 61.41,\n          //     sliced: true,\n          //     selected: true\n          // }, {\n          //     name: 'Internet ExplorerInternet ExplorerInternet ExplorerInternet Explorer',\n          //     y: 11.84\n          // }, {\n          //     name: 'FirefoxFirefoxFirefoxFirefoxFirefoxFirefox',\n          //     y: 10.85\n          // }, {\n          //     name: 'Edge',\n          //     y: 4.67\n          // }, {\n          //     name: 'Safari',\n          //     y: 4.18\n          // }, {\n          //     name: 'Sogou Explorer',\n          //     y: 1.64\n          // }, {\n          //     name: 'Opera',\n          //     y: 1.6\n          // }, {\n          //     name: 'QQ',\n          //     y: 1.2\n          // }, {\n          //     name: 'Other',\n          //     y: 2.61\n          // }]\n        }],\n\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      };\n      return of(usageByApplicationOptions);\n    }\n    // SOCIAL CHANNEL HEAT MAP\n    SocialChannelHeatMapOptions(data) {\n      const that = this;\n      let heatmapChartOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          plotBorderWidth: 1,\n          style: Object.assign({}, this.styleOptions)\n        },\n        className: 'heat-map',\n        legend: {\n          enabled: false,\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: data.xcategories,\n          type: 'datetime',\n          labels: {\n            autoRotationLimit: 80,\n            style: Object.assign({}, this.styleOptions_xaxis)\n          },\n          // dateTimeLabelFormats: {\n          //     day: '%I %p',\n          //     hour: '%I %p',\n          //     minute: '%I:%M %p'\n          // },\n          title: {\n            useHTML: true,\n            text: `<p class=\"gmt-text gmttext-app-tz\" id=\"gmt-text\">Time <span>(${this.timezoneCreator()})</span></p>`,\n            align: 'left',\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_legendtext)\n          }\n        },\n        yAxis: {\n          categories: data.ycategories,\n          title: null,\n          reversed: true,\n          labels: {\n            align: 'left',\n            reserveSpace: true,\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          style: Object.assign({\n            stacking: 'normal'\n          }, this.styleOptions)\n        },\n        colorAxis: {\n          min: 0,\n          max: 100,\n          stops: [[0, '#fefefe'], [0.01, '#fafcfd'], [0.10, '#dcebf3'], [0.11, '#daeaf2'], [0.20, '#c7dbe9'], [0.21, '#d0dee8'], [0.30, '#b4cce0'], [0.31, '#b0c9df'], [0.40, '#a0bdd7'], [0.41, '#aec3d9'], [0.49, '#6984ba'], [0.50, '#f3df8f'], [0.51, '#f0e0a3'], [0.60, '#e9ba79'], [0.61, '#e9b672'], [0.70, '#df9257'], [0.71, '#de8f55'], [0.80, '#ce7a50'], [0.81, '#ca6a3a'], [0.90, '#b84822'], [0.99, '#b74620'], [1, '#b74620']]\n        },\n        tooltip: {\n          formatter: function () {\n            return `<b> ${this.series.yAxis.categories[this.point.y]}<b> <br/> \n                           ${that.language.hours}  <b> ${this.series.xAxis.categories[this.point.x]} - ${this.series.xAxis.categories[this.point.x + 1]}</b> <br/>  \n                            <b> ${this.point.value}% </b> ${that.language.OfSubscribers}  `;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        series: [{\n          type: 'heatmap',\n          animation: {\n            duration: 1000\n          },\n          data: data.heatmapdata,\n          dataLabels: {\n            enabled: false\n          }\n        }],\n        plotOptions: {\n          series: {\n            point: {\n              events: {}\n            }\n          }\n        }\n      });\n      return of(heatmapChartOptions);\n    }\n    // SOCIAL CHANNEL HEAT MAP\n    SocialChannelHeatMapHomeOptions(data) {\n      let that = this;\n      let heatmapChartOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          plotBorderWidth: 1,\n          style: Object.assign({}, this.styleOptions)\n        },\n        className: 'heat-map',\n        legend: {\n          enabled: false,\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: data.xcategories,\n          type: 'datetime',\n          labels: {\n            autoRotationLimit: 80,\n            style: Object.assign({}, this.styleOptions_xaxis)\n          },\n          // dateTimeLabelFormats: {\n          //     day: '%I %p',\n          //     hour: '%I %p',\n          //     minute: '%I:%M %p'\n          // },\n          title: {\n            useHTML: true,\n            text: `<p class=\"gmt-text gmttext-home-tz\" id=\"gmt-text\">Time <span>(${this.timezoneCreator()})</span></p>`,\n            align: 'left',\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_legendtext)\n          }\n        },\n        yAxis: {\n          categories: data.ycategories,\n          title: null,\n          reversed: true,\n          labels: {\n            align: 'left',\n            reserveSpace: true,\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          style: Object.assign({\n            stacking: 'normal'\n          }, this.styleOptions)\n        },\n        colorAxis: {\n          min: 0,\n          max: 100,\n          stops: [[0, '#fefefe'], [0.01, '#fafcfd'], [0.10, '#dcebf3'], [0.11, '#daeaf2'], [0.20, '#c7dbe9'], [0.21, '#d0dee8'], [0.30, '#b4cce0'], [0.31, '#b0c9df'], [0.40, '#a0bdd7'], [0.41, '#aec3d9'], [0.49, '#6984ba'], [0.50, '#f3df8f'], [0.51, '#f0e0a3'], [0.60, '#e9ba79'], [0.61, '#e9b672'], [0.70, '#df9257'], [0.71, '#de8f55'], [0.80, '#ce7a50'], [0.81, '#ca6a3a'], [0.90, '#b84822'], [0.99, '#b74620'], [1, '#b74620']]\n        },\n        tooltip: {\n          formatter: function () {\n            return `<b> ${this.series.yAxis.categories[this.point.y]}<b> <br/> \n                            ${that.language['hours']}  <b> ${this.series.xAxis.categories[this.point.x]} - ${this.series.xAxis.categories[this.point.x + 1]}</b> <br/>  \n                            <b> ${this.point.value}% </b> of ${that.language['Subscribers']}  `;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        series: [{\n          type: 'heatmap',\n          animation: {\n            duration: 1000\n          },\n          data: data.heatmapdata,\n          dataLabels: {\n            enabled: false\n          }\n        }],\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        plotOptions: {\n          series: {\n            point: {\n              events: {}\n            }\n          }\n        }\n      });\n      return of(heatmapChartOptions);\n    }\n    // CHURN RATE INSIGHTS\n    churnRateInsightsOptions(data, selected = {}) {\n      const that = this;\n      this.data_Series_ChurnInsightRate = [];\n      for (var i = 0; i < data.series.length; i++) {\n        this.data1_Active_ChurnInsightRate = [];\n        for (var j = 0; j < data.series[i].data.length; j++) {\n          // if(data.series[i].data[j]==selected.yValue){    \n          if (i == selected.indexS) {\n            if (j == selected.index) {\n              this.data1_Active_ChurnInsightRate.push({\n                'y': data.series[i].data[j],\n                borderColor: '#008000',\n                'selected': true\n              });\n            } else {\n              this.data1_Active_ChurnInsightRate.push({\n                'y': data.series[i].data[j]\n              });\n            }\n          } else {\n            this.data1_Active_ChurnInsightRate.push({\n              'y': data.series[i].data[j]\n            });\n          }\n        }\n        this.data_Series_ChurnInsightRate.push({\n          'name': data.series[i].name,\n          'data': this.data1_Active_ChurnInsightRate\n        });\n      }\n      let category = this.addMonthOnCategories(data.categories);\n      let churnRateInsightsOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedAqiteColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: category,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        tooltip: {\n          formatter: function () {\n            let percent = data.categoryExistingTotal[this.point.x] != 0 ? +Highcharts.numberFormat(data.categoryFeatureTotal[this.point.x] / data.categoryExistingTotal[this.point.x] * 100, 2) + '%' : '';\n            let percent_final = percent != '' ? percent : +'0.00' + '%';\n            return this.series.xAxis.categories[this.point.x] + ', ' + this.series.name + ', ' + percent_final + '<br><b>' + `${that.language.churnedsub}` + ': ' + Highcharts.numberFormat(this.point.y, 0, '', ',') + '</b><br>' + '<b>' + `${that.language.existingsub}` + ':' + Highcharts.numberFormat(data.totalObj[this.series.name][this.point.index], 0, '', ',') + '</b><br>';\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            allowPointSelect: true,\n            maxPointWidth: 16,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            }\n          }),\n          column: {\n            borderWidth: 0,\n            minPointLength: 3\n          }\n        },\n        // series: data.series,\n        series: this.data_Series_ChurnInsightRate,\n        yAxis: {\n          min: 0,\n          // softMax: 1,\n          softMax: 10,\n          title: {\n            text: this.language.Subscribers,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          },\n          labels: {\n            formatter: function () {\n              return this.value.toFixed(0) >= 1000 ? this.value.toFixed(0) / 1000 + 'K' : this.value.toFixed(0);\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          gridLineColor: '#E6E6E6',\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            formatter: function () {\n              let percent = data.categoryExistingTotal[this.x] != 0 ? Highcharts.numberFormat(data.categoryFeatureTotal[this.x] / data.categoryExistingTotal[this.x] * 100, 2) + '%' : '0.00' + '%';\n              // let percent_final = percent != '' ? percent : ' (' + 0.0 + '%)';\n              return percent;\n            },\n            style: Object.assign({}, this.styleOptions)\n          },\n          reversedStacks: false\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(churnRateInsightsOptions);\n    }\n    // CHURN RATE INSIGHTS INLINE CHARTS\n    churnRateSubscriberUsageOptions(data) {\n      let categories = this.addMonthOnCategories(data.categories);\n      let streamingOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedColumnColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          crosshair: true,\n          categories: categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions)\n          })\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          labels: {\n            formatter: function () {\n              return this.value.toFixed(0) >= 1000 ? this.value.toFixed(0) / 1000 + 'K' : this.value.toFixed(0);\n            },\n            style: Object.assign({}, this.styleOptions)\n          },\n          title: {\n            text: '',\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          },\n          stackLabels: {\n            enabled: true,\n            formatter: function () {\n              return Highcharts.numberFormat(this.total, 1, '.', ',') + 'GB';\n            },\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            allowPointSelect: true,\n            maxPointWidth: 24,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            }\n          }),\n          column: {\n            borderWidth: 0,\n            minPointLength: 3\n          }\n        },\n        tooltip: {\n          valueDecimals: 2,\n          crosshairs: true,\n          headerFormat: '<span>{point.key}</span><div>',\n          pointFormat: '<div><span style=\"color:{series.color};padding:0\"></span>' + '<span style=\"padding:0\">{series.name}: <b>{point.y} GB</b></span> <br></div>',\n          footerFormat: '</div>',\n          shared: true,\n          useHTML: true,\n          style: Object.assign({}, this.styleOptions)\n        },\n        series: data.series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(streamingOptions);\n    }\n    churnRateServiceLimitOptions(data) {\n      let categories = this.addMonthOnCategories(data.categories);\n      let serviceOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: ['#5ACFEA', '#0027FF'],\n        xAxis: {\n          categories: categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        yAxis: {\n          min: 0,\n          allowDecimals: false,\n          softMax: 1,\n          title: {\n            text: '',\n            style: Object.assign({}, this.styleOptions_legendtext)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.linePlotOptions), {\n            marker: {\n              enabled: true\n            },\n            point: {\n              events: {}\n            }\n          })\n        },\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name} <br/> \n                            <b>${this.x}: ${this.point.y} </b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions)\n        },\n        series: data.series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(serviceOptions);\n    }\n    subscriberCompetitorOptions(data) {\n      let categories = this.addMonthOnCategories(data.categories);\n      let subscriberCompetitorChartOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedColumnColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions)\n          })\n        },\n        yAxis: {\n          allowDecimals: false,\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          },\n          min: 0,\n          softMax: 1,\n          title: {\n            text: '',\n            style: Object.assign({}, this.styleOptions)\n          },\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            formatter: function () {\n              return ``;\n            },\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          align: 'center',\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        tooltip: {\n          crosshairs: true,\n          headerFormat: '<span>{point.key}</span><div>',\n          pointFormat: '<div><span style=\"color:{series.color};padding:0\"></span>' + '<span style=\"padding:0\">{series.name}: <b>{point.y} minutes</b></span><br></div>',\n          footerFormat: '</div>',\n          shared: true,\n          useHTML: true,\n          style: Object.assign({}, this.styleOptions)\n        },\n        series: data.series,\n        plotOptions: {\n          column: {\n            minPointLength: 3,\n            borderWidth: 0\n          },\n          series: {\n            min: 0,\n            stacking: null,\n            maxPointWidth: 16,\n            borderRadius: 0,\n            point: {\n              events: {}\n            }\n          }\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(subscriberCompetitorChartOptions);\n    }\n    serviceTierOptions(data) {\n      let categories = this.addMonthOnCategories(data.categories);\n      var that = this;\n      let servicetierOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedColumnColors,\n        chart: {\n          type: 'scatter',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: categories\n        },\n        yAxis: {\n          min: 0,\n          allowDecimals: false,\n          labels: {\n            style: Object.assign({}, this.styleOptions)\n          },\n          title: {\n            text: '',\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          align: 'center',\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        tooltip: {\n          formatter: function () {\n            var tooltip = that.serviceTierTooltipInfoGenerate(this.point.x, data);\n            tooltip = tooltip ? tooltip : '<b>${this.x}: </b>';\n            return `${this.series.name} <br/> \n                            ${tooltip} <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          marker: {\n            enabled: true\n          },\n          column: {\n            minPointLength: 3,\n            borderWidth: 0\n          }\n        },\n        series: data.series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(servicetierOptions);\n    }\n    // AQUISITION\n    // NEW SUBSCRIBERS TIER\n    newsubscribersTierTechChartOptions(data, selected = {}) {\n      const that = this;\n      // data.series.filter(arrayData => {\n      //     arrayData.data.filter((value, index) => {\n      //         if (value === 0) {\n      //             arrayData.data.splice(index, 1, null);\n      //         }\n      //     })\n      // })\n      this.data_tier_series = [];\n      for (var i = 0; i < data.series.length; i++) {\n        this.tier_Service_Array = [];\n        for (var j = 0; j < data.series[i].data.length; j++) {\n          if (i == selected.indexS) {\n            if (j == selected.index) {\n              this.tier_Service_Array.push({\n                'y': data.series[i].data[j],\n                borderColor: '#008000',\n                'selected': true\n              });\n            } else {\n              this.tier_Service_Array.push({\n                'y': data.series[i].data[j]\n              });\n            }\n          } else {\n            this.tier_Service_Array.push({\n              'y': data.series[i].data[j]\n            });\n          }\n        }\n        // if (sessionStorage.getItem('defaultLanguage') == 'fr') {\n        //     if (data.series[i].name === 'Fiber') {\n        //         data.series[i].name = 'Fibre'\n        //     }\n        // }\n        data.series[i].name = data.series[i].name;\n        this.data_tier_series.push({\n          'name': data.series[i].name,\n          'data': this.tier_Service_Array\n        });\n      }\n      let totalsubs;\n      totalsubs = this.marketingExploreCommonService.sumOfObjectValues(data.totals);\n      let newsubscribercolumnChartOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedAqiteColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: data.categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        yAxis: {\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          reversedStacks: false,\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language.Subscribers,\n            style: Object.assign({\n              fontWeight: 'normal'\n            }, this.styleOptions_legendtext)\n          },\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            formatter: function () {\n              return Highcharts.numberFormat(this.total, 0, '', ',');\n            },\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          align: 'center',\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        tooltip: {\n          formatter: function () {\n            return this.series.xAxis.categories[this.point.x] + ' ' + ` ${that.language.Total}` + ': ' + Highcharts.numberFormat(data.totals[this.key], 0, '', ',') + ' (' + Highcharts.numberFormat(data.totals[this.key] / (totalsubs / 100), 1) + '%' + ')<br>' + '<b>' + this.series.name + ': ' + Highcharts.numberFormat(this.point.y, 0, '', ',') + ' (' + Highcharts.numberFormat(this.point.y / (totalsubs / 100), 1) + '%)</b><br>';\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        series: this.data_tier_series,\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            allowPointSelect: true,\n            maxPointWidth: 24,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            }\n          }),\n          column: {\n            minPointLength: 3,\n            borderWidth: 0\n          }\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(newsubscribercolumnChartOptions);\n    }\n    // AQUISITION RATES INSIGHTS\n    acquisitionRateInsightsOptions(data, selected = {}) {\n      const that = this;\n      this.data_RateInsight_series = [];\n      for (var i = 0; i < data.series.length; i++) {\n        this.data1_acquisation_rate = [];\n        for (var j = 0; j < data.series[i].data.length; j++) {\n          // if(data.series[i].data[j]==selected.yValue){    \n          if (i == selected.indexS) {\n            if (j == selected.index) {\n              this.data1_acquisation_rate.push({\n                'y': data.series[i].data[j],\n                borderColor: '#008000',\n                'selected': true\n              });\n            } else {\n              this.data1_acquisation_rate.push({\n                'y': data.series[i].data[j]\n              });\n            }\n          } else {\n            this.data1_acquisation_rate.push({\n              'y': data.series[i].data[j]\n            });\n          }\n        }\n        this.data_RateInsight_series.push({\n          'name': data.series[i].name,\n          'data': this.data1_acquisation_rate\n        });\n      }\n      let category = this.addMonthOnCategories(data.categories);\n      let acquitionrateOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedAqiteColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: category,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          reversedStacks: false,\n          labels: {\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          title: {\n            text: this.language.Subscribers,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions),\n            labels: {\n              formatter: function () {\n                var label = this.axis.defaultLabelFormatter.call(this);\n                // Use thousands separator for four-digit numbers too\n                if (/^[0-9]{4,}$/.test(label)) {\n                  return Highcharts.numberFormat(this.value, 0);\n                }\n                return label;\n              },\n              style: Object.assign({}, this.styleOptions_yaxis)\n            }\n          },\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            formatter: function () {\n              return Highcharts.numberFormat(this.total, 0, '', ',');\n            },\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          }\n        },\n        legend: {\n          // width: 300,\n          fontSize: '10px',\n          reversed: false,\n          align: 'center',\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        tooltip: {\n          formatter: function () {\n            return ` ${category[this.point.x]}, ${this.series.name} <br/>                             <b> ${that.language.acquiredsub}:   ${Highcharts.numberFormat(this.point.y, 0, '', ',')}</b> <br/> \n                            <b${that.language.Total} ${that.language.acquiredsub}:  ${Highcharts.numberFormat(data.categoryFeatureTotal[this.point.x], 0, '', ',')} </b> <br/> \n                            <b> ${that.language.existingsub}:  ${Highcharts.numberFormat(data.totalObj[this.series.name][this.point.x], 0, '', ',')}  </b>    `;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            allowPointSelect: true,\n            maxPointWidth: 16,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            }\n          }),\n          column: {\n            minPointLength: 3,\n            borderWidth: 0\n          }\n        },\n        series: this.data_RateInsight_series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(acquitionrateOptions);\n    }\n    // AQUISITION REVENUE INSIGHTS\n    acquisitionRevenueInsightsOptions(data, selected = {}) {\n      this.data_Revenue_series = [];\n      for (var i = 0; i < data.series.length; i++) {\n        this.data1_Acquisation_Revenue = [];\n        for (var j = 0; j < data.series[i].data.length; j++) {\n          // if(data.series[i].data[j]==selected.yValue){    \n          if (i == selected.indexS) {\n            if (j == selected.index) {\n              this.data1_Acquisation_Revenue.push({\n                'y': data.series[i].data[j],\n                borderColor: '#008000',\n                'selected': true\n              });\n            } else {\n              this.data1_Acquisation_Revenue.push({\n                'y': data.series[i].data[j]\n              });\n            }\n          } else {\n            this.data1_Acquisation_Revenue.push({\n              'y': data.series[i].data[j]\n            });\n          }\n        }\n        // if (sessionStorage.getItem('defaultLanguage') == 'fr') {\n        //     if (data.series[i].name === 'Current Revenue') {\n        //         data.series[i].name = 'Revenu courant';\n        //     } else if (data.series[i].name === 'Potential Revenue') {\n        //         data.series[i].name = 'Revenu Potentiel'\n        //     }\n        // }\n        this.data_Revenue_series.push({\n          'name': data.series[i].name,\n          'data': this.data1_Acquisation_Revenue\n        });\n      }\n      let category = this.addMonthOnCategories(data.categories);\n      Highcharts.setOptions({\n        lang: {\n          thousandsSep: ','\n        }\n      });\n      let acquisitionRevenueOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedColumnColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions),\n          thousandsSep: ','\n        },\n        xAxis: {\n          categories: category,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language.Revenue,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_legendtext)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            formatter: function () {\n              return '$' + Highcharts.numberFormat(this.total, 0, '', ',');\n            },\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        tooltip: {\n          headerFormat: '{point.x}<br>',\n          pointFormat: `<span style=\"color:{point.color}\">● </span>{series.name}:<b>$ {point.y:,.0f} </b> <br>`,\n          shared: true,\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            allowPointSelect: true,\n            maxPointWidth: 16,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            }\n          }),\n          column: {\n            minPointLength: 3,\n            borderWidth: 0\n          }\n        },\n        // series: data.series\n        series: this.data_Revenue_series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(acquisitionRevenueOptions);\n    }\n    // AQUISITION INLINE CHARTS \n    // SUBSCRIBER REVENUE\n    acquisitionSubscriberRevenueOptions(data) {\n      let gaugeOptions = {\n        chart: {\n          type: 'solidgauge',\n          style: Object.assign({}, this.styleOptions)\n        },\n        title: null,\n        colors: ['#7dc82e'],\n        pane: {\n          center: ['50%', '50%'],\n          size: '100%',\n          startAngle: -90,\n          endAngle: 90,\n          background: {\n            backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || '#EEE',\n            innerRadius: '60%',\n            outerRadius: '100%',\n            shape: 'arc'\n          }\n        },\n        plotOptions: {\n          solidgauge: {\n            dataLabels: {\n              borderWidth: 0,\n              useHTML: false\n            }\n          }\n        }\n      };\n      // The speed gauge\n      let chartSpeed = Object.assign(Object.assign({}, gaugeOptions), {\n        yAxis: {\n          min: 0,\n          valueSuffix: '$',\n          lineWidth: 0,\n          tickWidth: 0,\n          minorTickInterval: null,\n          tickAmount: 2,\n          // title: {\n          //     y: -70\n          // },\n          labels: {\n            y: 16,\n            formatter: function () {\n              return '$' + this.value.toFixed(0);\n            },\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        tooltip: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        exporting: {\n          enabled: false\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        series: [{\n          data: [data],\n          dataLabels: {\n            format: '<div style=\"text-align:center;margin-top: -30px\">' + '<span style=\"font-size:10px;color: #4c4c4c\";> ${y}</span><br/>' + '</div>'\n          }\n        }],\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(chartSpeed);\n    }\n    // SUBSCRIBER USAGE\n    acquisitionSubscribersUsageOptions(data) {\n      let categories = this.addMonthOnCategories(data.categories);\n      let acquisitionSubscribersUsageOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedColumnColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          crosshair: true,\n          categories: categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions)\n          })\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          labels: {\n            // formatter: function () {\n            //     var label = this.axis.defaultLabelFormatter.call(this);\n            //     // Use thousands separator for four-digit numbers too\n            //     if (/^[0-9]{4,}$/.test(label)) {\n            //         return Highcharts.numberFormat(this.value, 1, '.', ',') + ' GB';\n            //     }\n            //     return label;\n            // },\n            style: Object.assign({}, this.styleOptions)\n          },\n          title: {\n            text: '',\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          },\n          stackLabels: {\n            enabled: true,\n            formatter: function () {\n              return this.total + ' GB';\n            },\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_stacklabel)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            cursor: 'pointer',\n            maxPointWidth: 24,\n            borderRadius: 0,\n            point: {\n              events: {}\n            },\n            marker: {\n              enabled: false\n            }\n          }),\n          column: {\n            minPointLength: 3,\n            borderWidth: 0\n          }\n        },\n        tooltip: {\n          valueDecimals: 2,\n          crosshairs: true,\n          headerFormat: '<span>{point.key}</span><div>',\n          pointFormat: '<div><span style=\"color:{series.color};padding:0\"></span>' + '<span style=\"padding:0\">{series.name}: <b>{point.y} GB</b></span> <br></div>',\n          footerFormat: '</div>',\n          shared: true,\n          useHTML: true,\n          style: Object.assign({}, this.styleOptions)\n        },\n        series: data.series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(acquisitionSubscribersUsageOptions);\n    }\n    // SERVICE LIMITS\n    acquitionservicelimitOptions(data) {\n      let categories = this.addMonthOnCategories(data.categories);\n      let acqserviceOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: ['#5ACFEA', '#0027FF'],\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions)\n          })\n        },\n        yAxis: {\n          min: 0,\n          softMax: 10,\n          allowDecimals: false,\n          title: {\n            text: '',\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: true,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.linePlotOptions), {\n            cursor: 'pointer',\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            }\n          })\n        },\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name} <br/> \n                            <b>${this.x}: ${this.point.y}</b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions)\n        },\n        series: data.series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(acqserviceOptions);\n    }\n    // WIFI TRENDS \n    acquisitionWiFiTrendsOptions(data) {\n      let categories = this.addMonthOnCategories(data.categories);\n      let acqwifiOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedColumnColors,\n        chart: {\n          zoomType: 'xy',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: categories,\n          labels: {\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        yAxis: [{\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          tickInterval: 5,\n          labels: {\n            format: '',\n            style: Object.assign({}, this.styleOptions)\n          },\n          title: {\n            text: '',\n            style: Object.assign({}, this.styleOptions)\n          }\n        }, {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          tickInterval: 5,\n          title: {\n            text: '',\n            style: Object.assign({}, this.styleOptions)\n          },\n          labels: {\n            format: '',\n            style: Object.assign({}, this.styleOptions)\n          },\n          opposite: true\n        }],\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name} <br/> \n                            <b>${this.x}: ${this.point.y}</b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions),\n          shared: false\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: {\n            states: {\n              inactive: {\n                enabled: true\n              }\n            },\n            cursor: 'pointer',\n            maxPointWidth: 24,\n            borderRadius: 0\n          },\n          line: {\n            marker: {\n              enabled: true\n            }\n          }\n        },\n        series: data.series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(acqwifiOptions);\n    }\n    // SOME COMMON FUNCTIONS\n    addMonthOnCategories(categoryArray) {\n      let newMonth;\n      let newCategories = [];\n      categoryArray.forEach(element => {\n        let type = typeof element;\n        let category;\n        if (type == 'object') {\n          element = element[0];\n        }\n        newMonth = element.split('-');\n        category = `${constants.monthsArray[+newMonth[1]]}-${+newMonth[0] - 2000}`;\n        newCategories.push(category);\n      });\n      return newCategories;\n    }\n    serviceTierTooltipInfoGenerate(x, chartData) {\n      let data = chartData.series[0];\n      let tooltip = '';\n      tooltip = '<b>' + data.tierDate[x] + ': ' + data.tierDesc[x] + '</b>';\n      return tooltip;\n    }\n    timezoneCreator() {\n      // attempt to get short Timezone, fallback to full name, extra fallback to UTC.\n      let timeZone;\n      let date = new Date().toLocaleTimeString('en-us', {\n        timeZoneName: 'short'\n      });\n      // let date = 'Fri Dec 17 2021 14:59:07 GMT+0530'\n      if (date && date.split(' ').length > 2) {\n        if (date.split(' ')[2] == 'GMT-3:30') {\n          timeZone = 'NST';\n        } else {\n          timeZone = date.split(' ')[2];\n        }\n        // console.log(timeZone, '11111****')\n      } else if (Intl && Intl.DateTimeFormat() && Intl.DateTimeFormat().resolvedOptions() && Intl.DateTimeFormat().resolvedOptions().timeZone) {\n        timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        // console.log(timeZone, '11222****')\n      } else {\n        timeZone = moment().format(\"Z\");\n      }\n      return timeZone;\n    }\n    timeZoneCreatorForApi() {\n      let timeZone = this.timezoneCreator();\n      let timeZoneWithDot = timeZone.replace(':', '.');\n      let timeZoneArray = timeZoneWithDot.split('+' || '-');\n      let timeAndMinutes = timeZoneArray[1];\n      let onlyTime = timeAndMinutes.split('.');\n      let timeZoneForApi = +onlyTime[0] < 10 ? `0${onlyTime[0]}.${onlyTime[1]}` : `${onlyTime[0]}.${onlyTime[1]}`;\n      return timeZoneForApi;\n    }\n    getTimezone() {\n      var timezone_offset_min = new Date().getTimezoneOffset(),\n        offset_hrs = parseInt(Math.abs(timezone_offset_min / 60).toString()).toString(),\n        offset_min = Math.abs(timezone_offset_min % 60).toString(),\n        timezone_standard;\n      if (Number(offset_hrs) < 10) offset_hrs = '0' + offset_hrs;\n      if (Number(offset_min) < 10) offset_min = '0' + offset_min;\n      // Add an opposite sign to the offset\n      // If offset is 0, it means timezone is UTC\n      if (timezone_offset_min < 0) timezone_standard = 'GMT+ ' + offset_hrs + ':' + offset_min;else if (timezone_offset_min > 0) timezone_standard = 'GMT-' + offset_hrs + ':' + offset_min;else if (timezone_offset_min == 0) timezone_standard = 'GMT+ ' + '00:00';\n      return timezone_standard;\n      // Timezone difference in hours and minutes\n      // String such as +5:30 or -6:00 or Z\n      //console.log(timezone_standard);\n    }\n  }\n\n  ExportDataChartOptionsService.ɵfac = function ExportDataChartOptionsService_Factory(t) {\n    return new (t || ExportDataChartOptionsService)(i0.ɵɵinject(i1.MarketingExploreCommonService), i0.ɵɵinject(i2.TranslateService));\n  };\n  ExportDataChartOptionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExportDataChartOptionsService,\n    factory: ExportDataChartOptionsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ExportDataChartOptionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}