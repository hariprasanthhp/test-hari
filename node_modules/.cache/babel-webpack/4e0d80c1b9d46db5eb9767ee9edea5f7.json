{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { add as collectionAdd, remove as collectionRemove } from 'diagram-js/lib/util/Collections';\nimport { getBusinessObject, is } from '../../../util/ModelUtil';\nimport { createCategoryValue } from './util/CategoryUtil';\nvar HIGH_PRIORITY = 2000;\n\n/**\n * BPMN specific Group behavior\n */\nexport default function GroupBehavior(bpmnFactory, canvas, elementRegistry, eventBus, injector, moddleCopy) {\n  injector.invoke(CommandInterceptor, this);\n\n  /**\n   * Gets process definitions\n   *\n   * @return {ModdleElement} definitions\n   */\n  function getDefinitions() {\n    var rootElement = canvas.getRootElement(),\n      businessObject = getBusinessObject(rootElement);\n    return businessObject.$parent;\n  }\n\n  /**\n   * Removes a referenced category value for a given group shape\n   *\n   * @param {djs.model.Shape} shape\n   */\n  function removeReferencedCategoryValue(shape) {\n    var businessObject = getBusinessObject(shape),\n      categoryValue = businessObject.categoryValueRef;\n    if (!categoryValue) {\n      return;\n    }\n    var category = categoryValue.$parent;\n    if (!categoryValue) {\n      return;\n    }\n    collectionRemove(category.categoryValue, categoryValue);\n\n    // cleanup category if it is empty\n    if (category && !category.categoryValue.length) {\n      removeCategory(category);\n    }\n  }\n\n  /**\n   * Removes a given category from the definitions\n   *\n   * @param {ModdleElement} category\n   */\n  function removeCategory(category) {\n    var definitions = getDefinitions();\n    collectionRemove(definitions.get('rootElements'), category);\n  }\n\n  /**\n   * Returns all group element in the current registry\n   *\n   * @return {Array<djs.model.shape>} a list of group shapes\n   */\n  function getGroupElements() {\n    return elementRegistry.filter(function (e) {\n      return is(e, 'bpmn:Group');\n    });\n  }\n\n  /**\n   * Returns true if given categoryValue is referenced in one of the given elements\n   *\n   * @param {Array<djs.model.shape>} elements\n   * @param {ModdleElement} categoryValue\n   * @return {boolean}\n   */\n  function isReferenced(elements, categoryValue) {\n    return elements.some(function (e) {\n      var businessObject = getBusinessObject(e);\n      return businessObject.categoryValueRef && businessObject.categoryValueRef === categoryValue;\n    });\n  }\n\n  /**\n   * remove referenced category + value when group was deleted\n   */\n  this.executed('shape.delete', function (event) {\n    var context = event.context,\n      shape = context.shape;\n    if (is(shape, 'bpmn:Group')) {\n      var businessObject = getBusinessObject(shape),\n        categoryValueRef = businessObject.categoryValueRef,\n        groupElements = getGroupElements();\n      if (!isReferenced(groupElements, categoryValueRef)) {\n        removeReferencedCategoryValue(shape);\n      }\n    }\n  });\n\n  /**\n   * re-attach removed category\n   */\n  this.reverted('shape.delete', function (event) {\n    var context = event.context,\n      shape = context.shape;\n    if (is(shape, 'bpmn:Group')) {\n      var businessObject = getBusinessObject(shape),\n        categoryValueRef = businessObject.categoryValueRef,\n        definitions = getDefinitions(),\n        category = categoryValueRef ? categoryValueRef.$parent : null;\n      collectionAdd(category.get('categoryValue'), categoryValueRef);\n      collectionAdd(definitions.get('rootElements'), category);\n    }\n  });\n\n  /**\n   * create new category + value when group was created\n   */\n  this.execute('shape.create', function (event) {\n    var context = event.context,\n      shape = context.shape,\n      businessObject = getBusinessObject(shape);\n    if (is(businessObject, 'bpmn:Group') && !businessObject.categoryValueRef) {\n      var definitions = getDefinitions(),\n        categoryValue = createCategoryValue(definitions, bpmnFactory);\n\n      // link the reference to the Group\n      businessObject.categoryValueRef = categoryValue;\n    }\n  });\n  this.revert('shape.create', function (event) {\n    var context = event.context,\n      shape = context.shape;\n    if (is(shape, 'bpmn:Group')) {\n      removeReferencedCategoryValue(shape);\n      delete getBusinessObject(shape).categoryValueRef;\n    }\n  });\n\n  // copy bpmn:CategoryValue when copying element\n  eventBus.on('moddleCopy.canCopyProperty', HIGH_PRIORITY, function (context) {\n    var property = context.property,\n      categoryValue;\n    if (is(property, 'bpmn:CategoryValue')) {\n      categoryValue = createCategoryValue(getDefinitions(), bpmnFactory);\n\n      // return copy of category\n      return moddleCopy.copyElement(property, categoryValue);\n    }\n  });\n}\nGroupBehavior.$inject = ['bpmnFactory', 'canvas', 'elementRegistry', 'eventBus', 'injector', 'moddleCopy'];\ninherits(GroupBehavior, CommandInterceptor);","map":null,"metadata":{},"sourceType":"module"}