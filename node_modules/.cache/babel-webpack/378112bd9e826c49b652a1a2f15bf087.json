{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n  cmdHelper = require('../../../../helper/CmdHelper');\nvar is = require('bpmn-js/lib/util/ModelUtil').is,\n  isEventSubProcess = require('bpmn-js/lib/util/DiUtil').isEventSubProcess;\nmodule.exports = function (group, element, bpmnFactory, conditionalEventDefinition, elementRegistry, translate) {\n  var getValue = function (modelProperty) {\n    return function (element) {\n      var modelPropertyValue = conditionalEventDefinition.get('camunda:' + modelProperty);\n      var value = {};\n      value[modelProperty] = modelPropertyValue;\n      return value;\n    };\n  };\n  var setValue = function (modelProperty) {\n    return function (element, values) {\n      var props = {};\n      props['camunda:' + modelProperty] = values[modelProperty] || undefined;\n      return cmdHelper.updateBusinessObject(element, conditionalEventDefinition, props);\n    };\n  };\n  group.entries.push(entryFactory.textField(translate, {\n    id: 'variableName',\n    label: translate('Variable Name'),\n    modelProperty: 'variableName',\n    get: getValue('variableName'),\n    set: setValue('variableName')\n  }));\n  var isConditionalStartEvent = is(element, 'bpmn:StartEvent') && !isEventSubProcess(element.parent);\n  if (!isConditionalStartEvent) {\n    group.entries.push(entryFactory.textField(translate, {\n      id: 'variableEvents',\n      label: translate('Variable Events'),\n      description: translate('Specify more than one variable change event as a comma separated list.'),\n      modelProperty: 'variableEvents',\n      get: getValue('variableEvents'),\n      set: setValue('variableEvents')\n    }));\n  }\n};","map":null,"metadata":{},"sourceType":"script"}