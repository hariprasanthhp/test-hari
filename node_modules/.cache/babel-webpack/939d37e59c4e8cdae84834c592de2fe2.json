{"ast":null,"code":"import { DatePipe } from '@angular/common';\nimport { EventEmitter } from '@angular/core';\nimport * as moment from 'moment-timezone';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../../../../../shared/services/timezone.service\";\nimport * as i4 from \"../../../../../../shared-utils/date-utils.service\";\nimport * as i5 from \"../../../../../../shared/services/sso-auth.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@ng-select/ng-select\";\nimport * as i8 from \"../../../../../../shared/directives/autofocus.directive\";\nimport * as i9 from \"@angular/forms\";\nimport * as i10 from \"primeng/calendar\";\nimport * as i11 from \"ngx-material-timepicker\";\nfunction ScheduleWizardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵelementStart(1, \"div\", 26);\n    i0.ɵɵelementStart(2, \"span\", 27);\n    i0.ɵɵelement(3, \"img\", 28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"div\", 29);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.language.upgrade_msg(ctx_r0.errMsg), i0.ɵɵsanitizeHtml);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"error-occur-sec\": a0\n  };\n};\nconst _c1 = function () {\n  return {\n    width: \"100%\",\n    height: \"36px\",\n    \"max-width\": \"unset\",\n    padding: \"0\"\n  };\n};\nconst _c2 = function () {\n  return {\n    standalone: true\n  };\n};\nconst _c3 = function () {\n  return {\n    width: \"100%\",\n    height: \"36px\"\n  };\n};\nconst _c4 = function () {\n  return {\n    height: \"36px\"\n  };\n};\nexport let ScheduleWizardComponent = /*#__PURE__*/(() => {\n  class ScheduleWizardComponent {\n    constructor(translateService, router, utils, dateUtils, sso) {\n      this.translateService = translateService;\n      this.router = router;\n      this.utils = utils;\n      this.dateUtils = dateUtils;\n      this.sso = sso;\n      this.customStartRange = new Date();\n      this.pTime = new Date();\n      this.dataPbitInput = [{\n        id: 1,\n        name: 1\n      }, {\n        id: 2,\n        name: 2\n      }, {\n        id: 3,\n        name: 3\n      }, {\n        id: 4,\n        name: 4\n      }, {\n        id: 5,\n        name: 5\n      }, {\n        id: 6,\n        name: 6\n      }, {\n        id: 7,\n        name: 7\n      }];\n      this.dataHoursInp = [{\n        id: 1,\n        name: 1\n      }, {\n        id: 2,\n        name: 2\n      }, {\n        id: 3,\n        name: 3\n      }, {\n        id: 4,\n        name: 4\n      }, {\n        id: 5,\n        name: 5\n      }, {\n        id: 6,\n        name: 6\n      }];\n      this.today = new Date();\n      this.outputdata = new EventEmitter();\n      this.activeTab = new EventEmitter();\n      this.startDate = new Date();\n      this.noDays = 7;\n      this.numberOfHours = 6;\n      this.timezones = [];\n      this.exportTime = {\n        hour: 7,\n        minute: 15,\n        meriden: 'PM',\n        format: 24\n      };\n      this.maintenanceTuesdays = [];\n      this.maintenancedaysforTopshow = [];\n      this.isInCompleteDate = false;\n      this.timezone = 'America/Los_Angeles';\n      this.errorInfo = '';\n      this.successInfo = '';\n    }\n    ngOnInit() {\n      this.timezones = this.utils.getTimeZones();\n      let localTimeZone = this.dateUtils.getLocalTimeZoneName();\n      let findTZ = this.timezones.find(zone => zone.name == localTimeZone);\n      if (findTZ) {\n        //this.timezone = localTimeZone;\n      } else {\n        this.timezones.push({\n          id: localTimeZone,\n          name: localTimeZone\n        });\n      }\n      this.timezones.unshift({\n        id: '',\n        name: ''\n      });\n      this.timezone = localTimeZone;\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n      if (this.inputData['timezone']) {\n        this.timezone = this.inputData['timezone'];\n      }\n      if (this.inputData['startDate']) {\n        this.startDate = this.inputData['startDate'];\n      }\n      if (this.inputData['numberOfDays']) {\n        this.noDays = this.inputData['numberOfDays'];\n      }\n      if (this.inputData['startHour']) {\n        this.startHour = `${this.inputData['startHour'] ? this.inputData['startHour'] : '18'}:00`;\n        // let d = new Date();\n        // d = new Date(d.setHours(this.inputData['startHour']));\n        // this.startHour = d;\n      } else {\n        this.startHour = `${this.inputData['startHour'] ? this.inputData['startHour'] : '18'}:00`;\n      }\n      if (this.inputData['numberOfHours']) {\n        this.numberOfHours = this.inputData['numberOfHours'];\n      }\n      const d = new Date();\n      // let currentYear = d.getFullYear();\n      this.getYearfromDate(this.startDate);\n      this.checkMaintenanceWarning();\n    }\n    ngOnDestroy() {\n      this.languageSubject.unsubscribe();\n    }\n    go_next() {\n      let pipe = new DatePipe('en-US');\n      if (!this.timezone) {\n        this.showError();\n        return;\n      }\n      if (!this.startDate) {\n        this.showError();\n        return;\n      }\n      if (!this.noDays) {\n        this.showError();\n        return;\n      }\n      if (!this.startHour) {\n        this.showError();\n        return;\n      }\n      if (!this.numberOfHours) {\n        this.showError();\n        return;\n      }\n      let hourArr = this.startHour.split(\":\");\n      if (this.inputData.levelPassed <= 4) {\n        this.inputData.levelPassed = 4;\n      }\n      this.inputData['timezone'] = this.timezone;\n      this.inputData['startDate'] = pipe.transform(this.startDate, 'yyyy-MM-dd');\n      this.inputData['numberOfDays'] = this.noDays;\n      this.inputData['startHour'] = hourArr[0]; //pipe.transform(this.startHour, 'H');\n      this.inputData['numberOfHours'] = this.numberOfHours;\n      this.outputdata.emit(this.inputData);\n      this.activeTab.emit('Review');\n      return true;\n    }\n    closeAlert() {\n      this.error = false;\n      this.success = false;\n    }\n    showSuccess() {\n      this.closeAlert();\n      this.success = true;\n    }\n    showError() {\n      this.closeAlert();\n      this.error = true;\n    }\n    gotoPrevious() {\n      let hourArr = this.startHour.split(\":\");\n      let pipe = new DatePipe('en-US');\n      this.inputData['timezone'] = this.timezone;\n      this.inputData['startDate'] = pipe.transform(this.startDate, 'yyyy-MM-dd');\n      this.inputData['numberOfDays'] = this.noDays;\n      this.inputData['startHour'] = hourArr[0];\n      ;\n      this.inputData['numberOfHours'] = this.numberOfHours;\n      this.outputdata.emit(this.inputData);\n      this.activeTab.emit('TestServerDetails');\n    }\n    reload() {\n      var _a;\n      if (((_a = window.location.href) === null || _a === void 0 ? void 0 : _a.indexOf('/cco/operations/configuration/performance-testing')) !== -1) {\n        this.router.navigate(['./cco/operations/configuration/performance-testing']);\n        return;\n      }\n      this.sso.redirectByUrl([`support/netops-management/operations/performance-testing`, `cco/operations/cco-system-operations/performance-testing`, '', `/cco/operations/cco-subscriber-operations/operations/performance-testing`]);\n    }\n    // Check maintenance day with date and time\n    /*checkMaintenanceWarning2() {\r\n      this.isInCompleteDate = false;\r\n      console.log(\"timezone\", this.timezone);\r\n      console.log(\"startdate\", this.startDate);\r\n      let convertedstartDate = moment(this.startDate).tz('America/Los_Angeles').toString()\r\n      console.log(\"convertedstartDate\", convertedstartDate)\r\n      //let convertedstartDatewithtimezone = moment(this.startDate).tz(this.timezone).toString()\r\n      // console.log(\"convertedstartDatewithtimezone\",convertedstartDatewithtimezone)\r\n      \r\n      // moment.tz.setDefault(this.timezone);\r\n      // console.log(\"moment default timezone\", moment.tz.setDefault(this.timezone));\r\n      //let dateStr = '2023-03-14';\r\n      // let timeStr = '18:00';\r\n      // var timeAndDate = moment(dateStr + ' ' + timeStr);\r\n      // let timeAndDate = moment(dateStr + ' ' + timeStr).format('YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\r\n      // let formatteddate=new Date(timeAndDate)\r\n          //console.log(\"timeAndDate\",  formatteddate , \"type\", typeof(formatteddate));\r\n          // var ddd = timeAndDate.format('Y-MM-DD HH:mm Z');\r\n      // console.log(\"tzDate without date conversion\", ddd);\r\n      // console.log(\"tzDate\", new Date(ddd));\r\n      // var date = \"2017-03-13\";\r\n      // var time = \"18:00\";\r\n          //var timeAndDate = moment(date + ' ' + time);\r\n          //console.log(\"timeAndDate2\",timeAndDate);\r\n      // this.tzDate = moment(currentTime);\r\n      //this.tzDate = timeAndDate;\r\n      // let ddd = JSON.parse(timeAndDate).format('YYYY-MM-DD[T]HH:mm:ss.SSS[Z]')\r\n      //let aaa = ddd.toString()\r\n      // console.log(\"txDAte\",aaa, typeof(aaa),)\r\n          this.getYearfromDate(this.startDate);\r\n      this.getMaintenanceDays(this.selectedYear);\r\n      let valid_days = parseInt(this.noDays);\r\n      let no_of_hours = parseInt(this.numberOfHours)\r\n      let startHourSplit = this.startHour.split(':');\r\n      console.log(\"startdate\", this.startDate);\r\n          // this.startDate.setHours(parseInt(startHourSplit[0]),parseInt(startHourSplit[1]), parseInt('00'));\r\n      this.start_date = new Date(this.startDate.toLocaleString(\"en-US\", { timeZone: this.timezone }));\r\n          console.log(\"startdate2\", this.startDate)\r\n          let convertedstartDate2 = new Date(convertedstartDate);\r\n      console.log(\"convertedstartDate2\", convertedstartDate2)\r\n          //console.log(\"start date\", this.start_date);\r\n          // this.start_date.toLocaleString(\"en-US\", {timeZone: \"America/Los_Angeles\"});\r\n          // let date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\r\n          // console.log('Given IST datetime: ', date);\r\n          // let intlDateObj = new Intl.DateTimeFormat('en-US', {\r\n      //     timeZone: \"America/New_York\"\r\n      // });\r\n          // let usaTime = intlDateObj.format(date);\r\n      // console.log('USA date: ', usaTime);\r\n      \r\n      let end_date = new Date(this.start_date); // pass start date here\r\n      console.log(\"end_date\", end_date)\r\n      end_date.setDate(end_date.getDate() + valid_days);\r\n      console.log(\"end_date2\", end_date)\r\n      this.betweendatesStart = this.getDates(this.start_date, end_date)?.map(e => e.toString());\r\n      console.log(\"this.betweendatesStart\", this.betweendatesStart)\r\n      this.betweendatesStart.forEach(element => {\r\n        console.log(\"betweendatesStart\", this.betweendatesStart)\r\n        let btDt = new Date(element);\r\n        console.log(\"btDt\", btDt)\r\n        let betweenDateStart = new Date(btDt.setHours(parseInt(startHourSplit[0]), parseInt(startHourSplit[1]), parseInt('00')));\r\n        console.log(\"betweenDateStart\", betweenDateStart)\r\n        let betweenDateStartpst = new Date(betweenDateStart.toLocaleString(\"en-US\", { timeZone: \"America/Los_Angeles\" }));\r\n        console.log(\"betweenDateStartpst\", betweenDateStartpst);\r\n            let betweenDateStartHour = betweenDateStartpst.getHours();\r\n        console.log(\"betweenDateStartHour\", betweenDateStartHour);\r\n            betweenDateStartpst.setHours(0, 0, 0, 0);\r\n        console.log(\"betweenDateStartpst\", betweenDateStartpst);\r\n        console.log(\"betweenDateStartpst.gettime\", betweenDateStartpst.getTime());\r\n        console.log(\"betweenDateStartpst.gettimemoment\", moment(betweenDateStartpst).valueOf());\r\n      \r\n        let betweenDateEnd = new Date(btDt.setHours(btDt.getHours() + no_of_hours));\r\n        console.log(\"betweenDateEnd\", betweenDateEnd);\r\n            let betweenDateEndpst = new Date(betweenDateEnd.toLocaleString(\"en-US\", { timeZone: \"America/Los_Angeles\" }));\r\n        console.log(\"betweenDateEndpst\", betweenDateEndpst);\r\n        let betweenDateEndHour = betweenDateEndpst.getHours();\r\n        console.log(\"betweenDateEndHour\", betweenDateEndHour);\r\n            betweenDateEndpst.setHours(0, 0, 0, 0);\r\n        console.log(\"betweenDateEndpst\", betweenDateEndpst);\r\n            console.log(\"maintenanceTuesdays\", this.maintenanceTuesdays);\r\n            this.maintenanceTuesdays.forEach(DtElement => {\r\n          console.log(\"maintenanceTuesdays element\", DtElement)\r\n          let btDt = new Date(DtElement);\r\n          console.log(\"btDt\", btDt)\r\n          let maintenanceStartpst = new Date(btDt.toLocaleString(\"en-US\", { timeZone: \"America/Los_Angeles\" }));\r\n          console.log(\"maintenanceStartpst\", maintenanceStartpst)\r\n          maintenanceStartpst.setFullYear(btDt.getFullYear(), btDt.getMonth(), btDt.getDate());\r\n          console.log(\"maintenanceStartpst2\", maintenanceStartpst)\r\n              let maintenanceStart = new Date(maintenanceStartpst.setHours(parseInt('21')));\r\n          console.log(\"maintenanceStart\", maintenanceStart)\r\n          console.log(\"maintenanceStart.gettime\", maintenanceStart.getTime())\r\n              let maintenanceStartHour = maintenanceStart.getHours();\r\n          maintenanceStart.setHours(0, 0, 0, 0);\r\n          let maintenanceEnd = new Date(maintenanceStartpst.setHours(maintenanceStartpst.getHours() + 6));\r\n          console.log(\"maintenanceEnd\", maintenanceEnd)\r\n              let maintenanceEndHour = maintenanceEnd.getHours();\r\n          maintenanceEnd.setHours(0, 0, 0, 0);\r\n          console.log(\"maintenanceEnd2\", maintenanceEnd)\r\n      \r\n          const mainTimeInter = betweenDateStartpst.getTime() == maintenanceStart.getTime() ? [21, 22, 23] : [0, 1, 2, 3];\r\n          console.log(\"mainTimeInter\", mainTimeInter)\r\n              if (((betweenDateStartpst.getTime() < maintenanceStart.getTime() && maintenanceEnd.getTime() < betweenDateEndpst.getTime())\r\n            || ([maintenanceStart.getTime(), maintenanceEnd.getTime()].includes(betweenDateStartpst.getTime()) || [maintenanceStart.getTime(), maintenanceEnd.getTime()].includes(betweenDateEndpst.getTime())))\r\n            && (mainTimeInter.includes(betweenDateStartHour) || mainTimeInter.includes(betweenDateEndHour))\r\n          ) {\r\n            let pipe: DatePipe = new DatePipe('en-US');\r\n            this.selectedDate = pipe.transform(maintenanceStart, 'yyyy-MM-dd')\r\n            this.errMsg = this.selectedDate;\r\n            this.isInCompleteDate = true;\r\n            console.log(\"Calix Cloud Maintenanc day\");\r\n          }\r\n        })\r\n      });\r\n      //     this.selectedDate = this.maintenanceTuesdays.find(element => this.betweendatesStart.includes(element.toString()))\r\n      //     this.selectedDateNextDay = this.maintenanceWednesdays.find(element => this.start_date==(element.toString()))\r\n      //     //this.arrvalue = this.maintenanceTuesdays.filter(element => betweendates.includes(element)).filter((element, index, self) => self.indexOf(element) === index)\r\n      //     //  console.log(\"Selected Date\", this.selectedDate);\r\n      //     //  console.log(\"Selected Date Next Day\", this.selectedDateNextDay);\r\n      //      var pstDate:any = this.startHour.toLocaleString(\"en-US\", {\r\n      //       timeZone: \"America/New_York\"\r\n      //     }).toString().split(':').map(e=> Number(e))\r\n      //     // console.clear();\r\n      //     // console.log('the time converted',pstDate)\r\n      //     pstDate = pstDate[1] + pstDate[0] * 60;\r\n      //     // console.log(\"pstdate\",pstDate);\r\n      //   let maintenanceStartHour:any = 1260 , endpst = pstDate + this.numberOfHours * 60;\r\n      //   console.log(\"endpst\",endpst);\r\n      //   let maintenanceEndHour:any = 180;\r\n      //   let maintenanceStartHourNextDay = 0\r\n      //   if(this.selectedDateNextDay) {\r\n      //     if((pstDate >= maintenanceStartHourNextDay || pstDate <= maintenanceEndHour ) || (endpst >= maintenanceStartHourNextDay || endpst <= maintenanceEndHour)){\r\n      //       this.isInCompleteTime = true;\r\n      //       console.log(\"isInCompleteTime is true\");\r\n      //    }\r\n      //   } else {\r\n      //   if((pstDate >= maintenanceStartHour || pstDate <= maintenanceEndHour ) || (endpst >= maintenanceStartHour || endpst <= maintenanceEndHour)){\r\n      //      this.isInCompleteTime = true;\r\n      //      console.log(\"isInCompleteTimeset is true\");\r\n      //   }\r\n      //   else {\r\n      //       this.isInCompleteTime = false;\r\n      //       console.log(\"isInCompleteTime is false\");\r\n      //   }\r\n      // }\r\n      //   if (this.selectedDate || this.selectedDateNextDay) {\r\n      //     let pipe: DatePipe = new DatePipe('en-US');\r\n      //     this.selectedDate = pipe.transform(this.selectedDate, 'yyyy-MM-dd')\r\n      //     this.isInCompleteDate = true;\r\n      //     this.errMsg = this.selectedDate;\r\n      //      console.log(\"Calix Cloud Maintenanc day\");\r\n      //   }\r\n      //   else {\r\n      //     this.isInCompleteDate = false;\r\n      //     this.errMsg = \"\";\r\n      //     console.log(\"Not a Calix Cloud Maintenanc day\");\r\n      //   }\r\n    }*/\n    checkMaintenanceWarning() {\n      //checkMaintenanceWarningusingmoment() {    \n      var _a;\n      this.isInCompleteDate = false;\n      //console.log(\"timezone\", this.timezone);\n      //console.log(\"startdate\", this.startDate);\n      let convertedstartDatetotimezone = moment(this.startDate).tz(this.timezone).toString();\n      //console.log(\"convertedstartDate\", convertedstartDatetotimezone)\n      let convertedstartDateamerica = moment(convertedstartDatetotimezone).tz('America/Los_Angeles').toString();\n      //console.log(\"convertedstartDateamerica\", convertedstartDateamerica)\n      //console.log(\"current america time \", moment().tz('America/Los_Angeles').toString())\n      let convertedstartDatetoindia = moment(convertedstartDateamerica).tz('Asia/Calcutta').toString();\n      //console.log(\"convertedstartDateintoindia\", convertedstartDatetoindia)\n      this.getYearfromDate(this.startDate);\n      this.getMaintenanceDays(this.selectedYear);\n      let valid_days = parseInt(this.noDays);\n      let no_of_hours = parseInt(this.numberOfHours);\n      let startHourSplit = this.startHour.split(':');\n      //console.log(\"startdate\", this.startDate);\n      this.start_date = new Date(this.startDate); //new Date(this.startDate.toLocaleString(\"en-US\", { timeZone: this.timezone }));\n      //console.log(\"startdate2\", this.startDate)\n      let end_date = new Date(this.start_date); // pass start date here\n      //console.log(\"end_date\", end_date)\n      end_date.setDate(end_date.getDate() + valid_days);\n      // console.log(\"end_date2\", end_date)\n      this.betweendatesStart = (_a = this.getDates(this.start_date, end_date)) === null || _a === void 0 ? void 0 : _a.map(e => e.toString());\n      //console.log(\"this.betweendatesStart\", this.betweendatesStart)\n      this.betweendatesStart.forEach(element => {\n        // console.log(\"betweendatesStart\", this.betweendatesStart)\n        let btDt = new Date(element);\n        // console.log(\"btDt\", btDt)\n        // console.log(\"startHour\", this.startHour)\n        // console.log(\"startHour\", parseInt(startHourSplit[0]), \"parseInt(startHourSplit[1])\", parseInt(startHourSplit[1]))\n        let betweenDateStart = new Date(btDt.setHours(parseInt(startHourSplit[0]), parseInt(startHourSplit[1]), parseInt('00')));\n        // console.log(\"betweenDateStart\", betweenDateStart)\n        let betweedndatestart = moment(new Date(betweenDateStart));\n        // console.log(\"betweedndatestart\", betweedndatestart.toString());\n        let betweenDateStarttimezone = betweedndatestart.tz(this.timezone, true).toString();\n        //let betweenDateStarttimezone = moment(betweenDateStart).tz(this.timezone).toString()\n        // console.log(\"betweenDateStarttimezone\", betweenDateStarttimezone);\n        let betweenDateStartpst = moment(betweenDateStarttimezone).tz('America/Los_Angeles');\n        //  console.log(\"betweenDateStartpst\", betweenDateStartpst.toString());\n        let betweenDateStartHour = moment.utc(betweenDateStartpst).hour();\n        //  console.log(\"betweenDateStartHour\", betweenDateStartHour);\n        moment(betweenDateStartpst).set({\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0\n        }).toString();\n        //  console.log(\"betweenDateStartpst\", betweenDateStartpst.toString());\n        let betweenDateEnd = new Date(btDt.setHours(btDt.getHours() + no_of_hours));\n        let betweedndateend = moment(new Date(betweenDateEnd));\n        // console.log(\"betweenDateEnd\", betweenDateEnd);\n        // console.log(\"betweedndateend\", betweedndateend.toString());\n        //let betweenDateEndpsttimezone = moment(betweenDateEnd).tz(this.timezone).toString();\n        //console.log(\"betweenDateEndpsttimezone\", betweenDateEndpsttimezone);\n        let betweenDateEndpsttimezone = betweedndateend.tz(this.timezone, true).toString();\n        //  console.log(\"betweenDateEndpsttimezone2\", betweenDateEndpsttimezone);\n        let betweenDateEndpst = moment(betweenDateEndpsttimezone).tz('America/Los_Angeles');\n        //  console.log(\"betweenDateEndpst\", betweenDateEndpst.toString());\n        let betweenDateEndHour = moment.utc(betweenDateEndpst).hour();\n        //  console.log(\"betweenDateEndHour\", betweenDateEndHour);\n        moment(betweenDateEndpst).set({\n          hour: 0,\n          minute: 0,\n          second: 0,\n          millisecond: 0\n        }).toString();\n        //  console.log(\"betweenDateEndpst\", betweenDateEndpst.toString());\n        //  console.log(\"maintenanceTuesdays\", this.maintenanceTuesdays);\n        this.maintenanceTuesdays.forEach(DtElement => {\n          //    console.log(\"maintenanceTuesdays element\", DtElement)\n          let btDt = moment(new Date(DtElement));\n          //    console.log(\"btDt\", btDt.toString())\n          let maintenanceStartpst = btDt.tz('America/Los_Angeles', true).toString();\n          //let maintenanceStartpst = moment(btDt).tz('America/Los_Angeles');\n          //    console.log(\"maintenanceStartpst1\", maintenanceStartpst)\n          // maintenanceStartpst.setFullYear(btDt.getFullYear(),btDt.getMonth(),btDt.getDate());\n          // console.log(\"maintenanceStartpst2\", maintenanceStartpst)\n          let maintenanceStart1 = moment(maintenanceStartpst).set({\n            hour: 19,\n            minute: 30,\n            second: 0,\n            millisecond: 0\n          });\n          //  let maintenanceStart1 = moment(maintenanceStartpst).set(\"hour\", 21);\n          //    console.log(\"maintenanceStart1\", maintenanceStart1.toString())\n          let maintenanceStart = maintenanceStart1.tz('America/Los_Angeles', true);\n          //    console.log(\"maintenanceStart\", maintenanceStart.toString())\n          let maintenanceStartHour = moment(maintenanceStart).hour();\n          moment(maintenanceStart).set({\n            hour: 0,\n            minute: 0,\n            second: 0,\n            millisecond: 0\n          }).toString();\n          //   console.log(\"maintanancestart2\", maintenanceStart.toString())\n          let maintenanceEndgethr = moment(maintenanceStart).hour(); //moment.utc(maintenanceStart).hour() //moment(maintenanceStartpst).hour()\n          //    console.log(\"maintenanceEndgethr\", maintenanceEndgethr)\n          //////////////////\n          /*\r\n          let betweenDateEnd = new Date(btDt.setHours(btDt.getHours() + no_of_hours));\r\n          let betweedndateend=moment(new Date(betweenDateEnd))\r\n          console.log(\"betweenDateEnd\", betweenDateEnd);\r\n          console.log(\"betweedndateend\", betweedndateend.toString());\r\n          \r\n          //let betweenDateEndpsttimezone = moment(betweenDateEnd).tz(this.timezone).toString();\r\n          //console.log(\"betweenDateEndpsttimezone\", betweenDateEndpsttimezone);\r\n          \r\n          let betweenDateEndpsttimezone = betweedndateend.tz(this.timezone, true).toString();\r\n          console.log(\"betweenDateEndpsttimezone2\", betweenDateEndpsttimezone);\r\n          \r\n          let betweenDateEndpst = moment(betweenDateEndpsttimezone).tz('America/Los_Angeles').toString();\r\n          console.log(\"betweenDateEndpst\", betweenDateEndpst);\r\n          let betweenDateEndHour = moment.utc(betweenDateEndpst).hour()\r\n          console.log(\"betweenDateEndHour\", betweenDateEndHour);\r\n          */\n          ///////////////////\n          /*console.log(\"maintenanceEnd1 moen\", moment(maintenanceStartpst).set({\r\n            hour: maintenanceEndgethr + 6,\r\n            minute: 0,\r\n            second: 0,\r\n            millisecond: 0,\r\n          }))*/\n          let maintenanceEnd1 = moment(maintenanceStartpst).set({\n            hour: maintenanceEndgethr + 8,\n            minute: 30,\n            second: 0,\n            millisecond: 0\n          });\n          // let maintenanceEnd1 = moment(maintenanceStartpst).set(\"hour\", maintenanceEndgethr + 6)\n          //console.log(\"maintenanceEnd1\", maintenanceEnd1.toString())\n          let maintenanceEnd = maintenanceEnd1.tz('America/Los_Angeles', true);\n          //console.log(\"maintenanceEnd\", maintenanceEnd.toString())\n          let maintenanceEndHour = moment(maintenanceEnd).hour();\n          moment(maintenanceEnd).set({\n            hour: 0,\n            minute: 0,\n            second: 0,\n            millisecond: 0\n          }).toString();\n          //console.log(\"maintenanceEnd2\", maintenanceEnd.toString())\n          //console.log(\"values of betweenDateStartpst \", moment(betweenDateStartpst).valueOf(), \"maintenanceStart\", moment(maintenanceStart).valueOf())\n          const mainTimeInter = moment(betweenDateStartpst).valueOf() == moment(maintenanceStart).valueOf() ? [21, 22, 23] : [0, 1, 2, 3];\n          //console.log(\"mainTimeInter\", mainTimeInter)\n          /*console.log(\"betweenDateStartpst\", (betweenDateStartpst).toString(), \"maintenanceStart\", (maintenanceStart).toString(), \" maintenanceEnd\", maintenanceEnd.toString(), \"betweenDateEndpst\", (betweenDateEndpst).toString(), \"if condition\",\r\n            (moment(betweenDateStartpst).valueOf() / 1000 >= moment(maintenanceStart).valueOf() / 1000), moment(betweenDateEndpst).valueOf() / 1000 <= moment(maintenanceEnd).valueOf() / 1000, \"second\", ((moment(betweenDateStartpst).valueOf() / 1000) >= (moment(maintenanceStart).valueOf() / 1000) ? true : false))\r\n            */\n          let betweenDateStartpstformat = moment(betweenDateStartpst).format('YYYY-MM-DD');\n          let maintenanceStartformat = moment(maintenanceStart).format('YYYY-MM-DD');\n          let maintenanceEndformat = moment(maintenanceEnd).format('YYYY-MM-DD');\n          let betweenDateEndpstformat = moment(betweenDateEndpst).format('YYYY-MM-DD');\n          /*console.log(\"betweenDateStartpst\", betweenDateStartpst.toString(), \"betweenDateStartpst into format\", betweenDateStartpstformat, \"maintenanceStart\", maintenanceStart.toString(), \"maintenanceStart format\", maintenanceStartformat, \"maintenanceEnd\", maintenanceEnd.toString(), \"maintenanceEnd format\", maintenanceEndformat, \"betweenDateEndpst\", betweenDateEndpst.toString(), \"betweenDateEndpst format\", betweenDateEndpstformat,\r\n            \"moment('2010-10-20').isSame('2010-10-22')\", moment('2010-10-20').isSame('2010-10-22'), \"moment('betweenDateStartpstformat').isSame('maintenanceStartformat')\", moment(betweenDateStartpstformat).isSame(maintenanceStartformat))*/\n          /* console.log(\"if condition\", (((moment(betweenDateStartpstformat).isSame(maintenanceStartformat) || moment(betweenDateStartpstformat).isSame(maintenanceEndformat)) && ((moment(betweenDateStartpst).valueOf() / 1000 >= moment(maintenanceStart).valueOf() / 1000) && (moment(maintenanceEnd).valueOf() / 1000 <= moment(betweenDateStartpst).valueOf() / 1000))) || ((moment(betweenDateEndpstformat).isSame(maintenanceStartformat) || moment(betweenDateEndpstformat).isSame(maintenanceEndformat)) && ((moment(betweenDateEndpst).valueOf() / 1000 >= moment(maintenanceStart).valueOf() / 1000) && (moment(maintenanceEnd).valueOf() / 1000 <= moment(betweenDateEndpst).valueOf() / 1000)))),\r\n             \"((moment(betweenDateStartpstformat).isSame(maintenanceStartformat) || moment(betweenDateStartpstformat).isSame(maintenanceEndformat))\",\r\n             (moment(betweenDateStartpstformat).isSame(maintenanceStartformat) || moment(betweenDateStartpstformat).isSame(maintenanceEndformat)),\r\n             \" ((moment(betweenDateStartpst).valueOf() / 1000 >= moment(maintenanceStart).valueOf() / 1000) && (moment(maintenanceEnd).valueOf() / 1000 >= moment(betweenDateStartpst).valueOf() / 1000)))\",\r\n             ((moment(betweenDateStartpst).valueOf() / 1000 >= moment(maintenanceStart).valueOf() / 1000) && (moment(maintenanceEnd).valueOf() / 1000 >= moment(betweenDateStartpst).valueOf() / 1000)),\r\n             \"((moment(betweenDateEndpstformat).isSame(maintenanceStartformat) || moment(betweenDateEndpstformat).isSame(maintenanceEndformat))\",\r\n             (moment(betweenDateEndpstformat).isSame(maintenanceStartformat) || moment(betweenDateEndpstformat).isSame(maintenanceEndformat)),\r\n             \" ((moment(betweenDateEndpst).valueOf() / 1000 >= moment(maintenanceStart).valueOf() / 1000) && (moment(maintenanceEnd).valueOf() / 1000 >= moment(betweenDateEndpst).valueOf() / 1000)))\",\r\n             ((moment(betweenDateEndpst).valueOf() / 1000 >= moment(maintenanceStart).valueOf() / 1000) && (moment(maintenanceEnd).valueOf() / 1000 >= moment(betweenDateEndpst).valueOf() / 1000)))*/\n          //betweenDateStartpst>=maintenanceStart && maintenanceEnd <= betweenDateStartpst\n          if ((moment(betweenDateStartpstformat).isSame(maintenanceStartformat) || moment(betweenDateStartpstformat).isSame(maintenanceEndformat)) && moment(betweenDateStartpst).valueOf() / 1000 >= moment(maintenanceStart).valueOf() / 1000 && moment(maintenanceEnd).valueOf() / 1000 >= moment(betweenDateStartpst).valueOf() / 1000 || (moment(betweenDateEndpstformat).isSame(maintenanceStartformat) || moment(betweenDateEndpstformat).isSame(maintenanceEndformat)) && moment(betweenDateEndpst).valueOf() / 1000 >= moment(maintenanceStart).valueOf() / 1000 && moment(maintenanceEnd).valueOf() / 1000 >= moment(betweenDateEndpst).valueOf() / 1000) {\n            let pipe = new DatePipe('en-US');\n            this.selectedDate = maintenanceStartformat; //pipe.transform(maintenanceStart, 'yyyy-MM-dd')\n            this.errMsg = this.selectedDate;\n            this.isInCompleteDate = true;\n            //  console.log(\"Calix Cloud Maintenanc day\");\n          }\n          /*if (((moment(betweenDateStartpst).valueOf() < moment(maintenanceStart).valueOf() && moment(maintenanceEnd).valueOf() < moment(betweenDateEndpst).valueOf())\r\n            || ([moment(maintenanceStart).valueOf(), moment(maintenanceEnd).valueOf()].includes(moment(betweenDateStartpst).valueOf()) || [moment(maintenanceStart).valueOf(), moment(maintenanceEnd).valueOf()].includes(moment(betweenDateEndpst).valueOf())))\r\n            && (mainTimeInter.includes(betweenDateStartHour) || mainTimeInter.includes(betweenDateEndHour))\r\n          ) {\r\n            let pipe: DatePipe = new DatePipe('en-US');\r\n            this.selectedDate = maintenanceStart;//pipe.transform(maintenanceStart, 'yyyy-MM-dd')\r\n            this.errMsg = this.selectedDate;\r\n            this.isInCompleteDate = true;\r\n            console.log(\"Calix Cloud Maintenanc day\");\r\n          }*/\n        });\n      });\n    }\n\n    convertTimeZone(date, timeZone) {\n      return new Date((typeof date === 'string' ? new Date(date) : date).toLocaleString('en-US', {\n        timeZone\n      }));\n    }\n    // Get 2nd Tuesdays of the 2nd month of the quarter\n    getSecondTuesdays(month, year) {\n      var d = new Date(year, month, 1),\n        tuesdays = [];\n      d.setDate(d.getDate() + (9 - d.getDay()) % 7);\n      while (d.getMonth() === month) {\n        tuesdays.push(new Date(d.getTime()));\n        d.setDate(d.getDate() + 7);\n      }\n      // console.log(\"tuesdays\", tuesdays);\n      return tuesdays;\n    }\n    // Returns an array of dates between the two dates\n    getDates(startDate, endDate) {\n      const dates = [];\n      let currentDate = startDate;\n      const addDays = function (days) {\n        const date = new Date(this.valueOf());\n        date.setDate(date.getDate() + days);\n        return date;\n      };\n      while (currentDate < endDate) {\n        currentDate.setHours(\"00\");\n        currentDate.setMinutes(\"00\");\n        currentDate.setSeconds(\"00\");\n        dates.push(currentDate);\n        currentDate = addDays.call(currentDate, 1);\n      }\n      return dates;\n    }\n    // Get Calix Maintenance Dates(Second Tuesday of Second month of quarter)\n    getMaintenanceDays(selecteYear) {\n      this.maintenanceTuesdays = [];\n      for (let i = 1; i < 12; i += 3) {\n        let temp = this.getSecondTuesdays(i, selecteYear);\n        this.maintenanceTuesdays.push(temp[1]);\n      }\n    }\n    // Get Year from Selected Date\n    getYearfromDate(startDate) {\n      let selectedDate = new Date(startDate);\n      this.selectedYear = selectedDate.getFullYear();\n      //console.log(\"Selected Year\", this.selectedYear);\n    }\n\n    getCurrentHour() {\n      var d = new Date();\n      return d.getHours();\n    }\n  }\n  ScheduleWizardComponent.ɵfac = function ScheduleWizardComponent_Factory(t) {\n    return new (t || ScheduleWizardComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.TimezoneService), i0.ɵɵdirectiveInject(i4.DateUtilsService), i0.ɵɵdirectiveInject(i5.SsoAuthService));\n  };\n  ScheduleWizardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ScheduleWizardComponent,\n    selectors: [[\"app-schedule-wizard\"]],\n    inputs: {\n      inputData: \"inputData\"\n    },\n    outputs: {\n      outputdata: \"outputdata\",\n      activeTab: \"activeTab\"\n    },\n    decls: 58,\n    vars: 70,\n    consts: [[1, \"mt-4\"], [\"class\", \"w-100 fade show d-flex align-items-start warning-msg pt-2\", \"id\", \"claimWarning\", 4, \"ngIf\"], [1, \"form-group\", \"row\", 3, \"ngClass\"], [1, \"col-2\", \"control-label\", \"f-w-600\", \"text-right\"], [1, \"col-10\"], [1, \"custom-selectbox\"], [\"bindLabel\", \"name\", \"id\", \"timeZone\", \"autofocus\", \"\", \"bindValue\", \"id\", 1, \"col-lg-10\", \"col-md-12\", \"col-sm-12\", 3, \"items\", \"ngModel\", \"ngModelOptions\", \"searchable\", \"change\", \"ngModelChange\"], [1, \"error-msg-p\"], [1, \"form-group\", \"ccl-form\", \"row\", 3, \"ngClass\"], [\"for\", \"Name\", \"id\", \"start_date_label\", 1, \"col-2\", \"control-label\", \"f-w-600\", \"text-right\"], [1, \"col-10\", \"calender\"], [\"id\", \"start_date_2\", \"appendTo\", \"body\", \"placeholder\", \"Select Date\", \"dateFormat\", \"yy-mm-dd\", 3, \"inputStyle\", \"autoZIndex\", \"ngModel\", \"showIcon\", \"ngModelOptions\", \"minDate\", \"onSelect\", \"change\", \"ngModelChange\"], [\"bindLabel\", \"name\", \"id\", \"noDays\", \"bindValue\", \"id\", 1, \"col-lg-10\", \"col-md-12\", \"col-sm-12\", 3, \"items\", \"ngModel\", \"ngModelOptions\", \"searchable\", \"change\", \"ngModelChange\"], [\"for\", \"Name\", 1, \"col-2\", \"control-label\", \"f-w-600\", \"text-right\"], [\"placeholder\", \"24hr format\", \"aria-label\", \"24hr format\", \"readonly\", \"\", 3, \"ngxTimepicker\", \"format\", \"hoursOnly\", \"ngModel\", \"value\", \"ngModelChange\"], [3, \"hoursOnly\", \"closed\"], [\"fullTime\", \"\"], [1, \"custom-selectbox-shedule\"], [\"bindLabel\", \"name\", \"id\", \"noOfHours\", \"bindValue\", \"id\", 1, \"col-lg-12\", \"col-md-12\", \"col-sm-12\", 3, \"items\", \"ngModel\", \"ngModelOptions\", \"searchable\", \"change\", \"ngModelChange\"], [1, \"d-inline-flex\", \"justify-content-start\", \"performance-testing-button\"], [\"type\", \"button\", \"id\", \"netops-perftest-schedule-previous-btn\", 1, \"btn-arrow\", \"btn-arr-prev\", \"btn-grey\", 3, \"click\"], [\"src\", \"assets/img/ic_chevronleft_grey.svg\"], [\"type\", \"button\", \"id\", \"netops-perftest-schedule-cancel-btn\", 1, \"btn-default\", \"btn-dft\", \"mx-2\", 3, \"click\"], [\"type\", \"button\", \"id\", \"netops-perftest-schedule-next-btn\", 1, \"btn-arrow\", \"btn-arr-nxt\", \"primary\", 3, \"click\"], [\"src\", \"assets/img/ic_chevron-r-w.svg\"], [\"id\", \"claimWarning\", 1, \"w-100\", \"fade\", \"show\", \"d-flex\", \"align-items-start\", \"warning-msg\", \"pt-2\"], [1, \"err-image\"], [1, \"error-img\"], [\"src\", \"./assets/img/warning-icon.svg\"], [1, \"err-msg\", \"mt-1\", 3, \"innerHTML\"]],\n    template: function ScheduleWizardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ScheduleWizardComponent_div_1_Template, 5, 1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"section\");\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"label\", 3);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelementStart(8, \"ng-select\", 6);\n        i0.ɵɵlistener(\"change\", function ScheduleWizardComponent_Template_ng_select_change_8_listener() {\n          return ctx.checkMaintenanceWarning();\n        })(\"ngModelChange\", function ScheduleWizardComponent_Template_ng_select_ngModelChange_8_listener($event) {\n          return ctx.timezone = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"section\");\n        i0.ɵɵelementStart(12, \"div\", 8);\n        i0.ɵɵelementStart(13, \"label\", 9);\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 10);\n        i0.ɵɵelementStart(16, \"p-calendar\", 11);\n        i0.ɵɵlistener(\"onSelect\", function ScheduleWizardComponent_Template_p_calendar_onSelect_16_listener() {\n          return ctx.checkMaintenanceWarning();\n        })(\"change\", function ScheduleWizardComponent_Template_p_calendar_change_16_listener() {\n          return ctx.checkMaintenanceWarning();\n        })(\"ngModelChange\", function ScheduleWizardComponent_Template_p_calendar_ngModelChange_16_listener($event) {\n          return ctx.startDate = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 7);\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"section\");\n        i0.ɵɵelementStart(20, \"div\", 2);\n        i0.ɵɵelementStart(21, \"label\", 3);\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 4);\n        i0.ɵɵelementStart(24, \"div\", 5);\n        i0.ɵɵelementStart(25, \"ng-select\", 12);\n        i0.ɵɵlistener(\"change\", function ScheduleWizardComponent_Template_ng_select_change_25_listener() {\n          return ctx.checkMaintenanceWarning();\n        })(\"ngModelChange\", function ScheduleWizardComponent_Template_ng_select_ngModelChange_25_listener($event) {\n          return ctx.noDays = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 7);\n        i0.ɵɵtext(27);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"section\");\n        i0.ɵɵelementStart(29, \"div\", 8);\n        i0.ɵɵelementStart(30, \"label\", 13);\n        i0.ɵɵtext(31);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 10);\n        i0.ɵɵelementStart(33, \"input\", 14);\n        i0.ɵɵlistener(\"ngModelChange\", function ScheduleWizardComponent_Template_input_ngModelChange_33_listener($event) {\n          return ctx.startHour = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"ngx-material-timepicker\", 15, 16);\n        i0.ɵɵlistener(\"closed\", function ScheduleWizardComponent_Template_ngx_material_timepicker_closed_34_listener() {\n          return ctx.checkMaintenanceWarning();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"div\", 7);\n        i0.ɵɵtext(37);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"section\");\n        i0.ɵɵelementStart(39, \"div\", 2);\n        i0.ɵɵelementStart(40, \"label\", 3);\n        i0.ɵɵtext(41);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"div\", 4);\n        i0.ɵɵelementStart(43, \"div\", 17);\n        i0.ɵɵelementStart(44, \"ng-select\", 18);\n        i0.ɵɵlistener(\"change\", function ScheduleWizardComponent_Template_ng_select_change_44_listener() {\n          return ctx.checkMaintenanceWarning();\n        })(\"ngModelChange\", function ScheduleWizardComponent_Template_ng_select_ngModelChange_44_listener($event) {\n          return ctx.numberOfHours = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"div\", 7);\n        i0.ɵɵtext(46);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"div\", 19);\n        i0.ɵɵelementStart(48, \"div\");\n        i0.ɵɵelementStart(49, \"button\", 20);\n        i0.ɵɵlistener(\"click\", function ScheduleWizardComponent_Template_button_click_49_listener() {\n          return ctx.gotoPrevious();\n        });\n        i0.ɵɵelement(50, \"img\", 21);\n        i0.ɵɵtext(51);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(52, \"div\");\n        i0.ɵɵelementStart(53, \"button\", 22);\n        i0.ɵɵlistener(\"click\", function ScheduleWizardComponent_Template_button_click_53_listener() {\n          return ctx.reload();\n        });\n        i0.ɵɵtext(54);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"button\", 23);\n        i0.ɵɵlistener(\"click\", function ScheduleWizardComponent_Template_button_click_55_listener() {\n          return ctx.go_next();\n        });\n        i0.ɵɵtext(56);\n        i0.ɵɵelement(57, \"img\", 24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(35);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isInCompleteDate);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(51, _c0, ctx.error && !ctx.timezone));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.language.Timezone);\n        i0.ɵɵadvance(3);\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(53, _c1));\n        i0.ɵɵproperty(\"items\", ctx.timezones)(\"ngModel\", ctx.timezone)(\"ngModelOptions\", i0.ɵɵpureFunction0(54, _c2))(\"searchable\", false);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.select_value, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(55, _c0, ctx.error && !ctx.startDate));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.language.startDate);\n        i0.ɵɵadvance(2);\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(57, _c3));\n        i0.ɵɵproperty(\"inputStyle\", i0.ɵɵpureFunction0(58, _c4))(\"autoZIndex\", true)(\"ngModel\", ctx.startDate)(\"showIcon\", true)(\"ngModelOptions\", i0.ɵɵpureFunction0(59, _c2))(\"minDate\", ctx.today);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.select_value, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(60, _c0, ctx.error && !ctx.noDays));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.language.No_Of_days);\n        i0.ɵɵadvance(3);\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(62, _c1));\n        i0.ɵɵproperty(\"items\", ctx.dataPbitInput)(\"ngModel\", ctx.noDays)(\"ngModelOptions\", i0.ɵɵpureFunction0(63, _c2))(\"searchable\", false);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.select_value, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(64, _c0, ctx.error && !ctx.startHour));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.language.Start_Hr);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngxTimepicker\", _r1)(\"format\", 24)(\"hoursOnly\", true)(\"ngModel\", ctx.startHour)(\"value\", ctx.startHour);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hoursOnly\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.select_value, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(66, _c0, ctx.error && !ctx.numberOfHours));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.language.No_Of_hr);\n        i0.ɵɵadvance(3);\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(68, _c1));\n        i0.ɵɵproperty(\"items\", ctx.dataHoursInp)(\"ngModel\", ctx.numberOfHours)(\"ngModelOptions\", i0.ɵɵpureFunction0(69, _c2))(\"searchable\", false);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.select_value, \" \");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.Previous, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.cancel, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.Next, \" \");\n      }\n    },\n    directives: [i6.NgIf, i6.NgClass, i7.NgSelectComponent, i8.AutofocusDirective, i9.NgControlStatus, i9.NgModel, i10.Calendar, i9.DefaultValueAccessor, i11.TimepickerDirective, i11.NgxMaterialTimepickerComponent],\n    styles: [\".form-group[_ngcontent-%COMP%]   .input-group[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border-top-left-radius:25px;border-bottom-left-radius:25px}.form-group[_ngcontent-%COMP%]   .input-group[_ngcontent-%COMP%]   .input-group-append[_ngcontent-%COMP%]   .input-group-text[_ngcontent-%COMP%]{border-top-right-radius:25px;border-bottom-right-radius:25px}.form-group[_ngcontent-%COMP%]{margin-bottom:10px}.custom-selectbox-shedule[_ngcontent-%COMP%]   .ng-dropdown-panel[_ngcontent-%COMP%]{z-index:1;width:100%;padding-top:10px;padding-bottom:10px;border-radius:10px!important;min-height:auto;max-height:260px;overflow-y:auto;font-size:14px;transition:.5s ease}.error-image[_ngcontent-%COMP%]{max-width:46px;min-width:36px}.err-msg[_ngcontent-%COMP%]{width:90%}\"]\n  });\n  return ScheduleWizardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}