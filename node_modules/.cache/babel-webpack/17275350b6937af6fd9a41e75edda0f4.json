{"ast":null,"code":"import { DatePipe } from '@angular/common';\nimport { DateTime } from \"luxon\";\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nexport let DateUtilsService = /*#__PURE__*/(() => {\n  class DateUtilsService {\n    constructor() {}\n    getUtcTimeByBeforeDays(days) {\n      ////console.log('13', days);\n      let date = new Date();\n      let newDate = new Date(date.getTime() - days * 24 * 60 * 60 * 1000);\n      newDate.setHours(0);\n      newDate.setMinutes(0);\n      newDate.setSeconds(0);\n      return Math.floor(newDate.getTime() / 1000);\n    }\n    getUtcTimeByEndDate(dateObj, hrs, mins, sec) {\n      dateObj.setHours(hrs);\n      dateObj.setMinutes(mins);\n      dateObj.setSeconds(sec);\n      let date = new Date(dateObj);\n      date.setDate(date.getDate() + 1);\n      //console.log('27', date);\n      return Math.floor(date.getTime() / 1000);\n    }\n    getCurrentUtcTime() {\n      let date = new Date();\n      return Math.floor(date.getTime() / 1000);\n    }\n    getUtcTimeByDate(dateObj, hrs, mins, sec) {\n      let pipe = new DatePipe('en-US');\n      //console.log('27', dateObj);\n      dateObj.setHours(hrs);\n      dateObj.setMinutes(mins);\n      dateObj.setSeconds(sec);\n      //let dateString = `${pipe.transform(dateObj, 'MM/dd/yyyy')}`;\n      let date = new Date(dateObj);\n      return Math.floor(date.getTime() / 1000);\n    }\n    getUserDateTime(dateObj, timezone) {\n      let date = DateTime.fromISO(dateObj);\n      var rezoned = date.setZone(timezone, {});\n      //let datetime = rezoned.toString('yyyy-MM-dd HH:mm:ss');\n      let datetime = rezoned.toString();\n      let dateArr = datetime.split('.');\n      let zonedTime = dateArr[0].replace('T', ' ');\n      return zonedTime;\n    }\n    getMonthYear(dateObj) {\n      dateObj = new Date(dateObj);\n      let year = dateObj.getFullYear();\n      let month = `${dateObj.getMonth() + 1}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      return `${month}/${year}`;\n    }\n    getChartFormat(time) {\n      let dateObj = new Date(time * 1000);\n      let pipe = new DatePipe('en-US');\n      ////console.log(dateObj);\n      let dateString = `${pipe.transform(dateObj, 'MM/dd HH:mm')}`;\n      return dateString;\n    }\n    getIsoDate(date) {\n      let dt = DateTime.fromISO(date);\n      return dt.toISO();\n    }\n    timezoneDetected() {\n      var dtDate = new Date('1/1/' + new Date().getUTCFullYear());\n      var intOffset = 10000;\n      var intMonth;\n      for (intMonth = 0; intMonth < 12; intMonth++) {\n        dtDate.setUTCMonth(dtDate.getUTCMonth() + 1);\n        if (intOffset > dtDate.getTimezoneOffset() * -1) {\n          intOffset = dtDate.getTimezoneOffset() * -1;\n        }\n      }\n      return intOffset * 60 * 1000 + this.getDSToffset();\n    }\n    getChartFormatDate(time, format, nonUTC) {\n      let dateObj;\n      if (typeof time == 'string') {\n        dateObj = new Date(time);\n      } else {\n        if (nonUTC) {\n          dateObj = new Date(time);\n        } else {\n          dateObj = new Date(time * 1000);\n        }\n      }\n      let pipe = new DatePipe('en-US');\n      let dateString = '';\n      if (format) {\n        dateString = `${pipe.transform(dateObj, format)}`;\n      } else {\n        dateString = `${pipe.transform(dateObj, 'MM/dd/yyyy')}`;\n      }\n      return dateString;\n    }\n    getLocalTimeZoneName() {\n      var local = DateTime.local();\n      return local.zoneName;\n    }\n    getISODate(dt) {\n      let d = new Date(dt);\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let date = `${year}-${month}-${day}T00:00:00Z`;\n      return date;\n    }\n    getUserDatefromIsoDate(isoDateString) {\n      let epocSecs = new Date(isoDateString).getTime() + this.timezoneDetected();\n      return moment(new Date(epocSecs).getTime()).format('DD-MMM-yyyy LTS');\n    }\n    getChartFormatDateInUtc(time, format, nonUTC) {\n      return moment(time * 1000 - this.timezoneDetected()).format('MM/yyyy');\n    }\n    getChartFormatNew(time) {\n      //return moment(time * 1000 - this.timezoneDetected()).format('MM/DD HH:mm');\n      //let dateObj = new Date(time * 1000 - this.timezoneDetected());\n      let dateObj = new Date(time * 1000);\n      let pipe = new DatePipe('en-US');\n      ////console.log(dateObj);\n      let dateString = `${pipe.transform(dateObj, 'MM/dd HH:mm')}`;\n      return dateString;\n    }\n    getOffsetInHoursAndMin() {\n      let sec = this.timezoneDetected();\n      sec = sec / 1000;\n      if (Math.sign(sec) === 1) {\n        return this.secondsToHms(sec);\n      } else {\n        return \"-\" + this.secondsToHms(Math.abs(sec));\n      }\n    }\n    secondsToHms(d) {\n      d = Number(d);\n      var h = Math.floor(d / 3600);\n      var m = Math.floor(d % 3600 / 60);\n      var s = Math.floor(d % 3600 % 60);\n      var hDisplay = h < 10 ? `0${h}` : h;\n      var mDisplay = m < 10 ? `0${m}` : m;\n      return hDisplay + \".\" + mDisplay;\n    }\n    getUserDateTimeByTimeZone(dateStr) {\n      var local = DateTime.local();\n      ////console.log(local.zoneName);\n      let date = DateTime.fromISO(`${dateStr}`, {\n        zone: `${local.zoneName}`\n      });\n      return date.toLocaleString();\n    }\n    getUserDateTimeByDateObj(dateObj) {\n      let date = DateTime.fromJSDate(dateObj);\n      return date.toISO({\n        includeOffset: false,\n        suppressMilliseconds: true\n      });\n    }\n    getTimeNow() {\n      let dt = DateTime.local();\n      let hour = dt.hour.toString();\n      let minute = dt.minute.toString();\n      let second = dt.second.toString();\n      if (hour.length < 2) {\n        hour = `0${hour}`;\n      }\n      if (minute.length < 2) {\n        minute = `0${minute}`;\n      }\n      if (second.length < 2) {\n        second = `0${second}`;\n      }\n      return `${hour}:${minute}:${second}`;\n    }\n    currentDateToUTC() {\n      let dt = new Date().toISOString();\n      let a = dt.split('.');\n      let b = a[0].split(\":\");\n      b.pop();\n      return b.join(':') + ':00Z';\n    }\n    getCurrentLocalDateTimeString(format) {\n      let dateObj = new Date();\n      let pipe = new DatePipe('en-US');\n      let dateString = '';\n      if (format) {\n        dateString = `${pipe.transform(dateObj, format)}`;\n      } else {\n        dateString = `${pipe.transform(dateObj, 'MM/dd/yyyy')}`;\n      }\n      return dateString;\n    }\n    getRealtimeDateFormat(time) {\n      let date = DateTime.fromMillis(time);\n      return date.toUTC().toFormat('d-MMM H:mm:ss');\n    }\n    getLocalRealtimeDateFormat(time) {\n      let date = DateTime.fromMillis(time);\n      return date.toLocal().toFormat('d-MMM H:mm:ss');\n    }\n    getUTCDateFormatFromUTCTime(time, utc, format) {\n      if (utc) {\n        time = parseInt(time) * 1000;\n      }\n      let date = DateTime.fromMillis(time);\n      let dateString = '';\n      if (format) {\n        dateString = date.toUTC().toFormat(format);\n      } else {\n        dateString = date.toUTC().toFormat('MM/dd/yyyy');\n      }\n      return dateString;\n    }\n    getTodayDateStr() {\n      var d = new Date(),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    }\n    getStartUtcTimeByDays(days) {\n      if (!days) {\n        return new Date().getTime();\n      }\n      let date = DateTime.fromISO(`${this.getTodayDateStr()}T00:00:00-00:00`);\n      let millis = date.toMillis();\n      if (this.isDST(new Date(millis))) {\n        return millis - days * 24 * 60 * 60 * 1000 - this.timezoneDetected() - 3600000;\n      } else return millis - days * 24 * 60 * 60 * 1000 - this.timezoneDetected();\n    }\n    getStartUtcTimeByDaysseconds(days) {\n      if (!days) {\n        return new Date().getTime();\n      }\n      let date = DateTime.fromISO(`${this.getTodayDateStr()}T00:00:00-00:00`);\n      let millis = date.toMillis();\n      return millis - days * 24 * 60 * 60 * 1000 - this.timezoneDetected();\n      ;\n    }\n    getStartUtcTimeArrByDays(days) {\n      let date = DateTime.fromISO(`${this.getTodayDateStr()}T00:00:00-00:00`);\n      let millis = date.toMillis();\n      let timestamps = [];\n      for (let i = days; i >= 0; i--) {\n        timestamps.push(millis - i * 24 * 60 * 60 * 1000);\n      }\n      return timestamps;\n    }\n    getStartUtcHoursTimeArrByDays(days) {\n      let date = DateTime.fromISO(`${this.getTodayDateStr()}T00:00:00-00:00`);\n      let millis = date.toMillis();\n      let timestamps = [];\n      for (let i = days; i >= 0; i--) {\n        //timestamps.push((millis - (i * 24 * 60 * 60 * 1000)));\n        let time = millis - i * 24 * 60 * 60 * 1000;\n        let hours = 24;\n        if (i == 0) {\n          var d = new Date();\n          hours = d.getUTCHours() + 1;\n        }\n        for (let j = 0; j < hours; j++) {\n          timestamps.push(time + j * 60 * 60 * 1000);\n        }\n      }\n      return timestamps;\n    }\n    getStartUtcMinsTimeArrByDays(days) {\n      let date = DateTime.fromISO(`${this.getTodayDateStr()}T00:00:00-00:00`);\n      let millis = date.toMillis();\n      let timestamps = [];\n      for (let i = days; i >= 0; i--) {\n        //timestamps.push((millis - (i * 24 * 60 * 60 * 1000)));\n        let time = millis - i * 24 * 60 * 60 * 1000;\n        let hours = 24;\n        if (i == 0) {\n          var d = new Date();\n          hours = d.getUTCHours() + 1;\n        }\n        for (let j = 0; j < hours; j++) {\n          //timestamps.push((time + (j * 60 * 60 * 1000)));\n          let hTime = time + j * 60 * 60 * 1000;\n          for (let s = 0; s < 60; s++) {\n            timestamps.push(hTime + s * 60 * 1000);\n          }\n        }\n      }\n      return timestamps;\n    }\n    getDateStrByDateObj(d) {\n      var month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    }\n    getUtcMinsTimeArrByDateMillis(startMilli, endMilli) {\n      let timestamps = [];\n      let length = (endMilli - startMilli) / 60000;\n      for (let i = 0; i < length; i++) {\n        timestamps.push(startMilli + i * 60000);\n      }\n      return timestamps;\n    }\n    getUtcMinsTimeArrByDate(startDate, endDate) {\n      let start = this.getDateStrByDateObj(startDate);\n      let startD = DateTime.fromISO(`${start}T00:00:00-00:00`);\n      let startMilli = startD.toMillis() - this.timezoneDetected();\n      let end = this.getDateStrByDateObj(endDate);\n      let endD = DateTime.fromISO(`${end}T23:59:00-00:00`);\n      let endMilli = endD.toMillis() - this.timezoneDetected();\n      let tempDateStr = this.getTodayDateStr();\n      if (end == tempDateStr) {\n        let dt = new Date().toISOString();\n        let a = dt.split('.');\n        let b = a[0].split(\":\");\n        b.pop();\n        let c = b.join(':') + ':00Z';\n        c = c.split('T');\n        endD = DateTime.fromISO(`${end}T${c[1]}`);\n        endMilli = endD.toMillis();\n      }\n      let timestamps = [];\n      let length = (endMilli - startMilli) / 60000;\n      for (let i = 0; i < length; i++) {\n        timestamps.push(startMilli + i * 60000);\n      }\n      return timestamps;\n      //console.log(startMilli);\n      //console.log(endMilli);\n      //console.log(timestamps);\n    }\n\n    getUtcHoursTimeArrByDate(startDate, endDate) {\n      let start = this.getDateStrByDateObj(startDate);\n      let startD = DateTime.fromISO(`${start}T00:00:00-00:00`);\n      let startMilli = startD.toMillis() - this.timezoneDetected();\n      let end = this.getDateStrByDateObj(endDate);\n      let endD = DateTime.fromISO(`${end}T23:59:00-00:00`);\n      let endMilli = endD.toMillis() - this.timezoneDetected();\n      let tempDateStr = this.getTodayDateStr();\n      if (end == tempDateStr) {\n        let dt = new Date().toISOString();\n        let a = dt.split('.');\n        let b = a[0].split(\":\");\n        b.pop();\n        let c = b.join(':') + ':00Z';\n        c = c.split('T');\n        endD = DateTime.fromISO(`${end}T${c[1]}`);\n        endMilli = endD.toMillis();\n      }\n      let timestamps = [];\n      let length = (endMilli - startMilli) / 1800000;\n      for (let i = 0; i < length; i++) {\n        if (this.isUTCHour(startMilli + i * 1800000)) {\n          timestamps.push(startMilli + i * 1800000);\n        }\n      }\n      return timestamps;\n    }\n    getUtcMinsTimeArrFromTimeToCurrentTime(startMilli) {\n      //startMilli = startMilli - this.timezoneDetected();\n      let end = this.getTodayDateStr();\n      let dt = new Date().toISOString();\n      let a = dt.split('.');\n      let b = a[0].split(\":\");\n      b.pop();\n      let c = b.join(':') + ':00Z';\n      c = c.split('T');\n      let endD = DateTime.fromISO(`${end}T${c[1]}`);\n      let endMilli = endD.toMillis();\n      let timestamps = [];\n      let length = (endMilli - startMilli) / 60000;\n      for (let i = 0; i < length; i++) {\n        timestamps.push(startMilli + i * 60000);\n      }\n      return timestamps;\n    }\n    getUtcHoursTimeArrFromTimeToCurrentTime(startMilli) {\n      //startMilli = startMilli;\n      let end = this.getTodayDateStr();\n      let dt = new Date().toISOString();\n      let a = dt.split('.');\n      let b = a[0].split(\":\");\n      b.pop();\n      let c = b.join(':') + ':00Z';\n      c = c.split('T');\n      let endD = DateTime.fromISO(`${end}T${c[1]}`);\n      let endMilli = endD.toMillis();\n      let timestamps = [];\n      let length = (endMilli - startMilli) / 3600000;\n      for (let i = 0; i < length; i++) {\n        timestamps.push(startMilli + i * 3600000);\n      }\n      //console.log(timestamps);\n      if (timestamps.length < 2) {\n        timestamps.unshift(timestamps[0] - 3600000);\n      }\n      return timestamps;\n    }\n    getUtCMilliSecByDateObj(d, appendUTCTimeStr = false) {\n      var month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      let dateStr = [year, month, day].join('-');\n      let date;\n      if (appendUTCTimeStr) {\n        let tempDateStr = this.getTodayDateStr();\n        if (dateStr == tempDateStr) {\n          // let dt = new Date().toISOString();\n          // let a = dt.split('.');\n          // let b = a[0].split(\":\");\n          // b.pop();\n          // let c: any = b.join(':') + ':00Z';\n          // c = c.split('T');\n          // date = DateTime.fromISO(`${dateStr}T${c[1]}`);\n          // return date.toMillis();\n          return new Date().getTime();\n        } else {\n          date = DateTime.fromISO(`${dateStr}T23:59:59.999Z`);\n        }\n      } else {\n        date = DateTime.fromISO(`${dateStr}T00:00:00-00:00`);\n      }\n      return date.toMillis() - this.timezoneDetected();\n    }\n    getChartDateByFormat(time, format) {\n      let date = DateTime.fromMillis(time);\n      return date.toUTC().toFormat(format);\n    }\n    isUTCHour(n) {\n      return n % 3600000 === 0;\n    }\n    convertSecondsToTime(seconds) {\n      if (seconds >= 3600) {\n        return new Date(seconds * 1000).toISOString().substr(11, 8);\n      } else {\n        return new Date(seconds * 1000).toISOString().substr(14, 5);\n      }\n    }\n    isDST(d) {\n      let jan = new Date(d.getFullYear(), 0, 1).getTimezoneOffset();\n      let jul = new Date(d.getFullYear(), 6, 1).getTimezoneOffset();\n      return Math.max(jan, jul) != d.getTimezoneOffset();\n    }\n    getUtCSecondsByDateObj(d, appendUTCTimeStr = false) {\n      var month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      let dateStr = [year, month, day].join('-');\n      let date;\n      if (appendUTCTimeStr) {\n        let tempDateStr = this.getTodayDateStr();\n        if (dateStr == tempDateStr) {\n          let dt = new Date().toISOString();\n          let a = dt.split('.');\n          let b = a[0].split(\":\");\n          b.pop();\n          let c = b.join(':') + ':00Z';\n          c = c.split('T');\n          // date = DateTime.fromISO(`${c[0]}T${c[1]}`);\n          let d = dt.split('.');\n          d[0] = d[0] + 'Z';\n          date = DateTime.fromISO(`${d[0]}`);\n          return date.toMillis() / 1000;\n        } else {\n          date = DateTime.fromISO(`${dateStr}T23:59:59-00:00`);\n        }\n      } else {\n        date = DateTime.fromISO(`${dateStr}T00:00:00-00:00`);\n      }\n      if (this.isDST(d)) {\n        return (date.toMillis() - this.timezoneDetected()) / 1000 - 3600;\n      } else return (date.toMillis() - this.timezoneDetected()) / 1000;\n    }\n    getLocalTime(date, tzone) {\n      let dateArr = date.split(':');\n      let zone = tzone;\n      let localzone = this.getLocalTimeZoneName();\n      let dateTime = DateTime.fromObject({\n        zone\n      }).set({\n        hour: dateArr[0],\n        minute: dateArr[1]\n      });\n      dateTime = dateTime.setZone(localzone);\n      let result = dateTime.toISO();\n      return result;\n    }\n    getFirstDayDateStr() {\n      var d = new Date(),\n        month = '' + (d.getMonth() + 1),\n        day = '01',\n        year = d.getFullYear();\n      if (month.length < 2) {\n        month = '0' + month;\n      }\n      return [month, day, year].join('/');\n    }\n    getTimeStr(dateObj) {\n      let pipe = new DatePipe('en-US');\n      let timeString = `${pipe.transform(dateObj, 'HH:mm')}`;\n      return timeString;\n    }\n    getTImeZoneWithOffset() {\n      let localeDate = new Date().toString().split(' ');\n      let gmtId = (localeDate[5] ? localeDate[5] : '') + ' ' + (localeDate[6] ? localeDate[6] : '') + ' ' + (localeDate[7] ? localeDate[7] : '') + ' ' + (localeDate[8] ? localeDate[8] : '');\n      return gmtId;\n    }\n    stdTimezoneOffset() {\n      let date = new Date();\n      var jan = new Date(date.getFullYear(), 0, 1);\n      var jul = new Date(date.getFullYear(), 6, 1);\n      return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n    }\n    getDSToffset() {\n      let date = new Date();\n      if (date.getTimezoneOffset() < this.stdTimezoneOffset()) {\n        return (this.stdTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000;\n      } else {\n        return 0;\n      }\n    }\n    getDateTimeStrWithOffset() {\n      var _a, _b, _c, _d, _e, _f, _g;\n      return `${(_c = (_b = (_a = new Date().toISOString()) === null || _a === void 0 ? void 0 : _a.split('.')) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.replace(/['\"]+/g, '_')}${(_g = (_f = (_e = (_d = this.getTImeZoneWithOffset()) === null || _d === void 0 ? void 0 : _d.split('(')) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.split('GMT')) === null || _g === void 0 ? void 0 : _g[1]}`;\n    }\n  }\n  DateUtilsService.ɵfac = function DateUtilsService_Factory(t) {\n    return new (t || DateUtilsService)();\n  };\n  DateUtilsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DateUtilsService,\n    factory: DateUtilsService.ɵfac,\n    providedIn: 'root'\n  });\n  return DateUtilsService;\n})();","map":null,"metadata":{},"sourceType":"module"}