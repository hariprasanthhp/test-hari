{"ast":null,"code":"'use strict';\n\nvar forEach = require('lodash/forEach');\n\n/**\n * A handler that implements a BPMN 2.0 property update\n * for business object lists which are not represented in the\n * diagram.\n *\n * This is useful in the context of the properties panel in\n * order to update child elements of elements visible in\n * the diagram.\n *\n * Example: perform an update of a specific event definition\n * of an intermediate event.\n *\n * @class\n * @constructor\n */\nfunction UpdateBusinessObjectListHandler(elementRegistry, bpmnFactory) {\n  this._elementRegistry = elementRegistry;\n  this._bpmnFactory = bpmnFactory;\n}\nUpdateBusinessObjectListHandler.$inject = ['elementRegistry', 'bpmnFactory'];\nmodule.exports = UpdateBusinessObjectListHandler;\nfunction ensureNotNull(prop, name) {\n  if (!prop) {\n    throw new Error(name + 'required');\n  }\n  return prop;\n}\n\n// api /////////////////////////////////////////////\n\n/**\n * Updates a element under a provided parent.\n */\nUpdateBusinessObjectListHandler.prototype.execute = function (context) {\n  var currentObject = ensureNotNull(context.currentObject, 'currentObject'),\n    propertyName = ensureNotNull(context.propertyName, 'propertyName'),\n    updatedObjectList = context.updatedObjectList,\n    objectsToRemove = context.objectsToRemove || [],\n    objectsToAdd = context.objectsToAdd || [],\n    objectsToPrepend = context.objectsToPrepend || [],\n    changed = [context.element],\n    // this will not change any diagram-js elements\n    referencePropertyName;\n  if (context.referencePropertyName) {\n    referencePropertyName = context.referencePropertyName;\n  }\n  var objectList = currentObject[propertyName];\n\n  // adjust array reference in the parent business object\n  context.previousList = currentObject[propertyName];\n  if (updatedObjectList) {\n    currentObject[propertyName] = updatedObjectList;\n  } else {\n    // start with objects to prepend\n    var listCopy = objectsToPrepend.slice();\n\n    // remove all objects which should be removed\n    forEach(objectList, function (object) {\n      if (objectsToRemove.indexOf(object) == -1) {\n        listCopy.push(object);\n      }\n    });\n\n    // add all objects which should be added\n    listCopy = listCopy.concat(objectsToAdd);\n\n    // set property to new list\n    if (listCopy.length > 0 || !referencePropertyName) {\n      // as long as there are elements in the list update the list\n      currentObject[propertyName] = listCopy;\n    } else if (referencePropertyName) {\n      // remove the list when it is empty\n      var parentObject = currentObject.$parent;\n      parentObject.set(referencePropertyName, undefined);\n    }\n  }\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n/**\n * Reverts the update\n *\n * @method  CreateBusinessObjectListHandler#revert\n *\n * @param {Object} context\n *\n * @return {djs.mode.Base} the updated element\n */\nUpdateBusinessObjectListHandler.prototype.revert = function (context) {\n  var currentObject = context.currentObject,\n    propertyName = context.propertyName,\n    previousList = context.previousList,\n    parentObject = currentObject.$parent;\n  if (context.referencePropertyName) {\n    parentObject.set(context.referencePropertyName, currentObject);\n  }\n\n  // remove new element\n  currentObject.set(propertyName, previousList);\n  return context.changed;\n};","map":null,"metadata":{},"sourceType":"script"}