{"ast":null,"code":"import { getNewAttachPoint } from '../../../../util/AttachUtil';\nimport { getOrientation } from '../../../../layout/LayoutUtil';\nimport { filter, map } from 'min-dash';\nexport function getResizedSourceAnchor(connection, shape, oldBounds) {\n  var waypoints = safeGetWaypoints(connection),\n    waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),\n    oldAnchor = waypoints[0];\n\n  // new anchor is the last waypoint enclosed be resized source\n  if (waypointsInsideNewBounds.length) {\n    return waypointsInsideNewBounds[waypointsInsideNewBounds.length - 1];\n  }\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);\n}\nexport function getResizedTargetAnchor(connection, shape, oldBounds) {\n  var waypoints = safeGetWaypoints(connection),\n    waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),\n    oldAnchor = waypoints[waypoints.length - 1];\n\n  // new anchor is the first waypoint enclosed be resized target\n  if (waypointsInsideNewBounds.length) {\n    return waypointsInsideNewBounds[0];\n  }\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);\n}\nexport function getMovedSourceAnchor(connection, source, moveDelta) {\n  var waypoints = safeGetWaypoints(connection),\n    oldBounds = subtract(source, moveDelta),\n    oldAnchor = waypoints[0];\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, source);\n}\nexport function getMovedTargetAnchor(connection, target, moveDelta) {\n  var waypoints = safeGetWaypoints(connection),\n    oldBounds = subtract(target, moveDelta),\n    oldAnchor = waypoints[waypoints.length - 1];\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, target);\n}\n\n// helpers //////////////////////\n\nfunction subtract(bounds, delta) {\n  return {\n    x: bounds.x - delta.x,\n    y: bounds.y - delta.y,\n    width: bounds.width,\n    height: bounds.height\n  };\n}\n\n/**\n * Return waypoints of given connection; throw if non exists (should not happen!!).\n *\n * @param {Connection} connection\n *\n * @return {Array<Point>}\n */\nfunction safeGetWaypoints(connection) {\n  var waypoints = connection.waypoints;\n  if (!waypoints.length) {\n    throw new Error('connection#' + connection.id + ': no waypoints');\n  }\n  return waypoints;\n}\nfunction getWaypointsInsideBounds(waypoints, bounds) {\n  var originalWaypoints = map(waypoints, getOriginal);\n  return filter(originalWaypoints, function (waypoint) {\n    return isInsideBounds(waypoint, bounds);\n  });\n}\n\n/**\n * Checks if point is inside bounds, incl. edges.\n *\n * @param {Point} point\n * @param {Bounds} bounds\n */\nfunction isInsideBounds(point, bounds) {\n  return getOrientation(bounds, point, 1) === 'intersect';\n}\nfunction getOriginal(point) {\n  return point.original || point;\n}","map":null,"metadata":{},"sourceType":"module"}