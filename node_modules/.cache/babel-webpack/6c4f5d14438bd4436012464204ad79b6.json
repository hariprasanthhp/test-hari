{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from \"../../../../environments/environment\";\nimport * as FileSaver from 'file-saver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let ReportsService = /*#__PURE__*/(() => {\n  class ReportsService {\n    constructor(http, sso) {\n      this.http = http;\n      this.sso = sso;\n      // this funtion will delete the reports\n      this.deleteReport = params => {\n        let query = \"\";\n        for (var key in params) {\n          if (params[key]) {\n            if (query != \"\") {\n              query += \"&\";\n            }\n            query += key + \"=\" + encodeURIComponent(params[key]);\n          }\n        }\n        return this.http.delete(`${environment.SUPPORT_URL}/call/avoidance/subscriber_report?${query}`);\n      };\n    }\n    getInventoryReport(params) {\n      console.log(params);\n      let query = \"\";\n      for (var key in params) {\n        if (params[key]) {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n      }\n      //&manufacturer=${params.manufacturer}&modelName=${params.modelName}&serialNumber=${params.serialNumber}&subscriber=${params.subscriber}&opmode=${params.opmode}\n      //return this.http.get(`${environment.SUPPORT_URL}/netops-report/inventory-report?reportType=${params.reportType}&orgId=${params.orgId}&startTime=${params.startTime}&endTime=${params.endTime}&inversely_time_period=${params.inversely_time_period}`);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-report/inventory-report?${query}`);\n    }\n    getInventoryCount(params) {\n      console.log(\"ppp\" + JSON.stringify(params));\n      let query = \"\";\n      for (var key in params) {\n        if (params[key]) {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n      }\n      return this.http.get(`${environment.SUPPORT_URL}/netops-report/inventory-report/count?${query}`);\n    }\n    getDropDownData(payload) {\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/device-type?matcher=${payload}`);\n    }\n    getChartData(params) {\n      let query = \"\";\n      for (var key in params) {\n        if (params[key]) {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n        return this.http.get(`${environment.SUPPORT_URL}/netops-report/inventory-report?${query}`);\n      }\n    }\n    getInventorySoftwareReport(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-report/softwareVersion?${ID}`);\n    }\n    /* getInventoryReport(orgId:string, reportType:string):Observable<any>{\r\n       \r\n       const tableData:any=[\r\n         {\r\n           \"Id\": \"152650-487746-CXNK007D3FC5\",\r\n           \"rowNo\": 1,\r\n           \"Subid\": \"b189e694-e8ea-4903-bdb9-c6389536d869\",\r\n           \"orgid\": \"152650\",\r\n           \"serialnumber\": \"CXNK007D3FC5\",\r\n           \"opmode\": \"RG\",\r\n           \"manufacturer\": \"Calix\",\r\n           \"modelname\": \"GS4220E\",\r\n           \"lastdiscovertime\": 1599808587224,\r\n           \"lastinformtime\": 1599808573455,\r\n           \"createtime\": 1597741020750,\r\n           \"periodicinformenable\": \"true\",\r\n           \"periodicinforminterval\": \"86400\",\r\n           \"productclass\": \"GigaSpire\",\r\n           \"registrationid\": \"reg4220\",\r\n           \"softwareversion\": \"20.4.500.108\",\r\n           \"subnetmask\": \"255.255.255.0\",\r\n           \"additionalhardwareversion\": \"UnitSerialNumber=422003014283\",\r\n           \"hardwareversion\": \"3000286510\",\r\n           \"ipaddress\": \"192.168.37.219\",\r\n           \"macaddress\": \"48:77:46:cf:6d:6c\",\r\n           \"normalizedipaddress\": \"192.168.037.219\",\r\n           \"wanaccesstype\": \"CopperEthernet\",\r\n           \"connectionrequesturl\": \"http://192.168.37.219:60002/q5S35xHy\",\r\n           \"subscriberId\": \"test\",\r\n           \"subscriberName\": \"autotest4220\",\r\n           \"manufactureroui\": \"487746\",\r\n           \"location\": \"3rd Floor of DeXun Build,Software RD, YuHua D\",\r\n           \"subscriberAccount\": \"ytt\",\r\n           \"subscriberPhone\": \"15195760150\",\r\n           \"subscriberType\": \"business\",\r\n           \"email\": \"15195760150@163.com\",\r\n           \"billingAddress\": \"Nanjing, China\",\r\n           \"serviceAddress\": \"nanjing\",\r\n           \"region\": \"ET\",\r\n           \"lastboottime\": 1599632908312,\r\n           \"lastdiscovertimestamp\": 1599808587224,\r\n           \"lastinformtimestamp\": 1599808573455,\r\n           \"lastdiscoverdate\": \"Dec 1, 52665 2:13:44 AM\",\r\n           \"lastinformdate\": \"Nov 30, 52665 10:24:15 PM\"\r\n         }\r\n       ]\r\n       \r\n    alert('service')\r\n       return from(tableData);\r\n    \n     }\r\n    */\n    getCallAvoidanceReport(params) {\n      console.log(params);\n      let query = \"\";\n      for (var key in params) {\n        if (params[key]) {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n      }\n      return this.http.get(`${environment.SUPPORT_URL}/call/avoidance/subscriber_report?${query}`);\n    }\n    // this funtion will add & update the reports\n    addReportQuery(requestData) {\n      console.log(\"response called\");\n      if ('_id' in requestData) {\n        return this.http.put(`${environment.SUPPORT_URL}/call/avoidance/subscriber_report`, requestData);\n      } else {\n        return this.http.post(`${environment.SUPPORT_URL}/call/avoidance/subscriber_report`, requestData);\n      }\n    }\n    getSummary(orgId, id) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/call/avoidance/task_execlog_summary?${ID}jobId=${id}`);\n    }\n    getSummaryDetails(orgId, id) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/call/avoidance/task_execlog_detail?${ID}_id=${id}`);\n    }\n    exportFromUrl(url, name) {\n      let options = {\n        headers: new HttpHeaders().set(\"content-type\", \"application/json\").set('Accept-Encoding', 'gzip, deflate, br').set('Connection', 'keep-alive').set('Accept', '*/*'),\n        // params: new HttpParams()\n        // .set(\"fsan\",fsan)\n        // .set(\"username\",username)\n        // .set(\"password\",password),\n        responseType: 'arraybuffer'\n      };\n      this.http.get(url, options).subscribe(data => {\n        console.log(\"data=>\", data);\n        let blob = new Blob([data], {\n          type: 'application/octet-stream'\n        });\n        FileSaver.saveAs(blob, name);\n      });\n    }\n  }\n  ReportsService.ɵfac = function ReportsService_Factory(t) {\n    return new (t || ReportsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  ReportsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReportsService,\n    factory: ReportsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReportsService;\n})();","map":null,"metadata":{},"sourceType":"module"}