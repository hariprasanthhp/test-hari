{"ast":null,"code":"import { assign, filter, find, isArray, isNumber, isObject, isUndefined, groupBy, forEach } from 'min-dash';\n\n/**\n * Get parent elements.\n *\n * @param {Array<djs.model.base>} elements\n *\n * @returns {Array<djs.model.Base>}\n */\nexport function getParents(elements) {\n  // find elements that are not children of any other elements\n  return filter(elements, function (element) {\n    return !find(elements, function (e) {\n      return e !== element && getParent(element, e);\n    });\n  });\n}\nfunction getParent(element, parent) {\n  if (!parent) {\n    return;\n  }\n  if (element === parent) {\n    return parent;\n  }\n  if (!element.parent) {\n    return;\n  }\n  return getParent(element.parent, parent);\n}\n\n/**\n * Adds an element to a collection and returns true if the\n * element was added.\n *\n * @param {Array<Object>} elements\n * @param {Object} e\n * @param {boolean} unique\n */\nexport function add(elements, e, unique) {\n  var canAdd = !unique || elements.indexOf(e) === -1;\n  if (canAdd) {\n    elements.push(e);\n  }\n  return canAdd;\n}\n\n/**\n * Iterate over each element in a collection, calling the iterator function `fn`\n * with (element, index, recursionDepth).\n *\n * Recurse into all elements that are returned by `fn`.\n *\n * @param  {Object|Array<Object>} elements\n * @param  {Function} fn iterator function called with (element, index, recursionDepth)\n * @param  {number} [depth] maximum recursion depth\n */\nexport function eachElement(elements, fn, depth) {\n  depth = depth || 0;\n  if (!isArray(elements)) {\n    elements = [elements];\n  }\n  forEach(elements, function (s, i) {\n    var filter = fn(s, i, depth);\n    if (isArray(filter) && filter.length) {\n      eachElement(filter, fn, depth + 1);\n    }\n  });\n}\n\n/**\n * Collects self + child elements up to a given depth from a list of elements.\n *\n * @param  {djs.model.Base|Array<djs.model.Base>} elements the elements to select the children from\n * @param  {boolean} unique whether to return a unique result set (no duplicates)\n * @param  {number} maxDepth the depth to search through or -1 for infinite\n *\n * @return {Array<djs.model.Base>} found elements\n */\nexport function selfAndChildren(elements, unique, maxDepth) {\n  var result = [],\n    processedChildren = [];\n  eachElement(elements, function (element, i, depth) {\n    add(result, element, unique);\n    var children = element.children;\n\n    // max traversal depth not reached yet\n    if (maxDepth === -1 || depth < maxDepth) {\n      // children exist && children not yet processed\n      if (children && add(processedChildren, children, unique)) {\n        return children;\n      }\n    }\n  });\n  return result;\n}\n\n/**\n * Return self + direct children for a number of elements\n *\n * @param  {Array<djs.model.Base>} elements to query\n * @param  {boolean} allowDuplicates to allow duplicates in the result set\n *\n * @return {Array<djs.model.Base>} the collected elements\n */\nexport function selfAndDirectChildren(elements, allowDuplicates) {\n  return selfAndChildren(elements, !allowDuplicates, 1);\n}\n\n/**\n * Return self + ALL children for a number of elements\n *\n * @param  {Array<djs.model.Base>} elements to query\n * @param  {boolean} allowDuplicates to allow duplicates in the result set\n *\n * @return {Array<djs.model.Base>} the collected elements\n */\nexport function selfAndAllChildren(elements, allowDuplicates) {\n  return selfAndChildren(elements, !allowDuplicates, -1);\n}\n\n/**\n * Gets the the closure for all selected elements,\n * their enclosed children and connections.\n *\n * @param {Array<djs.model.Base>} elements\n * @param {boolean} [isTopLevel=true]\n * @param {Object} [existingClosure]\n *\n * @return {Object} newClosure\n */\nexport function getClosure(elements, isTopLevel, closure) {\n  if (isUndefined(isTopLevel)) {\n    isTopLevel = true;\n  }\n  if (isObject(isTopLevel)) {\n    closure = isTopLevel;\n    isTopLevel = true;\n  }\n  closure = closure || {};\n  var allShapes = copyObject(closure.allShapes),\n    allConnections = copyObject(closure.allConnections),\n    enclosedElements = copyObject(closure.enclosedElements),\n    enclosedConnections = copyObject(closure.enclosedConnections);\n  var topLevel = copyObject(closure.topLevel, isTopLevel && groupBy(elements, function (e) {\n    return e.id;\n  }));\n  function handleConnection(c) {\n    if (topLevel[c.source.id] && topLevel[c.target.id]) {\n      topLevel[c.id] = [c];\n    }\n\n    // not enclosed as a child, but maybe logically\n    // (connecting two moved elements?)\n    if (allShapes[c.source.id] && allShapes[c.target.id]) {\n      enclosedConnections[c.id] = enclosedElements[c.id] = c;\n    }\n    allConnections[c.id] = c;\n  }\n  function handleElement(element) {\n    enclosedElements[element.id] = element;\n    if (element.waypoints) {\n      // remember connection\n      enclosedConnections[element.id] = allConnections[element.id] = element;\n    } else {\n      // remember shape\n      allShapes[element.id] = element;\n\n      // remember all connections\n      forEach(element.incoming, handleConnection);\n      forEach(element.outgoing, handleConnection);\n\n      // recurse into children\n      return element.children;\n    }\n  }\n  eachElement(elements, handleElement);\n  return {\n    allShapes: allShapes,\n    allConnections: allConnections,\n    topLevel: topLevel,\n    enclosedConnections: enclosedConnections,\n    enclosedElements: enclosedElements\n  };\n}\n\n/**\n * Returns the surrounding bbox for all elements in\n * the array or the element primitive.\n *\n * @param {Array<djs.model.Shape>|djs.model.Shape} elements\n * @param {boolean} stopRecursion\n */\nexport function getBBox(elements, stopRecursion) {\n  stopRecursion = !!stopRecursion;\n  if (!isArray(elements)) {\n    elements = [elements];\n  }\n  var minX, minY, maxX, maxY;\n  forEach(elements, function (element) {\n    // If element is a connection the bbox must be computed first\n    var bbox = element;\n    if (element.waypoints && !stopRecursion) {\n      bbox = getBBox(element.waypoints, true);\n    }\n    var x = bbox.x,\n      y = bbox.y,\n      height = bbox.height || 0,\n      width = bbox.width || 0;\n    if (x < minX || minX === undefined) {\n      minX = x;\n    }\n    if (y < minY || minY === undefined) {\n      minY = y;\n    }\n    if (x + width > maxX || maxX === undefined) {\n      maxX = x + width;\n    }\n    if (y + height > maxY || maxY === undefined) {\n      maxY = y + height;\n    }\n  });\n  return {\n    x: minX,\n    y: minY,\n    height: maxY - minY,\n    width: maxX - minX\n  };\n}\n\n/**\n * Returns all elements that are enclosed from the bounding box.\n *\n *   * If bbox.(width|height) is not specified the method returns\n *     all elements with element.x/y > bbox.x/y\n *   * If only bbox.x or bbox.y is specified, method return all elements with\n *     e.x > bbox.x or e.y > bbox.y\n *\n * @param {Array<djs.model.Shape>} elements List of Elements to search through\n * @param {djs.model.Shape} bbox the enclosing bbox.\n *\n * @return {Array<djs.model.Shape>} enclosed elements\n */\nexport function getEnclosedElements(elements, bbox) {\n  var filteredElements = {};\n  forEach(elements, function (element) {\n    var e = element;\n    if (e.waypoints) {\n      e = getBBox(e);\n    }\n    if (!isNumber(bbox.y) && e.x > bbox.x) {\n      filteredElements[element.id] = element;\n    }\n    if (!isNumber(bbox.x) && e.y > bbox.y) {\n      filteredElements[element.id] = element;\n    }\n    if (e.x > bbox.x && e.y > bbox.y) {\n      if (isNumber(bbox.width) && isNumber(bbox.height) && e.width + e.x < bbox.width + bbox.x && e.height + e.y < bbox.height + bbox.y) {\n        filteredElements[element.id] = element;\n      } else if (!isNumber(bbox.width) || !isNumber(bbox.height)) {\n        filteredElements[element.id] = element;\n      }\n    }\n  });\n  return filteredElements;\n}\nexport function getType(element) {\n  if ('waypoints' in element) {\n    return 'connection';\n  }\n  if ('x' in element) {\n    return 'shape';\n  }\n  return 'root';\n}\nexport function isFrameElement(element) {\n  return !!(element && element.isFrame);\n}\n\n// helpers ///////////////////////////////\n\nfunction copyObject(src1, src2) {\n  return assign({}, src1 || {}, src2 || {});\n}","map":null,"metadata":{},"sourceType":"module"}