{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\nimport { isExpanded } from '../../../util/DiUtil';\nimport { isLabel } from '../../../util/LabelUtil';\n\n/**\n * Unclaims model IDs on element deletion.\n *\n * @param {Canvas} canvas\n * @param {Injector} injector\n * @param {Moddle} moddle\n * @param {Modeling} modeling\n */\nexport default function UnclaimIdBehavior(canvas, injector, moddle, modeling) {\n  injector.invoke(CommandInterceptor, this);\n  this.preExecute('shape.delete', function (event) {\n    var context = event.context,\n      shape = context.shape,\n      shapeBo = shape.businessObject;\n    if (isLabel(shape)) {\n      return;\n    }\n    if (is(shape, 'bpmn:Participant') && isExpanded(shape)) {\n      moddle.ids.unclaim(shapeBo.processRef.id);\n    }\n    modeling.unclaimId(shapeBo.id, shapeBo);\n  });\n  this.preExecute('connection.delete', function (event) {\n    var context = event.context,\n      connection = context.connection,\n      connectionBo = connection.businessObject;\n    modeling.unclaimId(connectionBo.id, connectionBo);\n  });\n  this.preExecute('canvas.updateRoot', function () {\n    var rootElement = canvas.getRootElement(),\n      rootElementBo = rootElement.businessObject;\n    moddle.ids.unclaim(rootElementBo.id);\n  });\n}\ninherits(UnclaimIdBehavior, CommandInterceptor);\nUnclaimIdBehavior.$inject = ['canvas', 'injector', 'moddle', 'modeling'];","map":null,"metadata":{},"sourceType":"module"}