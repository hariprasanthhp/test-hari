{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\r\n     * @description - Method to construct get req.\r\n     * @param - {string} url\r\n     * @param - params\r\n     */\n    get(url, params) {\n      return this.http.get(url, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    /**\r\n     * @description - Method to construct post req.\r\n     * @param - {any} body\r\n     * @param - params\r\n     */\n    post(url, body, params) {\n      return this.http.post(url, JSON.stringify(body), {\n        params\n      }).pipe(\n        //catchError(this.handleError)\n      );\n    }\n    /**\r\n     * @description - Method to construct put req.\r\n     * @param - {string} url\r\n     * @param - { any } body\r\n     * @param - params.\r\n     */\n    put(url, body, params) {\n      return this.http.put(url, JSON.stringify(body), {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    /**\r\n     * @description - Method to construct delete\r\n     * @param - { string } url.\r\n     */\n    delete(url) {\n      return this.http.delete(url).pipe(catchError(this.handleError));\n    }\n    /**\r\n     * @description - Method to handle error.\r\n     * @param - error.\r\n     */\n    handleError(error) {\n      let errMsg = '';\n      if (error.error instanceof Error) {\n        const body = error.json() || '';\n        const err = body.error || body.Message || JSON.stringify(body);\n        errMsg = `${err}`;\n      } else {\n        errMsg = error.error.message ? error.error.message : error.error.toString();\n      }\n      return errMsg;\n    }\n  }\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}