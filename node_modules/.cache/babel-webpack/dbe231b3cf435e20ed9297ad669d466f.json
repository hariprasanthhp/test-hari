{"ast":null,"code":"import * as Highcharts from 'highcharts/highstock';\nimport Drilldown from \"highcharts/modules/drilldown\";\nimport Highchartsscroller from \"highcharts/modules/accessibility\";\nimport data from \"highcharts/modules/no-data-to-display\";\nimport { combineLatest, of, Subject } from 'rxjs';\nimport { DataTableDirective } from 'angular-datatables';\nimport { environment } from 'src/environments/environment';\nimport { DatePipe } from '@angular/common';\nimport { catchError, map } from 'rxjs/operators';\nimport _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared-utils/date-utils.service\";\nimport * as i2 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i3 from \"../service/health.service\";\nimport * as i4 from \"@angular/platform-browser\";\nimport * as i5 from \"src/app/shared/services/sso-auth.service\";\nimport * as i6 from \"src/app/cco/health/pon-utilization/service/ccochart.service\";\nimport * as i7 from \"src/app/sys-admin/services/common.service\";\nimport * as i8 from \"src/app/support/shared/custom-pipes/shortnumber.pipe\";\nimport * as i9 from \"src/app/shared/services/export-excel.service\";\nimport * as i10 from \"src/app-services/translate.service\";\nimport * as i11 from \"../pon-utilization/service/nfainventory.service\";\nimport * as i12 from \"@angular/router\";\nimport * as i13 from \"src/app/sys-admin/cco-admin/cco-health-threshold/threshold.service\";\nimport * as i14 from \"@angular/common\";\nimport * as i15 from \"@angular/forms\";\nimport * as i16 from \"angular-datatables\";\nimport * as i17 from \"primeng/calendar\";\nimport * as i18 from \"@ng-select/ng-select\";\nimport * as i19 from \"../shared/timeserieschart/timeserieschart.component\";\nconst _c0 = [\"showInfoModal\"];\nfunction CcoOntComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.language[\"Access denied due to RBAC. Please consult your Organization Administrator for access.\"], \"\\n\");\n  }\n}\nfunction CcoOntComponent_a_64_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 58);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_a_64_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.navigateThreshold();\n    });\n    i0.ɵɵtext(1, \"Edit Threshold\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CcoOntComponent_section_65_ng_template_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 83);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r25 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r25.name ? item_r25.name : item_r25);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r25.name ? item_r25.name : item_r25);\n  }\n}\nfunction CcoOntComponent_section_65_ng_template_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 83);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r26 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r26.name ? item_r26.name : item_r26);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r26.name ? item_r26.name : item_r26);\n  }\n}\nfunction CcoOntComponent_section_65_ng_template_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 83);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r27 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r27.name ? item_r27.name : item_r27);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r27.name ? item_r27.name : item_r27);\n  }\n}\nfunction CcoOntComponent_section_65_ng_template_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 83);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r28 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r28.name ? item_r28.name : item_r28);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r28.name ? item_r28.name : item_r28);\n  }\n}\nfunction CcoOntComponent_section_65_ng_template_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 83);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r29 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r29.name ? item_r29.name : item_r29);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r29.name ? item_r29.name : item_r29);\n  }\n}\nfunction CcoOntComponent_section_65_ng_template_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 83);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r30 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r30.name ? item_r30.name : item_r30);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r30.name ? item_r30.name : item_r30);\n  }\n}\nfunction CcoOntComponent_section_65_ng_template_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 83);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r31 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r31.name ? item_r31.name : item_r31);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r31.name ? item_r31.name : item_r31);\n  }\n}\nfunction CcoOntComponent_section_65_ng_template_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 83);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r32 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r32.name ? item_r32.name : item_r32);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r32.name ? item_r32.name : item_r32);\n  }\n}\nfunction CcoOntComponent_section_65_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r34 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 75);\n    i0.ɵɵelementStart(1, \"ng-select\", 84);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoOntComponent_section_65_div_40_Template_ng_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r33 = i0.ɵɵnextContext(2);\n      return ctx_r33.ontSelected = $event;\n    })(\"ngModelChange\", function CcoOntComponent_section_65_div_40_Template_ng_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r35 = i0.ɵɵnextContext(2);\n      return ctx_r35.selectOnt($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r23.language.Ont);\n    i0.ɵɵproperty(\"ngModel\", ctx_r23.ontSelected)(\"items\", ctx_r23.ontDataArray)(\"clearable\", false)(\"searchable\", true);\n  }\n}\nfunction CcoOntComponent_section_65_div_41_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 88);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r36 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r36.language[\"Invalid FSAN\"]);\n  }\n}\nfunction CcoOntComponent_section_65_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 85);\n    i0.ɵɵelementStart(1, \"input\", 86);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoOntComponent_section_65_div_41_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r38);\n      const ctx_r37 = i0.ɵɵnextContext(2);\n      return ctx_r37.fsan = $event;\n    })(\"keypress\", function CcoOntComponent_section_65_div_41_Template_input_keypress_1_listener($event) {\n      i0.ɵɵrestoreView(_r38);\n      const ctx_r39 = i0.ɵɵnextContext(2);\n      return ctx_r39.removespecialcharacter($event);\n    })(\"keyup\", function CcoOntComponent_section_65_div_41_Template_input_keyup_1_listener($event) {\n      i0.ɵɵrestoreView(_r38);\n      const ctx_r40 = i0.ɵɵnextContext(2);\n      return ctx_r40.fsanChanges($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, CcoOntComponent_section_65_div_41_small_2_Template, 2, 1, \"small\", 87);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r24.language.all);\n    i0.ɵɵproperty(\"ngModel\", ctx_r24.fsan);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r24.fsanvalid);\n  }\n}\nconst _c1 = function () {\n  return {\n    width: \"100%\",\n    height: \"38px\"\n  };\n};\nconst _c2 = function () {\n  return {\n    height: \"36px\"\n  };\n};\nconst _c3 = function () {\n  return {\n    standalone: true\n  };\n};\nfunction CcoOntComponent_section_65_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r42 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 59);\n    i0.ɵɵelementStart(1, \"div\", 60);\n    i0.ɵɵelementStart(2, \"div\", 61);\n    i0.ɵɵelementStart(3, \"label\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 62);\n    i0.ɵɵelementStart(6, \"p-calendar\", 63);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoOntComponent_section_65_Template_p_calendar_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r41 = i0.ɵɵnextContext();\n      return ctx_r41.fromDate = $event;\n    })(\"onSelect\", function CcoOntComponent_section_65_Template_p_calendar_onSelect_6_listener() {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return ctx_r43.changeDate();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 61);\n    i0.ɵɵelementStart(8, \"label\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 62);\n    i0.ɵɵelementStart(11, \"p-calendar\", 64);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoOntComponent_section_65_Template_p_calendar_ngModelChange_11_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r44 = i0.ɵɵnextContext();\n      return ctx_r44.toDate = $event;\n    })(\"onSelect\", function CcoOntComponent_section_65_Template_p_calendar_onSelect_11_listener() {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r45 = i0.ɵɵnextContext();\n      return ctx_r45.changeDate();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 65);\n    i0.ɵɵelementStart(13, \"label\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"ng-select\", 66);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoOntComponent_section_65_Template_ng_select_ngModelChange_15_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r46 = i0.ɵɵnextContext();\n      return ctx_r46.regionSelected = $event;\n    })(\"ngModelChange\", function CcoOntComponent_section_65_Template_ng_select_ngModelChange_15_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r47 = i0.ɵɵnextContext();\n      return ctx_r47.getLocationValue($event);\n    });\n    i0.ɵɵtemplate(16, CcoOntComponent_section_65_ng_template_16_Template, 2, 2, \"ng-template\", 67);\n    i0.ɵɵtemplate(17, CcoOntComponent_section_65_ng_template_17_Template, 2, 2, \"ng-template\", 68);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 69);\n    i0.ɵɵelementStart(19, \"label\");\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"ng-select\", 70);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoOntComponent_section_65_Template_ng_select_ngModelChange_21_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r48 = i0.ɵɵnextContext();\n      return ctx_r48.locationSelected = $event;\n    })(\"ngModelChange\", function CcoOntComponent_section_65_Template_ng_select_ngModelChange_21_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r49 = i0.ɵɵnextContext();\n      return ctx_r49.getSystemValue($event);\n    });\n    i0.ɵɵtemplate(22, CcoOntComponent_section_65_ng_template_22_Template, 2, 2, \"ng-template\", 67);\n    i0.ɵɵtemplate(23, CcoOntComponent_section_65_ng_template_23_Template, 2, 2, \"ng-template\", 68);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"div\", 71);\n    i0.ɵɵelementStart(25, \"label\");\n    i0.ɵɵtext(26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"ng-select\", 72);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoOntComponent_section_65_Template_ng_select_ngModelChange_27_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r50 = i0.ɵɵnextContext();\n      return ctx_r50.systemSelected = $event;\n    })(\"ngModelChange\", function CcoOntComponent_section_65_Template_ng_select_ngModelChange_27_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r51 = i0.ɵɵnextContext();\n      return ctx_r51.getInterfaceValue($event);\n    });\n    i0.ɵɵtemplate(28, CcoOntComponent_section_65_ng_template_28_Template, 2, 2, \"ng-template\", 67);\n    i0.ɵɵtemplate(29, CcoOntComponent_section_65_ng_template_29_Template, 2, 2, \"ng-template\", 68);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"div\", 73);\n    i0.ɵɵelementStart(31, \"label\", 74);\n    i0.ɵɵtext(32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"div\", 75);\n    i0.ɵɵelementStart(34, \"ng-select\", 76);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoOntComponent_section_65_Template_ng_select_ngModelChange_34_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r52 = i0.ɵɵnextContext();\n      return ctx_r52.interfaceSelected = $event;\n    })(\"ngModelChange\", function CcoOntComponent_section_65_Template_ng_select_ngModelChange_34_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r53 = i0.ɵɵnextContext();\n      return ctx_r53.getOntValue($event);\n    });\n    i0.ɵɵtemplate(35, CcoOntComponent_section_65_ng_template_35_Template, 2, 2, \"ng-template\", 67);\n    i0.ɵɵtemplate(36, CcoOntComponent_section_65_ng_template_36_Template, 2, 2, \"ng-template\", 68);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(37, \"div\", 73);\n    i0.ɵɵelementStart(38, \"label\", 74);\n    i0.ɵɵtext(39);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(40, CcoOntComponent_section_65_div_40_Template, 2, 5, \"div\", 77);\n    i0.ɵɵtemplate(41, CcoOntComponent_section_65_div_41_Template, 3, 3, \"div\", 78);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(42, \"div\", 79);\n    i0.ɵɵelementStart(43, \"div\", 80);\n    i0.ɵɵelementStart(44, \"button\", 81);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_section_65_Template_button_click_44_listener() {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r54 = i0.ɵɵnextContext();\n      return ctx_r54.applyfilter(true);\n    });\n    i0.ɵɵelementStart(45, \"span\");\n    i0.ɵɵtext(46);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(47, \"button\", 82);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_section_65_Template_button_click_47_listener() {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r55 = i0.ɵɵnextContext();\n      return ctx_r55.clearFilter();\n    });\n    i0.ɵɵelementStart(48, \"span\");\n    i0.ɵɵtext(49);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"Start_Date\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(58, _c1));\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language[\"START_DATE\"]);\n    i0.ɵɵproperty(\"inputStyle\", i0.ɵɵpureFunction0(59, _c2))(\"autoZIndex\", true)(\"ngModel\", ctx_r2.fromDate)(\"showIcon\", true)(\"selectOtherMonths\", true)(\"ngModelOptions\", i0.ɵɵpureFunction0(60, _c3))(\"minDate\", ctx_r2.minDateForstart)(\"maxDate\", ctx_r2.toDate)(\"styleClass\", \"p-cal-custom\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"END_DATE\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(61, _c1));\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language[\"END_DATE\"]);\n    i0.ɵɵproperty(\"inputStyle\", i0.ɵɵpureFunction0(62, _c2))(\"autoZIndex\", true)(\"ngModel\", ctx_r2.toDate)(\"showIcon\", true)(\"selectOtherMonths\", true)(\"ngModelOptions\", i0.ɵɵpureFunction0(63, _c3))(\"maxDate\", ctx_r2.maxDate)(\"minDate\", ctx_r2.fromDate)(\"styleClass\", \"p-cal-custom\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"Region\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language.region);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.regionSelected)(\"items\", ctx_r2.regionDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"Location\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language.Location);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.locationSelected)(\"items\", ctx_r2.locationDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"System\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language.System);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.systemSelected)(\"items\", ctx_r2.systemDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r2.language.Interface);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language.Interface);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.interfaceSelected)(\"items\", ctx_r2.interfaceDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r2.language.ONT, \" / \", ctx_r2.language.FSAN, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.interfaceSelected != \"All\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.interfaceSelected == \"All\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r2.language[\"apply\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"apply\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r2.language[\"TClearFilter\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"TClearFilter\"]);\n  }\n}\nfunction CcoOntComponent_section_66_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 104);\n    i0.ɵɵelementStart(1, \"div\", 105);\n    i0.ɵɵelementStart(2, \"div\", 106);\n    i0.ɵɵelementStart(3, \"span\", 107);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r56 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r56.language.Loading);\n  }\n}\nfunction CcoOntComponent_section_66_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r61 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 108);\n    i0.ɵɵelementStart(1, \"span\", 109);\n    i0.ɵɵelement(2, \"img\", 110);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 111);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_section_66_div_12_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r61);\n      const ctx_r60 = i0.ɵɵnextContext(2);\n      return ctx_r60.errorMsg = \"\";\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 112);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r57 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r57.errorMsg, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction CcoOntComponent_section_66_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 104);\n    i0.ɵɵelementStart(1, \"div\", 105);\n    i0.ɵɵelementStart(2, \"div\", 113);\n    i0.ɵɵelementStart(3, \"span\", 107);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r58 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r58.language.Loading);\n  }\n}\nfunction CcoOntComponent_section_66_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r63 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 108);\n    i0.ɵɵelementStart(1, \"span\", 109);\n    i0.ɵɵelement(2, \"img\", 110);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 111);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_section_66_div_30_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r63);\n      const ctx_r62 = i0.ɵɵnextContext(2);\n      return ctx_r62.packetErrormsg = \"\";\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 112);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r59 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r59.packetErrormsg, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction CcoOntComponent_section_66_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r65 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 89);\n    i0.ɵɵelementStart(1, \"div\", 90);\n    i0.ɵɵelementStart(2, \"div\", 91);\n    i0.ɵɵelementStart(3, \"div\", 27);\n    i0.ɵɵelementStart(4, \"div\", 92);\n    i0.ɵɵelementStart(5, \"div\", 41);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 93);\n    i0.ɵɵelementStart(8, \"button\", 94);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_section_66_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r65);\n      const ctx_r64 = i0.ɵɵnextContext();\n      return ctx_r64.downloadFunction(ctx_r64.chartName, \"#PortCourt\", ctx_r64.chartDownType, ctx_r64.ponChart, ctx_r64.chartTitlePon, ctx_r64.chartId);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 95);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_section_66_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r65);\n      const ctx_r66 = i0.ɵɵnextContext();\n      return ctx_r66.fullScreenExpandFunction(ctx_r66.chartTitlePon, ctx_r66.chartType, \"ponchart\", ctx_r66.ponChart);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 96);\n    i0.ɵɵtemplate(11, CcoOntComponent_section_66_div_11_Template, 5, 1, \"div\", 46);\n    i0.ɵɵtemplate(12, CcoOntComponent_section_66_div_12_Template, 6, 1, \"div\", 47);\n    i0.ɵɵelementStart(13, \"div\", 48);\n    i0.ɵɵelementStart(14, \"h5\", 97);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"h5\", 98);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 99);\n    i0.ɵɵelement(19, \"div\", 100);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"div\", 91);\n    i0.ɵɵelementStart(21, \"div\", 27);\n    i0.ɵɵelementStart(22, \"div\", 92);\n    i0.ɵɵelementStart(23, \"div\", 41);\n    i0.ɵɵtext(24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"div\", 93);\n    i0.ɵɵelementStart(26, \"button\", 101);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_section_66_Template_button_click_26_listener() {\n      i0.ɵɵrestoreView(_r65);\n      const ctx_r67 = i0.ɵɵnextContext();\n      return ctx_r67.downloadFunction(\"low light\", \"#PacketDropped\", ctx_r67.chartDownType, ctx_r67.lowLightData, ctx_r67.chartTitleLowLight, ctx_r67.chartId);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"button\", 102);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_section_66_Template_button_click_27_listener() {\n      i0.ɵɵrestoreView(_r65);\n      const ctx_r68 = i0.ɵɵnextContext();\n      return ctx_r68.fullScreenExpandFunction(ctx_r68.chartTitleLowLight, ctx_r68.chartType, \"Lowlighchart\", ctx_r68.lowLightData);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"div\", 96);\n    i0.ɵɵtemplate(29, CcoOntComponent_section_66_div_29_Template, 5, 1, \"div\", 46);\n    i0.ɵɵtemplate(30, CcoOntComponent_section_66_div_30_Template, 6, 1, \"div\", 47);\n    i0.ɵɵelementStart(31, \"div\", 48);\n    i0.ɵɵelementStart(32, \"h5\", 97);\n    i0.ɵɵtext(33);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(34, \"h5\", 98);\n    i0.ɵɵtext(35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(36, \"div\", 99);\n    i0.ɵɵelement(37, \"div\", 103);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", !ctx_r3.fullScreen ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r3.language[ctx_r3.chartTitlePon] || ctx_r3.chartTitlePon);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.language[ctx_r3.chartTitlePon] || ctx_r3.chartTitlePon, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r3.language.export);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r3.language.expand);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.errorMsg);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r3.loading && !ctx_r3.errorMsg ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r3.language[ctx_r3.chartSubTitle] || ctx_r3.chartSubTitle, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r3.subTitle, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r3.language[ctx_r3.chartTitleLowLight] || ctx_r3.chartTitleLowLight);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.language[ctx_r3.chartTitleLowLight] || ctx_r3.chartTitleLowLight, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r3.language.export);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r3.language.expand);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.packetErrormsg);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r3.loading && !ctx_r3.packetErrormsg ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r3.chartType == \"Ont\" ? ctx_r3.language[ctx_r3.chartSubTitleforLowlight] || ctx_r3.chartSubTitleforLowlight : ctx_r3.language[ctx_r3.chartSubTitle] || ctx_r3.chartSubTitle, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r3.subTitle, \" \");\n  }\n}\nfunction CcoOntComponent_button_75_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r70 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 114);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_button_75_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r70);\n      const ctx_r69 = i0.ɵɵnextContext();\n      return ctx_r69.clearSearch(ctx_r69.searchText);\n    });\n    i0.ɵɵelement(1, \"img\", 115);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CcoOntComponent_div_88_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 116);\n    i0.ɵɵelementStart(1, \"div\", 105);\n    i0.ɵɵelementStart(2, \"div\", 106);\n    i0.ɵɵelementStart(3, \"span\", 107);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r5.language.Loading);\n  }\n}\nfunction CcoOntComponent_tbody_89_tr_1_td_1_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"img\", 121);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CcoOntComponent_tbody_89_tr_1_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r78 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 119);\n    i0.ɵɵelementStart(1, \"a\", 120);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_tbody_89_tr_1_td_1_Template_a_click_1_listener() {\n      i0.ɵɵrestoreView(_r78);\n      const item_r72 = i0.ɵɵnextContext().$implicit;\n      const ctx_r76 = i0.ɵɵnextContext(2);\n      return ctx_r76.applyfilter(false, \"\", item_r72);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵtemplate(3, CcoOntComponent_tbody_89_tr_1_td_1_span_3_Template, 2, 0, \"span\", 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r72 = i0.ɵɵnextContext().$implicit;\n    const ctx_r73 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r73.chartDownType === \"ont\" ? item_r72[\"fsan\"] : item_r72[ctx_r73.chartDownType]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r73.chartType === \"Ont\");\n  }\n}\nfunction CcoOntComponent_tbody_89_tr_1_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r72 = i0.ɵɵnextContext().$implicit;\n    const ctx_r74 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r74.chartDownType === \"ont\" ? item_r72[\"fsan\"] : item_r72[ctx_r74.chartDownType]);\n  }\n}\nfunction CcoOntComponent_tbody_89_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, CcoOntComponent_tbody_89_tr_1_td_1_Template, 4, 2, \"td\", 117);\n    i0.ɵɵtemplate(2, CcoOntComponent_tbody_89_tr_1_td_2_Template, 2, 1, \"td\", 36);\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵelementStart(4, \"div\", 118);\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵelementStart(9, \"div\", 118);\n    i0.ɵɵelementStart(10, \"div\");\n    i0.ɵɵelementStart(11, \"span\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r72 = ctx.$implicit;\n    const ctx_r71 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(item_r72 == null ? null : item_r72.deleted));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r72 == null ? null : item_r72.deleted);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(item_r72.ponCount && ctx_r71.chartType == \"Ont\" ? item_r72.ponCount : item_r72.ponCount && (ctx_r71.chartType !== \"Interface\" || ctx_r71.chartType !== \"Ont\") ? ctx_r71.countconvert(item_r72.ponCount) : \"0\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(item_r72.LowLigthCount && ctx_r71.chartType == \"Ont\" ? item_r72.LowLigthCount : item_r72.LowLigthCount && (ctx_r71.chartType !== \"Interface\" || ctx_r71.chartType !== \"Ont\") ? ctx_r71.countconvert(item_r72.LowLigthCount) : \"0\");\n  }\n}\nfunction CcoOntComponent_tbody_89_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵtemplate(1, CcoOntComponent_tbody_89_tr_1_Template, 13, 4, \"tr\", 53);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r6.tableData);\n  }\n}\nfunction CcoOntComponent_div_100_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 104);\n    i0.ɵɵelementStart(1, \"div\", 105);\n    i0.ɵɵelementStart(2, \"div\", 113);\n    i0.ɵɵelementStart(3, \"span\", 107);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r7.language.Loading);\n  }\n}\nfunction CcoOntComponent_div_101_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r82 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 108);\n    i0.ɵɵelementStart(1, \"span\", 109);\n    i0.ɵɵelement(2, \"img\", 110);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 111);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_div_101_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r82);\n      const ctx_r81 = i0.ɵɵnextContext();\n      return ctx_r81.fullScreenMsg = \"\";\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 112);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r8.fullScreenMsg, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction CcoOntComponent_tr_115_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 52);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 52);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const list_r83 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r9.fullScreenChartType === \"ont\" ? list_r83[\"fsan\"] : list_r83[ctx_r9.fullScreenChartType], \"\", list_r83.deleted ? \" (Deleted)\" : \"\", \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r9.fullScreenChart != \"ponchart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r9.countconvert(list_r83.count));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r9.fullScreenChart != \"Lowlighchart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r9.countconvert(list_r83.count), \" \");\n  }\n}\nfunction CcoOntComponent_div_117_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r88 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 123);\n    i0.ɵɵelementStart(1, \"app-timeserieschart\", 124);\n    i0.ɵɵlistener(\"valueChange\", function CcoOntComponent_div_117_div_1_Template_app_timeserieschart_valueChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r88);\n      const ctx_r87 = i0.ɵɵnextContext(2);\n      return ctx_r87.clearChartContainer($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(2, \"br\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r85 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"wholedata\", item_r85)(\"params\", item_r85.params)(\"paramname\", item_r85.paramname)(\"charttype\", item_r85.charttype)(\"title\", item_r85.title)(\"system\", item_r85.system)(\"interface\", item_r85.interface)(\"divid\", item_r85.divid)(\"chartname\", item_r85.chartname)(\"page\", item_r85.page);\n  }\n}\nfunction CcoOntComponent_div_117_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, CcoOntComponent_div_117_div_1_Template, 3, 10, \"div\", 122);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r10.loadedMultipleTimeseriesChart);\n  }\n}\nfunction CcoOntComponent_ng_template_118_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r91 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 125);\n    i0.ɵɵelementStart(1, \"h5\", 126);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 127);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_ng_template_118_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r91);\n      const modal_r89 = restoredCtx.$implicit;\n      return modal_r89.dismiss(\"Cross click\");\n    });\n    i0.ɵɵelement(6, \"span\", 128);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 129);\n    i0.ɵɵelementStart(8, \"button\", 130);\n    i0.ɵɵlistener(\"click\", function CcoOntComponent_ng_template_118_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r91);\n      const modal_r89 = restoredCtx.$implicit;\n      return modal_r89.close(\"Save click\");\n    });\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r12.modalTitle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.modalInfo, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.language.Ok, \" \");\n  }\n}\nDrilldown(Highcharts);\nHighchartsscroller(Highcharts);\ndata(Highcharts);\nexport let CcoOntComponent = /*#__PURE__*/(() => {\n  class CcoOntComponent {\n    constructor(dateUtilsService, dialogService, healthService, titleService, sso, CcochartService, commonOrgService, ShortnumberPipe, exportExcelService, translateService, nfainventoryservice, route, router, service) {\n      this.dateUtilsService = dateUtilsService;\n      this.dialogService = dialogService;\n      this.healthService = healthService;\n      this.titleService = titleService;\n      this.sso = sso;\n      this.CcochartService = CcochartService;\n      this.commonOrgService = commonOrgService;\n      this.ShortnumberPipe = ShortnumberPipe;\n      this.exportExcelService = exportExcelService;\n      this.translateService = translateService;\n      this.nfainventoryservice = nfainventoryservice;\n      this.route = route;\n      this.router = router;\n      this.service = service;\n      this.hasScopeAccess = false;\n      this.language = {};\n      this.maxDate = new Date();\n      this.minDateForstart = new Date(new Date().setDate(new Date().getDate() - 727));\n      this.regionSelected = \"All\";\n      this.locationSelected = \"All\";\n      this.systemSelected = \"All\";\n      this.interfaceSelected = \"All\";\n      this.ontSelected = \"All\";\n      this.ontDataArray = [\"All\"];\n      this.regionDataArray = [\"All\"];\n      this.systemDataArray = [\"All\"];\n      this.interfaceDataArray = [\"All\"];\n      this.locationDataArray = [\"All\"];\n      this.groupBy = \"region\";\n      this.fullScreen = false;\n      this.fullScreen_Filter = false;\n      this.hideInterface = false;\n      this.loadedMultipleTimeseriesChart = [];\n      this.chartTitlePon = 'HBIPErrorbyregion';\n      this.chartTitleLowLight = 'HLowLightLevelbyregion';\n      this.chartType = \"Region\";\n      this.chartSubTitle = 'Select a region to view locations in that region';\n      this.chartDownType = 'region';\n      this.tableName = \"Regions\";\n      this.searchType = 'Search regions';\n      this.chartId = 'regionId';\n      this.chartName = 'PON Error Rate';\n      this.PonChart = {\n        location: {},\n        system: {},\n        interface: {},\n        ont: {}\n      };\n      this.lowLightChart = {\n        location: {},\n        system: {},\n        interface: {},\n        ont: {}\n      };\n      this.last24hours = false;\n      this.tableData = [];\n      this.redenderOnce = false;\n      this.dtTrigger = new Subject();\n      this.dtTrigger1 = new Subject();\n      this.dtOptions = {};\n      this.fullScreenChartName = '';\n      this.idCount = 0;\n      this.bipErrorCount = 0;\n      this.lowlightlevelCounts = 0;\n      this.nosystem = false;\n      this.frTable = this.translateService.fr;\n      this.esTable = this.translateService.es;\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.tableLanguageOptions();\n        this.applyfilter(true);\n        this.titleService.setTitle(`${this.language['ONT']} - ${this.language['Health']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      });\n    }\n    ngOnInit() {\n      var _a;\n      this.titleService.setTitle(`${this.language['ONT']} - ${this.language['Health']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      this.getData();\n      let scopes = this.sso.getScopes();\n      if (((_a = scopes === null || scopes === void 0 ? void 0 : scopes['cloud.rbac.coc.operations.health.monitoringthresholds']) === null || _a === void 0 ? void 0 : _a.indexOf('write')) !== -1) {\n        this.hasWriteAccess = true;\n      }\n      if (environment.VALIDATE_SCOPE) {\n        if (scopes['cloud.rbac.coc.health.ont']) {\n          this.hasScopeAccess = true;\n        }\n      } else {\n        this.hasScopeAccess = true;\n      }\n      if (!this.hasScopeAccess) {\n        this.sso.setPageAccess(false);\n        return;\n      } else {\n        this.sso.setPageAccess(true);\n      }\n      this.dtOptions = {\n        pagingType: 'full_numbers',\n        pageLength: 10,\n        lengthChange: true,\n        processing: false,\n        dom: 'tipr',\n        destroy: true,\n        ordering: true,\n        order: [],\n        columnDefs: [{\n          targets: [2]\n        }]\n      };\n      Highcharts.wrap(Highcharts.Tooltip.prototype, 'refresh', function (p, points, mouseEvent) {\n        p.call(this, points, mouseEvent);\n        if (!this.isHidden && this.shared) {\n          var seriesTooltipBorderColor = points[0] && points[0].series && points[0].series.options.tooltip && points[0].series.options.tooltip.borderColor,\n            borderColor = seriesTooltipBorderColor,\n            label = this.label;\n          if (label && borderColor) {\n            label.attr({\n              stroke: borderColor\n            });\n          }\n        }\n      });\n      this.route.queryParams.subscribe(params => {\n        if (params['fsan']) {\n          this.fsan = params['fsan'];\n        }\n      });\n      this.count = 0;\n      let date = new Date();\n      this.fromDate = new Date(date.getTime() - 1 * 24 * 60 * 60 * 1000);\n      this.toDate = new Date();\n      this.tableLanguageOptions();\n      this.getRegionsValue();\n      this.applyfilter(true);\n      //Total Count\n      this.totalOnt = this.healthService.getOnt().subscribe(res => {\n        var _a;\n        this.ontCounts = (_a = res === null || res === void 0 ? void 0 : res.count) === null || _a === void 0 ? void 0 : _a.toLocaleString();\n      });\n      //quarantine\n      this.quarantinedCount = this.nfainventoryservice.GetPonCount('quarantine').subscribe(res => {\n        var _a;\n        this.quarantinedCounts = (_a = res === null || res === void 0 ? void 0 : res.count) === null || _a === void 0 ? void 0 : _a.toLocaleString();\n      });\n      // ONTS WITH HIGH BIP ERROR count\n      let startdate = Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000);\n      let endDate = Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000);\n      this.bipCount = this.healthService.getOntBipError(startdate, endDate).subscribe(res => {\n        this.bipErrorCount = Object.values(res).toLocaleString();\n      });\n      //ONT WITH LOW LIGHT LEVELS count\n      this.lowCount = this.healthService.getLowlightlevelcount(startdate, endDate).subscribe(res => {\n        if (res) {\n          Object.values(res).forEach(element => {\n            if (element.count && element.count != 'undefined' && element.deleted != true) this.lowlightlevelCounts = this.lowlightlevelCounts + element.count;\n          });\n          this.lowlightlevelCounts = this.lowlightlevelCounts.toLocaleString();\n        }\n      });\n    }\n    convert_number(value) {\n      if (value) {\n        return parseFloat((value * 100).toPrecision(12));\n      } else {\n        return value;\n      }\n    }\n    getData() {\n      this.service.getThresholds().subscribe(data => {\n        this.loading = false;\n        this.thresholdData = data;\n      }, err => {\n        this.loading = false;\n      });\n    }\n    tableLanguageOptions() {\n      if (this.language.fileLanguage == 'fr') {\n        this.dtOptions.language = this.frTable;\n      } else if (this.language.fileLanguage == 'es') {\n        this.dtOptions.language = this.esTable;\n      } else if (this.language.fileLanguage == 'de_DE') {\n        this.dtOptions.language = this.translateService.de_DE;\n      } else if (this.language.fileLanguage == 'en' && this.dtOptions.language) {\n        delete this.dtOptions.language;\n      }\n    }\n    getRegionsValue() {\n      this.regionsSubject = this.healthService.getRegions().subscribe(res => {\n        let counts = {};\n        res.forEach(x => {\n          counts[x.name] = (counts[x.name] || 0) + 1;\n        });\n        res.forEach((element, index) => {\n          var _a;\n          if (counts[element['name']] > 1) {\n            element.name = element.name + \" (\" + ((_a = element.fqn) === null || _a === void 0 ? void 0 : _a.split('=')[1].split(',')[0]) + \")\";\n          }\n        });\n        res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n        this.regionDataArray = [...this.regionDataArray, ...res];\n      }, error => {});\n    }\n    getLocationValue(event) {\n      let id = this.regionSelected == \"All\" ? \"\" : this.regionSelected;\n      this.locationSelected = \"All\";\n      this.systemSelected = \"All\";\n      this.interfaceSelected = \"All\";\n      this.ontSelected = \"All\";\n      this.locationDataArray = [\"All\"];\n      this.systemDataArray = [\"All\"];\n      this.interfaceDataArray = [\"All\"];\n      this.ontDataArray = [\"All\"];\n      this.fsan = null;\n      if (this.regionSelected != \"All\") {\n        this.LocationSubject = this.healthService.getLocations(id).subscribe(res => {\n          this.locationDataArray = [\"All\"];\n          this.locationDataArray = [...this.locationDataArray, ...res];\n        }, error => {});\n      }\n      this.regionDataArray.forEach(element => {\n        if (element.id == this.regionSelected) {\n          this.regionName = element.name;\n          this.PonChart.location = {\n            region: this.regionSelected,\n            regionname: this.regionName\n          };\n          this.lowLightChart.location = {\n            region: this.regionSelected,\n            regionname: this.regionName\n          };\n        }\n      });\n    }\n    getSystemValue(event) {\n      this.fsan = null;\n      this.systemSelected = \"All\";\n      this.interfaceSelected = \"All\";\n      this.ontSelected = \"All\";\n      this.systemDataArray = [\"All\"];\n      this.interfaceDataArray = [\"All\"];\n      this.ontDataArray = [\"All\"];\n      let regionId = this.regionSelected == \"All\" ? \"\" : this.regionSelected;\n      let locationId = this.locationSelected == \"All\" ? \"\" : this.locationSelected;\n      if (this.locationSelected != \"All\" && this.regionSelected != \"All\") {\n        this.systemSubject = this.healthService.getSystems(regionId, locationId, 'ont.pon').subscribe(res => {\n          this.systemDataArray = [\"All\"];\n          this.systemDataArray = [...this.systemDataArray, ...res];\n        }, error => {});\n      }\n      this.locationDataArray.forEach(element => {\n        if (element.id == this.locationSelected) {\n          this.locationName = element.name;\n          this.PonChart.system = {\n            region: this.regionSelected,\n            regionname: this.regionName,\n            location: this.locationSelected,\n            locationname: this.locationName\n          };\n          this.lowLightChart.system = {\n            region: this.regionSelected,\n            regionname: this.regionName,\n            location: this.locationSelected,\n            locationname: this.locationName\n          };\n        }\n      });\n    }\n    getInterfaceValue(event) {\n      this.interfaceSelected = \"All\";\n      this.ontSelected = \"All\";\n      this.interfaceDataArray = [\"All\"];\n      this.ontDataArray = [\"All\"];\n      this.fsan = null;\n      let params1 = {\n        system: this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n        interfaceCategory: \"pon\"\n      };\n      let query = \"\";\n      for (var key in params1) {\n        if (params1[key] == undefined || params1[key] == \"\" || params1[key] === []) {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(params1[key]);\n      }\n      if (this.systemSelected != \"All\" && this.locationSelected != \"All\" && this.regionSelected != \"All\") {\n        this.healthService.GetInterfaces(query, 'ont').subscribe(res => {\n          res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n            numeric: true\n          }));\n          this.interfaceDataArray = ['All'];\n          this.interfaceDataArray = [...this.interfaceDataArray, ...res];\n        });\n        this.systemDataArray.forEach(element => {\n          if (element.uuid == this.systemSelected) {\n            this.systemName = element.name;\n            this.PonChart.interface = {\n              region: this.regionSelected,\n              regionname: this.regionName,\n              location: this.locationSelected,\n              locationname: this.locationName,\n              system: this.systemSelected,\n              systemname: this.systemName\n            };\n            this.lowLightChart.interface = {\n              region: this.regionSelected,\n              regionname: this.regionName,\n              location: this.locationSelected,\n              locationname: this.locationName,\n              system: this.systemSelected,\n              systemname: this.systemName\n            };\n          }\n        });\n      }\n    }\n    getOntValue(event) {\n      this.ontSelected = \"All\";\n      this.ontDataArray = [\"All\"];\n      this.fsan = null;\n      let params1 = {\n        system: this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n        interface: this.interfaceSelected == \"All\" ? \"\" : this.interfaceSelected\n      };\n      let query = \"\";\n      for (var key in params1) {\n        if (params1[key] == undefined || params1[key] == \"\" || params1[key] === []) {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(params1[key]);\n      }\n      if (this.interfaceSelected != \"All\" && this.systemSelected != \"All\" && this.locationSelected != \"All\" && this.regionSelected != \"All\") {\n        this.healthService.GetOntNames(query).subscribe(res => {\n          this.ontDataArray = ['All'];\n          this.ontDataArray = [...this.ontDataArray, ...res];\n        });\n        this.interfaceDataArray.forEach(element => {\n          if (element.name == this.interfaceSelected) {\n            this.interfaceName = element.name;\n            this.PonChart.ont = {\n              region: this.regionSelected,\n              regionname: this.regionName,\n              location: this.locationSelected,\n              locationname: this.locationName,\n              system: this.systemSelected,\n              systemname: this.systemName,\n              interface: this.interfaceSelected,\n              interfacename: this.interfaceName\n            };\n            this.lowLightChart.ont = {\n              region: this.regionSelected,\n              regionname: this.regionName,\n              location: this.locationSelected,\n              locationname: this.locationName,\n              system: this.systemSelected,\n              systemname: this.systemName,\n              interface: this.interfaceSelected,\n              interfacename: this.interfaceName\n            };\n          }\n        });\n      }\n    }\n    selectOnt(event) {\n      this.fsan = null;\n      this.ontDataArray.forEach(element => {\n        if (element.fsan == this.ontSelected) {\n          this.ontName = element.name;\n          this.PonChart.ont = {\n            region: this.regionSelected,\n            regionname: this.regionName,\n            location: this.locationSelected,\n            locationname: this.locationName,\n            system: this.systemSelected,\n            systemname: this.systemName,\n            interface: this.interfaceSelected,\n            interfacename: this.interfaceName,\n            ont: this.ontSelected,\n            ontname: this.ontName\n          };\n          this.lowLightChart.ont = {\n            region: this.regionSelected,\n            regionname: this.regionName,\n            location: this.locationSelected,\n            locationname: this.locationName,\n            system: this.systemSelected,\n            systemname: this.systemName,\n            interface: this.interfaceSelected,\n            interfacename: this.interfaceName,\n            ont: this.ontSelected,\n            ontname: this.ontName\n          };\n        }\n      });\n    }\n    removespecialcharacter(event) {\n      var key;\n      key = event.keyCode;\n      return key > 47 && key < 58 || key > 64 && key < 91 || key > 96 && key < 123;\n    }\n    fsanChanges($event) {\n      if (this.fsan.length == 0 || this.fsan.length == 12) this.fsanvalid = false;\n      this.interfaceSelected = \"All\";\n      this.ontSelected = \"All\";\n      this.regionSelected = \"All\";\n      this.systemSelected = \"All\";\n      this.locationSelected = \"All\";\n      this.locationDataArray = [\"All\"];\n      this.systemDataArray = [\"All\"];\n      this.interfaceDataArray = [\"All\"];\n      this.ontDataArray = [\"All\"];\n    }\n    applyfilter(val, chart, data) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26;\n      this.nosystem = false;\n      if (val || chart) {\n        this.searchText = '';\n        if ((chart === null || chart === void 0 ? void 0 : chart.type) == \"Ont\") {\n          this.rerender();\n        }\n      }\n      if (!this.validateStartEndDates()) {\n        this.modalTitle = this.language.Time_Period;\n        this.openModalInfo();\n        return;\n      }\n      ;\n      if (this.fsanValidated(\"d\")) return;\n      this.fromDate = this.fromDate;\n      this.toDate = this.toDate;\n      if (this.fullScreen == true) {\n        this.fullScreen_Filter = true;\n        if (this.interfaceSelected && this.interfaceSelected != \"All\") {\n          let chartname;\n          this.chartId = 'ont';\n          if (this.fullScreenChart == \"Lowlighchart\") {\n            chartname = 'Low Level Light By Ont';\n          } else if (this.fullScreenChart == \"ponchart\") {\n            chartname = 'Bip Error By Ont';\n          }\n          this.fullScreenExpandFunction(chartname, 'Ont', this.fullScreenChart, '', this.chartId);\n          return;\n        }\n        if (this.systemSelected && this.systemSelected != \"All\") {\n          let chartNames;\n          this.chartId = 'interface';\n          if (this.fullScreenChart == \"ponchart\") {\n            chartNames = 'HBIPErrorByInterface';\n          } else if (this.fullScreenChart == \"Lowlighchart\") {\n            chartNames = 'HLowLightLevelByInterface';\n          }\n          this.fullScreenExpandFunction(chartNames, 'Interface', this.fullScreenChart, '', this.chartId);\n          return;\n        }\n        if (this.locationSelected && this.locationSelected != \"All\") {\n          let chartNames;\n          this.chartId = 'systemId';\n          if (this.fullScreenChart == \"ponchart\") {\n            chartNames = 'HBIPErrorBySystem';\n          } else if (this.fullScreenChart == \"Lowlighchart\") {\n            chartNames = 'HLowLightLevelBySystem';\n          }\n          this.fullScreenExpandFunction(chartNames, 'System', this.fullScreenChart, '', this.chartId);\n          return;\n        }\n        if (this.regionSelected && this.regionSelected != \"All\") {\n          let chartNames;\n          this.chartId = 'locationId';\n          if (this.fullScreenChart == \"ponchart\") {\n            chartNames = 'HBIPErrorByLocation';\n          } else if (this.fullScreenChart == \"Lowlighchart\") {\n            chartNames = 'HLowLightLevelByLocation';\n          }\n          this.fullScreenExpandFunction(chartNames, 'Location', this.fullScreenChart, '', this.chartId);\n          return;\n        }\n        if (this.regionSelected == \"All\") {\n          let chartNames;\n          this.chartId = \"regionId\";\n          if (this.fullScreenChart == \"ponchart\") {\n            chartNames = 'HBIPErrorbyregion';\n          } else if (this.fullScreenChart == \"Lowlighchart\") {\n            chartNames = 'HLowLightLevelbyregion';\n          }\n          this.fullScreenExpandFunction(chartNames, 'Region', this.fullScreenChart, '', this.chartId);\n          return;\n        }\n      } else {\n        this.hideInterface = false;\n        this.singleTimeseries = false;\n        this.fullScreen_Filter = false;\n        if (this.fsan) {\n          this.loadedMultipleTimeseriesChart = [];\n          this.hideInterface = true;\n          let params = {\n            tenant: \"0\",\n            startTime: this.fromDate,\n            endTime: this.toDate,\n            fsan: this.fsan\n          };\n          params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n          let paramsname = {\n            ont: this.fsanName\n          };\n          this.singleTimeseries = true;\n          this.nosystem = true;\n          this.loadMultipleChart(params, paramsname, \"General\", this.fsan, this.fsan);\n          return;\n        }\n        if (this.ontSelected && this.ontSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Ont\" || (data === null || data === void 0 ? void 0 : data.ont)) {\n          if (chart || data) {\n            let isTimeSeries, date, endDate, groupBy;\n            isTimeSeries = true;\n            date = this.fromDate;\n            endDate = this.toDate;\n            groupBy = \"\";\n            this.selectOnt(chart);\n            let ontselected = chart.category ? chart.category : data.fsan;\n            if (isTimeSeries) {\n              let params = {\n                tenant: \"0\",\n                startTime: this.fromDate,\n                endTime: this.toDate,\n                region: ((_a = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _a === void 0 ? void 0 : _a.region) ? (_b = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _b === void 0 ? void 0 : _b.region : this.regionSelected ? this.regionSelected : this.regionSelected == \"All\" || chart.type == \"Location\" ? \"\" : this.regionSelected,\n                location: ((_c = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _c === void 0 ? void 0 : _c.location) ? (_d = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _d === void 0 ? void 0 : _d.location : this.locationSelected ? this.locationSelected : this.locationSelected == \"All\" ? \"\" : this.locationSelected,\n                system: ((_e = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _e === void 0 ? void 0 : _e.system) ? (_f = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _f === void 0 ? void 0 : _f.system : this.systemSelected ? this.systemSelected : this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n                interface: ((_g = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _g === void 0 ? void 0 : _g.interface) ? (_h = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _h === void 0 ? void 0 : _h.interface : this.interfaceSelected ? this.interfaceSelected : this.interfaceName == \"All\" ? \"\" : this.interfaceName,\n                fsan: ontselected\n              };\n              params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n              let paramsName = {\n                regionname: ((_j = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _j === void 0 ? void 0 : _j.regionname) ? (_k = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _k === void 0 ? void 0 : _k.regionname : this.regionNameSelected,\n                locationname: ((_l = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _l === void 0 ? void 0 : _l.locationname) ? (_m = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _m === void 0 ? void 0 : _m.locationname : this.locationNameSelected,\n                systemname: ((_o = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _o === void 0 ? void 0 : _o.systemname) ? (_p = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _p === void 0 ? void 0 : _p.systemname : this.systemNameSelected,\n                interfacename: ((_q = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _q === void 0 ? void 0 : _q.interface) ? (_r = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _r === void 0 ? void 0 : _r.interface : this.interfaceSelected,\n                ont: chart.name ? chart.name : data.ont,\n                fsan: ontselected\n              };\n              this.singleTimeseries = true;\n              let chartName = 'ontPonError' + ontselected;\n              this.loadMultipleChart(params, paramsName, \"General\", chartName, ontselected);\n              return;\n            }\n          } else {\n            this.loadedMultipleTimeseriesChart = [];\n            this.hideInterface = true;\n            let params = {\n              tenant: \"0\",\n              startTime: this.fromDate,\n              endTime: this.toDate,\n              fsan: this.ontSelected == \"All\" ? \"\" : this.ontSelected\n            };\n            params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n            let paramsName = {\n              regionname: this.regionName,\n              locationname: this.locationName,\n              systemname: this.systemName,\n              interfacename: this.interfaceName,\n              ont: this.ontSelected\n            };\n            this.singleTimeseries = true;\n            this.loadMultipleChart(params, paramsName, \"General\", \"Genernal\", this.ontSelected);\n            return;\n          }\n        }\n        if (this.interfaceSelected && this.interfaceSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Interface\" || (data === null || data === void 0 ? void 0 : data.interface)) {\n          this.chartTitlePon = 'Bip Error By Ont';\n          this.chartTitleLowLight = 'Low Level Light By Ont';\n          this.chartType = \"Ont\";\n          this.chartSubTitle = 'Ont_Bip_Sub';\n          this.chartSubTitleforLowlight = 'Ont_low_Sub';\n          this.chartDownType = \"ont\";\n          this.tableName = \"ONTs\";\n          this.chartId = 'ont';\n          this.searchType = 'Search ONTs';\n          let value = val ? {\n            type: \"System\",\n            valueType: \"ponchart\",\n            category: this.interfaceSelected,\n            name: this.interfaceName,\n            extradata: this.lowLightChart.interface\n          } : chart;\n          let groupBy, chartsId;\n          groupBy = \"ont\";\n          this.regionSelected = ((_s = value.extradata) === null || _s === void 0 ? void 0 : _s.region) ? (_t = value.extradata) === null || _t === void 0 ? void 0 : _t.region : this.regionSelected;\n          this.locationSelected = ((_u = value.extradata) === null || _u === void 0 ? void 0 : _u.location) ? (_v = value.extradata) === null || _v === void 0 ? void 0 : _v.location : this.locationSelected;\n          this.systemSelected = ((_w = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _w === void 0 ? void 0 : _w.system) ? (_x = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _x === void 0 ? void 0 : _x.system : this.systemSelected;\n          this.systemNameSelected = ((_y = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _y === void 0 ? void 0 : _y.systemname) ? (_z = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _z === void 0 ? void 0 : _z.systemname : this.systemNameSelected, this.interfaceSelected = value.category ? value.category : data.interface;\n          this.interfaceName = value.name ? value.name : data.interface;\n          if (!val) this.getOntValue(value);\n          this.extraData = {\n            region: this.regionSelected,\n            regionname: this.regionNameSelected ? this.regionNameSelected : (_0 = value === null || value === void 0 ? void 0 : value.extradata) === null || _0 === void 0 ? void 0 : _0.regionname,\n            location: this.locationSelected,\n            locationname: this.locationNameSelected ? this.locationNameSelected : (_1 = value === null || value === void 0 ? void 0 : value.extradata) === null || _1 === void 0 ? void 0 : _1.locationname,\n            system: this.systemSelected,\n            systemname: this.systemNameSelected ? this.systemNameSelected : (_2 = value === null || value === void 0 ? void 0 : value.extradata) === null || _2 === void 0 ? void 0 : _2.systemname,\n            interface: this.interfaceSelected,\n            interfacename: this.interfaceName\n          };\n          this.lowLightChart.ont = this.extraData;\n          this.PonChart.ont = this.extraData;\n          chartsId = \"Ont_chart\";\n          this.params = {\n            tenant: \"0\",\n            startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n            endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n            region: ((_3 = value === null || value === void 0 ? void 0 : value.extradata) === null || _3 === void 0 ? void 0 : _3.region) ? (_4 = value === null || value === void 0 ? void 0 : value.extradata) === null || _4 === void 0 ? void 0 : _4.region : this.regionSelected ? this.regionSelected : this.regionSelected == \"All\" || value.type == \"Location\" ? \"\" : this.regionSelected,\n            location: ((_5 = value === null || value === void 0 ? void 0 : value.extradata) === null || _5 === void 0 ? void 0 : _5.location) ? (_6 = value === null || value === void 0 ? void 0 : value.extradata) === null || _6 === void 0 ? void 0 : _6.location : this.locationSelected ? this.locationSelected : this.locationSelected == \"All\" ? \"\" : this.locationSelected,\n            system: ((_7 = value === null || value === void 0 ? void 0 : value.extradata) === null || _7 === void 0 ? void 0 : _7.system) ? (_8 = value === null || value === void 0 ? void 0 : value.extradata) === null || _8 === void 0 ? void 0 : _8.system : this.systemSelected ? this.systemSelected : this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n            interface: value.category ? value.category : this.interfaceSelected ? this.interfaceSelected : this.interfaceSelected == \"All\" ? \"\" : this.interfaceSelected,\n            groupBy: groupBy\n          };\n          this.loading = true;\n          this.makeQuery();\n          return;\n        }\n        if (this.systemSelected && this.systemSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"System\" || (data === null || data === void 0 ? void 0 : data.system) || this.locationSelected && this.locationSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Location\" || (data === null || data === void 0 ? void 0 : data.location) || this.regionSelected && this.regionSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Region\" || (data === null || data === void 0 ? void 0 : data.region)) {\n          if (this.systemSelected && this.systemSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"System\" || (data === null || data === void 0 ? void 0 : data.system)) {\n            this.loadedMultipleTimeseriesChart = [];\n            this.chartTitlePon = \"HBIPErrorByInterface\";\n            this.chartTitleLowLight = \"HLowLightLevelByInterface\";\n            this.chartType = \"Interface\";\n            this.chartSubTitle = 'Health_Interface_Sub';\n            this.chartDownType = \"interface\";\n            this.tableName = \"Interfaces\";\n            this.chartId = 'interface';\n            this.searchType = 'Search interfaces';\n            let value = val ? {\n              type: \"System\",\n              valueType: \"ponchart\",\n              category: this.systemSelected,\n              name: this.systemName,\n              extradata: this.lowLightChart.system\n            } : chart;\n            let groupBy, chartsId;\n            groupBy = \"interface\";\n            this.regionSelected = ((_9 = value.extradata) === null || _9 === void 0 ? void 0 : _9.region) ? (_10 = value.extradata) === null || _10 === void 0 ? void 0 : _10.region : this.regionSelected;\n            this.locationSelected = ((_11 = value.extradata) === null || _11 === void 0 ? void 0 : _11.location) ? (_12 = value.extradata) === null || _12 === void 0 ? void 0 : _12.location : this.locationSelected;\n            this.systemSelected = value.category ? value.category : data.systemId;\n            this.systemNameSelected = value.name ? value.name : data === null || data === void 0 ? void 0 : data.system;\n            if (!val) this.getInterfaceValue(value);\n            console.log(this.systemSelected);\n            this.extraData = {\n              region: this.regionSelected,\n              regionname: ((_13 = value === null || value === void 0 ? void 0 : value.extradata) === null || _13 === void 0 ? void 0 : _13.regionname) ? (_14 = value === null || value === void 0 ? void 0 : value.extradata) === null || _14 === void 0 ? void 0 : _14.regionname : this.regionNameSelected,\n              location: this.locationSelected,\n              locationname: ((_15 = value === null || value === void 0 ? void 0 : value.extradata) === null || _15 === void 0 ? void 0 : _15.locationname) ? (_16 = value === null || value === void 0 ? void 0 : value.extradata) === null || _16 === void 0 ? void 0 : _16.locationname : this.locationNameSelected,\n              system: this.systemSelected,\n              systemname: this.systemNameSelected\n            };\n            this.lowLightChart.interface = this.extraData;\n            this.PonChart.interface = this.extraData;\n            chartsId = \"Interface_chart\";\n            this.params = {\n              tenant: \"0\",\n              startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n              endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n              region: ((_17 = value === null || value === void 0 ? void 0 : value.extradata) === null || _17 === void 0 ? void 0 : _17.region) ? (_18 = value === null || value === void 0 ? void 0 : value.extradata) === null || _18 === void 0 ? void 0 : _18.region : this.regionSelected ? this.regionSelected : this.regionSelected == \"All\" || value.type == \"Location\" ? \"\" : this.regionSelected,\n              location: ((_19 = value === null || value === void 0 ? void 0 : value.extradata) === null || _19 === void 0 ? void 0 : _19.location) ? (_20 = value === null || value === void 0 ? void 0 : value.extradata) === null || _20 === void 0 ? void 0 : _20.location : this.locationSelected ? this.locationSelected : this.locationSelected == \"All\" ? \"\" : this.locationSelected,\n              system: value.category ? value.category : this.systemSelected ? this.systemSelected : this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n              groupBy: groupBy\n            };\n            this.loading = true;\n            this.makeQuery();\n            return;\n          }\n          if (this.locationSelected && this.locationSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Location\" || (data === null || data === void 0 ? void 0 : data.location)) {\n            this.chartTitlePon = 'HBIPErrorBySystem';\n            this.chartTitleLowLight = \"HLowLightLevelBySystem\";\n            this.chartType = \"System\";\n            this.chartSubTitle = 'Health_System_Sub';\n            this.tableName = \"Systems\";\n            this.chartDownType = \"system\";\n            this.chartId = 'systemId';\n            this.searchType = 'Search systems';\n            let value = val ? {\n              type: \"Location\",\n              valueType: \"ponchart\",\n              category: this.locationSelected,\n              name: this.locationName,\n              extradata: this.lowLightChart.location\n            } : chart;\n            let groupBy, chartsId;\n            groupBy = \"system\";\n            chartsId = \"System_chart\";\n            this.regionSelected = ((_21 = value.extradata) === null || _21 === void 0 ? void 0 : _21.region) ? (_22 = value.extradata) === null || _22 === void 0 ? void 0 : _22.region : this.regionSelected;\n            this.locationSelected = value.category ? value.category : data.locationId;\n            this.locationNameSelected = value.name ? value.name : data.location;\n            if (!val) this.getSystemValue(value);\n            this.extraData = {\n              region: this.regionSelected,\n              regionname: ((_23 = value.extradata) === null || _23 === void 0 ? void 0 : _23.regionname) ? (_24 = value.extradata) === null || _24 === void 0 ? void 0 : _24.regionname : this.regionNameSelected,\n              location: this.locationSelected,\n              locationname: value.name ? value.name : data.location\n            };\n            this.lowLightChart.system = this.extraData;\n            this.ponChart.system = this.extraData;\n            this.params = {\n              tenant: \"0\",\n              startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n              endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n              region: ((_25 = value === null || value === void 0 ? void 0 : value.extradata) === null || _25 === void 0 ? void 0 : _25.region) ? (_26 = value === null || value === void 0 ? void 0 : value.extradata) === null || _26 === void 0 ? void 0 : _26.region : this.regionSelected ? this.regionSelected : this.regionSelected == \"All\" || value.type == \"Location\" ? \"\" : this.regionSelected,\n              location: value.category ? value.category : this.locationSelected ? this.locationSelected : this.locationSelected == \"All\" ? \"\" : this.locationSelected,\n              groupBy: groupBy\n            };\n            this.loading = true;\n            this.makeQuery();\n            return;\n          }\n          if (this.regionSelected && this.regionSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Region\" || (data === null || data === void 0 ? void 0 : data.region)) {\n            let groupBy, chartsId;\n            this.chartTitlePon = 'HBIPErrorByLocation';\n            this.chartTitleLowLight = \"HLowLightLevelByLocation\";\n            this.chartType = \"Location\";\n            this.chartSubTitle = 'Select a location to view systems in that location';\n            this.chartDownType = 'location';\n            this.tableName = \"Locations\";\n            this.chartId = 'locationId';\n            this.searchType = 'Search locations';\n            let value = val ? {\n              type: \"Region\",\n              valueType: \"ponchart\",\n              category: this.regionSelected,\n              name: this.regionName\n            } : chart;\n            groupBy = \"location\";\n            chartsId = \"Location_chart\";\n            this.extraData = {\n              region: value.category ? value.category : data === null || data === void 0 ? void 0 : data.regionId,\n              regionname: value.name ? value.name : data.region\n            };\n            this.regionSelected = value.category ? value.category : data.regionId;\n            this.regionNameSelected = value.name ? value.name : data.region;\n            this.lowLightChart.location = this.extraData;\n            this.ponChart.location = this.extraData;\n            if (!val) this.getLocationValue(value);\n            this.params = {\n              tenant: \"0\",\n              startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n              endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n              region: value.category ? value.category : data.regionId ? data.regionId : this.regionSelected == \"All\" || value.type == \"Location\" ? \"\" : this.regionSelected,\n              groupBy: groupBy\n            };\n            this.loading = true;\n            this.makeQuery();\n            return;\n          }\n        }\n        this.chartType = \"Region\";\n        this.chartDownType = 'region';\n        this.tableName = \"Regions\";\n        this.chartId = \"regionId\";\n        this.chartTitlePon = 'HBIPErrorbyregion';\n        this.chartSubTitle = 'Select a region to view locations in that region';\n        this.chartTitleLowLight = 'HLowLightLevelbyregion';\n        this.searchType = 'Search regions';\n        let params = {\n          tenant: \"0\",\n          startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n          endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n          groupBy: \"region\"\n        };\n        this.chartId = \"regionId\";\n        params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n        let query = \"\";\n        for (var key in params) {\n          if (params[key] == undefined || params[key] == \"undefined\" || params[key] == \"\") {\n            continue;\n          }\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n        this.loading = true;\n        this.errorMsg = \"\";\n        this.packetErrormsg = \"\";\n        let queryPon = query + '&countBy=ont';\n        let requestEndpoints = [`${environment.API_BASE_URL}health/reports/biperror/count?${queryPon}`, `${environment.API_BASE_URL}health/reports/lowlightlevelcount?${query}`];\n        const requests = [];\n        requestEndpoints.forEach(endpoint => {\n          const req = this.CcochartService.callRestApi(endpoint).pipe(map(res => {\n            return res;\n          }), catchError(error => {\n            return of(error);\n          }));\n          requests.push(req);\n        });\n        this.combineLatest = combineLatest(requests);\n        this.makeParallelRequest();\n      }\n    }\n    makeQuery() {\n      this.params[\"granularity\"] = this.healthService.getGranularity(this.params.startTime, this.params.endTime);\n      let query = \"\";\n      for (var key in this.params) {\n        if (this.params[key] == undefined || this.params[key] == \"undefined\" || this.params[key] == \"\") {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(this.params[key]);\n      }\n      let queryPon = query + '&countBy=ont';\n      let requestEndpoints = [`${environment.API_BASE_URL}health/reports/biperror/count?${queryPon}`, `${environment.API_BASE_URL}health/reports/lowlightlevelcount?${query}`];\n      const requests = [];\n      requestEndpoints.forEach(endpoint => {\n        const req = this.CcochartService.callRestApi(endpoint).pipe(map(res => {\n          return res;\n        }), catchError(error => {\n          return of(error);\n        }));\n        requests.push(req);\n      });\n      this.combineLatest = combineLatest(requests);\n      this.makeParallelRequest(this.extraData);\n    }\n    makeParallelRequest(valueData) {\n      this.parallelReqSubscribtion = this.combineLatest.subscribe(response => {\n        if (response[0] && response[0].error) {\n          if (response[0].status == 401) {\n            this.errorMsg = this.language['Access Denied'];\n          } else {\n            this.errorMsg = this.commonOrgService.pageErrorHandle(response[0]);\n          }\n          this.ponChart = [];\n        } else {\n          response[0] = this.singleCountSort(response[0], \"count\", this.chartType);\n          this.ponChart = response[0];\n          this.ponchartLocMsg = \"\";\n          Highcharts.chart('PortCourtChart', this.chartType !== 'Ont' ? this.PONErrorRateChartOptionsn(Object.assign([], this.ponChart.map(element => Object.assign({}, element))) || [], this.chartType, false, valueData) : this.PONErrorRateChartOptionONT(Object.assign([], this.ponChart.map(element => Object.assign({}, element))) || [], this.chartType, false, valueData));\n          this.GetSubTitle(Object.assign([], this.ponChart.map(element => Object.assign({}, element))) || [], this.chartType, false, valueData);\n        }\n        if (response[1] && response[1].error) {\n          if (response[1].status == 401) {\n            this.packetErrormsg = this.language['Access Denied'];\n          } else {\n            this.packetErrormsg = this.commonOrgService.pageErrorHandle(response[1]);\n          }\n          this.lowLightData = [];\n        } else {\n          response[1] = this.singleCountSort(response[1], \"count\", this.chartType);\n          this.lowLightData = response[1];\n          Highcharts.chart('PacketDroppedChart', this.chartType !== 'Ont' ? this.lowLivelChartOptions(Object.assign([], this.lowLightData.map(element => Object.assign({}, element))) || [], this.chartType, false, valueData) : this.lowLivelChartOptionONT(Object.assign([], this.lowLightData.map(element => Object.assign({}, element))) || [], this.chartType, false, valueData));\n          this.GetSubTitle(Object.assign([], this.lowLightData.map(element => Object.assign({}, element))) || [], this.chartType, false, valueData);\n        }\n        this.ponChart.forEach(el => {\n          el['ponCount'] = el['count'];\n        });\n        this.lowLightData.forEach(el => {\n          el['LowLigthCount'] = el['count'];\n        });\n        this.getTableData([Object.assign([], this.ponChart.map(element => Object.assign({}, element))), Object.assign([], this.lowLightData.map(element => Object.assign({}, element)))], this.chartId);\n        this.loading = false;\n      }, err => {\n        this.loading = false;\n        this.commonOrgService.pageScrollTop();\n      }, () => {\n        this.loading = false;\n      });\n    }\n    fsanValidated($event) {\n      var _a;\n      let flength = (_a = this.fsan) === null || _a === void 0 ? void 0 : _a.length;\n      if (flength != 0 && flength < 12) {\n        this.fsanvalid = true;\n        return true;\n      } else {\n        this.fsanvalid = false;\n        return false;\n      }\n    }\n    changeDate() {\n      if (!this.ontSelected) this.loadedMultipleTimeseriesChart = [];\n      if (!this.validateStartEndDates()) {\n        this.modalTitle = this.language.Time_Period;\n        this.openModalInfo();\n        return;\n      }\n      ;\n    }\n    validateStartEndDates() {\n      let currentDate = new Date();\n      if (!this.fromDate) {\n        this.modalInfo = this.language['Time range not valid, end time should be later than start time.'];\n        return false;\n      }\n      if (this.fromDate > currentDate || this.toDate > currentDate) {\n        this.modalInfo = 'Time range not valid, End Date and Start Date should not above current Date';\n        return false;\n      }\n      if (this.fromDate && this.toDate) {\n        if (this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate) > this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)) {\n          this.modalInfo = 'Time range not valid, end time should be later than start time.';\n          return false;\n        } else if (this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate) == this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)) {\n          this.modalInfo = 'Time range not valid, Start Date and End Date should not be same .';\n          return false;\n        }\n        return true;\n      } else {\n        return true;\n      }\n    }\n    openModalInfo() {\n      this.modalRef = this.dialogService.open(this.showInfoModal, {\n        size: 'lg',\n        centered: true,\n        windowClass: 'custom-modal'\n      });\n    }\n    PONErrorRateChartOptionONT(data, type, fullscreen, extradata) {\n      const self = this;\n      let category, categoryid, subTitle;\n      let maxvalue = 0;\n      var xAxisCategories = [];\n      var seriesData1 = [];\n      var groupby;\n      if (type == 'Region') {\n        groupby = 'region', categoryid = 'regionId';\n      } else if (type == 'Location') {\n        groupby = 'location', categoryid = 'locationId';\n      } else if (type == 'System') {\n        groupby = 'system', categoryid = 'systemId';\n      } else if (type == 'Interface') {\n        groupby = 'interface';\n        categoryid = 'interface';\n      } else if (type == 'Ont') {\n        groupby = 'fsan', categoryid = 'fsan';\n      }\n      if (data.length) {\n        data = this.healthService.duplicateDataHandle(data, groupby, categoryid);\n        data.forEach(element => {\n          xAxisCategories.push(element[groupby]);\n          seriesData1.push({\n            y: element.count ? element.count : 0,\n            color: this.healthService.chart_color(element, \"count\")\n          });\n        });\n        maxvalue = xAxisCategories.length > 14 ? 15 : xAxisCategories.length;\n      }\n      let options = {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'column'\n        },\n        rangeSelector: {\n          selected: 3\n        },\n        legend: {\n          enabled: true\n        },\n        exporting: {\n          enabled: false\n        },\n        title: {\n          text: type,\n          style: {\n            display: 'none'\n          }\n        },\n        subtitle: {\n          text: subTitle\n        },\n        xAxis: {\n          categories: xAxisCategories,\n          min: 0,\n          max: maxvalue - 1,\n          scrollbar: {\n            barBackgroundColor: '#CCCCCC',\n            barBorderColor: '#ccc',\n            rifleColor: 'transparent',\n            barBorderRadius: 3,\n            trackBorderRadius: 3,\n            buttonArrowColor: 'transparent',\n            trackBackgroundColor: '#EBEAEF',\n            height: 6,\n            enabled: maxvalue == 15 ? true : false\n          },\n          tickLength: 0\n        },\n        yAxis: {\n          min: 0,\n          max: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language[\"ONT Count\"]\n          },\n          labels: {\n            formatter: function () {\n              return self.ShortnumberPipe.transform(this.value, false, 0);\n            }\n          },\n          gridLineWidth: 1,\n          style: {}\n        },\n        tooltip: {\n          useHTML: true,\n          shared: true,\n          borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          formatter: function () {\n            var s = \"\",\n              h = \"\",\n              f = \"\",\n              info = \" \";\n            f = \"</table>\";\n            this.points.forEach(point => {\n              if (point.color == environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].first || point.color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].first) {\n                info = \" (Deleted)\";\n              }\n              h = `<span style = \"font-size:10px\"> ${point.key} ${info}  </span><table>`;\n              s += `<tr><td style='color:${self.healthService.toolip_color(point.color)};padding:0'> ${point.series.name} : </td>\n            <td style='padding:0;margin-left:10px'>&nbsp ${self.ShortnumberPipe.transform(point.y)} </b></td></tr>`;\n            });\n            let g = s + f;\n            return h + g;\n          }\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        plotOptions: {\n          series: {\n            minPointLength: 3,\n            point: {\n              events: {\n                mouseOver: function () {\n                  data.forEach(element => {\n                    let Deleted = false;\n                    if (element[groupby] == this.category) {\n                      Deleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (!fullscreen && !Deleted) {\n                        this.graphic.attr({\n                          cursor: 'pointer'\n                        });\n                      }\n                    }\n                  });\n                },\n                click: function (event) {\n                  if (fullscreen) return;\n                  let isDeleted = false;\n                  data.forEach(element => {\n                    if (element[groupby] == event.point.category) {\n                      category = element[categoryid];\n                      isDeleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (isDeleted) {\n                        return;\n                      }\n                    }\n                  });\n                  let data1 = {\n                    type: this.series.chart.options.title.text,\n                    charttype: \"BipChart\",\n                    category: category,\n                    nameofthebar: this.series,\n                    name: event.point.category,\n                    extradata: event === null || event === void 0 ? void 0 : event.point.series.options.extradata\n                  };\n                  if (!isDeleted) {\n                    self.applyfilter(false, data1);\n                  }\n                }\n              }\n            }\n          },\n          column: {\n            borderWidth: 0,\n            dataLabels: {\n              enabled: false\n            }\n          }\n        },\n        series: [{\n          name: this.language[\"BIP Error Count\"],\n          data: seriesData1 || [],\n          color: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          extradata: extradata\n        }]\n      };\n      return options;\n    }\n    PONErrorRateChartOptionsn(data, type, fullscreen, extradata) {\n      const self = this;\n      let category, categoryid, subTitle;\n      let maxvalue = 0;\n      var xAxisCategories = [];\n      var seriesData1 = [];\n      var groupby;\n      if (type == 'Region') {\n        groupby = 'region', categoryid = 'regionId';\n      } else if (type == 'Location') {\n        groupby = 'location', categoryid = 'locationId';\n      } else if (type == 'System') {\n        groupby = 'system', categoryid = 'systemId';\n      } else if (type == 'Interface') {\n        groupby = 'interface';\n        categoryid = 'interface';\n      } else if (type == 'Ont') {\n        groupby = 'fsan', categoryid = 'fsan';\n      }\n      if (data.length) {\n        data = this.healthService.duplicateDataHandle(data, groupby, categoryid);\n        data.forEach(element => {\n          xAxisCategories.push(element[groupby]);\n          seriesData1.push({\n            y: element.count ? element.count : 0,\n            color: this.healthService.chart_color(element, \"count\")\n          });\n        });\n        maxvalue = xAxisCategories.length > 14 ? 15 : xAxisCategories.length;\n      }\n      let options = {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'column'\n        },\n        rangeSelector: {\n          selected: 3\n        },\n        legend: {\n          enabled: true\n        },\n        exporting: {\n          enabled: false\n        },\n        title: {\n          text: type,\n          style: {\n            display: 'none'\n          }\n        },\n        subtitle: {\n          text: subTitle\n        },\n        xAxis: {\n          categories: xAxisCategories,\n          min: 0,\n          max: maxvalue - 1,\n          scrollbar: {\n            barBackgroundColor: '#CCCCCC',\n            barBorderColor: '#ccc',\n            rifleColor: 'transparent',\n            barBorderRadius: 3,\n            trackBorderRadius: 3,\n            buttonArrowColor: 'transparent',\n            trackBackgroundColor: '#EBEAEF',\n            height: 6,\n            enabled: maxvalue == 15 ? true : false\n          },\n          tickLength: 0\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language[\"ONT Count\"]\n          },\n          labels: {\n            formatter: function () {\n              return self.ShortnumberPipe.transform(this.value, false, 0);\n            }\n          },\n          gridLineWidth: 1,\n          style: {}\n        },\n        tooltip: {\n          useHTML: true,\n          shared: true,\n          borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          formatter: function () {\n            var s = \"\",\n              h = \"\",\n              f = \"\",\n              info = \" \";\n            f = \"</table>\";\n            this.points.forEach(point => {\n              if (point.color == environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].first || point.color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].first) {\n                info = \" (Deleted)\";\n              }\n              h = `<span style = \"font-size:10px\"> ${point.key} ${info}  </span><table>`;\n              s += `<tr><td style='color:${self.healthService.toolip_color(point.color)};padding:0'> ${point.series.name} : </td>\n            <td style='padding:0;margin-left:10px'>&nbsp ${self.ShortnumberPipe.transform(point.y)} </b></td></tr>`;\n            });\n            let g = s + f;\n            return h + g;\n          }\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        plotOptions: {\n          series: {\n            minPointLength: 3,\n            point: {\n              events: {\n                mouseOver: function () {\n                  data.forEach(element => {\n                    let Deleted = false;\n                    if (element[groupby] == this.category) {\n                      Deleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (!fullscreen && !Deleted) {\n                        this.graphic.attr({\n                          cursor: 'pointer'\n                        });\n                      }\n                    }\n                  });\n                },\n                click: function (event) {\n                  if (fullscreen) return;\n                  let isDeleted = false;\n                  data.forEach(element => {\n                    if (element[groupby] == event.point.category) {\n                      category = element[categoryid];\n                      isDeleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (isDeleted) {\n                        return;\n                      }\n                    }\n                  });\n                  let data1 = {\n                    type: this.series.chart.options.title.text,\n                    charttype: \"BipChart\",\n                    category: category,\n                    nameofthebar: this.series,\n                    name: event.point.category,\n                    extradata: event === null || event === void 0 ? void 0 : event.point.series.options.extradata\n                  };\n                  if (!isDeleted) {\n                    self.applyfilter(false, data1);\n                  }\n                }\n              }\n            }\n          },\n          column: {\n            borderWidth: 0,\n            dataLabels: {\n              enabled: false\n            }\n          }\n        },\n        series: [{\n          name: this.language[\"BIP Error Count\"],\n          data: seriesData1 || [],\n          color: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          extradata: extradata\n        }]\n      };\n      return options;\n    }\n    lowLivelChartOptionONT(data, type, fullscreen, extradata) {\n      const self = this;\n      let subTitle;\n      let maxvalue = 0;\n      let category, categoryid;\n      var seriesData = [];\n      var xAxisCategories = [];\n      var groupby;\n      if (type == 'Region') {\n        groupby = 'region', categoryid = 'regionId';\n      } else if (type == 'Location') {\n        groupby = 'location', categoryid = 'locationId';\n      } else if (type == 'System') {\n        groupby = 'system', categoryid = 'systemId';\n      } else if (type == 'Interface') {\n        groupby = 'interface';\n        categoryid = 'interface';\n      } else if (type == 'Ont') {\n        groupby = 'fsan', categoryid = 'fsan';\n      }\n      if (data.length) {\n        data = this.healthService.duplicateDataHandle(data, groupby, categoryid);\n        data.forEach(element => {\n          xAxisCategories.push(element[groupby]);\n          seriesData.push({\n            y: element.count ? element.count : 0,\n            color: this.healthService.chart_color(element, \"count\")\n          });\n        });\n        maxvalue = xAxisCategories.length > 14 ? 15 : xAxisCategories.length;\n      }\n      return {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'column'\n        },\n        rangeSelector: {\n          selected: 3\n        },\n        exporting: {\n          enabled: false\n        },\n        legend: {\n          enabled: true\n        },\n        title: {\n          text: type,\n          style: {\n            display: 'none'\n          }\n        },\n        subtitle: {\n          text: subTitle\n        },\n        xAxis: {\n          categories: xAxisCategories,\n          min: 0,\n          max: maxvalue - 1,\n          scrollbar: {\n            barBackgroundColor: '#CCCCCC',\n            barBorderColor: '#ccc',\n            rifleColor: 'transparent',\n            barBorderRadius: 3,\n            trackBorderRadius: 3,\n            buttonArrowColor: 'transparent',\n            trackBackgroundColor: '#EBEAEF',\n            height: 6,\n            enabled: maxvalue == 15 ? true : false\n          },\n          tickLength: 0\n        },\n        yAxis: {\n          min: 0,\n          max: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language[\"ONT Count\"]\n          },\n          labels: {\n            formatter: function () {\n              return self.ShortnumberPipe.transform(this.value, false, 0);\n            }\n          },\n          gridLineWidth: 1\n        },\n        tooltip: {\n          useHTML: true,\n          borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          formatter: function () {\n            var s = \"\",\n              h = \"\",\n              f = \"\",\n              info = \" \";\n            f = \"</table>\";\n            this.points.forEach(point => {\n              if (point.color == environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].first || point.color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].first) {\n                info = \" (Deleted)\";\n              }\n              h = `<span style = \"font-size:10px\"> ${point.key} ${info}  </span><table>`;\n              s += `<tr><td style='color:${self.healthService.toolip_color(point.color)};padding:0'> ${point.series.name} : </td>\n            <td style='padding:0;margin-left:10px'>&nbsp ${self.ShortnumberPipe.transform(point.y)} </b></td></tr>`;\n            });\n            let g = s + f;\n            return h + g;\n          },\n          shared: true\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        plotOptions: {\n          bar: {\n            dataLabels: {\n              enabled: false\n            }\n          },\n          series: {\n            minPointLength: 3,\n            point: {\n              events: {\n                mouseOver: function () {\n                  data.forEach(element => {\n                    let Deleted = false;\n                    if (element[groupby] == this.category) {\n                      Deleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (!fullscreen && !Deleted) {\n                        this.graphic.attr({\n                          cursor: 'pointer'\n                        });\n                      }\n                    }\n                  });\n                },\n                click: function (event) {\n                  if (fullscreen) return;\n                  let isDeleted = false;\n                  data.forEach(element => {\n                    if (element[groupby] == event.point.category) {\n                      category = element[categoryid];\n                      isDeleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (isDeleted) {\n                        return;\n                      }\n                    }\n                  });\n                  let data1 = {\n                    type: this.series.chart.options.title.text,\n                    charttype: \"BipChart\",\n                    category: category,\n                    nameofthebar: this.series,\n                    name: event.point.category,\n                    extradata: event === null || event === void 0 ? void 0 : event.point.series.options.extradata\n                  };\n                  if (!isDeleted) {\n                    self.applyfilter(false, data1);\n                  }\n                }\n              }\n            }\n          }\n        },\n        series: [{\n          name: this.language[\"Optical Power Low Threshold Count\"],\n          data: seriesData || [],\n          color: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          extradata: extradata\n        }]\n      };\n    }\n    lowLivelChartOptions(data, type, fullscreen, extradata) {\n      const self = this;\n      let subTitle;\n      let maxvalue = 0;\n      let category, categoryid;\n      var seriesData = [];\n      var xAxisCategories = [];\n      var groupby;\n      if (type == 'Region') {\n        groupby = 'region', categoryid = 'regionId';\n      } else if (type == 'Location') {\n        groupby = 'location', categoryid = 'locationId';\n      } else if (type == 'System') {\n        groupby = 'system', categoryid = 'systemId';\n      } else if (type == 'Interface') {\n        groupby = 'interface';\n        categoryid = 'interface';\n      } else if (type == 'Ont') {\n        groupby = 'fsan', categoryid = 'fsan';\n      }\n      if (data.length) {\n        data = this.healthService.duplicateDataHandle(data, groupby, categoryid);\n        data.forEach(element => {\n          xAxisCategories.push(element[groupby]);\n          seriesData.push({\n            y: element.count ? element.count : 0,\n            color: this.healthService.chart_color(element, \"count\")\n          });\n        });\n        maxvalue = xAxisCategories.length > 14 ? 15 : xAxisCategories.length;\n      }\n      return {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'column'\n        },\n        rangeSelector: {\n          selected: 3\n        },\n        exporting: {\n          enabled: false\n        },\n        legend: {\n          enabled: true\n        },\n        title: {\n          text: type,\n          style: {\n            display: 'none'\n          }\n        },\n        subtitle: {\n          text: subTitle\n        },\n        xAxis: {\n          categories: xAxisCategories,\n          min: 0,\n          max: maxvalue - 1,\n          scrollbar: {\n            barBackgroundColor: '#CCCCCC',\n            barBorderColor: '#ccc',\n            rifleColor: 'transparent',\n            barBorderRadius: 3,\n            trackBorderRadius: 3,\n            buttonArrowColor: 'transparent',\n            trackBackgroundColor: '#EBEAEF',\n            height: 6,\n            enabled: maxvalue == 15 ? true : false\n          },\n          tickLength: 0\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language[\"ONT Count\"]\n          },\n          labels: {\n            formatter: function () {\n              return self.ShortnumberPipe.transform(this.value, false, 0);\n            }\n          },\n          gridLineWidth: 1\n        },\n        tooltip: {\n          useHTML: true,\n          borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          formatter: function () {\n            var s = \"\",\n              h = \"\",\n              f = \"\",\n              info = \" \";\n            f = \"</table>\";\n            this.points.forEach(point => {\n              if (point.color == environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].first || point.color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].first) {\n                info = \" (Deleted)\";\n              }\n              h = `<span style = \"font-size:10px\"> ${point.key} ${info}  </span><table>`;\n              s += `<tr><td style='color:${self.healthService.toolip_color(point.color)};padding:0'> ${point.series.name} : </td>\n            <td style='padding:0;margin-left:10px'>&nbsp ${self.ShortnumberPipe.transform(point.y)} </b></td></tr>`;\n            });\n            let g = s + f;\n            return h + g;\n          },\n          shared: true\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        plotOptions: {\n          bar: {\n            dataLabels: {\n              enabled: false\n            }\n          },\n          series: {\n            minPointLength: 3,\n            point: {\n              events: {\n                mouseOver: function () {\n                  data.forEach(element => {\n                    let Deleted = false;\n                    if (element[groupby] == this.category) {\n                      Deleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (!fullscreen && !Deleted) {\n                        this.graphic.attr({\n                          cursor: 'pointer'\n                        });\n                      }\n                    }\n                  });\n                },\n                click: function (event) {\n                  if (fullscreen) return;\n                  let isDeleted = false;\n                  data.forEach(element => {\n                    if (element[groupby] == event.point.category) {\n                      category = element[categoryid];\n                      isDeleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (isDeleted) {\n                        return;\n                      }\n                    }\n                  });\n                  let data1 = {\n                    type: this.series.chart.options.title.text,\n                    charttype: \"BipChart\",\n                    category: category,\n                    nameofthebar: this.series,\n                    name: event.point.category,\n                    extradata: event === null || event === void 0 ? void 0 : event.point.series.options.extradata\n                  };\n                  if (!isDeleted) {\n                    self.applyfilter(false, data1);\n                  }\n                }\n              }\n            }\n          }\n        },\n        series: [{\n          name: this.language[\"Optical Power Low Threshold Count\"],\n          data: seriesData || [],\n          color: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          extradata: extradata\n        }]\n      };\n    }\n    getTableData(data, type, chartType) {\n      let arr = _.groupBy(_.flatten([JSON.parse(JSON.stringify(data[0])), JSON.parse(JSON.stringify(data[1]))]), type);\n      this.tableData = _.map(arr, function (val) {\n        return _.merge.apply(_, val);\n      });\n      let groupby = type.replace('Id', '');\n      this.tableData = this.healthService.duplicateDataHandle(this.tableData, groupby, type);\n      this.tableData = this.healthService.totalcoutsort(this.tableData, \"count\", 'ponCount', chartType);\n      if (this.chartType == \"Ont\") {\n        this.tableData.forEach(element => {\n          if (element.ponCount === 0 || !element.ponCount) {\n            element.ponCount = 'No';\n          } else if (element.ponCount === 1) {\n            element.ponCount = 'Yes';\n          }\n          if (element.LowLigthCount === 0 || !element.LowLigthCount) {\n            element.LowLigthCount = 'No';\n          } else if (element.LowLigthCount === 1) {\n            element.LowLigthCount = 'Yes';\n          }\n        });\n      }\n      if (!this.redenderOnce) {\n        this.dtTrigger.next();\n        this.redenderOnce = true;\n      } else {\n        this.rerender();\n      }\n    }\n    rerender() {\n      this.dtElements.forEach(dtElement => {\n        if (dtElement.dtInstance) dtElement.dtInstance.then(dtInstance => {\n          dtInstance.destroy();\n        });\n      });\n      setTimeout(() => {\n        this.dtSub = this.dtTrigger.next();\n        this.dtSubs = this.dtTrigger1.next();\n      });\n    }\n    downloadFunction(chartName, idName, type, valueData, title, chartId) {\n      this.idCount++;\n      console.log(valueData);\n      let extraData = this.heading(chartName, type, idName, title);\n      let id = idName + this.idCount;\n      let data;\n      if (chartId) data = this.healthService.duplicateDataHandle(valueData, type, chartId);\n      $(id).addClass('spinnershow');\n      data = this.healthService.chartDataFraming(valueData, chartName, type, extraData);\n      let fname = this.healthService.generateDownloadName(chartName, type, 'ONT');\n      setTimeout(() => {\n        $(id).removeClass('spinnershow');\n      }, 1000);\n      this.exportExcelService.downLoadCSV(fname, data, extraData);\n    }\n    heading(chartName, type, idName, title) {\n      let region, location, system, interfaces, heading;\n      let pipe = new DatePipe('en-US');\n      if (chartName == 'low light') {\n        heading = this.extraData ? this.extraData : this.lowLightChart[type];\n      } else if (chartName == 'PON Error Rate') {\n        heading = this.PonChart[type];\n      }\n      if (heading) {\n        region = heading.regionname ? heading.regionname : this.regionSelected ? this.regionSelected : 'All';\n        location = heading.locationname ? heading.locationname : this.locationSelected;\n        system = heading.systemname ? heading.systemname : this.systemSelected;\n        interfaces = heading.interfacename ? heading.interfacename : this.interfaceSelected;\n      }\n      let extraData;\n      if (type == 'region') extraData = `${this.language[title] || title} \\r\\n${this.language.region} : All \\r\\n${this.language['START_DATE']} : ${pipe.transform(this.fromDate, 'MM/dd/yyyy')} \\r\\n${this.language['END_DATE']} : ${pipe.transform(this.toDate, 'MM/dd/yyyy')} \\r\\n\\r\\n`;else if (type == 'location') extraData = `${this.language[title] || title} \\r\\n${this.language.region} : ${region} \\r\\n${this.language['START_DATE']} : ${pipe.transform(this.fromDate, 'MM/dd/yyyy')}\\r\\n${this.language['END_DATE']} : ${pipe.transform(this.toDate, 'MM/dd/yyyy')} \\r\\n\\r\\n`;else if (type == 'system') extraData = `${this.language[title] || title} \\r\\n${this.language.region} : ${region} \\r\\n${this.language.location} : ${location}\\r\\n${this.language['START_DATE']} : ${pipe.transform(this.fromDate, 'MM/dd/yyyy')}\\r\\n${this.language['END_DATE']} : ${pipe.transform(this.toDate, 'MM/dd/yyyy')} \\r\\n\\r\\n`;else if (type == 'interface') extraData = `${this.language[title]} \\r\\n${this.language.region} : ${region} \\r\\n${this.language.location} : ${location}\\r\\n${this.language.System} : ${system}\\r\\n${this.language['START_DATE']} : ${pipe.transform(this.fromDate, 'MM/dd/yyyy')} \\r\\n${this.language['END_DATE']} : ${pipe.transform(this.toDate, 'MM/dd/yyyy')}\\r\\n\\r\\n`;else extraData = `${this.language[title]} \\r\\n${this.language.region} : ${region} \\r\\n${this.language.location} : ${location}\\r\\n${this.language.System} : ${system}\\r\\n${this.language.Interface} : ${interfaces}\\r\\n${this.language['START_DATE']} : ${pipe.transform(this.fromDate, 'MM/dd/yyyy')} \\r\\n${this.language['END_DATE']} : ${pipe.transform(this.toDate, 'MM/dd/yyyy')}\\r\\n\\r\\n`;\n      return extraData;\n    }\n    fullScreenExpandFunction(chartName, valType, chart, valueData, type) {\n      this.fullScreenData = [];\n      this.fullScreen = true;\n      this.fullScreenChartType = valType;\n      this.fullScreenMsg = \"\";\n      this.fullScreenChartName = this.language[chartName] ? this.language[chartName] : chartName;\n      this.fullScreenChart = chart;\n      this.downloadTitle = chartName;\n      let groupBy;\n      if (valType == \"Region\") {\n        groupBy = 'region';\n        this.fullScreenChartType = 'region';\n      } else if (valType == 'Location') {\n        groupBy = 'location';\n        this.fullScreenChartType = 'location';\n      } else if (valType == 'System') {\n        groupBy = 'system';\n        this.fullScreenChartType = 'system';\n      } else if (valType == 'Interface') {\n        groupBy = 'interface';\n        this.fullScreenChartType = 'interface';\n      } else if (valType == 'Ont') {\n        groupBy = 'ont';\n        this.fullScreenChartType = 'ont';\n      }\n      if (valueData) {\n        this.fullScreenMsg = \"\";\n        this.fullScreenData = valueData;\n        this.rerender();\n        if (chart == 'ponchart') {\n          this.fullScrChart = 'PON Error Rate';\n          Highcharts.chart('fullScreenChart', valType !== 'Ont' ? this.PONErrorRateChartOptionsn(valueData || [], valType, true, this.lowLightChart[groupBy]) : this.PONErrorRateChartOptionONT(valueData || [], valType, true, this.lowLightChart[groupBy]));\n        } else if (chart == \"Lowlighchart\") {\n          this.fullScrChart = 'low light';\n          Highcharts.chart('fullScreenChart', valType !== 'Ont' ? this.lowLivelChartOptions(valueData || [], valType, true, this.lowLightChart[groupBy]) : this.lowLivelChartOptionONT(valueData || [], valType, true, this.PonChart[groupBy]));\n        }\n        setTimeout(() => {\n          var elmnt = document.getElementById(\"full_screen\");\n          elmnt.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }, 0);\n      } else {\n        this.fullScreenData = [];\n        this.rerender();\n        let params = {\n          tenant: \"0\",\n          startTime: `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n          endTime: `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n          region: this.regionSelected == \"All\" ? \"\" : this.regionSelected,\n          location: this.locationSelected == \"All\" ? \"\" : this.locationSelected,\n          system: this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n          interface: this.interfaceSelected == \"All\" ? \"\" : this.interfaceSelected,\n          groupBy: groupBy\n        };\n        params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n        let query = \"\";\n        for (var key in params) {\n          if (params[key] == undefined || params[key] == \"undefined\" || params[key] == \"\") {\n            continue;\n          }\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n        if (chart == \"ponchart\") {\n          this.fullScrChart = 'PON Error Rate';\n          this.ontPonError = this.healthService.ontBipErrornew(query).subscribe(res => {\n            res = this.singleCountSort(res, \"count\", valType);\n            this.getTableFullscreen(res, groupBy, type);\n            Highcharts.chart('fullScreenChart', valType !== 'Ont' ? this.PONErrorRateChartOptionsn(res || [], valType, true, this.lowLightChart[groupBy]) : this.PONErrorRateChartOptionONT(res || [], valType, true, this.lowLightChart[groupBy]));\n          }, err => {\n            this.loading = false;\n            this.errorHandler(err);\n          });\n        } else if (chart == \"Lowlighchart\") {\n          this.fullScrChart = 'low light';\n          this.ontlowlight = this.healthService.Lowlightlevelcount(query).subscribe(res => {\n            res = this.singleCountSort(res, \"count\", valType);\n            this.getTableFullscreen(res, groupBy, type);\n            Highcharts.chart('fullScreenChart', valType !== 'Ont' ? this.lowLivelChartOptions(res || [], valType, true, this.lowLightChart[groupBy]) : this.lowLivelChartOptionONT(res || [], valType, true, this.PonChart[groupBy]));\n          }, err => {\n            this.loading = false;\n            this.errorHandler(err);\n          });\n        }\n      }\n    }\n    singleCountSort(data, key1, charttype = 'Region') {\n      let a = [];\n      let b = [];\n      let name = charttype.toLowerCase();\n      if (name == \"interface\") data.sort((a, b) => (a[name] || \"\").toString().localeCompare((b[name] || \"\").toString(), 'en', {\n        numeric: true\n      }));else {\n        data.sort((a, b) => (a[name] || \"\").toString().localeCompare((b[name] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n      }\n      data.forEach(obj => {\n        if (obj[key1] || obj[key1] == 0) {\n          a.push(obj);\n        } else b.push(obj);\n      });\n      a.sort(function (a, b) {\n        return (b[key1] ? b[key1] : null) - (a[key1] ? a[key1] : null);\n      });\n      data = [...a, ...b];\n      return data;\n    }\n    errorHandler(err) {\n      if (err.status == 401) {\n        this.fullScreenMsg = this.language['Access Denied'];\n      } else {\n        this.fullScreenMsg = this.commonOrgService.pageErrorHandle(err);\n      }\n    }\n    getTableFullscreen(res, groupBy, type) {\n      this.fullScreenMsg = \"\";\n      this.fullScreenData = this.healthService.duplicateDataHandle(res, groupBy, type);\n      this.rerender();\n      this.loading = false;\n    }\n    chartTableData(groupBy, data) {\n      let duplicate = [];\n      let fullScreenDatas = [];\n      if (data.length) {\n        let count = 0;\n        data.forEach(element => {\n          count = count + 1;\n          if (!element[groupBy] || element[groupBy] == \"       \") {\n            element[groupBy] = \"Other\";\n          }\n          if (duplicate.indexOf(element[groupBy]) === -1) {\n            duplicate.push(element[groupBy]);\n          } else {\n            let c = 0;\n            let temp = 1;\n            do {\n              c = c + 1;\n              let test = element[groupBy] + \"(\" + c + \")\";\n              if (duplicate.indexOf(test) === -1) {\n                element[groupBy] = test;\n                duplicate.push(element[groupBy]);\n                temp = 0;\n              }\n            } while (temp != 0);\n          }\n        });\n        data.forEach(element => {\n          fullScreenDatas.push(element);\n        });\n      }\n      this.fullScreenData = fullScreenDatas;\n    }\n    fullScreenInvertFunction() {\n      this.searchText = '';\n      this.fullScreen = false;\n      if (this.fullScreen_Filter) this.applyfilter(true);\n    }\n    loadMultipleChart(param, paramsName, valType, valName, value) {\n      this.count = this.count + 1;\n      let IsDuplicate = false;\n      if (this.loadedMultipleTimeseriesChart.length) {\n        this.loadedMultipleTimeseriesChart.forEach(element => {\n          if (element.chartname == valName) {\n            IsDuplicate = true;\n            var elmnt = document.getElementById(valName);\n            if (elmnt) elmnt.scrollIntoView({\n              behavior: 'smooth'\n            });\n          }\n        });\n      }\n      if (IsDuplicate) return;\n      setTimeout(() => {\n        this.loadedMultipleTimeseriesChart.push({\n          params: param,\n          paramname: paramsName,\n          charttype: valType,\n          chartname: valName,\n          divid: valName + this.count,\n          page: 'ont',\n          title: value,\n          interface: this.interfaceSelected ? this.interfaceSelected : paramsName === null || paramsName === void 0 ? void 0 : paramsName.interfacename,\n          system: this.nosystem ? '' : value && this.systemNameSelected ? this.systemNameSelected : paramsName === null || paramsName === void 0 ? void 0 : paramsName.systemname\n        });\n        this.loadedMultipleTimeseriesChart = [...this.loadedMultipleTimeseriesChart];\n      }, 100);\n    }\n    search(term) {\n      this.dtElements.forEach(dtElement => {\n        if (dtElement.dtInstance) dtElement.dtInstance.then(dtInstance => {\n          dtInstance.columns(0).search(term).draw();\n        });\n      });\n    }\n    countconvert(number) {\n      return this.ShortnumberPipe.transform(number);\n    }\n    clearChartContainer(values) {\n      var findindex = this.loadedMultipleTimeseriesChart.findIndex(x => x.chartname === values.chartname);\n      if (findindex > -1) {\n        this.loadedMultipleTimeseriesChart.splice(findindex, 1);\n      }\n    }\n    navigateThreshold() {\n      this.router.navigate([\"cco/operations/health/monitoring-thresholds\"]);\n    }\n    clearFilter() {\n      if (this.loading) {\n        return;\n      }\n      this.subTitle = '';\n      this.searchText = '';\n      let date = new Date();\n      this.fromDate = this.fromDate = new Date(date.getTime() - 1 * 24 * 60 * 60 * 1000);\n      this.toDate = this.toDate = new Date();\n      this.last24hours = false;\n      this.systemDataArray = [\"All\"];\n      this.locationDataArray = [\"All\"];\n      this.interfaceDataArray = [\"All\"];\n      this.locationSelected = \"All\";\n      this.regionSelected = \"All\";\n      this.systemSelected = \"All\";\n      this.interfaceSelected = \"All\";\n      this.ontSelected = 'All';\n      this.fsan = '';\n      this.regionName = null;\n      this.locationName = null;\n      this.systemName = null;\n      this.interfaceName = null;\n      this.groupBy = null;\n      this.chartId = \"regionId\";\n      this.loadedMultipleTimeseriesChart = [];\n      if (this.fullScreen == true) {\n        this.fullScreen_Filter = true;\n        let chartNames;\n        if (this.fullScreenChart == \"ponchart\") {\n          chartNames = 'PON Error By Region';\n        } else if (this.fullScreenChart == \"Lowlighchart\") {\n          chartNames = 'HLowLightLevelbyregion';\n        }\n        this.fullScreenExpandFunction(chartNames, 'Region', this.fullScreenChart, '', this.chartId);\n        return;\n      } else {\n        this.applyfilter(true);\n        this.chartType = \"Region\";\n        this.chartDownType = 'region';\n        this.tableName = \"Regions\";\n        this.chartId = \"regionId\";\n        this.chartTitlePon = 'HBIPErrorbyregion';\n        this.chartSubTitle = 'Select a region to view locations in that region';\n        this.chartTitleLowLight = 'HLowLightLevelbyregion';\n        this.searchType = 'Search regions';\n      }\n    }\n    ngOnDestroy() {\n      if (this.dtSub) this.dtSub.unsubscribe();\n      if (this.dtSubs) this.dtSubs.unsubscribe();\n      if (this.parallelReqSubscribtion) this.parallelReqSubscribtion.unsubscribe();\n      if (this.ontPonError) this.ontPonError.unsubscribe();\n      if (this.ontlowlight) this.ontlowlight.unsubscribe();\n      if (this.lowCount) this.lowCount.unsubscribe();\n      if (this.bipCount) this.bipCount.unsubscribe();\n      if (this.totalOnt) this.totalOnt.unsubscribe();\n      if (this.languageSubject) this.languageSubject.unsubscribe();\n      if (this.LocationSubject) this.LocationSubject.unsubscribe();\n      if (this.regionsSubject) this.regionsSubject.unsubscribe();\n      if (this.systemSubject) this.systemSubject.unsubscribe();\n    }\n    clearSearch(value) {\n      this.searchText = \"\";\n      this.rerender();\n    }\n    GetSubTitle(data, type, fullscreen, extradata) {\n      var groupby, categoryid;\n      if (type == 'Region') {\n        groupby = 'region';\n      } else if (type == 'Location') {\n        groupby = 'location', categoryid = 'locationId';\n        this.subTitle = `${this.language['region']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.regionname}`;\n      } else if (type == 'System') {\n        groupby = 'system', categoryid = 'systemId';\n        this.subTitle = `${this.language['region']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.regionname},\n       ${this.language['location']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.locationname} `;\n      } else if (type == 'Interface') {\n        groupby = 'interface';\n        categoryid = 'interface';\n        this.subTitle = `${this.language['region']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.regionname},\n       ${this.language['location']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.locationname}, ${this.language['System']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.systemname} `;\n      } else if (type == 'Ont') {\n        groupby = 'ont', categoryid = 'ontId';\n        this.subTitle = `${this.language['region']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.regionname},\n       ${this.language['location']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.locationname}, ${this.language['System']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.systemname}, ${this.language['interface']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.interfacename}`;\n      }\n    }\n  }\n  CcoOntComponent.ɵfac = function CcoOntComponent_Factory(t) {\n    return new (t || CcoOntComponent)(i0.ɵɵdirectiveInject(i1.DateUtilsService), i0.ɵɵdirectiveInject(i2.NgbModal), i0.ɵɵdirectiveInject(i3.HealthService), i0.ɵɵdirectiveInject(i4.Title), i0.ɵɵdirectiveInject(i5.SsoAuthService), i0.ɵɵdirectiveInject(i6.CcochartService), i0.ɵɵdirectiveInject(i7.CommonService), i0.ɵɵdirectiveInject(i8.ShortnumberPipe), i0.ɵɵdirectiveInject(i9.ExportExcelService), i0.ɵɵdirectiveInject(i10.TranslateService), i0.ɵɵdirectiveInject(i11.NfainventoryService), i0.ɵɵdirectiveInject(i12.ActivatedRoute), i0.ɵɵdirectiveInject(i12.Router), i0.ɵɵdirectiveInject(i13.ThresholdService));\n  };\n  CcoOntComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CcoOntComponent,\n    selectors: [[\"app-cco-ont\"]],\n    viewQuery: function CcoOntComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(DataTableDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.showInfoModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dtElements = _t);\n      }\n    },\n    decls: 120,\n    vars: 46,\n    consts: [[\"role\", \"alert\", \"class\", \"alert alert-warning\", 4, \"ngIf\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"health-ont-menu-wrapper\", \"my-3\", \"col-8\", \"p-0\"], [1, \"health-ont-menu-item\", \"kbi-item\"], [\"id\", \"pendoCCOTotalONTs\", 1, \"menu-title\"], [1, \"d-flex\", \"align-content-around\", \"flex-wrap\"], [1, \"\"], [\"id\", \"pendoCCOONTsWithBIPError\", 1, \"menu-title\"], [1, \"device-text\"], [\"id\", \"pendoCCOONTsWithLowLightLevels\", 1, \"menu-title\"], [\"id\", \"pendoCCOQuarantinedONTs\", 1, \"menu-title\"], [1, \"dropleft\"], [\"data-toggle\", \"dropdown\", \"aria-haspopup\", \"true\", \"aria-expanded\", \"false\", 1, \"primary\", \"dropdown-toggle\", \"cursor-pointer\"], [\"src\", \"../../../../assets/img/ic_info.svg\", \"alt\", \"\", 1, \"ic_info\"], [1, \"dropdown-menu\", \"pop\"], [\"type\", \"button\", 1, \"close\"], [1, \"title\"], [1, \"mb-3\", \"ml-3\"], [1, \"text-right\"], [1, \"pl-3\"], [1, \"mb-4\", \"ml-3\"], [\"class\", \"text-decoration-none cursor-pointer\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"filter-container pb-2\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [1, \"mb-3\", 3, \"ngClass\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"d-flex\", \"justify-content-between\", \"border-bottom\"], [\"data-toggle\", \"tooltip\", 1, \"long-title-ellips\"], [1, \"cco-secondary-title\", \"pb-2\"], [1, \"col-md-3\", \"smy-2\", \"ccl-form\", \"position-relative\", \"my-4\"], [\"class\", \"search-close\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"text\", \"aria-label\", \"Search\", 1, \"ccl-from\", \"pr-3\", \"ng-pristine\", \"ng-valid\", \"ng-touched\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\", \"keyup\", \"search\"], [1, \"pon-report-table\"], [\"id\", \"pon_table\", \"width\", \"100%\", \"datatable\", \"\", 1, \"row-border\", \"hover\", \"table-alter\", 3, \"dtOptions\", \"dtTrigger\"], [\"class\", \"loader\", 4, \"ngIf\"], [4, \"ngIf\"], [\"id\", \"full_screen\", 1, \"row\", \"my-3\", 3, \"ngClass\"], [1, \"subscriber-trends-wrapper\", \"overflow-auto\"], [1, \"w-100\", \"px-3\"], [1, \"d-flex\", \"justify-content-between\", \"border-bottom\", \"mb-2\"], [1, \"cco-secondary-title\"], [1, \"mwc-btns\", \"flex\"], [\"id\", \"fullScreenChartDownloadSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-dload\", 3, \"title\", \"click\"], [\"id\", \"fullScreenChartExpandSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-expand-inv\", 3, \"title\", \"click\"], [1, \"ml-3\", \"mr-3\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [\"class\", \"w-100 alert alert-danger  fade show my-3\", 4, \"ngIf\"], [1, \"mwc-content\", 3, \"ngClass\"], [\"id\", \"fullScreenChart\", 1, \"chart-box\", \"hw-full\"], [1, \"w-100\"], [\"id\", \"ont-fullscreen\", \"width\", \"100%\", \"datatable\", \"\", 1, \"row-border\", \"hover\", \"table-alter\", 3, \"dtOptions\", \"dtTrigger\"], [3, \"hidden\"], [4, \"ngFor\", \"ngForOf\"], [1, \"my-3\"], [\"class\", \"col-md-12\"], [\"showInfoModal\", \"\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\"], [1, \"text-decoration-none\", \"cursor-pointer\", 3, \"click\"], [1, \"filter-container\", \"pb-2\"], [1, \"row\", \"px-2\"], [1, \"col-item\", \"ccl-form\"], [\"width\", \"100%\"], [\"id\", \"start_date\", \"appendTo\", \"body\", \"dateFormat\", \"mm-dd-yy\", 3, \"inputStyle\", \"autoZIndex\", \"placeholder\", \"ngModel\", \"showIcon\", \"selectOtherMonths\", \"ngModelOptions\", \"minDate\", \"maxDate\", \"styleClass\", \"ngModelChange\", \"onSelect\"], [\"id\", \"start_date\", \"appendTo\", \"body\", \"dateFormat\", \"mm-dd-yy\", 3, \"inputStyle\", \"autoZIndex\", \"placeholder\", \"ngModel\", \"showIcon\", \"selectOtherMonths\", \"ngModelOptions\", \"maxDate\", \"minDate\", \"styleClass\", \"ngModelChange\", \"onSelect\"], [\"id\", \"current-issues-region\", 1, \"col-item\", \"ccl-form\"], [\"width\", \"100%\", \"bindValue\", \"id\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"ngModel\", \"items\", \"clearable\", \"searchable\", \"placeholder\", \"ngModelChange\"], [\"ng-label-tmp\", \"\"], [\"ng-option-tmp\", \"\"], [\"id\", \"current-issues-location\", 1, \"col-item\", \"ccl-form\"], [\"width\", \"100%\", \"bindValue\", \"id\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"ngModel\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"ngModelChange\"], [\"id\", \"current-issues-System\", 1, \"col-item\", \"ccl-form\"], [\"width\", \"100%\", \"bindValue\", \"uuid\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"ngModel\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"ngModelChange\"], [\"id\", \"current-issues-interface\", 1, \"col-item\", \"ccl-form\"], [\"for\", \"Name\"], [1, \"col-filter\"], [\"bindValue\", \"name\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"ngModel\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"ngModelChange\"], [\"class\", \"col-filter\", 4, \"ngIf\"], [\"class\", \"col-filter ccl-form position-relative\", 4, \"ngIf\"], [1, \"col-item\", \"col-item-action\"], [1, \"inline-flex\", \"align-items-center\"], [1, \"btn-default\", \"btn-primary\", \"py-0\", \"mr-2\", 3, \"title\", \"click\"], [\"id\", \"#\", 1, \"btn-link\", \"btn-over-ellipse\", \"primary\", 3, \"title\", \"click\"], [1, \"text-truncate\", 3, \"title\"], [\"bindValue\", \"fsan\", \"bindLabel\", \"fsan\", 1, \"selectboxwidth\", 3, \"ngModel\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"ngModelChange\"], [1, \"col-filter\", \"ccl-form\", \"position-relative\"], [\"type\", \"text\", \"maxlength\", \"12\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\", \"keypress\", \"keyup\"], [\"class\", \"vald-tag mandatory-msg  position-absolute\", 4, \"ngIf\"], [1, \"vald-tag\", \"mandatory-msg\", \"position-absolute\"], [3, \"ngClass\"], [\"id\", \"Region\", 1, \"row\", \"my-3\"], [1, \"col-md-6\", \"col-lg-6\"], [\"data-toggle\", \"tooltip\", 1, \"long-title-ellips\", 3, \"title\"], [1, \"mwc-btns\", \"row\", \"align-items-center\"], [\"id\", \"PortCourtDownloadSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-dload\", 3, \"title\", \"click\"], [\"id\", \"PortCourtExpandSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-expand\", 3, \"title\", \"click\"], [1, \"img\", \"my-2\"], [1, \"greyaa\", \"mb0\", \"heading-subtitle\"], [1, \"chart-gray-subtitle\", \"mb-0\"], [1, \"col-md-12\", \"p-2\"], [\"id\", \"PortCourtChart\", 1, \"chart-box\", \"h-300px\"], [\"id\", \"PacketDroppedDownloadSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-dload\", 3, \"title\", \"click\"], [\"id\", \"PacketDroppedExpandSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-expand\", 3, \"title\", \"click\"], [\"id\", \"PacketDroppedChart\", 1, \"chart-box\", \"h-320px\"], [1, \"mt-3\"], [1, \"d-flex\", \"justify-content-center\"], [\"role\", \"\", 1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"w-100\", \"alert\", \"alert-danger\", \"fade\", \"show\", \"my-3\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [1, \"spinner-border\", \"text-primary\"], [1, \"search-close\", 3, \"click\"], [\"src\", \"../../../../../assets/img/ic_close-44px.svg\"], [1, \"loader\"], [\"class\", \"text-link min-width-135\", 4, \"ngIf\"], [1, \"d-flex\"], [1, \"text-link\", \"min-width-135\"], [\"href\", \"javascript:void(0)\", 3, \"click\"], [\"src\", \"../../../../../assets/img/plus-icon.svg\", \"alt\", \"\", 1, \"mx-2\"], [\"class\", \"w-100 my-2\", 4, \"ngFor\", \"ngForOf\"], [1, \"w-100\", \"my-2\"], [3, \"wholedata\", \"params\", \"paramname\", \"charttype\", \"title\", \"system\", \"interface\", \"divid\", \"chartname\", \"page\", \"valueChange\"], [1, \"modal-header\", \"d-block\"], [\"id\", \"showInfoModal\", 1, \"modal-title\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\"], [1, \"modal-body\", \"add-device-model\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn-default\", \"primary\", \"px-3\", \"px-3\", 3, \"click\"]],\n    template: function CcoOntComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CcoOntComponent_div_0_Template, 2, 1, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"span\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"h3\", 6);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 3);\n        i0.ɵɵelementStart(10, \"span\", 7);\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 5);\n        i0.ɵɵelementStart(13, \"h3\");\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 8);\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 3);\n        i0.ɵɵelementStart(18, \"span\", 9);\n        i0.ɵɵtext(19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 5);\n        i0.ɵɵelementStart(21, \"h3\");\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 8);\n        i0.ɵɵtext(24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 3);\n        i0.ɵɵelementStart(26, \"span\", 10);\n        i0.ɵɵtext(27);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"div\", 5);\n        i0.ɵɵelementStart(29, \"h3\");\n        i0.ɵɵtext(30);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"div\", 11);\n        i0.ɵɵelementStart(32, \"span\", 12);\n        i0.ɵɵelement(33, \"img\", 13);\n        i0.ɵɵtext(34, \" Show Thresholds\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"div\", 14);\n        i0.ɵɵelementStart(36, \"button\", 15);\n        i0.ɵɵelement(37, \"span\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"p\", 16);\n        i0.ɵɵtext(39, \"ONT Rx Light Level for GPON\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"table\", 17);\n        i0.ɵɵelementStart(41, \"tr\");\n        i0.ɵɵelementStart(42, \"td\", 18);\n        i0.ɵɵtext(43, \"Set Threshold:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"td\", 19);\n        i0.ɵɵtext(45);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"tr\");\n        i0.ɵɵelementStart(47, \"td\", 18);\n        i0.ɵɵtext(48, \"Clear Threshold:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(49, \"td\", 19);\n        i0.ɵɵtext(50);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(51, \"p\", 16);\n        i0.ɵɵtext(52, \"ONT Rx Light Level for XGS-PON\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"table\", 20);\n        i0.ɵɵelementStart(54, \"tr\");\n        i0.ɵɵelementStart(55, \"td\", 18);\n        i0.ɵɵtext(56, \"Set Threshold:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"td\", 19);\n        i0.ɵɵtext(58);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(59, \"tr\");\n        i0.ɵɵelementStart(60, \"td\", 18);\n        i0.ɵɵtext(61, \"Clear Threshold:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"td\", 19);\n        i0.ɵɵtext(63);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(64, CcoOntComponent_a_64_Template, 2, 0, \"a\", 21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(65, CcoOntComponent_section_65_Template, 50, 64, \"section\", 22);\n        i0.ɵɵtemplate(66, CcoOntComponent_section_66_Template, 38, 19, \"section\", 23);\n        i0.ɵɵelementStart(67, \"section\", 24);\n        i0.ɵɵelementStart(68, \"div\", 25);\n        i0.ɵɵelementStart(69, \"div\", 26);\n        i0.ɵɵelementStart(70, \"div\", 27);\n        i0.ɵɵelementStart(71, \"div\", 28);\n        i0.ɵɵelementStart(72, \"div\", 29);\n        i0.ɵɵtext(73);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(74, \"div\", 30);\n        i0.ɵɵtemplate(75, CcoOntComponent_button_75_Template, 2, 0, \"button\", 31);\n        i0.ɵɵelementStart(76, \"input\", 32);\n        i0.ɵɵlistener(\"ngModelChange\", function CcoOntComponent_Template_input_ngModelChange_76_listener($event) {\n          return ctx.searchText = $event;\n        })(\"keyup\", function CcoOntComponent_Template_input_keyup_76_listener($event) {\n          return ctx.search($event.target.value);\n        })(\"search\", function CcoOntComponent_Template_input_search_76_listener($event) {\n          return ctx.search($event.target.value);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(77, \"div\", 26);\n        i0.ɵɵelementStart(78, \"div\", 33);\n        i0.ɵɵelementStart(79, \"table\", 34);\n        i0.ɵɵelementStart(80, \"thead\");\n        i0.ɵɵelementStart(81, \"tr\");\n        i0.ɵɵelementStart(82, \"th\");\n        i0.ɵɵtext(83);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(84, \"th\");\n        i0.ɵɵtext(85);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(86, \"th\");\n        i0.ɵɵtext(87);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(88, CcoOntComponent_div_88_Template, 5, 1, \"div\", 35);\n        i0.ɵɵtemplate(89, CcoOntComponent_tbody_89_Template, 2, 1, \"tbody\", 36);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(90, \"div\", 37);\n        i0.ɵɵelementStart(91, \"div\", 38);\n        i0.ɵɵelementStart(92, \"div\", 39);\n        i0.ɵɵelementStart(93, \"div\", 40);\n        i0.ɵɵelementStart(94, \"div\", 41);\n        i0.ɵɵtext(95);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(96, \"div\", 42);\n        i0.ɵɵelementStart(97, \"button\", 43);\n        i0.ɵɵlistener(\"click\", function CcoOntComponent_Template_button_click_97_listener() {\n          return ctx.downloadFunction(ctx.fullScrChart, \"#fullScreenChart\", ctx.fullScreenChartType, ctx.fullScreenData, ctx.downloadTitle);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(98, \"button\", 44);\n        i0.ɵɵlistener(\"click\", function CcoOntComponent_Template_button_click_98_listener() {\n          return ctx.fullScreenInvertFunction();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(99, \"div\", 45);\n        i0.ɵɵtemplate(100, CcoOntComponent_div_100_Template, 5, 1, \"div\", 46);\n        i0.ɵɵtemplate(101, CcoOntComponent_div_101_Template, 6, 1, \"div\", 47);\n        i0.ɵɵelementStart(102, \"div\", 48);\n        i0.ɵɵelement(103, \"div\", 49);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(104, \"div\", 50);\n        i0.ɵɵelementStart(105, \"table\", 51);\n        i0.ɵɵelementStart(106, \"thead\");\n        i0.ɵɵelementStart(107, \"tr\");\n        i0.ɵɵelementStart(108, \"th\");\n        i0.ɵɵtext(109);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(110, \"th\", 52);\n        i0.ɵɵtext(111);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(112, \"th\", 52);\n        i0.ɵɵtext(113);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(114, \"tbody\");\n        i0.ɵɵtemplate(115, CcoOntComponent_tr_115_Template, 7, 6, \"tr\", 53);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(116, \"section\", 54);\n        i0.ɵɵtemplate(117, CcoOntComponent_div_117_Template, 2, 1, \"div\", 36);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(118, CcoOntComponent_ng_template_118_Template, 10, 3, \"ng-template\", 55, 56, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasScopeAccess);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.language[\"Total ONTs\"]);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.ontCounts ? ctx.ontCounts : 0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.language[\"ONTs With BIP Error\"], \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.bipErrorCount ? ctx.bipErrorCount : 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.Past_24_hours, \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.language[\"ONTs With Low Light Levels\"], \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.lowlightlevelCounts ? ctx.lowlightlevelCounts : 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.Past_24_hours, \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.language[\"Quarantined ONTs\"]);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.quarantinedCounts ? ctx.quarantinedCounts : 0);\n        i0.ɵɵadvance(15);\n        i0.ɵɵtextInterpolate1(\"\", ctx.thresholdData == null ? null : ctx.thresholdData.ontPonPowerLevelThresholds == null ? null : ctx.thresholdData.ontPonPowerLevelThresholds.gponRxSignalLoThreshold, \" dBm\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"\", ctx.thresholdData == null ? null : ctx.thresholdData.ontPonPowerLevelThresholdsClear == null ? null : ctx.thresholdData.ontPonPowerLevelThresholdsClear.gponRxSignalLoThreshold, \" dBm\");\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate1(\"\", ctx.thresholdData == null ? null : ctx.thresholdData.ontPonPowerLevelThresholds == null ? null : ctx.thresholdData.ontPonPowerLevelThresholds.xponRxSignalLoThreshold, \" dBm\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"\", ctx.thresholdData == null ? null : ctx.thresholdData.ontPonPowerLevelThresholdsClear == null ? null : ctx.thresholdData.ontPonPowerLevelThresholdsClear.xponRxSignalLoThreshold, \" dBm\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasWriteAccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasScopeAccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hideInterface);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", !ctx.fullScreen && !ctx.hideInterface ? \"d-block\" : \"d-none\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language[ctx.tableName] || ctx.tableName, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.searchText);\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.language[ctx.searchType] || ctx.searchType);\n        i0.ɵɵproperty(\"ngModel\", ctx.searchText);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"dtOptions\", ctx.dtOptions)(\"dtTrigger\", ctx.dtTrigger);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", ctx.chartType == \"Ont\" ? ctx.language[\"Ont\"] : ctx.language[ctx.chartType] || ctx.chartType, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.chartType == \"Ont\" ? ctx.language[\"ONT with BIP Error\"] : ctx.language[\"BIP Error Count\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.chartType == \"Ont\" ? ctx.language[\"ONT with Low Optical Power\"] : ctx.language[\"Optical Power Low Threshold Count\"]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.fullScreen ? \"d-block\" : \"d-none\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.fullScreenChartName);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"title\", ctx.language.export);\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"title\", ctx.language.shrink);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.fullScreenMsg);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", !ctx.fullScreenMsg ? \"d-block\" : \"d-none\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"dtOptions\", ctx.dtOptions)(\"dtTrigger\", ctx.dtTrigger1);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.language[ctx.fullScreenChartType] || ctx.fullScreenChartType);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.fullScreenChart != \"ponchart\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.language[\"BIP Error Count\"]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.fullScreenChart != \"Lowlighchart\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.language[\"Optical Power Low Threshold Count\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.fullScreenData);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.singleTimeseries && !ctx.fullScreen);\n      }\n    },\n    directives: [i14.NgIf, i14.NgClass, i15.DefaultValueAccessor, i15.NgControlStatus, i15.NgModel, i16.DataTableDirective, i14.NgForOf, i17.Calendar, i18.NgSelectComponent, i18.ɵh, i18.ɵf, i15.MaxLengthValidator, i19.TimeserieschartComponent],\n    styles: [\".p-10[_ngcontent-%COMP%]{padding:10px}.p-15[_ngcontent-%COMP%]{padding:15px}.p-20[_ngcontent-%COMP%]{padding:20px}.p-25[_ngcontent-%COMP%]{padding:25px}.p-30[_ngcontent-%COMP%]{padding:30px}.p-35[_ngcontent-%COMP%]{padding:35px}.p-40[_ngcontent-%COMP%]{padding:40px}.p-45[_ngcontent-%COMP%]{padding:45px}.p-50[_ngcontent-%COMP%]{padding:50px}.p-55[_ngcontent-%COMP%]{padding:55px}.p-60[_ngcontent-%COMP%]{padding:60px}.pt-10[_ngcontent-%COMP%]{padding-top:10px}.pt-15[_ngcontent-%COMP%]{padding-top:15px}.pt-20[_ngcontent-%COMP%]{padding-top:20px}.pt-25[_ngcontent-%COMP%]{padding-top:25px}.pt-30[_ngcontent-%COMP%]{padding-top:30px}.pt-35[_ngcontent-%COMP%]{padding-top:35px}.pt-40[_ngcontent-%COMP%]{padding-top:40px}.pt-45[_ngcontent-%COMP%]{padding-top:45px}.pt-50[_ngcontent-%COMP%]{padding-top:50px}.pt-55[_ngcontent-%COMP%]{padding-top:55px}.pt-60[_ngcontent-%COMP%]{padding-top:60px}.mt-10[_ngcontent-%COMP%]{margin-top:10px}.mt-15[_ngcontent-%COMP%]{margin-top:15px}.mt-20[_ngcontent-%COMP%]{margin-top:20px}.mt-25[_ngcontent-%COMP%]{margin-top:25px}.mt-30[_ngcontent-%COMP%]{margin-top:30px}.mt-35[_ngcontent-%COMP%]{margin-top:35px}.mt-40[_ngcontent-%COMP%]{margin-top:40px}.mt-45[_ngcontent-%COMP%]{margin-top:45px}.mt-50[_ngcontent-%COMP%]{margin-top:50px}.mt-55[_ngcontent-%COMP%]{margin-top:55px}.mt-60[_ngcontent-%COMP%]{margin-top:60px}.mb0[_ngcontent-%COMP%]{margin-bottom:0}.mb1[_ngcontent-%COMP%]{margin-bottom:10px}.mb15[_ngcontent-%COMP%]{margin-bottom:15px}.mb2[_ngcontent-%COMP%]{margin-bottom:20px}.mb3[_ngcontent-%COMP%]{margin-bottom:30px}.mb4[_ngcontent-%COMP%]{margin-bottom:40px}.mb5[_ngcontent-%COMP%]{margin-bottom:50px}.mb6[_ngcontent-%COMP%]{margin-bottom:60px}.mb7[_ngcontent-%COMP%]{margin-bottom:70px}.mb8[_ngcontent-%COMP%]{margin-bottom:80px}.mb9[_ngcontent-%COMP%]{margin-bottom:90px}.primary[_ngcontent-%COMP%]{color:#0279ff}.secondary[_ngcontent-%COMP%]{color:#0054b2}.calixpurple[_ngcontent-%COMP%]{color:#43367d}.calixblue[_ngcontent-%COMP%]{color:#324a9d}.calixsky[_ngcontent-%COMP%]{color:#387cbf}.calixorange[_ngcontent-%COMP%]{color:#e97b00}.brightred[_ngcontent-%COMP%]{color:#ff3600}.lightred[_ngcontent-%COMP%]{color:#ff734f}.purple[_ngcontent-%COMP%]{color:#91479b}.error[_ngcontent-%COMP%]{color:#c70000}.warning[_ngcontent-%COMP%]{color:#ff8238}.warningt[_ngcontent-%COMP%]{color:#c74900}.success[_ngcontent-%COMP%]{color:#82bf00}.successt[_ngcontent-%COMP%]{color:#507500}.caution[_ngcontent-%COMP%]{color:#f7c343}.wgrey[_ngcontent-%COMP%]{color:#f8f8fa}.snowgrey[_ngcontent-%COMP%]{color:#ebeaef}.lgrey[_ngcontent-%COMP%]{color:#ccc}.calixgrey[_ngcontent-%COMP%]{color:#9e9e9e}.blastgrey[_ngcontent-%COMP%]{color:gray}.greyaa[_ngcontent-%COMP%]{color:#1a1f22}.darkgrey[_ngcontent-%COMP%]{color:#333}.calixblack[_ngcontent-%COMP%]{color:#1a1f22}.calixblack[_ngcontent-%COMP%]{color:#000}.calixred[_ngcontent-%COMP%]{color:#fb2d55}.calixgreen[_ngcontent-%COMP%]{color:#349885}.calixaqblue[_ngcontent-%COMP%]{color:#26c0eb}.title[_ngcontent-%COMP%]{font-size:42px;font-weight:300;line-height:53px}.title-second[_ngcontent-%COMP%]{font-size:24px!important;font-style:normal;font-weight:400!important;line-height:30px;letter-spacing:0em;text-align:left;color:#1a1f22}.heading-sm[_ngcontent-%COMP%]{font-size:16px;font-weight:600;line-height:22px}.listlabels[_ngcontent-%COMP%]{font-size:16px;font-weight:400;line-height:22px}.listdataem[_ngcontent-%COMP%]{font-size:13px;font-weight:600;line-height:21px}.listdata[_ngcontent-%COMP%]{font-size:13px;font-weight:400;line-height:24px}.formlabels[_ngcontent-%COMP%]{font-size:13px;font-weight:400;line-height:16px}.captions[_ngcontent-%COMP%]{font-size:11px;font-weight:600;line-height:13.2px}.chartno[_ngcontent-%COMP%]{font-size:10px;font-weight:400;line-height:12px}.btn-large[_ngcontent-%COMP%]{border-radius:26px;padding:12px;min-width:130px;text-align:center;font-size:20px;font-weight:400;color:#fff;box-shadow:5px 5px 10px #00000026;border:0}.btn-large.primary[_ngcontent-%COMP%]{background:#0279ff}.btn-large.primary[_ngcontent-%COMP%]:hover{background:#0054b2}.btn-large.primary[_ngcontent-%COMP%]:focus{background:#0054b2;outline:none;box-shadow:none;border:0}.btn-large.disabled[_ngcontent-%COMP%]{background:rgba(2,121,255,.26)}.btn-large.btn-default[_ngcontent-%COMP%]{background:#F8F8FA;color:#4c4c4c}.btn-large.btn-default[_ngcontent-%COMP%]:hover{background:#EBEAEF;color:#4c4c4c}.btn-large.btn-default[_ngcontent-%COMP%]:focus{background:#EBEAEF;color:#0279ff}.btn-large.btn-default.disabled[_ngcontent-%COMP%]{opacity:.49}.btn-default[_ngcontent-%COMP%]{border-radius:16px;padding:5px;min-width:86px;text-align:center;font-size:16px;font-weight:400;color:#fff;box-shadow:3px 3px 6px #00000026;border:0}.btn-default.primary[_ngcontent-%COMP%]{background:#0279ff}.btn-default.primary[_ngcontent-%COMP%]:hover{background:#0054b2}.btn-default.primary[_ngcontent-%COMP%]:focus{background:#0054b2}.btn-default.disabled[_ngcontent-%COMP%]{background:rgba(2,121,255,.26)}.btn-default.btn-dft[_ngcontent-%COMP%]{background:#F8F8FA;color:#4c4c4c;border:1px solid #CCCCCC}.btn-default.btn-dft[_ngcontent-%COMP%]:hover{background:#EBEAEF;color:#4c4c4c}.btn-default.btn-dft[_ngcontent-%COMP%]:focus{background:#EBEAEF;color:#0279ff}.btn-default.btn-dft.disabled[_ngcontent-%COMP%]{opacity:.49}.btn-small[_ngcontent-%COMP%]{border-radius:12px;padding:3px;min-width:70px;text-align:center;font-size:12px;font-weight:400;color:#fff;box-shadow:2px 2px 4px #00000026;border:0}.btn-small.primary[_ngcontent-%COMP%]{background:#0279ff}.btn-small.primary[_ngcontent-%COMP%]:hover{background:#0054b2}.btn-small.primary[_ngcontent-%COMP%]:focus{background:#EBEAEF}.btn-small.disabled[_ngcontent-%COMP%]{background:rgba(2,121,255,.26)}.btn-small.btn-default[_ngcontent-%COMP%]{background:#F8F8FA;color:#4c4c4c}.btn-small.btn-default[_ngcontent-%COMP%]:hover{background:#EBEAEF;color:#4c4c4c}.btn-small.btn-default[_ngcontent-%COMP%]:focus{background:#EBEAEF;color:#0279ff}.btn-small.btn-default.disabled[_ngcontent-%COMP%]{opacity:.49}.btn-round[_ngcontent-%COMP%]{border-radius:50%;width:32px;height:32px;display:flex;justify-content:center;align-items:center;border:0;background-position:center;background-repeat:no-repeat;padding:0}.btn-round.info-round[_ngcontent-%COMP%]{width:32px;height:32px}.btn-round.primary[_ngcontent-%COMP%]{background-color:#0279ff}.btn-round.primary[_ngcontent-%COMP%]:hover{background-color:#0054b2}.btn-round.primary[_ngcontent-%COMP%]:focus{background-color:#0054b2;outline:none;box-shadow:none;border:0}.btn-round[_ngcontent-%COMP%]:focus{outline:none;box-shadow:none;border:0}.btn-round.btn-small-24[_ngcontent-%COMP%]{width:24px;height:24px}.btn-round.btn-small-24.btn-grey[_ngcontent-%COMP%]{background-color:#f8f8fa}.btn-round.btn-small-24.btn-grey[_ngcontent-%COMP%]:hover{background-color:#ebeaef;background-position:center;background-repeat:no-repeat}.btn-round.btn-small-24.btn-grey[_ngcontent-%COMP%]:focus{background-color:#ebeaef;background-position:center;background-repeat:no-repeat}.btn-arrow[_ngcontent-%COMP%]{height:32px;line-height:32px;min-width:110px;text-align:center;border:0;padding:0;box-shadow:2px 2px 4px #00000026;font-size:16px;font-weight:400;color:#1a1f22;justify-content:center;align-items:center;position:relative;border-radius:26px}.btn-arrow[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{position:relative;top:-2px}.btn-arrow.btn-arr-prev[_ngcontent-%COMP%]{box-shadow:none}.btn-arrow.btn-arr-prev[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-right:10px}.btn-arrow.btn-arr-nxt[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{margin-left:10px}.btn-arrow.primary[_ngcontent-%COMP%]{background-color:#0279ff;color:#fff}.btn-arrow.primary[_ngcontent-%COMP%]:hover{background-color:#0054b2}.btn-arrow.primary[_ngcontent-%COMP%]:focus{background-color:#0054b2;outline:none;box-shadow:none;border:0}.btn-arrow.btn-grey[_ngcontent-%COMP%]{background-color:#f8f8fa}.btn-arrow.btn-grey[_ngcontent-%COMP%]:hover{background-color:#ebeaef;background-position:center;background-repeat:no-repeat}.btn-arrow.btn-grey[_ngcontent-%COMP%]:focus{background-color:#ebeaef;background-position:center;background-repeat:no-repeat}[type=radio][_ngcontent-%COMP%]:checked, [type=radio][_ngcontent-%COMP%]:not(:checked){width:16px;height:16px;min-height:16px;position:relative!important;cursor:pointer;appearance:none;-webkit-appearance:none;-moz-appearance:none}[type=radio][_ngcontent-%COMP%]:checked:before, [type=radio][_ngcontent-%COMP%]:checked:after, [type=radio][_ngcontent-%COMP%]:not(:checked):before{content:\\\"\\\";position:absolute;border-radius:100%}[type=radio][_ngcontent-%COMP%]:checked:before{background:#0279FF;width:16px;height:16px;top:0px}[type=radio][_ngcontent-%COMP%]:checked:after{width:12px;height:12px;background:#0279FF;top:2px;left:2px;border:1px solid #ffffff;z-index:9}[type=radio][_ngcontent-%COMP%]:not(:checked):before{background:#ffffff;border:1px solid #CCCCCC;width:16px;height:16px}[type=radio][_ngcontent-%COMP%]:checked + label[_ngcontent-%COMP%], [type=radio][_ngcontent-%COMP%]:not(:checked) + label[_ngcontent-%COMP%]{position:relative;padding-left:10px;cursor:pointer;display:inline-block;color:#666}[type=radio][_ngcontent-%COMP%]:checked:disabled:before{background:#b4d7ff}[type=radio][_ngcontent-%COMP%]:checked:disabled:after{background:#b4d7ff}[type=radio][_ngcontent-%COMP%]:disabled, [type=radio][_ngcontent-%COMP%]:disabled + label[_ngcontent-%COMP%]{cursor:not-allowed}[type=radio][_ngcontent-%COMP%]:not(:checked):hover:before{background:#ffffff;border:1px solid #0279FF}[type=radio][_ngcontent-%COMP%]:not(:checked):disabled:before{background:#F9F9FB;border:1px solid #e6e6e6}[type=radio][_ngcontent-%COMP%]:not(:checked):disabled:hover:before{background:#F9F9FB;border:1px solid #e6e6e6}[type=radio][_ngcontent-%COMP%]{border-color:transparent!important}[type=radio][_ngcontent-%COMP%]:focus{border-color:transparent!important}[type=radio][_ngcontent-%COMP%]:active{border-color:transparent!important}.cco-pon-report-warpper[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;justify-content:space-between;margin-top:36px}.cco-pon-report-warpper[_ngcontent-%COMP%]   .cco-pon-report-item[_ngcontent-%COMP%]{flex:0 32%;margin-bottom:2%}.pon-report-table[_ngcontent-%COMP%]{width:100%}.pon-report-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{width:100%}.pon-report-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]{border-bottom:1px solid #cccccc}.pon-report-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{padding-bottom:8px;padding-left:12px;font-weight:600;font-size:16px;line-height:14px;color:#1a1f22}.pon-report-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{padding:7px 0 7px 12px;font-weight:400;font-size:15px;line-height:24px;color:#333}.pon-report-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover{background-color:#edf5ff}.pon-report-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-child(even){background-color:#f8f8fa}.pon-report-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-child(even):hover{background-color:#edf5ff}.primary[_ngcontent-%COMP%]{color:#0279ff!important}.pon-sub-title[_ngcontent-%COMP%]{font-weight:400;font-size:18px;line-height:23px}.mwc-btns[_ngcontent-%COMP%]{justify-content:flex-end;width:120px}.mwc-btns[_ngcontent-%COMP%]   button.btn-small-24[_ngcontent-%COMP%]{width:24px;height:24px}.mwc-btns[_ngcontent-%COMP%]   button.btn-small-24.btn-grey[_ngcontent-%COMP%]{background-position:center;background-repeat:no-repeat}.mwc-btns[_ngcontent-%COMP%]   button.btn-small-24.btn-grey[_ngcontent-%COMP%]:hover{background-position:center;background-repeat:no-repeat}.mwc-btns[_ngcontent-%COMP%]   button.btn-small-24.btn-grey[_ngcontent-%COMP%]:focus{background-position:center;background-repeat:no-repeat}.mwc-btns[_ngcontent-%COMP%]   button.btn-que[_ngcontent-%COMP%]{margin-right:15px;background-image:url(ic_info_grey.89b781511c1fde63583b.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-que[_ngcontent-%COMP%]:hover{background-image:url(ic_info_grey.89b781511c1fde63583b.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-que[_ngcontent-%COMP%]:focus{background-image:url(ic_info_grey.89b781511c1fde63583b.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-dload[_ngcontent-%COMP%]{margin-right:6px;background-image:url(ic_download_grey.9f487628f7100a5a71b9.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-dload[_ngcontent-%COMP%]:hover{background-image:url(ic_download_grey.9f487628f7100a5a71b9.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-dload[_ngcontent-%COMP%]:focus{background-image:url(ic_download_grey.9f487628f7100a5a71b9.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-expand[_ngcontent-%COMP%]{margin-right:6px;background-image:url(ic_expand_grey.a00ec25dcedb0cff0b8c.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-expand[_ngcontent-%COMP%]:hover{background-image:url(ic_expand_grey.a00ec25dcedb0cff0b8c.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-expand[_ngcontent-%COMP%]:focus{background-image:url(ic_expand_grey.a00ec25dcedb0cff0b8c.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-expand-inv[_ngcontent-%COMP%]{margin-right:6px;background-image:url(ic_expand_inverted_grey.044960530517ee37a1a9.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-expand-inv[_ngcontent-%COMP%]:hover{background-image:url(ic_expand_inverted_grey.044960530517ee37a1a9.svg)}.mwc-btns[_ngcontent-%COMP%]   button.btn-expand-inv[_ngcontent-%COMP%]:focus{background-image:url(ic_expand_inverted_grey.044960530517ee37a1a9.svg)}  .p-cal-custom .p-inputtext{padding-right:14px!important}  .p-cal-custom .p-button.p-button-icon-only{width:22px!important}.text-plus-icon[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:none}.text-plus-icon[_ngcontent-%COMP%]:hover   span[_ngcontent-%COMP%]{display:inline}.text-link[_ngcontent-%COMP%]{color:#0279ff;cursor:pointer;text-decoration:none}.text-link[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}button.search-close[_ngcontent-%COMP%]{border:none;background:transparent;outline:none;position:absolute;right:23px;top:3px}button.search-close[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:12px}.health-ont-menu-item[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-weight:600}.health-ont-menu-item[_ngcontent-%COMP%]   .menu-title[_ngcontent-%COMP%]{font-size:14px;font-weight:500}.health-ont-menu-item[_ngcontent-%COMP%]   .red[_ngcontent-%COMP%]{color:#ff3600}.health-ont-menu-item[_ngcontent-%COMP%]   .orange[_ngcontent-%COMP%]{color:#fc7235}.health-ont-menu-item[_ngcontent-%COMP%]   .blue[_ngcontent-%COMP%]{color:#72b4ff}.health-ont-menu-item[_ngcontent-%COMP%]   .yellow[_ngcontent-%COMP%]{color:#f3b426}.health-ont-menu-item[_ngcontent-%COMP%]   .green[_ngcontent-%COMP%]{color:#82bf00}.health-ont-menu-wrapper[_ngcontent-%COMP%]   .health-ont-menu-item[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-size:30px!important;color:#0054b2!important;line-height:32px!important;font-weight:300}.health-ont-menu-wrapper[_ngcontent-%COMP%]   .health-ont-menu-item[_ngcontent-%COMP%]   .menu-title[_ngcontent-%COMP%]{color:#1a1f22;font-size:14px;line-height:16.4px}.health-ont-menu-wrapper[_ngcontent-%COMP%]{display:flex;width:100%}@media screen and (max-width: 767px){.health-ont-menu-wrapper[_ngcontent-%COMP%]{display:block}}.mandatory-msg.position-absolute[_ngcontent-%COMP%]{left:0;margin-top:40px}.chart-gray-subtitle[_ngcontent-%COMP%]{color:#666;line-height:18px;text-align:center;font-family:\\\"Source Sans Pro\\\";font-size:14px;margin-top:15px}.min-width-135[_ngcontent-%COMP%]{min-width:135px}.health-ont-menu-item.kbi-item[_ngcontent-%COMP%]{min-width:170px;padding:0 12px!important;border-left:1px solid #EBEAEF!important}.ic_info[_ngcontent-%COMP%]{width:13px;height:13px}.pop[_ngcontent-%COMP%]{padding:22px 24px 26px 26px;width:475px;filter:drop-shadow(0px 5px 15px rgba(128,128,128,.25));fill:#fff;border-radius:10px;border:none;transform:translate(-101%,-50%)!important}.pop[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{color:#000;font-size:15px;font-weight:600;line-height:24px}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:before{display:none!important}.pop[_ngcontent-%COMP%]   .close[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{background-size:12px 12px}\"]\n  });\n  return CcoOntComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}