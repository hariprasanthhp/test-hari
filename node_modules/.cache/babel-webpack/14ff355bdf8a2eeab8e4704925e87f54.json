{"ast":null,"code":"import { some } from 'min-dash';\n\n/**\n * A handler that implements reversible appending of shapes\n * to a source shape.\n *\n * @param {canvas} Canvas\n * @param {elementFactory} ElementFactory\n * @param {modeling} Modeling\n */\nexport default function AppendShapeHandler(modeling) {\n  this._modeling = modeling;\n}\nAppendShapeHandler.$inject = ['modeling'];\n\n// api //////////////////////\n\n/**\n * Creates a new shape\n *\n * @param {Object} context\n * @param {ElementDescriptor} context.shape the new shape\n * @param {ElementDescriptor} context.source the source object\n * @param {ElementDescriptor} context.parent the parent object\n * @param {Point} context.position position of the new element\n */\nAppendShapeHandler.prototype.preExecute = function (context) {\n  var source = context.source;\n  if (!source) {\n    throw new Error('source required');\n  }\n  var target = context.target || source.parent,\n    shape = context.shape,\n    hints = context.hints || {};\n  shape = context.shape = this._modeling.createShape(shape, context.position, target, {\n    attach: hints.attach\n  });\n  context.shape = shape;\n};\nAppendShapeHandler.prototype.postExecute = function (context) {\n  var hints = context.hints || {};\n  if (!existsConnection(context.source, context.shape)) {\n    // create connection\n    if (hints.connectionTarget === context.source) {\n      this._modeling.connect(context.shape, context.source, context.connection);\n    } else {\n      this._modeling.connect(context.source, context.shape, context.connection);\n    }\n  }\n};\nfunction existsConnection(source, target) {\n  return some(source.outgoing, function (c) {\n    return c.target === target;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}