{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../../../shared/services/marketing-api.sevice\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let DownloadFileNameService = /*#__PURE__*/(() => {\n  class DownloadFileNameService {\n    constructor(marketingApiService, ssoAuthService) {\n      this.marketingApiService = marketingApiService;\n      this.ssoAuthService = ssoAuthService;\n    }\n    generateDownloadName(chartName, secondName) {\n      let name = '';\n      let period = this.marketingApiService.getPeriod();\n      let region = this.marketingApiService.getRegion();\n      let location = this.marketingApiService.getLocation();\n      let date = this.formatTodayDate() ? this.formatTodayDate() : '';\n      let days = 'past_30_days';\n      if (period == 'last-1m') {\n        days = 'past_month';\n      } else if (period == 'last-2m') {\n        days = 'past_2_months';\n      }\n      name += chartName;\n      if (secondName) {\n        name += '-' + secondName;\n      }\n      name += '-' + region + '-' + location + '-' + days + '-' + date;\n      return name;\n    }\n    generateDownloadNameSearchPage(chartName, secondName) {\n      let name = '';\n      let region = 'All';\n      let location = 'All';\n      let date = this.formatTodayDate() ? this.formatTodayDate() : '';\n      name += chartName;\n      if (secondName) {\n        name += '-' + secondName;\n      }\n      name += '-' + region + '-' + location + '-' + date;\n      return name;\n    }\n    generateDownloadNameHome(chartName, secondName) {\n      let name = '';\n      let region = 'All';\n      let location = 'All';\n      let date = this.formatTodayDate() ? this.formatTodayDate() : '';\n      let days = 'past_30_days';\n      name += chartName;\n      if (secondName) {\n        name += '-' + secondName;\n      }\n      name += '-' + region + '-' + location + '-' + days + '-' + date;\n      return name;\n    }\n    //genareate household\n    generateDownloadWOPeriodName(chartName) {\n      let name = '';\n      let period = this.marketingApiService.getPeriod();\n      let region = this.marketingApiService.getRegion();\n      let location = this.marketingApiService.getLocation();\n      let date = this.formatTodayDate() ? this.formatTodayDate() : '';\n      name += chartName;\n      name += '-' + region + '-' + location + '-' + date;\n      return name;\n    }\n    generateDownloadNameForDrillDown(chartName) {\n      var _a;\n      let name = '';\n      let period = (_a = localStorage.getItem('currentPeriod')) === null || _a === void 0 ? void 0 : _a.replace('/', '-');\n      let region = this.marketingApiService.getRegion().toUpperCase();\n      let location = this.marketingApiService.getLocation().toUpperCase();\n      let date = new Date().getTime();\n      name = `${chartName}-${this.ssoAuthService.getOrgId()}-${region}-${location}-${period}--${date}`;\n      return name;\n    }\n    //generatereplacespecial char\n    generateReplaceSpecialChar(chartName) {\n      let fileNameTier = chartName.replace('+', '');\n      let fileNameTierVal = fileNameTier.replace('<', 'lt');\n      return fileNameTierVal;\n    }\n    generateInlineChartDownloadName(chartName) {\n      let name = '';\n      let region = this.marketingApiService.getRegion();\n      let location = this.marketingApiService.getLocation();\n      let date = this.formatTodayDate() ? this.formatTodayDate() : '';\n      name += chartName;\n      name += '-' + region + '-' + location + '-' + date;\n      return name;\n    }\n    generateDownloadPeriodName(chartName) {\n      let name = '';\n      let period = 'past_30_days';\n      name += chartName;\n      name += '-' + period;\n      return name;\n    }\n    formatTodayDate() {\n      var d = new Date(),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    }\n  }\n  DownloadFileNameService.ɵfac = function DownloadFileNameService_Factory(t) {\n    return new (t || DownloadFileNameService)(i0.ɵɵinject(i1.MarketingApiService), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  DownloadFileNameService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DownloadFileNameService,\n    factory: DownloadFileNameService.ɵfac,\n    providedIn: 'root'\n  });\n  return DownloadFileNameService;\n})();","map":null,"metadata":{},"sourceType":"module"}