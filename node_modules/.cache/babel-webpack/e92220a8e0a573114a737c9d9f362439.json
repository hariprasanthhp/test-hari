{"ast":null,"code":"import inherits from 'inherits';\nimport CreateShapeHandler from './CreateShapeHandler';\n\n/**\n * A handler that attaches a label to a given target shape.\n *\n * @param {Canvas} canvas\n */\nexport default function CreateLabelHandler(canvas) {\n  CreateShapeHandler.call(this, canvas);\n}\ninherits(CreateLabelHandler, CreateShapeHandler);\nCreateLabelHandler.$inject = ['canvas'];\n\n// api //////////////////////\n\nvar originalExecute = CreateShapeHandler.prototype.execute;\n\n/**\n * Appends a label to a target shape.\n *\n * @method CreateLabelHandler#execute\n *\n * @param {Object} context\n * @param {ElementDescriptor} context.target the element the label is attached to\n * @param {ElementDescriptor} context.parent the parent object\n * @param {Point} context.position position of the new element\n */\nCreateLabelHandler.prototype.execute = function (context) {\n  var label = context.shape;\n  ensureValidDimensions(label);\n  label.labelTarget = context.labelTarget;\n  return originalExecute.call(this, context);\n};\nvar originalRevert = CreateShapeHandler.prototype.revert;\n\n/**\n * Undo append by removing the shape\n */\nCreateLabelHandler.prototype.revert = function (context) {\n  context.shape.labelTarget = null;\n  return originalRevert.call(this, context);\n};\n\n// helpers //////////////////////\n\nfunction ensureValidDimensions(label) {\n  // make sure a label has valid { width, height } dimensions\n  ['width', 'height'].forEach(function (prop) {\n    if (typeof label[prop] === 'undefined') {\n      label[prop] = 0;\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}