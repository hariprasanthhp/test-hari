{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport let MaskDirective = /*#__PURE__*/(() => {\n  class MaskDirective {\n    constructor(control) {\n      this.control = control;\n      this.notApplied = false;\n      this._oldvalue = \"\";\n      this.regExpr = undefined;\n    }\n    set mask(value) {\n      if (value == \"*\") this.notApplied = true;else this.regExpr = new RegExp(value);\n    }\n    change($event) {\n      var _a;\n      if (this.notApplied && !this.regExpr) return;\n      let item = $event.target;\n      let value = item.value;\n      let pos = item.selectionStart;\n      let matchvalue = value;\n      let noMatch = value && this.regExpr && !((_a = this.regExpr) === null || _a === void 0 ? void 0 : _a.test(matchvalue));\n      if (noMatch) {\n        item.selectionStart = item.selectionEnd = pos - 1;\n        if (item.value.length < this._oldvalue.length && pos == 0) pos = 2;\n        if (this.control) this.control.control.setValue(this._oldvalue, {\n          emit: false\n        });\n        item.value = this._oldvalue;\n        item.selectionStart = item.selectionEnd = pos - 1;\n      } else this._oldvalue = value;\n    }\n  }\n  MaskDirective.ɵfac = function MaskDirective_Factory(t) {\n    return new (t || MaskDirective)(i0.ɵɵdirectiveInject(i1.NgControl, 8));\n  };\n  MaskDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: MaskDirective,\n    selectors: [[\"input\"]],\n    hostBindings: function MaskDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"input\", function MaskDirective_input_HostBindingHandler($event) {\n          return ctx.change($event);\n        });\n      }\n    },\n    inputs: {\n      mask: \"mask\"\n    }\n  });\n  return MaskDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}