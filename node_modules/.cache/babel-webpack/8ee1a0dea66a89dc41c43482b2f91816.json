{"ast":null,"code":"var abs = Math.abs,\n  round = Math.round;\n\n/**\n * Snap value to a collection of reference values.\n *\n * @param  {number} value\n * @param  {Array<number>} values\n * @param  {number} [tolerance=10]\n *\n * @return {number} the value we snapped to or null, if none snapped\n */\nexport function snapTo(value, values, tolerance) {\n  tolerance = tolerance === undefined ? 10 : tolerance;\n  var idx, snapValue;\n  for (idx = 0; idx < values.length; idx++) {\n    snapValue = values[idx];\n    if (abs(snapValue - value) <= tolerance) {\n      return snapValue;\n    }\n  }\n}\nexport function topLeft(bounds) {\n  return {\n    x: bounds.x,\n    y: bounds.y\n  };\n}\nexport function topRight(bounds) {\n  return {\n    x: bounds.x + bounds.width,\n    y: bounds.y\n  };\n}\nexport function bottomLeft(bounds) {\n  return {\n    x: bounds.x,\n    y: bounds.y + bounds.height\n  };\n}\nexport function bottomRight(bounds) {\n  return {\n    x: bounds.x + bounds.width,\n    y: bounds.y + bounds.height\n  };\n}\nexport function mid(bounds, defaultValue) {\n  if (!bounds || isNaN(bounds.x) || isNaN(bounds.y)) {\n    return defaultValue;\n  }\n  return {\n    x: round(bounds.x + bounds.width / 2),\n    y: round(bounds.y + bounds.height / 2)\n  };\n}\n\n/**\n * Retrieve the snap state of the given event.\n *\n * @param  {Event} event\n * @param  {string} axis\n *\n * @return {boolean} the snapped state\n *\n */\nexport function isSnapped(event, axis) {\n  var snapped = event.snapped;\n  if (!snapped) {\n    return false;\n  }\n  if (typeof axis === 'string') {\n    return snapped[axis];\n  }\n  return snapped.x && snapped.y;\n}\n\n/**\n * Set the given event as snapped.\n *\n * This method may change the x and/or y position of the shape\n * from the given event!\n *\n * @param {Event} event\n * @param {string} axis\n * @param {number|boolean} value\n *\n * @return {number} old value\n */\nexport function setSnapped(event, axis, value) {\n  if (typeof axis !== 'string') {\n    throw new Error('axis must be in [x, y]');\n  }\n  if (typeof value !== 'number' && value !== false) {\n    throw new Error('value must be Number or false');\n  }\n  var delta,\n    previousValue = event[axis];\n  var snapped = event.snapped = event.snapped || {};\n  if (value === false) {\n    snapped[axis] = false;\n  } else {\n    snapped[axis] = true;\n    delta = value - previousValue;\n    event[axis] += delta;\n    event['d' + axis] += delta;\n  }\n  return previousValue;\n}\n\n/**\n * Get children of a shape.\n *\n * @param {djs.model.Shape} parent\n *\n * @returns {Array<djs.model.Shape|djs.model.Connection>}\n */\nexport function getChildren(parent) {\n  return parent.children || [];\n}","map":null,"metadata":{},"sourceType":"module"}