{"ast":null,"code":"import { bind, forEach } from 'min-dash';\nimport { append as svgAppend, attr as svgAttr, classes as svgClasses, clear as svgClear, create as svgCreate } from 'tiny-svg';\nimport { event as domEvent } from 'min-dom';\nimport { isPrimaryButton } from '../../util/Mouse';\nimport { transform } from '../../util/SvgTransformUtil';\nimport { getReferencePoint } from './Resize';\nvar HANDLE_OFFSET = -6,\n  HANDLE_SIZE = 4,\n  HANDLE_HIT_SIZE = 20;\nvar CLS_RESIZER = 'djs-resizer';\nvar directions = ['n', 'w', 's', 'e', 'nw', 'ne', 'se', 'sw'];\n\n/**\n * This component is responsible for adding resize handles.\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {Selection} selection\n * @param {Resize} resize\n */\nexport default function ResizeHandles(eventBus, canvas, selection, resize) {\n  this._resize = resize;\n  this._canvas = canvas;\n  var self = this;\n  eventBus.on('selection.changed', function (e) {\n    var newSelection = e.newSelection;\n\n    // remove old selection markers\n    self.removeResizers();\n\n    // add new selection markers ONLY if single selection\n    if (newSelection.length === 1) {\n      forEach(newSelection, bind(self.addResizer, self));\n    }\n  });\n  eventBus.on('shape.changed', function (e) {\n    var shape = e.element;\n    if (selection.isSelected(shape)) {\n      self.removeResizers();\n      self.addResizer(shape);\n    }\n  });\n}\nResizeHandles.prototype.makeDraggable = function (element, gfx, direction) {\n  var resize = this._resize;\n  function startResize(event) {\n    // only trigger on left mouse button\n    if (isPrimaryButton(event)) {\n      resize.activate(event, element, direction);\n    }\n  }\n  domEvent.bind(gfx, 'mousedown', startResize);\n  domEvent.bind(gfx, 'touchstart', startResize);\n};\nResizeHandles.prototype._createResizer = function (element, x, y, direction) {\n  var resizersParent = this._getResizersParent();\n  var offset = getHandleOffset(direction);\n  var group = svgCreate('g');\n  svgClasses(group).add(CLS_RESIZER);\n  svgClasses(group).add(CLS_RESIZER + '-' + element.id);\n  svgClasses(group).add(CLS_RESIZER + '-' + direction);\n  svgAppend(resizersParent, group);\n  var visual = svgCreate('rect');\n  svgAttr(visual, {\n    x: -HANDLE_SIZE / 2 + offset.x,\n    y: -HANDLE_SIZE / 2 + offset.y,\n    width: HANDLE_SIZE,\n    height: HANDLE_SIZE\n  });\n  svgClasses(visual).add(CLS_RESIZER + '-visual');\n  svgAppend(group, visual);\n  var hit = svgCreate('rect');\n  svgAttr(hit, {\n    x: -HANDLE_HIT_SIZE / 2 + offset.x,\n    y: -HANDLE_HIT_SIZE / 2 + offset.y,\n    width: HANDLE_HIT_SIZE,\n    height: HANDLE_HIT_SIZE\n  });\n  svgClasses(hit).add(CLS_RESIZER + '-hit');\n  svgAppend(group, hit);\n  transform(group, x, y);\n  return group;\n};\nResizeHandles.prototype.createResizer = function (element, direction) {\n  var point = getReferencePoint(element, direction);\n  var resizer = this._createResizer(element, point.x, point.y, direction);\n  this.makeDraggable(element, resizer, direction);\n};\n\n// resize handles implementation ///////////////////////////////\n\n/**\n * Add resizers for a given element.\n *\n * @param {djs.model.Shape} shape\n */\nResizeHandles.prototype.addResizer = function (shape) {\n  var self = this;\n  var resize = this._resize;\n  if (!resize.canResize({\n    shape: shape\n  })) {\n    return;\n  }\n  forEach(directions, function (direction) {\n    self.createResizer(shape, direction);\n  });\n};\n\n/**\n * Remove all resizers\n */\nResizeHandles.prototype.removeResizers = function () {\n  var resizersParent = this._getResizersParent();\n  svgClear(resizersParent);\n};\nResizeHandles.prototype._getResizersParent = function () {\n  return this._canvas.getLayer('resizers');\n};\nResizeHandles.$inject = ['eventBus', 'canvas', 'selection', 'resize'];\n\n// helpers //////////\n\nfunction getHandleOffset(direction) {\n  var offset = {\n    x: 0,\n    y: 0\n  };\n  if (direction.indexOf('e') !== -1) {\n    offset.x = -HANDLE_OFFSET;\n  } else if (direction.indexOf('w') !== -1) {\n    offset.x = HANDLE_OFFSET;\n  }\n  if (direction.indexOf('s') !== -1) {\n    offset.y = -HANDLE_OFFSET;\n  } else if (direction.indexOf('n') !== -1) {\n    offset.y = HANDLE_OFFSET;\n  }\n  return offset;\n}","map":null,"metadata":{},"sourceType":"module"}