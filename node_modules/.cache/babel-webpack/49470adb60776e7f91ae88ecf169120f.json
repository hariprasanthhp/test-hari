{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./../../../../shared/services/sso-auth.service\";\nexport let SupportRouterService = /*#__PURE__*/(() => {\n  class SupportRouterService {\n    constructor(http, Sso) {\n      this.http = http;\n      this.Sso = Sso;\n      this.API_URI = `${environment.SUPPORT_URL}/device`;\n      this.API_URI1 = `${environment.SUPPORT_URL}/device-systools`;\n      this.maxTemp = {};\n    }\n    getRouterDetails(orgId, serialNumber, route) {\n      return this.http.get(`${this.API_URI}/${orgId}/${serialNumber}/${route}`).pipe(catchError(this.handleError));\n    }\n    getTemperatureDetails(sn, orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${this.API_URI}/thermal/temp?${ID}serialNumber=${sn}`).pipe(catchError(this.handleError));\n      // return this.http.get(`${this.API_URI}/router/thermal/temp?${ID}serialNumber=${sn}`)\n      //   .pipe(catchError(this.handleError));\n    }\n\n    setMaxTempValue(val) {\n      this.maxTemp = val;\n    }\n    getMaxTempValue(key) {\n      return this.maxTemp[key];\n    }\n    updateDhcp(orgId, serialNumber, requestBody) {\n      return this.http.put(`${this.API_URI}/${orgId}/${serialNumber}/dhcp`, requestBody).pipe(catchError(this.handleError));\n    }\n    updateDmz(orgId, serialNumber, requestBody) {\n      return this.http.put(`${this.API_URI}/${orgId}/${serialNumber}/dmz`, requestBody).pipe(catchError(this.handleError));\n    }\n    updatePortForwarding(orgId, serialNumber, requestBody) {\n      return this.http.put(`${this.API_URI}/${orgId}/${serialNumber}/portforwarding`, requestBody).pipe(catchError(this.handleError));\n    }\n    createPortForwarding(orgId, serialNumber, requestBody) {\n      return this.http.post(`${this.API_URI}/${orgId}/${serialNumber}/portforwarding`, requestBody).pipe(catchError(this.handleError));\n    }\n    deletePortForwading(orgId, serialNumber, index) {\n      return this.http.delete(`${this.API_URI}/${orgId}/${serialNumber}/portforwarding?index=${index}`).pipe(catchError(this.handleError));\n    }\n    eventPost(serialNumber, orgId, skip, limit, requestBody) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${this.API_URI1}/event-history/status?${ID}serialNumber=${serialNumber}&limit=${limit}&skip=${skip}`, requestBody).pipe(catchError(this.handleError));\n    }\n    eventCount(serialNumber, orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${this.API_URI1}/event-history/count?${ID}serialNumber=${serialNumber}`).pipe(catchError(this.handleError));\n    }\n    PostdeviceLog(serialNumber, orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${this.API_URI1}/device-log?${ID}serialNumber=${serialNumber}`, {}).pipe(catchError(this.handleError));\n    }\n    downloadDeviceLog(downloadsn, userName, password, downloadUrl) {\n      return this.http.get(`${this.API_URI1}/device-log?&fsan=${downloadsn}&url=${downloadUrl}&username=${userName}&password=${password}`).pipe(catchError(this.handleError));\n    }\n    getCLData(serialNumber, orgId, skip, limit) {\n      const ID = this.Sso.getOrg(orgId);\n      console.log('s94');\n      return this.http.get(`${this.API_URI1}/communication-log/status?${ID}serialNumber=${serialNumber}&limit=${limit}&skip=${skip}&includeXmlText=true`).pipe(catchError(this.handleError));\n    }\n    getCLCount(serialNumber, orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${this.API_URI1}/communication-log/count?${ID}serialNumber=${serialNumber}`).pipe(catchError(this.handleError));\n    }\n    getConnectivityStatus(orgId, serialNumber, ff = true) {\n      // console.log(\"watching url : \" +`${this.API_URI}/${orgId}/${serialNumber}/connectivitystatus`);\n      return this.http.get(`${this.API_URI}/${orgId}/${serialNumber}/connectivitystatus?failFast=${ff}`).pipe(catchError(this.handleError));\n    }\n    getConnectivityStatusNew(orgId, serialNumber, ff = true) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${this.API_URI}/status?${ID}serialNumber=${serialNumber}${!ff ? '&failFast=false' : ''}`).pipe(catchError(this.handleError));\n    }\n    //Backup & Restore\n    deviceBackup(orgId, requestBody) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${this.API_URI}-systools/backup?${ID}`, requestBody).pipe(catchError(this.handleError));\n    }\n    getBackup(orgId, requestBody) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${this.API_URI}-systools/file?${ID}`, requestBody).pipe(catchError(this.handleError));\n    }\n    deviceRestore(orgId, requestBody) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${this.API_URI}-systools/restore?${ID}`, requestBody).pipe(catchError(this.handleError));\n    }\n    getRandomString(length) {\n      var result = '';\n      var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var charactersLength = characters.length;\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n      return result;\n    }\n    pingTraceRoute(param, path) {\n      return this.http.get(`${environment.SUPPORT_URL}/device-ts/${path}`, {\n        params: param\n      });\n    }\n    getDataModel(orgId, serialNumber) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${this.API_URI}/data-model?${ID}serialNumber=${serialNumber}`).pipe(catchError(this.handleError));\n    }\n    reloadDataModel(orgId, serialNumber) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(`${this.API_URI}/data-model?${ID}serialNumber=${serialNumber}&reload=true`, {}).pipe(catchError(this.handleError));\n    }\n    loadDataModel(orgId, serialNumber) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${this.API_URI}/data-model?${ID}serialNumber=${serialNumber}`, {}).pipe(catchError(this.handleError));\n    }\n    loadinterfacearraydetails(oltid, ontSn) {\n      return this.http.get(`${environment.API_BASE_URL}nfa/interfaces?system=${oltid}&fsan=${ontSn}`).pipe(catchError(this.handleError));\n    }\n    loadoctetdetails(oltid, ontSn) {\n      return this.http.get(`${environment.API_BASE_URL}cnap/invmgr/interfaces/state?interfaceUuid=${oltid}&fsan=${ontSn}`).pipe(catchError(this.handleError));\n    }\n    loadDataModeltest() {\n      //orgId, serialNumber\n      this.xmldata = \"<interfaces-state><interface><name>CXNK00302CDF/g1</name><speed>1000000000</speed><statistics><in-octets>233091504</in-octets><out-octets>41987968</out-octets></statistics><ont-ethernet><status><port>g1</port><if-index>1002273</if-index></status><detail><oper-state>up</oper-state><power-state>ac-up</power-state><rate>1g</rate></detail><counters><onteth-counters><upstream-drop-events>0</upstream-drop-events><upstream-errors>0</upstream-errors><upstream-octets>1</upstream-octets><downstream-octets>1</downstream-octets></onteth-counters></counters><qos><cosq-profile>none</cosq-profile></qos><subscriber><statistics><dhcp><rx-dhcp-discover>0</rx-dhcp-discover><tx-dhcp-discover>0</tx-dhcp-discover></dhcp><diameter><tx-policy-intimate-request>0</tx-policy-intimate-request><rx-policy-intimate-ack>0</rx-policy-intimate-ack></diameter><radius><tx-accounting-start-request>0</tx-accounting-start-request><rx-accounting-start-response>0</rx-accounting-start-response></radius><procedure><primary-v4-ip-session-activation-attempts>0</primary-v4-ip-session-activation-attempts><primary-static-v4-ip-session-activation-attempts>0</primary-static-v4-ip-session-activation-attempts></procedure> </statistics></subscriber></ont-ethernet> </interface> <interface><name>CXNK00302CDF/g2</name><speed>1000000000</speed><statistics><in-octets>233091504</in-octets><out-octets>41987968</out-octets></statistics><ont-ethernet><status><port>g1</port><if-index>1002273</if-index></status><detail><oper-state>up</oper-state><power-state>ac-up</power-state><rate>1g</rate></detail><counters><onteth-counters><upstream-drop-events>0</upstream-drop-events><upstream-errors>0</upstream-errors><upstream-octets>4</upstream-octets><downstream-octets>2</downstream-octets></onteth-counters></counters><qos><cosq-profile>none</cosq-profile></qos><subscriber><statistics><dhcp><rx-dhcp-discover>0</rx-dhcp-discover><tx-dhcp-discover>0</tx-dhcp-discover></dhcp><diameter><tx-policy-intimate-request>0</tx-policy-intimate-request><rx-policy-intimate-ack>0</rx-policy-intimate-ack></diameter><radius><tx-accounting-start-request>0</tx-accounting-start-request><rx-accounting-start-response>0</rx-accounting-start-response></radius><procedure><primary-v4-ip-session-activation-attempts>0</primary-v4-ip-session-activation-attempts><primary-static-v4-ip-session-activation-attempts>0</primary-static-v4-ip-session-activation-attempts></procedure> </statistics></subscriber></ont-ethernet> </interface> </interfaces-state>\";\n      return this.xmldata;\n    }\n    factoryReset(orgId, serialNumber) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${this.API_URI1}/factory-reset?${ID}serialNumber=${serialNumber}`, {}).pipe(catchError(this.handleError));\n    }\n    doReboot(orgId, serialNumber) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${this.API_URI1}/reboot?${ID}serialNumber=${serialNumber}`, {}).pipe(catchError(this.handleError));\n    }\n    ontReboot(serialNumber) {\n      return this.http.post(`${environment.API_BASE_URL}cnap/invmgr/discoveredonts/${serialNumber}/reset?forced=true`, {}).pipe(catchError(this.handleError));\n    }\n    afterOntReboot(vendorId, serialNumber) {\n      return this.http.get(`${environment.API_BASE_URL}nfa/onts?offset=0&limit=10&fsanMac=${serialNumber}`).pipe(catchError(this.handleError));\n    }\n    connectPermission(orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${this.API_URI1}/connect-permission?${ID}`).pipe(catchError(this.handleError));\n    }\n    connectToDevice(orgId, serialNumber, ipVers) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${this.API_URI1}/connect-info?${ID}serialNumber=${serialNumber}&actionType=ConnectToDevice&ipVersion=${ipVers}&forceEncryption=true`).pipe(catchError(this.handleError)); //&forceEncryption=true\n    }\n\n    getPingTraceroteWanInfo(orgId, serialNumber) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-summary/waninfo?${ID}serialNumber=${serialNumber}`);\n    }\n    getDeviceLAN(orgId, serialNumber, featureName) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-ts/LanHosts/list?${ID}serialNumber=${serialNumber}&featureNames=${featureName}`);\n    }\n    updateSoftware(orgId, request) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${environment.SUPPORT_URL}/device-upgrade/firmware-upgrade?${ID}`, request).pipe(catchError(this.handleError));\n    }\n    getSoftwareVersionCount(orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/sw/image/count?${ID}type=SW/FW%20Image`);\n    }\n    getSoftwareVersion(orgId, count, model, eq) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/sw/image?${ID}skip=0&limit=${count}&type=SW/FW%20Image&model=${model}&extendQuery=${eq}&orderby={\"version\":-1}`);\n    }\n    getLandPort(orgId, serialnumber) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/lanPorts?${ID}serialNumber=${serialnumber}`).pipe(catchError(this.handleError));\n    }\n    routerReachableReset(orgId, request) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(`${environment.FOUNDATION_BASE_URL}subscriber-systems/factory-reset?${ID}`, request);\n    }\n    routerNotReachableReset(orgId, request) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(`${environment.FOUNDATION_BASE_URL}subscriber-systems/backup?${ID}`, request);\n    }\n    getUpnp(orgId, sn) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/upnp?${ID}serialNumber=${sn}`).pipe(catchError(this.handleError));\n    }\n    putUpnp(orgId, sn, req) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/device/upnp?${ID}serialNumber=${sn}`, req).pipe(catchError(this.handleError));\n    }\n    getFirewallInfo(orgId, sn) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/firewall?${ID}serialNumber=${sn}`).pipe(catchError(this.handleError));\n    }\n    updateFirewallInfo(orgId, sn, req) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/device/firewall?${ID}serialNumber=${sn}`, req).pipe(catchError(this.handleError));\n    }\n    submitIpv6Info(orgId, sn, req) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/device/dhcpv6?${ID}serialNumber=${sn}`, req).pipe(catchError(this.handleError));\n    }\n    getIPV_6Info(orgId, sn) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/dhcpv6?${ID}serialNumber=${sn}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    getPasspointDetails(orgId, subId, snOrFsan) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/mycommunityiq/successful-config?${ID}systemId=${snOrFsan}${subId && subId != 'undefined' ? '&subscriberId=' + subId : ''}`);\n    }\n    getOntPortInterface(oltid, routerSerialNumber) {\n      return this.http.get(`${environment.API_BASE}/v1/nfa/interfaces?system=${oltid}&fsan=${routerSerialNumber}&interfaceCategory=ethernet`).pipe(catchError(this.handleError));\n    }\n    getOntPort(interfaceUuid, routerSerialNumber) {\n      return this.http.get(`${environment.API_BASE}/v1/cnap/invmgr/interfaces/state?interfaceUuid=${interfaceUuid}&fsan=${routerSerialNumber}`).pipe(catchError(this.handleError));\n    }\n    getTimeSeriesPage(serialNumber) {\n      return this.http.get(`${environment.API_BASE_URL}nfa/onts/discoveredonts?fsan=${serialNumber}`).pipe(catchError(this.handleError));\n    }\n    getRxPowers(uuid, sn) {\n      return this.http.get(`${environment.API_BASE_URL}cnap/invmgr/devices/${uuid}/state/details?onuid=${sn}`).pipe(catchError(this.handleError));\n    }\n    getExaDetails(oltName) {\n      return this.http.get(`${environment.API_BASE_URL}nfa/systems/details?name=${oltName}&exactNameMatch=true&axos=false`).pipe(catchError(this.handleError));\n    }\n  }\n  SupportRouterService.ɵfac = function SupportRouterService_Factory(t) {\n    return new (t || SupportRouterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  SupportRouterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SupportRouterService,\n    factory: SupportRouterService.ɵfac,\n    providedIn: 'root'\n  });\n  return SupportRouterService;\n})();","map":null,"metadata":{},"sourceType":"module"}