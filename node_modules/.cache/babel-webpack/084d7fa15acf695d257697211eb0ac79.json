{"ast":null,"code":"var round = Math.round;\nimport { assign } from 'min-dash';\nimport { event as domEvent } from 'min-dom';\nimport { getOriginal, toPoint, stopPropagation } from '../../util/Event';\nimport { set as cursorSet, unset as cursorUnset } from '../../util/Cursor';\nimport { install as installClickTrap } from '../../util/ClickTrap';\nimport { delta as deltaPos } from '../../util/PositionUtil';\nvar DRAG_ACTIVE_CLS = 'djs-drag-active';\nfunction preventDefault(event) {\n  event.preventDefault();\n}\nfunction isTouchEvent(event) {\n  // check for TouchEvent being available first\n  // (i.e. not available on desktop Firefox)\n  return typeof TouchEvent !== 'undefined' && event instanceof TouchEvent;\n}\nfunction getLength(point) {\n  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n}\n\n/**\n * A helper that fires canvas localized drag events and realizes\n * the general \"drag-and-drop\" look and feel.\n *\n * Calling {@link Dragging#activate} activates dragging on a canvas.\n *\n * It provides the following:\n *\n *   * emits life cycle events, namespaced with a prefix assigned\n *     during dragging activation\n *   * sets and restores the cursor\n *   * sets and restores the selection if elements still exist\n *   * ensures there can be only one drag operation active at a time\n *\n * Dragging may be canceled manually by calling {@link Dragging#cancel}\n * or by pressing ESC.\n *\n *\n * ## Life-cycle events\n *\n * Dragging can be in three different states, off, initialized\n * and active.\n *\n * (1) off: no dragging operation is in progress\n * (2) initialized: a new drag operation got initialized but not yet\n *                  started (i.e. because of no initial move)\n * (3) started: dragging is in progress\n *\n * Eventually dragging will be off again after a drag operation has\n * been ended or canceled via user click or ESC key press.\n *\n * To indicate transitions between these states dragging emits generic\n * life-cycle events with the `drag.` prefix _and_ events namespaced\n * to a prefix choosen by a user during drag initialization.\n *\n * The following events are emitted (appropriately prefixed) via\n * the {@link EventBus}.\n *\n * * `init`\n * * `start`\n * * `move`\n * * `end`\n * * `ended` (dragging already in off state)\n * * `cancel` (only if previously started)\n * * `canceled` (dragging already in off state, only if previously started)\n * * `cleanup`\n *\n *\n * @example\n *\n * function MyDragComponent(eventBus, dragging) {\n *\n *   eventBus.on('mydrag.start', function(event) {\n *     console.log('yes, we start dragging');\n *   });\n *\n *   eventBus.on('mydrag.move', function(event) {\n *     console.log('canvas local coordinates', event.x, event.y, event.dx, event.dy);\n *\n *     // local drag data is passed with the event\n *     event.context.foo; // \"BAR\"\n *\n *     // the original mouse event, too\n *     event.originalEvent; // MouseEvent(...)\n *   });\n *\n *   eventBus.on('element.click', function(event) {\n *     dragging.init(event, 'mydrag', {\n *       cursor: 'grabbing',\n *       data: {\n *         context: {\n *           foo: \"BAR\"\n *         }\n *       }\n *     });\n *   });\n * }\n */\nexport default function Dragging(eventBus, canvas, selection, elementRegistry) {\n  var defaultOptions = {\n    threshold: 5,\n    trapClick: true\n  };\n\n  // the currently active drag operation\n  // dragging is active as soon as this context exists.\n  //\n  // it is visually _active_ only when a context.active flag is set to true.\n  var context;\n\n  /* convert a global event into local coordinates */\n  function toLocalPoint(globalPosition) {\n    var viewbox = canvas.viewbox();\n    var clientRect = canvas._container.getBoundingClientRect();\n    return {\n      x: viewbox.x + (globalPosition.x - clientRect.left) / viewbox.scale,\n      y: viewbox.y + (globalPosition.y - clientRect.top) / viewbox.scale\n    };\n  }\n\n  // helpers\n\n  function fire(type, dragContext) {\n    dragContext = dragContext || context;\n    var event = eventBus.createEvent(assign({}, dragContext.payload, dragContext.data, {\n      isTouch: dragContext.isTouch\n    }));\n\n    // default integration\n    if (eventBus.fire('drag.' + type, event) === false) {\n      return false;\n    }\n    return eventBus.fire(dragContext.prefix + '.' + type, event);\n  }\n  function restoreSelection(previousSelection) {\n    var existingSelection = previousSelection.filter(function (element) {\n      return elementRegistry.get(element.id);\n    });\n    existingSelection.length && selection.select(existingSelection);\n  }\n\n  // event listeners\n\n  function move(event, activate) {\n    var payload = context.payload,\n      displacement = context.displacement;\n    var globalStart = context.globalStart,\n      globalCurrent = toPoint(event),\n      globalDelta = deltaPos(globalCurrent, globalStart);\n    var localStart = context.localStart,\n      localCurrent = toLocalPoint(globalCurrent),\n      localDelta = deltaPos(localCurrent, localStart);\n\n    // activate context explicitly or once threshold is reached\n    if (!context.active && (activate || getLength(globalDelta) > context.threshold)) {\n      // fire start event with original\n      // starting coordinates\n\n      assign(payload, {\n        x: round(localStart.x + displacement.x),\n        y: round(localStart.y + displacement.y),\n        dx: 0,\n        dy: 0\n      }, {\n        originalEvent: event\n      });\n      if (false === fire('start')) {\n        return cancel();\n      }\n      context.active = true;\n\n      // unset selection and remember old selection\n      // the previous (old) selection will always passed\n      // with the event via the event.previousSelection property\n      if (!context.keepSelection) {\n        payload.previousSelection = selection.get();\n        selection.select(null);\n      }\n\n      // allow custom cursor\n      if (context.cursor) {\n        cursorSet(context.cursor);\n      }\n\n      // indicate dragging via marker on root element\n      canvas.addMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);\n    }\n    stopPropagation(event);\n    if (context.active) {\n      // update payload with actual coordinates\n      assign(payload, {\n        x: round(localCurrent.x + displacement.x),\n        y: round(localCurrent.y + displacement.y),\n        dx: round(localDelta.x),\n        dy: round(localDelta.y)\n      }, {\n        originalEvent: event\n      });\n\n      // emit move event\n      fire('move');\n    }\n  }\n  function end(event) {\n    var previousContext,\n      returnValue = true;\n    if (context.active) {\n      if (event) {\n        context.payload.originalEvent = event;\n\n        // suppress original event (click, ...)\n        // because we just ended a drag operation\n        stopPropagation(event);\n      }\n\n      // implementations may stop restoring the\n      // original state (selections, ...) by preventing the\n      // end events default action\n      returnValue = fire('end');\n    }\n    if (returnValue === false) {\n      fire('rejected');\n    }\n    previousContext = cleanup(returnValue !== true);\n\n    // last event to be fired when all drag operations are done\n    // at this point in time no drag operation is in progress anymore\n    fire('ended', previousContext);\n  }\n\n  // cancel active drag operation if the user presses\n  // the ESC key on the keyboard\n\n  function checkCancel(event) {\n    if (event.which === 27) {\n      preventDefault(event);\n      cancel();\n    }\n  }\n\n  // prevent ghost click that might occur after a finished\n  // drag and drop session\n\n  function trapClickAndEnd(event) {\n    var untrap;\n\n    // trap the click in case we are part of an active\n    // drag operation. This will effectively prevent\n    // the ghost click that cannot be canceled otherwise.\n    if (context.active) {\n      untrap = installClickTrap(eventBus);\n\n      // remove trap after minimal delay\n      setTimeout(untrap, 400);\n\n      // prevent default action (click)\n      preventDefault(event);\n    }\n    end(event);\n  }\n  function trapTouch(event) {\n    move(event);\n  }\n\n  // update the drag events hover (djs.model.Base) and hoverGfx (Snap<SVGElement>)\n  // properties during hover and out and fire {prefix}.hover and {prefix}.out properties\n  // respectively\n\n  function hover(event) {\n    var payload = context.payload;\n    payload.hoverGfx = event.gfx;\n    payload.hover = event.element;\n    fire('hover');\n  }\n  function out(event) {\n    fire('out');\n    var payload = context.payload;\n    payload.hoverGfx = null;\n    payload.hover = null;\n  }\n\n  // life-cycle methods\n\n  function cancel(restore) {\n    var previousContext;\n    if (!context) {\n      return;\n    }\n    var wasActive = context.active;\n    if (wasActive) {\n      fire('cancel');\n    }\n    previousContext = cleanup(restore);\n    if (wasActive) {\n      // last event to be fired when all drag operations are done\n      // at this point in time no drag operation is in progress anymore\n      fire('canceled', previousContext);\n    }\n  }\n  function cleanup(restore) {\n    var previousContext, endDrag;\n    fire('cleanup');\n\n    // reset cursor\n    cursorUnset();\n    if (context.trapClick) {\n      endDrag = trapClickAndEnd;\n    } else {\n      endDrag = end;\n    }\n\n    // reset dom listeners\n    domEvent.unbind(document, 'mousemove', move);\n    domEvent.unbind(document, 'dragstart', preventDefault);\n    domEvent.unbind(document, 'selectstart', preventDefault);\n    domEvent.unbind(document, 'mousedown', endDrag, true);\n    domEvent.unbind(document, 'mouseup', endDrag, true);\n    domEvent.unbind(document, 'keyup', checkCancel);\n    domEvent.unbind(document, 'touchstart', trapTouch, true);\n    domEvent.unbind(document, 'touchcancel', cancel, true);\n    domEvent.unbind(document, 'touchmove', move, true);\n    domEvent.unbind(document, 'touchend', end, true);\n    eventBus.off('element.hover', hover);\n    eventBus.off('element.out', out);\n\n    // remove drag marker on root element\n    canvas.removeMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);\n\n    // restore selection, unless it has changed\n    var previousSelection = context.payload.previousSelection;\n    if (restore !== false && previousSelection && !selection.get().length) {\n      restoreSelection(previousSelection);\n    }\n    previousContext = context;\n    context = null;\n    return previousContext;\n  }\n\n  /**\n   * Initialize a drag operation.\n   *\n   * If `localPosition` is given, drag events will be emitted\n   * relative to it.\n   *\n   * @param {MouseEvent|TouchEvent} [event]\n   * @param {Point} [localPosition] actual diagram local position this drag operation should start at\n   * @param {string} prefix\n   * @param {Object} [options]\n   */\n  function init(event, relativeTo, prefix, options) {\n    // only one drag operation may be active, at a time\n    if (context) {\n      cancel(false);\n    }\n    if (typeof relativeTo === 'string') {\n      options = prefix;\n      prefix = relativeTo;\n      relativeTo = null;\n    }\n    options = assign({}, defaultOptions, options || {});\n    var data = options.data || {},\n      originalEvent,\n      globalStart,\n      localStart,\n      endDrag,\n      isTouch;\n    if (options.trapClick) {\n      endDrag = trapClickAndEnd;\n    } else {\n      endDrag = end;\n    }\n    if (event) {\n      originalEvent = getOriginal(event) || event;\n      globalStart = toPoint(event);\n      stopPropagation(event);\n\n      // prevent default browser dragging behavior\n      if (originalEvent.type === 'dragstart') {\n        preventDefault(originalEvent);\n      }\n    } else {\n      originalEvent = null;\n      globalStart = {\n        x: 0,\n        y: 0\n      };\n    }\n    localStart = toLocalPoint(globalStart);\n    if (!relativeTo) {\n      relativeTo = localStart;\n    }\n    isTouch = isTouchEvent(originalEvent);\n    context = assign({\n      prefix: prefix,\n      data: data,\n      payload: {},\n      globalStart: globalStart,\n      displacement: deltaPos(relativeTo, localStart),\n      localStart: localStart,\n      isTouch: isTouch\n    }, options);\n\n    // skip dom registration if trigger\n    // is set to manual (during testing)\n    if (!options.manual) {\n      // add dom listeners\n\n      if (isTouch) {\n        domEvent.bind(document, 'touchstart', trapTouch, true);\n        domEvent.bind(document, 'touchcancel', cancel, true);\n        domEvent.bind(document, 'touchmove', move, true);\n        domEvent.bind(document, 'touchend', end, true);\n      } else {\n        // assume we use the mouse to interact per default\n        domEvent.bind(document, 'mousemove', move);\n\n        // prevent default browser drag and text selection behavior\n        domEvent.bind(document, 'dragstart', preventDefault);\n        domEvent.bind(document, 'selectstart', preventDefault);\n        domEvent.bind(document, 'mousedown', endDrag, true);\n        domEvent.bind(document, 'mouseup', endDrag, true);\n      }\n      domEvent.bind(document, 'keyup', checkCancel);\n      eventBus.on('element.hover', hover);\n      eventBus.on('element.out', out);\n    }\n    fire('init');\n    if (options.autoActivate) {\n      move(event, true);\n    }\n  }\n\n  // cancel on diagram destruction\n  eventBus.on('diagram.destroy', cancel);\n\n  // API\n\n  this.init = init;\n  this.move = move;\n  this.hover = hover;\n  this.out = out;\n  this.end = end;\n  this.cancel = cancel;\n\n  // for introspection\n\n  this.context = function () {\n    return context;\n  };\n  this.setOptions = function (options) {\n    assign(defaultOptions, options);\n  };\n}\nDragging.$inject = ['eventBus', 'canvas', 'selection', 'elementRegistry'];","map":null,"metadata":{},"sourceType":"module"}