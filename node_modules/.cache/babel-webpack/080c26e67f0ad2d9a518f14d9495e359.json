{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { getBusinessObject } from '../../../util/ModelUtil';\nimport { isAny } from '../util/ModelingUtil';\nimport { isLabel } from '../../../util/LabelUtil';\nvar LOW_PRIORITY = 500;\n\n/**\n * Replace intermediate event with boundary event when creating or moving results in attached event.\n */\nexport default function AttachEventBehavior(bpmnReplace, injector) {\n  injector.invoke(CommandInterceptor, this);\n  this._bpmnReplace = bpmnReplace;\n  var self = this;\n  this.postExecuted('elements.create', LOW_PRIORITY, function (context) {\n    var elements = context.elements;\n    elements = elements.filter(function (shape) {\n      var host = shape.host;\n      return shouldReplace(shape, host);\n    });\n    if (elements.length !== 1) {\n      return;\n    }\n    elements.map(function (element) {\n      return elements.indexOf(element);\n    }).forEach(function (index) {\n      var host = elements[index];\n      context.elements[index] = self.replaceShape(elements[index], host);\n    });\n  }, true);\n  this.preExecute('elements.move', LOW_PRIORITY, function (context) {\n    var shapes = context.shapes,\n      host = context.newHost;\n    if (shapes.length !== 1) {\n      return;\n    }\n    var shape = shapes[0];\n    if (shouldReplace(shape, host)) {\n      context.shapes = [self.replaceShape(shape, host)];\n    }\n  }, true);\n}\nAttachEventBehavior.$inject = ['bpmnReplace', 'injector'];\ninherits(AttachEventBehavior, CommandInterceptor);\nAttachEventBehavior.prototype.replaceShape = function (shape, host) {\n  var eventDefinition = getEventDefinition(shape);\n  var boundaryEvent = {\n    type: 'bpmn:BoundaryEvent',\n    host: host\n  };\n  if (eventDefinition) {\n    boundaryEvent.eventDefinitionType = eventDefinition.$type;\n  }\n  return this._bpmnReplace.replaceElement(shape, boundaryEvent, {\n    layoutConnection: false\n  });\n};\n\n// helpers //////////\n\nfunction getEventDefinition(element) {\n  var businessObject = getBusinessObject(element),\n    eventDefinitions = businessObject.eventDefinitions;\n  return eventDefinitions && eventDefinitions[0];\n}\nfunction shouldReplace(shape, host) {\n  return !isLabel(shape) && isAny(shape, ['bpmn:IntermediateThrowEvent', 'bpmn:IntermediateCatchEvent']) && !!host;\n}","map":null,"metadata":{},"sourceType":"module"}