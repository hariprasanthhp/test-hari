{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CaptivePortalService = /*#__PURE__*/(() => {\n  class CaptivePortalService {\n    constructor(http) {\n      this.http = http;\n    }\n    getCaptivePortal(userId) {\n      return this.http.get(`${environment.SUPPORT_URL}/smbiq/portal?userId=${userId}`).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    setCaptivePortal(inp) {\n      return this.http.put(`${environment.SUPPORT_URL}/smbiq/portal`, inp).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    createCaptivePortal(inp) {\n      return this.http.post(`${environment.SUPPORT_URL}/smbiq/portal`, inp).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    deleteUploadedImg(path, userId) {\n      return this.http.delete(`${environment.SUPPORT_URL}/smbiq/portal/image/${path}?userId=${userId}`).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n  }\n  CaptivePortalService.ɵfac = function CaptivePortalService_Factory(t) {\n    return new (t || CaptivePortalService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  CaptivePortalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CaptivePortalService,\n    factory: CaptivePortalService.ɵfac,\n    providedIn: 'root'\n  });\n  return CaptivePortalService;\n})();","map":null,"metadata":{},"sourceType":"module"}