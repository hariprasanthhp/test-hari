{"ast":null,"code":"import { bind, find } from 'min-dash';\nimport TextBox from './TextBox';\n\n/**\n * A direct editing component that allows users\n * to edit an elements text directly in the diagram\n *\n * @param {EventBus} eventBus the event bus\n */\nexport default function DirectEditing(eventBus, canvas) {\n  this._eventBus = eventBus;\n  this._providers = [];\n  this._textbox = new TextBox({\n    container: canvas.getContainer(),\n    keyHandler: bind(this._handleKey, this),\n    resizeHandler: bind(this._handleResize, this)\n  });\n}\nDirectEditing.$inject = ['eventBus', 'canvas'];\n\n/**\n * Register a direct editing provider\n\n * @param {Object} provider the provider, must expose an #activate(element) method that returns\n *                          an activation context ({ bounds: {x, y, width, height }, text }) if\n *                          direct editing is available for the given element.\n *                          Additionally the provider must expose a #update(element, value) method\n *                          to receive direct editing updates.\n */\nDirectEditing.prototype.registerProvider = function (provider) {\n  this._providers.push(provider);\n};\n\n/**\n * Returns true if direct editing is currently active\n *\n * @return {Boolean}\n */\nDirectEditing.prototype.isActive = function () {\n  return !!this._active;\n};\n\n/**\n * Cancel direct editing, if it is currently active\n */\nDirectEditing.prototype.cancel = function () {\n  if (!this._active) {\n    return;\n  }\n  this._fire('cancel');\n  this.close();\n};\nDirectEditing.prototype._fire = function (event, context) {\n  this._eventBus.fire('directEditing.' + event, context || {\n    active: this._active\n  });\n};\nDirectEditing.prototype.close = function () {\n  this._textbox.destroy();\n  this._fire('deactivate');\n  this._active = null;\n  this.resizable = undefined;\n};\nDirectEditing.prototype.complete = function () {\n  var active = this._active;\n  if (!active) {\n    return;\n  }\n  var containerBounds,\n    previousBounds = active.context.bounds,\n    newBounds = this.$textbox.getBoundingClientRect(),\n    newText = this.getValue(),\n    previousText = active.context.text;\n  if (newText !== previousText || newBounds.height !== previousBounds.height || newBounds.width !== previousBounds.width) {\n    containerBounds = this._textbox.container.getBoundingClientRect();\n    active.provider.update(active.element, newText, active.context.text, {\n      x: newBounds.left - containerBounds.left,\n      y: newBounds.top - containerBounds.top,\n      width: newBounds.width,\n      height: newBounds.height\n    });\n  }\n  this._fire('complete');\n  this.close();\n};\nDirectEditing.prototype.getValue = function () {\n  return this._textbox.getValue();\n};\nDirectEditing.prototype._handleKey = function (e) {\n  // stop bubble\n  e.stopPropagation();\n  var key = e.keyCode || e.charCode;\n\n  // ESC\n  if (key === 27) {\n    e.preventDefault();\n    return this.cancel();\n  }\n\n  // Enter\n  if (key === 13 && !e.shiftKey) {\n    e.preventDefault();\n    return this.complete();\n  }\n};\nDirectEditing.prototype._handleResize = function (event) {\n  this._fire('resize', event);\n};\n\n/**\n * Activate direct editing on the given element\n *\n * @param {Object} ElementDescriptor the descriptor for a shape or connection\n * @return {Boolean} true if the activation was possible\n */\nDirectEditing.prototype.activate = function (element) {\n  if (this.isActive()) {\n    this.cancel();\n  }\n\n  // the direct editing context\n  var context;\n  var provider = find(this._providers, function (p) {\n    return (context = p.activate(element)) ? p : null;\n  });\n\n  // check if activation took place\n  if (context) {\n    this.$textbox = this._textbox.create(context.bounds, context.style, context.text, context.options);\n    this._active = {\n      element: element,\n      context: context,\n      provider: provider\n    };\n    if (context.options && context.options.resizable) {\n      this.resizable = true;\n    }\n    this._fire('activate');\n  }\n  return !!context;\n};","map":null,"metadata":{},"sourceType":"module"}