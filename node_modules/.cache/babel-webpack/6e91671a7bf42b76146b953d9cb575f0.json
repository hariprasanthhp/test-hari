{"ast":null,"code":"import elementHelper from 'bpmn-js-properties-panel/lib/helper/ElementHelper';\nimport cmdHelper from 'bpmn-js-properties-panel/lib/helper/CmdHelper';\nimport { getBusinessObject, is } from 'bpmn-js/lib/util/ModelUtil';\nimport entryFactory from 'bpmn-js-properties-panel/lib/factory/EntryFactory';\nimport extensionElementsHelper from 'bpmn-js-properties-panel/lib/helper/ExtensionElementsHelper';\nexport default function (group, element, bpmnFactory, translate) {\n  if (!is(element, 'bpmn:ServiceTask')) {\n    return;\n  }\n  function getElements(bo, type, prop) {\n    const elems = extensionElementsHelper.getExtensionElements(bo, type) || [];\n    return !prop ? elems : (elems[0] || {})[prop] || [];\n  }\n  function getTaskDefinition(element) {\n    const bo = getBusinessObject(element);\n    return (getElements(bo, 'zeebe:TaskDefinition') || [])[0];\n  }\n  group.entries.push(entryFactory.validationAwareTextField(translate, {\n    id: 'taskDefinitionType',\n    label: translate('Type'),\n    modelProperty: 'type',\n    getProperty: function (element, node) {\n      return (getTaskDefinition(element) || {}).type;\n    },\n    setProperty: function (element, values, node) {\n      const bo = getBusinessObject(element);\n      const commands = [];\n\n      // create extensionElements\n      let extensionElements = bo.get('extensionElements');\n      if (!extensionElements) {\n        extensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n          values: []\n        }, bo, bpmnFactory);\n        commands.push(cmdHelper.updateProperties(element, {\n          extensionElements: extensionElements\n        }));\n      }\n\n      // create taskDefinition\n      let taskDefinition = getTaskDefinition(element);\n      if (!taskDefinition) {\n        taskDefinition = elementHelper.createElement('zeebe:TaskDefinition', {}, extensionElements, bpmnFactory);\n        commands.push(cmdHelper.addAndRemoveElementsFromList(element, extensionElements, 'values', 'extensionElements', [taskDefinition], []));\n      }\n      commands.push(cmdHelper.updateBusinessObject(element, taskDefinition, values));\n      return commands;\n    },\n    validate: function (element, values) {\n      const bo = getTaskDefinition(element);\n      let validation = {};\n      if (bo) {\n        const {\n          type\n        } = values;\n        if (!type) {\n          validation = {\n            type: translate('ServiceTask must have a type')\n          };\n        }\n      }\n      return validation;\n    }\n  }));\n  group.entries.push(entryFactory.textField(translate, {\n    id: 'taskDefinitionRetries',\n    label: translate('Retries'),\n    modelProperty: 'retries',\n    get: function (element) {\n      return {\n        retries: (getTaskDefinition(element) || {}).retries\n      };\n    },\n    set: function (element, values) {\n      const bo = getBusinessObject(element);\n      const commands = [];\n\n      // create extensionElements\n      let extensionElements = bo.get('extensionElements');\n      if (!extensionElements) {\n        extensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n          values: []\n        }, bo, bpmnFactory);\n        commands.push(cmdHelper.updateProperties(element, {\n          extensionElements: extensionElements\n        }));\n      }\n\n      // create taskDefinition\n      let taskDefinition = getTaskDefinition(element);\n      if (!taskDefinition) {\n        taskDefinition = elementHelper.createElement('zeebe:TaskDefinition', {}, extensionElements, bpmnFactory);\n        commands.push(cmdHelper.addAndRemoveElementsFromList(element, extensionElements, 'values', 'extensionElements', [taskDefinition], []));\n      }\n      commands.push(cmdHelper.updateBusinessObject(element, taskDefinition, values));\n      return commands;\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}