{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let NetworkSubnetsApiService = /*#__PURE__*/(() => {\n  class NetworkSubnetsApiService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.subnet = 'subnet';\n      this.staticSubnet = 'staticsubnet';\n      this.arrayToObject = (array, keyField) => array.reduce((obj, item) => {\n        obj[item[keyField]] = item;\n        return obj;\n      }, {});\n      this.baseUrl = environment.faAdminURL;\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.options = {\n        headers: headers\n      };\n      this.export = this.baseUrl + `export/`;\n    }\n    getSubnets(orgId, flag) {\n      return this.httpClient.get(`${this.baseUrl}${this.subnet}?org-id=${orgId}${flag ? '&all=true' : ''}`);\n    }\n    getStaticSubnets(orgId) {\n      return this.httpClient.get(`${this.baseUrl}${this.staticSubnet}?org-id=${orgId}`);\n    }\n    addSubnet(params, orgId) {\n      return this.httpClient.post(`${this.baseUrl}${this.subnet}?org-id=${orgId}`, params, this.options);\n    }\n    addStaticSubnet(params, orgId) {\n      return this.httpClient.post(`${this.baseUrl}${this.subnet}?org-id=${orgId}`, params, this.options);\n    }\n    exportSubnets(orgId) {\n      return this.httpClient.get(`${this.baseUrl}devices?org-id=${orgId}`);\n    }\n    importSubnets(params, orgId, combined) {\n      return this.httpClient.put(`${this.baseUrl}fa_import/${combined ? 'combined-subnets' : 'subnets'}?org-id=${orgId}`, params);\n    }\n    importStaticSubnets(params, orgId) {\n      return this.httpClient.put(`${this.baseUrl}fa_import/static-subnets?org-id=${orgId}`, params);\n    }\n    deleteSubnet(id, orgId) {\n      return this.httpClient.delete(`${this.baseUrl}${this.subnet}/${id}?org-id=${orgId}`);\n    }\n    deleteStaticSubnet(id, orgId) {\n      return this.httpClient.delete(`${this.baseUrl}${this.subnet}/${id}?org-id=${orgId}`);\n    }\n    updateSubnet(id, params, orgId) {\n      return this.httpClient.put(`${this.baseUrl}${this.subnet}/${id}?org-id=${orgId}`, params);\n    }\n    updateStaticSubnet(id, params, orgId) {\n      return this.httpClient.put(`${this.baseUrl}${this.subnet}/${id}?org-id=${orgId}`, params);\n    }\n    getRadiusServers(orgId) {\n      return this.httpClient.get(`${environment.FA_ADMIN_CONFIG_URL}radius?org-id=${orgId}&tenant-id=0`);\n    }\n    addRadiusServer(params, orgId) {\n      return this.httpClient.post(`${environment.FA_ADMIN_CONFIG_URL}radius?org-id=${orgId}&tenant-id=0`, params, this.options);\n    }\n    updateRadiusServer(id, params, orgId) {\n      return this.httpClient.put(`${environment.FA_ADMIN_CONFIG_URL}radius/${id}?org-id=${orgId}&tenant-id=0`, params);\n    }\n    deleteRadiusServer(id, orgId) {\n      return this.httpClient.delete(`${environment.FA_ADMIN_CONFIG_URL}radius/${id}?org-id=${orgId}&tenant-id=0`);\n    }\n    exportProcess(data) {\n      let exports = [];\n      data.forEach(obj => {\n        exports.push({\n          'subnet': obj.subnet ? obj.subnet : '',\n          'excluded': obj.excluded ? obj.excluded : ''\n        });\n      });\n      return exports;\n    }\n    importDataProcess(data, isFullImport, isDryRun, orgId, isStatic = false) {\n      data.forEach(obj => {\n        obj.excluded = typeof obj.excluded == \"boolean\" ? obj.excluded : obj.excluded.toUpperCase() == 'N' || obj.excluded.toUpperCase() == \"NO\" ? false : true;\n        obj.isstatic = isStatic;\n        obj.isv4 = true;\n        obj.action = isFullImport ? 'Create' : 'Update';\n        obj.orgId = orgId;\n        obj.tenantId = 0;\n      });\n      //return this.arrayToObject(data, keyField);\n      return data;\n    }\n    checkData(data) {\n      if (Array.isArray(data[0])) {\n        let newData = [];\n        data.forEach(arr => {\n          newData.push({\n            subnet: arr[0],\n            excluded: arr[1]\n          });\n        });\n        return newData;\n      }\n      return data;\n    }\n    trimSubnet(str) {\n      str = str.trim();\n      while (str[str.length - 1] === \".\") str = str.slice(0, -1);\n      return str;\n    }\n    isSubnetV4(ip) {\n      let arr = ip.split('/');\n      let ipArray = arr[0].split('.');\n      if (ipArray.length == 4) {\n        return true;\n      }\n      return false;\n    }\n    isSubnetV6(ip) {\n      let arr = ip.split('/');\n      let ipArray = arr[0].split('.');\n      if (ipArray.length == 6) {\n        return true;\n      }\n      return false;\n    }\n    deleteObjectFromArray(data, id) {\n      let newData = data.filter(item => item._id !== id);\n      return newData;\n    }\n    Export(module, orgId) {\n      return this.httpClient.get(`${this.export}${module}?org-id=${orgId}`);\n    }\n  }\n  NetworkSubnetsApiService.ɵfac = function NetworkSubnetsApiService_Factory(t) {\n    return new (t || NetworkSubnetsApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  NetworkSubnetsApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NetworkSubnetsApiService,\n    factory: NetworkSubnetsApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return NetworkSubnetsApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}