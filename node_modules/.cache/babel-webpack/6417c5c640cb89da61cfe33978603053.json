{"ast":null,"code":"import { DatePipe } from '@angular/common';\nimport { DataTableDirective } from 'angular-datatables';\nimport { Subject } from 'rxjs';\nimport * as Highcharts from 'highcharts/highstock';\nimport * as _ from 'lodash';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"../services/api-usage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"src/app/shared/services/sso-auth.service\";\nimport * as i5 from \"@angular/platform-browser\";\nimport * as i6 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i7 from \"src/app/shared-utils/date-utils.service\";\nimport * as i8 from \"../services/common.service\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"angular-datatables\";\nconst _c0 = [\"infoModal\"];\nfunction ApiUsageComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelementStart(1, \"div\", 18);\n    i0.ɵɵelementStart(2, \"span\", 19);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.language.Loading);\n  }\n}\nfunction ApiUsageComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelementStart(1, \"h5\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"h1\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"Calls This Month\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.currentMonthData == null ? null : ctx_r1.currentMonthData.count);\n  }\n}\nfunction ApiUsageComponent_tr_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 20);\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    const i_r6 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", i_r6);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r2.language[ctx_r2.month[item_r5.month.split(\"/\")[0]]] || ctx_r2.month[item_r5.month.split(\"/\")[0]], \", \", item_r5.month.split(\"/\")[1], \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r5.count);\n  }\n}\nfunction ApiUsageComponent_ng_template_31_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵelementStart(1, \"h4\", 22);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function ApiUsageComponent_ng_template_31_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.closeModal();\n    });\n    i0.ɵɵelement(4, \"span\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 25);\n    i0.ɵɵelementStart(6, \"div\", 4);\n    i0.ɵɵelementStart(7, \"p\", 26);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 27);\n    i0.ɵɵelementStart(10, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function ApiUsageComponent_ng_template_31_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.closeModal();\n    });\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.infoTitle);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r4.infoBody);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.language[\"Okay\"], \" \");\n  }\n}\nexport let ApiUsageComponent = /*#__PURE__*/(() => {\n  class ApiUsageComponent {\n    constructor(translateService, apiUsageService, router, sso, titleService, dialogService, dateUtils, commonOrgService) {\n      this.translateService = translateService;\n      this.apiUsageService = apiUsageService;\n      this.router = router;\n      this.sso = sso;\n      this.titleService = titleService;\n      this.dialogService = dialogService;\n      this.dateUtils = dateUtils;\n      this.commonOrgService = commonOrgService;\n      this.dtOptions = {};\n      this.dtTrigger = new Subject();\n      this.orgApiStatus = [];\n      this.month = {\n        '01': 'January',\n        '02': 'February',\n        '03': 'March',\n        '04': 'April',\n        '05': 'May',\n        '06': 'June',\n        '07': 'July',\n        '08': 'August',\n        '09': 'September',\n        '10': 'October',\n        '11': 'November',\n        '12': 'December'\n      };\n      this.apiUsageOptions = {\n        paging: false,\n        info: false,\n        lengthChange: false,\n        ordering: false,\n        searching: false,\n        dom: 'tipr',\n        retrieve: false\n      };\n      this.loading = false;\n      this.Highcharts = Highcharts;\n      this.tableData = [];\n      const url = this.router.url;\n      this.MODULE = this.sso.getRedirectModule(url);\n      this.ORG_ID = this.sso.getOrganizationID(url);\n      this.commonOrgService.currentPageAdder('api-usage');\n    }\n    ngOnInit() {\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.getApiUsageQuota();\n        //this.getOrgUsageStatus();\n        this.getData();\n        this.setTableOptions('language');\n        this.titleService.setTitle(`${this.language['API Usage']} - ${this.MODULE === 'systemAdministration' ? this.language['System Administration'] : this.language['administration']} - ${this.language['Calix Cloud']}`);\n      });\n      this.titleService.setTitle(`${this.language['API Usage']} - ${this.MODULE === 'systemAdministration' ? this.language['System Administration'] : this.language['administration']} - ${this.language['Calix Cloud']}`);\n      this.getData();\n      this.getApiUsageQuota();\n      this.tableLanguageOptions();\n    }\n    ngAfterViewInit() {\n      this.dtTrigger.next();\n    }\n    getApiUsageQuota() {\n      this.loading = true;\n      this.apiUsageSub = this.apiUsageService.getaApiQuotaDetails(this.ORG_ID).subscribe(res => {\n        if (res) {\n          this.apiUsageData = res;\n          if (this.apiUsageData.allowed_count) {\n            this.apiUsageData.allowed_count = (Math.round(this.apiUsageData.allowed_count * 100) / 100).toLocaleString();\n          }\n        }\n        this.loading = false;\n      }, error => {\n        this.pageErrorHandle(error);\n      });\n    }\n    closeModal() {\n      if (this.modalRef) {\n        this.modalRef.close();\n      }\n    }\n    openInfoModal() {\n      this.closeModal();\n      this.modalRef = this.dialogService.open(this.infoModal);\n    }\n    rerender() {\n      this.dtElement.dtInstance.then(dtInstance => {\n        dtInstance.destroy();\n        this.dtTrigger.next();\n      });\n    }\n    ngOnDestroy() {\n      if (this.languageSubject) {\n        this.languageSubject.unsubscribe();\n      }\n      if (this.orgUsageStatusSub) {\n        this.orgUsageStatusSub.unsubscribe();\n      }\n      if (this.apiUsageSub) {\n        this.apiUsageSub.unsubscribe();\n      }\n    }\n    setTableOptions(type) {\n      this.tableLanguageOptions();\n      if (type && type == 'language') {\n        setTimeout(() => {\n          this.rerender();\n        }, 200);\n      } else {\n        this.loading = false;\n      }\n    }\n    tableLanguageOptions() {\n      if (this.language.fileLanguage == 'fr') {\n        this.apiUsageOptions.language = this.translateService.fr;\n      } else if (this.language.fileLanguage == 'es') {\n        this.apiUsageOptions.language = this.translateService.es;\n      } else if (this.language.fileLanguage == 'de_DE') {\n        this.apiUsageOptions.language = this.translateService.de_DE;\n      } else if (this.language.fileLanguage == 'en' && this.apiUsageOptions.language) {\n        delete this.apiUsageOptions.language;\n      }\n    }\n    makeOptionsForLineChart() {\n      var _a, _b;\n      let apiCalls = this.language['API Calls'];\n      let that = this;\n      let categories = [];\n      let dailyCount = [];\n      let pipe = new DatePipe('en-US');\n      for (let index = 0; index < that.tableData.length; index++) {\n        if (moment().format('MM/yyyy') == that.tableData[index].month) {\n          that.currentMonthData = that.tableData[index];\n          break;\n        } else if (moment().subtract(1, 'month').format('MM/yyyy') == that.tableData[index].month) {\n          that.currentMonthData = that.tableData[index];\n        }\n      }\n      for (let index = 0; index < ((_a = that.currentMonthData) === null || _a === void 0 ? void 0 : _a.dailyCount.split(',').length); index++) {\n        dailyCount.push(Number((_b = that.currentMonthData) === null || _b === void 0 ? void 0 : _b.dailyCount.split(',')[index]));\n        categories.push(pipe.transform(new Date(Number(that.currentMonthData.month.split('/')[1]), Number(that.currentMonthData.month.split('/')[0] - 1), index + 1), 'MMM, dd'));\n      }\n      let options = {\n        chart: {\n          type: 'line',\n          zoomType: 'xy'\n        },\n        time: {\n          useUTC: false\n        },\n        title: {\n          text: null\n        },\n        subtitle: {\n          text: null\n        },\n        mapNavigation: {\n          enableMouseWheelZoom: true\n        },\n        tooltip: {\n          formatter: function () {\n            var y = `<b>${this.x}</b><br><b>${that.language['API Calls']}: ${(Math.round(this.y * 100) / 100).toLocaleString()}</b>`;\n            return y;\n          }\n        },\n        xAxis: {\n          categories: categories ? categories : [],\n          tickInterval: 1,\n          labels: {\n            allowOverlap: false,\n            maxStaggerLines: 1\n          }\n        },\n        yAxis: {\n          title: {\n            text: this.language['Daily API Calls']\n          },\n          min: 0,\n          minRange: 1\n        },\n        legend: {\n          align: 'center',\n          verticalAlign: 'bottom',\n          layout: 'horizontal',\n          symbolRadius: 0\n        },\n        lang: {\n          noData: this.language['No Data Available']\n        },\n        plotOptions: {\n          series: {\n            marker: {\n              enabled: true\n            }\n          }\n        },\n        series: [{\n          showInLegend: false,\n          name: apiCalls,\n          color: '#0027FF',\n          data: dailyCount ? dailyCount : []\n        }],\n        credits: {\n          enabled: false\n        }\n      };\n      return options;\n    }\n    pageErrorHandle(err, widget) {\n      let errorInfo = '';\n      this.infoTitle = 'Error';\n      if (err.status == 400) {\n        this.infoBody = this.commonOrgService.pageInvalidRqstErrorHandle(err);\n        this.infoTitle = this.language['Invalid request'];\n        this.openInfoModal();\n        this.loading = false;\n      } else {\n        if (err.status == 401) {\n          errorInfo = this.language['Access Denied'];\n        } else {\n          errorInfo = this.commonOrgService.pageErrorHandle(err);\n        }\n        this.commonOrgService.openErrorAlert(errorInfo);\n        this.commonOrgService.pageScrollTop();\n        this.loading = false;\n      }\n    }\n    getData() {\n      this.loading = true;\n      this.orgUsageStatusSub = this.apiUsageService.getOrgUsageStatus(this.ORG_ID).subscribe(res => {\n        var _a, _b;\n        let mdata = [];\n        if (res && (res === null || res === void 0 ? void 0 : res.length) && (res === null || res === void 0 ? void 0 : res.length) >= 6) {\n          res.forEach(e => {\n            let arr = e.month.split('/');\n            e.m = arr[0];\n            e.y = arr[1];\n          });\n          res = _.orderBy(res, ['y', 'm']);\n          this.tableData = res;\n        } else if (res && (res === null || res === void 0 ? void 0 : res.length) && (res === null || res === void 0 ? void 0 : res.length) < 6) {\n          let yearData = this.currentAndLastYearData(res);\n          let lastDateStr = (_b = (_a = yearData.lastYearData[yearData.lastYearData.length - 1]) === null || _a === void 0 ? void 0 : _a.month) === null || _b === void 0 ? void 0 : _b.replace('/', '/01/');\n          mdata = this.generateMissingDates(lastDateStr, res.length);\n          this.tableData = [...yearData.lastYearData, ...mdata];\n          this.tableData.reverse();\n          yearData.currentYearData.reverse();\n          this.tableData = [...this.tableData, ...yearData.currentYearData];\n        } else {\n          let dateStr = this.dateUtils.getFirstDayDateStr();\n          this.tableData = this.generateMissingDates(dateStr, 0);\n        }\n        this.tableData.forEach(data => {\n          data.count = (Math.round(data.count * 100) / 100).toLocaleString();\n        });\n        this.rerender();\n        let option = this.makeOptionsForLineChart();\n        this.Highcharts.chart('container', option);\n        this.loading = false;\n      }, error => {\n        this.pageErrorHandle(error);\n      });\n    }\n    generateMissingDates(lastDateStr, valueTOSubtract) {\n      var _a, _b;\n      let mdata = [];\n      if (!valueTOSubtract) {\n        let month = `${(_a = lastDateStr === null || lastDateStr === void 0 ? void 0 : lastDateStr.split('/')) === null || _a === void 0 ? void 0 : _a[0]}/${(_b = lastDateStr === null || lastDateStr === void 0 ? void 0 : lastDateStr.split('/')) === null || _b === void 0 ? void 0 : _b[2]}`;\n        mdata.push({\n          month: `${month}`,\n          count: 0,\n          dailyCount: ''\n        });\n      }\n      for (let i = 1; i <= 6 - valueTOSubtract; i++) {\n        let lastDate = new Date(lastDateStr);\n        lastDate.setMonth(lastDate.getMonth() - i);\n        let month = '' + (lastDate.getMonth() + 1);\n        if (month.length < 2) {\n          month = '0' + month;\n        }\n        mdata.push({\n          month: `${month}/${lastDate.getFullYear()}`,\n          count: 0,\n          dailyCount: ''\n        });\n      }\n      if (!valueTOSubtract) {\n        mdata.pop();\n        const b = mdata.shift();\n        mdata.push(b);\n      }\n      return mdata;\n    }\n    currentAndLastYearData(res) {\n      let years = [];\n      let lastYearData = [];\n      let currentYearData = [];\n      res.forEach(e => {\n        years.push(Number(e.month.split('/')[1]));\n        if (e.month.split('/')[1] == Math.min.apply(null, years)) {\n          lastYearData.push(e);\n        } else {\n          currentYearData.push(e);\n        }\n      });\n      return {\n        lastYearData: lastYearData,\n        currentYearData: currentYearData\n      };\n    }\n  }\n  ApiUsageComponent.ɵfac = function ApiUsageComponent_Factory(t) {\n    return new (t || ApiUsageComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.ApiUsageService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.SsoAuthService), i0.ɵɵdirectiveInject(i5.Title), i0.ɵɵdirectiveInject(i6.NgbModal), i0.ɵɵdirectiveInject(i7.DateUtilsService), i0.ɵɵdirectiveInject(i8.CommonService));\n  };\n  ApiUsageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ApiUsageComponent,\n    selectors: [[\"app-api-usage\"]],\n    viewQuery: function ApiUsageComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(DataTableDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.infoModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dtElement = _t.first);\n      }\n    },\n    decls: 33,\n    vars: 11,\n    consts: [[1, \"position-relative\"], [\"class\", \"no-data\", 4, \"ngIf\"], [1, \"container\", \"position-relative\"], [1, \"row\"], [1, \"w-100\"], [1, \"ccl-admin-title\"], [1, \"row\", \"d-flex\", \"w-100\", \"flex-wrap\", \"my-4\"], [1, \"dflex-item\", \"pr-4\"], [\"class\", \"dflex-item pr-4\", 4, \"ngIf\"], [1, \"col-12\"], [\"id\", \"container\", 1, \"cco-traffic-reports-container\"], [1, \"col-md-12\", \"px-0\"], [1, \"ccl-med-title\", \"mb-3\", \"pb-1\"], [1, \"table-responsive\"], [\"datatable\", \"\", 1, \"call-list-table\", \"table\", 3, \"dtTrigger\", \"dtOptions\"], [3, \"id\", 4, \"ngFor\", \"ngForOf\"], [\"infoModal\", \"\"], [1, \"no-data\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [3, \"id\"], [1, \"modal-header\"], [\"id\", \"modal-basic-title\", 1, \"modal-title\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\"], [1, \"modal-body\", \"modal-scrll\"], [1, \"f-size-16px\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn-default\", \"primary\", \"px-3\", 3, \"click\"]],\n    template: function ApiUsageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ApiUsageComponent_div_1_Template, 4, 1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵelementStart(9, \"h5\");\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"h1\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, ApiUsageComponent_div_13_Template, 5, 2, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 3);\n        i0.ɵɵelementStart(15, \"div\", 9);\n        i0.ɵɵelement(16, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 3);\n        i0.ɵɵelementStart(18, \"div\", 11);\n        i0.ɵɵelementStart(19, \"div\", 12);\n        i0.ɵɵtext(20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 13);\n        i0.ɵɵelementStart(22, \"table\", 14);\n        i0.ɵɵelementStart(23, \"thead\");\n        i0.ɵɵelementStart(24, \"tr\");\n        i0.ɵɵelementStart(25, \"th\");\n        i0.ɵɵtext(26);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"th\");\n        i0.ɵɵtext(28);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"tbody\");\n        i0.ɵɵtemplate(30, ApiUsageComponent_tr_30_Template, 5, 4, \"tr\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(31, ApiUsageComponent_ng_template_31_Template, 12, 3, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language[\"API Usage\"], \" \");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.language[\"Monthly API Quota\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate((ctx.apiUsageData == null ? null : ctx.apiUsageData.allowed_count) || 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentMonthData);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language[\"Calls in the last 6 months\"], \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"dtTrigger\", ctx.dtTrigger)(\"dtOptions\", ctx.apiUsageOptions);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.language[\"Month\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.language[\"Total Calls\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tableData);\n      }\n    },\n    directives: [i9.NgIf, i10.DataTableDirective, i9.NgForOf],\n    styles: [\".ccl-admin-title[_ngcontent-%COMP%]{color:#1a1f22}.dflex-item[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{color:#0054b2;font-weight:300;font-size:30px;line-height:32px}.dflex-item[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%]{color:#1a1f22;font-weight:400;font-size:14px;line-height:16px;margin-bottom:0}.ccl-med-title[_ngcontent-%COMP%]{font-weight:400;font-size:24px;line-height:30px;border-bottom:1px solid #CCCCCC}.call-list-table[_ngcontent-%COMP%]{border-bottom:0!important}\"]\n  });\n  return ApiUsageComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}