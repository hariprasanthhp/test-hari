{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let JsonViewerService = /*#__PURE__*/(() => {\n  class JsonViewerService {\n    constructor() {\n      this._dom = {};\n      this._dom.container = document.createElement(\"pre\");\n      this._dom.container.classList.add(\"data-json-viewer\");\n    }\n    addPath(parent, parentName) {\n      let childrenNames = Object.keys(parent);\n      for (let i = 0; i < childrenNames.length; i++) {\n        let childName = childrenNames[i];\n        let child = parent[childName];\n        if (typeof child === \"object\") {\n          let path;\n          if (parentName !== \"root\") {\n            path = parentName + \".\" + childName;\n            child[\"path\"] = path;\n          } else {\n            path = childName;\n          }\n          //recursive call\n          this.addPath(child, path);\n        }\n      }\n    }\n    /**\r\n     * Visualise JSON object.\r\n     *\r\n     * @param {Object|Array} json Input value\r\n     * @param {Boolean} [isNetOps] true if user has NetOps permissions\r\n     * @param {Number} [maxLvl] Process only to max level, where 0..n, -1 unlimited\r\n     * @param {Number} [colAt] Collapse at level, where 0..n, -1 unlimited\r\n     */\n    showJSON(json, isNetOps, maxLvl, colAt) {\n      maxLvl = typeof maxLvl === \"number\" ? maxLvl : -1; // -1 means unlimited\n      colAt = typeof colAt === \"number\" ? colAt : -1; // collapse at\n      this.addPath(json, 'root');\n      let jsonData = this._processInput(json);\n      let walkEl = this._walk(jsonData, maxLvl, colAt, 0, isNetOps);\n      this._dom.container.innerHTML = \"\";\n      this._dom.container.appendChild(walkEl);\n    }\n    /**\r\n     * Get container with pre object - this container is used for visualise JSON data.\r\n     *\r\n     * @return {Element}\r\n     */\n    getContainer() {\n      return this._dom.container;\n    }\n    /**\r\n     * Process input JSON - throws exception for unrecognized input.\r\n     *\r\n     * @param {Object|Array} json Input value\r\n     * @return {Object|Array}\r\n     */\n    _processInput(json) {\n      if (json && typeof json === \"object\") {\n        return json;\n      }\n      //else {\n      //  throw \"Input value is not object or array!\";\n      //}\n    }\n\n    _filter(items) {\n      return items.filter(value => ['type', 'path', 'writable'].indexOf(value) === -1);\n    }\n    /**\r\n     * Recursive walk for input value.\r\n     *\r\n     * @param {Object|Array} value Input value\r\n     * @param {Number} maxLvl Process only to max level, where 0..n, -1 unlimited\r\n     * @param {Number} colAt Collapse at level, where 0..n, -1 unlimited\r\n     * @param {Number} lvl Current level\r\n     * @param {Boolean} [isNetOps] if user is NetOp, add checkbox for parameter\r\n     */\n    _walk(value, maxLvl, colAt, lvl, isNetOps) {\n      let frag = document.createDocumentFragment();\n      let isMaxLvl = maxLvl >= 0 && lvl >= maxLvl;\n      let isCollapse = colAt >= 0 && lvl >= colAt;\n      let itemsCount;\n      // Supported Types in the Profile \"Set Parameter Value\"\n      let supportedTypes = ['boolean', 'string', 'int', 'unsignedInt', 'long', 'base64Binary', 'dateTime'];\n      if (typeof value === \"object\") {\n        if (value) {\n          let isArray = Array.isArray(value);\n          let items = isArray ? value : Object.keys(value);\n          items = this._filter(items);\n          if (items.length === 1 && items.includes('value')) {\n            // simple value\n            frag.appendChild(this._createSimple(items.value));\n            return frag;\n          }\n          if (lvl === 0) {\n            // root level\n            let rootCount = this._createItemsCount(items.length);\n            // hide/show\n            let rootLink = this._createLink(isArray ? \"[\" : \"{\");\n            if (items.length) {\n              rootLink.addEventListener(\"click\", function () {\n                if (isMaxLvl) return;\n                rootLink.classList.toggle(\"collapsed\");\n                rootCount.classList.toggle(\"hide\");\n                // main list\n                this._dom.container.querySelector(\"ul\").classList.toggle(\"hide\");\n              }.bind(this));\n              if (isCollapse) {\n                rootLink.classList.add(\"collapsed\");\n                rootCount.classList.remove(\"hide\");\n              }\n            } else {\n              rootLink.classList.add(\"empty\");\n            }\n            rootLink.appendChild(rootCount);\n            frag.appendChild(rootLink);\n          }\n          if (items.length && !isMaxLvl) {\n            let len = items.length - 1;\n            let ulList = document.createElement(\"ul\");\n            ulList.setAttribute(\"data-level\", lvl);\n            ulList.classList.add(\"type-\" + (isArray ? \"array\" : \"object\"));\n            items.forEach(function (key, ind) {\n              //for NetOps, add checkbox for parameter objects with \"type\" and \"value\"\n              let addCheckbox = false;\n              let addLogicCheckbox = false;\n              let currentObject = value[key];\n              if (isNetOps && typeof currentObject === \"object\" && currentObject.hasOwnProperty(\"type\") && currentObject.hasOwnProperty(\"value\") && currentObject.writable && supportedTypes.indexOf(currentObject.type) >= 0) {\n                addCheckbox = true;\n              }\n              // if (isNetOps &&\n              //   (typeof currentObject === \"object\") &&\n              //   _.has(currentObject, \"type\") &&\n              //   _.has(currentObject, \"value\") &&\n              //   supportedTypes.indexOf(currentObject.type) >= 0) {\n              //   addLogicCheckbox = true;\n              // } \n              let item = isArray ? key : value[key];\n              let li = document.createElement(\"li\");\n              if (typeof item === \"object\") {\n                let itemKeys = Object.keys(item);\n                itemKeys = this._filter(itemKeys);\n                // null or date\n                if (!item || item instanceof Date) {\n                  li.appendChild(document.createTextNode(isArray ? \"\" : key + \": \"));\n                  li.appendChild(this._createSimple(item ? item : null));\n                }\n                // array & object\n                else {\n                  let itemIsArray = Array.isArray(item);\n                  if (itemIsArray) {\n                    itemKeys = this._filter(item);\n                  }\n                  let itemLen = itemKeys.length;\n                  // empty\n                  if (!itemLen) {\n                    li.appendChild(document.createTextNode(key + \": \" + (itemIsArray ? \"[]\" : \"{}\")));\n                  } else {\n                    // 1+ items\n                    if (itemLen === 1 && item.hasOwnProperty('value') && item.type !== 'array') {\n                      let itemTitle = typeof key === \"string\" ? key + \": \" : \"\";\n                      let value = item.value;\n                      li.appendChild(document.createTextNode(itemTitle));\n                      li.appendChild(this._createSimple(value));\n                      if (addCheckbox === true) {\n                        li.append(this._createCheckBoxParam(currentObject));\n                      }\n                      if (addLogicCheckbox === true) {\n                        li.append(this._createCheckBoxLogic(currentObject));\n                      }\n                    } else {\n                      let itemTitle = (typeof key === \"string\" ? key + \": \" : \"\") + (itemIsArray ? \"[\" : \"{\");\n                      let itemLink = this._createLink(itemTitle);\n                      let itemsCount = this._createItemsCount(itemLen);\n                      // maxLvl - only text, no link\n                      if (maxLvl >= 0 && lvl + 1 >= maxLvl) {\n                        li.appendChild(document.createTextNode(itemTitle));\n                      } else {\n                        itemLink.appendChild(itemsCount);\n                        li.appendChild(itemLink);\n                      }\n                      if (addCheckbox === true) {\n                        li.append(this._createCheckBoxParam(currentObject));\n                      }\n                      if (addLogicCheckbox === true) {\n                        li.append(this._createCheckBoxLogic(currentObject));\n                      }\n                      li.appendChild(this._walk(item, maxLvl, colAt, lvl + 1, isNetOps));\n                      li.appendChild(document.createTextNode(itemIsArray ? \"]\" : \"}\"));\n                      let list = li.querySelector(\"ul\");\n                      let itemLinkCb = function () {\n                        itemLink.classList.toggle(\"collapsed\");\n                        itemsCount.classList.toggle(\"hide\");\n                        list.classList.toggle(\"hide\");\n                      };\n                      // hide/show\n                      itemLink.addEventListener(\"click\", itemLinkCb);\n                      // collapse lower level\n                      if (colAt >= 0 && lvl + 1 >= colAt) {\n                        itemLinkCb();\n                      }\n                    }\n                  }\n                }\n              }\n              // simple values\n              else {\n                // object keys with key:\n                if (!isArray) {\n                  li.appendChild(document.createTextNode(key + \": \"));\n                }\n                // recursive\n                li.appendChild(this._walk(item, maxLvl, colAt, lvl + 1, isNetOps));\n              }\n              // add comma to the end\n              if (ind < len) {\n                li.appendChild(document.createTextNode(\",\"));\n              }\n              ulList.appendChild(li);\n            }, this);\n            frag.appendChild(ulList);\n          } else if (items.length && isMaxLvl) {\n            itemsCount = this._createItemsCount(items.length);\n            itemsCount.classList.remove(\"hide\");\n            frag.appendChild(itemsCount);\n          }\n          if (lvl === 0) {\n            // empty root\n            if (!items.length) {\n              itemsCount = this._createItemsCount(0);\n              itemsCount.classList.remove(\"hide\");\n              frag.appendChild(itemsCount);\n            }\n            // root cover\n            frag.appendChild(document.createTextNode(isArray ? \"]\" : \"}\"));\n            // collapse\n            if (isCollapse) {\n              frag.querySelector(\"ul\").classList.add(\"hide\");\n            }\n          }\n          //break; //commented out by Lumi\n        }\n      } else {\n        // simple value\n        frag.appendChild(this._createSimple(value));\n      }\n      return frag;\n    }\n    /**\r\n     * Create a param checkbox\r\n     * Per convention, the id is set to the param path,\r\n     * while the data-type property represents its type\r\n     *\r\n     * @return {Element}\r\n     */\n    _createCheckBoxParam(object) {\n      let checkboxElement = document.createElement(\"input\");\n      checkboxElement.type = \"checkbox\";\n      checkboxElement.name = \"parameterCheckbox\";\n      if (object && object.hasOwnProperty(\"path\")) {\n        checkboxElement.id = object[\"path\"];\n      }\n      if (object.hasOwnProperty(\"type\")) {\n        checkboxElement[\"data-type\"] = object[\"type\"];\n        checkboxElement['data-value'] = object.value;\n      }\n      checkboxElement.classList.add('type-checkbox-param');\n      return checkboxElement;\n    }\n    /**\r\n     * Create a logic checkbox\r\n     * Per convention, the id is set to the param path,\r\n     * while the data-type property represents its type\r\n     *\r\n     * @return {Element}\r\n     */\n    _createCheckBoxLogic(object) {\n      let checkboxElement = document.createElement(\"input\");\n      checkboxElement.type = \"checkbox\";\n      checkboxElement.name = \"logicCheckbox\";\n      if (object && object.hasOwnProperty(\"path\")) {\n        checkboxElement.id = object[\"path\"];\n      }\n      if (object.hasOwnProperty(\"type\")) {\n        checkboxElement[\"data-type\"] = object[\"type\"];\n        checkboxElement['data-value'] = object.value;\n      }\n      if (object.hasOwnProperty(\"writable\")) {\n        checkboxElement['data-writable'] = object.writable;\n      } else {\n        checkboxElement['data-writable'] = false;\n      }\n      checkboxElement.classList.add('type-checkbox-logic');\n      return checkboxElement;\n    }\n    /**\r\n     * Create simple value (no object|array).\r\n     *\r\n     * @param  {Number|String|null|undefined|Date} value Input value\r\n     * @return {Element}\r\n     */\n    _createSimple(value) {\n      let spanEl = document.createElement(\"span\");\n      let type = typeof value;\n      let txt = value;\n      if (type === \"string\") {\n        txt = '\"' + value + '\"';\n      } else if (value === null) {\n        type = \"null\";\n        txt = \"null\";\n      } else if (value === undefined) {\n        txt = \"undefined\";\n      } else if (value instanceof Date) {\n        type = \"date\";\n        txt = value.toString();\n      }\n      spanEl.classList.add(\"type-\" + type);\n      spanEl.innerHTML = txt;\n      return spanEl;\n    }\n    /**\r\n     * Create items count element.\r\n     *\r\n     * @param  {Number} count Items count\r\n     * @return {Element}\r\n     */\n    _createItemsCount(count) {\n      let itemsCount = document.createElement(\"span\");\n      itemsCount.classList.add(\"items-ph\");\n      itemsCount.classList.add(\"hide\");\n      itemsCount.innerHTML = this._getItemsTitle(count);\n      return itemsCount;\n    }\n    /**\r\n     * Create clickable link.\r\n     *\r\n     * @param  {String} title Link title\r\n     * @return {Element}\r\n     */\n    _createLink(title) {\n      let linkEl = document.createElement(\"a\");\n      linkEl.classList.add(\"list-link\");\n      linkEl.href = \"javascript:void(0)\";\n      linkEl.innerHTML = title || \"\";\n      return linkEl;\n    }\n    /**\r\n     * Get correct item|s title for count.\r\n     *\r\n     * @param  {Number} count Items count\r\n     * @return {String}\r\n     */\n    _getItemsTitle(count) {\n      let itemsTxt = count > 1 || count === 0 ? \"items\" : \"item\";\n      return count + \" \" + itemsTxt;\n    }\n  }\n  JsonViewerService.ɵfac = function JsonViewerService_Factory(t) {\n    return new (t || JsonViewerService)();\n  };\n  JsonViewerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JsonViewerService,\n    factory: JsonViewerService.ɵfac,\n    providedIn: 'root'\n  });\n  return JsonViewerService;\n})();","map":null,"metadata":{},"sourceType":"module"}