{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { add as collectionAdd, remove as collectionRemove } from '../../../util/Collections';\n\n/**\n * A handler that implements reversible moving of connections.\n *\n * The handler differs from the layout connection handler in a sense\n * that it preserves the connection layout.\n */\nexport default function MoveConnectionHandler() {}\nMoveConnectionHandler.prototype.execute = function (context) {\n  var connection = context.connection,\n    delta = context.delta;\n  var newParent = context.newParent || connection.parent,\n    newParentIndex = context.newParentIndex,\n    oldParent = connection.parent;\n\n  // save old parent in context\n  context.oldParent = oldParent;\n  context.oldParentIndex = collectionRemove(oldParent.children, connection);\n\n  // add to new parent at position\n  collectionAdd(newParent.children, connection, newParentIndex);\n\n  // update parent\n  connection.parent = newParent;\n\n  // update waypoint positions\n  forEach(connection.waypoints, function (p) {\n    p.x += delta.x;\n    p.y += delta.y;\n    if (p.original) {\n      p.original.x += delta.x;\n      p.original.y += delta.y;\n    }\n  });\n  return connection;\n};\nMoveConnectionHandler.prototype.revert = function (context) {\n  var connection = context.connection,\n    newParent = connection.parent,\n    oldParent = context.oldParent,\n    oldParentIndex = context.oldParentIndex,\n    delta = context.delta;\n\n  // remove from newParent\n  collectionRemove(newParent.children, connection);\n\n  // restore previous location in old parent\n  collectionAdd(oldParent.children, connection, oldParentIndex);\n\n  // restore parent\n  connection.parent = oldParent;\n\n  // revert to old waypoint positions\n  forEach(connection.waypoints, function (p) {\n    p.x -= delta.x;\n    p.y -= delta.y;\n    if (p.original) {\n      p.original.x -= delta.x;\n      p.original.y -= delta.y;\n    }\n  });\n  return connection;\n};","map":null,"metadata":{},"sourceType":"module"}