{"ast":null,"code":"import { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport lineIntersect from './util/LineIntersect';\n\n/**\n * Fix broken dockings after DI imports.\n *\n * @param {EventBus} eventBus\n */\nexport default function ImportDockingFix(eventBus) {\n  function adjustDocking(startPoint, nextPoint, elementMid) {\n    var elementTop = {\n      x: elementMid.x,\n      y: elementMid.y - 50\n    };\n    var elementLeft = {\n      x: elementMid.x - 50,\n      y: elementMid.y\n    };\n    var verticalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementTop),\n      horizontalIntersect = lineIntersect(startPoint, nextPoint, elementMid, elementLeft);\n\n    // original is horizontal or vertical center cross intersection\n    var centerIntersect;\n    if (verticalIntersect && horizontalIntersect) {\n      if (getDistance(verticalIntersect, elementMid) > getDistance(horizontalIntersect, elementMid)) {\n        centerIntersect = horizontalIntersect;\n      } else {\n        centerIntersect = verticalIntersect;\n      }\n    } else {\n      centerIntersect = verticalIntersect || horizontalIntersect;\n    }\n    startPoint.original = centerIntersect;\n  }\n  function fixDockings(connection) {\n    var waypoints = connection.waypoints;\n    adjustDocking(waypoints[0], waypoints[1], getMid(connection.source));\n    adjustDocking(waypoints[waypoints.length - 1], waypoints[waypoints.length - 2], getMid(connection.target));\n  }\n  eventBus.on('bpmnElement.added', function (e) {\n    var element = e.element;\n    if (element.waypoints) {\n      fixDockings(element);\n    }\n  });\n}\nImportDockingFix.$inject = ['eventBus'];\n\n// helpers //////////////////////\n\nfunction getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}","map":null,"metadata":{},"sourceType":"module"}