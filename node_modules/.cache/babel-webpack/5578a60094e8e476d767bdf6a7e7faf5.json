{"ast":null,"code":"import { assign, forEach } from 'min-dash';\nimport { getResizedSourceAnchor, getResizedTargetAnchor } from './helper/AnchorsHelper';\n\n/**\n * A handler that implements reversible resizing of shapes.\n *\n * @param {Modeling} modeling\n */\nexport default function ResizeShapeHandler(modeling) {\n  this._modeling = modeling;\n}\nResizeShapeHandler.$inject = ['modeling'];\n\n/**\n * {\n *   shape: {....}\n *   newBounds: {\n *     width:  20,\n *     height: 40,\n *     x:       5,\n *     y:      10\n *   }\n *\n * }\n */\nResizeShapeHandler.prototype.execute = function (context) {\n  var shape = context.shape,\n    newBounds = context.newBounds,\n    minBounds = context.minBounds;\n  if (newBounds.x === undefined || newBounds.y === undefined || newBounds.width === undefined || newBounds.height === undefined) {\n    throw new Error('newBounds must have {x, y, width, height} properties');\n  }\n  if (minBounds && (newBounds.width < minBounds.width || newBounds.height < minBounds.height)) {\n    throw new Error('width and height cannot be less than minimum height and width');\n  } else if (!minBounds && newBounds.width < 10 || newBounds.height < 10) {\n    throw new Error('width and height cannot be less than 10px');\n  }\n\n  // save old bbox in context\n  context.oldBounds = {\n    width: shape.width,\n    height: shape.height,\n    x: shape.x,\n    y: shape.y\n  };\n\n  // update shape\n  assign(shape, {\n    width: newBounds.width,\n    height: newBounds.height,\n    x: newBounds.x,\n    y: newBounds.y\n  });\n  return shape;\n};\nResizeShapeHandler.prototype.postExecute = function (context) {\n  var modeling = this._modeling;\n  var shape = context.shape,\n    oldBounds = context.oldBounds,\n    hints = context.hints || {};\n  if (hints.layout === false) {\n    return;\n  }\n  forEach(shape.incoming, function (c) {\n    modeling.layoutConnection(c, {\n      connectionEnd: getResizedTargetAnchor(c, shape, oldBounds)\n    });\n  });\n  forEach(shape.outgoing, function (c) {\n    modeling.layoutConnection(c, {\n      connectionStart: getResizedSourceAnchor(c, shape, oldBounds)\n    });\n  });\n};\nResizeShapeHandler.prototype.revert = function (context) {\n  var shape = context.shape,\n    oldBounds = context.oldBounds;\n\n  // restore previous bbox\n  assign(shape, {\n    width: oldBounds.width,\n    height: oldBounds.height,\n    x: oldBounds.x,\n    y: oldBounds.y\n  });\n  return shape;\n};","map":null,"metadata":{},"sourceType":"module"}