{"ast":null,"code":"import { forkJoin, of, Subject } from 'rxjs';\nimport { DataTableDirective } from 'angular-datatables';\nimport { Validators } from '@angular/forms';\nimport { environment } from '../../../../../environments/environment';\nimport * as $ from 'jquery';\nimport * as isCidr from 'is-cidr';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nimport * as i3 from \"../services/device-group.service\";\nimport * as i4 from \"../../../data.service\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i7 from \"@angular/common/http\";\nimport * as i8 from \"@angular/router\";\nimport * as i9 from \"../../../../shared/services/ip-subnet-calculator.service\";\nimport * as i10 from \"../../../../shared/services/ipv6-address.service\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/platform-browser\";\nimport * as i13 from \"angular-datatables\";\nimport * as i14 from \"../../../../shared/directives/trim-space.directive\";\nimport * as i15 from \"@ng-select/ng-select\";\nimport * as i16 from \"../../../../shared/directives/autofocus.directive\";\nconst _c0 = [\"deleteModal\"];\nfunction DevicesGroupsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.language[\"Access denied due to RBAC. Please consult your Organization Administrator for access.\"], \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 28);\n    i0.ɵɵelementStart(1, \"span\", 29);\n    i0.ɵɵelement(2, \"img\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_1_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.isError = false;\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 32);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r2.language[ctx_r2.warningMessage] || ctx_r2.warningMessage, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 33);\n    i0.ɵɵelementStart(1, \"span\", 34);\n    i0.ɵɵelement(2, \"img\", 35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 36);\n    i0.ɵɵelementStart(4, \"strong\");\n    i0.ɵɵelement(5, \"div\", 37);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 36);\n    i0.ɵɵelementStart(7, \"button\", 38);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_2_Template_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return ctx_r25.hideSuccess();\n    });\n    i0.ɵɵelement(8, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r3.language[ctx_r3.successMsg] || ctx_r3.successMsg, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 39);\n    i0.ɵɵelementStart(1, \"div\", 40);\n    i0.ɵɵelementStart(2, \"div\", 29);\n    i0.ɵɵelement(3, \"img\", 41);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"div\", 42);\n    i0.ɵɵelementStart(5, \"div\", 43);\n    i0.ɵɵelementStart(6, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_3_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return ctx_r27.confirmDeleteSecleted();\n    });\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"button\", 45);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_3_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return ctx_r29.closeModal();\n    });\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r4.language.deviceGroupWarrningMsg(ctx_r4.modalname, ctx_r4.MemberCount, ctx_r4.workflowcount), i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r4.btnDisabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.language.Confirm, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.language.Cancel, \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵelementStart(1, \"div\", 47);\n    i0.ɵɵelementStart(2, \"div\", 48);\n    i0.ɵɵelementStart(3, \"span\", 49);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r5.language.Loading);\n  }\n}\nfunction DevicesGroupsComponent_div_1_ng_container_10_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_ng_container_10_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext(3);\n      return ctx_r31.displayAddGroup();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r30 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r30.language.New_device_Group, \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_ng_container_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_ng_container_10_button_1_Template, 2, 1, \"button\", 50);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.ishidebtn && !ctx_r6.editSystem);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r34 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵelementStart(1, \"div\", 53);\n    i0.ɵɵelementStart(2, \"input\", 54);\n    i0.ɵɵlistener(\"ngModelChange\", function DevicesGroupsComponent_div_1_div_11_Template_input_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r33 = i0.ɵɵnextContext(2);\n      return ctx_r33.searchText = $event;\n    })(\"keyup.enter\", function DevicesGroupsComponent_div_1_div_11_Template_input_keyup_enter_2_listener() {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r35 = i0.ɵɵnextContext(2);\n      return ctx_r35.searchGroupBy();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 55);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_11_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r36 = i0.ɵɵnextContext(2);\n      return ctx_r36.searchGroupBy();\n    });\n    i0.ɵɵelement(4, \"img\", 56);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate3(\"placeholder\", \"\", ctx_r7.language.GroupName, \"/\", ctx_r7.language.FSAN_Serial_Number, \"/Reg ID/\", ctx_r7.language.macAddress, \"\");\n    i0.ɵɵproperty(\"ngModel\", ctx_r7.searchText);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_12_th_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"th\", 64);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_12_ng_container_13_a_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r46 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 70);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_table_12_ng_container_13_a_10_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r46);\n      const item_r40 = i0.ɵɵnextContext().$implicit;\n      const ctx_r44 = i0.ɵɵnextContext(3);\n      return ctx_r44.workFlowMenbers(item_r40._id, item_r40.name, false);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r40 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r40.workflowCount);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_12_ng_container_13_a_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 71);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r42 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r42.language.None);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_12_ng_container_13_td_12_a_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r51 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 74);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_table_12_ng_container_13_td_12_a_2_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r51);\n      const item_r40 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r49 = i0.ɵɵnextContext(3);\n      return ctx_r49.deleteDeviceGrp(item_r40);\n    });\n    i0.ɵɵelement(1, \"i\", 75);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r48 = i0.ɵɵnextContext(5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r48.language.Delete);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_12_ng_container_13_td_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelementStart(1, \"span\", 72);\n    i0.ɵɵtemplate(2, DevicesGroupsComponent_div_1_table_12_ng_container_13_td_12_a_2_Template, 2, 1, \"a\", 73);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r40 = i0.ɵɵnextContext().$implicit;\n    const ctx_r43 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r43.language.Delete);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r40.uncompletedCount == 0);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_12_ng_container_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r54 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"tr\", 65);\n    i0.ɵɵelementStart(2, \"td\", 66);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_table_12_ng_container_13_Template_td_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r54);\n      const item_r40 = restoredCtx.$implicit;\n      const ctx_r53 = i0.ɵɵnextContext(3);\n      return ctx_r53.gotoEdit(item_r40._id);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\", 66);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_table_12_ng_container_13_Template_td_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r54);\n      const item_r40 = restoredCtx.$implicit;\n      const ctx_r55 = i0.ɵɵnextContext(3);\n      return ctx_r55.gotoEdit(item_r40._id);\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\", 66);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_table_12_ng_container_13_Template_td_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r54);\n      const item_r40 = restoredCtx.$implicit;\n      const ctx_r56 = i0.ɵɵnextContext(3);\n      return ctx_r56.gotoEdit(item_r40._id);\n    });\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"titlecase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\", 67);\n    i0.ɵɵtemplate(10, DevicesGroupsComponent_div_1_table_12_ng_container_13_a_10_Template, 2, 1, \"a\", 68);\n    i0.ɵɵtemplate(11, DevicesGroupsComponent_div_1_table_12_ng_container_13_a_11_Template, 2, 1, \"a\", 69);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, DevicesGroupsComponent_div_1_table_12_ng_container_13_td_12_Template, 3, 2, \"td\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const item_r40 = ctx.$implicit;\n    const ctx_r38 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", item_r40._id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r40.name ? item_r40.name : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r40.description ? item_r40.description : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r40.type ? ctx_r38.language[i0.ɵɵpipeBind1(8, 7, item_r40.type)] || item_r40.type : \"\", \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", item_r40.workflowCount);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r40.workflowCount == 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r38.hasWriteAccess);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_12_tbody_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵelementStart(2, \"td\", 76);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r39 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r39.language[\"No data available in table\"], \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 57);\n    i0.ɵɵelementStart(1, \"thead\");\n    i0.ɵɵelementStart(2, \"tr\");\n    i0.ɵɵelementStart(3, \"th\", 58);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\", 59);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\", 60);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\", 61);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, DevicesGroupsComponent_div_1_table_12_th_11_Template, 1, 0, \"th\", 62);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"tbody\");\n    i0.ɵɵtemplate(13, DevicesGroupsComponent_div_1_table_12_ng_container_13_Template, 13, 9, \"ng-container\", 63);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(14, DevicesGroupsComponent_div_1_table_12_tbody_14_Template, 4, 1, \"tbody\", 12);\n    i0.ɵɵelement(15, \"tbody\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"dtOptions\", ctx_r8.dtOptionsDeviceGroup);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r8.language.Name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r8.language.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r8.language.Type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r8.language.no_of_workflows);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.hasWriteAccess);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.DeviceTableData);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r8.DeviceTableData == null ? null : ctx_r8.DeviceTableData.length) === 0 && !ctx_r8.loading);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵelementStart(1, \"div\", 47);\n    i0.ɵɵelementStart(2, \"div\", 48);\n    i0.ɵɵelementStart(3, \"span\", 49);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r9.language.Loading);\n  }\n}\nfunction DevicesGroupsComponent_div_1_span_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r10.language.New, \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r58 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"div\", 77);\n    i0.ɵɵelementStart(2, \"button\", 78);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_22_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r58);\n      const ctx_r57 = i0.ɵɵnextContext(2);\n      ctx_r57.cancelAddGroup();\n      return ctx_r57.FilledAll(\"active\");\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 79);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_22_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r58);\n      const ctx_r59 = i0.ɵɵnextContext(2);\n      return ctx_r59.submitAddGroup();\n    });\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r11.language.Cancel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r11.language[\"Save Group\"], \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_ng_container_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r61 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 28);\n    i0.ɵɵelementStart(2, \"span\", 29);\n    i0.ɵɵelement(3, \"img\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_ng_container_23_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r61);\n      const ctx_r60 = i0.ɵɵnextContext(2);\n      return ctx_r60.Rule_err = false;\n    });\n    i0.ɵɵelement(5, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 80);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.language[ctx_r12.ErrorMessage] || ctx_r12.ErrorMessage, \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_24_div_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 100);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r65 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r65.language.Enter_A_Value, \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_24_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 98);\n    i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_div_24_div_8_div_1_Template, 2, 1, \"div\", 99);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r62 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r62.f.name.errors.required);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_24_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 101);\n    i0.ɵɵelementStart(1, \"label\", 102);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 103);\n    i0.ɵɵelement(4, \"textarea\", 104);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r63 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r63.language.desc_optional);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formValue\", ctx_r63.createDeviceGroup);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_24_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 105);\n    i0.ɵɵelementStart(1, \"label\", 90);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 91);\n    i0.ɵɵelementStart(4, \"div\", 106);\n    i0.ɵɵelement(5, \"input\", 107);\n    i0.ɵɵelementStart(6, \"label\", 108);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 106);\n    i0.ɵɵelement(9, \"input\", 109);\n    i0.ɵɵelementStart(10, \"label\", 110);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r64 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r64.is_staticenable ? \"cursornallow\" : \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r64.language.Allow_Inheritance);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r64.is_staticenable ? \"disable\" : \"\")(\"value\", true);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r64.language.Yes, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", false)(\"ngClass\", ctx_r64.is_staticenable ? \"disable\" : \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r64.language.No);\n  }\n}\nconst _c1 = function (a0, a1) {\n  return {\n    disable: a0,\n    errorMessage: a1\n  };\n};\nfunction DevicesGroupsComponent_div_1_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r67 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 81);\n    i0.ɵɵelementStart(1, \"div\", 82);\n    i0.ɵɵelementStart(2, \"label\", 83);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"span\", 84);\n    i0.ɵɵtext(5, \"*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 85);\n    i0.ɵɵelementStart(7, \"input\", 86);\n    i0.ɵɵlistener(\"keyup\", function DevicesGroupsComponent_div_1_div_24_Template_input_keyup_7_listener($event) {\n      i0.ɵɵrestoreView(_r67);\n      const ctx_r66 = i0.ɵɵnextContext(2);\n      return ctx_r66.nameCheck($event.target.value);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, DevicesGroupsComponent_div_1_div_24_div_8_Template, 2, 1, \"div\", 87);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, DevicesGroupsComponent_div_1_div_24_div_9_Template, 5, 2, \"div\", 88);\n    i0.ɵɵelementStart(10, \"div\", 89);\n    i0.ɵɵelementStart(11, \"label\", 90);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 91);\n    i0.ɵɵelementStart(14, \"div\", 92);\n    i0.ɵɵelementStart(15, \"input\", 93);\n    i0.ɵɵlistener(\"ngModelChange\", function DevicesGroupsComponent_div_1_div_24_Template_input_ngModelChange_15_listener($event) {\n      i0.ɵɵrestoreView(_r67);\n      const ctx_r68 = i0.ɵɵnextContext(2);\n      return ctx_r68.groupType = $event;\n    })(\"change\", function DevicesGroupsComponent_div_1_div_24_Template_input_change_15_listener($event) {\n      i0.ɵɵrestoreView(_r67);\n      const ctx_r69 = i0.ɵɵnextContext(2);\n      return ctx_r69.changeType($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"label\", 94);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 92);\n    i0.ɵɵelementStart(19, \"input\", 95);\n    i0.ɵɵlistener(\"change\", function DevicesGroupsComponent_div_1_div_24_Template_input_change_19_listener($event) {\n      i0.ɵɵrestoreView(_r67);\n      const ctx_r70 = i0.ɵɵnextContext(2);\n      return ctx_r70.changeType($event);\n    })(\"ngModelChange\", function DevicesGroupsComponent_div_1_div_24_Template_input_ngModelChange_19_listener($event) {\n      i0.ɵɵrestoreView(_r67);\n      const ctx_r71 = i0.ɵɵnextContext(2);\n      return ctx_r71.groupType = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"label\", 96);\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(22, DevicesGroupsComponent_div_1_div_24_div_22_Template, 12, 8, \"div\", 97);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r13.is_staticenable ? \"cursornallow\" : \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r13.language.Name, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(19, _c1, ctx_r13.is_staticenable, ctx_r13.isNameError));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r13.language.Name);\n    i0.ɵɵproperty(\"formValue\", ctx_r13.createDeviceGroup);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.submitted && ctx_r13.f.name.errors);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.hasWriteAccess);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r13.language.Type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r13.is_staticenable ? \"cursornallow\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r13.is_staticenable ? \"disable\" : \"\")(\"ngModel\", ctx_r13.groupType);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r13.is_staticenable ? \"disable\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r13.language.Dynamic, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r13.is_staticenable ? \"cursornallow\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r13.is_staticenable ? \"disable\" : \"\")(\"ngModel\", ctx_r13.groupType);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r13.is_staticenable ? \"disable\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r13.language.Static, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.IsStatic);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const item_r83 = ctx.item;\n    const ctx_r78 = i0.ɵɵnextContext(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r78.language[item_r83.name], \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const item_r84 = ctx.item;\n    const ctx_r79 = i0.ɵɵnextContext(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r79.language[item_r84.name], \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_select_7_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const item_r88 = ctx.item;\n    const ctx_r86 = i0.ɵɵnextContext(6);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r86.language[item_r88.name] || item_r88.name, \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_select_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const item_r89 = ctx.item;\n    const ctx_r87 = i0.ɵɵnextContext(6);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r87.language[item_r89.name] || item_r89.name, \" \");\n  }\n}\nconst _c2 = function () {\n  return {\n    standalone: true\n  };\n};\nfunction DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_select_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r92 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ng-select\", 125);\n    i0.ɵɵlistener(\"ngModelChange\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_select_7_Template_ng_select_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r92);\n      const i_r77 = i0.ɵɵnextContext().index;\n      const ctx_r91 = i0.ɵɵnextContext(4);\n      return ctx_r91.RulesArray[i_r77].rule2 = $event;\n    })(\"change\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_select_7_Template_ng_select_change_0_listener() {\n      i0.ɵɵrestoreView(_r92);\n      const i_r77 = i0.ɵɵnextContext().index;\n      const ctx_r94 = i0.ɵɵnextContext(4);\n      ctx_r94.Rule2change(i_r77);\n      ctx_r94.DropdownOrInput(i_r77);\n      ctx_r94.MultiOrSingle(i_r77);\n      ctx_r94.FilterDevice(i_r77);\n      ctx_r94.initFilledAll(i_r77);\n      return ctx_r94.Rule3select(i_r77);\n    });\n    i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_select_7_ng_template_1_Template, 1, 1, \"ng-template\", 120);\n    i0.ɵɵtemplate(2, DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_select_7_ng_template_2_Template, 1, 1, \"ng-template\", 121);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r77 = i0.ɵɵnextContext().index;\n    const ctx_r80 = i0.ɵɵnextContext(4);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"inputOperator-\", i_r77, \"\");\n    i0.ɵɵpropertyInterpolate1(\"name\", \"inputOperator-\", i_r77, \"\");\n    i0.ɵɵproperty(\"items\", ctx_r80.rule2items[ctx_r80.RulesArray[i_r77].rule1])(\"ngModel\", ctx_r80.RulesArray[i_r77].rule2)(\"searchable\", false)(\"clearable\", false)(\"ngModelOptions\", i0.ɵɵpureFunction0(7, _c2));\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_9_ng_select_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r99 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ng-select\", 127);\n    i0.ɵɵlistener(\"ngModelChange\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_9_ng_select_1_Template_ng_select_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r99);\n      const i_r77 = i0.ɵɵnextContext(2).index;\n      const ctx_r98 = i0.ɵɵnextContext(4);\n      return ctx_r98.RulesArray[i_r77].rule3 = $event;\n    })(\"change\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_9_ng_select_1_Template_ng_select_change_0_listener() {\n      i0.ɵɵrestoreView(_r99);\n      const i_r77 = i0.ɵɵnextContext(2).index;\n      const ctx_r101 = i0.ɵɵnextContext(4);\n      ctx_r101.FilterDevice(i_r77);\n      ctx_r101.Recall();\n      return ctx_r101.FilledAll(\"active\");\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r77 = i0.ɵɵnextContext(2).index;\n    const ctx_r97 = i0.ɵɵnextContext(4);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"inputValue-\", i_r77, \"\");\n    i0.ɵɵpropertyInterpolate1(\"name\", \"inputValue-\", i_r77, \"\");\n    i0.ɵɵproperty(\"items\", ctx_r97.RulesArray[i_r77][\"rule3items\"][ctx_r97.RulesArray[i_r77].rule1])(\"multiple\", ctx_r97.MultiOrSingle(i_r77) || ctx_r97.RulesArray[i_r77].multiple)(\"searchable\", true)(\"clearable\", false)(\"ngModel\", ctx_r97.RulesArray[i_r77].rule3)(\"ngModelOptions\", i0.ɵɵpureFunction0(8, _c2));\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_9_ng_select_1_Template, 1, 9, \"ng-select\", 126);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r77 = i0.ɵɵnextContext().index;\n    const ctx_r81 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i_r77 == ctx_r81.Rule2change(i_r77) || ctx_r81.RulesArray[i_r77].rule3);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_10_input_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r108 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 130);\n    i0.ɵɵlistener(\"focusout\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_10_input_2_Template_input_focusout_0_listener() {\n      i0.ɵɵrestoreView(_r108);\n      const i_r77 = i0.ɵɵnextContext(2).index;\n      const ctx_r106 = i0.ɵɵnextContext(4);\n      return ctx_r106.CheckValidationErr(i_r77);\n    })(\"keyup\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_10_input_2_Template_input_keyup_0_listener() {\n      i0.ɵɵrestoreView(_r108);\n      const i_r77 = i0.ɵɵnextContext(2).index;\n      const ctx_r109 = i0.ɵɵnextContext(4);\n      return ctx_r109.FilledAll(ctx_r109.RulesArray[i_r77].rule3);\n    })(\"ngModelChange\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_10_input_2_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r108);\n      const i_r77 = i0.ɵɵnextContext(2).index;\n      const ctx_r111 = i0.ɵɵnextContext(4);\n      return ctx_r111.RulesArray[i_r77].rule3 = $event;\n    })(\"change\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_10_input_2_Template_input_change_0_listener() {\n      i0.ɵɵrestoreView(_r108);\n      const i_r77 = i0.ɵɵnextContext(2).index;\n      const ctx_r113 = i0.ɵɵnextContext(4);\n      return ctx_r113.FilterDevice(i_r77);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const i_r77 = i0.ɵɵnextContext(2).index;\n    const ctx_r105 = i0.ɵɵnextContext(4);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r105.tooltipTitle ? ctx_r105.tooltipTitle : \"\");\n    i0.ɵɵpropertyInterpolate1(\"id\", \"inputValue-\", i_r77, \"\");\n    i0.ɵɵpropertyInterpolate1(\"name\", \"inputValue-\", i_r77, \"\");\n    i0.ɵɵproperty(\"ngModel\", ctx_r105.RulesArray[i_r77].rule3)(\"ngModelOptions\", i0.ɵɵpureFunction0(6, _c2))(\"formValue\", ctx_r105.RulesArray[i_r77]);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 128);\n    i0.ɵɵtemplate(2, DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_10_input_2_Template, 1, 7, \"input\", 129);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r77 = i0.ɵɵnextContext().index;\n    const ctx_r82 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", i_r77 == ctx_r82.Rule2change(i_r77) || ctx_r82.RulesArray[i_r77].rule3);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r118 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 117);\n    i0.ɵɵelementStart(2, \"div\", 118);\n    i0.ɵɵelementStart(3, \"ng-select\", 119);\n    i0.ɵɵlistener(\"ngModelChange\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_Template_ng_select_ngModelChange_3_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r118);\n      const i_r77 = restoredCtx.index;\n      const ctx_r117 = i0.ɵɵnextContext(4);\n      return ctx_r117.RulesArray[i_r77].rule1 = $event;\n    })(\"change\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_Template_ng_select_change_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r118);\n      const i_r77 = restoredCtx.index;\n      const ctx_r119 = i0.ɵɵnextContext(4);\n      ctx_r119.Rule1change(i_r77);\n      ctx_r119.Rule1ChangeVal(i_r77);\n      return ctx_r119.dynamicTitle(ctx_r119.RulesArray[i_r77].rule1);\n    });\n    i0.ɵɵtemplate(4, DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_template_4_Template, 1, 1, \"ng-template\", 120);\n    i0.ɵɵtemplate(5, DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_template_5_Template, 1, 1, \"ng-template\", 121);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 118);\n    i0.ɵɵtemplate(7, DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_select_7_Template, 3, 8, \"ng-select\", 122);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 118);\n    i0.ɵɵtemplate(9, DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_9_Template, 2, 1, \"ng-container\", 12);\n    i0.ɵɵtemplate(10, DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_ng_container_10_Template, 3, 1, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 123);\n    i0.ɵɵelementStart(12, \"a\", 124);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_Template_a_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r118);\n      const i_r77 = restoredCtx.index;\n      const ctx_r120 = i0.ɵɵnextContext(4);\n      ctx_r120.OnclickDeleteSymbol(i_r77);\n      return ctx_r120.FilledAll(\"active\");\n    });\n    i0.ɵɵelement(13, \"i\", 75);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r77 = ctx.index;\n    const ctx_r75 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"inputKey-\", i_r77, \"\");\n    i0.ɵɵpropertyInterpolate1(\"name\", \"inputKey-\", i_r77, \"\");\n    i0.ɵɵproperty(\"items\", ctx_r75.RulesArray[i_r77].rule1items)(\"ngModel\", ctx_r75.RulesArray[i_r77].rule1)(\"searchable\", false)(\"clearable\", false)(\"ngModelOptions\", i0.ɵɵpureFunction0(12, _c2))(\"disabled\", ctx_r75.RulesArray[i_r77].disabled);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", i_r77 == ctx_r75.Rule1change(i_r77));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r75.DropdownOrInput(i_r77) == true || ctx_r75.RulesArray[i_r77].multiple);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r75.DropdownOrInput(i_r77) == false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r75.language.Delete);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 111);\n    i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_div_26_div_8_ng_container_1_Template, 14, 13, \"ng-container\", 63);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r72 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r72.RulesArray);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_a_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r122 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 131);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_26_a_10_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r122);\n      const ctx_r121 = i0.ɵɵnextContext(3);\n      ctx_r121.onClickPlusSymbol(ctx_r121.RulesArray.length);\n      return ctx_r121.FilledAll(\"\");\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r73 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r73.language.addRule);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_a_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r124 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 131);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_26_a_11_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r124);\n      const ctx_r123 = i0.ɵɵnextContext(3);\n      return ctx_r123.onClickPlusSymbol(ctx_r123.RulesArray.length);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r74 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r74.language[\"addRule\"]);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 89);\n    i0.ɵɵelementStart(1, \"div\", 111);\n    i0.ɵɵelementStart(2, \"label\", 112);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"span\", 84);\n    i0.ɵɵtext(5, \"*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 113);\n    i0.ɵɵelementStart(7, \"div\", 9);\n    i0.ɵɵtemplate(8, DevicesGroupsComponent_div_1_div_26_div_8_Template, 2, 1, \"div\", 114);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 115);\n    i0.ɵɵtemplate(10, DevicesGroupsComponent_div_1_div_26_a_10_Template, 2, 1, \"a\", 116);\n    i0.ɵɵtemplate(11, DevicesGroupsComponent_div_1_div_26_a_11_Template, 2, 1, \"a\", 116);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r14.language.Rules, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r14.RulesArray && ctx_r14.Is_Update == true || ctx_r14.Is_Update == false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r14.isFilledRow);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r14.isFilledRow);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_27_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r129 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"div\", 133);\n    i0.ɵɵelementStart(2, \"h5\", 134);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 135);\n    i0.ɵɵelementStart(5, \"i\", 136);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_27_div_1_Template_i_click_5_listener() {\n      i0.ɵɵrestoreView(_r129);\n      const ctx_r128 = i0.ɵɵnextContext(3);\n      return ctx_r128.CallDiscoveredDevice();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r125 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r125.language.Discovered_Devices, \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_27_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵelementStart(1, \"div\", 47);\n    i0.ɵɵelementStart(2, \"div\", 48);\n    i0.ɵɵelementStart(3, \"span\", 49);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r126 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r126.language.Loading);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_27_table_3_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r133 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 65);\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵelementStart(2, \"span\", 139);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_27_table_3_tr_20_Template_span_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r133);\n      const item_r131 = restoredCtx.$implicit;\n      const ctx_r132 = i0.ɵɵnextContext(4);\n      return ctx_r132.GotoTroubleshooting(item_r131);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"td\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"td\");\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r131 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"id\", item_r131._id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", item_r131.serialNumber ? item_r131.serialNumber : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r131.manufacturer ? item_r131.manufacturer : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r131.opMode ? item_r131.opMode : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r131.modelName ? item_r131.modelName : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r131.softwareVersion ? item_r131.softwareVersion : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r131.registrationId ? item_r131.registrationId : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r131.ipAddress ? item_r131.ipAddress : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r131.macAddress ? item_r131.macAddress : \"\", \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_27_table_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 137);\n    i0.ɵɵelementStart(1, \"thead\");\n    i0.ɵɵelementStart(2, \"tr\");\n    i0.ɵɵelementStart(3, \"th\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"th\");\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"tbody\");\n    i0.ɵɵtemplate(20, DevicesGroupsComponent_div_1_div_27_table_3_tr_20_Template, 18, 9, \"tr\", 138);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r127 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"dtOptions\", ctx_r127.dtOptionsdis);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r127.language.Device_info);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r127.language.manufacturer);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r127.language.Mode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r127.language.Model);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r127.language.Software_Version);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r127.language.Registration_ID);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r127.language.IP_Address);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r127.language.MAC_Address);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r127.DiscoveredTableData);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_div_27_div_1_Template, 6, 1, \"div\", 21);\n    i0.ɵɵtemplate(2, DevicesGroupsComponent_div_1_div_27_div_2_Template, 5, 1, \"div\", 10);\n    i0.ɵɵtemplate(3, DevicesGroupsComponent_div_1_div_27_table_3_Template, 21, 10, \"table\", 132);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r15.static && ctx_r15.Disc_count);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r15.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r15.static && ctx_r15.Disc_count);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r135 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"div\", 133);\n    i0.ɵɵelementStart(2, \"h5\", 134);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 140);\n    i0.ɵɵelementStart(5, \"i\", 136);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_28_Template_i_click_5_listener() {\n      i0.ɵɵrestoreView(_r135);\n      const ctx_r134 = i0.ɵɵnextContext(2);\n      return ctx_r134.DevicediscoveredCount();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r16.language.Discovered_Devices, \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵelementStart(1, \"div\", 47);\n    i0.ɵɵelementStart(2, \"div\", 48);\n    i0.ɵɵelementStart(3, \"span\", 49);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r17.language.Loading);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_30_tbody_19_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r142 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 65);\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵelementStart(2, \"span\", 139);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_table_30_tbody_19_tr_1_Template_span_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r142);\n      const item_r139 = restoredCtx.$implicit;\n      const ctx_r141 = i0.ɵɵnextContext(4);\n      return ctx_r141.GotoTroubleshooting(item_r139);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"td\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"td\");\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r139 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"id\", item_r139._id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", item_r139.serialNumber ? item_r139.serialNumber : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r139.manufacturer ? item_r139.manufacturer : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r139.opMode ? item_r139.opMode : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r139.modelName ? item_r139.modelName : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r139.softwareVersion ? item_r139.softwareVersion : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r139.registrationId ? item_r139.registrationId : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r139.ipAddress ? item_r139.ipAddress : \"\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r139.macAddress ? item_r139.macAddress : \"\", \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_30_tbody_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_table_30_tbody_19_tr_1_Template, 18, 9, \"tr\", 138);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r136 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r136.DiscoveredTableData_static);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_30_tbody_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵelementStart(2, \"td\", 142);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r137 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r137.language[\"No data available in table\"]);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 141);\n    i0.ɵɵelementStart(1, \"thead\");\n    i0.ɵɵelementStart(2, \"tr\");\n    i0.ɵɵelementStart(3, \"th\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\");\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"th\");\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(19, DevicesGroupsComponent_div_1_table_30_tbody_19_Template, 2, 1, \"tbody\", 12);\n    i0.ɵɵtemplate(20, DevicesGroupsComponent_div_1_table_30_tbody_20_Template, 4, 1, \"tbody\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"dtOptions\", ctx_r18.dtOptionsstaticdis);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r18.language.Device_info);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r18.language.manufacturer);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r18.language.Mode);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r18.language.Model);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r18.language.Software_Version);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r18.language.Registration_ID);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r18.language.IP_Address);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r18.language.MAC_Address);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r18.static && ctx_r18.Disc_count_static);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r18.DiscoveredTableData_static == null ? null : ctx_r18.DiscoveredTableData_static.length) == 0);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r144 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"div\", 133);\n    i0.ɵɵelementStart(2, \"h5\", 134);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 143);\n    i0.ɵɵelementStart(5, \"i\", 136);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_31_Template_i_click_5_listener() {\n      i0.ɵɵrestoreView(_r144);\n      const ctx_r143 = i0.ɵɵnextContext(2);\n      return ctx_r143.DeviceUndiscoveredCount();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r19.language.Undiscovered_Devices, \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵelementStart(1, \"div\", 47);\n    i0.ɵɵelementStart(2, \"div\", 48);\n    i0.ɵɵelementStart(3, \"span\", 49);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r20.language.Loading);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_33_tbody_5_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 65);\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r148 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"id\", item_r148._id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r148.memberInfo ? item_r148.memberInfo : \"\", \" \");\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_33_tbody_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_table_33_tbody_5_tr_1_Template, 3, 2, \"tr\", 138);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r145 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r145.UnDiscoveredTableData_static);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_33_tbody_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵelementStart(2, \"td\", 76);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r146 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r146.language[\"No data available in table\"]);\n  }\n}\nfunction DevicesGroupsComponent_div_1_table_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 144);\n    i0.ɵɵelementStart(1, \"thead\");\n    i0.ɵɵelementStart(2, \"tr\");\n    i0.ɵɵelementStart(3, \"th\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, DevicesGroupsComponent_div_1_table_33_tbody_5_Template, 2, 1, \"tbody\", 12);\n    i0.ɵɵtemplate(6, DevicesGroupsComponent_div_1_table_33_tbody_6_Template, 4, 1, \"tbody\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"dtOptions\", ctx_r21.dtOptionsstaticUndis);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r21.language.Device_info);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r21.static_undisc && ctx_r21.UnDisc_count_static);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r21.UnDiscoveredTableData_static == null ? null : ctx_r21.UnDiscoveredTableData_static.length) == 0);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_34_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵelementStart(1, \"div\", 47);\n    i0.ɵɵelementStart(2, \"div\", 48);\n    i0.ɵɵelementStart(3, \"span\", 49);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r149 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r149.language.Loading);\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_34_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵelementStart(2, \"div\", 150);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵelementStart(5, \"div\", 150);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r151 = ctx.$implicit;\n    const ctx_r150 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r151.name ? item_r151.name : \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r151.description ? item_r151.description : \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r150.language.Workflow);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r151.state ? ctx_r150.language[item_r151.state] || item_r151.state : \"\");\n  }\n}\nfunction DevicesGroupsComponent_div_1_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r153 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 145);\n    i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_div_34_div_1_Template, 5, 1, \"div\", 10);\n    i0.ɵɵelementStart(2, \"div\", 146);\n    i0.ɵɵelementStart(3, \"div\", 19);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 78);\n    i0.ɵɵlistener(\"click\", function DevicesGroupsComponent_div_1_div_34_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r153);\n      const ctx_r152 = i0.ɵɵnextContext(2);\n      return ctx_r152.cancelWorkFlowGroup();\n    });\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 147);\n    i0.ɵɵelementStart(8, \"table\", 148);\n    i0.ɵɵelementStart(9, \"thead\");\n    i0.ɵɵelementStart(10, \"tr\");\n    i0.ɵɵelementStart(11, \"th\", 58);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\", 59);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\", 149);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"th\", 149);\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"tbody\");\n    i0.ɵɵtemplate(20, DevicesGroupsComponent_div_1_div_34_tr_20_Template, 11, 4, \"tr\", 63);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r22 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r22.loading);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r22.groupName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r22.language.Cancel);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r22.language.Name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r22.language.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r22.language.Type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r22.language.Status);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r22.workflowMemberData);\n  }\n}\nfunction DevicesGroupsComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_div_1_Template, 6, 1, \"div\", 4);\n    i0.ɵɵtemplate(2, DevicesGroupsComponent_div_1_div_2_Template, 9, 1, \"div\", 5);\n    i0.ɵɵtemplate(3, DevicesGroupsComponent_div_1_div_3_Template, 10, 4, \"div\", 6);\n    i0.ɵɵelementStart(4, \"div\", 7);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 8);\n    i0.ɵɵelementStart(7, \"div\", 9);\n    i0.ɵɵtemplate(8, DevicesGroupsComponent_div_1_div_8_Template, 5, 1, \"div\", 10);\n    i0.ɵɵelementStart(9, \"div\", 11);\n    i0.ɵɵtemplate(10, DevicesGroupsComponent_div_1_ng_container_10_Template, 2, 1, \"ng-container\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, DevicesGroupsComponent_div_1_div_11_Template, 5, 4, \"div\", 13);\n    i0.ɵɵtemplate(12, DevicesGroupsComponent_div_1_table_12_Template, 16, 8, \"table\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 15);\n    i0.ɵɵtemplate(14, DevicesGroupsComponent_div_1_div_14_Template, 5, 1, \"div\", 10);\n    i0.ɵɵelementStart(15, \"form\", 16);\n    i0.ɵɵelementStart(16, \"div\", 17);\n    i0.ɵɵelementStart(17, \"div\", 18);\n    i0.ɵɵelementStart(18, \"div\", 19);\n    i0.ɵɵtemplate(19, DevicesGroupsComponent_div_1_span_19_Template, 2, 1, \"span\", 12);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"div\", 20);\n    i0.ɵɵtemplate(22, DevicesGroupsComponent_div_1_div_22_Template, 6, 2, \"div\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(23, DevicesGroupsComponent_div_1_ng_container_23_Template, 8, 1, \"ng-container\", 12);\n    i0.ɵɵtemplate(24, DevicesGroupsComponent_div_1_div_24_Template, 23, 22, \"div\", 22);\n    i0.ɵɵelementStart(25, \"div\", 23);\n    i0.ɵɵtemplate(26, DevicesGroupsComponent_div_1_div_26_Template, 12, 4, \"div\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(27, DevicesGroupsComponent_div_1_div_27_Template, 4, 3, \"div\", 12);\n    i0.ɵɵtemplate(28, DevicesGroupsComponent_div_1_div_28_Template, 6, 1, \"div\", 21);\n    i0.ɵɵtemplate(29, DevicesGroupsComponent_div_1_div_29_Template, 5, 1, \"div\", 10);\n    i0.ɵɵtemplate(30, DevicesGroupsComponent_div_1_table_30_Template, 21, 11, \"table\", 25);\n    i0.ɵɵtemplate(31, DevicesGroupsComponent_div_1_div_31_Template, 6, 1, \"div\", 21);\n    i0.ɵɵtemplate(32, DevicesGroupsComponent_div_1_div_32_Template, 5, 1, \"div\", 10);\n    i0.ɵɵtemplate(33, DevicesGroupsComponent_div_1_table_33_Template, 7, 4, \"table\", 26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(34, DevicesGroupsComponent_div_1_div_34_Template, 21, 8, \"div\", 27);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.isError);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.showSuccess);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.showWarningMsg);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.language[\"System Group\"], \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r1.isAddTable);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.hasWriteAccess);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.ishidebtn && !ctx_r1.editSystem);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.deviceGroupId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r1.isAddGroupForm);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.createDeviceGroup);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.editSystem);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.language[\"SystemGroup\"], \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.hasWriteAccess);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.Rule_err);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.hasWriteAccess);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.IsStatic && ctx_r1.hasWriteAccess);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.Disc_count);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.static);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.static && ctx_r1.static_disc);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.static);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.static_undisc);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.workflowdetails);\n  }\n}\nclass DataTablesResponse {}\nexport let DevicesGroupsComponent = /*#__PURE__*/(() => {\n  class DevicesGroupsComponent {\n    constructor(translateService, ssoService, service, subService, dataservice, formBuilder, dialogService, http, cdr, router, route, IpSubnetCalculator, IPv6AddressService, _location, titleService) {\n      this.translateService = translateService;\n      this.ssoService = ssoService;\n      this.service = service;\n      this.subService = subService;\n      this.dataservice = dataservice;\n      this.formBuilder = formBuilder;\n      this.dialogService = dialogService;\n      this.http = http;\n      this.cdr = cdr;\n      this.router = router;\n      this.route = route;\n      this.IpSubnetCalculator = IpSubnetCalculator;\n      this.IPv6AddressService = IPv6AddressService;\n      this._location = _location;\n      this.titleService = titleService;\n      this.groupType = 'dynamic';\n      this.dynamic = [{\n        id: 'dynamic',\n        name: 'Dynamic'\n      }, {\n        id: 'static',\n        name: 'Static'\n      }];\n      this.isAddGroupForm = true;\n      this.isAddTable = false;\n      this.ishidebtn = true;\n      this.isHideDropDown = false;\n      this.inheritance = [{\n        id: true,\n        name: 'true'\n      }, {\n        id: false,\n        name: 'false'\n      }];\n      this.showSuccess = false;\n      this.workflowdetails = false;\n      this.DeviceTableData = [];\n      this.isRerender = false;\n      this.loading = false;\n      this.dataAvailable = false;\n      this.IsStatic = false;\n      this.IsStatic_enable = false;\n      this.submitted = false;\n      this.workflowMemberData = [];\n      this.searchText = '';\n      this.forceDelete = true;\n      this.showWarningMsg = false;\n      this.workflowcount = [];\n      this.errMsg = 'Are you sure you want to delete Device Group';\n      this.operatorsMapping = {\n        '$ne': 'Not Equal',\n        '$gt': 'Greater Than',\n        '$gte': 'Greater Than Or Equal',\n        '$regex': 'WildCard',\n        '$in': 'In',\n        '$lte': 'Less Than or Equal',\n        '$lt': 'Less Than',\n        '$subnets': '$subnets'\n      };\n      this.defaultWanAccessTypes = [{\n        id: \"AE\",\n        name: \"AE\"\n      }, {\n        id: \"GPON\",\n        name: \"GPON\"\n      }];\n      this.rule1items = [{\n        id: '',\n        name: ''\n      }, {\n        id: 'manufacturer',\n        name: 'Manufacturer'\n      }, {\n        id: 'modelName',\n        name: 'Model'\n      }, {\n        id: 'softwareVersion',\n        name: 'SW Version'\n      }, {\n        id: 'hardwareVersion',\n        name: 'HW Version'\n      }, {\n        id: 'serialNumber',\n        name: 'FSAN/Serial Number'\n      }, {\n        id: 'normalizedIpAddress',\n        name: 'WAN IP'\n      }, {\n        id: 'registrationId',\n        name: 'Registration ID'\n      }, {\n        id: 'wanAccessType',\n        name: 'WAN Access Type'\n      }, {\n        id: 'opMode',\n        name: 'Mode'\n      }];\n      this.rule2items = {\n        \"manufacturer\": [{\n          id: '',\n          name: ''\n        }, {\n          id: 'Equals',\n          name: 'Equals'\n        }, {\n          id: '$ne',\n          name: 'Not Equal'\n        }],\n        \"modelName\": [{\n          id: '',\n          name: ''\n        }, {\n          id: 'Equals',\n          name: 'Equals'\n        }, {\n          id: '$ne',\n          name: 'Not Equal'\n        }, {\n          id: '$in',\n          name: 'In'\n        }],\n        \"softwareVersion\": [{\n          id: '',\n          name: ''\n        }, {\n          id: 'Equals',\n          name: 'Equals'\n        }, {\n          id: '$ne',\n          name: 'Not Equal'\n        }, {\n          id: '$in',\n          name: 'In'\n        }],\n        \"hardwareVersion\": [{\n          id: '',\n          name: ''\n        }, {\n          id: 'Equals',\n          name: 'Equals'\n        }, {\n          id: '$ne',\n          name: 'Not Equal'\n        }, {\n          id: '$in',\n          name: 'In'\n        }],\n        \"serialNumber\": [{\n          id: '',\n          name: ''\n        }, {\n          id: '$regex',\n          name: 'WildCard'\n        }],\n        \"normalizedIpAddress\": [{\n          id: '',\n          name: ''\n        }, {\n          id: '$subnets',\n          name: 'In Subnet'\n        }],\n        \"registrationId\": [{\n          id: '',\n          name: ''\n        }, {\n          id: '$regex',\n          name: 'WildCard'\n        }],\n        \"wanAccessType\": [{\n          id: '',\n          name: ''\n        }, {\n          id: 'Equals',\n          name: 'Equals'\n        }\n        // ,{\n        //   id: 'Equals',\n        //   name: 'Equals'\n        // },\n        // {\n        //   id: '$ne',\n        //   name: 'Not Equal'\n        // },\n        // {\n        //   id: '$in',\n        //   name: 'In'\n        // },\n        // {\n        //   id: '$regex',\n        //   name: 'WildCard'\n        // }\n        ],\n\n        \"opMode\": [{\n          id: 'Equals',\n          name: 'Equals'\n        }]\n      };\n      this.static = false;\n      // rule3items = [{\n      //         id: 'Calix',\n      //         name: 'Calix'\n      //     },\n      //     {\n      //         id: 'ZyXEL',\n      //         name: 'ZyXEL'\n      //     },\n      // ];\n      this.RulesArray = [\n        // \t{\n        // \t'rule1': '',\n        // \t'rule2': '',\n        // \t'rule3': ''\n        // }\n      ];\n      this.rule3items = {};\n      this.dtOptions = {\n        pagingType: 'full_numbers',\n        pageLength: 50,\n        lengthChange: false,\n        serverSide: true,\n        processing: false,\n        dom: 'tipr',\n        columnDefs: [{\n          targets: [3, 4],\n          orderable: false\n        }, {\n          targets: [0],\n          orderable: true\n        }],\n        order: [],\n        drawCallback: settings => {\n          let total = settings._iRecordsDisplay;\n          let length = settings._iDisplayLength;\n          if (total <= length) {\n            $(settings.nTableWrapper).find('#devicegrp-table').addClass('disabled');\n          } else {\n            $(settings.nTableWrapper).find('#devicegrp-table').removeClass('disabled');\n          }\n        }\n      };\n      this.dtOptionsdis = {\n        pagingType: 'full_numbers',\n        pageLength: 2,\n        lengthChange: false,\n        serverSide: true,\n        processing: true,\n        dom: 'tipr',\n        columnDefs: [{\n          targets: [3, 4],\n          orderable: false\n        }, {\n          targets: [0],\n          orderable: true\n        }],\n        order: [],\n        drawCallback: settings => {\n          let total = settings._iRecordsDisplay;\n          let length = settings._iDisplayLength;\n          // if (total <= length) {\n          //   $(settings.nTableWrapper).find('#devicegrp-table').addClass('disabled');\n          // } else {\n          //   $(settings.nTableWrapper).find('#devicegrp-table').removeClass('disabled');\n          // }\n        }\n      };\n\n      this.dtOptionsstaticUndis = {\n        paging: false,\n        // pagingType: 'full_numbers',\n        // pageLength: 2,\n        lengthChange: false,\n        searching: false\n        // lengthChange: false,\n        // serverSide: true,\n        // processing: true,\n        // dom: 'tipr',\n        // columnDefs: [{\n        // \ttargets: [3, 4],\n        // \torderable: false\n        // },\n        // {\n        // \ttargets: [0],\n        // \torderable: true\n        // }\n        // ],\n        // order: [],\n        // drawCallback: (settings) => {\n        // \tlet total = settings._iRecordsDisplay;\n        // \tlet length = settings._iDisplayLength;\n        // }\n      };\n\n      this.dtOptionsstaticdis = {};\n      this.dtOptionsDeviceGroup = {\n        searching: false,\n        lengthChange: false\n      };\n      this.Rule_err = false;\n      this.DiscoveredTableData = [];\n      this.DeviceTypeArr = [{\n        \"_id\": \"data1\",\n        \"orgId\": \"string\",\n        \"modelName\": \"model_data1\",\n        \"manufacturer\": \"manufacturer_data1\",\n        \"productClass\": \"productclass_1\",\n        \"hardwareVersion\": \"hwdrwere_vers1\",\n        \"manufacturerOUI\": \"strinmanufacturerui1\",\n        \"softwareVersion\": \"sftwre1\"\n      }, {\n        \"_id\": \"data2\",\n        \"orgId\": \"string\",\n        \"modelName\": \"model_data2\",\n        \"manufacturer\": \"manufacturer_data2\",\n        \"productClass\": \"productclass_2\",\n        \"hardwareVersion\": \"hwdrwere_vers2\",\n        \"manufacturerOUI\": \"strinmanufacturerui2\",\n        \"softwareVersion\": \"sftwre2\"\n      }];\n      this.UnDiscoveredTableData_static = [];\n      this.DiscoveredTableData_static = [];\n      this.is_staticenable = false;\n      this.ipv4BasicExp = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\/([1-9]|[12]\\d|3[0-2])\\,*)+$/;\n      // tableOptions: DataTables.Settings = {\n      //   pagingType: 'full_numbers',\n      //   dom: 'tipr',\n      //   columnDefs: [\n      //     { targets: [1, 2, 3, 4], orderable: false },\n      //     { targets: [0], orderable: true }\n      //   ],\n      //   order: [0, 'asc'],\n      //   drawCallback: (settings) => {\n      //     let total = settings.aoData.length;\n      //     let length = settings._iDisplayLength;\n      //     if (total <= length) {\n      //       $(settings.nTableWrapper).find('#devicegrp-table').addClass('disabled');\n      //     }\n      //   }\n      // };\n      this.tableOptions = {\n        searching: false,\n        lengthChange: false\n      };\n      this.dtTrigger = new Subject();\n      this.isFilledRow = true;\n      this.isNameError = false;\n      this.btnDisabled = false;\n      this.hasWriteAccess = false;\n      this.hasScopeAccess = false;\n      this.pageAvailable = false;\n      this.editSystem = false;\n      this.secondindex = 0;\n      this.wanAccessTypes = [];\n      this.isRerender_disc_static = false;\n      this.isRerender_undisc_static = false;\n      this.static_undisc = false;\n      this.undiscoveredDtTrigger = new Subject();\n      this.isDtForStaticUnDiscoveredInitialized = false;\n      this.static_disc = false;\n      this.staticdiscoveredDtTrigger = new Subject();\n      this.isDtForStaticDiscoveredInitialized = false;\n      this.edit_key = [];\n      this.RuleAtleastOne = false;\n      this.rule_temp = [{\n        id: '',\n        name: ''\n      }, {\n        id: 'manufacturer',\n        name: 'Manufacturer'\n      }, {\n        id: 'modelName',\n        name: 'Model'\n      }, {\n        id: 'softwareVersion',\n        name: 'SW Version'\n      }, {\n        id: 'hardwareVersion',\n        name: 'HW Version'\n      }, {\n        id: 'serialNumber',\n        name: 'FSAN/Serial Number'\n      }, {\n        id: 'normalizedIpAddress',\n        name: 'WAN IP'\n      }, {\n        id: 'registrationId',\n        name: 'Registration ID'\n      }, {\n        id: 'wanAccessType',\n        name: 'WAN Access Type'\n      }, {\n        id: 'opMode',\n        name: 'Mode'\n      }];\n      this.isIpv4CIDR = function (subnet) {\n        return this.ipv4BasicExp.test(subnet);\n      };\n      this.orgId = this.ssoService.getOrgId();\n      // this.getDeviceCount();\n      this.frTable = this.translateService.fr;\n      this.esTable = this.translateService.es;\n    }\n    setTitle(url) {\n      if (this.router.url.includes(\"/cco-foundation/foundation-configuration/configuration-prerequisites/device-groups\")) {\n        this.titleService.setTitle(`${this.language['System Groups']} - ${this.language['Workflow Prerequisites']} - ${this.language['configuration']} - ${this.language['Deployment']} - ${this.language['Calix Cloud']}`);\n      } else if (this.router.url.includes(\"/support/netops-management/operations/devices-groups\")) {\n        this.titleService.setTitle(`${this.language['System Groups']} - ${this.language['Operations']} - ${this.language['NetOps']} - ${this.language['Support']} - ${this.language['Calix Cloud']}`);\n      } else if (this.router.url.includes(\"/cco/operations/cco-subscriber-operations/operations/devices-groups\")) {\n        this.titleService.setTitle(`${this.language['System Groups']} - ${this.language['Operations']} - ${this.language['Subscriber_Operations']} - ${this.language['Operations']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      } else if (this.router.url.includes(\"/cco/operations/configuration/system-groups\")) {\n        this.titleService.setTitle(`${this.language['System Groups']} - ${this.language['Configuration']} - ${this.language['Operations']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      } else if (this.router.url.includes(\"/cco/operations/configuration/devices-group/workflow\")) {\n        this.titleService.setTitle(`${this.language['System Groups']} - ${this.language['Configuration']} - ${this.language['Operations']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      } else if (this.router.url.includes('/support/netops-management/devices-groups')) {\n        this.titleService.setTitle(`${this.language['System Groups']} - ${this.language['Operations']} - ${this.language['NetOps']} - ${this.language['Support']} - ${this.language['Calix Cloud']}`);\n      } else if (this.router.url.includes('/cco-foundation/foundation-configuration/device-groups')) {\n        this.titleService.setTitle(`${this.language['System Groups']} - ${this.language['Workflow Prerequisites']} - ${this.language['configuration']} - ${this.language['Deployment']} - ${this.language['Calix Cloud']}`);\n      } else if (this.router.url.includes('/cco-foundation/foundation-configuration/device-groups')) {\n        this.titleService.setTitle(`${this.language['System Groups']} - ${this.language['Workflow Prerequisites']} - ${this.language['configuration']} - ${this.language['Deployment']} - ${this.language['Calix Cloud']}`);\n      }\n    }\n    ngOnInit() {\n      var _a, _b;\n      this.language = this.translateService.defualtLanguage;\n      let scopes = this.ssoService.getScopes();\n      if (!this.router.url.includes('cco-foundation') && !this.router.url.includes('/cco/operations/configuration')) {\n        if (environment.VALIDATE_SCOPE) {\n          let scopeFlagCheck = {};\n          scopes['cloud.rbac.csc.netops.operations.device_group'] = scopes['cloud.rbac.csc.netops.operations.device_group'] ? scopes['cloud.rbac.csc.netops.operations.device_group'] : [];\n          if (scopes['cloud.rbac.csc.netops.operations.device_group'].length) {\n            this.hasScopeAccess = true;\n          }\n          scopes['cloud.rbac.csc.netops.operations.workflow'] = scopes['cloud.rbac.csc.netops.operations.workflow'] ? scopes['cloud.rbac.csc.netops.operations.workflow'] : [];\n          scopes['cloud.rbac.csc.netops.operations.profiles'] = scopes['cloud.rbac.csc.netops.operations.profiles'] ? scopes['cloud.rbac.csc.netops.operations.profiles'] : [];\n          scopes['cloud.rbac.csc.netops.operations.sw_images'] = scopes['cloud.rbac.csc.netops.operations.sw_images'] ? scopes['cloud.rbac.csc.netops.operations.sw_images'] : [];\n          scopes['cloud.rbac.csc.netops.operations.config_files'] = scopes['cloud.rbac.csc.netops.operations.config_files'] ? scopes['cloud.rbac.csc.netops.operations.config_files'] : [];\n          scopes['cloud.rbac.csc.netops.operations.perf_testing'] = scopes['cloud.rbac.csc.netops.operations.perf_testing'] ? scopes['cloud.rbac.csc.netops.operations.perf_testing'] : [];\n          scopes['cloud.rbac.csc.netops.config.dial_plan'] = scopes['cloud.rbac.csc.netops.config.dial_plan'] ? scopes['cloud.rbac.csc.netops.config.dial_plan'] : [];\n          if (scopes && scopes['cloud.rbac.csc.netops.operations.device_group'] !== undefined && scopes['cloud.rbac.csc.netops.operations.device_group'].indexOf('read') !== -1) {\n            scopeFlagCheck.showDeviceGrps = true;\n          }\n          if (scopes && scopes['cloud.rbac.csc.netops.operations.sw_images'] !== undefined && scopes['cloud.rbac.csc.netops.operations.sw_images'].indexOf('read') !== -1) {\n            scopeFlagCheck.showSoftwareImage = true;\n          }\n          if (scopes && scopes['cloud.rbac.csc.netops.operations.workflow'] !== undefined && scopes['cloud.rbac.csc.netops.operations.workflow'].indexOf('read') !== -1) {\n            scopeFlagCheck.showWorkFlow = true;\n          }\n          if (scopes && scopes['cloud.rbac.csc.netops.operations.profiles'] !== undefined && scopes['cloud.rbac.csc.netops.operations.profiles'].indexOf('read') !== -1) {\n            scopeFlagCheck.showProfiles = true;\n          }\n          if (scopes && scopes['cloud.rbac.csc.netops.operations.config_files'] !== undefined && scopes['cloud.rbac.csc.netops.operations.config_files'].indexOf('read') !== -1) {\n            scopeFlagCheck.showConfigFiles = true;\n          }\n          if (scopes && scopes['cloud.rbac.csc.netops.config.dial_plan'] !== undefined && scopes['cloud.rbac.csc.netops.config.dial_plan'].indexOf('read') !== -1) {\n            scopeFlagCheck.showDialPlan = true;\n          }\n          if (scopes && scopes['cloud.rbac.csc.netops.operations.perf_testing'] !== undefined && scopes['cloud.rbac.csc.netops.operations.perf_testing'].indexOf('read') !== -1) {\n            scopeFlagCheck.showPerfTest = true;\n          }\n          if (scopeFlagCheck.showDeviceGrps) {} else if (scopeFlagCheck.showProfiles) {\n            this.router.navigate(['./support/netops-management/operations/profiles']);\n          } else if (scopeFlagCheck.showConfigFiles) {\n            this.router.navigate(['./support/netops-management/operations/configuration-files-list']);\n          } else if (scopeFlagCheck.showSoftwareImage) {\n            this.router.navigate(['./support/netops-management/operations/software-images-list']);\n          } else if (scopeFlagCheck.showWorkFlow) {\n            this.router.navigate(['./support/netops-management/operations/workflows']);\n          } else if (scopeFlagCheck.showPerfTest && this.ssoService.getCscType() !== 'DME') {\n            this.router.navigate(['./support/netops-management/operations/performance-testing']);\n          }\n          scopes['cloud.rbac.csc.netops.operations.device_group'] = scopes['cloud.rbac.csc.netops.operations.device_group'] ? scopes['cloud.rbac.csc.netops.operations.device_group'] : [];\n          if (scopes && scopes['cloud.rbac.csc.netops.operations.device_group'] && scopes['cloud.rbac.csc.netops.operations.device_group'].indexOf('write') !== -1) {\n            this.hasWriteAccess = true;\n          }\n        } else {\n          this.hasWriteAccess = true;\n          this.hasScopeAccess = true;\n        }\n      } else if (this.router.url.includes('cco/operations/configuration')) {\n        if (environment.VALIDATE_SCOPE) {\n          if ((_a = scopes === null || scopes === void 0 ? void 0 : scopes['cloud.rbac.coc.operations.configuration.systemgroups']) === null || _a === void 0 ? void 0 : _a.length) {\n            this.hasScopeAccess = true;\n          }\n          if (scopes && ((_b = scopes['cloud.rbac.coc.operations.configuration.systemgroups']) === null || _b === void 0 ? void 0 : _b.includes('write'))) {\n            this.hasWriteAccess = true;\n          }\n        } else {\n          this.hasWriteAccess = true;\n          this.hasScopeAccess = true;\n        }\n      } else {\n        if (environment.VALIDATE_SCOPE) {\n          scopes['cloud.rbac.foundation.configurations'] = scopes['cloud.rbac.foundation.configurations'] ? scopes['cloud.rbac.foundation.configurations'] : [];\n          if (scopes['cloud.rbac.foundation.configurations'].length) {\n            this.hasScopeAccess = true;\n          }\n          if (scopes && scopes['cloud.rbac.foundation.configurations'].includes('write')) {\n            this.hasWriteAccess = true;\n          }\n        } else {\n          this.hasWriteAccess = true;\n          this.hasScopeAccess = true;\n        }\n      }\n      if (!this.hasScopeAccess) {\n        this.ssoService.setPageAccess(false);\n        return;\n      }\n      let id = this.route.snapshot.paramMap.get(\"id\");\n      if (id) {\n        this.loading = true;\n        this.editSystem = true;\n        this.deviceGroupId = id;\n        this.getDeviceType(0);\n        //this.displayEditGroup(id);\n      } else {\n        this.onClickPlusSymbol(0);\n        // this.GetDevice_Type(-1);\n        this.GetabList();\n        // this.getList();\n      }\n\n      if (history.state.retainApproval) this.deleteDeviceGrp(history.state.deletedata);\n      //this.tableRender()\n      this.dataAvailable = false;\n      //this.RulesArray[0]=[]\n      //this.getDeviceGrpData();\n      this.formGrouping({});\n      this.setTitle(this.router.url);\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.setTitle(this.router.url);\n        if (this.tableCountsDeviceGrpInfo) {\n          const distempObj = {\n            _iDisplayStart: this.tableCountsDeviceGrpInfo.start,\n            _iDisplayLength: this.tableCountsDeviceGrpInfo.displayCount,\n            _iRecordsDisplay: this.tableCountsDeviceGrpInfo.displayed,\n            _iRecordsTotal: this.tableCountsDeviceGrpInfo.total,\n            oPreviousSearch: {\n              sSearch: this.tableCountsDeviceGrpInfo.searchText\n            }\n          };\n          this.changeTableStatusLanguageDeviceGrpInfo(distempObj);\n        }\n        if (this.tableCountsUnDic) {\n          const unDistempObj = {\n            _iDisplayStart: this.tableCountsUnDic.start,\n            _iDisplayLength: this.tableCountsUnDic.displayCount,\n            _iRecordsDisplay: this.tableCountsUnDic.displayed,\n            _iRecordsTotal: this.tableCountsUnDic.total,\n            oPreviousSearch: {\n              sSearch: this.tableCountsUnDic.searchText\n            }\n          };\n          this.changeTableStatusLanguageUnDisc(unDistempObj);\n        }\n        if (this.tableCountsDeviceGroup) {\n          const unDistempObj = {\n            _iDisplayStart: this.tableCountsDeviceGroup.start,\n            _iDisplayLength: this.tableCountsDeviceGroup.displayCount,\n            _iRecordsDisplay: this.tableCountsDeviceGroup.displayed,\n            _iRecordsTotal: this.tableCountsDeviceGroup.total,\n            oPreviousSearch: {\n              sSearch: this.tableCountsDeviceGroup.searchText\n            }\n          };\n          this.changeTableStatusLanguageDeviceGroup(unDistempObj);\n        }\n        if (this.tableStaticDisc) {\n          const staticDistempObj = {\n            _iDisplayStart: this.tableStaticDisc.start,\n            _iDisplayLength: this.tableStaticDisc.displayCount,\n            _iRecordsDisplay: this.tableStaticDisc.displayed,\n            _iRecordsTotal: this.tableStaticDisc.total,\n            oPreviousSearch: {\n              sSearch: this.tableStaticDisc.searchText\n            }\n          };\n          this.changeTableStatusLanguageStaticDisc(staticDistempObj);\n        }\n        ;\n        if (!this.static && this.Disc_count) this.redraw();\n        this.dynamic = [{\n          id: 'dynamic',\n          name: this.language['Dynamic']\n        }, {\n          id: 'static',\n          name: this.language['Static']\n        }];\n        // this.ErrorMessage = this.language['Error! All Rules must be complete and a minimum of one is required.'];\n        this.errMsg = this.language['Are you sure you want to delete Device Group'];\n      });\n      if (this.language) {\n        this.pageAvailable = true;\n      }\n      this.dynamic = [{\n        id: 'dynamic',\n        name: this.language['Dynamic']\n      }, {\n        id: 'static',\n        name: this.language['Static']\n      }];\n      if (this.router.url.includes('devices-groups-add') || this.router.url.includes('device-groups-add') || this.router.url.includes('system-groups/add')) {\n        this.loading = true;\n        this.isAddGroupForm = false;\n        this.isAddTable = true;\n        this.ishidebtn = false;\n        this.Is_Update = false;\n        this.RulesArray = [];\n        this.submitted = false;\n        this.Rule_err = false;\n        this.deletedata = \"\";\n        this.createDeviceGroup.reset();\n        this.DiscoveredTableData = [];\n        //  this.dtTrigger.next();\n        this.static = false;\n        this.Disc_count_static = false;\n        this.edit_key = [];\n        this.UnDisc_count_static = false;\n        this.Disc_count = false;\n        this.is_staticenable = false;\n        this.IsStatic = false;\n        this.DiscoveredTableData_static = [];\n        this.groupType = \"dynamic\";\n        this.createDeviceGroup.controls.type.setValue(\"dynamic\");\n        this.createDeviceGroup.controls.allowInheritance.setValue(true);\n      }\n      if (this.router.url.includes('devices-groups-workflow') || this.router.url.includes('device-groups-workflow') || this.router.url.includes('devices-group/workflow')) {\n        this.loading = true;\n        this.ishidebtn = false;\n        this.isAddTable = true;\n        this.isAddGroupForm = true;\n        this.workflowdetails = true;\n        this.systemGroupId = sessionStorage.getItem('workflowid');\n        this.groupName = sessionStorage.getItem('workflowName');\n        this.getWorkflows();\n      }\n    }\n    redraw() {\n      this.dtElement.dtInstance.then(dtInstance => {\n        dtInstance.draw();\n      });\n    }\n    formGrouping(input) {\n      this.createDeviceGroup = this.formBuilder.group({\n        name: [input.name || '', Validators.required],\n        description: [input.description || ''],\n        type: [input.type || ''],\n        allowInheritance: [input.allowInheritance || ''],\n        cpeFilter: [input.cpeFilter || '']\n      });\n      // this.createDeviceGroup.controls.cpeFilter=this.Rulemodel1\n    }\n\n    get f() {\n      return this.createDeviceGroup.controls;\n    }\n    getDeviceCount() {\n      this.allDeviceGrpSubscribe = this.service.getDeviceGoupCount(this.orgId).subscribe(res => {\n        this.DeviceCount = res.count;\n      }, err => {\n        this.pageErrorHandle(err);\n      });\n    }\n    getList() {\n      this.RulesArray = [];\n      setTimeout(() => {\n        this.showSuccess = false;\n        this.successMsg = \"\";\n      }, 5000);\n      if (this.deviceGroupId) {\n        this.ssoService.redirectByUrl(['/support/netops-management/operations/devices-groups', 'cco/operations/cco-system-operations/device-groups', 'cco-foundation/foundation-configuration/configuration-prerequisites/device-groups', '/cco/operations/cco-subscriber-operations/operations/devices-groups']);\n        //this.router.navigate(['/support/netops-management/operations/devices-groups']);\n        return;\n      }\n      this.GetDevice_Type(-1);\n      this.loading = true;\n      this.countSubscribe = this.service.getDeviceGoupCount(this.ssoService.getOrgId()).subscribe(json => {\n        let count = json.count;\n        this.listSubscribe = this.service.getDeviceGoupList(this.ssoService.getOrgId(), count).subscribe(data => {\n          this.DeviceTableData = data;\n          this.loading = false;\n        }, err => {\n          this.pageErrorHandle(err);\n        });\n      }, err => {\n        this.pageErrorHandle(err);\n      });\n    }\n    GetabList() {\n      this.RulesArray = [];\n      setTimeout(() => {\n        this.showSuccess = false;\n        this.successMsg = \"\";\n      }, 5000);\n      if (this.deviceGroupId) {\n        this.ssoService.redirectByUrl(['/support/netops-management/operations/devices-groups', 'cco/operations/cco-system-operations/device-groups', 'cco-foundation/foundation-configuration/configuration-prerequisites/device-groups', '/cco/operations/cco-subscriber-operations/operations/devices-groups']);\n        //this.router.navigate(['/support/netops-management/operations/devices-groups']);\n        return;\n      }\n      // this.GetDevice_Type(-1);\n      this.loading = true;\n      this.searchurl = `${environment.SUPPORT_URL}/netops-device/group?${this.orgId}`;\n      const that = this;\n      this.dtOptionsDeviceGroup = {\n        pagingType: \"full_numbers\",\n        pageLength: 20,\n        responsive: true,\n        serverSide: true,\n        processing: false,\n        searching: false,\n        lengthChange: false,\n        dom: 'tipr',\n        ajax: (dataTablesParameters, callback) => {\n          var _a, _b, _c, _d;\n          this.loading = true;\n          this.sortBy = dataTablesParameters.order[0].column;\n          this.sortType = dataTablesParameters.order[0].dir;\n          let apiCalls = [];\n          let searchUrl = `${environment.SUPPORT_URL}/netops-device/group?${this.ssoService.getOrg(this.orgId)}`;\n          if (String(this.searchText)) {\n            apiCalls.push(that.http.get(searchUrl + \"skip=\" + dataTablesParameters.start + \"&limit=\" + dataTablesParameters.length + \"&deviceId=\" + this.searchText + (((_b = (_a = this.router) === null || _a === void 0 ? void 0 : _a.url) === null || _b === void 0 ? void 0 : _b.includes('support/netops-management/')) ? \"&excludeOnBoot=true\" : \"&excludeOnBoot=false\")), this.service.getDeviceGoupsearchCount(this.orgId, this.searchText));\n          } else {\n            apiCalls.push(that.http.get(searchUrl + \"skip=\" + dataTablesParameters.start + \"&limit=\" + dataTablesParameters.length + (((_d = (_c = this.router) === null || _c === void 0 ? void 0 : _c.url) === null || _d === void 0 ? void 0 : _d.includes('support/netops-management/')) ? \"&excludeOnBoot=true\" : \"&excludeOnBoot=false\")), this.service.getDeviceGoupCount(this.orgId));\n          }\n          forkJoin(apiCalls).subscribe(([listres, countres]) => {\n            if (countres) {\n              this.DeviceCount = countres['count'];\n            }\n            if (listres) {\n              this.DeviceTableData = this.sortData(listres, that.sortBy, that.sortType);\n              this.loading = false;\n            }\n            callback({\n              recordsTotal: this.DeviceCount,\n              recordsFiltered: this.DeviceCount,\n              data: []\n            });\n          }, err => {\n            this.loading = false;\n          });\n        },\n        drawCallback: settings => {\n          this.changeTableStatusLanguageDeviceGroup(settings);\n          let total = settings._iRecordsDisplay; // for server side rendering\n          let length = settings._iDisplayLength;\n          if (total <= length) {\n            $(settings.nTableWrapper).find('#users-table_last').addClass('disabled');\n          } else {}\n        },\n        columns: [{\n          data: \"name\"\n        }, {\n          data: \"description\",\n          searchable: false\n        }, {\n          data: \"type\",\n          searchable: false\n        }]\n      };\n    }\n    sortData(data, by, type) {\n      let sorted = [];\n      if (by == 0) {\n        sorted = this.sortByColumn(data, type, 'name');\n      } else if (by == 1) {\n        sorted = this.sortByColumn(data, type, 'description');\n      } else if (by == 2) {\n        sorted = this.sortByColumn(data, type, 'type');\n      }\n      return sorted;\n    }\n    sortByColumn(data, type, column) {\n      data.sort((a, b) => {\n        var nameA = a[column] ? a[column].toUpperCase() : '';\n        var nameB = b[column] ? b[column].toUpperCase() : '';\n        if (type == 'asc') {\n          if (nameA < nameB) {\n            return -1;\n          }\n          if (nameA > nameB) {\n            return 1;\n          }\n        } else {\n          if (nameA > nameB) {\n            return -1;\n          }\n          if (nameA < nameB) {\n            return 1;\n          }\n        }\n        // names must be equal\n        return 0;\n      });\n      return data;\n    }\n    /*Need to implement server side datatable */\n    // redraw() {\n    //   this.dtElement.dtInstance.then((dtInstance: DataTables.Api) => {\n    //     dtInstance.draw();\n    //   });\n    // }\n    // redraw_dynamic_disc() {\n    //   this.dtdynamicdisc.dtInstance.then((dtInstance: DataTables.Api) => {\n    //     dtInstance.draw();\n    //   });\n    // }\n    redrawnew() {\n      this.dtElement.dtInstance.then(dtInstance => {\n        dtInstance.destroy();\n        this.GetabList();\n      });\n    }\n    deleteDeviceGrp(item) {\n      this.loading = true;\n      this.deletedata = item;\n      this.modalTitle = 'Delete Device Group';\n      this.modalname = this.deletedata.name;\n      this.modelType = this.deletedata.type;\n      this.workflowcount = this.deletedata.completedCount;\n      this.getGroupMemberCount(item);\n      $(\"html, body\").animate({\n        scrollTop: 0\n      }, \"slow\");\n      // this.showWarningMsg = true\n      // this.closeModal();\n      // this.modalRef = this.dialogService.open(this.deleteModal);\n      setTimeout(() => {\n        $('.workflowcountclass').off();\n        $('.workflowcountclass').on('click', () => this.workFlowMenbers());\n      }, 1000);\n      // $('#workflowcountid').off();\n      // $('#workflowcountid').on('click', () => this.workFlowMenbers())\n    }\n\n    getGroupMemberCount(item) {\n      this.loading = true;\n      this.deletedata = item;\n      this.groupMemberCount = this.service.getDeviceMemberCount(this.ssoService.getOrgId(), this.deletedata._id).subscribe(json => {\n        this.MemberCount = json.count;\n        this.modalInfo = this.language.deviceGroupWarrningMsg(this.modalname, this.MemberCount, this.workflowcount);\n        this.showWarningMsg = true;\n        this.loading = false;\n      }, err => {\n        this.pageErrorHandle(err);\n        this.isError = true;\n        this.loading = false;\n      });\n    }\n    confirmDeleteSecleted() {\n      // this.closeModal();\n      this.loading = true;\n      this.btnDisabled = true;\n      this.DeleteDeviceGrpSubscribe = this.service.DeleteDeviceGoupList(this.orgId, this.deletedata._id, this.forceDelete).subscribe(res => {\n        if (res) {\n          this.getDeviceCount();\n          this.rerender(1);\n          this.loading = false;\n          this.GetabList();\n          this.btnDisabled = false;\n          this.deletedata = \"\";\n        }\n      }, err => {\n        this.loading = false;\n        this.btnDisabled = false;\n        this.deletedata = \"\";\n        this.pageErrorHandle(err);\n        // this.commonOrgService.pageScrollTop();\n      }, () => {\n        this.btnDisabled = false;\n        this.deletedata = \"\";\n        this.showWarningMsg = false;\n        this.loading = false;\n      });\n      // this.getDeviceCount()\n      // this.GetabList()\n    }\n\n    closeModal() {\n      // this.deletedata = \"\";\n      this.showWarningMsg = false;\n      if (this.modalRef) {\n        this.modalRef.close();\n      }\n    }\n    // rerender(): void {\n    //     this.dtElement.dtInstance.then((dtInstance: DataTables.Api) => {\n    //         // Destroy the table first\n    //         dtInstance.destroy();\n    //         this.dtTrigger.next();\n    //     });\n    // }\n    setTableOptions(type) {\n      this.tableOptions = {\n        pagingType: 'full_numbers',\n        pageLength: 2,\n        //searching: false,\n        dom: 'tipr',\n        columnDefs: [{\n          targets: [1, 2, 3, 4],\n          orderable: false\n        }, {\n          targets: [0],\n          orderable: true\n        }],\n        order: [],\n        drawCallback: settings => {\n          let total = settings.aoData.length;\n          let length = settings._iDisplayLength;\n          if (total <= length) {\n            $(settings.nTableWrapper).find('#devicegrp-table').addClass('disabled');\n          }\n        }\n      };\n    }\n    changeType(type) {\n      this.isTypeFor = type.target.value;\n      if (type.target.value == 'static') {\n        this.IsStatic = true;\n        this.static = true;\n        this.Disc_count_static = false;\n        this.CallDiscoveredDevice();\n        this.dtOptionsstaticUndis = {\n          paging: false,\n          // pagingType: \"full_numbers\",\n          // pageLength: 2,\n          lengthChange: false,\n          searching: false\n        };\n        setTimeout(() => {\n          this.undiscoveredDtTrigger.next();\n        }, 5000);\n        this.dtOptionsstaticdis = {};\n        setTimeout(() => {\n          this.staticdiscoveredDtTrigger.next();\n        }, 500);\n      } else {\n        this.IsStatic = false;\n        this.static = false;\n        this.static_undisc = false;\n      }\n    }\n    Rule1change(index) {\n      if (this.RulesArray[index].rule1) {\n        return index;\n      }\n    }\n    getSelectedRules() {\n      let params = {\n        rule1: [],\n        rule2: [],\n        rule3: []\n      };\n      if (this.RulesArray.length) {\n        for (let i = 0; i < this.RulesArray.length; i++) {\n          params['rule1'].push(this.RulesArray[i].rule1);\n          params['rule2'].push(this.RulesArray[i].rule2);\n          params['rule3'].push(this.RulesArray[i].rule3);\n        }\n      }\n      return params;\n    }\n    Rule1ChangeVal(index, dynamic) {\n      this.Rule_err = false;\n      let validations = {\n        modelName: [\"manufacturer\"],\n        softwareVersion: [\"modelName\", \"manufacturer\"],\n        hardwareVersion: [\"modelName\", \"manufacturer\"],\n        wanAccessType: [\"modelName\"],\n        opMode: [\"manufacturer\"]\n      };\n      if (!this.RulesArray[index].rule1) {\n        this.RulesArray[index].rule2 = '';\n        //this.RulesArray[index].rule3 = '';\n        return;\n      }\n      if (index && this.RulesArray[index].rule1 === \"modelName\" && this.RulesArray[index + 1] && this.RulesArray[index + 1].rule1 && !dynamic) {\n        this.FilterDevice(index - 1);\n        return;\n      }\n      //CCL-23416\n      if (!validations[this.RulesArray[index].rule1]) {\n        this.RulesArray[index].rule2 = '';\n        this.RulesArray[index].rule3 = '';\n        return;\n      }\n      let params = this.getSelectedRules();\n      let rule1Params = params['rule1'];\n      this.rule2items = {\n        \"manufacturer\": [{\n          id: '',\n          name: ''\n        }, {\n          id: 'Equals',\n          name: 'Equals'\n        }, {\n          id: '$ne',\n          name: 'Not Equal'\n        }],\n        \"modelName\": [{\n          id: '',\n          name: ''\n        }, {\n          id: 'Equals',\n          name: 'Equals'\n        }, {\n          id: '$ne',\n          name: 'Not Equal'\n        }, {\n          id: '$in',\n          name: 'In'\n        }],\n        \"softwareVersion\": [{\n          id: '',\n          name: ''\n        }, {\n          id: 'Equals',\n          name: 'Equals'\n        }, {\n          id: '$ne',\n          name: 'Not Equal'\n        }, {\n          id: '$in',\n          name: 'In'\n        }],\n        \"hardwareVersion\": [{\n          id: '',\n          name: ''\n        }, {\n          id: 'Equals',\n          name: 'Equals'\n        }, {\n          id: '$ne',\n          name: 'Not Equal'\n        }, {\n          id: '$in',\n          name: 'In'\n        }],\n        \"serialNumber\": [{\n          id: '',\n          name: ''\n        }, {\n          id: '$regex',\n          name: 'WildCard'\n        }],\n        \"normalizedIpAddress\": [{\n          id: '',\n          name: ''\n        }, {\n          id: '$subnets',\n          name: 'In Subnet'\n        }],\n        \"registrationId\": [{\n          id: '',\n          name: ''\n        }, {\n          id: '$regex',\n          name: 'WildCard'\n        }],\n        \"wanAccessType\": [{\n          id: '',\n          name: ''\n        }, {\n          id: 'Equals',\n          name: 'Equals'\n        }],\n        \"opMode\": [{\n          id: 'Equals',\n          name: 'Equals'\n        }]\n      };\n      if (this.RulesArray && validations[this.RulesArray[index].rule1]) {\n        for (let i = 0; i < validations[this.RulesArray[index].rule1].length; i++) {\n          let element = validations[this.RulesArray[index].rule1][i];\n          if (rule1Params.indexOf(element) === -1) {\n            let temp = this.findObjectByKey(element);\n            this.Rule_err = true;\n            this.ErrorMessage = `${this.language[\"Error! missing cascade attributes:\"]} ${temp.name}`;\n            this.rule2items[this.RulesArray[index].rule1] = [];\n            this.RulesArray[index].rule2 = '';\n            this.RulesArray[index].rule3 = '';\n            break;\n          }\n        }\n        if (this.Rule_err) {\n          return;\n        }\n      }\n      this.indexlength = index;\n      if (this.RulesArray.length >= 1) {\n        if (this.RulesArray.filter(el => el.rule1 === \"modelName\").length == 0 == true) {\n          if (this.RulesArray[index].rule1 == 'softwareVersion' || this.RulesArray[index].rule1 == 'hardwareVersion' || this.RulesArray[index].rule1 == 'wanAccessType') {\n            this.Rule_err = true;\n            this.ErrorMessage = \"Error! missing cascade attributes:Model\";\n            this.rule2items[this.RulesArray[index].rule1] = [];\n            this.RulesArray[index].rule2 = '';\n            this.RulesArray[index].rule3 = '';\n          } else {\n            this.ErrorMessage = \"\";\n            //this.createDeviceGroup.setErrors({ 'invalid': true });\n            this.Rule_err = false;\n          }\n        } else if (this.RulesArray.filter(el => el.rule1 === \"modelName\").length == 0 == false) {\n          this.ErrorMessage = \"\";\n          // this.createDeviceGroup.setErrors({ 'invalid': true });\n          this.Rule_err = false;\n        }\n        if (this.RulesArray.filter(el => el.rule1 === \"manufacturer\").length == 0 == true) {\n          if (this.RulesArray[index].rule1 == 'modelName' || this.RulesArray[index].rule1 == 'opMode') {\n            this.Rule_err = true;\n            this.ErrorMessage = \"Error! missing cascade attributes:Manufacturer\";\n            this.rule2items[this.RulesArray[index].rule1] = [];\n            this.RulesArray[index].rule2 = '';\n            this.RulesArray[index].rule3 = '';\n          } else {\n            this.ErrorMessage = \"\";\n            //this.createDeviceGroup.setErrors({ 'invalid': true });\n            this.Rule_err = false;\n          }\n        }\n      }\n      if (this.RulesArray.filter(el => el.rule1 === \"manufacturer\").length == 1 && this.RulesArray.filter(el => el.rule1 === \"modelName\").length == 1) {\n        // if (this.RulesArray.filter(el => (el.rule1 === \"wanAccessType\")).length == 1) {\n        // \tthis.Rule_err = true;\n        // \tthis.ErrorMessage = \"Error! Wan Access Type Not Supported By Specified Model Name\";\n        // \tthis.rule2items[this.RulesArray[index].rule1] = [];\n        // \tthis.RulesArray[index].rule2 = '';\n        // \tthis.RulesArray[index].rule3 = '';\n        // }\n        if (rule1Params.indexOf(\"wanAccessType\") !== -1 && !this.supportWanAccessType()) {\n          this.Rule_err = true;\n          this.ErrorMessage = \"Error! Wan Access Type Not Supported By Specified Model Name\";\n          this.rule2items[this.RulesArray[index].rule1] = [];\n          this.RulesArray[index].rule2 = '';\n          this.RulesArray[index].rule3 = '';\n        }\n      }\n      if (this.RulesArray.length == 1) {\n        if (this.RulesArray.filter(el => el.rule1 === \"softwareVersion\").length == 1) {\n          this.Rule_err = true;\n          this.ErrorMessage = \"Error! missing cascade attributes:Model\";\n          this.rule2items[this.RulesArray[index].rule1] = [];\n          this.RulesArray[index].rule2 = '';\n          this.RulesArray[index].rule3 = '';\n        }\n        if (this.RulesArray.filter(el => el.rule1 === \"hardwareVersion\").length == 1) {\n          this.Rule_err = true;\n          this.ErrorMessage = \"Error! missing cascade attributes:Model\";\n          this.rule2items[this.RulesArray[index].rule1] = [];\n          this.RulesArray[index].rule2 = '';\n          this.RulesArray[index].rule3 = '';\n        }\n        if (this.RulesArray.filter(el => el.rule1 === \"wanAccessType\").length == 1) {\n          this.Rule_err = true;\n          this.ErrorMessage = \"Error! missing cascade attributes:Model\";\n          this.rule2items[this.RulesArray[index].rule1] = [];\n          this.RulesArray[index].rule2 = '';\n          this.RulesArray[index].rule3 = '';\n        }\n      }\n    }\n    emptyRulesRow(index) {\n      if (this.RulesArray[index].rule1 !== 'modelName') {\n        this.rule2items[this.RulesArray[index].rule1] = [];\n        this.RulesArray[index].rule2 = '';\n        this.RulesArray[index].rule3 = '';\n      }\n    }\n    dynamicTitle(title) {\n      if (title == 'serialNumber') {\n        this.tooltipTitle = \"Only alphanumeric characters and asterisk allowed,e.g:CXNK001CD*\";\n      } else if (title == 'normalizedIpAddress') {\n        this.tooltipTitle = \"CIDR address seperated by comma,e.g:192.168.3.0/24,192.168.4.0/24\";\n      } else if (title == 'registrationId') {\n        this.tooltipTitle = \"Only alphanumeric characters and asterisk allowed,e.g:210*\";\n      } else {\n        this.tooltipTitle = \"\";\n      }\n    }\n    Rule2change(index) {\n      if (this.RulesArray[index].rule2) {\n        return index;\n      }\n    }\n    Rule3select(index) {\n      if (this.RulesArray[index].rule3) {\n        if (this.RulesArray[index].rule2 == \"$in\") {\n          this.RulesArray[index].rule3 = [[this.rule3items[this.RulesArray[index].rule1][0].id][0]];\n        } else {\n          this.RulesArray[index].rule3 = [this.rule3items[this.RulesArray[index].rule1][0].id][0];\n        }\n      }\n    }\n    CheckValidationErr(index) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;\n      this.Rule_err = false;\n      let validations = {\n        modelName: [\"manufacturer\"],\n        softwareVersion: [\"modelName\", \"manufacturer\"],\n        hardwareVersion: [\"modelName\", \"manufacturer\"],\n        wanAccessType: [\"modelName\"],\n        opMode: [\"manufacturer\"]\n      };\n      let params = this.getSelectedRules();\n      let rule1Params = params['rule1'];\n      if (this.RulesArray && validations[this.RulesArray[index].rule1]) {\n        for (let i = 0; i < validations[this.RulesArray[index].rule1].length; i++) {\n          let element = validations[this.RulesArray[index].rule1][i];\n          if (rule1Params.indexOf(element) === -1) {\n            let temp = this.findObjectByKey(element);\n            this.Rule_err = true;\n            this.ErrorMessage = `Error! missing cascade attributes: ${temp.name}`;\n            this.rule2items[this.RulesArray[index].rule1] = [];\n            this.RulesArray[index].rule2 = '';\n            this.RulesArray[index].rule3 = '';\n            break;\n          }\n        }\n        if (this.Rule_err) {\n          return;\n        }\n      }\n      //check if special characters exist for fsan if so restrict\n      // if (this.RulesArray[index]?.rule1 == 'serialNumber') {\n      // \tif (this.RulesArray[index]?.rule3) {\n      // \t\tlet value = this.RulesArray[index]?.rule3;\n      // \t\tif (!value.match(/^[a-z0-9*]+$/i)) {\n      // \t\t\tthis.ErrorMessage = \"FSAN-Error! Rule FSAN contains invalid characters, only alphanumeric characters allowed.\";\n      // \t\t\tthis.Rule_err = true;\n      // \t\t}\n      // \t\treturn;\n      // \t} else {\n      // \t\tthis.ErrorMessage = \"\";\n      // \t\tthis.Rule_err = false;\n      // \t\treturn;\n      // \t}\n      // }\n      //check if special characters exist for fsan if so restrict\n      if (((_a = this.RulesArray[index]) === null || _a === void 0 ? void 0 : _a.rule1) == 'normalizedIpAddress') {\n        if (this.RulesArray[index].rule3 && this.checkSubnet(this.RulesArray[index].rule3)) {\n          this.ErrorMessage = \"\";\n          this.Rule_err = false;\n          return;\n        } else {\n          this.ErrorMessage = \"Error! Rule WANIP contains invalid characters, only IPv4 or IPv6 CIDR address allowed(e.g 192.168.1.0/24,2001:db8:1234::/48)\";\n          this.Rule_err = true;\n          return;\n        }\n      }\n      //check if Rule manufacturer is not valid.\n      if (((_b = this.RulesArray[index]) === null || _b === void 0 ? void 0 : _b.rule1) == 'manufacturer') {\n        if (((_c = this.RulesArray[index]) === null || _c === void 0 ? void 0 : _c.rule2) == \"\" || !((_d = this.RulesArray[index]) === null || _d === void 0 ? void 0 : _d.rule3)) {\n          this.ErrorMessage = \"Error! Rule manufacturer is not valid.\";\n          this.Rule_err = true;\n          return;\n        } else {\n          this.ErrorMessage = \"\";\n          this.Rule_err = false;\n          return;\n        }\n      }\n      if (((_e = this.RulesArray[index]) === null || _e === void 0 ? void 0 : _e.rule1) == 'modelName') {\n        if (((_f = this.RulesArray[index]) === null || _f === void 0 ? void 0 : _f.rule2) == \"\" || !((_g = this.RulesArray[index]) === null || _g === void 0 ? void 0 : _g.rule3) || ((_h = this.RulesArray[index]) === null || _h === void 0 ? void 0 : _h.rule2) == \"$in\" && !((_k = (_j = this.RulesArray[index]) === null || _j === void 0 ? void 0 : _j.rule3) === null || _k === void 0 ? void 0 : _k.length)) {\n          this.ErrorMessage = \"Error! Rule modelName is not valid.\";\n          // if (this.submitted) {\n          // \tthis.ErrorMessage = this.language['Error! All Rules must be complete and a minimum of one is required.'];\n          // }\n          this.Rule_err = true;\n          return;\n        } else {\n          this.ErrorMessage = \"\";\n          this.Rule_err = false;\n          return;\n        }\n      }\n      if (((_l = this.RulesArray[index]) === null || _l === void 0 ? void 0 : _l.rule1) == 'softwareVersion') {\n        if (((_m = this.RulesArray[index]) === null || _m === void 0 ? void 0 : _m.rule2) == \"\" || !((_o = this.RulesArray[index]) === null || _o === void 0 ? void 0 : _o.rule3) || ((_p = this.RulesArray[index]) === null || _p === void 0 ? void 0 : _p.rule2) == \"$in\" && !((_r = (_q = this.RulesArray[index]) === null || _q === void 0 ? void 0 : _q.rule3) === null || _r === void 0 ? void 0 : _r.length)) {\n          this.ErrorMessage = \"Error! Rule softwareVersion is not valid.\";\n          this.Rule_err = true;\n          // if (this.submitted) {\n          // \tthis.ErrorMessage = this.language['Error! All Rules must be complete and a minimum of one is required.'];\n          // }\n          return;\n        } else {\n          this.ErrorMessage = \"\";\n          this.Rule_err = false;\n          return;\n        }\n      }\n      if (((_s = this.RulesArray[index]) === null || _s === void 0 ? void 0 : _s.rule1) == 'hardwareVersion') {\n        if (((_t = this.RulesArray[index]) === null || _t === void 0 ? void 0 : _t.rule2) == \"\" || !((_u = this.RulesArray[index]) === null || _u === void 0 ? void 0 : _u.rule3) || ((_v = this.RulesArray[index]) === null || _v === void 0 ? void 0 : _v.rule2) == \"$in\" && !((_x = (_w = this.RulesArray[index]) === null || _w === void 0 ? void 0 : _w.rule3) === null || _x === void 0 ? void 0 : _x.length)) {\n          this.ErrorMessage = \"Error! Rule hardwareVersion is not valid.\";\n          // if (this.submitted) {\n          // \tthis.ErrorMessage = this.language['Error! All Rules must be complete and a minimum of one is required.'];\n          // }\n          this.Rule_err = true;\n          return;\n        } else {\n          this.ErrorMessage = \"\";\n          this.Rule_err = false;\n          return;\n        }\n      }\n      if (((_y = this.RulesArray[index]) === null || _y === void 0 ? void 0 : _y.rule1) == 'serialNumber') {\n        if (((_z = this.RulesArray[index]) === null || _z === void 0 ? void 0 : _z.rule2) == \"\" || !((_0 = this.RulesArray[index]) === null || _0 === void 0 ? void 0 : _0.rule3)) {\n          this.ErrorMessage = \"Error! Rule serialNumber is not valid.\";\n          this.Rule_err = true;\n          // if (this.submitted) {\n          // \tthis.ErrorMessage = this.language['Error! All Rules must be complete and a minimum of one is required.'];\n          // }\n          return;\n        } else if (((_1 = this.RulesArray[index]) === null || _1 === void 0 ? void 0 : _1.rule3) == \"\") {\n          this.ErrorMessage = \"Error! Rule FSAN contains invalid characters, only alphanumeric characters allowed.\";\n          this.Rule_err = true;\n          return;\n        } else if ((_2 = this.RulesArray[index]) === null || _2 === void 0 ? void 0 : _2.rule3) {\n          let value = (_3 = this.RulesArray[index]) === null || _3 === void 0 ? void 0 : _3.rule3;\n          if (!value.match(/^[a-z0-9*]+$/i)) {\n            this.ErrorMessage = \"FSAN-Error! Rule FSAN contains invalid characters, only alphanumeric characters allowed.\";\n            this.Rule_err = true;\n            return;\n          }\n        } else {\n          this.ErrorMessage = \"\";\n          this.Rule_err = false;\n          return;\n        }\n      }\n      if (((_4 = this.RulesArray[index]) === null || _4 === void 0 ? void 0 : _4.rule1) == 'registrationId') {\n        if (((_5 = this.RulesArray[index]) === null || _5 === void 0 ? void 0 : _5.rule2) == \"\") {\n          this.ErrorMessage = \"Error! Rule registrationId is not valid.\";\n          this.Rule_err = true;\n          return;\n        } else if ((_6 = this.RulesArray[index]) === null || _6 === void 0 ? void 0 : _6.rule3) {\n          let value = (_7 = this.RulesArray[index]) === null || _7 === void 0 ? void 0 : _7.rule3;\n          if (!value.match(/^[a-z0-9*]+$/i)) {\n            this.ErrorMessage = \"RegistrationId-Error! Rule RegistrationId contains invalid characters, only alphanumeric characters allowed.\";\n            this.Rule_err = true;\n            return;\n          }\n        } else {\n          this.ErrorMessage = \"\";\n          this.Rule_err = false;\n          return;\n        }\n      }\n    }\n    DropdownOrInput(index) {\n      if (this.RulesArray[index].rule1 == 'manufacturer' || this.RulesArray[index].rule1 == 'modelName' || this.RulesArray[index].rule1 == 'softwareVersion' || this.RulesArray[index].rule1 == 'hardwareVersion' || this.RulesArray[index].rule1 == 'opMode' || this.RulesArray[index].rule1 == 'wanAccessType') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    MultiOrSingle(index) {\n      this.secondindex = index;\n      if (this.RulesArray[index].rule2 == '$in') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    FilterDeviceType() {\n      this.Get_payload();\n      this.GetDevice_Type();\n    }\n    FilterDevice(index, rule2) {\n      // setTimeout(function () {\n      // \t$(\"#device-groups\").trigger(\"click\");\n      // }, 1000);\n      //document.getElementById(\"device-groups\").click();\n      //debugger\n      if (this.RulesArray[index] && this.RulesArray[index].rule3) {\n        // if (rule2) {\n        // \tthis.RulesArray[index].rule3 = this.rule3items[this.RulesArray[index].rule1] ? (this.rule3items[this.RulesArray[index].rule1][0] ? this.rule3items[this.RulesArray[index].rule1][0].id : '') : ''\n        // }\n      } else {\n        this.RulesArray[index].rule3 = this.rule3items[this.RulesArray[index].rule1] ? this.rule3items[this.RulesArray[index].rule1][0] ? this.rule3items[this.RulesArray[index].rule1][0].id : '' : '';\n      }\n      let skipApisForTypes = [\"serialNumber\", \"normalizedIpAddress\", \"registrationId\", \"wanAccessType\", \"opMode\"];\n      if (skipApisForTypes.indexOf(this.RulesArray[index].rule1) === -1) {\n        if (this.RulesArray.length > 1 && index) {\n          if (skipApisForTypes.indexOf(this.RulesArray[index - 1].rule1) === -1) {\n            if (!this.RulesArray[index - 1].rule3) {\n              this.RulesArray[index]['rule3items'] = [];\n              return;\n            }\n          }\n        }\n        setTimeout(() => {\n          if (this.getParamsNew(index)) {\n            //this.Get_payload();\n            this.GetDevice_Type(index);\n            //this.getDiscoveredDeviceCount();\n          }\n        }, 500);\n      } else {\n        if (this.RulesArray[index].rule3) {\n          this.getDiscoveredDeviceCount();\n        }\n      }\n    }\n    CallDiscoveredDevice() {\n      if (this.static) {\n        this.RulesArray = [];\n        this.Rule_err = false;\n        this.RuleAtleastOne = false;\n        this.ErrorMessage = \"\";\n        if (this.deviceGroupId) {\n          this.DeviceDiscoveredStatic();\n        }\n      } else if (this.RulesArray.length > 0 && this.RulesArray[0]['rule1'] && (this.RulesArray[0]['rule2'] !== '$regex' && this.RulesArray[0]['rule3'] || this.RulesArray[0]['rule2'] == '$regex')) {\n        this.Rule_err = false;\n        this.RuleAtleastOne = false;\n        this.ErrorMessage = \"\";\n        this.getDiscoveredDeviceCount();\n      } else {\n        this.Rule_err = true;\n        this.RuleAtleastOne = true;\n        this.ErrorMessage = 'Error! All Rules must be complete and a minimum of one is required.';\n      }\n    }\n    CheckAPIvalisempty() {\n      var checkarr = [];\n      for (var i = 0; i < this.RulesArray.length; i++) {\n        if (this.RulesArray[i][\"rule3\"] != '') {\n          checkarr.push(1);\n        }\n      }\n      if (checkarr.length > 0) {\n        return true;\n      }\n    }\n    Get_payload() {\n      this.json_payload = {\n        \"orgId\": this.orgId\n      };\n      // this.CheckAPIvalisempty() == true;\n      if (this.RulesArray.length || this.edit_key.length >= 1) {\n        let manu_payload_arr = [];\n        let model_payload_arr = [];\n        let sftwr_payload_arr = [];\n        let hrdwr_payload_arr = [];\n        let fsanserial_payload_arr = [];\n        let ipaddr_payload_arr = [];\n        let regid_payload_arr = [];\n        let mode_payload_arr = [];\n        for (var i = 0; i < this.RulesArray.length; i++) {\n          if (this.RulesArray[i][\"rule1\"] == 'manufacturer') {\n            var key = this.RulesArray[i]['rule1'];\n            let req = {\n              \"ruletype\": this.RulesArray[i]['rule2']\n            };\n            req[key] = this.RulesArray[i]['rule3'];\n            if (key == 'manufacturer') {\n              manu_payload_arr.push(req);\n            }\n            // if (key == 'modelName') {\n            // \tmodel_payload_arr.push(req);\n            // }\n            // if (key == 'softwareVersion') {\n            // \tsftwr_payload_arr.push(req);\n            // }\n            // if (key == 'hardwareVersion') {\n            // \thrdwr_payload_arr.push(req);\n            // }\n            // if (key == 'serialNumber') {\n            // \tfsanserial_payload_arr.push(req);\n            // }\n            // if (key == 'normalizedIpAddress') {\n            // \tipaddr_payload_arr.push(req);\n            // }\n            // if (key == 'registrationId') {\n            // \tregid_payload_arr.push(req);\n            // }\n            // if (key == 'mode_payload_arr') {\n            // \tmode_payload_arr.push(req);\n            // }\n          }\n\n          if (this.RulesArray[i][\"rule1\"] == 'modelName') {\n            var key = this.RulesArray[i]['rule1'];\n            let req = {\n              \"ruletype\": this.RulesArray[i]['rule2']\n            };\n            req[key] = this.RulesArray[i]['rule3'];\n            if (key == 'manufacturer') {\n              manu_payload_arr.push(req);\n            }\n            if (key == 'modelName') {\n              model_payload_arr.push(req);\n            }\n            if (key == 'softwareVersion') {\n              sftwr_payload_arr.push(req);\n            }\n            if (key == 'hardwareVersion') {\n              hrdwr_payload_arr.push(req);\n            }\n            if (key == 'serialNumber') {\n              fsanserial_payload_arr.push(req);\n            }\n            if (key == 'normalizedIpAddress') {\n              ipaddr_payload_arr.push(req);\n            }\n            if (key == 'registrationId') {\n              regid_payload_arr.push(req);\n            }\n            if (key == 'mode_payload_arr') {\n              mode_payload_arr.push(req);\n            }\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'softwareVersion') {\n            var key = this.RulesArray[i]['rule1'];\n            let req = {\n              \"ruletype\": this.RulesArray[i]['rule2']\n            };\n            req[key] = this.RulesArray[i]['rule3'];\n            if (key == 'manufacturer') {\n              manu_payload_arr.push(req);\n            }\n            if (key == 'modelName') {\n              model_payload_arr.push(req);\n            }\n            if (key == 'softwareVersion') {\n              sftwr_payload_arr.push(req);\n            }\n            if (key == 'hardwareVersion') {\n              hrdwr_payload_arr.push(req);\n            }\n            if (key == 'serialNumber') {\n              fsanserial_payload_arr.push(req);\n            }\n            if (key == 'normalizedIpAddress') {\n              ipaddr_payload_arr.push(req);\n            }\n            if (key == 'registrationId') {\n              regid_payload_arr.push(req);\n            }\n            if (key == 'mode_payload_arr') {\n              mode_payload_arr.push(req);\n            }\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'hardwareVersion') {\n            var key = this.RulesArray[i]['rule1'];\n            let req = {\n              \"ruletype\": this.RulesArray[i]['rule2']\n            };\n            req[key] = this.RulesArray[i]['rule3'];\n            if (key == 'manufacturer') {\n              manu_payload_arr.push(req);\n            }\n            if (key == 'modelName') {\n              model_payload_arr.push(req);\n            }\n            if (key == 'softwareVersion') {\n              sftwr_payload_arr.push(req);\n            }\n            if (key == 'hardwareVersion') {\n              hrdwr_payload_arr.push(req);\n            }\n            if (key == 'serialNumber') {\n              fsanserial_payload_arr.push(req);\n            }\n            if (key == 'normalizedIpAddress') {\n              ipaddr_payload_arr.push(req);\n            }\n            if (key == 'registrationId') {\n              regid_payload_arr.push(req);\n            }\n            if (key == 'mode_payload_arr') {\n              mode_payload_arr.push(req);\n            }\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'serialNumber') {\n            var key = this.RulesArray[i]['rule1'];\n            let req = {\n              \"ruletype\": this.RulesArray[i]['rule2']\n            };\n            req[key] = this.RulesArray[i]['rule3'];\n            if (key == 'manufacturer') {\n              manu_payload_arr.push(req);\n            }\n            if (key == 'modelName') {\n              model_payload_arr.push(req);\n            }\n            if (key == 'softwareVersion') {\n              sftwr_payload_arr.push(req);\n            }\n            if (key == 'hardwareVersion') {\n              hrdwr_payload_arr.push(req);\n            }\n            if (key == 'serialNumber') {\n              fsanserial_payload_arr.push(req);\n            }\n            if (key == 'normalizedIpAddress') {\n              ipaddr_payload_arr.push(req);\n            }\n            if (key == 'registrationId') {\n              regid_payload_arr.push(req);\n            }\n            if (key == 'mode_payload_arr') {\n              mode_payload_arr.push(req);\n            }\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'normalizedIpAddress') {\n            var key = this.RulesArray[i]['rule1'];\n            let req = {\n              \"ruletype\": this.RulesArray[i]['rule2']\n            };\n            req[key] = this.RulesArray[i]['rule3'];\n            if (key == 'manufacturer') {\n              manu_payload_arr.push(req);\n            }\n            if (key == 'modelName') {\n              model_payload_arr.push(req);\n            }\n            if (key == 'softwareVersion') {\n              sftwr_payload_arr.push(req);\n            }\n            if (key == 'hardwareVersion') {\n              hrdwr_payload_arr.push(req);\n            }\n            if (key == 'serialNumber') {\n              fsanserial_payload_arr.push(req);\n            }\n            if (key == 'normalizedIpAddress') {\n              ipaddr_payload_arr.push(req);\n            }\n            if (key == 'registrationId') {\n              regid_payload_arr.push(req);\n            }\n            if (key == 'mode_payload_arr') {\n              mode_payload_arr.push(req);\n            }\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'registrationId') {\n            var key = this.RulesArray[i]['rule1'];\n            let req = {\n              \"ruletype\": this.RulesArray[i]['rule2']\n            };\n            req[key] = this.RulesArray[i]['rule3'];\n            if (key == 'manufacturer') {\n              manu_payload_arr.push(req);\n            }\n            if (key == 'modelName') {\n              model_payload_arr.push(req);\n            }\n            if (key == 'softwareVersion') {\n              sftwr_payload_arr.push(req);\n            }\n            if (key == 'hardwareVersion') {\n              hrdwr_payload_arr.push(req);\n            }\n            if (key == 'serialNumber') {\n              fsanserial_payload_arr.push(req);\n            }\n            if (key == 'normalizedIpAddress') {\n              ipaddr_payload_arr.push(req);\n            }\n            if (key == 'registrationId') {\n              regid_payload_arr.push(req);\n            }\n            if (key == 'mode_payload_arr') {\n              mode_payload_arr.push(req);\n            }\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'opMode') {\n            var key = this.RulesArray[i]['rule1'];\n            let req = {\n              \"ruletype\": this.RulesArray[i]['rule2']\n            };\n            req[key] = this.RulesArray[i]['rule3'];\n            if (key == 'manufacturer') {\n              manu_payload_arr.push(req);\n            }\n            if (key == 'modelName') {\n              model_payload_arr.push(req);\n            }\n            if (key == 'softwareVersion') {\n              sftwr_payload_arr.push(req);\n            }\n            if (key == 'hardwareVersion') {\n              hrdwr_payload_arr.push(req);\n            }\n            if (key == 'serialNumber') {\n              fsanserial_payload_arr.push(req);\n            }\n            if (key == 'normalizedIpAddress') {\n              ipaddr_payload_arr.push(req);\n            }\n            if (key == 'registrationId') {\n              regid_payload_arr.push(req);\n            }\n            if (key == 'mode_payload_arr') {\n              mode_payload_arr.push(req);\n            }\n          }\n        }\n        if (manu_payload_arr.length > 0) {\n          //manufacture\n          if (manu_payload_arr[0]['ruletype'] == \"Equals\") {\n            this.json_payload['manufacturer'] = manu_payload_arr[0]['manufacturer'];\n          }\n          if (manu_payload_arr[0]['ruletype'] == \"$ne\") {\n            this.json_payload['manufacturer'] = {\n              \"$ne\": manu_payload_arr[0]['manufacturer']\n            };\n          }\n        }\n        //modelname\n        if (model_payload_arr.length > 0) {\n          if (model_payload_arr[0]['ruletype'] == \"Equals\") {\n            if (model_payload_arr[0]['modelName']) {\n              this.json_payload['modelName'] = model_payload_arr[0]['modelName'].toString();\n            }\n          }\n          if (model_payload_arr[0]['ruletype'] == \"$ne\") {\n            if (model_payload_arr[0]['modelName']) {\n              this.json_payload['modelName'] = {\n                \"$ne\": model_payload_arr[0]['modelName'].toString()\n              };\n            }\n          }\n          if (model_payload_arr[0]['ruletype'] == \"$in\") {\n            if (Array.isArray(model_payload_arr[0]['modelName'])) {\n              this.json_payload['modelName'] = {\n                \"$in\": model_payload_arr[0]['modelName']\n              };\n            } else {\n              this.json_payload['modelName'] = {\n                \"$in\": [model_payload_arr[0]['modelName']]\n              };\n            }\n          }\n        }\n        //Software ver\n        if (sftwr_payload_arr.length > 0) {\n          if (sftwr_payload_arr[0]['ruletype'] == \"Equals\") {\n            if (sftwr_payload_arr[0]['softwareVersion']) {\n              this.json_payload['softwareVersion'] = sftwr_payload_arr[0]['softwareVersion'].toString();\n            }\n          }\n          if (sftwr_payload_arr[0]['ruletype'] == \"$ne\") {\n            if (sftwr_payload_arr[0]['softwareVersion']) {\n              this.json_payload['softwareVersion'] = {\n                \"$ne\": sftwr_payload_arr[0]['softwareVersion'].toString()\n              };\n            }\n          }\n          if (sftwr_payload_arr[0]['ruletype'] == \"$in\") {\n            if (Array.isArray(sftwr_payload_arr[0]['softwareVersion'])) {\n              this.json_payload['softwareVersion'] = {\n                \"$in\": sftwr_payload_arr[0]['softwareVersion']\n              };\n            } else {\n              this.json_payload['softwareVersion'] = {\n                \"$in\": [sftwr_payload_arr[0]['softwareVersion']]\n              };\n            }\n          }\n        }\n        //hardware version\n        if (hrdwr_payload_arr.length > 0) {\n          if (hrdwr_payload_arr[0]['ruletype'] == \"Equals\") {\n            if (hrdwr_payload_arr[0]['hardwareVersion']) {\n              this.json_payload['hardwareVersion'] = hrdwr_payload_arr[0]['hardwareVersion'].toString();\n            }\n          }\n          if (hrdwr_payload_arr[0]['ruletype'] == \"$ne\") {\n            if (hrdwr_payload_arr[0]['hardwareVersion']) {\n              this.json_payload['hardwareVersion'] = {\n                \"$ne\": hrdwr_payload_arr[0]['hardwareVersion'].toString()\n              };\n            }\n          }\n          if (hrdwr_payload_arr[0]['ruletype'] == \"$in\") {\n            if (Array.isArray(hrdwr_payload_arr[0]['hardwareVersion'])) {\n              this.json_payload['hardwareVersion'] = {\n                \"$in\": hrdwr_payload_arr[0]['hardwareVersion']\n              };\n            } else {\n              this.json_payload['hardwareVersion'] = {\n                \"$in\": [hrdwr_payload_arr[0]['hardwareVersion']]\n              };\n            }\n          }\n        }\n        //fsan serial\"\n        if (fsanserial_payload_arr.length > 0) {\n          if (fsanserial_payload_arr[0]['ruletype'] == \"$regex\") {\n            let value = fsanserial_payload_arr[0]['serialNumber'] ? fsanserial_payload_arr[0]['serialNumber'] : \"\";\n            value = value.replace(/\\*/g, '.*?');\n            value = \"^\" + value + \"$\";\n            // fsanserial_payload_arr[0]['serialNumber'] = fsanserial_payload_arr[0]['serialNumber'].replace(/\\*/g, '.*?');\n            // fsanserial_payload_arr[0]['serialNumber'] = \"^\" + fsanserial_payload_arr[0]['serialNumber'] + \"$\";\n            this.json_payload['serialNumber'] = {\n              \"$regex\": value\n            };\n          }\n        }\n        //wan ip\n        if (ipaddr_payload_arr.length > 0) {\n          if (ipaddr_payload_arr[0]['ruletype'] == \"$subnets\" || ipaddr_payload_arr[0]['ruletype'] == \"Equals\") {\n            this.json_payload['normalizedIpAddress'] = ipaddr_payload_arr[0]['normalizedIpAddress'];\n            // let split=ipaddr_payload_arr[0]['normalizedIpAddress'].split(\"/\")[0]\n            // let arr=split.split(\".\")\n            // let ip=split.split(\".\")\n            // let string1=ip[0]+'.'+ip[1]+'.'+ip[2]+'.'+'000'\n            // let string2=ip[0]+'.'+ip[1]+'.'+ip[2]+'.'+'255'\n            // let jsonpayload={\"$gte\":string1,\"$lte\":string2}\n            // this.json_payload['normalizedIpAddress']={\"$gte\":string1,\"$lte\":string2};\n          }\n        }\n        //registration id\n        if (regid_payload_arr.length > 0) {\n          if (regid_payload_arr[0]['ruletype'] == \"$regex\") {\n            let value = regid_payload_arr[0]['registrationId'] ? regid_payload_arr[0]['registrationId'] : '';\n            value = value.replace(/\\*/g, '.*?');\n            value = \"^\" + value + \"$\";\n            // regid_payload_arr[0]['registrationId'] = regid_payload_arr[0]['registrationId'].replace(/\\*/g, '.*?');\n            // regid_payload_arr[0]['registrationId'] = \"^\" + regid_payload_arr[0]['registrationId'] + \"$\";\n            this.json_payload['registrationId'] = {\n              \"$regex\": value\n            };\n          }\n        }\n        //opmode\n        if (mode_payload_arr.length > 0) {\n          if (mode_payload_arr[0]['ruletype'] == \"Equals\") {\n            this.json_payload['opMode'] = mode_payload_arr[0]['opMode'];\n          }\n        }\n      }\n      let submit_payload = {};\n      if (this.submitted == true) {\n        if (this.Rule_err) {\n          return;\n        }\n        this.Rule_err = false;\n        let manu_payload_arr = [];\n        let model_payload_arr = [];\n        let sftwr_payload_arr = [];\n        let hrdwr_payload_arr = [];\n        let fsanserial_payload_arr = [];\n        let ipaddr_payload_arr = [];\n        let regid_payload_arr = [];\n        let mode_payload_arr = [];\n        let wan_access_type_payload_arr = [];\n        for (var i = 0; i < this.RulesArray.length; i++) {\n          this.CheckValidationErr(i);\n          if (this.Rule_err) {\n            //this.submitted = false;\n            return;\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'manufacturer') {\n            manu_payload_arr.push({\n              \"manufacturer\": this.RulesArray[i]['rule3'],\n              \"ruletype\": this.RulesArray[i]['rule2']\n            });\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'modelName') {\n            model_payload_arr.push({\n              \"modelName\": this.RulesArray[i]['rule3'],\n              \"ruletype\": this.RulesArray[i]['rule2']\n            });\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'softwareVersion') {\n            sftwr_payload_arr.push({\n              \"softwareVersion\": this.RulesArray[i]['rule3'],\n              \"ruletype\": this.RulesArray[i]['rule2']\n            });\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'hardwareVersion') {\n            hrdwr_payload_arr.push({\n              \"hardwareVersion\": this.RulesArray[i]['rule3'],\n              \"ruletype\": this.RulesArray[i]['rule2']\n            });\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'serialNumber') {\n            fsanserial_payload_arr.push({\n              \"serialNumber\": this.RulesArray[i]['rule3'],\n              \"ruletype\": this.RulesArray[i]['rule2']\n            });\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'normalizedIpAddress') {\n            let value = this.RulesArray[i][\"rule3\"];\n            if (!this.checkSubnet(value)) {\n              //Session.set(RULE_KEY_ERROR, Utils.getLabel(\"ruleWANIPContainsInvalidCharactersForIPv4OrIpv6\"));\n              return;\n            }\n            let ranges = this.toIpRange(value);\n            let value_ = {};\n            let rule;\n            if (ranges.length > 1) {\n              ranges = ranges.map(range => {\n                return {\n                  \"normalizedIpAddress\": range\n                };\n              });\n              //rule[\"$or\"] = ranges;\n              ipaddr_payload_arr.push({\n                //\"$or\": ranges,\n                \"normalizedIpAddress\": ranges,\n                \"ruletype\": this.RulesArray[i]['rule2'],\n                \"multiple\": true\n              });\n            } else {\n              //rule[\"normalizedIpAddress\"] = ranges[0];\n              ipaddr_payload_arr.push({\n                \"normalizedIpAddress\": ranges[0],\n                \"ruletype\": this.RulesArray[i]['rule2']\n              });\n            }\n            // ipaddr_payload_arr.push({\n            // \t\"normalizedIpAddress\": this.RulesArray[i]['rule3'],\n            // \t\"ruletype\": this.RulesArray[i]['rule2']\n            // });\n          }\n\n          if (this.RulesArray[i][\"rule1\"] == 'registrationId') {\n            if (this.RulesArray[i]['rule3']) {\n              regid_payload_arr.push({\n                \"registrationId\": this.RulesArray[i]['rule3'],\n                \"ruletype\": this.RulesArray[i]['rule2']\n              });\n            } else {\n              regid_payload_arr.push({\n                \"registrationId\": \"\",\n                \"ruletype\": this.RulesArray[i]['rule2']\n              });\n            }\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'opMode') {\n            mode_payload_arr.push({\n              \"opMode\": this.RulesArray[i]['rule3'],\n              \"ruletype\": this.RulesArray[i]['rule2']\n            });\n          }\n          if (this.RulesArray[i][\"rule1\"] == 'wanAccessType') {\n            wan_access_type_payload_arr.push({\n              \"wanAccessType\": this.RulesArray[i]['rule3'],\n              \"ruletype\": this.RulesArray[i]['rule2']\n            });\n          }\n        }\n        if (manu_payload_arr.length > 0) {\n          //manufacture\n          if (manu_payload_arr[0]['ruletype'] == \"Equals\") {\n            submit_payload['manufacturer'] = manu_payload_arr[0]['manufacturer'];\n          }\n          if (manu_payload_arr[0]['ruletype'] == \"$ne\") {\n            submit_payload['manufacturer'] = {\n              \"$ne\": manu_payload_arr[0]['manufacturer']\n            };\n          }\n        }\n        //modelname\n        if (model_payload_arr.length > 0) {\n          if (model_payload_arr[0]['ruletype'] == \"Equals\") {\n            submit_payload['modelName'] = model_payload_arr[0]['modelName'].toString();\n          }\n          if (model_payload_arr[0]['ruletype'] == \"$ne\") {\n            submit_payload['modelName'] = {\n              \"$ne\": model_payload_arr[0]['modelName'].toString()\n            };\n          }\n          if (model_payload_arr[0]['ruletype'] == \"$in\") {\n            if (Array.isArray(model_payload_arr[0]['modelName'])) {\n              submit_payload['modelName'] = {\n                \"$in\": model_payload_arr[0]['modelName']\n              };\n            } else {\n              submit_payload['modelName'] = {\n                \"$in\": [model_payload_arr[0]['modelName']]\n              };\n            }\n          }\n        }\n        //Software ver\n        if (sftwr_payload_arr.length > 0) {\n          if (sftwr_payload_arr[0]['ruletype'] == \"Equals\") {\n            submit_payload['softwareVersion'] = sftwr_payload_arr[0]['softwareVersion'].toString();\n          }\n          if (sftwr_payload_arr[0]['ruletype'] == \"$ne\") {\n            submit_payload['softwareVersion'] = {\n              \"$ne\": sftwr_payload_arr[0]['softwareVersion'].toString()\n            };\n          }\n          if (sftwr_payload_arr[0]['ruletype'] == \"$in\") {\n            if (Array.isArray(sftwr_payload_arr[0]['softwareVersion'])) {\n              submit_payload['softwareVersion'] = {\n                \"$in\": sftwr_payload_arr[0]['softwareVersion']\n              };\n            } else {\n              submit_payload['softwareVersion'] = {\n                \"$in\": [sftwr_payload_arr[0]['softwareVersion']]\n              };\n            }\n          }\n        }\n        //hardware version\n        if (hrdwr_payload_arr.length > 0) {\n          if (hrdwr_payload_arr[0]['ruletype'] == \"Equals\") {\n            submit_payload['hardwareVersion'] = hrdwr_payload_arr[0]['hardwareVersion'].toString();\n          }\n          if (hrdwr_payload_arr[0]['ruletype'] == \"$ne\") {\n            submit_payload['hardwareVersion'] = {\n              \"$ne\": hrdwr_payload_arr[0]['hardwareVersion'].toString()\n            };\n          }\n          if (hrdwr_payload_arr[0]['ruletype'] == \"$in\") {\n            if (Array.isArray(hrdwr_payload_arr[0]['hardwareVersion'])) {\n              submit_payload['hardwareVersion'] = {\n                \"$in\": hrdwr_payload_arr[0]['hardwareVersion']\n              };\n            } else {\n              submit_payload['hardwareVersion'] = {\n                \"$in\": [hrdwr_payload_arr[0]['hardwareVersion']]\n              };\n            }\n          }\n        }\n        //fsan serial\"\n        if (fsanserial_payload_arr.length > 0) {\n          if (fsanserial_payload_arr[0]['ruletype'] == \"$regex\") {\n            let value = fsanserial_payload_arr[0]['serialNumber'] ? fsanserial_payload_arr[0]['serialNumber'] : '';\n            value = value.replace(/\\*/g, '.*?');\n            value = \"^\" + value + \"$\";\n            submit_payload['serialNumber'] = {\n              \"$regex\": value\n            };\n          }\n        }\n        //wan ip\n        if (ipaddr_payload_arr.length > 0) {\n          if (ipaddr_payload_arr[0]['ruletype'] == \"$subnets\" || ipaddr_payload_arr[0]['ruletype'] == \"Equals\") {\n            if (ipaddr_payload_arr[0]['multiple']) {\n              submit_payload['$or'] = ipaddr_payload_arr[0]['normalizedIpAddress'];\n            } else {\n              submit_payload['normalizedIpAddress'] = ipaddr_payload_arr[0]['normalizedIpAddress'];\n            }\n            // let split=ipaddr_payload_arr[0]['normalizedIpAddress'].split(\"/\")[0]\n            // let arr=split.split(\".\")\n            // let ip=split.split(\".\")\n            // let string1=ip[0]+'.'+ip[1]+'.'+ip[2]+'.'+'000'\n            // let string2=ip[0]+'.'+ip[1]+'.'+ip[2]+'.'+'255'\n            // let jsonpayload={\"$gte\":string1,\"$lte\":string2}\n            // submit_payload['normalizedIpAddress']={\"$gte\":string1,\"$lte\":string2};\n          }\n        }\n        //registration id\n        if (regid_payload_arr.length > 0) {\n          let value = regid_payload_arr[0]['registrationId'] ? regid_payload_arr[0]['registrationId'] : \"\";\n          value = value.replace(/\\*/g, '.*?');\n          value = \"^\" + value + \"$\";\n          if (regid_payload_arr[0]['ruletype'] == \"$regex\") {\n            submit_payload['registrationId'] = {\n              \"$regex\": value\n            };\n          }\n        }\n        //opmode\n        if (mode_payload_arr.length > 0) {\n          if (mode_payload_arr[0]['ruletype'] == \"Equals\") {\n            submit_payload['opMode'] = mode_payload_arr[0]['opMode'];\n          }\n        }\n        if (wan_access_type_payload_arr.length > 0) {\n          if (wan_access_type_payload_arr[0]['ruletype'] == \"Equals\") {\n            submit_payload['wanAccessType'] = wan_access_type_payload_arr[0]['wanAccessType'];\n          }\n        }\n      }\n      this.json_payload_submit = submit_payload;\n    }\n    GetwanAccessTypes(modelName) {\n      //\tthis.loading = true\n      this.service.GetwanAccessTypes(modelName).subscribe(res => {\n        var _a, _b, _c, _d;\n        this.wanAccessTypes = [];\n        var wanAccess_Types = (_a = res === null || res === void 0 ? void 0 : res.properties) === null || _a === void 0 ? void 0 : _a.filter(x => x.featureName == \"WanAccessTypeOptions\");\n        if (wanAccess_Types && ((_b = wanAccess_Types[0].configuration) === null || _b === void 0 ? void 0 : _b.valueList.length) > 0) {\n          this.wanAccessTypes = (_d = (_c = wanAccess_Types[0]) === null || _c === void 0 ? void 0 : _c.configuration) === null || _d === void 0 ? void 0 : _d.valueList;\n          this.rule3items['wanAccessType'] = [];\n          this.rule3items['wanAccessType'] = this.wanAccessTypes;\n          this.loading = false;\n        }\n      }, err => {\n        this.loading = false;\n        this.pageErrorHandle(err);\n        // this.commonOrgService.pageScrollTop();\n      });\n    }\n\n    GetDevice_Type(index) {\n      this.loading = true;\n      let params = this.getParamsNew(index, true);\n      params = params ? params : {\n        orgId: this.ssoService.getOrgId()\n      };\n      this.allDeviceGrpSubscribe = this.service.GetDeviceType(JSON.stringify(params)).subscribe(res => {\n        let emptyObj = {\n          id: '',\n          name: ''\n        };\n        let manufact_arr = [];\n        let model_arr = [];\n        let swver_arr = [];\n        let hwver_arr = [];\n        let fsan_arr = [];\n        let wanip_arr = [];\n        let reg_arr = [];\n        let wanacc_arr = [];\n        let mode_arr = [];\n        this.DeviceTypeArr = res;\n        let opmode = [{\n          \"id\": \"WAP\",\n          \"name\": \"WAP\"\n        }, {\n          \"id\": \"RG\",\n          \"name\": \"RG\"\n        }];\n        for (var i = 0; i < this.DeviceTypeArr.length; i++) {\n          manufact_arr.push({\n            \"id\": this.DeviceTypeArr[i]['manufacturer'],\n            \"name\": this.DeviceTypeArr[i]['manufacturer']\n          });\n          model_arr.push({\n            \"id\": this.DeviceTypeArr[i]['modelName'],\n            \"name\": this.DeviceTypeArr[i]['modelName']\n          });\n          swver_arr.push({\n            \"id\": this.DeviceTypeArr[i]['softwareVersion'],\n            \"name\": this.DeviceTypeArr[i]['softwareVersion']\n          });\n          hwver_arr.push({\n            \"id\": this.DeviceTypeArr[i]['hardwareVersion'],\n            \"name\": this.DeviceTypeArr[i]['hardwareVersion']\n          });\n          fsan_arr.push({\n            \"id\": this.DeviceTypeArr[i]['serialNumber'],\n            \"name\": this.DeviceTypeArr[i]['serialNumber']\n          });\n          wanip_arr.push({\n            \"id\": this.DeviceTypeArr[i]['ipAddress'],\n            \"name\": this.DeviceTypeArr[i]['ipAddress']\n          });\n          reg_arr.push({\n            \"id\": this.DeviceTypeArr[i]['registrationId'],\n            \"name\": this.DeviceTypeArr[i]['registrationId']\n          });\n          wanacc_arr.push({\n            \"id\": this.DeviceTypeArr[i]['wanAccessType'],\n            \"name\": this.DeviceTypeArr[i]['wanAccessType']\n          });\n          //mode_arr.push({\"id\":this.DeviceTypeArr[i]['opMode'],\"name\":this.DeviceTypeArr[i]['opMode']})\n          mode_arr = opmode;\n        }\n        manufact_arr = this.unique(manufact_arr);\n        model_arr = this.unique(model_arr);\n        swver_arr = this.unique(swver_arr);\n        hwver_arr = this.unique(hwver_arr);\n        fsan_arr = this.unique(fsan_arr);\n        wanip_arr = this.unique(wanip_arr);\n        reg_arr = this.unique(reg_arr);\n        wanacc_arr = this.unique(wanacc_arr);\n        mode_arr = this.unique(mode_arr);\n        let wanAccessTypes = this.defaultWanAccessTypes;\n        if (this.RulesArray && this.RulesArray.length) {\n          let modelObj = this.findObject(this.RulesArray, 'rule1', 'modelName');\n          if (modelObj) {\n            let selectedModels = typeof modelObj.rule3 === 'object' ? modelObj.rule3 : [modelObj.rule3];\n            let selectedModel = '';\n            let result = false;\n            selectedModels.forEach(model => {\n              result = result || /844GE(-\\d)?/i.test(model) || /^[MGS4227/GS4227].*/.test(model);\n              selectedModel = model;\n            });\n            if (result) {\n              //\tthis.rule3items['wanAccessType'] = []\n              this.GetwanAccessTypes(selectedModel);\n              // if (/^[MGS4227/GS4227].*/.test(selectedModel)) {\n              // \twanAccessTypes = [\n              // \t\t{\n              // \t\t\tid: \"GPON\",\n              // \t\t\tname: \"GPON\"\n              // \t\t},\n              // \t\t{\n              // \t\t\tid: \"XGSPON\",\n              // \t\t\tname: \"XGSPON\"\n              // \t\t},\n              // \t\t{\n              // \t\t\tid: \"CopperEthernet\",\n              // \t\t\tname: \"CopperEthernet\"\n              // \t\t},\n              // \t\t{\n              // \t\t\tid: \"AE\",\n              // \t\t\tname: \"AE\"\n              // \t\t},\n              // \t]\n              // }\n              // var modelIndex = [\"GS4227\", \"GS4227W\", \"MGS4227\", \"MGS4227W\", \"GS4227W-2\", \"GS4227-2\", \"MGS4227-2\", \"MGS4227W-2\"].indexOf(selectedModel);\n              // if (modelIndex != -1) {\n              // \tlet wanAccType = {\n              // \t\tid: \"10G-AE\",\n              // \t\tname: \"10G-AE\"\n              // \t}\n              // \twanAccessTypes.push(wanAccType);\n              // }\n              // if (selectedModel == 'GS4220E' || selectedModel == 'MGS4220E') {\n              // \twanAccessTypes = wanAccessTypes.filter(x => x.id != \"AE\")\n              // }\n            }\n          }\n        }\n\n        setTimeout(() => {\n          this.rule3items = {\n            \"manufacturer\": manufact_arr,\n            \"modelName\": model_arr,\n            \"softwareVersion\": swver_arr,\n            \"hardwareVersion\": hwver_arr,\n            \"serialNumber\": fsan_arr,\n            \"normalizedIpAddress\": wanip_arr,\n            \"registrationId\": reg_arr,\n            \"wanAccessType\": this.wanAccessTypes,\n            \"opMode\": mode_arr\n          };\n          let rule3items = {\n            \"manufacturer\": manufact_arr,\n            \"modelName\": model_arr,\n            \"softwareVersion\": swver_arr,\n            \"hardwareVersion\": hwver_arr,\n            \"serialNumber\": fsan_arr,\n            \"normalizedIpAddress\": wanip_arr,\n            \"registrationId\": reg_arr,\n            \"wanAccessType\": this.wanAccessTypes,\n            \"opMode\": mode_arr\n          };\n          if (this.RulesArray[index + 1]) {\n            let selectInputs = ['manufacturer', 'modelName', 'softwareVersion', 'hardwareVersion', 'wanAccessType'];\n            if (selectInputs.indexOf(this.RulesArray[index + 1]['rule1']) !== -1) {\n              this.RulesArray[index + 1]['rule2'] = '';\n              this.RulesArray[index + 1]['rule3items'] = rule3items;\n              this.RulesArray[index + 1].rule3 = rule3items[this.RulesArray[index + 1].rule1] ? rule3items[this.RulesArray[index + 1].rule1][0].id : '';\n              if (this.RulesArray[index + 1].rule1 == 'wanAccessType' && this.supportWanAccessType()) {\n                this.rule2items[this.RulesArray[index + 1].rule1] = [{\n                  id: '',\n                  name: ''\n                }, {\n                  id: 'Equals',\n                  name: 'Equals'\n                }];\n                //this.rule2items = [...this.rule2items];\n                this.rule2items = this.rule2items;\n                let modelObj = this.findObject(this.RulesArray, 'rule1', 'modelName');\n                if (modelObj) {\n                  let selectedModels = typeof modelObj.rule3 === 'object' ? modelObj.rule3 : [modelObj.rule3];\n                  let selectedModel = '';\n                  let result = false;\n                  selectedModels.forEach(model => {\n                    result = result || /844GE(-\\d)?/i.test(model) || /^[MGS4227/GS4227].*/.test(model);\n                    selectedModel = model;\n                  });\n                  if (result) {\n                    //\tthis.rule3items['wanAccessType'] = []\n                    //this.GetwanAccessTypes(selectedModel)\n                    // setTimeout(() => {\n                    // \tthis.rule3items['wanAccessType'] = this.wanAccessTypes;\n                    // }, 1000);\n                    // if (/^[MGS4227/GS4227].*/.test(selectedModel)) {\n                    // \tthis.rule3items['wanAccessType'] = [\n                    // \t\t{\n                    // \t\t\tid: \"GPON\",\n                    // \t\t\tname: \"GPON\"\n                    // \t\t},\n                    // \t\t{\n                    // \t\t\tid: \"XGSPON\",\n                    // \t\t\tname: \"XGSPON\"\n                    // \t\t},\n                    // \t\t{\n                    // \t\t\tid: \"CopperEthernet\",\n                    // \t\t\tname: \"CopperEthernet\"\n                    // \t\t},\n                    // \t\t{\n                    // \t\t\tid: \"AE\",\n                    // \t\t\tname: \"AE\"\n                    // \t\t}\n                    // \t]\n                    // } else {\n                    // \t[{\n                    // \t\tid: \"AE\",\n                    // \t\tname: \"AE\"\n                    // \t},\n                    // \t{\n                    // \t\tid: \"GPON\",\n                    // \t\tname: \"GPON\"\n                    // \t}\n                    // \t]\n                    // }\n                    // var modelIndex = [\"GS4227\", \"GS4227W\", \"MGS4227\", \"MGS4227W\", \"GS4227W-2\", \"GS4227-2\", \"MGS4227-2\", \"MGS4227W-2\"].indexOf(selectedModel);\n                    // if (modelIndex != -1) {\n                    // \tlet wanAccType = {\n                    // \t\tid: \"10G-AE\",\n                    // \t\tname: \"10G-AE\"\n                    // \t}\n                    // \tthis.rule3items['wanAccessType'].push(wanAccType);\n                    // }\n                    // if (selectedModel == 'GS4220E' || selectedModel == 'MGS4220E') {\n                    // \tthis.rule3items['wanAccessType'] = this.rule3items['wanAccessType']?.filter(x => x.id != \"AE\")\n                    // }\n                  }\n                }\n              } else {\n                rule3items[\"wanAccessType\"] = [];\n                this.RulesArray[index + 1]['rule3items'] = rule3items;\n                let skipApisForTypes = [\"serialNumber\", \"normalizedIpAddress\", \"registrationId\", \"wanAccessType\", \"opMode\"];\n                if (skipApisForTypes.indexOf(this.RulesArray[index + 1].rule1) === -1) {\n                  this.RulesArray[index + 1]['rule3'] = '';\n                  this.RulesArray[index + 1]['rule2'] = '';\n                }\n              }\n            }\n            if (index !== -1) {\n              this.GetDevice_Type(index + 1);\n            } else {\n              //this.RulesArray[index].rule3 = rule3items[this.RulesArray[index + 1].rule1] ? rule3items[this.RulesArray[index + 1].rule1][0].id : '';\n            }\n            this.Rule1ChangeVal(index + 1, true);\n          } else {\n            if (index !== -1) {\n              this.RulesArray[index]['rule3items'] = Object.assign(Object.assign({}, rule3items), this.RulesArray[index]['rule3items']);\n              if (!this.RulesArray[index].rule3) {\n                this.RulesArray[index].rule3 = rule3items[this.RulesArray[index].rule1] ? rule3items[this.RulesArray[index].rule1][0].id : '';\n              }\n              this.getDiscoveredDeviceCount();\n            } else {\n              this.loading = false;\n            }\n          }\n        }, 1000);\n      }, err => {\n        this.pageErrorHandle(err);\n        // this.commonOrgService.pageScrollTop();\n      });\n    }\n\n    Recall() {\n      // this.Get_payload();\n      // this.GetDevice_Type_recall();\n      // this.getDiscoveredDeviceCount();\n    }\n    GetDevice_Type_recall() {\n      this.allDeviceGrpSubscribe = this.service.GetDeviceType(JSON.stringify(this.json_payload)).subscribe(res => {\n        let manufact_arr = [];\n        let model_arr = [];\n        let swver_arr = [];\n        let hwver_arr = [];\n        let fsan_arr = [];\n        let wanip_arr = [];\n        let reg_arr = [];\n        let wanacc_arr = [];\n        let mode_arr = [];\n        this.DeviceTypeArr = res;\n        let opmode = [{\n          \"id\": \"WAP\",\n          \"name\": \"WAP\"\n        }, {\n          \"id\": \"RG\",\n          \"name\": \"RG\"\n        }];\n        for (var i = 0; i < this.DeviceTypeArr.length; i++) {\n          manufact_arr.push({\n            \"id\": this.DeviceTypeArr[i]['manufacturer'],\n            \"name\": this.DeviceTypeArr[i]['manufacturer']\n          });\n          model_arr.push({\n            \"id\": this.DeviceTypeArr[i]['modelName'],\n            \"name\": this.DeviceTypeArr[i]['modelName']\n          });\n          swver_arr.push({\n            \"id\": this.DeviceTypeArr[i]['softwareVersion'],\n            \"name\": this.DeviceTypeArr[i]['softwareVersion']\n          });\n          hwver_arr.push({\n            \"id\": this.DeviceTypeArr[i]['hardwareVersion'],\n            \"name\": this.DeviceTypeArr[i]['hardwareVersion']\n          });\n          fsan_arr.push({\n            \"id\": this.DeviceTypeArr[i]['serialNumber'],\n            \"name\": this.DeviceTypeArr[i]['serialNumber']\n          });\n          wanip_arr.push({\n            \"id\": this.DeviceTypeArr[i]['ipAddress'],\n            \"name\": this.DeviceTypeArr[i]['ipAddress']\n          });\n          reg_arr.push({\n            \"id\": this.DeviceTypeArr[i]['registrationId'],\n            \"name\": this.DeviceTypeArr[i]['registrationId']\n          });\n          wanacc_arr.push({\n            \"id\": this.DeviceTypeArr[i]['wanAccessType'],\n            \"name\": this.DeviceTypeArr[i]['wanAccessType']\n          });\n          //mode_arr.push({\"id\":this.DeviceTypeArr[i]['opMode'],\"name\":this.DeviceTypeArr[i]['opMode']})\n          mode_arr = opmode;\n        }\n        manufact_arr = this.unique(manufact_arr);\n        model_arr = this.unique(model_arr);\n        swver_arr = this.unique(swver_arr);\n        hwver_arr = this.unique(hwver_arr);\n        fsan_arr = this.unique(fsan_arr);\n        wanip_arr = this.unique(wanip_arr);\n        reg_arr = this.unique(reg_arr);\n        wanacc_arr = this.unique(wanacc_arr);\n        mode_arr = this.unique(mode_arr);\n        this.rule3items = {\n          \"manufacturer\": manufact_arr,\n          \"modelName\": model_arr,\n          \"softwareVersion\": swver_arr,\n          \"hardwareVersion\": hwver_arr,\n          \"serialNumber\": fsan_arr,\n          \"normalizedIpAddress\": wanip_arr,\n          \"registrationId\": reg_arr,\n          \"wanAccessType\": this.defaultWanAccessTypes,\n          \"opMode\": mode_arr\n        };\n      }, err => {\n        this.pageErrorHandle(err);\n        // this.commonOrgService.pageScrollTop();\n      });\n    }\n    // compareWith(index:any){\n    // return  this.RulesArray[index].rule3=[this.rule3items[this.RulesArray[index].rule1][0]]\n    // }\n    GotoTroubleshooting(item) {\n      this.searchByCharacters(item.serialNumber);\n      /*let Setvalue = [{\r\n          \"_id\": item._id,\r\n          \"serialNumber\": item.serialNumber,\r\n          \"macAddress\": item.macAddress,\r\n          \"registrationId\": item.registrationId,\r\n          \"ipAddress\": item.ipAddress,\r\n          \"modelName\": item.modelName,\r\n          \"softwareVersion\": item.softwareVersion,\r\n          \"opMode\": item.opMode,\r\n          \"manufacturer\": item.manufacturer,\r\n          \"deviceId\": \"\",\r\n          \"secondIpAddress\": item.secondIpAddress,\r\n      }]\r\n        localStorage.setItem(\"calix.deviceData\", JSON.stringify(Setvalue))\r\n        this.router.navigate(['/support/router']);*/\n    }\n\n    searchByCharacters(serialNumber) {\n      const textEntered = serialNumber;\n      if (textEntered.length < 2) return;\n      this.searchResult = [];\n      this.dataservice.performSearch(this.orgId, textEntered, 1, 500).subscribe(res => {\n        if (res) {\n          if (this.router.url.includes('cco-foundation')) {\n            this.subService.setSubscriberInfo(undefined);\n            this.subService.setSubscriberTabInfoData(undefined);\n            this.subService.removeDataSaver();\n            this.router.navigate([`/cco-foundation/foundation-systems/foundation-manage/system-details`], {\n              queryParams: {\n                sn: textEntered,\n                subscriber: res.records[0].subscriberId\n              }\n            });\n          } else if (this.router.url.includes('/cco/operations')) {\n            this.subService.setSubscriberInfo(undefined);\n            this.subService.setSubscriberTabInfoData(undefined);\n            this.subService.removeDataSaver();\n            localStorage.setItem(\"calix.Device_Details\", JSON.stringify(res === null || res === void 0 ? void 0 : res.records[0]));\n            this.router.navigate([`/cco/system/cco-subscriber-system/system-details`], {\n              queryParams: {\n                sn: textEntered,\n                subscriber: res.records[0].subscriberId\n              }\n            });\n          } else {\n            this.searchResult = res.records.filter(obj => (obj.devices || []).filter(device => device.serialNumber == serialNumber).length);\n            sessionStorage.setItem(\"calix.deviceData\", JSON.stringify(this.searchResult[0].devices));\n            sessionStorage.setItem('calix.subscriberId', this.searchResult[0].subscriberId);\n            this.subService.setSubscriberInfo(undefined);\n            this.subService.setSubscriberTabInfoData(undefined);\n            this.subService.removeDataSaver();\n            sessionStorage.setItem('calix.serialNo', textEntered);\n            this.router.navigate(['/support/router']);\n          }\n        }\n      }, err => {});\n    }\n    unique(arr) {\n      let uniqueArr = [];\n      for (var i = 0; i < arr.length; i++) {\n        let existed = false;\n        for (var j = 0; j < uniqueArr.length; j++) if (arr[i].name === uniqueArr[j].name) {\n          existed = true;\n          break;\n        }\n        if (existed) continue;\n        uniqueArr.push(arr[i]);\n      }\n      return uniqueArr;\n    }\n    getDiscoveredDeviceCount() {\n      let index = this.RulesArray.length - 1;\n      this.json_payload = this.getParamsNew(index);\n      if (this.json_payload.opMode && this.json_payload.opMode == 'WAP') {\n        this.json_payload.opMode = {\n          \"$in\": [\"WAP\", \"WAP-IGMP\"]\n        };\n      }\n      if (!this.json_payload) {\n        return;\n      }\n      this.allDeviceGrpSubscribe = this.service.getDiscoveredCount(this.json_payload).subscribe(res => {\n        this.DiscoveredDeviceCount = res.count;\n        this.Disc_count = true;\n        // this.cdr.detectChanges();\n        // this.DeviceDiscovered()\n        if (this.isRerender) {\n          this.rerender(2);\n        } else {\n          this.DeviceDiscovered();\n          this.isRerender = true;\n        }\n      }, err => {\n        this.pageErrorHandle(err);\n        // this.commonOrgService.pageScrollTop();\n      });\n    }\n\n    DeviceDiscovered() {\n      if (this.static) {\n        return;\n      }\n      let url = `${environment.SUPPORT_URL}/netops-device/device`;\n      const that = this;\n      this.dtOptionsdis = {\n        pagingType: \"full_numbers\",\n        pageLength: 20,\n        responsive: true,\n        serverSide: true,\n        processing: false,\n        searching: false,\n        lengthChange: false,\n        dom: 'tipr',\n        columnDefs: [{\n          targets: [1, 2, 3, 4, 5, 6, 7],\n          orderable: false\n        }, {\n          targets: [0],\n          orderable: true\n        }],\n        ajax: (dataTablesParameters, callback) => {\n          var btn = document.getElementById('my-btn');\n          if (btn) {\n            if (btn.children[0]) {\n              btn.children[0].classList.add('spin-animation');\n            }\n          }\n          if (that.json_payload.opMode && that.json_payload.opMode == 'WAP') {\n            that.json_payload.opMode = {\n              \"$in\": [\"WAP\", \"WAP-IGMP\"]\n            };\n          }\n          //url=`${url}?matcher=${JSON.stringify(this.json_payload)}`;\n          that.sortBy = dataTablesParameters.order[0].column;\n          that.sortType = dataTablesParameters.order[0].dir;\n          // that.http\n          // \t.get(url + \"?matcher=\" + JSON.stringify(this.json_payload) + \"&skip=\" + dataTablesParameters.start + \"&limit=\" + dataTablesParameters.length)\n          that.http.put(url + \"?skip=\" + dataTablesParameters.start + \"&limit=\" + dataTablesParameters.length, {\n            $matcher: this.json_payload\n          }).subscribe(resp => {\n            if (resp.length == 0) {\n              this.DiscoveredTableData = [];\n            } else {\n              this.DiscoveredTableData = this.sortDataDiscoveredDynamic(resp, that.sortBy, that.sortType);\n            }\n            that.loading = false;\n            // that.cdr.detectChanges();\n            var btn = document.getElementById('my-btn');\n            if (btn) {\n              if (btn.children[0]) {\n                btn.children[0].classList.remove('spin-animation');\n              }\n            }\n            callback({\n              recordsTotal: that.DiscoveredDeviceCount,\n              recordsFiltered: that.DiscoveredDeviceCount,\n              data: []\n            });\n          }, err => {\n            ;\n            var btn = document.getElementById('my-btn');\n            if (btn) {\n              if (btn.children[0]) {\n                btn.children[0].classList.remove('spin-animation');\n              }\n            }\n            this.pageErrorHandle(err);\n          });\n        },\n        drawCallback: settings => {\n          this.changeTableStatusLanguageDeviceGrpInfo(settings);\n          let total = settings._iRecordsDisplay; // for server side rendering\n          let length = settings._iDisplayLength;\n          if (total <= length) {\n            $(settings.nTableWrapper).find('#users-table_last').addClass('disabled');\n          } else {\n            //$(settings.nTableWrapper).find('#users-table_last').removeClass('disabled');\n          }\n        },\n        columns: [{\n          data: \"serialNumber\"\n        }, {\n          data: \"manufacturer\"\n        }, {\n          data: \"opMode\"\n        }, {\n          data: \"modelName\"\n        }, {\n          data: \"softwareVersion\"\n        }, {\n          data: \"registrationId\"\n        }, {\n          data: \"ipAddress\"\n        }, {\n          data: \"macAddress\"\n        }]\n      };\n    }\n    sortDataDiscoveredDynamic(data, by, type) {\n      let sorted = [];\n      if (by == 0) {\n        sorted = this.sortByColumn(data, type, 'serialNumber');\n      }\n      return sorted;\n    }\n    StaticTblRefreshDisc() {\n      this.DevicediscoveredCount();\n    }\n    StaticTblRefreshUndisc() {\n      this.DeviceUndiscoveredCount();\n    }\n    DeviceUndiscoveredCount() {\n      this.static_undisc = false;\n      this.startSpin('static-undiscovered');\n      this.allDeviceGrpSubscribe = this.service.GetUnDiscoveredDevices_static_count(this.devicegrpid_static, this.orgId).subscribe(res => {\n        this.UnDiscoveredStaticDeviceCount = res.count;\n        this.UnDisc_count_static = true;\n        this.static_undisc = true;\n        if (this.isRerender_undisc_static) {\n          // this.UnDiscoveredTableData_static=[];\n          // this.DiscoveredTableData_static=[];\n          //this.rerender(4);\n        } else {\n          this.DeviceUnDiscoveredStatic();\n          this.rerender();\n          this.isRerender_undisc_static = true;\n        }\n      }, err => {\n        this.pageErrorHandle(err);\n      });\n      //this.DeviceUnDiscoveredStatic(devicegrpid)\n    }\n\n    DeviceUnDiscoveredStatic() {\n      //this.startSpin('static-undiscovered');\n      // this.dtOptionsstaticUndis = {\n      // \tpaging: false,\n      // \t// pagingType: \"full_numbers\",\n      // \t// pageLength: 2,\n      // \tlengthChange: false,\n      // \tsearching: false,\n      // }\n      // that.http.get(url + this.devicegrpid_static + `?orgId=` + this.orgId)\n      // \t.subscribe((resp: any) => {\n      // \t\tthat.UnDiscoveredTableData_static = resp;\n      // \t\tthat.loading = false;\n      // \t\tthis.endSpin('static-undiscovered');\n      // \t\tsetTimeout(() => {\n      // \t\t\tif (this.isDtForStaticUnDiscoveredInitialized) {\n      // \t\t\t\tthis.dtElements.forEach((dtElement: DataTableDirective, index) => {\n      // \t\t\t\t\tdtElement.dtInstance.then((dtInstance: DataTables.Api) => {\n      // \t\t\t\t\t\tif (index == 1) {\n      // \t\t\t\t\t\t\tthis.isDtForStaticUnDiscoveredInitialized = true;\n      // \t\t\t\t\t\t\tdtInstance.destroy();\n      // \t\t\t\t\t\t\tthat.undiscoveredDtTrigger.next();\n      // \t\t\t\t\t\t}\n      // \t\t\t\t\t});\n      // \t\t\t\t});\n      // \t\t\t} else {\n      // \t\t\t\tthis.isDtForStaticUnDiscoveredInitialized = true;\n      // \t\t\t\tthat.undiscoveredDtTrigger.next();\n      // \t\t\t}\n      // \t\t}, 500);\n      // \t});\n      this.dtOptionsstaticUndis = {\n        pagingType: \"full_numbers\",\n        pageLength: 10,\n        responsive: true,\n        serverSide: true,\n        processing: false,\n        searching: false,\n        lengthChange: false,\n        dom: 'tipr',\n        ordering: true,\n        columnDefs: [{\n          targets: '_all',\n          orderable: true\n        }],\n        ajax: (dataTablesParameters, callback) => {\n          if (!this.devicegrpid_static) {\n            this.loading = false;\n            this.endSpin('static-undiscovered');\n            //return;\n          }\n\n          let url = `${environment.SUPPORT_URL}/netops-device/static-group-member/undiscovered/`;\n          const that = this;\n          that.sortBy = dataTablesParameters.order[0].column;\n          that.sortType = dataTablesParameters.order[0].dir;\n          that.http.get(`${url}${this.devicegrpid_static}?${this.ssoService.getOrg(this.orgId)}skip=${dataTablesParameters.start}&limit=${dataTablesParameters.length}&bUndiscovered=true`).subscribe(resp => {\n            that.UnDiscoveredTableData_static = resp;\n            this.UnDiscoveredTableData_static = this.sortDataDiscoveredStatic(this.UnDiscoveredTableData_static, that.sortBy, that.sortType, 'undiscovered');\n            that.loading = false;\n            this.endSpin('static-undiscovered');\n            // const tempObj = {\n            // \t_iDisplayStart: this.tableCounts.start,\n            // \t_iDisplayLength: this.tableCounts.displayCount,\n            // \t_iRecordsDisplay: this.tableCounts.displayed,\n            // \t_iRecordsTotal: this.tableCounts.total,\n            // \toPreviousSearch: {\n            // \t\tsSearch: this.tableCounts.searchText\n            // \t}\n            // };\n            //\tthis.changeTableStatusLanguage(tempObj);\n            this.tableLanguageOptions();\n            callback({\n              recordsTotal: that.UnDiscoveredStaticDeviceCount,\n              recordsFiltered: that.UnDiscoveredStaticDeviceCount,\n              data: []\n            });\n          });\n        },\n        drawCallback: settings => {\n          this.changeTableStatusLanguageUnDisc(settings);\n          let total = settings._iRecordsDisplay; // for server side rendering\n          let length = settings._iDisplayLength;\n          if (total <= length) {\n            $(settings.nTableWrapper).find('#users-table_last').addClass('disabled');\n          } else {\n            //$(settings.nTableWrapper).find('#users-table_last').removeClass('disabled');\n          }\n        },\n        columns: [{\n          data: \"memberInfo\"\n        }]\n      };\n    }\n    tableLanguageOptions() {\n      if (this.language && this.language.fileLanguage && this.language.fileLanguage == 'fr') {\n        this.dtOptions.language = this.frTable;\n      }\n      if (this.language && this.language.fileLanguage && this.language.fileLanguage == 'es') {\n        this.dtOptions.language = this.esTable;\n      } else if (this.language && this.language.fileLanguage && this.language.fileLanguage == 'en' && this.dtOptions.language) {\n        delete this.dtOptions.language;\n      }\n    }\n    DevicediscoveredCount() {\n      this.static_disc = false;\n      this.startSpin('static-discovered');\n      this.allDeviceGrpSubscribe = this.service.GetDiscoveredDevices_static_count(this.devicegrpid_static, this.orgId).subscribe(res => {\n        this.DiscoveredStaticDeviceCount = res.count;\n        this.static = true;\n        this.static_disc = true;\n        this.Disc_count_static = true;\n        // this.cdr.detectChanges();\n        // this.DeviceDiscovered()\n        if (this.isRerender_disc_static) {\n          // this.UnDiscoveredTableData_static=[];\n          // this.DiscoveredTableData_static=[];\n          //this.rerender(4);\n          this.DeviceDiscoveredStatic();\n        } else {\n          this.DeviceDiscoveredStatic();\n          this.rerender();\n          this.isRerender_disc_static = true;\n        }\n      }, err => {\n        this.pageErrorHandle(err);\n      });\n    }\n    DeviceDiscoveredStatic() {\n      //this.startSpin('static-discovered');\n      // this.dtOptionsstaticdis = {\n      // \t// pagingType: \"full_numbers\",\n      // \t//pageLength: 2,\n      // \tpaging: false,\n      // \tlengthChange: false,\n      // \tsearching: false,\n      // }\n      // this.http.get(`${url}${this.devicegrpid_static}?orgId=${this.orgId}&bWithDeviceRecord=true&limit=10`)\n      // \t.subscribe((res: any) => {\n      // \t\tthis.endSpin('static-discovered');\n      // \t\tlet data = [];\n      // \t\tthis.DiscoveredTableData_static = [];\n      // \t\tfor (var i = 0; i < res.length; i++) {\n      // \t\t\tif (res[i]['deviceRecord']) {\n      // \t\t\t\tdata.push({\n      // \t\t\t\t\t\"_id\": res[i]['_id'],\n      // \t\t\t\t\t\"serialNumber\": res[i]['deviceRecord']['serialNumber'],\n      // \t\t\t\t\t\"manufacturer\": res[i]['deviceRecord']['manufacturer'],\n      // \t\t\t\t\t\"opMode\": res[i]['deviceRecord']['opMode'],\n      // \t\t\t\t\t\"modelName\": res[i]['deviceRecord']['modelName'],\n      // \t\t\t\t\t\"softwareVersion\": res[i]['deviceRecord']['softwareVersion'],\n      // \t\t\t\t\t\"registrationId\": res[i]['deviceRecord']['registrationId'],\n      // \t\t\t\t\t\"ipAddress\": res[i]['deviceRecord']['ipAddress'],\n      // \t\t\t\t\t\"macAddress\": res[i]['deviceRecord']['macAddress'],\n      // \t\t\t\t\t\"description\": res[i]['deviceRecord']['description']\n      // \t\t\t\t});\n      // \t\t\t}\n      // \t\t}\n      // \t\tthis.DiscoveredTableData_static = data;\n      // \t\tsetTimeout(() => {\n      // \t\t\tif (this.isDtForStaticDiscoveredInitialized) {\n      // \t\t\t\tthis.dtElements.forEach((dtElement: DataTableDirective, index) => {\n      // \t\t\t\t\tdtElement.dtInstance.then((dtInstance: DataTables.Api) => {\n      // \t\t\t\t\t\t\n      // \t\t\t\t\t\tif (index == 0) {\n      // \t\t\t\t\t\t\tthis.isDtForStaticDiscoveredInitialized = true;\n      // \t\t\t\t\t\t\tdtInstance.destroy();\n      // \t\t\t\t\t\t\tthis.staticdiscoveredDtTrigger.next();\n      // \t\t\t\t\t\t}\n      // \t\t\t\t\t});\n      // \t\t\t\t});\n      // \t\t\t} else {\n      // \t\t\t\tthis.isDtForStaticDiscoveredInitialized = true;\n      // \t\t\t\tthis.staticdiscoveredDtTrigger.next();\n      // \t\t\t}\n      // \t\t}, 500);\n      // \t});\n      const that = this;\n      this.dtOptionsstaticdis = {\n        pagingType: \"full_numbers\",\n        pageLength: 10,\n        responsive: true,\n        serverSide: true,\n        processing: false,\n        searching: false,\n        lengthChange: false,\n        dom: 'tipr',\n        columnDefs: [{\n          targets: [1, 2, 3, 4, 5, 6, 7],\n          orderable: false\n        }, {\n          targets: [0],\n          orderable: true\n        }],\n        ajax: (dataTablesParameters, callback) => {\n          // var btn = document.getElementById('my-btn');\n          // if (btn) {\n          // \tif (btn.children[0]) {\n          // \t\tbtn.children[0].classList.add('spin-animation');\n          // \t}\n          // }\n          if (!this.devicegrpid_static) {\n            this.endSpin('static-discovered');\n            //return;\n          }\n\n          let url = `${environment.SUPPORT_URL}/netops-device/static-group-member/discovered/`;\n          that.sortBy = dataTablesParameters.order[0].column;\n          that.sortType = dataTablesParameters.order[0].dir;\n          that.http.get(`${url}${this.devicegrpid_static}?${this.ssoService.getOrg(this.orgId)}skip=${dataTablesParameters.start}&limit=${dataTablesParameters.length}&bWithDeviceRecord=true`).subscribe(res => {\n            that.DiscoveredTableData_static = [];\n            let data = [];\n            for (var i = 0; i < res.length; i++) {\n              if (res[i]['deviceRecord']) {\n                data.push({\n                  \"serialNumber\": res[i]['deviceRecord']['serialNumber'],\n                  \"manufacturer\": res[i]['deviceRecord']['manufacturer'],\n                  \"opMode\": res[i]['deviceRecord']['opMode'],\n                  \"modelName\": res[i]['deviceRecord']['modelName'],\n                  \"softwareVersion\": res[i]['deviceRecord']['softwareVersion'],\n                  \"registrationId\": res[i]['deviceRecord']['registrationId'],\n                  \"ipAddress\": res[i]['deviceRecord']['ipAddress'],\n                  \"macAddress\": res[i]['deviceRecord']['macAddress']\n                });\n              }\n            }\n            this.DiscoveredTableData_static = data;\n            if (!that.DiscoveredTableData_static.length) {\n              that.DiscoveredStaticDeviceCount = 0;\n            }\n            this.DiscoveredTableData_static = this.sortDataDiscoveredStatic(this.DiscoveredTableData_static, that.sortBy, that.sortType, 'discovered');\n            that.loading = false;\n            this.endSpin('static-discovered');\n            callback({\n              recordsTotal: that.DiscoveredStaticDeviceCount,\n              recordsFiltered: that.DiscoveredStaticDeviceCount,\n              data: []\n            });\n          }, err => {\n            ;\n            var btn = document.getElementById('my-btn');\n            if (btn) {\n              if (btn.children[0]) {\n                btn.children[0].classList.remove('spin-animation');\n              }\n            }\n            this.pageErrorHandle(err);\n          });\n        },\n        drawCallback: settings => {\n          this.changeTableStatusLanguageStaticDisc(settings);\n          let total = settings._iRecordsDisplay; // for server side rendering\n          let length = settings._iDisplayLength;\n          if (total <= length) {\n            $(settings.nTableWrapper).find('#users-table_last').addClass('disabled');\n          } else {\n            //$(settings.nTableWrapper).find('#users-table_last').removeClass('disabled');\n          }\n        },\n        columns: [{\n          data: \"serialNumber\"\n        }, {\n          data: \"manufacturer\"\n        }, {\n          data: \"opMode\"\n        }, {\n          data: \"modelName\"\n        }, {\n          data: \"softwareVersion\"\n        }, {\n          data: \"registrationId\"\n        }, {\n          data: \"ipAddress\"\n        }, {\n          data: \"macAddress\"\n        }]\n      };\n    }\n    sortDataDiscoveredStatic(data, by, type, disAndUndis) {\n      let sorted = [];\n      if (by == 0 && disAndUndis == 'discovered') sorted = this.sortByColumn(data, type, 'serialNumber');\n      if (by == 0 && disAndUndis == 'undiscovered') sorted = this.sortByColumn(data, type, 'memberInfo');\n      return sorted;\n    }\n    displayEditGroup(devicegrpid) {\n      this.deviceGroupId = devicegrpid;\n      let rules_obj_arr1 = [];\n      let rules_obj_arr2 = [];\n      let rules3_arry = [];\n      let rules2_arry = [];\n      this.isAddGroupForm = false;\n      this.isAddTable = true;\n      this.ishidebtn = false;\n      this.Is_Update = true;\n      this.editdevicegrpid = devicegrpid;\n      this.loading = true;\n      // this.DiscoveredTableData_static=[];\n      this.RulesArray = [];\n      var tempRule3Items = [];\n      var ipformat = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\\/(?:[0-9]|[12][0-9]|3[0-2]))?$/;\n      this.EditDeviceGrpSubscribe = this.service.getEditDeviceGoupList(devicegrpid).subscribe(res => {\n        if (res) {\n          //this.loading = false;\n          this.createDeviceGroup.controls.name.setValue(res.name);\n          this.createDeviceGroup.controls.type.setValue(res.type);\n          this.createDeviceGroup.controls.description.setValue(res.description);\n          this.devicegrpid_static = devicegrpid;\n          if (res.type == 'static') {\n            this.IsStatic = true;\n            //this.static = true;\n            this.IsStatic_enable = true;\n            this.is_staticenable = true;\n            this.createDeviceGroup.controls.allowInheritance.setValue(res.allowInheritance);\n            this.DevicediscoveredCount();\n            this.DeviceUndiscoveredCount();\n            // this.dtTrigger.next();\n            this.loading = false;\n          } else {\n            this.cpeFilter = res.cpeFilter;\n            let rules = this.getRules();\n            this.dtTrigger.next();\n            this.isFilledRow = true;\n            this.IsStatic = false;\n            this.IsStatic_enable = false;\n            this.static = false;\n            this.is_staticenable = true;\n            this.createDeviceGroup.controls.allowInheritance.setValue(false);\n            this.edit_key = Object.keys(res.cpeFilter);\n            let rulesArray = [];\n            for (var i = 0; i < rules.length; i++) {\n              rulesArray.push({\n                \"rule1\": rules[i].key,\n                \"rule2\": rules[i].oper ? rules[i].oper : \"Equals\",\n                \"rule3\": rules[i].value,\n                'rule1items': this.rule1items,\n                \"disabled\": true,\n                \"multiple\": typeof rules[i].value === 'object' ? true : false,\n                \"rule3items\": i == 0 && rules[i].key === 'manufacturer' ? this.rule3items : [],\n                \"rule2items\": this.rule2items\n              });\n            }\n            const requests = [];\n            rulesArray.forEach((element, index, object) => {\n              let params = this.getParams(index, rulesArray);\n              const req = this.service.GetDeviceType(JSON.stringify(params)).pipe(catchError(err => of(err.status)));\n              requests.push(req);\n            });\n            if (requests.length) {\n              this.loading = true;\n              let errors = [];\n              forkJoin(requests).subscribe(response => {\n                response.forEach((element, index) => {\n                  if (typeof element == 'object') {\n                    let manufact_arr = [];\n                    let model_arr = [];\n                    let swver_arr = [];\n                    let hwver_arr = [];\n                    let fsan_arr = [];\n                    let wanip_arr = [];\n                    let reg_arr = [];\n                    let wanacc_arr = [];\n                    let mode_arr = [];\n                    this.DeviceTypeArr = element;\n                    let opmode = [{\n                      \"id\": \"WAP\",\n                      \"name\": \"WAP\"\n                    }, {\n                      \"id\": \"RG\",\n                      \"name\": \"RG\"\n                    }];\n                    for (var i = 0; i < this.DeviceTypeArr.length; i++) {\n                      manufact_arr.push({\n                        \"id\": this.DeviceTypeArr[i]['manufacturer'],\n                        \"name\": this.DeviceTypeArr[i]['manufacturer']\n                      });\n                      model_arr.push({\n                        \"id\": this.DeviceTypeArr[i]['modelName'],\n                        \"name\": this.DeviceTypeArr[i]['modelName']\n                      });\n                      swver_arr.push({\n                        \"id\": this.DeviceTypeArr[i]['softwareVersion'],\n                        \"name\": this.DeviceTypeArr[i]['softwareVersion']\n                      });\n                      hwver_arr.push({\n                        \"id\": this.DeviceTypeArr[i]['hardwareVersion'],\n                        \"name\": this.DeviceTypeArr[i]['hardwareVersion']\n                      });\n                      fsan_arr.push({\n                        \"id\": this.DeviceTypeArr[i]['serialNumber'],\n                        \"name\": this.DeviceTypeArr[i]['serialNumber']\n                      });\n                      wanip_arr.push({\n                        \"id\": this.DeviceTypeArr[i]['ipAddress'],\n                        \"name\": this.DeviceTypeArr[i]['ipAddress']\n                      });\n                      reg_arr.push({\n                        \"id\": this.DeviceTypeArr[i]['registrationId'],\n                        \"name\": this.DeviceTypeArr[i]['registrationId']\n                      });\n                      wanacc_arr.push({\n                        \"id\": this.DeviceTypeArr[i]['wanAccessType'],\n                        \"name\": this.DeviceTypeArr[i]['wanAccessType']\n                      });\n                      //mode_arr.push({\"id\":this.DeviceTypeArr[i]['opMode'],\"name\":this.DeviceTypeArr[i]['opMode']})\n                      mode_arr = opmode;\n                    }\n                    manufact_arr = this.unique(manufact_arr);\n                    model_arr = this.unique(model_arr);\n                    swver_arr = this.unique(swver_arr);\n                    hwver_arr = this.unique(hwver_arr);\n                    fsan_arr = this.unique(fsan_arr);\n                    wanip_arr = this.unique(wanip_arr);\n                    reg_arr = this.unique(reg_arr);\n                    wanacc_arr = this.unique(wanacc_arr);\n                    mode_arr = this.unique(mode_arr);\n                    this.rule3items = {\n                      \"manufacturer\": manufact_arr,\n                      \"modelName\": model_arr,\n                      \"softwareVersion\": swver_arr,\n                      \"hardwareVersion\": hwver_arr,\n                      \"serialNumber\": fsan_arr,\n                      \"normalizedIpAddress\": wanip_arr,\n                      \"registrationId\": reg_arr,\n                      \"wanAccessType\": this.defaultWanAccessTypes,\n                      \"opMode\": mode_arr\n                    };\n                    if (this.RulesArray && this.RulesArray.length) {\n                      let modelObj = this.findObject(this.RulesArray, 'rule1', 'modelName');\n                      if (modelObj) {\n                        let selectedModels = typeof modelObj === 'object' && typeof modelObj.rule3 === 'object' ? modelObj.rule3 : [modelObj.rule3];\n                        let selectedModel = '';\n                        let result = false;\n                        selectedModels.forEach(model => {\n                          result = result || /844GE(-\\d)?/i.test(model) || /^[MGS4227/GS4227].*/.test(model);\n                          selectedModel = model;\n                        });\n                        if (result) {\n                          this.GetwanAccessTypes(selectedModel);\n                          setTimeout(() => {\n                            var items = this.rule3items;\n                            this.rule3items['wanAccessType'] = [];\n                            this.rule3items['wanAccessType'] = this.wanAccessTypes;\n                            if (rulesArray[index + 1]) {\n                              rulesArray[index + 1].rule3items['wanAccessType'] = this.rule3items['wanAccessType'];\n                            } else {}\n                          }, 1000);\n                        }\n                      }\n                    }\n                    if (rulesArray[index + 1]) {\n                      rulesArray[index + 1].rule3items = this.rule3items;\n                    } else {}\n                  } else {\n                    errors.push(element);\n                  }\n                });\n                this.getDiscoveredDeviceCount();\n              }, err => {});\n            }\n            this.RulesArray = rulesArray;\n            //this.GetDevice_Type(0);\n          }\n\n          setTimeout(() => {\n            this.loading = false;\n          }, 3000);\n        }\n      }, err => {\n        this.loading = false;\n        this.pageErrorHandle(err);\n        // this.commonOrgService.pageScrollTop();\n      }, () => {\n        this.loading = false;\n      });\n    }\n    EditDropdownDisabled(i) {\n      if (this.RulesArray[i]['disabled'] == true) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    displayAddGroup() {\n      var _a;\n      if (((_a = window.location.href) === null || _a === void 0 ? void 0 : _a.indexOf('/cco/operations/configuration/system-groups')) !== -1) {\n        this.router.navigate(['./cco/operations/configuration/system-groups/add']);\n        return;\n      }\n      this.ssoService.redirectByUrl([`/support/netops-management/devices-groups-add`, `cco/device-groups-add`, `cco-foundation/foundation-configuration/device-groups-add`, `/cco/operations/device-groups-add`]);\n    }\n    gotoEdit(id) {\n      var _a;\n      // this.ssoService.redirectByUrl([\n      // \t`/support/netops-management/devices-groups/${id}`,\n      // \t`/cco/operations/configuration/system-groups/${id}`,\n      // \t`cco/device-groups/${id}`,\n      // \t`cco-foundation/foundation-configuration/device-groups/${id}`,\n      // \t// `/cco/operations/device-groups/${id}`,\n      // ]);\n      //this.router.navigate([`/support/netops-management/operations/devices-groups/${id}`]);\n      if (((_a = window.location.href) === null || _a === void 0 ? void 0 : _a.indexOf('/cco/operations/configuration/system-groups')) !== -1) {\n        this.router.navigate([`/cco/operations/configuration/system-groups/${id}`]);\n        return;\n      }\n      this.ssoService.redirectByUrl([`/support/netops-management/devices-groups/${id}`, `cco/device-groups/${id}`, `cco-foundation/foundation-configuration/device-groups/${id}`]);\n    }\n    cancelAddGroup() {\n      this.isAddGroupForm = true;\n      this.isAddTable = false;\n      this.ishidebtn = true;\n      this.isNameError = false;\n      this.isFilledRow = true;\n      this._location.back();\n      //this.router.navigate(['/support/netops-management/operations/devices-groups']);\n    }\n\n    FilledAll(arg) {\n      if (arg) {\n        this.isFilledRow = true;\n      } else {\n        this.isFilledRow = false;\n      }\n    }\n    initFilledAll(index) {\n      if (this.RulesArray[index].rule1 == 'manufacturer' || this.RulesArray[index].rule1 == 'modelName' || this.RulesArray[index].rule1 == 'softwareVersion' || this.RulesArray[index].rule1 == 'hardwareVersion' || this.RulesArray[index].rule1 == 'opMode') {\n        this.isFilledRow = true;\n      } else {\n        this.isFilledRow = false;\n      }\n    }\n    nameCheck(value) {\n      if (!value) {\n        this.isNameError = true;\n      } else {\n        this.isNameError = false;\n      }\n    }\n    submitAddGroup() {\n      this.Rule_err = false;\n      this.orgId = this.ssoService.getOrgId();\n      this.submitted = true;\n      if (!this.createDeviceGroup.value.name) {\n        this.isNameError = true;\n      } else {\n        this.isNameError = false;\n      }\n      if (this.createDeviceGroup.invalid) {\n        return;\n      }\n      this.Get_payload();\n      if (this.Rule_err) {\n        return;\n      }\n      if (this.createDeviceGroup.value.type != \"static\") {\n        if (!this.RulesArray.length) {\n          this.Rule_err = true;\n          this.RuleAtleastOne = true;\n          this.ErrorMessage = 'Error! All Rules must be complete and a minimum of one is required.';\n          return;\n        }\n        if (this.RulesArray.length == 1 && !this.RulesArray[0]['rule1']) {\n          this.Rule_err = true;\n          this.RuleAtleastOne = true;\n          this.ErrorMessage = 'Error! All Rules must be complete and a minimum of one is required.';\n          return;\n        }\n        //\n        if (this.RulesArray.length > 0 && this.RulesArray[0]['rule1']) {\n          if (this.RulesArray[0]['rule1'] && this.RulesArray[0]['rule2'] && this.RulesArray[0]['rule3']) {\n            if (this.RulesArray[0]['rule1'] && this.RulesArray[0]['rule2'] && this.RulesArray[0]['rule3']) {\n              this.Rule_err = false;\n              this.RuleAtleastOne = false;\n              this.ErrorMessage = \"\";\n            }\n          } else if (this.RulesArray.length == 0) {\n            this.RuleAtleastOne = true;\n          }\n        } else {\n          if (!(this.RulesArray[0]['rule1'] == 'registrationId' && this.RulesArray[0]['rule2'] && !this.RulesArray[0]['rule3'])) {\n            this.Rule_err = true;\n            this.RuleAtleastOne = true;\n            this.ErrorMessage = 'Error! All Rules must be complete and a minimum of one is required.';\n          }\n        }\n        if (this.RulesArray.length === 1 && !this.RulesArray[0].rule1 || !this.RulesArray[0].rule2 || !this.RulesArray[0].rule3) {\n          if (!(this.RulesArray[0]['rule1'] == 'registrationId' && this.RulesArray[0]['rule2'] && !this.RulesArray[0]['rule3'])) {\n            this.Rule_err = true;\n            this.RuleAtleastOne = true;\n            this.ErrorMessage = 'Error! All Rules must be complete and a minimum of one is required.';\n          }\n        }\n        //this.CheckValidationErr(this.indexlength);\n      }\n\n      delete this.json_payload_submit[\"orgId\"];\n      this.createDeviceGroup.value.cpeFilter = this.json_payload_submit;\n      this.createDeviceGroup.value.name = this.createDeviceGroup.value.name.trim();\n      if (this.Rule_err == false) {\n        this.loading = true;\n        if (this.Is_Update == true) {\n          if (this.createDeviceGroup.value.type != 'static') {\n            delete this.createDeviceGroup.value.allowInheritance;\n          }\n          this.UpdateDeviceGrpSubscribe = this.service.UpdateDeviceGroup(this.orgId, this.editdevicegrpid, this.createDeviceGroup.value).subscribe(res => {\n            //this.getDeviceCount();\n            //this.rerender(1);\n            this.showSuccess = true;\n            this.successMsg = \"Successfully Updated\";\n            setTimeout(function () {\n              this.showSuccess = false;\n              this.successMsg = \"\";\n            }, 500);\n            this.RulesArray = [];\n            this.isError = false;\n            this.isAddGroupForm = true;\n            this.isAddTable = false;\n            this.ishidebtn = true;\n            this.isFilledRow = true;\n            this.loading = false;\n            this.goBack();\n          }, err => {\n            this.loading = false;\n            this.isFilledRow = true;\n            this.pageErrorHandle(err);\n            // this.commonOrgService.pageScrollTop();\n          }, () => {\n            this.isFilledRow = true;\n            this.loading = false;\n            this.goBack();\n          });\n        } else {\n          if (this.createDeviceGroup.value.type == \"static\") {\n            this.static = false;\n            this.Disc_count_static = false;\n            this.UnDisc_count_static = false;\n          }\n          this.AddDeviceGrpSubscribe = this.service.addDeviceGroup(this.orgId, this.createDeviceGroup.value).subscribe(res => {\n            if (res) {\n              this.isError = false;\n              // this.getDeviceCount();\n              // this.rerender(1);\n              this.showSuccess = true;\n              this.successMsg = \"Successfully Added\";\n              this.RulesArray = [];\n              this.isAddGroupForm = true;\n              this.isAddTable = false;\n              this.ishidebtn = true;\n              this.isFilledRow = true;\n              this.loading = false;\n              this.goBack();\n            }\n          }, err => {\n            this.isFilledRow = true;\n            this.loading = false;\n            this.pageErrorHandle(err);\n          }, () => {\n            this.isFilledRow = true;\n            this.loading = false;\n            this.goBack();\n          });\n        }\n      }\n    }\n    onClickPlusSymbol(index) {\n      if (this.RulesArray.length == 0) {\n        this.Rule_err = false;\n      }\n      if (this.RulesArray.length) {\n        let lastRow = this.RulesArray[index - 1];\n        if (lastRow.rule1 !== 'registrationId') {\n          if (!lastRow.rule1) {\n            return;\n          }\n          if (!lastRow.rule2) {\n            return;\n          }\n          if (!lastRow.rule3) {\n            return;\n          }\n        }\n      }\n      const ITEMS = [{\n        id: '',\n        name: ''\n      }, {\n        id: 'manufacturer',\n        name: 'Manufacturer'\n      }, {\n        id: 'modelName',\n        name: 'Model'\n      }, {\n        id: 'softwareVersion',\n        name: 'SW Version'\n      }, {\n        id: 'hardwareVersion',\n        name: 'HW Version'\n      }, {\n        id: 'serialNumber',\n        name: 'FSAN/Serial Number'\n      }, {\n        id: 'normalizedIpAddress',\n        name: 'WAN IP'\n      }, {\n        id: 'registrationId',\n        name: 'Registration ID'\n      }, {\n        id: 'wanAccessType',\n        name: 'WAN Access Type'\n      }, {\n        id: 'opMode',\n        name: 'Mode'\n      }];\n      this.rule_temp = [];\n      if (this.Rule_err == false || this.RuleAtleastOne == true) {\n        let items = ITEMS;\n        if (this.RulesArray.length) {\n          this.RulesArray.forEach(element => {\n            if (element.rule1 == 'manufacturer') {\n              items = ITEMS.filter(obj => obj.id != element.rule1);\n            }\n            if (element.rule1 == 'modelName') {\n              items = items.filter(obj => obj.id != element.rule1);\n            }\n            if (element.rule1 == 'softwareVersion') {\n              items = items.filter(obj => obj.id != element.rule1);\n            }\n            if (element.rule1 == 'hardwareVersion') {\n              items = items.filter(obj => obj.id != element.rule1);\n            }\n            if (element.rule1 == 'serialNumber') {\n              items = items.filter(obj => obj.id != element.rule1);\n            }\n            if (element.rule1 == 'normalizedIpAddress') {\n              items = items.filter(obj => obj.id != element.rule1);\n            }\n            if (element.rule1 == 'registrationId') {\n              items = items.filter(obj => obj.id != element.rule1);\n            }\n            if (element.rule1 == 'wanAccessType') {\n              items = items.filter(obj => obj.id != element.rule1);\n            }\n            if (element.rule1 == 'opMode') {\n              items = items.filter(obj => obj.id != element.rule1);\n            }\n          });\n        }\n        this.RulesArray.push({\n          \"rule1\": '',\n          \"rule2\": '',\n          \"rule3\": '',\n          'rule1items': items,\n          'rule3items': this.rule3items\n        });\n        this.RulesArray = [...this.RulesArray];\n      }\n    }\n    callSortedArray(ordered_array) {\n      var item_order;\n      item_order = ['manufacturer', 'modelName', 'softwareVersion', 'hardwareVersion', 'serialNumber', 'normalizedIpAddress', 'registrationId', 'wanAccessType', 'opMode'];\n      ordered_array.sort(function (a, b) {\n        item_order.indexOf(a.id) - item_order.indexOf(b.id);\n      });\n      let tempData = JSON.stringify(ordered_array);\n      // return JSON.parse(tempData);\n      return JSON.parse(tempData);\n    }\n    OnclickDeleteSymbol(i) {\n      this.Rule_err = false;\n      let validations = {\n        manufacturer: [\"opMode\", \"wanAccessType\", \"hardwareVersion\", \"softwareVersion\", \"modelName\"],\n        modelName: [\"wanAccessType\", \"hardwareVersion\", \"softwareVersion\"],\n        softwareVersion: [],\n        hardwareVersion: [],\n        wanAccessType: [],\n        opMode: [],\n        normalizedIpAddress: [],\n        registrationId: []\n      };\n      var temp = this.findObjectByKey(this.RulesArray[i].rule1);\n      if (temp == undefined) {\n        this.RulesArray.splice(i, 1);\n        this.RulesArray = this.RulesArray;\n        if (!this.RulesArray.length) {\n          this.Rule_err = true;\n          this.RuleAtleastOne = true;\n          this.ErrorMessage = 'Error! All Rules must be complete and a minimum of one is required.';\n        }\n        return;\n      }\n      let ruleName = temp.id;\n      let skipApisForTypes = [\"serialNumber\", \"softwareVersion\", \"normalizedIpAddress\", \"registrationId\", \"wanAccessType\", \"opMode\"];\n      let rulesparams = this.getSelectedRules();\n      let params = rulesparams['rule1'];\n      if (validations[ruleName] && validations[ruleName].length) {\n        for (let j = 0; j < validations[ruleName].length; j++) {\n          if (params.indexOf(validations[ruleName][j]) !== -1) {\n            this.Rule_err = true;\n            let ruletemp = this.findObjectByKey(params[params.indexOf(validations[ruleName][j])]);\n            if (this.language.fileLanguage == 'en') {\n              this.ErrorMessage = `Error! cascade elements ${ruletemp.name} already existed!`;\n            } else {\n              this.ErrorMessage = `Erreur! les éléments de la cascade ${ruletemp.name} existaient déjà!`;\n            }\n            return;\n          }\n        }\n        this.RulesArray.splice(i, 1);\n        this.RulesArray = this.RulesArray;\n        if (!this.RulesArray.length) {\n          this.Rule_err = true;\n          this.ErrorMessage = `Error! All Rules must be complete and a minimum of one is required.`;\n          this.GetDevice_Type(-1);\n          return;\n        }\n        if (skipApisForTypes.indexOf(ruleName) !== -1) {\n          this.getDiscoveredDeviceCount();\n          return;\n        }\n        for (let k = i - 1; k >= 0; k--) {\n          let tmpRuleName = this.RulesArray[k].rule1;\n          if (skipApisForTypes.indexOf(tmpRuleName) === -1) {\n            this.GetDevice_Type(k);\n            break;\n          }\n        }\n        this.getDiscoveredDeviceCount();\n        return;\n      }\n      if (skipApisForTypes.indexOf(ruleName) !== -1) {\n        this.RulesArray.splice(i, 1);\n        this.RulesArray = this.RulesArray;\n        this.getDiscoveredDeviceCount();\n        //return;\n      } else {\n        this.RulesArray.splice(i, 1);\n        this.RulesArray = this.RulesArray;\n        this.GetDevice_Type(i - 1);\n        //return;\n      }\n\n      if (!this.RulesArray.length) {\n        this.Rule_err = true;\n        this.RuleAtleastOne = true;\n        this.ErrorMessage = 'Error! All Rules must be complete and a minimum of one is required.';\n        this.RulesArray.splice(i, 1);\n        this.FilledAll('');\n      }\n      return;\n      if (this.RulesArray.length > 1) {\n        if (temp.id == 'manufacturer') {\n          let obj = this.findObjectByKey(this.RulesArray[i + 1].rule1);\n          this.Rule_err = true;\n          if (this.language.fileLanguage == 'en') {\n            this.ErrorMessage = `Error! cascade elements ${obj.name} already existed!`;\n          } else {\n            this.ErrorMessage = `Erreur! les éléments de la cascade ${obj.name} existaient déjà!`;\n          }\n          return;\n        }\n        if (temp.id == 'modelName' && this.RulesArray[i + 1]) {\n          let obj = this.findObjectByKey(this.RulesArray[i + 1].rule1);\n          this.Rule_err = true;\n          if (this.language.fileLanguage == 'en') {\n            this.ErrorMessage = `Error! cascade elements ${obj.name} already existed!`;\n          } else {\n            this.ErrorMessage = `Erreur! les éléments de la cascade ${obj.name} existaient déjà!`;\n          }\n          return;\n        }\n      }\n      if (this.RulesArray.length == 1) {\n        this.Rule_err = true;\n        this.RuleAtleastOne = true;\n        this.ErrorMessage = 'Error! All Rules must be complete and a minimum of one is required.';\n        this.RulesArray.splice(i, 1);\n        this.FilledAll('');\n      } else if (this.RulesArray.length == 2 && this.RulesArray[1].rule1 == \"\" && temp && temp.id == 'manufacturer') {\n        this.Rule_err = true;\n        this.RuleAtleastOne = true;\n        this.ErrorMessage = 'Error! All Rules must be complete and a minimum of one is required.';\n        this.RulesArray.splice(i, 1);\n        this.FilledAll('');\n      } else {\n        this.Rule_err = false;\n      }\n      if (temp && temp.id == 'manufacturer' || temp && temp.id == 'modelName') {\n        this.RulesArray.forEach(element => {\n          if (element.rule1 == \"softwareVersion\") {\n            this.Rule_err = true;\n            this.ErrorMessage = \"Error! cascade elements SW Version already existed!\";\n            this.FilledAll('');\n          } else if (element.rule1 == \"hardwareVersion\") {\n            this.Rule_err = true;\n            this.ErrorMessage = \"Error! cascade elements HW Version already existed!\";\n            this.FilledAll('');\n          }\n        });\n      }\n      if (temp && temp.id == 'manufacturer') {\n        this.RulesArray.forEach(element => {\n          if (element.rule1 == \"opMode\") {\n            this.Rule_err = true;\n            this.ErrorMessage = \"Error! cascade elements Mode already existed!\";\n            this.FilledAll('');\n          }\n        });\n      }\n      if (!this.Rule_err) {\n        this.FilledAll('active');\n        this.RulesArray.splice(i, 1);\n        //this.FilterDevice();\n        for (var j = 0; j < this.RulesArray.length; j++) {\n          let outPut = this.RulesArray[j].rule1items.find(obj => obj.id == temp.id);\n          if (!outPut) {\n            this.RulesArray[j].rule1items.push(temp);\n          }\n        }\n        if (this.RulesArray.length == 0) {\n          this.DiscoveredTableData = [];\n        }\n      }\n      this.GetDevice_Type(i - 1);\n    }\n    findObjectByKey(value) {\n      const ITEMS = [{\n        id: '',\n        name: ''\n      }, {\n        id: 'manufacturer',\n        name: 'Manufacturer'\n      }, {\n        id: 'modelName',\n        name: 'Model'\n      }, {\n        id: 'softwareVersion',\n        name: 'SW Version'\n      }, {\n        id: 'hardwareVersion',\n        name: 'HW Version'\n      }, {\n        id: 'serialNumber',\n        name: 'FSAN/Serial Number'\n      }, {\n        id: 'normalizedIpAddress',\n        name: 'WAN IP'\n      }, {\n        id: 'registrationId',\n        name: 'Registration ID'\n      }, {\n        id: 'wanAccessType',\n        name: 'WAN Access Type'\n      }, {\n        id: 'opMode',\n        name: 'Mode'\n      }];\n      for (var i = 0; i < ITEMS.length; i++) {\n        if (ITEMS[i]['id'] == value) {\n          return ITEMS[i];\n        }\n      }\n    }\n    refresh() {\n      var btn = document.getElementById('my-btn');\n      btn.children[0].classList.add('spin-animation');\n      setTimeout(function () {\n        btn.children[0].classList.remove('spin-animation');\n      }, 500);\n    }\n    rerender(param) {\n      this.dtElements.forEach(dtElement => {\n        dtElement.dtInstance.then(dtInstance => {\n          // Do your stuff\n          dtInstance.draw();\n          var btn = document.getElementById('my-btn');\n        });\n      });\n    }\n    pageErrorHandle(err) {\n      this.loading = false;\n      if (err.status == 401) {\n        this.warningMessage = 'Access Denied';\n      }\n      if (err.status === 504) {\n        this.warningMessage = 'Gateway Timeout';\n      } else {\n        //this.warningMessage = this.service.pageErrorHandle(err);\n        let errorInfo = this.ssoService.pageErrorHandle(err);\n        let langfromapi = this.ssoService.getspecificlangliterals();\n        if (errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.includes(\"that conflicts with another group\")) {\n          let devicename = document.querySelector(\"#deviceName\");\n          let latest = langfromapi[errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.replace(devicename.value, \"$$$$$\")];\n          let finalerrormessage = latest === null || latest === void 0 ? void 0 : latest.replace(\"$$$\", devicename.value);\n          this.warningMessage = finalerrormessage ? finalerrormessage : this.ssoService.pageErrorHandle(err);\n        } else {\n          this.warningMessage = this.ssoService.pageErrorHandle(err);\n        }\n      }\n      this.isError = true;\n      $(\"body\").scrollTop(0);\n    }\n    ngOnDestroy() {\n      var _a;\n      (_a = this.languageSubject) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      if (this.dtTrigger) {\n        this.dtTrigger.unsubscribe();\n      }\n      if (this.EditDeviceGrpSubscribe) {\n        this.EditDeviceGrpSubscribe.unsubscribe();\n      }\n      if (this.UpdateDeviceGrpSubscribe) {\n        this.UpdateDeviceGrpSubscribe.unsubscribe();\n      }\n      if (this.DiscoveredStaticSubscribe) {\n        this.DiscoveredStaticSubscribe.unsubscribe();\n      }\n      if (this.allDeviceGrpSubscribe) {\n        this.allDeviceGrpSubscribe.unsubscribe();\n      }\n      if (this.AddDeviceGrpSubscribe) {\n        this.AddDeviceGrpSubscribe.unsubscribe();\n      }\n      if (this.UnDiscoveredStaticSubscribe) {\n        this.UnDiscoveredStaticSubscribe.unsubscribe();\n      }\n      if (this.DeleteDeviceGrpSubscribe) {\n        this.DeleteDeviceGrpSubscribe.unsubscribe();\n      }\n    }\n    // getParams(index, arr: any) {\n    // \tlet params: any = {\n    // \t\t\"orgId\": this.orgId\n    // \t};\n    // \tif (index == -1) {\n    // \t\treturn params;\n    // \t}\n    // \tfor (let i = 0; i <= index; i++) {\n    // \t\tlet element = arr;\n    // \t\tif (element.rule2 == \"$ne\") {\n    // \t\t\tparams[element.rule1] = {\n    // \t\t\t\t\"$ne\": element.rule3\n    // \t\t\t}\n    // \t\t} else if (element.rule2 == \"$in\") {\n    // \t\t\telement['rule3'].forEach((element: any) => {\n    // \t\t\t\tif (!element) {\n    // \t\t\t\t\tthis.ErrorMessage = `Rule ${i + 1} is not valid.`\n    // \t\t\t\t\tthis.Rule_err = true;\n    // \t\t\t\t\treturn;\n    // \t\t\t\t}\n    // \t\t\t});\n    // \t\t\tparams[element.rule1] = {\n    // \t\t\t\t\"$in\": element.rule3\n    // \t\t\t}\n    // \t\t} else if (element.rule2 == \"$regex\") {\n    // \t\t\tlet value = element.rule3 ? element.rule3 : '';\n    // \t\t\tvalue = value.replace(/\\*/g, '.*?');\n    // \t\t\tvalue = \"^\" + value + \"$\";\n    // \t\t\tparams[element.rule1] = {\n    // \t\t\t\t\"$regex\": value\n    // \t\t\t}\n    // \t\t} else {\n    // \t\t\tparams[element.rule1] = element.rule3;\n    // \t\t}\n    // \t\tif (index == i) {\n    // \t\t\tbreak;\n    // \t\t}\n    // \t}\n    // \tfor (var propName in params) {\n    // \t\tif (params[propName] === null || params[propName] === undefined || params[propName] === '') {\n    // \t\t\tdelete params[propName];\n    // \t\t}\n    // \t}\n    // \treturn params;\n    // }\n    getParams(index, arr) {\n      let params = {\n        \"orgId\": this.orgId\n      };\n      if (index == -1) {\n        return params;\n      }\n      let skipApisForTypes = [\"serialNumber\", \"normalizedIpAddress\", \"registrationId\", \"wanAccessType\", \"opMode\", \"softwareVersion\", \"hardwareVersion\"];\n      let skipApis = true;\n      for (let i = 0; i <= index; i++) {\n        let element = arr[i];\n        if (skipApis && skipApisForTypes.indexOf(element.rule1) !== -1) {\n          continue;\n        }\n        if (arr[i][\"rule1\"] == 'normalizedIpAddress') {\n          let value = arr[i][\"rule3\"];\n          if (!this.checkSubnet(value)) {\n            this.Rule_err = true;\n            return;\n          }\n          let ranges = this.toIpRange(value);\n          let value_ = {};\n          let rule;\n          if (ranges.length > 1) {\n            ranges = ranges.map(range => {\n              return {\n                \"normalizedIpAddress\": range\n              };\n            });\n            params[\"$or\"] = ranges;\n          } else {\n            params[element.rule1] = ranges[0];\n          }\n        } else if (element.rule2 == \"$ne\") {\n          params[element.rule1] = {\n            \"$ne\": element.rule3\n          };\n        } else if (element.rule2 == \"$in\") {\n          element['rule3'].forEach(element => {\n            if (!element) {\n              if (this.language.fileLanguage == 'en') {\n                this.ErrorMessage = `Rule ${i + 1} is not valid.`;\n              } else {\n                this.ErrorMessage = `La règle ${i + 1} n'est pas valide.`;\n              }\n              this.Rule_err = true;\n              return;\n            }\n          });\n          params[element.rule1] = {\n            \"$in\": element.rule3\n          };\n        } else if (element.rule2 == \"$regex\") {\n          let value = element.rule3 ? element.rule3 : \"\";\n          value = value.replace(/\\*/g, '.*?');\n          value = \"^\" + value + \"$\";\n          params[element.rule1] = {\n            \"$regex\": value\n          };\n        } else {\n          params[element.rule1] = element.rule3;\n        }\n        if (index == i) {\n          break;\n        }\n      }\n      for (var propName in params) {\n        if (params[propName] === null || params[propName] === undefined || params[propName] === '') {\n          delete params[propName];\n        }\n      }\n      return params;\n    }\n    getParamsNew(index, skipApis) {\n      let params = {\n        \"orgId\": this.orgId\n      };\n      if (index == -1) {\n        return params;\n      }\n      let skipApisForTypes = [\"serialNumber\", \"normalizedIpAddress\", \"registrationId\", \"wanAccessType\", \"opMode\", \"softwareVersion\", \"hardwareVersion\"];\n      for (let i = 0; i <= index; i++) {\n        let element = this.RulesArray[i];\n        if (skipApis && skipApisForTypes.indexOf(element.rule1) !== -1) {\n          continue;\n        }\n        if (this.RulesArray[i][\"rule1\"] == 'normalizedIpAddress') {\n          let value = this.RulesArray[i][\"rule3\"];\n          if (!this.checkSubnet(value)) {\n            this.Rule_err = true;\n            this.ErrorMessage = \"Error! Rule WANIP contains invalid characters, only IPv4 or IPv6 CIDR address allowed(e.g 192.168.1.0/24,2001:db8:1234::/48)\";\n            //Session.set(RULE_KEY_ERROR, Utils.getLabel(\"ruleWANIPContainsInvalidCharactersForIPv4OrIpv6\"));\n            return;\n          } else {\n            this.Rule_err = false;\n          }\n          let ranges = this.toIpRange(value);\n          let value_ = {};\n          let rule;\n          if (ranges.length > 1) {\n            ranges = ranges.map(range => {\n              return {\n                \"normalizedIpAddress\": range\n              };\n            });\n            params[\"$or\"] = ranges;\n          } else {\n            params[element.rule1] = ranges[0];\n          }\n        } else if (element.rule2 == \"$ne\") {\n          params[element.rule1] = {\n            \"$ne\": element.rule3\n          };\n        } else if (element.rule2 == \"$in\") {\n          element['rule3'].forEach(element => {\n            if (!element) {\n              this.ErrorMessage = `Rule ${i + 1} is not valid.`;\n              this.Rule_err = true;\n              return;\n            }\n          });\n          params[element.rule1] = {\n            \"$in\": element.rule3\n          };\n        } else if (element.rule2 == \"$regex\") {\n          let value = element.rule3 ? element.rule3 : \"\";\n          value = value.replace(/\\*/g, '.*?');\n          value = \"^\" + value + \"$\";\n          params[element.rule1] = {\n            \"$regex\": value\n          };\n        } else {\n          params[element.rule1] = element.rule3;\n        }\n        if (index == i) {\n          break;\n        }\n      }\n      for (var propName in params) {\n        if (params[propName] === null || params[propName] === undefined || params[propName] === '') {\n          delete params[propName];\n        }\n      }\n      return params;\n    }\n    checkSubnet(subnet) {\n      if (subnet) {\n        var rtn = true;\n        var cidrArr = subnet.split(\",\");\n        cidrArr.forEach(cidr => {\n          rtn = rtn && (isCidr.v4(cidr) || isCidr.v6(cidr));\n        });\n        return rtn;\n      } else {\n        return false;\n      }\n    }\n    toIpRange(value) {\n      var ranges = value.split(',');\n      var results = [],\n        network,\n        mask,\n        subnet,\n        calculated;\n      if (ranges.length) {\n        ranges.forEach(range => {\n          network = range.split('/')[0];\n          mask = range.split('/')[1];\n          if (this.isIpv4CIDR(range)) {\n            subnet = this.IpSubnetCalculator.calculateSubnetMask(network, mask);\n            calculated = {\n              '$gte': this.paddingIp(subnet.ipLowStr),\n              '$lte': this.paddingIp(subnet.ipHighStr)\n            };\n          } else {\n            subnet = this.IPv6AddressService.range(network, mask);\n            calculated = {\n              '$gte': subnet.ipLowStr,\n              '$lte': subnet.ipHighStr\n            };\n          }\n          results.push(calculated);\n        });\n      }\n      // _.each(ranges, function(range) {\n      //   network = range.split('/')[0];\n      //   mask = range.split('/')[1];\n      //   if (this.IPv6AddressService.isIpv4CIDR(range)) {\n      // \tsubnet = this.IpSubnetCalculator.calculateSubnetMask(network, mask);\n      // \tcalculated = {\n      // \t  '$gte': this.paddingIp(subnet.ipLowStr),\n      // \t  '$lte': this.paddingIp(subnet.ipHighStr)\n      // \t};\n      //   } else {\n      // \tsubnet = this.IPv6Address.range(network, mask);\n      // \tcalculated = {\n      // \t  '$gte': subnet.ipLowStr,\n      // \t  '$lte': subnet.ipHighStr\n      // \t}\n      //   }\n      //   results.push(calculated);\n      // });\n      return results;\n    }\n    supportWanAccessType() {\n      let modelObj = this.findObject(this.RulesArray, 'rule1', 'modelName');\n      let selectedModels = typeof modelObj.rule3 === 'object' ? modelObj.rule3 : [modelObj.rule3];\n      var modelNameOperator = modelObj.rule2 ? modelObj.rule2 : null;\n      var queriedValue = modelObj.rule3;\n      let selectedModel = '';\n      if (queriedValue && modelNameOperator) {\n        if (modelNameOperator === 'Equals') {\n          var result = false;\n          selectedModels.forEach(model => {\n            result = result || /844GE(-\\d)?/i.test(model) || /^[MGS4227/GS4227].*/.test(model);\n            selectedModel = model;\n          });\n          if (result) {\n            //\tthis.rule3items['wanAccessType'] = []\n            //\tthis.GetwanAccessTypes(selectedModel)\n            // setTimeout(() => {\n            // \tthis.rule3items['wanAccessType'] = this.wanAccessTypes;\n            // }, 1000);\n            // if (/^[MGS4227/GS4227].*/.test(selectedModel)) {\n            // \tthis.rule3items['wanAccessType'] = [\n            // \t\t{\n            // \t\t\tid: \"GPON\",\n            // \t\t\tname: \"GPON\"\n            // \t\t},\n            // \t\t{\n            // \t\t\tid: \"XGSPON\",\n            // \t\t\tname: \"XGSPON\"\n            // \t\t},\n            // \t\t{\n            // \t\t\tid: \"CopperEthernet\",\n            // \t\t\tname: \"CopperEthernet\"\n            // \t\t},\n            // \t\t{\n            // \t\t\tid: \"AE\",\n            // \t\t\tname: \"AE\"\n            // \t\t}\n            // \t]\n            // } else {\n            // \t[{\n            // \t\tid: \"AE\",\n            // \t\tname: \"AE\"\n            // \t},\n            // \t{\n            // \t\tid: \"GPON\",\n            // \t\tname: \"GPON\"\n            // \t}\n            // \t]\n            // }\n            // var modelIndex = [\"GS4227\", \"GS4227W\", \"MGS4227\", \"MGS4227W\", \"GS4227W-2\", \"GS4227-2\", \"MGS4227-2\", \"MGS4227W-2\"].indexOf(selectedModel);\n            // if (modelIndex != -1) {\n            // \tlet wanAccType = {\n            // \t\tid: \"10G-AE\",\n            // \t\tname: \"10G-AE\"\n            // \t}\n            // \tthis.rule3items['wanAccessType'].push(wanAccType);\n            // }\n            // if (selectedModel == 'GS4220E' || selectedModel == 'MGS4220E') {\n            // \tthis.rule3items['wanAccessType'] = this.rule3items['wanAccessType']?.filter(x => x.id != \"AE\")\n            // }\n          }\n          return result;\n        } else if (modelNameOperator === '$in') {\n          var result = true;\n          selectedModels.forEach(model => {\n            result = result && /844GE(-\\d)?/i.test(model) || /^[MGS4227/GS4227].*/.test(model);\n          });\n          if (result) {\n            //\tthis.rule3items['wanAccessType'] = []\n            //\tthis.GetwanAccessTypes(selectedModel)\n            // setTimeout(() => {\n            // \tthis.rule3items['wanAccessType'] = this.wanAccessTypes;\n            // }, 1000);\n            // if (/^[MGS4227/GS4227].*/.test(selectedModel)) {\n            // \tthis.rule3items['wanAccessType'] = [\n            // \t\t{\n            // \t\t\tid: \"GPON\",\n            // \t\t\tname: \"GPON\"\n            // \t\t},\n            // \t\t{\n            // \t\t\tid: \"XGSPON\",\n            // \t\t\tname: \"XGSPON\"\n            // \t\t},\n            // \t\t{\n            // \t\t\tid: \"CopperEthernet\",\n            // \t\t\tname: \"CopperEthernet\"\n            // \t\t}\n            // \t]\n            // } else {\n            // \t[{\n            // \t\tid: \"AE\",\n            // \t\tname: \"AE\"\n            // \t},\n            // \t{\n            // \t\tid: \"GPON\",\n            // \t\tname: \"GPON\"\n            // \t}\n            // \t]\n            // }\n            // var modelIndex = [\"GS4227\", \"GS4227W\", \"MGS4227\", \"MGS4227W\", \"GS4227W-2\", \"GS4227-2\", \"MGS4227-2\", \"MGS4227W-2\"].indexOf(selectedModel);\n            // if (modelIndex != -1) {\n            // \tlet wanAccType = {\n            // \t\tid: \"10G-AE\",\n            // \t\tname: \"10G-AE\"\n            // \t}\n            // \tthis.rule3items['wanAccessType'].push(wanAccType);\n            // }\n            // if (selectedModel == 'GS4220E' || selectedModel == 'MGS4220E') {\n            // \tthis.rule3items['wanAccessType'] = this.rule3items['wanAccessType']?.filter(x => x.id != \"AE\")\n            // }\n          }\n          return result;\n        } else {\n          return false;\n        }\n      }\n    }\n    findObject(array, key, value) {\n      for (var i = 0; i < array.length; i++) {\n        if (array[i][key] === value) {\n          return array[i];\n        }\n      }\n      return null;\n    }\n    getRules() {\n      var rules = [],\n        index = 0,\n        filter,\n        oper = '',\n        value_,\n        oper_desc,\n        val_desc,\n        value;\n      let useKeys = [];\n      if (this.cpeFilter) {\n        for (const key in this.cpeFilter) {\n          value = this.cpeFilter[key];\n          if (key === '$or') {\n            filter = this.findObject(this.rule1items, 'id', Object.keys(value[0])[0]);\n          } else {\n            filter = this.findObject(this.rule1items, 'id', key);\n          }\n          oper = '';\n          value_ = value;\n          if (filter.id === 'normalizedIpAddress') {\n            oper = '$subnets';\n            value_ = this.fromIpRange(value_);\n          } else {\n            if (typeof value == 'object') {\n              for (oper in value) {\n                if (value.hasOwnProperty(oper) && oper !== '$options') {\n                  value_ = value[oper];\n                }\n              }\n            }\n            if (oper === '$regex') {\n              if (value_.slice(0, 1) === '^' && value_.slice(-1) === '$') {\n                value_ = value_.substring(1, value_.length - 1);\n              }\n              value_ = this.replaceAll(value_, '.*?', '*');\n              /*if(value_.indexOf('*')<0){\r\n               value_ = '*' + value_ + '*';\r\n               }*/\n            }\n          }\n\n          oper_desc = this.operatorsMapping[oper] || 'Equals';\n          val_desc = value_.toString();\n          rules.push({\n            index: index,\n            key: filter.id,\n            keydesc: filter.label,\n            oper: oper,\n            operdesc: oper_desc,\n            value: value_,\n            valuedesc: val_desc\n          });\n          useKeys.push({\n            index: index,\n            key: filter.id,\n            oper: oper,\n            value: value_\n          });\n          index++;\n        }\n      }\n      return rules;\n    }\n    bin2HexOfSection(binStr) {\n      return parseInt(binStr, 2).toString(16);\n    }\n    hex2BinOfSection(hexStr) {\n      return parseInt(hexStr, 16).toString(2);\n    }\n    getSubnet(range) {\n      var value_start = range['$gte'];\n      var value_end = range['$lte'];\n      var result_;\n      if (this.IPv6AddressService.isIpv6Address(value_start)) {\n        var subnet = this.IPv6AddressService.cidr(value_start, value_end);\n        result_ = subnet.ipLowStr + \"/\" + subnet.prefixSize;\n      } else {\n        value_start = this.unpaddingIp(value_start);\n        value_end = this.unpaddingIp(value_end);\n        var subnet = this.IpSubnetCalculator.calculate(value_start, value_end);\n        result_ = subnet[0].ipLowStr + \"/\" + subnet[0].prefixSize;\n      }\n      return result_;\n    }\n    fromIpRange(ranges) {\n      var result;\n      if (typeof ranges === 'object' && Array.isArray(ranges)) {\n        result = ranges.map(range => {\n          return this.getSubnet(range['normalizedIpAddress']);\n        });\n        result = result.join();\n      } else {\n        result = this.getSubnet(ranges);\n      }\n      return result;\n    }\n    padSection(section, len) {\n      var padding = \"0\".repeat(len);\n      if (section.length < padding.length) {\n        section = padding.substring(0, padding.length - section.length) + section;\n      }\n      return section;\n    }\n    unpaddingIp(ip) {\n      return ip.split('.').map(Number).join('.');\n    }\n    paddingIp(ip) {\n      var bitArray = ip.split('.');\n      var padded = bitArray.map(function (bit) {\n        if (bit.length === 1) {\n          bit = \"00\" + bit;\n        } else if (bit.length === 2) {\n          bit = \"0\" + bit;\n        }\n        return bit;\n      });\n      // var padded = _.map(bitArray, function (bit) {\n      // \tif (bit.length === 1) {\n      // \t\tbit = \"00\" + bit;\n      // \t} else if (bit.length === 2) {\n      // \t\tbit = \"0\" + bit;\n      // \t}\n      // \treturn bit;\n      // });\n      return padded.join('.');\n    }\n    replaceAll(string, find, replace) {\n      return string.replace(new RegExp(this.escapeRegExp(find), 'g'), replace);\n    }\n    escapeRegExp(string) {\n      return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n    }\n    getDeviceType(index) {\n      let params = {\n        \"orgId\": this.orgId\n      };\n      params = params ? params : {\n        orgId: this.ssoService.getOrgId()\n      };\n      this.allDeviceGrpSubscribe = this.service.GetDeviceType(JSON.stringify(params)).subscribe(res => {\n        let emptyObj = {\n          id: '',\n          name: ''\n        };\n        let manufact_arr = [];\n        let model_arr = [];\n        let swver_arr = [];\n        let hwver_arr = [];\n        let fsan_arr = [];\n        let wanip_arr = [];\n        let reg_arr = [];\n        let wanacc_arr = [];\n        let mode_arr = [];\n        this.DeviceTypeArr = res;\n        let opmode = [{\n          \"id\": \"WAP\",\n          \"name\": \"WAP\"\n        }, {\n          \"id\": \"RG\",\n          \"name\": \"RG\"\n        }];\n        for (var i = 0; i < this.DeviceTypeArr.length; i++) {\n          manufact_arr.push({\n            \"id\": this.DeviceTypeArr[i]['manufacturer'],\n            \"name\": this.DeviceTypeArr[i]['manufacturer']\n          });\n          model_arr.push({\n            \"id\": this.DeviceTypeArr[i]['modelName'],\n            \"name\": this.DeviceTypeArr[i]['modelName']\n          });\n          swver_arr.push({\n            \"id\": this.DeviceTypeArr[i]['softwareVersion'],\n            \"name\": this.DeviceTypeArr[i]['softwareVersion']\n          });\n          hwver_arr.push({\n            \"id\": this.DeviceTypeArr[i]['hardwareVersion'],\n            \"name\": this.DeviceTypeArr[i]['hardwareVersion']\n          });\n          fsan_arr.push({\n            \"id\": this.DeviceTypeArr[i]['serialNumber'],\n            \"name\": this.DeviceTypeArr[i]['serialNumber']\n          });\n          wanip_arr.push({\n            \"id\": this.DeviceTypeArr[i]['ipAddress'],\n            \"name\": this.DeviceTypeArr[i]['ipAddress']\n          });\n          reg_arr.push({\n            \"id\": this.DeviceTypeArr[i]['registrationId'],\n            \"name\": this.DeviceTypeArr[i]['registrationId']\n          });\n          wanacc_arr.push({\n            \"id\": this.DeviceTypeArr[i]['wanAccessType'],\n            \"name\": this.DeviceTypeArr[i]['wanAccessType']\n          });\n          //mode_arr.push({\"id\":this.DeviceTypeArr[i]['opMode'],\"name\":this.DeviceTypeArr[i]['opMode']})\n          mode_arr = opmode;\n        }\n        manufact_arr = this.unique(manufact_arr);\n        model_arr = this.unique(model_arr);\n        swver_arr = this.unique(swver_arr);\n        hwver_arr = this.unique(hwver_arr);\n        fsan_arr = this.unique(fsan_arr);\n        wanip_arr = this.unique(wanip_arr);\n        reg_arr = this.unique(reg_arr);\n        wanacc_arr = this.unique(wanacc_arr);\n        mode_arr = this.unique(mode_arr);\n        this.rule3items = {\n          \"manufacturer\": manufact_arr,\n          \"modelName\": model_arr,\n          \"softwareVersion\": swver_arr,\n          \"hardwareVersion\": hwver_arr,\n          \"serialNumber\": fsan_arr,\n          \"normalizedIpAddress\": wanip_arr,\n          \"registrationId\": reg_arr,\n          \"wanAccessType\": this.defaultWanAccessTypes,\n          \"opMode\": mode_arr\n        };\n        this.displayEditGroup(this.deviceGroupId);\n      }, err => {\n        this.pageErrorHandle(err);\n        // this.commonOrgService.pageScrollTop();\n      });\n    }\n\n    startSpin(id) {\n      var btn = document.getElementById(id);\n      if (btn) {\n        if (btn.children[0]) {\n          btn.children[0].classList.add('spin-animation');\n          setTimeout(function () {\n            btn.children[0].classList.remove('spin-animation');\n          }, 500);\n        }\n      }\n    }\n    endSpin(id) {\n      var btn = document.getElementById(id);\n      if (btn) {\n        if (btn.children[0]) {\n          setTimeout(function () {\n            btn.children[0].classList.remove('spin-animation');\n          }, 1000);\n        }\n      }\n    }\n    changeTableStatusLanguageUnDisc(dtObj) {\n      const nf = new Intl.NumberFormat();\n      this.tableCountsUnDic = {\n        searchText: dtObj.oPreviousSearch.sSearch.replace(/\\s+/g, \"\"),\n        total: dtObj._iRecordsTotal,\n        displayCount: dtObj._iDisplayLength,\n        displayed: dtObj._iRecordsDisplay,\n        start: dtObj._iDisplayStart\n      };\n      const isFrench = sessionStorage.getItem('defaultLanguage') == 'fr';\n      const isSpanish = sessionStorage.getItem('defaultLanguage') == 'es';\n      const isGermen = sessionStorage.getItem('defaultLanguage') == 'de_DE';\n      const filtered = `${dtObj.oPreviousSearch.sSearch.replace(/\\s+/g, \"\") ? isFrench ? `(filtrées à partir des ${nf.format(dtObj._iRecordsTotal)} entrées totales)` : isSpanish ? `(filtrado de un total de ${nf.format(dtObj._iRecordsTotal)} entradas)` : isGermen ? `(gefiltert aus ${nf.format(dtObj._iRecordsTotal)} Einträgen)` : `(filtered from ${nf.format(dtObj._iRecordsTotal)} total entries)` : ''}`;\n      const startCount = dtObj._iRecordsDisplay == 0 ? -1 : dtObj._iDisplayStart;\n      const showingCount = dtObj._iDisplayStart + dtObj._iDisplayLength > dtObj._iRecordsDisplay ? dtObj._iRecordsDisplay : dtObj._iDisplayStart + dtObj._iDisplayLength;\n      $('#devicegrp-info-tbl-static-undisc_wrapper [role=\"status\"]').text(isFrench ? `Affichage de ${nf.format(startCount + 1)} à ${nf.format(showingCount)} des ${nf.format(dtObj._iRecordsDisplay)} entrées ${filtered}` : isSpanish ? `Se muestran del ${nf.format(startCount + 1)} al ${nf.format(showingCount)} de ${nf.format(dtObj._iRecordsDisplay)} resultados ${filtered}` : isGermen ? `Angezeigt ${nf.format(startCount + 1)} bis ${nf.format(showingCount)} von ${nf.format(dtObj._iRecordsDisplay)} ergebnissen ${filtered}` : `Showing ${nf.format(startCount + 1)} to ${nf.format(showingCount)} of ${nf.format(dtObj._iRecordsDisplay)} entries ${filtered}`);\n      //$(\".dataTables_filter label\")[0].childNodes[0].nodeValue = isFrench ? 'Chercher:' : 'Search:';\n      //$(\".dataTables_length label\")[0].childNodes[0].nodeValue = isFrench ? 'Afficher les ' : 'Show ';\n      //$(\".dataTables_length label\")[0].childNodes[2].nodeValue = isFrench ? ' entrées' : ' entries';\n      $(\"#devicegrp-info-tbl-static-undisc_first\").text(isFrench ? 'Le début' : isSpanish ? 'Primero' : isGermen ? 'Erste Seite' : 'First');\n      $(\"#devicegrp-info-tbl-static-undisc_previous\").text(isFrench ? 'Le début' : isSpanish ? 'Primero' : isGermen ? 'Zurück' : 'Previous');\n      $(\"#devicegrp-info-tbl-static-undisc_next\").text(isFrench ? 'Le début' : isSpanish ? 'Primero' : isGermen ? 'Weiter' : 'Next');\n      $(\"#devicegrp-info-tbl-static-undisc_last\").text(isFrench ? 'Le début' : isSpanish ? 'Primero' : isGermen ? 'Letzte' : 'Last');\n    }\n    changeTableStatusLanguageStaticDisc(dtObj) {\n      const nf = new Intl.NumberFormat();\n      this.tableStaticDisc = {\n        searchText: dtObj.oPreviousSearch.sSearch.replace(/\\s+/g, \"\"),\n        total: dtObj._iRecordsTotal,\n        displayCount: dtObj._iDisplayLength,\n        displayed: dtObj._iRecordsDisplay,\n        start: dtObj._iDisplayStart\n      };\n      const isFrench = sessionStorage.getItem('defaultLanguage') == 'fr';\n      const isSpanish = sessionStorage.getItem('defaultLanguage') == 'es';\n      const isGermen = sessionStorage.getItem('defaultLanguage') == 'de_DE';\n      const filtered = `${dtObj.oPreviousSearch.sSearch.replace(/\\s+/g, \"\") ? isFrench ? `(filtrées à partir des ${nf.format(dtObj._iRecordsTotal)} entrées totales)` : isSpanish ? `(filtrado de un total de ${nf.format(dtObj._iRecordsTotal)} entradas)` : isGermen ? `(gefiltert aus ${nf.format(dtObj._iRecordsTotal)} Einträgen)` : `(filtered from ${nf.format(dtObj._iRecordsTotal)} total entries)` : ''}`;\n      const startCount = dtObj._iRecordsDisplay == 0 ? -1 : dtObj._iDisplayStart;\n      const showingCount = dtObj._iDisplayStart + dtObj._iDisplayLength > dtObj._iRecordsDisplay ? dtObj._iRecordsDisplay : dtObj._iDisplayStart + dtObj._iDisplayLength;\n      $('#devicegrp-info-tbl-static_wrapper').find('#devicegrp-info-tbl-static_info').text(isFrench ? `Affichage de ${nf.format(startCount + 1)} à ${nf.format(showingCount)} des ${nf.format(dtObj._iRecordsDisplay)} entrées ${filtered}` : isSpanish ? `Se muestran del ${nf.format(startCount + 1)} al ${nf.format(showingCount)} de ${nf.format(dtObj._iRecordsDisplay)} resultados ${filtered}` : isGermen ? `Angezeigt ${nf.format(startCount + 1)} bis ${nf.format(showingCount)} von ${nf.format(dtObj._iRecordsDisplay)} ergebnissen ${filtered}` : `Showing ${nf.format(startCount + 1)} to ${nf.format(showingCount)} of ${nf.format(dtObj._iRecordsDisplay)} entries ${filtered}`);\n      //$(\".dataTables_filter label\")[0].childNodes[0].nodeValue = isFrench ? 'Chercher:' : 'Search:';\n      //$(\".dataTables_length label\")[0].childNodes[0].nodeValue = isFrench ? 'Afficher les ' : 'Show ';\n      //$(\".dataTables_length label\")[0].childNodes[2].nodeValue = isFrench ? ' entrées' : ' entries';\n      $(\"#devicegrp-info-tbl-static_first\").text(isFrench ? 'Le début' : isSpanish ? 'Primero' : isGermen ? 'Erste Seite' : 'First');\n      $(\"#devicegrp-info-tbl-static_previous\").text(isFrench ? 'Le début' : isSpanish ? 'Primero' : isGermen ? 'Zurück' : 'Previous');\n      $(\"#devicegrp-info-tbl-static_next\").text(isFrench ? 'Le début' : isSpanish ? 'Primero' : isGermen ? 'Weiter' : 'Next');\n      $(\"#devicegrp-info-tbl-static_last\").text(isFrench ? 'Le début' : isSpanish ? 'Primero' : isGermen ? 'Letzte' : 'Last');\n    }\n    changeTableStatusLanguageDeviceGrpInfo(dtObj) {\n      const nf = new Intl.NumberFormat();\n      this.tableCountsDeviceGrpInfo = {\n        searchText: dtObj.oPreviousSearch.sSearch.replace(/\\s+/g, \"\"),\n        total: dtObj._iRecordsTotal,\n        displayCount: dtObj._iDisplayLength,\n        displayed: dtObj._iRecordsDisplay,\n        start: dtObj._iDisplayStart\n      };\n      const isFrench = sessionStorage.getItem('defaultLanguage') == 'fr';\n      const isSpanish = sessionStorage.getItem('defaultLanguage') == 'es';\n      const isGermen = sessionStorage.getItem('defaultLanguage') == 'de_DE';\n      const filtered = `${dtObj.oPreviousSearch.sSearch.replace(/\\s+/g, \"\") ? isFrench ? `(filtrées à partir des ${nf.format(dtObj._iRecordsTotal)} entrées totales)` : isSpanish ? `(filtrado de un total de ${nf.format(dtObj._iRecordsTotal)} entradas)` : isGermen ? `(gefiltert aus ${nf.format(dtObj._iRecordsTotal)} Einträgen)` : `(filtered from ${nf.format(dtObj._iRecordsTotal)} total entries)` : ''}`;\n      const startCount = dtObj._iRecordsDisplay == 0 ? -1 : dtObj._iDisplayStart;\n      const showingCount = dtObj._iDisplayStart + dtObj._iDisplayLength > dtObj._iRecordsDisplay ? dtObj._iRecordsDisplay : dtObj._iDisplayStart + dtObj._iDisplayLength;\n      $('#devicegrp-info-tbl_wrapper div[role=\"status\"]').text(isFrench ? `Affichage de ${nf.format(startCount + 1)} à ${nf.format(showingCount)} des ${nf.format(dtObj._iRecordsDisplay)} entrées ${filtered}` : isSpanish ? `Se muestran del ${nf.format(startCount + 1)} al ${nf.format(showingCount)} de ${nf.format(dtObj._iRecordsDisplay)} resultados ${filtered}` : isGermen ? `Angezeigt ${nf.format(startCount + 1)} bis ${nf.format(showingCount)} von ${nf.format(dtObj._iRecordsDisplay)} ergebnissen ${filtered}` : `Showing ${nf.format(startCount + 1)} to ${nf.format(showingCount)} of ${nf.format(dtObj._iRecordsDisplay)} entries ${filtered}`);\n      //$(\".dataTables_filter label\")[0].childNodes[0].nodeValue = isFrench ? 'Chercher:' : 'Search:';\n      //$(\".dataTables_length label\")[0].childNodes[0].nodeValue = isFrench ? 'Afficher les ' : 'Show ';\n      //$(\".dataTables_length label\")[0].childNodes[2].nodeValue = isFrench ? ' entrées' : ' entries';\n      $(\"#devicegrp-info-tbl_first\").text(isFrench ? 'Le début' : isSpanish ? 'Primero' : isGermen ? 'Erste Seite' : 'First');\n      $(\"#devicegrp-info-tbl_previous\").text(isFrench ? 'Précédent' : isSpanish ? 'Anterior' : isGermen ? 'Zurück' : 'Previous');\n      $(\"#devicegrp-info-tbl_next\").text(isFrench ? 'Suivant' : isSpanish ? 'Siguiente' : isGermen ? 'Weiter' : 'Next');\n      $(\"#devicegrp-info-tbl_last\").text(isFrench ? 'Dernière' : isSpanish ? 'Último' : isGermen ? 'Letzte' : 'Last');\n    }\n    hideSuccess() {\n      this.showSuccess = false;\n      this.successMsg = '';\n    }\n    goBack() {\n      //\tthis._location.back();\n      if (this.router.url.includes(\"cco/operations/configuration/system-groups\") || this.router.url.includes('cco/operations/device-groups')) {\n        this.router.navigate(['cco/operations/configuration/system-groups']);\n      } else if (this.router.url.includes(\"/cco-foundation/foundation-configuration/device-groups-add\") || this.router.url.includes('cco-foundation/foundation-configuration/device-groups')) {\n        this.router.navigate(['cco-foundation/foundation-configuration/configuration-prerequisites/device-groups']);\n      } else {\n        this.router.navigate(['support/netops-management/operations/devices-groups']);\n      }\n    }\n    // onselectitem(i) {\n    // \tconsole.log(i)\n    // \treturn this.RulesArray[i]['rule3items'][this.RulesArray[i].rule1].filter(e => e.id != '')\n    // }\n    workFlowMenbers(id = this.deletedata._id, name = this.deletedata.name, warningDelete = true) {\n      var _a;\n      this.loading = true;\n      sessionStorage.setItem('workflowid', id);\n      sessionStorage.setItem('workflowName', name);\n      const obj = {\n        /* modalname : this.modalname,\r\n        MemberCount : this.MemberCount,\r\n        workflowcount : this.workflowcount, */\n        deletedata: this.deletedata,\n        retainDelete: true\n      };\n      if (((_a = window.location.href) === null || _a === void 0 ? void 0 : _a.indexOf('/cco/operations/configuration/system-groups')) !== -1) {\n        this.router.navigate(['./cco/operations/configuration/devices-group/workflow']);\n        return;\n      }\n      this.ssoService.redirectByUrl([`/support/netops-management/devices-groups-workflow`, `cco/device-groups-workflow`, `cco-foundation/foundation-configuration/device-groups-workflow`, `/cco/operations/device-groups-workflow`], {\n        state: warningDelete ? obj : {}\n      });\n    }\n    getWorkflows() {\n      var _a, _b;\n      let filterOnBoot = ((_b = (_a = this.router) === null || _a === void 0 ? void 0 : _a.url) === null || _b === void 0 ? void 0 : _b.includes('support/netops-management/')) ? true : false;\n      this.getAllWorkFlows = this.service.getWorkflowsById(this.orgId, this.systemGroupId, filterOnBoot).subscribe(res => {\n        if (res) {\n          this.workflowMemberData = res;\n        }\n        this.loading = false;\n      }, err => {\n        this.pageErrorHandle(err);\n        this.isError = true;\n        this.loading = false;\n      });\n    }\n    cancelWorkFlowGroup() {\n      let obj = history.state;\n      if (obj.retainDelete) obj[\"retainApproval\"] = true;\n      // if (this.router.url.includes('cco/operations/device-groups-workflow')) {\n      // \tthis.router.navigate(['cco/operations/cco-subscriber-operations/operations/devices-groups'], { state: obj });\n      // } \n      if (this.router.url.includes(\"cco/operations/configuration/devices-group/workflow\") || this.router.url.includes('cco/operations/device-groups')) {\n        this.router.navigate(['cco/operations/configuration/system-groups']);\n      } else {\n        this.ssoService.redirectByUrl(['/support/netops-management/operations/devices-groups', '/cco/operations/configuration/system-groups',\n        // 'cco/operations/cco-system-operations/device-groups',\n        'cco-foundation/foundation-configuration/configuration-prerequisites/device-groups', 'cco/operations/cco-subscriber-operations/operations/devices-groups'], {\n          state: obj\n        });\n      }\n    }\n    getDevicesearchCount() {\n      this.allDeviceGrpSubscribe = this.service.getDeviceGoupsearchCount(this.orgId, this.searchText).subscribe(res => {\n        this.DeviceCount = res.count;\n      }, err => {\n        this.pageErrorHandle(err);\n      });\n    }\n    searchGroupBy() {\n      this.loading = true;\n      if (this.searchText) {\n        this.searchurl = `${environment.SUPPORT_URL}/netops-device/group?${this.ssoService.getOrg(this.orgId)}deviceId=${this.searchText}`;\n        // this.getDevicesearchCount();\n        // setTimeout(() => {\n        this.rerender(1);\n        // }, 3000);\n        // this.getAllWorkFlows = this.service.getDeviceGroups(this.orgId, this.searchText).subscribe((data) => {\n        // \tthis.DeviceTableData = data;\n        // \tthis.loading = false\n        // }, (err: HttpErrorResponse) => {\n        // \tthis.pageErrorHandle(err);\n        // \tthis.isError = true\n        // \tthis.loading = false\n        // })\n        // this.GetabSerachList()\n      } else {\n        this.searchurl = `${environment.SUPPORT_URL}/netops-device/group?${this.ssoService.getOrg(this.orgId)}`;\n        // this.getDeviceCount();\n        // setTimeout(() => {\n        this.rerender(1);\n        // }, 3000);\n        // this.GetabList();\n      }\n    }\n\n    changeTableStatusLanguageDeviceGroup(dtObj) {\n      const nf = new Intl.NumberFormat();\n      this.tableCountsDeviceGroup = {\n        searchText: dtObj.oPreviousSearch.sSearch.replace(/\\s+/g, \"\"),\n        total: dtObj._iRecordsTotal,\n        displayCount: dtObj._iDisplayLength,\n        displayed: dtObj._iRecordsDisplay,\n        start: dtObj._iDisplayStart\n      };\n      const isFrench = sessionStorage.getItem('defaultLanguage') == 'fr';\n      const isSpanish = sessionStorage.getItem('defaultLanguage') == 'es';\n      const isGermen = sessionStorage.getItem('defaultLanguage') == 'de_DE';\n      const filtered = `${dtObj.oPreviousSearch.sSearch.replace(/\\s+/g, \"\") ? isFrench ? `(filtrées à partir des ${nf.format(dtObj._iRecordsTotal)} entrées totales)` : isSpanish ? `(filtrado de un total de ${nf.format(dtObj._iRecordsTotal)} entradas)` : isGermen ? `(gefiltert aus ${nf.format(dtObj._iRecordsTotal)} Einträgen)` : `(filtered from ${nf.format(dtObj._iRecordsTotal)} total entries)` : ''}`;\n      const startCount = dtObj._iRecordsDisplay == 0 ? -1 : dtObj._iDisplayStart;\n      const showingCount = dtObj._iDisplayStart + dtObj._iDisplayLength > dtObj._iRecordsDisplay ? dtObj._iRecordsDisplay : dtObj._iDisplayStart + dtObj._iDisplayLength;\n      $('#devicegrp-table_wrapper').find('#devicegrp-table_info').text(isFrench ? `Affichage de ${nf.format(startCount + 1)} à ${nf.format(showingCount)} des ${nf.format(dtObj._iRecordsDisplay)} entrées ${filtered}` : isSpanish ? `Se muestran del ${nf.format(startCount + 1)} al ${nf.format(showingCount)} de ${nf.format(dtObj._iRecordsDisplay)} resultados ${filtered}` : isGermen ? `Angezeigt ${nf.format(startCount + 1)} bis ${nf.format(showingCount)} von ${nf.format(dtObj._iRecordsDisplay)} ergebnissen ${filtered}` : `Showing ${nf.format(startCount + 1)} to ${nf.format(showingCount)} of ${nf.format(dtObj._iRecordsDisplay)} entries ${filtered}`);\n      $(\"#devicegrp-table_first\").text(isFrench ? 'Le début' : isSpanish ? 'Primero' : isGermen ? 'Erste Seite' : 'First');\n      $(\"#devicegrp-table_previous\").text(isFrench ? 'Précédent' : isSpanish ? 'Anterior' : isGermen ? 'Zurück' : 'Previous');\n      $(\"#devicegrp-table_next\").text(isFrench ? 'Suivant' : isSpanish ? 'Siguiente' : isGermen ? 'Weiter' : 'Next');\n      $(\"#devicegrp-table_last\").text(isFrench ? 'Dernière' : isSpanish ? 'Último' : isGermen ? 'Letzte' : 'Last');\n    }\n  }\n  DevicesGroupsComponent.ɵfac = function DevicesGroupsComponent_Factory(t) {\n    return new (t || DevicesGroupsComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.SsoAuthService), i0.ɵɵdirectiveInject(i3.DeviceGroupService), i0.ɵɵdirectiveInject(i4.DataServiceService), i0.ɵɵdirectiveInject(i4.DataServiceService), i0.ɵɵdirectiveInject(i5.FormBuilder), i0.ɵɵdirectiveInject(i6.NgbModal), i0.ɵɵdirectiveInject(i7.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i8.Router), i0.ɵɵdirectiveInject(i8.ActivatedRoute), i0.ɵɵdirectiveInject(i9.IpSubnetCalculatorService), i0.ɵɵdirectiveInject(i10.IPv6AddressService), i0.ɵɵdirectiveInject(i11.Location), i0.ɵɵdirectiveInject(i12.Title));\n  };\n  DevicesGroupsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DevicesGroupsComponent,\n    selectors: [[\"app-devices-groups\"]],\n    viewQuery: function DevicesGroupsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(DataTableDirective, 5);\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(DataTableDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dtElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.deleteModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dtElements = _t);\n      }\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[\"role\", \"alert\", \"class\", \"alert alert-warning\", 4, \"ngIf\"], [\"id\", \"device-groups\", \"class\", \"tab-pane\", 4, \"ngIf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\"], [\"id\", \"device-groups\", 1, \"tab-pane\"], [\"class\", \"w-100 alert alert alert-danger fade show\", 4, \"ngIf\"], [\"class\", \"w-100 alert alert alert-success  fade show\", 4, \"ngIf\"], [\"class\", \"py-3 warning-msg\", 4, \"ngIf\"], [1, \"d-block\", \"my-3\", \"d-sm-none\", \"ccl-Secondary-title\", \"mb-2\", \"col-md-12\", \"border-bottom\"], [1, \"position-relative\", 3, \"hidden\"], [1, \"row\"], [\"class\", \"loader\", 4, \"ngIf\"], [1, \"col-md-6\", \"text-left\", \"my-3\"], [4, \"ngIf\"], [\"class\", \"w-100\", 4, \"ngIf\"], [\"id\", \"devicegrp-table\", \"datatable\", \"\", \"class\", \"device-group-table table row-border hover dataTable table-alter\", 3, \"dtOptions\", 4, \"ngIf\"], [3, \"hidden\"], [3, \"formGroup\"], [1, \"d-flex\", \"align-items-center\", \"border-bottom\", \"border-w2\", \"mb-4\"], [1, \"col-md-8\", \"pl-0\"], [1, \"net-ops-title\", \"pb-3\"], [1, \"col-md-4\", \"pr-0\", \"text-right\"], [\"class\", \"row\", 4, \"ngIf\"], [\"class\", \"col-md-6 p-0\", 4, \"ngIf\"], [1, \"col-md-12\", \"p-0\"], [\"class\", \"form-group row\", 4, \"ngIf\"], [\"id\", \"devicegrp-info-tbl-static\", \"datatable\", \"\", \"class\", \"row-border hover table-alter\", 3, \"dtOptions\", 4, \"ngIf\"], [\"id\", \"devicegrp-info-tbl-static-undisc\", \"datatable\", \"\", \"class\", \"row-border hover table-alter\", 3, \"dtOptions\", 4, \"ngIf\"], [\"class\", \"detail-view\", 4, \"ngIf\"], [1, \"w-100\", \"alert\", \"alert\", \"alert-danger\", \"fade\", \"show\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [1, \"w-100\", \"alert\", \"alert\", \"alert-success\", \"fade\", \"show\"], [1, \"success-img\"], [\"src\", \"./assets/img/success-icon.svg\"], [1, \"d-inline\"], [1, \"d-inline\", 3, \"innerHtml\"], [\"type\", \"button\", \"id\", \"hide-successs-btn\", 1, \"close\", 3, \"click\"], [1, \"py-3\", \"warning-msg\"], [1, \"d-flex\", \"warning-msg-info\"], [\"src\", \"./assets/img/warning-icon.svg\", \"width\", \"100%\"], [1, \"span-inline-ww\", 3, \"innerHtml\"], [1, \"text-right\"], [\"id\", \"deletePFBtn\", 1, \"btn-default\", \"primary\", \"mr-2\", 3, \"disabled\", \"click\"], [1, \"btn-default\", \"btn-dft\", 3, \"click\"], [1, \"loader\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [\"type\", \"button\", \"class\", \"btn-default primary px-3\", \"id\", \"add-device-group-btn\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"id\", \"add-device-group-btn\", 1, \"btn-default\", \"primary\", \"px-3\", 3, \"click\"], [1, \"w-100\"], [1, \"d-inline-flex\", \"col-5\", \"ccl-form\", \"search-box-device\", \"float-right\", \"px-0\"], [1, \"device-search-input\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\", \"keyup.enter\"], [\"id\", \"deviceGroupSearchBtn\", 1, \"btn-round\", \"search-btn-round\", \"primary\", 3, \"click\"], [\"src\", \"../../../../../assets/img/ic_search_white.svg\"], [\"id\", \"devicegrp-table\", \"datatable\", \"\", 1, \"device-group-table\", \"table\", \"row-border\", \"hover\", \"dataTable\", \"table-alter\", 3, \"dtOptions\"], [1, \"devices-groups-name\"], [1, \"devices-groups-description\"], [1, \"min-w-130\"], [1, \"min-w-160\"], [\"class\", \"devices-groups-edit-delete bgimage-none\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"devices-groups-edit-delete\", \"bgimage-none\"], [3, \"id\"], [1, \"cursor-pointer\", 3, \"click\"], [1, \"text-left\"], [\"class\", \"cursor-pointer text-decoration-none\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"none-count text-decoration-none\", 4, \"ngIf\"], [1, \"cursor-pointer\", \"text-decoration-none\", 3, \"click\"], [1, \"none-count\", \"text-decoration-none\"], [1, \"del\", \"ml-6\", 3, \"title\"], [\"href\", \" javascript:void(0)\", \"class\", \"cursor-pointer\", 3, \"click\", 4, \"ngIf\"], [\"href\", \" javascript:void(0)\", 1, \"cursor-pointer\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"fa\", \"fa-trash-o\", 3, \"title\"], [\"colspan\", \"5\", 1, \"no-data-available\"], [1, \"col\", \"align-self-end\"], [\"type\", \"button\", \"id\", \"cancelbtn\", 1, \"btn\", \"btn-link\", \"primary\", \"mr-2\", \"mb-2\", 3, \"click\"], [\"type\", \"button\", \"id\", \"submitbtn\", \"id\", \"submit-device-group-btn\", 1, \"btn-default\", \"primary\", \"mb-3\", 3, \"click\"], [1, \"d-inline-flex\"], [1, \"col-md-6\", \"p-0\"], [1, \"form-group\", \"ccl-form\", \"row\", 3, \"ngClass\"], [\"for\", \"deviceName\", 1, \"col-sm-12\", \"col-form-label\"], [1, \"error\"], [1, \"col-sm-12\", 3, \"ngClass\"], [\"type\", \"text\", \"id\", \"deviceName\", \"formControlName\", \"name\", \"trimSpace\", \"\", 1, \"grey-input-color\", 3, \"placeholder\", \"formValue\", \"keyup\"], [\"class\", \"errorMessage\", 4, \"ngIf\"], [\"class\", \"form-group ccl-form row\", 4, \"ngIf\"], [1, \"form-group\", \"row\"], [1, \"col-sm-12\", \"col-form-label\"], [1, \"col-md-12\", \"form-check-cus\"], [1, \"form-check-inline\", 3, \"ngClass\"], [\"type\", \"radio\", \"formControlName\", \"type\", \"id\", \"devTypeDynamic\", \"value\", \"dynamic\", 1, \"form-check-input\", \"mr-2\", 3, \"ngClass\", \"ngModel\", \"ngModelChange\", \"change\"], [\"for\", \"devTypeDynamic\", 3, \"ngClass\"], [\"type\", \"radio\", \"value\", \"static\", \"formControlName\", \"type\", \"id\", \"devTypeStatic\", 1, \"form-check-input\", \"mr-2\", 3, \"ngClass\", \"ngModel\", \"change\", \"ngModelChange\"], [\"for\", \"devTypeStatic\", 3, \"ngClass\"], [\"class\", \"form-group row\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"errorMessage\"], [\"class\", \"\", 4, \"ngIf\"], [1, \"\"], [1, \"form-group\", \"ccl-form\", \"row\"], [\"for\", \"deviceDescription\", 1, \"col-sm-12\", \"col-form-label\"], [1, \"col-sm-12\"], [\"id\", \"deviceDescription\", \"formControlName\", \"description\", \"trimSpace\", \"\", 1, \"form-control\", \"text-box\", 3, \"formValue\"], [1, \"form-group\", \"row\", 3, \"ngClass\"], [1, \"form-check-inline\"], [\"name\", \"allowInheritance\", \"type\", \"radio\", \"formControlName\", \"allowInheritance\", \"id\", \"devInhyes\", 1, \"form-check-input\", \"mr-2\", 3, \"ngClass\", \"value\"], [\"for\", \"devInhyes\"], [\"type\", \"radio\", \"name\", \"allowInheritance\", \"formControlName\", \"allowInheritance\", \"id\", \"devInhno\", 1, \"form-check-input\", \"mr-2\", 3, \"value\", \"ngClass\"], [\"for\", \"devInhno\"], [1, \"col-md-12\"], [\"for\", \"deviceType\", 1, \"col-form-label\"], [1, \"col-md-12\", \"pl-0\"], [\"class\", \"col-md-12 \", 4, \"ngIf\"], [\"id\", \"deviceRules\", 1, \"col-sm-12\", \"mt-2\", \"plusSymbol\"], [\"href\", \"javascript:void(0)\", \"id\", \"adderule\", \"class\", \"btn-default primary pull-left\", 3, \"click\", 4, \"ngIf\"], [1, \"d-flex\", \"my-3\", \"align-items-center\", \"device-groups-drop-downs\"], [1, \"col-sm-4\"], [\"bindLabel\", \"name\", \"autofocus\", \"\", \"bindValue\", \"id\", 3, \"items\", \"id\", \"ngModel\", \"searchable\", \"clearable\", \"ngModelOptions\", \"name\", \"disabled\", \"ngModelChange\", \"change\"], [\"ng-label-tmp\", \"\"], [\"ng-option-tmp\", \"\"], [\"bindLabel\", \"name\", \"autofocus\", \"\", \"bindValue\", \"id\", 3, \"items\", \"id\", \"ngModel\", \"searchable\", \"clearable\", \"ngModelOptions\", \"name\", \"ngModelChange\", \"change\", 4, \"ngIf\"], [1, \"delete-align\"], [\"href\", \"javascript:void(0)\", \"id\", \"deleterule\", 1, \"cursor-pointer\", 3, \"click\"], [\"bindLabel\", \"name\", \"autofocus\", \"\", \"bindValue\", \"id\", 3, \"items\", \"id\", \"ngModel\", \"searchable\", \"clearable\", \"ngModelOptions\", \"name\", \"ngModelChange\", \"change\"], [\"bindLabel\", \"name\", \"autofocus\", \"\", \"bindValue\", \"id\", \"class\", \"rule3items\", 3, \"items\", \"multiple\", \"id\", \"searchable\", \"clearable\", \"ngModel\", \"ngModelOptions\", \"name\", \"ngModelChange\", \"change\", 4, \"ngIf\"], [\"bindLabel\", \"name\", \"autofocus\", \"\", \"bindValue\", \"id\", 1, \"rule3items\", 3, \"items\", \"multiple\", \"id\", \"searchable\", \"clearable\", \"ngModel\", \"ngModelOptions\", \"name\", \"ngModelChange\", \"change\"], [1, \"form-group\", \"ccl-form\", \"row\", \"m-0\"], [\"type\", \"text\", \"data-toggle\", \"tooltip\", \"data-placement\", \"top\", \"trimSpace\", \"\", 3, \"title\", \"id\", \"ngModel\", \"ngModelOptions\", \"name\", \"formValue\", \"focusout\", \"keyup\", \"ngModelChange\", \"change\", 4, \"ngIf\"], [\"type\", \"text\", \"data-toggle\", \"tooltip\", \"data-placement\", \"top\", \"trimSpace\", \"\", 3, \"title\", \"id\", \"ngModel\", \"ngModelOptions\", \"name\", \"formValue\", \"focusout\", \"keyup\", \"ngModelChange\", \"change\"], [\"href\", \"javascript:void(0)\", \"id\", \"adderule\", 1, \"btn-default\", \"primary\", \"pull-left\", 3, \"click\"], [\"id\", \"devicegrp-info-tbl\", \"datatable\", \"\", \"class\", \"row-border hover table-alter\", 3, \"dtOptions\", 4, \"ngIf\"], [1, \"col\", \"align-self-start\"], [1, \"net-ops-secondary-title\"], [\"id\", \"my-btn\", 1, \"col\", \"cursor-pointer\", \"align-self-end\", \"text-right\", \"primary\", \"icon-btn\"], [\"aria-hidden\", \"true\", 1, \"fa\", \"fa-refresh\", 3, \"click\"], [\"id\", \"devicegrp-info-tbl\", \"datatable\", \"\", 1, \"row-border\", \"hover\", \"table-alter\", 3, \"dtOptions\"], [3, \"id\", 4, \"ngFor\", \"ngForOf\"], [1, \"gotorouter\", 3, \"click\"], [\"id\", \"static-discovered\", 1, \"col\", \"cursor-pointer\", \"align-self-end\", \"text-right\", \"primary\", \"icon-btn\"], [\"id\", \"devicegrp-info-tbl-static\", \"datatable\", \"\", 1, \"row-border\", \"hover\", \"table-alter\", 3, \"dtOptions\"], [\"colspan\", \"8\", 1, \"no-data-available\"], [\"id\", \"static-undiscovered\", 1, \"col\", \"cursor-pointer\", \"align-self-end\", \"text-right\", \"primary\", \"icon-btn\"], [\"id\", \"devicegrp-info-tbl-static-undisc\", \"datatable\", \"\", 1, \"row-border\", \"hover\", \"table-alter\", 3, \"dtOptions\"], [1, \"detail-view\"], [1, \"w-100\", \"d-flex\", \"align-items-center\", \"justify-content-between\", \"border-bottom\"], [1, \"device-group-deletion\", \"mt-3\"], [1, \"table\", \"table-borderless\", \"table-striped\", \"w-100\"], [1, \"max-170px\", \"min-130px\"], [1, \"lenth-text-break\"]],\n    template: function DevicesGroupsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DevicesGroupsComponent_div_0_Template, 2, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, DevicesGroupsComponent_div_1_Template, 35, 26, \"div\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasScopeAccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.pageAvailable && ctx.hasScopeAccess);\n      }\n    },\n    directives: [i11.NgIf, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i13.DataTableDirective, i11.NgForOf, i11.NgClass, i5.FormControlName, i14.TrimSpaceDirective, i5.RadioControlValueAccessor, i15.NgSelectComponent, i16.AutofocusDirective, i15.ɵh, i15.ɵf],\n    pipes: [i11.TitleCasePipe],\n    styles: [\".delete-align[_ngcontent-%COMP%]{position:relative;padding-left:10px;color:gray;font-size:19px}.plusSymbol[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{text-decoration:unset!important;color:#2ecc71;cursor:pointer}.delete-align[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{color:red;cursor:pointer}.del[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{color:red;cursor:pointer}#devicegrp-table[_ngcontent-%COMP%]{width:100%!important}.disable[_ngcontent-%COMP%]{pointer-events:none}.cursornallow[_ngcontent-%COMP%]{cursor:not-allowed}.gotorouter[_ngcontent-%COMP%]{cursor:pointer;text-decoration:underline;color:#00f}@keyframes spin{to{transform:rotate(360deg)}}.icon-btn[_ngcontent-%COMP%]{border:none;background-color:transparent;outline:0}.icon-btn[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:19px;cursor:pointer}.icon-btn[_ngcontent-%COMP%]   i.spin-animation[_ngcontent-%COMP%]{animation-name:spin;-webkit-animation-name:spin;-moz-animation-name:spin;-ms-animation-name:spin;animation-duration:.5s;-webkit-animation-duration:.5s;-moz-animation-duration:.5s;-ms-animation-duration:.5s;animation-timing-function:ease-in;-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;-ms-animation-timing-function:ease-in}.devices-groups-name[_ngcontent-%COMP%]{width:30%!important}.devices-groups-description[_ngcontent-%COMP%]{width:32.5%!important}.devices-groups-type[_ngcontent-%COMP%]{width:32.5%!important}.devices-groups-edit-delete[_ngcontent-%COMP%]{width:5%!important}.device-group-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{word-break:break-all}[_nghost-%COMP%]     .dataTables_empty{display:none}.no-data-available[_ngcontent-%COMP%]{text-align:center}.btn-link[_ngcontent-%COMP%]{border:none!important}.btn-link[_ngcontent-%COMP%]:hover{background-color:transparent!important;text-decoration:none!important}.text-box[_ngcontent-%COMP%]{border-radius:22px 22px 2px;min-height:85px}.form-check-cus[_ngcontent-%COMP%]   .form-check-inline[_ngcontent-%COMP%]{min-width:100px}.form-check-cus[_ngcontent-%COMP%]   .form-check-inline[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{margin-bottom:0;padding-left:0}.grey-input-color[_ngcontent-%COMP%]{color:#646363!important}.border-w2[_ngcontent-%COMP%]{border-width:2px}.bgimage-none[_ngcontent-%COMP%]{background-image:unset}.span-inline-ww[_ngcontent-%COMP%]{width:670px;word-wrap:break-word;display:inline-block}.min-w-100[_ngcontent-%COMP%]{min-width:100px}.none-count[_ngcontent-%COMP%]{cursor:default!important;color:#1a1f22!important}.search-box-device[_ngcontent-%COMP%]{position:relative}.search-box-device[_ngcontent-%COMP%]   .device-search-input[_ngcontent-%COMP%]{padding-right:38px!important}.search-box-device[_ngcontent-%COMP%]   .search-btn-round[_ngcontent-%COMP%]{position:absolute;right:0px;min-height:38px;min-width:38px}.search-box-device[_ngcontent-%COMP%]   .search-btn-round[_ngcontent-%COMP%]:active{background-color:#0054b2}.search-box-device[_ngcontent-%COMP%]   .search-btn-round[_ngcontent-%COMP%]:focus{background-color:#0279ff}.search-box-device[_ngcontent-%COMP%]   .search-btn-round[_ngcontent-%COMP%]:focus:hover{background-color:#0054b2}.min-w-130[_ngcontent-%COMP%]{min-width:130px}.min-w-160[_ngcontent-%COMP%]{min-width:160px}.search-box-device[_ngcontent-%COMP%]{max-width:430px}.t-ini-small[_ngcontent-%COMP%]{text-transform:lowercase}.min-w-100px[_ngcontent-%COMP%]{min-width:100px}.warning-msg-info[_ngcontent-%COMP%]{width:100%}.warning-msg-info[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(1){width:36px;margin:0 8px}.warning-msg-info[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(2){width:68%}.warning-msg-info[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(3){width:25%}.max-170px[_ngcontent-%COMP%]{max-width:170px}.min-130px[_ngcontent-%COMP%]{min-width:130px}.lenth-text-break[_ngcontent-%COMP%]{word-break:break-word}\"]\n  });\n  return DevicesGroupsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}