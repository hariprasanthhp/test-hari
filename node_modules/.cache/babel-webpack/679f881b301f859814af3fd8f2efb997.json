{"ast":null,"code":"import * as Highcharts from 'highcharts/highstock';\nimport * as $ from 'jquery';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/support-wifi.service\";\nimport * as i2 from \"../../services/support-wifi-chart-options.service\";\nimport * as i3 from \"src/app/sys-admin/services/common.service\";\nimport * as i4 from \"src/app-services/translate.service\";\nimport * as i5 from \"src/app/shared/services/sso-auth.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@ng-select/ng-select\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"@angular-slider/ngx-slider\";\nfunction TxRxComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵelementStart(1, \"div\", 16);\n    i0.ɵɵelementStart(2, \"div\", 17);\n    i0.ɵɵelementStart(3, \"div\", 18);\n    i0.ɵɵelementStart(4, \"span\", 19);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r0.language.Loading);\n  }\n}\nfunction TxRxComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵelementStart(1, \"span\", 21);\n    i0.ɵɵelement(2, \"img\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function TxRxComponent_div_2_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.closeAlert();\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 24);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r1.errorInfo, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction TxRxComponent_section_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵelementStart(1, \"div\", 16);\n    i0.ɵɵelementStart(2, \"div\", 17);\n    i0.ɵɵelementStart(3, \"div\", 18);\n    i0.ɵɵelementStart(4, \"span\", 19);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r6.language.Loading);\n  }\n}\nfunction TxRxComponent_section_12_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelementStart(1, \"ngx-slider\", 28);\n    i0.ɵɵlistener(\"valueChange\", function TxRxComponent_section_12_div_2_Template_ngx_slider_valueChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.selectedInterval = $event;\n    })(\"userChangeEnd\", function TxRxComponent_section_12_div_2_Template_ngx_slider_userChangeEnd_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.sliderEvent();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"span\", 29);\n    i0.ɵɵelementStart(3, \"label\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 30);\n    i0.ɵɵelementStart(6, \"label\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r7.selectedInterval)(\"options\", ctx_r7.timeIntervalOptions);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.leftSliderTime, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r7.rightSliderTime);\n  }\n}\nfunction TxRxComponent_section_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"section\", 25);\n    i0.ɵɵtemplate(1, TxRxComponent_section_12_div_1_Template, 6, 1, \"div\", 1);\n    i0.ɵɵtemplate(2, TxRxComponent_section_12_div_2_Template, 8, 4, \"div\", 26);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showIntervalSlider);\n  }\n}\nfunction TxRxComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵelementStart(1, \"div\", 32);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.language[\"No chart Data Available\"], \"\");\n  }\n}\nconst _c0 = function () {\n  return {\n    standalone: true\n  };\n};\nexport let TxRxComponent = /*#__PURE__*/(() => {\n  class TxRxComponent {\n    constructor(api, options, commonOrgService, translateService, ssoAuthService) {\n      this.api = api;\n      this.options = options;\n      this.commonOrgService = commonOrgService;\n      this.translateService = translateService;\n      this.ssoAuthService = ssoAuthService;\n      this.Highcharts = Highcharts;\n      this.chartOptions = {};\n      this.loading = true;\n      this.periods = [{\n        label: 'Any 15 minutes within last day',\n        value: '2'\n      }, {\n        label: 'Last 1 day',\n        value: '1'\n      }, {\n        label: 'Last 3 days',\n        value: '3'\n      }, {\n        label: 'Last 7 days',\n        value: '7'\n      }];\n      this.periodSelected = 'day';\n      this.userClickTimeout = setTimeout(() => {}, 0);\n      this.timeIntervalOptions = {\n        hideLimitLabels: true,\n        onlyBindHandles: true,\n        stepsArray: []\n      };\n      this.showIntervalSlider = false;\n      this.timeIntervals = [];\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.setPeriodOptions();\n        this.loadChart();\n      });\n      this.dropDownchange();\n      this.lastdays15MinOfValues();\n    }\n    inClick(e) {\n      //Slider bar Prev, Next click events\n      var _a, _b;\n      e.stopPropagation();\n      let id = e.target.id ? e.target.id : '';\n      if (id == 'slider-click-next' || id == 'slider-click-prev') {\n        let clsList = e.target.className ? e.target.className.split(' ')[0] : '';\n        let tag = e.target.localName;\n        let totalPoints = this.timeIntervals.length - 1;\n        // console.log(this.selectedInterval)\n        if (id == 'slider-click-next') {\n          if (((_a = this.any15min) === null || _a === void 0 ? void 0 : _a.endTime) != undefined) this.any15min.endTime = undefined;\n          let point = parseInt(clsList.split('-')[1]);\n          if (point + 1 <= totalPoints) {\n            this.selectedInterval = point + 1;\n          }\n        }\n        if (id == 'slider-click-prev') {\n          if (((_b = this.any15min) === null || _b === void 0 ? void 0 : _b.endTime) != undefined) this.any15min.endTime = undefined;\n          let point = parseInt(clsList.split('-')[1]);\n          if (point - 1 >= 0) {\n            this.selectedInterval = point - 1;\n          }\n        }\n        this.handleUserTime();\n      }\n    }\n    ngOnInit() {\n      this.redirectData = this.options.subject.subscribe(data => {\n        var _a, _b;\n        this.any15min = data;\n        if (((_a = this.any15min) === null || _a === void 0 ? void 0 : _a.endTime) != undefined) {\n          this.setPeriodOptions();\n          this.periodSelected = (_b = this.any15min) === null || _b === void 0 ? void 0 : _b.period;\n          this.calcOf15minVal();\n          this.loadChart();\n        }\n      });\n    }\n    dropDownchange() {\n      var _a;\n      if (this.periodSelected != '2') {\n        this.lastdays15MinOfValues();\n      }\n      if (((_a = this.any15min) === null || _a === void 0 ? void 0 : _a.endTime) != undefined) this.any15min.endTime = undefined;\n    }\n    sliderEvent() {\n      var _a;\n      if (((_a = this.any15min) === null || _a === void 0 ? void 0 : _a.endTime) != undefined) this.any15min.endTime = undefined;\n      setTimeout(() => {\n        if (this.periodSelected == '2') {\n          this.showIntervalSlider = true;\n        }\n        this.loadChart();\n      }, 500);\n    }\n    ngOnChanges() {\n      this.setPeriodOptions();\n      this.periodSelected = '1';\n      this.loadChart();\n    }\n    ngOnDestroy() {\n      if (this.chartSubs) this.chartSubs.unsubscribe();\n      if (this.languageSubject) this.languageSubject.unsubscribe();\n      if (this.redirectData) this.redirectData.unsubscribe();\n    }\n    handleUserTime() {\n      clearTimeout(this.userClickTimeout);\n      this.userClickTimeout = setTimeout(() => {\n        this.loadChart();\n      }, 2000);\n    }\n    loadChart() {\n      var _a;\n      // let endTime1 = this.timeIntervals[this.selectedInterval].date;\n      // let startTime = moment(endTime1).subtract(15, \"minutes\");\n      // endTime1 = moment(endTime1).add(1, \"minutes\");\n      // let start = this.timeIntervals[this.selectedInterval - 1].date.getTime()\n      let end1 = this.timeIntervals[this.selectedInterval].date.getTime();\n      let start = new Date(end1).setMinutes(new Date(end1).getMinutes() - 15);\n      this.closeAlert();\n      let mac;\n      if (this.routerData.macAddress) {\n        mac = this.routerData.macAddress;\n      } else if (this.routerData.MACAddress) {\n        mac = this.routerData.MACAddress;\n      }\n      this.noChartDataAvailable = false;\n      this.loading = true;\n      if ((_a = this.any15min) === null || _a === void 0 ? void 0 : _a.endTime) {\n        this.periodSelected = this.any15min.period;\n      }\n      if (this.periodSelected == '2') {\n        this.chartSubs = this.api.getUsage15MinTXRX(this.orgId, this.fsan, mac, start).subscribe(res => {\n          if (res && Object.keys(res).length && res.data && res.data.length) {\n            this.chartDataParsed = res;\n            this.chartData = this.chartDataParsed.data;\n            this.chartOptions = this.options.getMeshTxExtendOptions(this.chartData, this.periodSelected, this.language);\n            // this.chartOptions.hasOwnProperty('additionalValie');\n            this.Highcharts.chart('wifi-txrx-chart', this.chartOptions);\n            this.showChart = true;\n            this.loading = false;\n          } else {\n            this.chartOptions = this.options.getMeshTxExtendOptions([], this.periodSelected, this.language);\n            this.Highcharts.chart('wifi-txrx-chart', this.chartOptions);\n            this.showChart = true;\n            this.loading = false;\n          }\n        }, err => {\n          this.pageErrorHandle(err);\n          this.loading = false;\n        });\n      } else {\n        this.chartSubs = this.api.getUsageTXRX(this.orgId, this.fsan, mac, this.periodSelected).subscribe(res => {\n          if (res && Object.keys(res).length && res.data && res.data.length) {\n            this.chartDataParsed = res;\n            this.chartData = this.chartDataParsed.data;\n            this.chartOptions = this.options.getMeshTxExtendOptions(this.chartData, this.periodSelected, this.language);\n            // this.chartOptions.hasOwnProperty('additionalValie');\n            this.Highcharts.chart('wifi-txrx-chart', this.chartOptions);\n            this.showChart = true;\n            this.loading = false;\n          } else {\n            this.chartOptions = this.options.getMeshTxExtendOptions([], this.periodSelected, this.language);\n            this.Highcharts.chart('wifi-txrx-chart', this.chartOptions);\n            this.showChart = true;\n            this.loading = false;\n          }\n        }, err => {\n          this.pageErrorHandle(err);\n          this.loading = false;\n        });\n      }\n      /* this.chartSubs = this.api.getUsageTXRX(this.orgId, this.fsan, mac, this.periodSelected).subscribe((res: any) => {\r\n        if (res && Object.keys(res).length && res.data && res.data.length) {\r\n          this.chartDataParsed = res;\r\n          this.chartData = this.chartDataParsed.data;\r\n                this.chartOptions = this.options.getMeshTxExtendOptions(this.chartData, this.periodSelected, this.language);\r\n          // this.chartOptions.hasOwnProperty('additionalValie');\r\n          this.Highcharts.chart('wifi-txrx-chart', this.chartOptions);\r\n          this.showChart = true;\r\n          this.loading = false;\r\n        } else {\r\n          this.chartOptions = this.options.getMeshTxExtendOptions([], this.periodSelected, this.language);\r\n          this.Highcharts.chart('wifi-txrx-chart', this.chartOptions);\r\n          this.showChart = true;\r\n          this.loading = false;\r\n        }\r\n      }, (err: HttpErrorResponse) => {\r\n        this.pageErrorHandle(err);\r\n        this.loading = false;\r\n      }); */\n    }\n\n    refresh() {\n      this.loadChart();\n    }\n    getISOString(time) {\n      return time.toISOString().substr(0, 16) + ':00';\n    }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = this.language['Access Denied'];\n      } else {\n        this.errorInfo = this.ssoAuthService.pageErrorHandle(err);\n      }\n      this.closeAlert();\n      this.error = true;\n    }\n    closeAlert() {\n      this.error = false;\n    }\n    setPeriodOptions() {\n      let periods = [{\n        label: this.language['Any 15 minutes within last day'],\n        value: '2'\n      }, {\n        label: this.language['Last 1 day'],\n        value: '1'\n      }, {\n        label: this.language['Last 3 days'],\n        value: '3'\n      }, {\n        label: this.language['Last 7 days'],\n        value: '7'\n      }];\n      this.periods = [...periods];\n    }\n    lastdays15MinOfValues() {\n      let date = new Date();\n      let coeff = 1000 * 60 * 15;\n      let timeDuration = -24 * 60;\n      let lastUpdatedTime;\n      let that = this;\n      let len = 0;\n      let lastTime = moment(new Date(Math.floor(date.getTime() / coeff) * coeff)).seconds(0).milliseconds(0);\n      let startTime = moment(lastTime).subtract(24, \"hours\");\n      let currentTimestamp = new Date().setSeconds(0, 0);\n      const minToRoundOf24hr = Math.ceil((currentTimestamp - new Date(moment(startTime).toDate()).getTime()) / (1000 * 60 * 60)) > 24 ? 30 : 15;\n      startTime = moment(startTime).add(15, 'minutes'); // omitting first 0th minute \n      this.timeIntervals = [];\n      let current = moment(startTime);\n      let i = 0;\n      while (current <= lastTime) {\n        this.timeIntervals.push({\n          value: i,\n          legend: moment(current).format('MM/DD/YYYY hh:mm'),\n          date: moment(current).toDate()\n        });\n        lastUpdatedTime = moment(current);\n        current.add(15, 'minutes');\n        i++;\n      }\n      /*  if (this.any15min.endTime) {\r\n         return this.calcOf15minVal();\r\n       } */\n      len = this.timeIntervals.length;\n      this.selectedInterval = this.timeIntervals[len - 1].value;\n      this.timeIntervalOptions.stepsArray = [...this.timeIntervals];\n      const translate = (value, label) => {\n        let pointersTime = moment(that.timeIntervals[value]['date']);\n        let start = pointersTime.subtract(15, 'minutes').format('MMM DD hh:mm A');\n        let end = moment(that.timeIntervals[value]['date']).format('MMM DD hh:mm A');\n        return `<span id=\"slider-click-prev\" class=\"point-${value} dir-arrows\" > </span> ${start} - ${end} <span id=\"slider-click-next\" class=\"point-${value} dir-arrows\"></span > `;\n      };\n      this.timeIntervalOptions.translate = translate;\n      this.leftSliderTime = moment(this.timeIntervals[0].date).subtract(15, 'minutes').format('MMM DD hh:mm A');\n      // this.leftSliderTime = moment(this.timeIntervals[0].date).format('MMM DD hh:mm A');\n      this.rightSliderTime = moment(this.timeIntervals[len - 1].date).format('MMM DD hh:mm A');\n      setTimeout(() => {\n        this.showIntervalSlider = true;\n        setTimeout(() => {\n          $('.multi-point-slider .ngx-slider-pointer-min').attr('title', 'Drag to select Time frame');\n        }, 10);\n      }, 1000);\n    }\n    calcOf15minVal() {\n      let len = 0;\n      let timeDuration = -24 * 60;\n      let that = this;\n      let date = new Date();\n      let coeff = 1000 * 60 * 15;\n      let lastUpdatedTime;\n      let lastTime = moment(new Date(Math.floor(date.getTime() / coeff) * coeff)).seconds(0).milliseconds(0);\n      let startTime = moment(lastTime).subtract(24, \"hours\");\n      let currentTimestamp = new Date().setSeconds(0, 0);\n      // let currentTimestamp = history?.state?.endTime\n      const minToRoundOf24hr = Math.ceil((currentTimestamp - new Date(moment(startTime).toDate()).getTime()) / (1000 * 60 * 60)) > 24 ? 30 : 15;\n      startTime = moment(startTime).add(15, 'minutes'); // omitting first 0th minute \n      this.timeIntervals = [];\n      let current = moment(startTime);\n      let i = 0;\n      while (current <= lastTime) {\n        this.timeIntervals.push({\n          value: i,\n          legend: moment(current).format('MM/DD/YYYY HH:mm'),\n          date: moment(current).toDate()\n        });\n        lastUpdatedTime = moment(current);\n        current.add(15, 'minutes');\n        i++;\n      }\n      len = this.timeIntervals.length;\n      this.selectedInterval = this.timeIntervals[len - 1].value;\n      let endtime = moment(this.any15min.endTime);\n      let qoeEndTime = moment(endtime);\n      let index = this.timeIntervals.findIndex(time => moment(time.date).isSame(qoeEndTime));\n      if (index === -1) {\n        let first = moment(this.timeIntervals[0].date);\n        let last = moment(this.timeIntervals[len - 1].date);\n        this.timeIntervals[0].date;\n        let j = 0;\n        let newIntervals = [];\n        if (qoeEndTime < first) {\n          while (qoeEndTime < first) {\n            newIntervals.push({\n              value: j,\n              legend: moment(qoeEndTime).format('MM/DD/YYYY HH:mm'),\n              date: moment(qoeEndTime).toDate()\n            });\n            qoeEndTime.add(15, 'minutes');\n            j++;\n          }\n          let newLen = newIntervals.length;\n          this.timeIntervals.map(t => t.value = t.value + newLen);\n          this.timeIntervals = [...newIntervals, ...this.timeIntervals];\n          index = 0;\n        } else if (qoeEndTime < last) {\n          index = len;\n        }\n      }\n      this.selectedInterval = this.timeIntervals[index] ? this.timeIntervals[index + 1].value : this.timeIntervals[this.timeIntervals.length - 1].value;\n      this.timeIntervalOptions.stepsArray = [...this.timeIntervals];\n      const translate = (value, label) => {\n        let pointersTime = moment(that.timeIntervals[value]['date']);\n        let start = pointersTime.subtract(15, 'minutes').format('MMM DD hh:mm A');\n        let end = moment(that.timeIntervals[value]['date']).format('MMM DD hh:mm A');\n        return `<span id=\"slider-click-prev\" class=\"point-${value} dir-arrows\" ></span> ${start} - ${end} <span id=\"slider-click-next\" class=\"point-${value} dir-arrows\"></span>`;\n      };\n      this.timeIntervalOptions.translate = translate;\n      this.leftSliderTime = moment(this.timeIntervals[0].date).subtract(15, 'minutes').format('MMM DD hh:mm A');\n      this.rightSliderTime = moment(this.timeIntervals[len - 1].date).format('MMM DD hh:mm A');\n      setTimeout(() => {\n        this.showIntervalSlider = true;\n        setTimeout(() => {\n          $('.multi-point-slider .ngx-slider-pointer-min').attr('title', 'Drag to select Time frame');\n        }, 10);\n      }, 1000);\n    }\n  }\n  TxRxComponent.ɵfac = function TxRxComponent_Factory(t) {\n    return new (t || TxRxComponent)(i0.ɵɵdirectiveInject(i1.SupportWifiService), i0.ɵɵdirectiveInject(i2.SupportWifiChartOptionsService), i0.ɵɵdirectiveInject(i3.CommonService), i0.ɵɵdirectiveInject(i4.TranslateService), i0.ɵɵdirectiveInject(i5.SsoAuthService));\n  };\n  TxRxComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TxRxComponent,\n    selectors: [[\"app-tx-rx\"]],\n    hostBindings: function TxRxComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function TxRxComponent_click_HostBindingHandler($event) {\n          return ctx.inClick($event);\n        });\n      }\n    },\n    inputs: {\n      routerData: \"routerData\",\n      fsan: \"fsan\",\n      orgId: \"orgId\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 17,\n    vars: 14,\n    consts: [[1, \"loader-wrapper\"], [\"class\", \"loader-wrapper-info\", 4, \"ngIf\"], [\"class\", \"w-100 alert alert alert-danger  fade show\", 4, \"ngIf\"], [1, \"row\", \"my-3\"], [\"id\", \"signal-strength-period-filter\", 1, \"col-md-12\", \"col-lg-3\", \"col-xl-3\"], [1, \"small-text\"], [1, \"dropdown\"], [\"bindLabel\", \"label\", \"bindValue\", \"value\", \"placeholder\", \"\", 3, \"items\", \"multiple\", \"ngModel\", \"ngModelOptions\", \"clearable\", \"searchable\", \"ngModelChange\", \"click\"], [1, \"col-md-2\", \"d-flex\", \"align-items-end\", \"smy-2\"], [\"id\", \"signal-strength-filter-btn\", 1, \"btn-default\", \"primary\", 3, \"click\"], [\"class\", \"time-frame-section mb-3 p-0 mh-100\", 4, \"ngIf\"], [1, \"row\", \"mh-400\"], [\"id\", \"wifi-txrx-chart-container\", 1, \"col-md-12\", 3, \"ngClass\"], [\"id\", \"wifi-txrx-chart\", 1, \"h-400\"], [\"class\", \"col-md-12\", 4, \"ngIf\"], [1, \"loader-wrapper-info\"], [1, \"loader\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"w-100\", \"alert\", \"alert\", \"alert-danger\", \"fade\", \"show\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [1, \"time-frame-section\", \"mb-3\", \"p-0\", \"mh-100\"], [\"class\", \"multi-point-slider\", 4, \"ngIf\"], [1, \"multi-point-slider\"], [3, \"value\", \"options\", \"valueChange\", \"userChangeEnd\"], [1, \"left-most-slider-time\"], [1, \"right-most-slider-time\"], [1, \"col-md-12\"], [1, \"h-400\"]],\n    template: function TxRxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0);\n        i0.ɵɵtemplate(1, TxRxComponent_div_1_Template, 6, 1, \"div\", 1);\n        i0.ɵɵtemplate(2, TxRxComponent_div_2_Template, 6, 1, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"span\", 5);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"ng-select\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function TxRxComponent_Template_ng_select_ngModelChange_8_listener($event) {\n          return ctx.periodSelected = $event;\n        })(\"click\", function TxRxComponent_Template_ng_select_click_8_listener() {\n          return ctx.dropDownchange();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 8);\n        i0.ɵɵelementStart(10, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function TxRxComponent_Template_button_click_10_listener() {\n          return ctx.loadChart();\n        });\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, TxRxComponent_section_12_Template, 3, 2, \"section\", 10);\n        i0.ɵɵelementStart(13, \"div\", 11);\n        i0.ɵɵelementStart(14, \"div\", 12);\n        i0.ɵɵelement(15, \"div\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, TxRxComponent_div_16_Template, 3, 1, \"div\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.language.period);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"items\", ctx.periods)(\"multiple\", false)(\"ngModel\", ctx.periodSelected)(\"ngModelOptions\", i0.ɵɵpureFunction0(13, _c0))(\"clearable\", false)(\"searchable\", false);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.language.Load);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.periodSelected == 2);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", !ctx.showChart ? \"d-none\" : \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.noChartDataAvailable);\n      }\n    },\n    directives: [i6.NgIf, i7.NgSelectComponent, i8.NgControlStatus, i8.NgModel, i6.NgClass, i9.ɵa],\n    styles: [\".loader-wrapper[_ngcontent-%COMP%]{position:relative}.loader-wrapper-info[_ngcontent-%COMP%]{transform:translate(-50%,-50%);top:50%;left:50%;position:absolute;width:103%;z-index:100;height:100%}  .multi-point-slider .ngx-slider-bar{height:5px!important;background:#EBEAEF!important;border-radius:6px}  .multi-point-slider .ngx-slider .ngx-slider-bubble{color:#4c4c4c!important;font-size:14px!important;font-weight:600;bottom:8px!important;padding:0 15px!important}  .multi-point-slider .ngx-slider-pointer{background-color:#0279ff!important;cursor:pointer;width:32px!important;height:12px!important;top:-3px!important}  .multi-point-slider .ngx-slider-pointer:after{display:none}  .multi-point-slider{position:relative}  .multi-point-slider .left-most-slider-time,   .multi-point-slider .right-most-slider-time{position:absolute;color:#4c4c4c;font-size:12px;font-weight:normal;bottom:-16px}  .multi-point-slider .left-most-slider-time{left:0}  .multi-point-slider .right-most-slider-time{right:0}  .dir-arrows{cursor:pointer;position:absolute;top:5px;right:0;z-index:999;background-repeat:no-repeat!important;width:20px;height:15px}  #slider-click-next{background:url(ic_chevronright_blue.fd81c30020686fc07c55.svg);background-position:14px 0px!important}  #slider-click-prev{background:url(ic_chevronleft_blue.fe45f1210cc5f8e5cadf.svg);left:0}.mh-100[_ngcontent-%COMP%]{min-height:100px}.mh-400[_ngcontent-%COMP%]{min-height:400px}.h-400[_ngcontent-%COMP%]{height:400px}\"]\n  });\n  return TxRxComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}