{"ast":null,"code":"import { assign, isFunction, isArray, forEach, isDefined } from 'min-dash';\nimport { delegate as domDelegate, event as domEvent, attr as domAttr, query as domQuery, classes as domClasses, domify } from 'min-dom';\nvar entrySelector = '.entry';\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * A context pad that displays element specific, contextual actions next\n * to a diagram element.\n *\n * @param {Object} config\n * @param {boolean|Object} [config.scale={ min: 1.0, max: 1.5 }]\n * @param {number} [config.scale.min]\n * @param {number} [config.scale.max]\n * @param {EventBus} eventBus\n * @param {Overlays} overlays\n */\nexport default function ContextPad(config, eventBus, overlays) {\n  this._eventBus = eventBus;\n  this._overlays = overlays;\n  var scale = isDefined(config && config.scale) ? config.scale : {\n    min: 1,\n    max: 1.5\n  };\n  this._overlaysConfig = {\n    position: {\n      right: -9,\n      top: -6\n    },\n    scale: scale\n  };\n  this._current = null;\n  this._init();\n}\nContextPad.$inject = ['config.contextPad', 'eventBus', 'overlays'];\n\n/**\n * Registers events needed for interaction with other components\n */\nContextPad.prototype._init = function () {\n  var eventBus = this._eventBus;\n  var self = this;\n  eventBus.on('selection.changed', function (e) {\n    var selection = e.newSelection;\n    if (selection.length === 1) {\n      self.open(selection[0]);\n    } else {\n      self.close();\n    }\n  });\n  eventBus.on('elements.delete', function (event) {\n    var elements = event.elements;\n    forEach(elements, function (e) {\n      if (self.isOpen(e)) {\n        self.close();\n      }\n    });\n  });\n  eventBus.on('element.changed', function (event) {\n    var element = event.element,\n      current = self._current;\n\n    // force reopen if element for which we are currently opened changed\n    if (current && current.element === element) {\n      self.open(element, true);\n    }\n  });\n};\n\n/**\n * Register a provider with the context pad\n *\n * @param  {number} [priority=1000]\n * @param  {ContextPadProvider} provider\n *\n * @example\n * const contextPadProvider = {\n  *   getContextPadEntries: function(element) {\n  *     return function(entries) {\n  *       return {\n  *         ...entries,\n  *         'entry-1': {\n  *           label: 'My Entry',\n  *           action: function() { alert(\"I have been clicked!\"); }\n  *         }\n  *       };\n  *     }\n  *   }\n  * };\n  *\n * contextPad.registerProvider(800, contextPadProvider);\n */\nContextPad.prototype.registerProvider = function (priority, provider) {\n  if (!provider) {\n    provider = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  this._eventBus.on('contextPad.getProviders', priority, function (event) {\n    event.providers.push(provider);\n  });\n};\n\n/**\n * Returns the context pad entries for a given element\n *\n * @param {djs.element.Base} element\n *\n * @return {Array<ContextPadEntryDescriptor>} list of entries\n */\nContextPad.prototype.getEntries = function (element) {\n  var providers = this._getProviders();\n  var entries = {};\n\n  // loop through all providers and their entries.\n  // group entries by id so that overriding an entry is possible\n  forEach(providers, function (provider) {\n    var entriesOrUpdater = provider.getContextPadEntries(element);\n    if (isFunction(entriesOrUpdater)) {\n      entries = entriesOrUpdater(entries);\n    } else {\n      forEach(entriesOrUpdater, function (entry, id) {\n        entries[id] = entry;\n      });\n    }\n  });\n  return entries;\n};\n\n/**\n * Trigger an action available on the opened context pad\n *\n * @param  {string} action\n * @param  {Event} event\n * @param  {boolean} [autoActivate=false]\n */\nContextPad.prototype.trigger = function (action, event, autoActivate) {\n  var element = this._current.element,\n    entries = this._current.entries,\n    entry,\n    handler,\n    originalEvent,\n    button = event.delegateTarget || event.target;\n  if (!button) {\n    return event.preventDefault();\n  }\n  entry = entries[domAttr(button, 'data-action')];\n  handler = entry.action;\n  originalEvent = event.originalEvent || event;\n\n  // simple action (via callback function)\n  if (isFunction(handler)) {\n    if (action === 'click') {\n      return handler(originalEvent, element, autoActivate);\n    }\n  } else {\n    if (handler[action]) {\n      return handler[action](originalEvent, element, autoActivate);\n    }\n  }\n\n  // silence other actions\n  event.preventDefault();\n};\n\n/**\n * Open the context pad for the given element\n *\n * @param {djs.model.Base} element\n * @param {boolean} force if true, force reopening the context pad\n */\nContextPad.prototype.open = function (element, force) {\n  if (!force && this.isOpen(element)) {\n    return;\n  }\n  this.close();\n  this._updateAndOpen(element);\n};\nContextPad.prototype._getProviders = function () {\n  var event = this._eventBus.createEvent({\n    type: 'contextPad.getProviders',\n    providers: []\n  });\n  this._eventBus.fire(event);\n  return event.providers;\n};\nContextPad.prototype._updateAndOpen = function (element) {\n  var entries = this.getEntries(element),\n    pad = this.getPad(element),\n    html = pad.html;\n  forEach(entries, function (entry, id) {\n    var grouping = entry.group || 'default',\n      control = domify(entry.html || '<div class=\"entry\" draggable=\"true\"></div>'),\n      container;\n    domAttr(control, 'data-action', id);\n    container = domQuery('[data-group=' + grouping + ']', html);\n    if (!container) {\n      container = domify('<div class=\"group\" data-group=\"' + grouping + '\"></div>');\n      html.appendChild(container);\n    }\n    container.appendChild(control);\n    if (entry.className) {\n      addClasses(control, entry.className);\n    }\n    if (entry.title) {\n      domAttr(control, 'title', entry.title);\n    }\n    if (entry.imageUrl) {\n      control.appendChild(domify('<img src=\"' + entry.imageUrl + '\">'));\n    }\n  });\n  domClasses(html).add('open');\n  this._current = {\n    element: element,\n    pad: pad,\n    entries: entries\n  };\n  this._eventBus.fire('contextPad.open', {\n    current: this._current\n  });\n};\nContextPad.prototype.getPad = function (element) {\n  if (this.isOpen()) {\n    return this._current.pad;\n  }\n  var self = this;\n  var overlays = this._overlays;\n  var html = domify('<div class=\"djs-context-pad\"></div>');\n  var overlaysConfig = assign({\n    html: html\n  }, this._overlaysConfig);\n  domDelegate.bind(html, entrySelector, 'click', function (event) {\n    self.trigger('click', event);\n  });\n  domDelegate.bind(html, entrySelector, 'dragstart', function (event) {\n    self.trigger('dragstart', event);\n  });\n\n  // stop propagation of mouse events\n  domEvent.bind(html, 'mousedown', function (event) {\n    event.stopPropagation();\n  });\n  this._overlayId = overlays.add(element, 'context-pad', overlaysConfig);\n  var pad = overlays.get(this._overlayId);\n  this._eventBus.fire('contextPad.create', {\n    element: element,\n    pad: pad\n  });\n  return pad;\n};\n\n/**\n * Close the context pad\n */\nContextPad.prototype.close = function () {\n  if (!this.isOpen()) {\n    return;\n  }\n  this._overlays.remove(this._overlayId);\n  this._overlayId = null;\n  this._eventBus.fire('contextPad.close', {\n    current: this._current\n  });\n  this._current = null;\n};\n\n/**\n * Check if pad is open. If element is given, will check\n * if pad is opened with given element.\n *\n * @param {Element} element\n * @return {boolean}\n */\nContextPad.prototype.isOpen = function (element) {\n  return !!this._current && (!element ? true : this._current.element === element);\n};\n\n// helpers //////////////////////\n\nfunction addClasses(element, classNames) {\n  var classes = domClasses(element);\n  var actualClassNames = isArray(classNames) ? classNames : classNames.split(/\\s+/g);\n  actualClassNames.forEach(function (cls) {\n    classes.add(cls);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}