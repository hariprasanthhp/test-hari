{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let ProfileService = /*#__PURE__*/(() => {\n  class ProfileService {\n    constructor(http, sso) {\n      this.http = http;\n      this.sso = sso;\n      this.baseUrl = `${environment.COC_SERVICES_ACTIVATION_URL}/serviceDefinitions`;\n      this.bandwidhtbaseUrl = `${environment.COC_SERVICES_ACTIVATION_URL}/bandwidthTiers`;\n      this.subscriberbaseUrl = `${environment.COC_SERVICES_ACTIVATION_URL}/serviceTemplates`;\n      this.ouibaseurl = `${environment.COC_SERVICES_ACTIVATION_URL}/ouiMatchList`;\n      this.multirangebaseurl = `${environment.COC_SERVICES_ACTIVATION_URL}/multicastRange`;\n      this.multicastvlansbaseurl = `${environment.COC_SERVICES_ACTIVATION_URL}/multicastVlan`;\n    }\n    getServiceTemplateType(orgId, name) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/serviceTemplates/type?${ID}type=${name}`).pipe(catchError(this.handleError));\n    }\n    saveProfile(orgId, params) {\n      return this.http.post(`${environment.COC_SERVICE_MIGRATION_URL}/ont/smp?orgId=${orgId}`, params).pipe(catchError(this.handleError));\n    }\n    updateJobMig(id, name, des) {\n      let url = `${environment.COC_SERVICE_MIGRATION_URL}/ont/migrate/${id}?name=${name}`;\n      if (des) {\n        url = url + `&description=${des}`;\n      }\n      return this.http.put(url, '').pipe(catchError(this.handleError));\n    }\n    saveJobMig(orgId, params, name, des) {\n      let url = `${environment.COC_SERVICE_MIGRATION_URL}/ont/migrate?name=${name}`;\n      if (des) {\n        url = url + `&description=${des}`;\n      }\n      return this.http.post(url, params).pipe(catchError(this.handleError));\n    }\n    startMigration(id, orgId, params) {\n      return this.http.put(`${environment.COC_SERVICE_MIGRATION_URL}/migration/${id}/accept`, '').pipe(catchError(this.handleError));\n    }\n    ExportMigration(id) {\n      // let options = {\n      //   headers: new HttpHeaders()\n      //   .set(\"content-type\", \"text/csv\")\n      // }\n      return this.http.get(`${environment.COC_SERVICE_MIGRATION_URL}/export/${id}`).pipe(catchError(this.handleError));\n    }\n    AbortMigration(id, orgId, params) {\n      return this.http.put(`${environment.COC_SERVICE_MIGRATION_URL}/migration/${id}/abort`, '').pipe(catchError(this.handleError));\n    }\n    DeleteMigration(id, orgId, params) {\n      return this.http.delete(`${environment.COC_SERVICE_MIGRATION_URL}/migration/${id}`).pipe(catchError(this.handleError));\n    }\n    undoMigration(id, orgId, params) {\n      return this.http.put(`${environment.COC_SERVICE_MIGRATION_URL}/migration/${id}/revert`, '').pipe(catchError(this.handleError));\n    }\n    UpdateProfile(orgId, params, id) {\n      return this.http.put(`${environment.COC_SERVICE_MIGRATION_URL}/ont/smp/${id}`, params).pipe(catchError(this.handleError));\n    }\n    GetAllservices(id) {\n      return this.http.get(`${environment.COC_SERVICE_MIGRATION_URL}/migration/${id}/services?page=0&size=10`).pipe(catchError(this.handleError));\n    }\n    GetAllsummary(id) {\n      return this.http.get(`${environment.COC_SERVICE_MIGRATION_URL}/migration/${id}`).pipe(catchError(this.handleError));\n    }\n    GetAllProfile(orgId, page, size) {\n      return this.http.get(`${environment.COC_SERVICE_MIGRATION_URL}/ont/smps?page=${page}&size=10`).pipe(catchError(this.handleError));\n    }\n    GetAllJob(orgId, page, size) {\n      return this.http.get(`${environment.COC_SERVICE_MIGRATION_URL}/migration/all?page=${page}&size=10`).pipe(catchError(this.handleError));\n    }\n    GetProfile(id) {\n      return this.http.get(`${environment.COC_SERVICE_MIGRATION_URL}/ont/smp/${id}`).pipe(catchError(this.handleError));\n    }\n    DeleteProfile(id, orgId) {\n      return this.http.delete(`${environment.COC_SERVICE_MIGRATION_URL}/ont/smp/${id}`).pipe(catchError(this.handleError));\n    }\n    getsubscriber() {\n      return this.http.get(this.baseUrl).pipe(catchError(this.handleError));\n    }\n    getOuiList() {\n      return this.http.get(this.ouibaseurl).pipe(map(res => {\n        if (typeof res === 'object') {\n          res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n            numeric: false\n          }));\n          return res;\n        } else return res;\n      }), catchError(this.handleError));\n    }\n    getMultipleRange() {\n      return this.http.get(this.multirangebaseurl).pipe(map(res => {\n        if (typeof res === 'object') {\n          res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n            numeric: false\n          }));\n          return res;\n        } else return res;\n      }), catchError(this.handleError));\n    }\n    getMultiplecastVlan() {\n      return this.http.get(this.multicastvlansbaseurl).pipe(map(res => {\n        if (typeof res === 'object') {\n          res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n            numeric: false\n          }));\n          return res;\n        } else return res;\n      }), catchError(this.handleError));\n    }\n    getsubscriberDetail(name, type) {\n      name = encodeURIComponent(name);\n      switch (type) {\n        case \"Service Defintion\":\n          {\n            return this.http.get(`${this.baseUrl}?name=${name}`).pipe(catchError(this.handleError));\n          }\n        case \"Subscriber\":\n          {\n            return this.http.get(`${this.subscriberbaseUrl}?name=${name}`).pipe(catchError(this.handleError));\n          }\n        case \"Bandwidth tier\":\n          {\n            return this.http.get(`${this.bandwidhtbaseUrl}?name=${name}`).pipe(catchError(this.handleError));\n          }\n        case \"ouiMatchList\":\n          {\n            return this.http.get(`${this.ouibaseurl}?name=${name}`).pipe(catchError(this.handleError));\n          }\n        case \"Multicast Range\":\n          {\n            return this.http.get(`${this.multirangebaseurl}?name=${name}`).pipe(catchError(this.handleError));\n          }\n        case \"Multicast VLAN\":\n          {\n            return this.http.get(`${this.multicastvlansbaseurl}?name=${name}`).pipe(catchError(this.handleError));\n          }\n      }\n    }\n    delsubscriber(name, type) {\n      name = encodeURIComponent(name);\n      switch (type) {\n        case \"Service Defintion\":\n          {\n            return this.http.delete(this.baseUrl + \"/\" + `${name}`).pipe(catchError(this.handleError));\n          }\n        case \"Subscriber\":\n          {\n            return this.http.delete(this.subscriberbaseUrl + \"/\" + `${name}`).pipe(catchError(this.handleError));\n          }\n        case \"Bandwidth tier\":\n          {\n            return this.http.delete(this.bandwidhtbaseUrl + \"/\" + `${name}`).pipe(catchError(this.handleError));\n          }\n        case \"ouiMatchList\":\n          {\n            return this.http.delete(this.ouibaseurl + \"/\" + `${name}`).pipe(catchError(this.handleError));\n          }\n        case \"Multicast Range\":\n          {\n            return this.http.delete(this.multirangebaseurl + \"/\" + `${name}`).pipe(catchError(this.handleError));\n          }\n        case \"Multicast VLAN\":\n          {\n            return this.http.delete(this.multicastvlansbaseurl + \"/\" + `${name}`).pipe(catchError(this.handleError));\n          }\n      }\n    }\n    postdata(data, type) {\n      switch (type) {\n        case \"service_Definition_Profile\":\n          {\n            return this.http.post(this.baseUrl, data).pipe(catchError(this.handleError));\n          }\n        case \"subscriber_profile\":\n          {\n            return this.http.post(this.subscriberbaseUrl, data).pipe(catchError(this.handleError));\n          }\n        case \"bandWidth_profile\":\n          {\n            return this.http.post(this.bandwidhtbaseUrl, data).pipe(catchError(this.handleError));\n          }\n        case \"oui_profile\":\n          {\n            return this.http.post(this.ouibaseurl, data).pipe(catchError(this.handleError));\n          }\n        case \"Multicast_Range_Profile\":\n          {\n            return this.http.post(this.multirangebaseurl, data).pipe(catchError(this.handleError));\n          }\n        case 'Multicast_Vlan_Profile':\n          {\n            return this.http.post(this.multicastvlansbaseurl, data).pipe(catchError(this.handleError));\n          }\n      }\n      // return this.http.post(this.baseUrl, data).pipe(catchError(this.handleError));\n    }\n\n    putdata(data, type) {\n      switch (type) {\n        case \"service_Definition_Profile\":\n          {\n            return this.http.put(this.baseUrl, data).pipe(catchError(this.handleError));\n          }\n        case \"subscriber_profile\":\n          {\n            return this.http.put(this.subscriberbaseUrl, data).pipe(catchError(this.handleError));\n          }\n        case \"bandWidth_profile\":\n          {\n            return this.http.put(this.bandwidhtbaseUrl, data).pipe(catchError(this.handleError));\n          }\n        case \"oui_profile\":\n          {\n            return this.http.put(this.ouibaseurl, data).pipe(catchError(this.handleError));\n          }\n        case \"Multicast_Range_Profile\":\n          {\n            return this.http.put(this.multirangebaseurl, data).pipe(catchError(this.handleError));\n          }\n        case 'Multicast_Vlan_Profile':\n          {\n            return this.http.put(this.multicastvlansbaseurl, data).pipe(catchError(this.handleError));\n          }\n      }\n      //return this.http.put(this.baseUrl, data).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      return throwError(error);\n    }\n    getProfileList(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-config/configuration-profile?${ID}`);\n    }\n    convert_to_kpbs(number, unit = 'mbps') {\n      switch (unit) {\n        case 'gbps':\n          {\n            return number * 1000000;\n          }\n        case 'mbps':\n          {\n            return number * 1000;\n          }\n        default:\n          return number;\n      }\n    }\n    convert_kbps_to(number, unit = 'mbps', convert = {\n      start: {\n        count: 0\n      }\n    }) {\n      if (convert.start.count > 1) return number;\n      switch (unit) {\n        case 'gbps':\n          {\n            return number / 1000000;\n          }\n        case 'mbps':\n          {\n            return number / 1000;\n          }\n        default:\n          return number;\n      }\n    }\n  }\n  ProfileService.ɵfac = function ProfileService_Factory(t) {\n    return new (t || ProfileService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  ProfileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProfileService,\n    factory: ProfileService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProfileService;\n})();","map":null,"metadata":{},"sourceType":"module"}