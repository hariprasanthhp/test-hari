{"ast":null,"code":"import { forEach } from 'min-dash';\n\n/**\n * Return direction given axis and delta.\n *\n * @param {string} axis\n * @param {number} delta\n *\n * @return {string}\n */\nexport function getDirection(axis, delta) {\n  if (axis === 'x') {\n    if (delta > 0) {\n      return 'e';\n    }\n    if (delta < 0) {\n      return 'w';\n    }\n  }\n  if (axis === 'y') {\n    if (delta > 0) {\n      return 's';\n    }\n    if (delta < 0) {\n      return 'n';\n    }\n  }\n  return null;\n}\n\n/**\n * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start\n * or end is to be moved or resized.\n *\n * @param {Array<djs.model.Shape} movingShapes\n * @param {Array<djs.model.Shape} resizingShapes\n *\n * @returns {Array<djs.model.Connection>}\n */\nexport function getWaypointsUpdatingConnections(movingShapes, resizingShapes) {\n  var waypointsUpdatingConnections = [];\n  forEach(movingShapes.concat(resizingShapes), function (shape) {\n    var incoming = shape.incoming,\n      outgoing = shape.outgoing;\n    forEach(incoming.concat(outgoing), function (connection) {\n      var source = connection.source,\n        target = connection.target;\n      if (includes(movingShapes, source) || includes(movingShapes, target) || includes(resizingShapes, source) || includes(resizingShapes, target)) {\n        if (!includes(waypointsUpdatingConnections, connection)) {\n          waypointsUpdatingConnections.push(connection);\n        }\n      }\n    });\n  });\n  return waypointsUpdatingConnections;\n}\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\n * Resize bounds.\n *\n * @param {Object} bounds\n * @param {number} bounds.x\n * @param {number} bounds.y\n * @param {number} bounds.width\n * @param {number} bounds.height\n * @param {string} direction\n * @param {Object} delta\n * @param {number} delta.x\n * @param {number} delta.y\n *\n * @return {Object}\n */\nexport function resizeBounds(bounds, direction, delta) {\n  var x = bounds.x,\n    y = bounds.y,\n    width = bounds.width,\n    height = bounds.height,\n    dx = delta.x,\n    dy = delta.y;\n  switch (direction) {\n    case 'n':\n      return {\n        x: x,\n        y: y + dy,\n        width: width,\n        height: height - dy\n      };\n    case 's':\n      return {\n        x: x,\n        y: y,\n        width: width,\n        height: height + dy\n      };\n    case 'w':\n      return {\n        x: x + dx,\n        y: y,\n        width: width - dx,\n        height: height\n      };\n    case 'e':\n      return {\n        x: x,\n        y: y,\n        width: width + dx,\n        height: height\n      };\n    default:\n      throw new Error('unknown direction: ' + direction);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}