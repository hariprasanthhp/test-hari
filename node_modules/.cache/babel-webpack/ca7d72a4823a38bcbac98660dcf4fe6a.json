{"ast":null,"code":"import { assign, forEach, isNumber, map, pick, values } from 'min-dash';\nimport { getBBox, getParents } from '../../../util/Elements';\nvar round = Math.round;\nexport default function CreateElementsHandler(modeling) {\n  this._modeling = modeling;\n}\nCreateElementsHandler.$inject = ['modeling'];\nCreateElementsHandler.prototype.preExecute = function (context) {\n  var elements = context.elements,\n    parent = context.parent,\n    parentIndex = context.parentIndex,\n    position = context.position,\n    hints = context.hints;\n  var modeling = this._modeling;\n\n  // make sure each element has x and y\n  forEach(elements, function (element) {\n    if (!isNumber(element.x)) {\n      element.x = 0;\n    }\n    if (!isNumber(element.y)) {\n      element.y = 0;\n    }\n  });\n  var bbox = getBBox(elements);\n\n  // center elements around position\n  forEach(elements, function (element) {\n    if (isConnection(element)) {\n      element.waypoints = map(element.waypoints, function (waypoint) {\n        return {\n          x: round(waypoint.x - bbox.x - bbox.width / 2 + position.x),\n          y: round(waypoint.y - bbox.y - bbox.height / 2 + position.y)\n        };\n      });\n    }\n    assign(element, {\n      x: round(element.x - bbox.x - bbox.width / 2 + position.x),\n      y: round(element.y - bbox.y - bbox.height / 2 + position.y)\n    });\n  });\n  var parents = getParents(elements);\n  var cache = {};\n  forEach(elements, function (element) {\n    if (isConnection(element)) {\n      cache[element.id] = isNumber(parentIndex) ? modeling.createConnection(cache[element.source.id], cache[element.target.id], parentIndex, element, element.parent || parent, hints) : modeling.createConnection(cache[element.source.id], cache[element.target.id], element, element.parent || parent, hints);\n      return;\n    }\n    var createShapeHints = assign({}, hints);\n    if (parents.indexOf(element) === -1) {\n      createShapeHints.autoResize = false;\n    }\n    cache[element.id] = isNumber(parentIndex) ? modeling.createShape(element, pick(element, ['x', 'y', 'width', 'height']), element.parent || parent, parentIndex, createShapeHints) : modeling.createShape(element, pick(element, ['x', 'y', 'width', 'height']), element.parent || parent, createShapeHints);\n  });\n  context.elements = values(cache);\n};\n\n// helpers //////////\n\nfunction isConnection(element) {\n  return !!element.waypoints;\n}","map":null,"metadata":{},"sourceType":"module"}