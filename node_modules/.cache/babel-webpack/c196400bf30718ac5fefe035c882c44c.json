{"ast":null,"code":"import * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as Highcharts from \"highcharts/highstock\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\nconst EXCEL_EXTENSION = '.xlsx';\nexport let ExportExcelService = /*#__PURE__*/(() => {\n  class ExportExcelService {\n    constructor(http) {\n      this.http = http;\n    }\n    exportAsExcelFile(json, excelFileName) {\n      const worksheet = XLSX.utils.json_to_sheet(json);\n      const workbook = {\n        Sheets: {\n          'data': worksheet\n        },\n        SheetNames: ['data']\n      };\n      const excelBuffer = XLSX.write(workbook, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      this.saveAsExcelFile(excelBuffer, excelFileName);\n    }\n    saveAsExcelFile(buffer, fileName) {\n      const data = new Blob([buffer], {\n        type: EXCEL_TYPE\n      });\n      FileSaver.saveAs(data, fileName + EXCEL_EXTENSION);\n    }\n    ConvertToCSV(objArray, headerList) {\n      // let array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\n      // let str = '';\n      // let row = '';\n      // for (let index in headerList) {\n      //   row += JSON.stringify(headerList[index]) + ',';\n      // }\n      // row = row.slice(0, -1);\n      // str += row + '\\r\\n';\n      // for (let i = 0; i < array.length; i++) {\n      //   let line = '';\n      //   for (let index in headerList) {\n      //     let head = headerList[index];\n      //     line += '\\\"' + (array[i][head] != undefined ? array[i][head] : '') + '\\\"' + ',';\n      //   }\n      //   str += line + '\\r\\n';\n      // }\n      // return str;\n      // const header = Object.keys(objArray[0]); //CCL-42675\n      const header = headerList.map(row => row);\n      const csv = objArray.map(row => header.map(fieldName => row[fieldName] != undefined ? this.containsSpecialCharacters(row[fieldName]) ? JSON.stringify(row[fieldName]) : row[fieldName] : \"\"));\n      csv.unshift(header.join(','));\n      const csvArray = csv.join('\\r\\n');\n      return csvArray;\n    }\n    containsSpecialCharacters(str) {\n      // var regex = /[ !@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/g;\n      var regex = /[,]/g;\n      return regex.test(str);\n    }\n    ConvertToTrendsCSV(objArray, headerList) {\n      let array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\n      let str = '';\n      let row = '';\n      for (let index in headerList) {\n        row += headerList[index] + ',';\n      }\n      row = row.slice(0, -1);\n      str += row + '\\r\\n';\n      for (let i = 0; i < array.length; i++) {\n        let line = '';\n        for (let index in headerList) {\n          let head = headerList[index];\n          Highcharts.setOptions({\n            lang: {\n              decimalPoint: '.',\n              thousandsSep: ','\n            }\n          });\n          if (array[i][head] == \"Total\" || array[i][head] == \"Streaming\") {\n            line += '\\\"' + (array[i][head] != undefined ? array[i][head] : '') + '\\\"' + ',';\n          } else {\n            line += '\\\"' + (array[i][head] != undefined ? Highcharts.numberFormat(array[i][head] / 1024, 2) : '') + '\\\"' + ',';\n          }\n        }\n        str += line + '\\r\\n';\n      }\n      return str;\n    }\n    getSize(obj) {\n      var size = 0,\n        key;\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) size++;\n      }\n      return size;\n    }\n    downLoadCSV(name, chartData, extraData, after) {\n      let data = chartData;\n      let headers = [];\n      /* to get max length object */\n      let maxSize = 0;\n      let maxIndex = 0;\n      let i = 0;\n      for (let obj of data) {\n        let size = this.getSize(obj);\n        if (size > maxSize) {\n          maxSize = size;\n          maxIndex = i;\n        }\n        i++;\n      }\n      for (let key in data[maxIndex]) {\n        if (headers.indexOf(key) === -1) {\n          headers.push(key);\n        }\n      }\n      let fName = name + '.csv';\n      let fType = 'text/csv;charset=utf-8';\n      let csvData = this.ConvertToCSV(data, headers);\n      if (extraData) {\n        if (after) {\n          csvData = csvData + extraData;\n        } else {\n          csvData = extraData + csvData;\n        }\n      }\n      const BOM = '\\uFEFF';\n      var blob = new Blob([BOM + csvData], {\n        type: fType\n      });\n      saveAs(blob, fName);\n    }\n    downLoadCSVRevenue(name, chartData, extraData, after) {\n      let data = chartData;\n      let headers = [];\n      for (let obj of data) {\n        for (let key of Object.keys(obj)) {\n          if (headers.indexOf(key) === -1) {\n            headers.push(key);\n          }\n        }\n      }\n      let fName = name + '.csv';\n      let fType = 'text/csv;charset=utf-8';\n      let csvData = this.ConvertToCSV(data, headers);\n      if (extraData) {\n        if (after) {\n          csvData = csvData + extraData;\n        } else {\n          csvData = extraData + csvData;\n        }\n      }\n      var blob = new Blob([csvData], {\n        type: fType\n      });\n      saveAs(blob, fName);\n    }\n    downLoadTrendsCSV(name, chartData, extraData, after) {\n      let data = chartData;\n      let headers = [];\n      /* to get max length object */\n      let maxSize = 0;\n      let maxIndex = 0;\n      let i = 0;\n      for (let obj of data) {\n        let size = this.getSize(obj);\n        if (size > maxSize) {\n          maxSize = size;\n          maxIndex = i;\n        }\n        i++;\n      }\n      for (let key in data[maxIndex]) {\n        if (headers.indexOf(key) === -1) {\n          headers.push(key);\n        }\n      }\n      let fName = name + '.csv';\n      let fType = 'text/csv;charset=utf-8';\n      let csvData = this.ConvertToTrendsCSV(data, headers);\n      if (extraData) {\n        if (after) {\n          csvData = csvData + extraData;\n        } else {\n          csvData = extraData + csvData;\n        }\n      }\n      var blob = new Blob([csvData], {\n        type: fType\n      });\n      saveAs(blob, fName);\n    }\n    exportFromUrl(url, name, fsan, username, password) {\n      let authorizationData = 'Basic ' + btoa(username + ':' + password);\n      console.log(\"user name=>\", username);\n      console.log(\"pass name=>\", password);\n      console.log(\"Basic AUth=>\", authorizationData);\n      let options = {\n        headers: new HttpHeaders().set('Authorization', authorizationData).set(\"content-type\", \"application/json\")\n        /* .set('Accept-Encoding', 'gzip, deflate, br')\r\n        .set('Connection', 'keep-alive') */.set('Accept', '*/*'),\n        params: new HttpParams().set(\"fsan\", fsan).set(\"username\", username).set(\"password\", password),\n        responseType: 'arraybuffer'\n      };\n      this.http.get(url, options).subscribe(data => {\n        console.log(\"data=>\", data);\n        let blob = new Blob([data], {\n          type: 'application/octet-stream'\n        });\n        FileSaver.saveAs(blob, name);\n      });\n      return;\n      let headers = new HttpHeaders();\n      console.log(url);\n      //url = 'https://dev.api.calix.ai/files/5fb734670b0a6058a2c9592a?username=ee38fc1&password=1f8b497&fsan=CXNK002054E9';\n      //let isPdf = true;\n      let fileName = name ? name : 'download';\n      if (1) {\n        // url = 'http://localhost:4200/assets/download/file-sample.pdf';\n        // url = 'https://www.learningcontainer.com/wp-content/uploads/2019/09/sample-pdf-file.pdf'\n        let pdf = 'application/pdf';\n        headers = headers.set('Accept', pdf);\n        //headers = headers.set('dummy', pdf);\n        return this.http.get(url, {\n          headers: headers,\n          responseType: 'blob'\n        }).subscribe(data => {\n          var blob = new Blob([data], {\n            type: pdf\n          });\n          console.log(blob);\n          saveAs(blob, fileName + '.pdf');\n        });\n      } else {\n        //url = 'https://www.stats.govt.nz/assets/Uploads/Annual-enterprise-survey/Annual-enterprise-survey-2019-financial-year-provisional/Download-data/annual-enterprise-survey-2019-financial-year-provisional-csv.csv'\n        //let csv = 'text/csv;charset=utf-8';\n        let csv = 'application/csv';\n        headers = headers.set('Accept', csv);\n        return this.http.get(url, {\n          headers: headers,\n          responseType: 'blob'\n        }).subscribe(data => {\n          var blob = new Blob([data], {\n            type: csv\n          });\n          console.log(blob);\n          saveAs(blob, fileName + '.csv');\n        });\n      }\n      /*\r\n          let csv = 'text/csv;charset=utf-8';\r\n          let pdf = 'application/pdf';\r\n          headers = headers.set('Accept', csv);\r\n          return this.http.get(url, { headers: headers, responseType: 'blob' }).subscribe((data) => {\r\n            var blob = new Blob([data], { type: csv });\r\n            console.log(blob);\r\n            saveAs(blob, '.csv');\r\n          });\r\n      \r\n      \r\n      \r\n      \r\n      \r\n          this.getCsv(url).subscribe(response => {\r\n            console.log(response)\r\n            const link = document.createElement('a');\r\n            link.href = window.URL.createObjectURL(new Blob([response], { type: 'text/csv' }));\r\n            link.download = 'test' + '.csv';\r\n            link.click();\r\n          });\r\n          */\n      /*\r\n      let dwldLink = document.createElement(\"a\");\r\n      let isSafariBrowser = navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1;\r\n      if (isSafariBrowser) {  //if Safari open in new window to save file with random filename.\r\n      dwldLink.setAttribute(\"target\", \"_blank\");\r\n      }\r\n      if (window.navigator.msSaveBlob) { // IE\r\n      // window.navigator.msSaveOrOpenBlob(blob, filename + \".csv\")\r\n      }\r\n      let filename = 'sample.csv';\r\n      dwldLink.setAttribute(\"href\", url);\r\n      dwldLink.setAttribute(\"download\", filename);\r\n      dwldLink.style.visibility = \"hidden\";\r\n      document.body.appendChild(dwldLink);\r\n      dwldLink.click();\r\n      document.body.removeChild(dwldLink);\r\n      // url = 'https://www.stats.govt.nz/assets/Uploads/Annual-enterprise-survey/Annual-enterprise-survey-2019-financial-year-provisional/Download-data/annual-enterprise-survey-2019-financial-year-provisional-csv.csv';\r\n      // url = 'http://localhost:4200/assets/download/file-sample.pdf';\r\n      //window.open(url, '_self');\r\n          */\n    }\n  }\n\n  ExportExcelService.ɵfac = function ExportExcelService_Factory(t) {\n    return new (t || ExportExcelService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ExportExcelService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExportExcelService,\n    factory: ExportExcelService.ɵfac,\n    providedIn: 'root'\n  });\n  return ExportExcelService;\n})();","map":null,"metadata":{},"sourceType":"module"}