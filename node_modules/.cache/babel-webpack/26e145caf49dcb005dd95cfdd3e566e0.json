{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\nimport { isAny } from '../util/ModelingUtil';\nimport UpdateSemanticParentHandler from '../cmd/UpdateSemanticParentHandler';\n\n/**\r\n * BPMN specific data store behavior\r\n */\nexport default function DataStoreBehavior(canvas, commandStack, elementRegistry, eventBus) {\n  CommandInterceptor.call(this, eventBus);\n  commandStack.registerHandler('dataStore.updateContainment', UpdateSemanticParentHandler);\n  function getFirstParticipant() {\n    return elementRegistry.filter(function (element) {\n      return is(element, 'bpmn:Participant');\n    })[0];\n  }\n  function getDataStores(element) {\n    return element.children.filter(function (child) {\n      return is(child, 'bpmn:DataStoreReference') && !child.labelTarget;\n    });\n  }\n  function updateDataStoreParent(dataStore, newDataStoreParent) {\n    var dataStoreBo = dataStore.businessObject || dataStore;\n    newDataStoreParent = newDataStoreParent || getFirstParticipant();\n    if (newDataStoreParent) {\n      var newDataStoreParentBo = newDataStoreParent.businessObject || newDataStoreParent;\n      commandStack.execute('dataStore.updateContainment', {\n        dataStoreBo: dataStoreBo,\n        newSemanticParent: newDataStoreParentBo.processRef || newDataStoreParentBo,\n        newDiParent: newDataStoreParentBo.di\n      });\n    }\n  }\n\n  // disable auto-resize for data stores\n  this.preExecute('shape.create', function (event) {\n    var context = event.context,\n      shape = context.shape;\n    if (is(shape, 'bpmn:DataStoreReference') && shape.type !== 'label') {\n      if (!context.hints) {\n        context.hints = {};\n      }\n\n      // prevent auto resizing\n      context.hints.autoResize = false;\n    }\n  });\n\n  // disable auto-resize for data stores\n  this.preExecute('elements.move', function (event) {\n    var context = event.context,\n      shapes = context.shapes;\n    var dataStoreReferences = shapes.filter(function (shape) {\n      return is(shape, 'bpmn:DataStoreReference');\n    });\n    if (dataStoreReferences.length) {\n      if (!context.hints) {\n        context.hints = {};\n      }\n\n      // prevent auto resizing for data store references\n      context.hints.autoResize = shapes.filter(function (shape) {\n        return !is(shape, 'bpmn:DataStoreReference');\n      });\n    }\n  });\n\n  // update parent on data store created\n  this.postExecute('shape.create', function (event) {\n    var context = event.context,\n      shape = context.shape,\n      parent = shape.parent;\n    if (is(shape, 'bpmn:DataStoreReference') && shape.type !== 'label' && is(parent, 'bpmn:Collaboration')) {\n      updateDataStoreParent(shape);\n    }\n  });\n\n  // update parent on data store moved\n  this.postExecute('shape.move', function (event) {\n    var context = event.context,\n      shape = context.shape,\n      oldParent = context.oldParent,\n      parent = shape.parent;\n    if (is(oldParent, 'bpmn:Collaboration')) {\n      // do nothing if not necessary\n      return;\n    }\n    if (is(shape, 'bpmn:DataStoreReference') && shape.type !== 'label' && is(parent, 'bpmn:Collaboration')) {\n      var participant = is(oldParent, 'bpmn:Participant') ? oldParent : getAncestor(oldParent, 'bpmn:Participant');\n      updateDataStoreParent(shape, participant);\n    }\n  });\n\n  // update data store parents on participant or subprocess deleted\n  this.postExecute('shape.delete', function (event) {\n    var context = event.context,\n      shape = context.shape,\n      rootElement = canvas.getRootElement();\n    if (isAny(shape, ['bpmn:Participant', 'bpmn:SubProcess']) && is(rootElement, 'bpmn:Collaboration')) {\n      getDataStores(rootElement).filter(function (dataStore) {\n        return isDescendant(dataStore, shape);\n      }).forEach(function (dataStore) {\n        updateDataStoreParent(dataStore);\n      });\n    }\n  });\n\n  // update data store parents on collaboration -> process\n  this.postExecute('canvas.updateRoot', function (event) {\n    var context = event.context,\n      oldRoot = context.oldRoot,\n      newRoot = context.newRoot;\n    var dataStores = getDataStores(oldRoot);\n    dataStores.forEach(function (dataStore) {\n      if (is(newRoot, 'bpmn:Process')) {\n        updateDataStoreParent(dataStore, newRoot);\n      }\n    });\n  });\n}\nDataStoreBehavior.$inject = ['canvas', 'commandStack', 'elementRegistry', 'eventBus'];\ninherits(DataStoreBehavior, CommandInterceptor);\n\n// helpers //////////\n\nfunction isDescendant(descendant, ancestor) {\n  var descendantBo = descendant.businessObject || descendant,\n    ancestorBo = ancestor.businessObject || ancestor;\n  while (descendantBo.$parent) {\n    if (descendantBo.$parent === ancestorBo.processRef || ancestorBo) {\n      return true;\n    }\n    descendantBo = descendantBo.$parent;\n  }\n  return false;\n}\nfunction getAncestor(element, type) {\n  while (element.parent) {\n    if (is(element.parent, type)) {\n      return element.parent;\n    }\n    element = element.parent;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}