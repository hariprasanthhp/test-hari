{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { closest as domClosest } from 'min-dom';\nvar LOW_PRIORITY = 250;\n\n/**\n * The tool manager acts as middle-man between the available tool's and the Palette,\n * it takes care of making sure that the correct active state is set.\n *\n * @param  {Object}    eventBus\n * @param  {Object}    dragging\n */\nexport default function ToolManager(eventBus, dragging) {\n  this._eventBus = eventBus;\n  this._dragging = dragging;\n  this._tools = [];\n  this._active = null;\n}\nToolManager.$inject = ['eventBus', 'dragging'];\nToolManager.prototype.registerTool = function (name, events) {\n  var tools = this._tools;\n  if (!events) {\n    throw new Error('A tool has to be registered with it\\'s \"events\"');\n  }\n  tools.push(name);\n  this.bindEvents(name, events);\n};\nToolManager.prototype.isActive = function (tool) {\n  return tool && this._active === tool;\n};\nToolManager.prototype.length = function (tool) {\n  return this._tools.length;\n};\nToolManager.prototype.setActive = function (tool) {\n  var eventBus = this._eventBus;\n  if (this._active !== tool) {\n    this._active = tool;\n    eventBus.fire('tool-manager.update', {\n      tool: tool\n    });\n  }\n};\nToolManager.prototype.bindEvents = function (name, events) {\n  var eventBus = this._eventBus,\n    dragging = this._dragging;\n  var eventsToRegister = [];\n  eventBus.on(events.tool + '.init', function (event) {\n    var context = event.context;\n\n    // Active tools that want to reactivate themselves must do this explicitly\n    if (!context.reactivate && this.isActive(name)) {\n      this.setActive(null);\n      dragging.cancel();\n      return;\n    }\n    this.setActive(name);\n  }, this);\n\n  // Todo[ricardo]: add test cases\n  forEach(events, function (event) {\n    eventsToRegister.push(event + '.ended');\n    eventsToRegister.push(event + '.canceled');\n  });\n  eventBus.on(eventsToRegister, LOW_PRIORITY, function (event) {\n    // We defer the de-activation of the tool to the .activate phase,\n    // so we're able to check if we want to toggle off the current\n    // active tool or switch to a new one\n    if (!this._active) {\n      return;\n    }\n    if (isPaletteClick(event)) {\n      return;\n    }\n    this.setActive(null);\n  }, this);\n};\n\n// helpers ///////////////\n\n/**\n * Check if a given event is a palette click event.\n *\n * @param {EventBus.Event} event\n *\n * @return {boolean}\n */\nfunction isPaletteClick(event) {\n  var target = event.originalEvent && event.originalEvent.target;\n  return target && domClosest(target, '.group[data-group=\"tools\"]');\n}","map":null,"metadata":{},"sourceType":"module"}