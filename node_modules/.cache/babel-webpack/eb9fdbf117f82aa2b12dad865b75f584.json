{"ast":null,"code":"'use strict';\n\nvar cmdHelper = require('../../../../helper/CmdHelper');\nvar domQuery = require('min-dom').query,\n  domify = require('min-dom').domify,\n  domAttr = require('min-dom').attr;\nvar forEach = require('lodash/forEach'),\n  find = require('lodash/find');\nvar elementHelper = require('../../../../helper/ElementHelper');\nvar utils = require('../../../../Utils'),\n  escapeHTML = utils.escapeHTML;\nvar selector = 'select[name=selectedElement]';\n\n/**\n * Get select box containing all elements.\n *\n * @param {DOMElement} node\n *\n * @return {DOMElement} the select box\n */\nfunction getSelectBox(node) {\n  return domQuery(selector, node);\n}\n\n/**\n * Find element by given id.\n *\n * @param {ModdleElement} eventDefinition\n *\n * @return {ModdleElement} an element\n */\nfunction findElementById(eventDefinition, type, id) {\n  var elements = utils.findRootElementsByType(eventDefinition, type);\n  return find(elements, function (element) {\n    return element.id === id;\n  });\n}\n\n/**\n * Create an entry to modify the reference to an element from an\n * event definition.\n *\n * @param  {djs.model.Base} element\n * @param  {ModdleElement} definition\n * @param  {BpmnFactory} bpmnFactory\n * @param  {Object} options\n * @param  {string} options.label the label of the entry\n * @param  {string} options.description the description of the entry\n * @param  {string} options.elementName the name of the element\n * @param  {string} options.elementType the type of the element\n * @param  {string} options.referenceProperty the name of referencing property\n * @param  {string} options.newElementIdPrefix the prefix of a new created element\n *\n * @return {Array<Object>} return an array containing the entries\n */\nmodule.exports = function (element, definition, bpmnFactory, options) {\n  var elementName = options.elementName || '',\n    elementType = options.elementType,\n    referenceProperty = options.referenceProperty;\n  var newElementIdPrefix = options.newElementIdPrefix || 'elem_';\n  var label = options.label || '',\n    description = options.description || '';\n  var entries = [];\n  var canBeHidden = !!options.hidden && typeof options.hidden === 'function';\n  entries.push({\n    id: options.id || 'event-definitions-' + elementName,\n    description: description,\n    isShown: function () {\n      if (canBeHidden) {\n        return !options.hidden.apply(definition, arguments);\n      }\n      return !options.hidden;\n    },\n    html: '<div class=\"bpp-row bpp-select\" data-show=\"isShown\">' + '<label for=\"camunda-' + escapeHTML(elementName) + '\">' + escapeHTML(label) + '</label>' + '<div class=\"bpp-field-wrapper\">' + '<select id=\"camunda-' + escapeHTML(elementName) + '\" name=\"selectedElement\" data-value>' + '</select>' + '<button class=\"action-button add\" id=\"addElement\" data-action=\"addElement\"><span>+</span></button>' + '</div>' + '</div>',\n    get: function (element, entryNode) {\n      utils.updateOptionsDropDown(selector, definition, elementType, entryNode);\n      var reference = definition.get(referenceProperty);\n      return {\n        selectedElement: reference && reference.id || ''\n      };\n    },\n    set: function (element, values) {\n      var selection = values.selectedElement;\n      var props = {};\n      if (!selection || typeof selection === 'undefined') {\n        // remove reference to element\n        props[referenceProperty] = undefined;\n        return cmdHelper.updateBusinessObject(element, definition, props);\n      }\n      var commands = [];\n      var selectedElement = findElementById(definition, elementType, selection);\n      if (!selectedElement) {\n        var root = utils.getRoot(definition);\n\n        // create a new element\n        selectedElement = elementHelper.createElement(elementType, {\n          name: selection\n        }, root, bpmnFactory);\n        commands.push(cmdHelper.addAndRemoveElementsFromList(element, root, 'rootElements', null, [selectedElement]));\n      }\n\n      // update reference to element\n      props[referenceProperty] = selectedElement;\n      commands.push(cmdHelper.updateBusinessObject(element, definition, props));\n      return commands;\n    },\n    addElement: function (element, inputNode) {\n      // note: this generated id will be used as name\n      // of the element and not as id\n      var id = utils.nextId(newElementIdPrefix);\n      var optionTemplate = domify('<option value=\"' + escapeHTML(id) + '\"> (id=' + escapeHTML(id) + ')' + '</option>');\n\n      // add new option\n      var selectBox = getSelectBox(inputNode);\n      selectBox.insertBefore(optionTemplate, selectBox.firstChild);\n\n      // select new element in the select box\n      forEach(selectBox, function (option) {\n        if (option.value === id) {\n          domAttr(option, 'selected', 'selected');\n        } else {\n          domAttr(option, 'selected', null);\n        }\n      });\n      return true;\n    }\n  });\n  return entries;\n};","map":null,"metadata":{},"sourceType":"script"}