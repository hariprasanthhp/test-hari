{"ast":null,"code":"import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport inherits from 'inherits';\nimport cssEscape from 'css.escape';\nimport { assign, forEach } from 'min-dash';\nimport { query as domQuery } from 'min-dom';\nimport { attr as svgAttr } from 'tiny-svg';\nvar LOW_PRIORITY = 250;\nexport default function BpmnReplacePreview(eventBus, elementRegistry, elementFactory, canvas, previewSupport) {\n  CommandInterceptor.call(this, eventBus);\n\n  /**\n   * Replace the visuals of all elements in the context which can be replaced\n   *\n   * @param  {Object} context\n   */\n  function replaceVisual(context) {\n    var replacements = context.canExecute.replacements;\n    forEach(replacements, function (replacement) {\n      var id = replacement.oldElementId;\n      var newElement = {\n        type: replacement.newElementType\n      };\n\n      // if the visual of the element is already replaced\n      if (context.visualReplacements[id]) {\n        return;\n      }\n      var element = elementRegistry.get(id);\n      assign(newElement, {\n        x: element.x,\n        y: element.y\n      });\n\n      // create a temporary shape\n      var tempShape = elementFactory.createShape(newElement);\n      canvas.addShape(tempShape, element.parent);\n\n      // select the original SVG element related to the element and hide it\n      var gfx = domQuery('[data-element-id=\"' + cssEscape(element.id) + '\"]', context.dragGroup);\n      if (gfx) {\n        svgAttr(gfx, {\n          display: 'none'\n        });\n      }\n\n      // clone the gfx of the temporary shape and add it to the drag group\n      var dragger = previewSupport.addDragger(tempShape, context.dragGroup);\n      context.visualReplacements[id] = dragger;\n      canvas.removeShape(tempShape);\n    });\n  }\n\n  /**\n   * Restore the original visuals of the previously replaced elements\n   *\n   * @param  {Object} context\n   */\n  function restoreVisual(context) {\n    var visualReplacements = context.visualReplacements;\n    forEach(visualReplacements, function (dragger, id) {\n      var originalGfx = domQuery('[data-element-id=\"' + cssEscape(id) + '\"]', context.dragGroup);\n      if (originalGfx) {\n        svgAttr(originalGfx, {\n          display: 'inline'\n        });\n      }\n      dragger.remove();\n      if (visualReplacements[id]) {\n        delete visualReplacements[id];\n      }\n    });\n  }\n  eventBus.on('shape.move.move', LOW_PRIORITY, function (event) {\n    var context = event.context,\n      canExecute = context.canExecute;\n    if (!context.visualReplacements) {\n      context.visualReplacements = {};\n    }\n    if (canExecute && canExecute.replacements) {\n      replaceVisual(context);\n    } else {\n      restoreVisual(context);\n    }\n  });\n}\nBpmnReplacePreview.$inject = ['eventBus', 'elementRegistry', 'elementFactory', 'canvas', 'previewSupport'];\ninherits(BpmnReplacePreview, CommandInterceptor);","map":null,"metadata":{},"sourceType":"module"}