{"ast":null,"code":"import inherits from 'inherits';\nimport BaseRenderer from './BaseRenderer';\nimport { componentsToPath, createLine } from '../util/RenderUtil';\nimport { append as svgAppend, attr as svgAttr, create as svgCreate } from 'tiny-svg';\nimport { isFrameElement } from '../util/Elements';\n\n// apply default renderer with lowest possible priority\n// so that it only kicks in if noone else could render\nvar DEFAULT_RENDER_PRIORITY = 1;\n\n/**\n * The default renderer used for shapes and connections.\n *\n * @param {EventBus} eventBus\n * @param {Styles} styles\n */\nexport default function DefaultRenderer(eventBus, styles) {\n  //\n  BaseRenderer.call(this, eventBus, DEFAULT_RENDER_PRIORITY);\n  this.CONNECTION_STYLE = styles.style(['no-fill'], {\n    strokeWidth: 5,\n    stroke: 'fuchsia'\n  });\n  this.SHAPE_STYLE = styles.style({\n    fill: 'white',\n    stroke: 'fuchsia',\n    strokeWidth: 2\n  });\n  this.FRAME_STYLE = styles.style(['no-fill'], {\n    stroke: 'fuchsia',\n    strokeDasharray: 4,\n    strokeWidth: 2\n  });\n}\ninherits(DefaultRenderer, BaseRenderer);\nDefaultRenderer.prototype.canRender = function () {\n  return true;\n};\nDefaultRenderer.prototype.drawShape = function drawShape(visuals, element) {\n  var rect = svgCreate('rect');\n  svgAttr(rect, {\n    x: 0,\n    y: 0,\n    width: element.width || 0,\n    height: element.height || 0\n  });\n  if (isFrameElement(element)) {\n    svgAttr(rect, this.FRAME_STYLE);\n  } else {\n    svgAttr(rect, this.SHAPE_STYLE);\n  }\n  svgAppend(visuals, rect);\n  return rect;\n};\nDefaultRenderer.prototype.drawConnection = function drawConnection(visuals, connection) {\n  var line = createLine(connection.waypoints, this.CONNECTION_STYLE);\n  svgAppend(visuals, line);\n  return line;\n};\nDefaultRenderer.prototype.getShapePath = function getShapePath(shape) {\n  var x = shape.x,\n    y = shape.y,\n    width = shape.width,\n    height = shape.height;\n  var shapePath = [['M', x, y], ['l', width, 0], ['l', 0, height], ['l', -width, 0], ['z']];\n  return componentsToPath(shapePath);\n};\nDefaultRenderer.prototype.getConnectionPath = function getConnectionPath(connection) {\n  var waypoints = connection.waypoints;\n  var idx,\n    point,\n    connectionPath = [];\n  for (idx = 0; point = waypoints[idx]; idx++) {\n    // take invisible docking into account\n    // when creating the path\n    point = point.original || point;\n    connectionPath.push([idx === 0 ? 'M' : 'L', point.x, point.y]);\n  }\n  return componentsToPath(connectionPath);\n};\nDefaultRenderer.$inject = ['eventBus', 'styles'];","map":null,"metadata":{},"sourceType":"module"}