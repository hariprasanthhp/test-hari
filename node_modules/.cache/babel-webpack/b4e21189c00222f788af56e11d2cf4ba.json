{"ast":null,"code":"import cmdHelper from 'bpmn-js-properties-panel/lib/helper/CmdHelper';\nimport entryFactory from 'bpmn-js-properties-panel/lib/factory/EntryFactory';\nimport elementHelper from 'bpmn-js-properties-panel/lib/helper/ElementHelper';\nimport { getBusinessObject } from 'bpmn-js/lib/util/ModelUtil';\nimport { is } from 'bpmn-js/lib/util/ModelUtil';\nimport { getCalledElement, isPropagateAllChildVariables } from '../../../../helper/CalledElementHelper';\n\n/**\n * Create an input or output mapping entry for a single input or output entry\n * @param {Function} translate - translate function.\n * @param {Object} options - Options.\n * @param {string} [options.idPrefix] - preFix used to construct the 'id' of the GUI entries\n * @param {string} [options.prop] - moddle (zeebe-bpmn-moddle) property name for the IOMapping.\n *\n * @returns {Object} An Object containing multiple Objects in its `entries` attribute,\n * each representing a properties-panel entry. First entry will always be a collapsible followed\n * by two inputs (one for source and one for target).\n */\nexport default function (element, bpmnFactory, translate, options = {}) {\n  if (!(is(element, 'bpmn:CallActivity') && options.prop === 'outputParameters')) {\n    return [];\n  }\n  const toggle = entryFactory.toggleSwitch(translate, {\n    id: `${options.prefix}-propagate-all-toggle`,\n    label: translate('Propagate all Child Process Variables'),\n    modelProperty: 'propagateAllChildVariables',\n    labelOn: translate('On'),\n    labelOff: translate('Off'),\n    descriptionOn: translate('All variables from the child process instance will be propagated to the parent process instance'),\n    descriptionOff: translate('Only variables defined via output mappings will be propagated from the child to the parent process instance'),\n    isOn: () => {\n      return isPropagateAllChildVariables(element);\n    },\n    get: () => {\n      return {\n        propagateAllChildVariables: isPropagateAllChildVariables(element)\n      };\n    },\n    set: function (element, values) {\n      let commands = [];\n      const propagateAllChildVariables = values.propagateAllChildVariables || false;\n      commands.push(setCalledElementProperties(element, bpmnFactory, {\n        propagateAllChildVariables\n      }));\n      return commands;\n    },\n    hidden: function () {\n      return false;\n    }\n  });\n  return toggle;\n}\n\n// helper //////////////////////////\n\nfunction setCalledElementProperties(element, bpmnFactory, values) {\n  const businessObject = getBusinessObject(element),\n    commands = [];\n\n  // ensure extensionElements\n  let extensionElements = businessObject.get('extensionElements');\n  if (!extensionElements) {\n    extensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n      values: []\n    }, businessObject, bpmnFactory);\n    commands.push(cmdHelper.updateBusinessObject(element, businessObject, {\n      extensionElements: extensionElements\n    }));\n  }\n\n  // ensure zeebe:calledElement\n  let calledElement = getCalledElement(businessObject);\n  if (!calledElement) {\n    calledElement = elementHelper.createElement('zeebe:CalledElement', {}, extensionElements, bpmnFactory);\n    commands.push(cmdHelper.addAndRemoveElementsFromList(element, extensionElements, 'values', 'extensionElements', [calledElement], []));\n  }\n\n  // update properties\n  commands.push(cmdHelper.updateBusinessObject(element, calledElement, values));\n  return commands;\n}","map":null,"metadata":{},"sourceType":"module"}