{"ast":null,"code":"import * as constants from \"../../../../shared/constants/marketing.constants\";\nimport { DatePipe } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../marketing-subscrib-chart/marketing-explore-data-subscriberapi.service\";\nimport * as i2 from \"./data-assigners.service\";\nimport * as i3 from \"src/app-services/translate.service\";\nexport let MarketingExploreDataDownloadDataService = /*#__PURE__*/(() => {\n  class MarketingExploreDataDownloadDataService {\n    constructor(marketingExploreDataSubscriberApiService, marketingExploreDataAssignerService, translateService) {\n      this.marketingExploreDataSubscriberApiService = marketingExploreDataSubscriberApiService;\n      this.marketingExploreDataAssignerService = marketingExploreDataAssignerService;\n      this.translateService = translateService;\n      this.datePipe = new DatePipe('en-US');\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n    }\n    // SUBSCRIBERS TAB \n    //   SUBSCRIBER DATA USAGE\n    subscriberDataUsageExportDataForming(object) {\n      var result = [];\n      var tmp = {\n        \"ACTIVE SUBSCRIBERS\": this.marketingExploreDataSubscriberApiService.getActiveSubscribersCount()\n      };\n      object.categories.forEach(function (obj, index) {\n        var key = 'USAGE (' + obj + ')';\n        tmp[key] = String(object.series[index]);\n      });\n      result.push(tmp);\n      return result;\n    }\n    subscriberDataUsageDrillDownExportDataForming(array) {\n      let returnArray = [];\n      array.forEach(el => {\n        let obj = {\n          'ACCOUNT NUMBER': el.accountNumber,\n          'NAME': el.name,\n          'PHONE NUMBER': el.phoneNumber,\n          'SERVICE ADDRESS': el.serviceAddress,\n          'BILLING ADDRESS': el.billingAddress,\n          'EMAIL': el.email,\n          'USOC': el.usoc,\n          'SERVICE TIER': el.serviceTier,\n          'REGION': el.region,\n          'LOCATION': el.location,\n          'TECHNOLOGY TYPE': el.technologyType,\n          'CUSTOMER TYPE': el.customerType,\n          'OPTOUT': el.optOut,\n          'DS(Mbps)': el.downloadSpeed,\n          'US(Mbps)': el.uploadSpeed,\n          'ATTAINABLE RATE(Mbps)': el.attainableRate,\n          'DOWN USAGE(GB)': el.downUsage,\n          'UP USAGE(GB)': el.upUsage,\n          'TOTAL USAGE(GB)': el.totalUsage\n        };\n        returnArray.push(obj);\n      });\n      return returnArray;\n    }\n    // STREAMING,GAMING,WFH\n    subscribersServiceTiersExportDataForming(object) {\n      let returnArray = [];\n      let categoryArray = object.categories;\n      let seriesArray = object.series;\n      seriesArray.forEach(el => {\n        let obj = {\n          \"NAME\": el.name\n        };\n        for (let i = 0; i < categoryArray.length; i++) {\n          obj[categoryArray[i]] = el.data[i];\n        }\n        returnArray.push(obj);\n      });\n      return returnArray;\n    }\n    // SUBSCRIBER DATA USAGE\n    subscriberActivityTrendsDataForming(object, chart) {\n      let returnArray = [];\n      for (let key in object) {\n        let obj = {};\n        obj['NAME'] = key.charAt(0).toUpperCase() + key.substring(1);\n        object[key].forEach(el => {\n          for (let key1 in el) {\n            if (chart) {\n              obj[key1 + ' USAGE (TB)'] = Math.floor(el[key1] / 1024).toFixed(0);\n            } else {\n              obj[key1] = el[key1];\n            }\n          }\n        });\n        returnArray.push(obj);\n      }\n      return returnArray;\n    }\n    // DATA USAGE TRENDS\n    dataUsageTrendsDataForming(object) {\n      let returnArray = [];\n      let categoryArray = object.categories;\n      let seriesArray = object.series;\n      seriesArray.forEach(el => {\n        let obj = {\n          \"NAME\": el.name ? el.name.split(' ')[0] : ''\n        };\n        for (let i = 0; i < categoryArray.length; i++) {\n          obj[categoryArray[i] + ' USAGE (TB)'] = el.data[i];\n        }\n        returnArray.push(obj);\n      });\n      return returnArray;\n    }\n    // DEVICE PER HOUSEHOLD\n    devicePerHouseholdDataForming(array) {\n      let returnArray = [];\n      let obj = {};\n      array.forEach(el => {\n        for (let [key, value] of Object.entries(el)) {\n          obj['DEVICE (' + key + ')'] = value;\n        }\n      });\n      returnArray.push(obj);\n      return returnArray;\n    }\n    // SERVICES TAB\n    // SUBSCRIBER TIER TECH && NEW SUBSCRIBERS TIER TECH\n    subscriberTierTechExportDataForming(object) {\n      let keys = Array.from(object['categories']);\n      let series = object['series'];\n      let result = [];\n      series.map(obj => {\n        let tmp = {};\n        tmp[this.language.Technology.toUpperCase()] = obj['name'];\n        let arr = obj['data'];\n        if (Array.isArray(arr)) {\n          for (var i = 0; i < arr.length; i++) {\n            var key = String(keys[i]);\n            if (key) {\n              var trans_key = key.toUpperCase();\n              tmp[trans_key] = String(arr[i]);\n            }\n          }\n        }\n        result.push(tmp);\n      });\n      return result;\n    }\n    // HOUSEHOLD DEVICE TRENDS\n    houseHoldDeviceTrendsDataForming(object) {\n      let returnArray = [];\n      for (let key in object) {\n        let obj = {};\n        obj['TREND'] = key == 'numberOfDevices' ? 'Device Count' : 'Wi-Fi Score';\n        object[key].forEach(el => {\n          for (let key1 in el) {\n            obj[key1] = el[key1];\n          }\n        });\n        returnArray.push(obj);\n      }\n      return returnArray;\n    }\n    // WIFI DEVICE CATEGORY TRENDS\n    wifiDeviceCategoryTrendsDataFormatter(object) {\n      let returnArray = [];\n      let categoryArray = object.categories;\n      let seriesArray = object.series;\n      seriesArray.forEach(el => {\n        let obj = {\n          \"CATEGORY\": el.name.toUpperCase()\n        };\n        for (let i = 0; i < categoryArray.length; i++) {\n          obj[categoryArray[i]] = el.data[i];\n        }\n        returnArray.push(obj);\n      });\n      return returnArray;\n    }\n    // BLOCKED THREATS INSIGHTS\n    blockedThreatsInsightsDataFormatter(array) {\n      let returnArray = [];\n      array.forEach(el => {\n        let obj = {\n          'CATEGORY': constants.THREATS_RENAME[el[0]],\n          'COUNT': el[1]\n        };\n        returnArray.push(obj);\n      });\n      return returnArray;\n    }\n    // BLOCKED THREATS DRILL DOWN\n    blockedThreatsDrillDownExportData(array) {\n      let returnArray = [];\n      array.forEach(el => {\n        let obj = {\n          'ACCOUNT NUMBER': el.accountNumber,\n          'NAME': el.name,\n          'PHONE NUMBER': el.phoneNumber,\n          'EMAIL': el.email,\n          'MAC ADDRESS': el.mac_address,\n          'SERVICE ADDRESS': el.serviceAddress,\n          'SERVICE TIER': el.serviceTier,\n          'THREAT COUNT': el.threat_count,\n          'TOTAL USAGE (GB)': el.totalUsage,\n          'STREAMING USAGE (GB)': el.streamingUsage,\n          'GAMING USAGE (GB)': el.gamingUsage\n        };\n        returnArray.push(obj);\n      });\n      return returnArray;\n    }\n    // APPLICATIONS TAB\n    // USAGE BY APP\n    usageByAppDataForming(array, page) {\n      let returnArray = [];\n      let obj = {};\n      if (page) {\n        let totals = this.marketingExploreDataAssignerService.getArraySum(array.map(el => el.originalValue));\n        array.forEach(el => {\n          returnArray.push({\n            'APPLICATION': el.name,\n            'USAGE (TB)': (el.originalValue / 1024).toFixed(2),\n            'PERCENT OF TOTAL': (el.originalValue / totals * 100).toFixed(2)\n          });\n        });\n      } else {\n        for (let i = 0; i < array.length; i++) {\n          let name = array[i].name.toUpperCase().replaceAll(',', '_');\n          obj[name + ' (TB)'] = (array[i].originalValue / 1024).toFixed(2);\n        }\n        returnArray.push(obj);\n      }\n      return returnArray;\n    }\n    WIFIDataForming(array, page) {\n      let returnArray = [];\n      let obj = {};\n      if (page) {\n        let totals = this.marketingExploreDataAssignerService.getArraySum(array.map(el => el.originalValue));\n        array.forEach(el => {\n          returnArray.push({\n            'APPLICATION': el.name,\n            'USAGE (GB)': el.originalValue,\n            'PERCENT OF TOTAL': (el.originalValue / totals * 100).toFixed(2)\n          });\n        });\n      } else {\n        for (let i = 0; i < array.length; i++) {\n          let name = array[i].name.toUpperCase().replaceAll(',', '_');\n          obj[name + ' (GB)'] = array[i].originalValue;\n        }\n        returnArray.push(obj);\n      }\n      return returnArray;\n    }\n    // SOCIAL HEAT MAP \n    socialChannelMapExportDataFormatter(object) {\n      let returnArray = [];\n      let categoryArray = ['00~02HR (%)', '02~04HR (%)', '04~06HR (%)', '06~08HR (%)', '08~10HR (%)', '10~12HR (%)', '12~14HR (%)', '14~16HR (%)', '16~18HR (%)', '18~20HR (%)', '20~22HR (%)', '22~24HR (%)'];\n      let nameArray = object.ycategories;\n      let dataArray = object.heatmapdata;\n      for (let i = 0; i < nameArray.length; i++) {\n        let data = [];\n        dataArray.forEach(el => {\n          if (el[1] == i) {\n            data.push(el[2]);\n          }\n        });\n        let obj = {\n          'DAY': nameArray[i]\n        };\n        for (let j = 0; j < categoryArray.length; j++) {\n          obj[categoryArray[j]] = data[j];\n        }\n        returnArray.push(obj);\n      }\n      return returnArray;\n    }\n    // TOP APP \n    topAppDataFormatter(array) {\n      let returnArray = [];\n      array.forEach(el => {\n        let obj = {};\n        for (let [key, value] of Object.entries(el)) {\n          if (key == 'percentage') {\n            obj[this.language.Percentage + '(%)'] = value;\n          } else if (key == 'usage') {\n            obj[this.language.usage + '(GB)'] = value;\n          } else if (key == 'average') {\n            obj[this.language.average_user_count] = value;\n          } else if (key == 'application1') {\n            obj[this.language.application] = value;\n          }\n        }\n        returnArray.push(obj);\n      });\n      return returnArray;\n    }\n    // RETENTION\n    // CHURN RATE INSIGHTS\n    churnRateInsightsDataFormatter(object, results) {\n      let returnArray = [];\n      let categoryArray = object.categories;\n      let monthLength;\n      results.forEach(month => {\n        for (var key in month) {\n          monthLength = month[key].length;\n          if (monthLength === 0) {\n            let index = categoryArray.indexOf(key);\n            categoryArray.splice(index, 1);\n          }\n        }\n      });\n      const newSubscribersChartData = new Map();\n      results.forEach(m => {\n        const key = Object.keys(m)[0];\n        const innerMap = new Map();\n        m[key].forEach(n => {\n          const innerKey = Object.keys(n)[0];\n          innerMap.set(innerKey, n[innerKey]);\n        });\n        newSubscribersChartData.set(key, innerMap);\n      });\n      categoryArray.forEach(cat => {\n        let obj = {};\n        obj[this.language.MONTH] = cat;\n        const monthData = newSubscribersChartData.get(cat);\n        for (const key of monthData.keys()) {\n          const item = monthData.get(key);\n          obj[key + ' ' + this.language.CHURNED] = item[0];\n          obj[key + ' ' + this.language.EXISTING] = item[1];\n        }\n        returnArray.push(obj);\n      });\n      return returnArray;\n    }\n    // AQUISITION RATE INSIGHTS    \n    acquisitionRateInsightsDataFormatter(object, results) {\n      let returnArray = [];\n      let categoryArray = object.categories;\n      let monthLength;\n      results.forEach(month => {\n        for (var key in month) {\n          monthLength = month[key].length;\n          if (monthLength === 0) {\n            let index = categoryArray.indexOf(key);\n            categoryArray.splice(index, 1);\n          }\n        }\n      });\n      const newSubscribersChartData = new Map();\n      results.forEach(m => {\n        const key = Object.keys(m)[0];\n        const innerMap = new Map();\n        m[key].forEach(n => {\n          const innerKey = Object.keys(n)[0];\n          innerMap.set(innerKey, n[innerKey]);\n        });\n        newSubscribersChartData.set(key, innerMap);\n      });\n      categoryArray.forEach(cat => {\n        let obj = {};\n        obj[this.language.MONTH] = cat;\n        const monthData = newSubscribersChartData.get(cat);\n        for (const key of monthData.keys()) {\n          const item = monthData.get(key);\n          obj[key + ' ' + this.language.ACQUIRED] = item[0];\n          obj[key + ' ' + this.language.EXISTING] = item[1];\n        }\n        returnArray.push(obj);\n      });\n      return returnArray;\n    }\n    // AQUISITION REVENUE INSIGHTS\n    aquisitionRevenueExportDataFormatter(results) {\n      // categories\n      // console.log(object, '111', results)\n      // let returnArray = [];\n      // let categoryArray = object.categories;\n      // let monthLength;\n      // results.forEach(month => {\n      //     for (var key in month) {\n      //         monthLength = month[key].length;\n      //         if (monthLength === 0) {\n      //             let index = categoryArray.indexOf(key);\n      //             categoryArray.splice(index, 1);\n      //         }\n      //     }\n      // });\n      // const newSubscribersChartData = new Map<string, Map<string, number[]>>();\n      // results.forEach(m => {\n      //     const key = Object.keys(m)[0];\n      //     const innerMap = new Map<string, number[]>();\n      //     m[key].forEach(n => {\n      //         const innerKey = Object.keys(n)[0];\n      //         innerMap.set(innerKey, n[innerKey]);\n      //     })\n      //     newSubscribersChartData.set(key, innerMap);\n      // });\n      // categoryArray.forEach(cat => {\n      //     let obj = { \"MONTH\": cat };\n      //     console.log(obj, 'obj======')\n      //     const monthData = newSubscribersChartData.get(cat);\n      //     for (const key of monthData.keys()) {\n      //         const item = monthData.get(key);\n      //         obj[key + ' CURRENT'] = item[0];\n      //         obj[key + ' MAX'] = item[1];\n      //         obj[key + ' COUNT'] = item[2];\n      //     }\n      //     returnArray.push(obj);\n      // });\n      // return returnArray;\n      let returnArray = [];\n      results.forEach(el => {\n        let obj = {};\n        for (const key in el) {\n          obj[this.language.MONTH] = key;\n          if (el[key].length > 0) {\n            el[key].forEach(el => {\n              for (const key in el) {\n                obj[`${key} ${this.language.CURRENT}`] = el[key][0] ? el[key][0] : 0;\n                obj[`${key} ${this.language.MAX}`] = el[key][1] ? el[key][1] : 0;\n                obj[`${key} ${this.language.COUNT}`] = el[key][2] ? el[key][2] : 0;\n              }\n            });\n          }\n          returnArray.push(obj);\n        }\n      });\n      return returnArray;\n    }\n    // CommandIQ Status\n    commandIQStatusDataForming(object) {\n      let keys = Array.from(object['categories']);\n      let series = object['series'];\n      let result = [];\n      for (let i = 0; i < keys.length; i++) {\n        let obj = {\n          \"DATE\": this.datePipe.transform(keys[i], 'MM-dd-yyyy')\n        };\n        // if (monthLength > 0) {\n        for (let j = 0; j < series.length; j++) {\n          obj['CommandIQ subscribers'] = series[j].data[i];\n        }\n        result.push(obj);\n        // }\n      }\n\n      return result;\n    }\n    systemmodel(object) {\n      let keys = Array.from(object['categories']);\n      let series = object['series'];\n      let result = [];\n      for (let i = 0; i < keys.length; i++) {\n        let obj = {\n          \"DATE\": this.datePipe.transform(keys[i], 'MM-dd-yyyy')\n        };\n        for (let j = 0; j < series.length; j++) {\n          obj[series[j].name] = series[j].data[i];\n        }\n        result.push(obj);\n      }\n      return result;\n    }\n    // REVENUE EDGE SUITS\n    revenueEdgeSuitsDataForming(object) {\n      let keys = Array.from(object['categories']);\n      let series = object['series'];\n      let result = [];\n      for (let i = 0; i < keys.length; i++) {\n        let obj = {\n          \"DATE\": this.datePipe.transform(keys[i], 'MM-dd-yyyy')\n        };\n        // if (monthLength > 0) {\n        for (let j = 0; j < series.length; j++) {\n          if (series[j].name === 'ExperienceIQ') {\n            obj['ExperienceIQ subscribers'] = series[j].data[i];\n          } else if (series[j].name === 'ProtectIQ') {\n            obj['ProtectIQ subscribers'] = series[j].data[i];\n          } else if (series[j].name === 'Arlo') {\n            obj['Arlo subscribers'] = series[j].data[i];\n          } else if (series[j].name === 'Servify') {\n            obj['Servify subscribers'] = series[j].data[i];\n          }\n        }\n        result.push(obj);\n        // }\n      }\n\n      return result;\n    }\n  }\n  MarketingExploreDataDownloadDataService.ɵfac = function MarketingExploreDataDownloadDataService_Factory(t) {\n    return new (t || MarketingExploreDataDownloadDataService)(i0.ɵɵinject(i1.MarketingExploreDataSubscriberApiService), i0.ɵɵinject(i2.MarketingExploreDataAssignerService), i0.ɵɵinject(i3.TranslateService));\n  };\n  MarketingExploreDataDownloadDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MarketingExploreDataDownloadDataService,\n    factory: MarketingExploreDataDownloadDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return MarketingExploreDataDownloadDataService;\n})();","map":null,"metadata":{},"sourceType":"module"}