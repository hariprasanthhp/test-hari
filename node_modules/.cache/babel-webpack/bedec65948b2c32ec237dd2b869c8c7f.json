{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { getStaleDevicePurgePolicy, createStaleDevicePurgePolicy, listLogStaleDevicePurgePolicy, logsCountStaleDevicePurgePolicy, suspendResumePolicyById, updateStaleDevicePurgePolicy } from './endpoint';\nimport { catchError } from 'rxjs/operators';\nimport { HttpParams } from '@angular/common/http';\nimport { UtilityClass } from './utility-class';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let StaleDevicePurgeService = /*#__PURE__*/(() => {\n  class StaleDevicePurgeService {\n    constructor(http, sso) {\n      this.http = http;\n      this.sso = sso;\n    }\n    //get policy\n    getStaleDevicePurgePolicy(orgId) {\n      const params = new HttpParams();\n      // .set('orgId', orgId);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.get(getStaleDevicePurgePolicy, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    createStaleDevicePurgePolicy(body) {\n      const params = new HttpParams();\n      // .set('orgId', orgId);\n      // if (this.sso.getOrg(orgId)) {\n      //   params.set(\"orgId\", orgId)\n      // }\n      body.maxInactiveDays = +body.maxInactiveDays;\n      return this.http.post(createStaleDevicePurgePolicy, body, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateStaleDevicePurgePolicy(body, policyId) {\n      const params = new HttpParams();\n      // .set('orgId', orgId);\n      // if (this.sso.getOrg(orgId)) {\n      //   params.set(\"orgId\", orgId)\n      // }\n      body.maxInactiveDays = +body.maxInactiveDays;\n      return this.http.put(updateStaleDevicePurgePolicy + \"/\" + policyId, body, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n    //get policy exc logs\n    getexcLogStaleDevicePurgePolicy(policyId, skip, limit) {\n      const params = new HttpParams().set('policyId', policyId);\n      if (skip) {\n        params.append(\"skip\", skip.toString());\n      }\n      if (limit) {\n        params.append(\"limit\", limit.toString());\n      }\n      return this.http.get(listLogStaleDevicePurgePolicy, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n    //get policy log count\n    getLogCountStaleDevicePurgePolicy(policyId) {\n      const params = new HttpParams().set('policyId', policyId);\n      return this.http.get(logsCountStaleDevicePurgePolicy, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    suspendStaleDevicePurgePolicyById(policyId, orgId) {\n      const params = new HttpParams();\n      // .set('orgId', orgId);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.put(suspendResumePolicyById + \"/\" + policyId + \"/suspend\", \"\", {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    resumeStaleDevicePurgePolicyById(policyId, orgId) {\n      const params = new HttpParams();\n      // .set('orgId', orgId);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.put(suspendResumePolicyById + \"/\" + policyId + \"/resume\", \"\", {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getAllTimeZone() {\n      let arr = new UtilityClass();\n      return arr.timeZone;\n    }\n    getDaysOfMonth() {\n      let arr = new UtilityClass();\n      return arr.daysOfMonth;\n    }\n    getDaysOfWeek() {\n      let arr = new UtilityClass();\n      return arr.daysOfWeek;\n    }\n    getFrequencyList() {\n      let arr = new UtilityClass();\n      return arr.frequency;\n    }\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n  }\n  StaleDevicePurgeService.ɵfac = function StaleDevicePurgeService_Factory(t) {\n    return new (t || StaleDevicePurgeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  StaleDevicePurgeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StaleDevicePurgeService,\n    factory: StaleDevicePurgeService.ɵfac,\n    providedIn: 'root'\n  });\n  return StaleDevicePurgeService;\n})();","map":null,"metadata":{},"sourceType":"module"}