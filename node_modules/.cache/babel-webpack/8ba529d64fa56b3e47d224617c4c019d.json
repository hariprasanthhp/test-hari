{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EndpointSubnetService = /*#__PURE__*/(() => {\n  class EndpointSubnetService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.subnet = 'subnet';\n      this.staticSubnet = 'staticsubnet';\n      this.arrayToObject = (array, keyField) => array.reduce((obj, item) => {\n        obj[item[keyField]] = item;\n        return obj;\n      }, {});\n      this.baseUrl = environment.faAdminURL;\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.options = {\n        headers: headers\n      };\n      this.export = this.baseUrl + `export/`;\n    }\n    getSubnets(orgId) {\n      //return this.httpClient.get<T>(`${environment.FLOW_BASE_URL}ep/endpoint-subnets?org-id=${orgId}`);\n      return this.httpClient.get(`${environment.FLOW_BASE_URL}agg/aggregationsubnet?org-id=${orgId}`);\n    }\n    addSubnet(params, orgId) {\n      return this.httpClient.post(`${environment.FLOW_BASE_URL}agg/aggregationsubnet?org-id=${orgId}&name=${params.name}&subnets=${params.subnets}`, this.options);\n    }\n    importSubnets(params, orgId) {\n      return this.httpClient.post(`${environment.FLOW_BASE_URL}agg/aggregationsubnet/import?org-id=${orgId}`, params);\n    }\n    deleteSubnet(orgId, params) {\n      //return this.httpClient.delete<T>(`${environment.FLOW_BASE_URL}ep/endpoint-subnets/${id}?org-id=${orgId}`)\n      return this.httpClient.request('DELETE', `${environment.FLOW_BASE_URL}agg/aggregationsubnet?org-id=${orgId}`, {\n        body: params\n      });\n    }\n    updateSubnet(id, params, orgId) {\n      //return this.httpClient.put<T>(`${environment.FLOW_BASE_URL}ep/endpoint-subnets/${id}?org-id=${orgId}`, params);\n      return this.httpClient.put(`${environment.FLOW_BASE_URL}agg/aggregationsubnet?org-id=${orgId}`, params, this.options);\n    }\n    exportProcess(data) {\n      let exports = [];\n      data.forEach(obj => {\n        exports.push({\n          'subnet': obj.subnet ? obj.subnet : '',\n          'excluded': obj.excluded ? obj.excluded : ''\n        });\n      });\n      return exports;\n    }\n    importDataProcess(data, isFullImport) {\n      data.forEach(obj => {\n        obj.excluded = obj.excluded.toUpperCase() == 'N' || obj.excluded.toUpperCase() == \"NO\" ? false : true;\n        obj.isstatic = false;\n        obj.isv4 = true;\n        obj.action = isFullImport ? 'Create' : 'Update';\n      });\n      //return this.arrayToObject(data, keyField);\n      return data;\n    }\n    checkData(data) {\n      if (Array.isArray(data[0])) {\n        let newData = [];\n        data.forEach(arr => {\n          newData.push({\n            subnet: arr[0],\n            excluded: arr[1]\n          });\n        });\n        return newData;\n      }\n      return data;\n    }\n    trimSubnet(str) {\n      str = str.trim();\n      while (str[str.length - 1] === \".\") str = str.slice(0, -1);\n      return str;\n    }\n    isSubnetV4(ip) {\n      let arr = ip.split('/');\n      let ipArray = arr[0].split('.');\n      if (ipArray.length == 4) {\n        return true;\n      }\n      return false;\n    }\n    isSubnetV6(ip) {\n      let arr = ip.split('/');\n      let ipArray = arr[0].split('.');\n      if (ipArray.length == 6) {\n        return true;\n      }\n      return false;\n    }\n    deleteObjectFromArray(data, id) {\n      let newData = data.filter(item => item._id !== id);\n      return newData;\n    }\n    Export(orgId) {\n      return this.httpClient.post(`${environment.FLOW_BASE_URL}agg/aggregationsubnet/export?org-id=${orgId}`, {});\n    }\n  }\n  EndpointSubnetService.ɵfac = function EndpointSubnetService_Factory(t) {\n    return new (t || EndpointSubnetService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  EndpointSubnetService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EndpointSubnetService,\n    factory: EndpointSubnetService.ɵfac,\n    providedIn: 'root'\n  });\n  return EndpointSubnetService;\n})();","map":null,"metadata":{},"sourceType":"module"}