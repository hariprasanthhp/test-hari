{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/sso-auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let StreamService = /*#__PURE__*/(() => {\n  class StreamService {\n    constructor(sso, router) {\n      this.sso = sso;\n      this.router = router;\n      this.prevStreamData = {\n        maxRate: [0, 0],\n        packet: [0, 0]\n      };\n      this.data = {\n        upRateData: [],\n        downRateData: [],\n        packetUpData: [],\n        packetDownData: []\n      };\n      this.latestValues = new BehaviorSubject({});\n      this.rateUpDeltaPerSec = 0;\n      this.rateDownDeltaPerSec = 0;\n      this.packetUpDeltaPerSec = 0;\n      this.packetDownDeltaPerSec = 0;\n      //   router.events.subscribe((value) => {\n      //     console.log(\"Router events\",value instanceof NavigationEnd)\n      // });\n    }\n\n    getData() {\n      this.data = {\n        upRateData: [],\n        downRateData: [],\n        packetUpData: [],\n        packetDownData: []\n      };\n      this.prevStreamData = {\n        maxRate: [0, 0],\n        packet: [0, 0]\n      };\n      this.rateUpDeltaPerSec = 0;\n      this.rateDownDeltaPerSec = 0;\n      this.packetUpDeltaPerSec = 0;\n      this.packetDownDeltaPerSec = 0;\n      for (let i = 0; i <= 300; i++) {\n        this.data.upRateData.push(0);\n        this.data.downRateData.push(0);\n        this.data.packetUpData.push(0);\n        this.data.packetDownData.push(0);\n      }\n      this.emitLatestValues();\n    }\n    getDelta(prev, new_val) {\n      let delta;\n      if (prev <= 0) {\n        delta = new_val;\n      } else {\n        delta = prev - new_val;\n      }\n      const deltaPerSec = delta / 15;\n      // const dps = deltaPerSec/1024;\n      return deltaPerSec;\n    }\n    emitLatestValues() {\n      setInterval(() => {\n        this.data.upRateData.splice(0, 1);\n        this.data.downRateData.splice(0, 1);\n        this.data.packetUpData.splice(0, 1);\n        this.data.packetDownData.splice(0, 1);\n        this.data.upRateData.push(this.calculateNewValue(this.data.upRateData[299], this.rateUpDeltaPerSec));\n        this.data.downRateData.push(this.calculateNewValue(this.data.downRateData[299], this.rateDownDeltaPerSec));\n        this.data.packetUpData.push(this.calculateNewValue(this.data.packetUpData[299], this.packetUpDeltaPerSec));\n        this.data.packetDownData.push(this.calculateNewValue(this.data.packetDownData[299], this.packetDownDeltaPerSec));\n        this.latestValues.next(this.data);\n      }, 1000);\n    }\n    calculateNewValue(last, dRate) {\n      const temp = (last + dRate).toFixed(2);\n      const val = parseInt(temp);\n      return val >= 0 ? val : 0;\n    }\n    unsubscribeStream() {\n      if (this.source) {\n        this.source.close();\n        this.source = null;\n      }\n      this.data = {\n        upRateData: [],\n        downRateData: [],\n        packetUpData: [],\n        packetDownData: []\n      };\n      this.prevStreamData = {\n        maxRate: [0, 0],\n        packet: [0, 0]\n      };\n      this.rateUpDeltaPerSec = 0;\n      this.rateDownDeltaPerSec = 0;\n      this.packetUpDeltaPerSec = 0;\n      this.packetDownDeltaPerSec = 0;\n    }\n    checkGetData() {\n      if (!this.source) {\n        this.getData();\n      }\n    }\n  }\n  StreamService.ɵfac = function StreamService_Factory(t) {\n    return new (t || StreamService)(i0.ɵɵinject(i1.SsoAuthService), i0.ɵɵinject(i2.Router));\n  };\n  StreamService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StreamService,\n    factory: StreamService.ɵfac,\n    providedIn: 'root'\n  });\n  return StreamService;\n})();","map":null,"metadata":{},"sourceType":"module"}