{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject, of, throwError } from 'rxjs';\nimport { HttpParams } from '@angular/common/http';\nimport * as Highcharts from \"highcharts/highstock\";\nimport { environment } from \"../../environments/environment\";\nimport { getSubscribeList } from './shared/service/endpoints';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nimport * as i3 from \"src/app-services/translate.service\";\nrequire('highcharts/highcharts-more')(Highcharts);\nrequire('highcharts/modules/solid-gauge')(Highcharts);\nconst IndicatorsCore = require(\"highcharts/indicators/indicators\");\nIndicatorsCore(Highcharts);\nconst IndicatorZigZag = require(\"highcharts/indicators/zigzag\");\nIndicatorZigZag(Highcharts);\nexport let DataServiceService = /*#__PURE__*/(() => {\n  class DataServiceService {\n    constructor(http, sso, translateService) {\n      this.http = http;\n      this.sso = sso;\n      this.translateService = translateService;\n      this.dataSaver = {};\n      this.showTopology = new BehaviorSubject(false);\n      this.showQoe = new BehaviorSubject(false);\n      this.pieChartColurs = ['#84bbf8', '#a3a5ed', '#b3d974', '#fd9e4c', '#fc6784'];\n      this.stackedColumnColors = ['#82bf00', '#349885', '#0279ff'];\n      this.commonHighChartOptions = {\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        responsive: {\n          rules: [{\n            condition: {},\n            chartOptions: {\n              chart: {},\n              subtitle: {\n                text: null\n              },\n              navigator: {\n                enabled: false\n              }\n            }\n          }]\n        }\n      };\n      this.metaData = {};\n      this.timeZoneItem = [{\n        name: \"(UTC-12:00) International Date Line West\",\n        value: \"(UTC-12:00) International Date Line West\"\n      }, {\n        name: \"(UTC-11:00) Coordinated Universal Time-11\",\n        value: \"(UTC-11:00) Coordinated Universal Time-11\"\n      }, {\n        name: \"(UTC-10:00) Hawaii\",\n        value: \"(UTC-10:00) Hawaii\"\n      }, {\n        name: \"(UTC-09:00) Alaska\",\n        value: \"(UTC-09:00) Alaska\"\n      }, {\n        name: \"(UTC-08:00) Baja California\",\n        value: \"(UTC-08:00) Baja California\"\n      }, {\n        name: \"(UTC-08:00) Pacific Time (US and Canada)\",\n        value: \"(UTC-08:00) Pacific Time (US and Canada)\"\n      }, {\n        name: \"(UTC-07:00) Arizona\",\n        value: \"(UTC-07:00) Arizona\"\n      }, {\n        name: \"(UTC-07:00) Chihuahua, La Paz, Mazatlan\",\n        value: \"(UTC-07:00) Chihuahua, La Paz, Mazatlan\"\n      }, {\n        name: \"(UTC-07:00) Mountain Time (US and Canada)\",\n        value: \"(UTC-07:00) Mountain Time (US and Canada)\"\n      }, {\n        name: \"(UTC-06:00) Central America\",\n        value: \"(UTC-06:00) Central America\"\n      }, {\n        name: \"(UTC-06:00) Central Time (US and Canada)\",\n        value: \"(UTC-06:00) Central Time (US and Canada)\"\n      }, {\n        name: \"(UTC-06:00) Guadalajara, Mexico City, Monterrey\",\n        value: \"(UTC-06:00) Guadalajara, Mexico City, Monterrey\"\n      }, {\n        name: \"(UTC-06:00) Saskatchewan\",\n        value: \"(UTC-06:00) Saskatchewan\"\n      }, {\n        name: \"(UTC-05:00) Bogota, Lima, Quito\",\n        value: \"(UTC-05:00) Bogota, Lima, Quito\"\n      }, {\n        name: \"(UTC-05:00) Eastern Time (US and Canada)\",\n        value: \"(UTC-05:00) Eastern Time (US and Canada)\"\n      }, {\n        name: \"(UTC-05:00) Indiana (East)\",\n        value: \"(UTC-05:00) Indiana (East)\"\n      }, {\n        name: \"(UTC-04:30) Caracas\",\n        value: \"(UTC-04:30) Caracas\"\n      }, {\n        name: \"(UTC-04:00) Asuncion\",\n        value: \"(UTC-04:00) Asuncion\"\n      }, {\n        name: \"(UTC-04:00) Atlantic Time (Canada)\",\n        value: \"(UTC-04:00) Atlantic Time (Canada)\"\n      }];\n      //begin-aswin-09-04-2021-siteScan-ssidNamaInfo-data-fetch\n      this.SsidNameInfoData = {};\n      /***begin-aswin-10-05-2021-highchart-streamoption-algorithm-change-try */\n      this.restoreChartObj = {};\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n    }\n    postcall(requestData) {\n      return this.http.post(`${environment.SUPPORT_URL}/call/persist`, requestData);\n    }\n    // ROUNDED COLUMN CHARTS\n    SpeedTestChartOptions(orgId, serialNumber, isRefreshed = false) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-summary/data?${ID}serialNumber=${serialNumber}${isRefreshed ? '&forceRefresh=true' : ''}`);\n    }\n    // /support/subscriber-experience/qoe-score\n    qoeScoreChartOptions(orgId, serialNumber, period, startTime, endTime) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/support/subscriber-experience/qoe-score?\n    ${ID}\n    serialNumber=${serialNumber}&\n    period=${period}&\n    startTime=${startTime}&\n    endTime=${endTime}`);\n    }\n    // /support/subscriber-experience/wan-service\n    wanServiceChartOptions(orgId, serialNumber, period) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/support/subscriber-experience/qoe-score?\n    ${ID}\n    serialNumber=${serialNumber}&\n    period=${period}`);\n    }\n    // /support/subscriber-experience/wan-status\n    wanContinuityChartOptions(orgId, serialNumber, period, startTime, endTime) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/support/subscriber-experience/qoe-score?\n    ${ID}\n    serialNumber=${serialNumber}&\n    period=${period}&\n    startTime=${startTime}&\n    endTime=${endTime}`);\n    }\n    // /support/subscriber-experience/home-efficiency\n    homeEfficiencyChartOptions(orgId, serialNumber, period, startTime, endTime) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/support/subscriber-experience/qoe-score?\n    ${ID}\n    serialNumber=${serialNumber}&\n    period=${period}&\n    startTime=${startTime}&\n    endTime=${endTime}`);\n    }\n    // /support/subscriber-experience/client-efficiency\n    clientEfficiencyChartOptions(orgId, serialNumber, period, startTime, endTime, macAddress) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/support/subscriber-experience/qoe-score?\n    ${ID}\n    serialNumber=${serialNumber}&\n    period=${period}&\n    startTime=${startTime}&\n    endTime=${endTime}\n    macAddress=${macAddress}`);\n    }\n    RoundedBarChartOptions(orgId, endpointId) {\n      /* orgId = 10;\r\n      endpointId = \"2705d400-58a5-4cca-8091-8ee2843ea2c9\"; */\n      let currentDate = new Date(),\n        weekBeforeDate = new Date();\n      weekBeforeDate.setDate(weekBeforeDate.getDate() - 7);\n      /* weekBeforeDate = \"2020-11-30T00:00:00Z\";\r\n      currentDate = \"2020-11-23T00:00:00Z\"; */\n      // let orgId= this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/traffic/timeseries?${this.sso.getOrg(orgId)}endpoint=${endpointId}&granularity=1hour&tenant=0&startTime=${weekBeforeDate.toISOString()}&endTime=${currentDate.toISOString()}&output=rate`); //&groupBy=application\n    }\n\n    getServiceVideo(orgId, serialNumber, isRefreshed = false) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-summary/video?${ID}serialNumber=${serialNumber}${isRefreshed ? '&forceRefresh=true' : ''}`);\n    }\n    setVideo(data) {\n      this.videoData = data;\n      console.log('85', this.videoData);\n    }\n    getVideo() {\n      console.log('88', this.videoData);\n      return this.videoData;\n    }\n    getServiceVoice(orgId, serialNumber, isRefreshed = false) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-summary/voice?${ID}serialNumber=${serialNumber}${isRefreshed ? '&forceRefresh=true' : ''}`);\n    }\n    setVoice(data) {\n      this.voiceData = data;\n      console.log('89', this.voiceData);\n    }\n    getVoice() {\n      console.log('91', this.voiceData);\n      return this.voiceData;\n    }\n    // ROUNDED COLUMN STACKED CHART\n    singleColumnChartOptions() {\n      let object = {\n        // ...this.commonHighChartOptions,\n        chart: {\n          type: 'line',\n          plotBackgroundColor: '#A5C380'\n          // width: 1400,\n          // height: this.HouseholdchartHeight,\n        },\n\n        xAxis: [{\n          gridLineWidth: 1,\n          categories: ['11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00', '00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00', '09:00', '10:00'],\n          crosshair: true\n        }],\n        yAxis: [{\n          allowDecimals: true,\n          labels: {\n            format: '{value} KB'\n            // formatter: function () {\n            //     return this.value.toFixed(1) >= 1 ? (this.value.toFixed(1) / 1000) + 'KB' : this.value.toFixed(0) + 'B';\n            // },\n            // style: {\n            //     color: '#727272',\n            // },\n          },\n\n          // title: {\n          //   enabled: false\n          // },\n          title: {\n            text: null\n          },\n          opposite: true\n        }, {\n          min: 0,\n          allowDecimals: true,\n          labels: {\n            format: '{value} KB'\n            // formatter: function () {\n            //     return this.value.toFixed(0) >= 1000 ? (this.value.toFixed(0) / 1000) + 'KB' : this.value.toFixed(0) + 'B';\n            // },\n          },\n\n          title: {\n            enabled: false\n          }\n          // title: {\n          //     text: 'Devices',\n          //     style: {\n          //         color: '#7cb5ec'\n          //     }\n          // },\n        }],\n\n        series: [{\n          name: 'per 10 minutes',\n          yAxis: 1,\n          data: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5],\n          color: '#2577A6'\n          // data: data.numberOfDevices,\n        }],\n\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            pointPadding: 2,\n            // groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            }\n          }\n        }\n      };\n      return of(object);\n    }\n    // ROUNDED BAR CHART\n    // ROUNDED STACKED BAR CHART\n    stackedBarChartOptions() {\n      const object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'bar'\n        },\n        colors: this.stackedColumnColors,\n        title: {\n          text: 'Stacked Bar Chart'\n        },\n        xAxis: {\n          categories: ['Apples', 'Oranges', 'Pears', 'Grapes', 'Bananas']\n        },\n        yAxis: {\n          min: 0,\n          title: {\n            text: 'Total fruit consumption'\n          }\n        },\n        legend: {\n          reversed: true\n        },\n        plotOptions: {\n          series: {\n            maxPointWidth: 20,\n            borderRadius: 0,\n            stacking: 'normal',\n            states: {\n              inactive: {\n                enabled: false\n              }\n            }\n          },\n          bar: {\n            stacking: 'normal',\n            borderWidth: 0,\n            // borderRadiusTopLeft: 20,\n            // borderRadiusTopRight: 20,\n            dataLabels: {\n              enabled: false\n            }\n          }\n        },\n        series: [{\n          name: 'John',\n          borderRadiusTopLeft: 30,\n          borderRadiusTopRight: 30,\n          data: [5, 3, 4, 7, 2]\n        }, {\n          name: 'Jane',\n          data: [2, 2, 3, 2, 1]\n        }, {\n          name: 'Joe',\n          data: [3, 4, 4, 2, 5]\n        }]\n      });\n      return of(object);\n    }\n    // PIE DONUT CHARTS\n    pieChartOptions() {\n      const object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          plotBackgroundColor: null,\n          plotBorderWidth: null,\n          plotShadow: false,\n          type: 'pie'\n        },\n        colors: this.pieChartColurs,\n        title: {\n          text: 'Pie Chart'\n        },\n        tooltip: {\n          pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n        },\n        accessibility: {\n          point: {\n            valueSuffix: '%'\n          }\n        },\n        plotOptions: {\n          series: {\n            states: {\n              inactive: {\n                enabled: false\n              }\n            }\n          },\n          pie: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            borderWidth: 0,\n            dataLabels: {\n              enabled: true,\n              format: '<b>{point.name}</b>: {point.percentage:.1f} %'\n            }\n          }\n        },\n        series: [{\n          name: 'Brands',\n          colorByPoint: true,\n          data: [{\n            name: 'Chrome',\n            y: 61.41,\n            sliced: false,\n            selected: true\n          }, {\n            name: 'Internet Explorer',\n            y: 11.84\n          }, {\n            name: 'Firefox',\n            y: 10.85\n          }, {\n            name: 'Edge',\n            y: 4.67\n          }, {\n            name: 'Safari',\n            y: 4.18\n          }, {\n            name: 'Sogou Explorer',\n            y: 1.64\n          }, {\n            name: 'Opera',\n            y: 1.6\n          }, {\n            name: 'QQ',\n            y: 1.2\n          }, {\n            name: 'Other',\n            y: 2.61\n          }]\n        }]\n      });\n      return of(object);\n    }\n    airTimeAnalysisChart() {\n      const object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          plotBackgroundColor: null,\n          plotBorderWidth: null,\n          plotShadow: false\n        },\n        colors: ['#b3d974', '#26c0eb', '#fd9e4c'],\n        title: {\n          style: {\n            fontSize: '100%'\n          },\n          text: '',\n          align: 'center',\n          verticalAlign: 'middle',\n          y: 10\n        },\n        tooltip: {\n          pointFormat: '{series.name} : {point.percentage:.1f}%'\n        },\n        legend: {\n          reversed: true\n        },\n        plotOptions: {\n          series: {\n            states: {\n              inactive: {\n                enabled: false\n              }\n            }\n          },\n          pie: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            innerSize: '90%',\n            dataLabels: {\n              enabled: false,\n              format: '{point.name}<br>{point.percentage:.1f} %',\n              style: {\n                color: 'black'\n              }\n            },\n            showInLegend: true\n          }\n        },\n        series: [{\n          type: 'pie',\n          name: 'Browser share',\n          data: [['Free', 95.0], ['Used', 26.8], ['Interference', 12.8]]\n        }]\n      });\n      return of(object);\n    }\n    airTimeAnalysisChart1() {\n      const object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          plotBackgroundColor: null,\n          plotBorderWidth: null,\n          plotShadow: false\n        },\n        colors: ['#b3d974', '#26c0eb', '#fd9e4c'],\n        title: {\n          style: {\n            fontSize: '100%'\n          },\n          text: '',\n          align: 'center',\n          verticalAlign: 'middle',\n          y: 10\n        },\n        tooltip: {\n          pointFormat: '{series.name} : {point.percentage:.1f}%'\n        },\n        legend: {\n          reversed: true\n        },\n        plotOptions: {\n          series: {\n            states: {\n              inactive: {\n                enabled: false\n              }\n            }\n          },\n          pie: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            innerSize: '90%',\n            dataLabels: {\n              enabled: false,\n              format: '{point.name}<br>{point.percentage:.1f} %',\n              style: {\n                color: 'black'\n              }\n            },\n            showInLegend: true\n          }\n        },\n        series: [{\n          type: 'pie',\n          name: 'Browser share',\n          data: [['Free', 95.0], ['Used', 26.8], ['Interference', 12.8]]\n        }]\n      });\n      return of(object);\n    }\n    // AREA CHARTS\n    stackedAreaChartOptions() {\n      const object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'area'\n        },\n        title: {\n          text: 'Stacked Area Chart'\n        },\n        colors: ['#338107', '#fbe936', '#fa423b'],\n        // subtitle: {\n        //   text: 'Source: Wikipedia.org'\n        // },\n        xAxis: {\n          labels: {\n            rotation: -45,\n            style: {\n              fontSize: '13px',\n              fontFamily: 'Verdana, sans-serif'\n            }\n          },\n          categories: ['09/25 12:15', '09/25 20:15', '09/26 04:15', '09/26 12:15', '09/26 20:15', '09/27 04:15', '09/27 12:15', '09/27 20:15', '09/28 04:15', '09/28 12:15', '09/28 20:15', '09/29 04:15', '09/29 12:15', '09/29 20:15', '09/30 04:15', '09/30 12:15', '09/30 20:15', '10/01 04:15', '10/01 12:15', '10/01 20:15', '10/02 04:15'],\n          tickmarkPlacement: 'on',\n          title: {\n            enabled: false\n          }\n        },\n        yAxis: {\n          min: 0,\n          max: 100,\n          tickInterval: 25,\n          title: {\n            text: 'Percentage(%)'\n          }\n          // labels: {\n          //   formatter() {\n          //     return this.value / 1000;\n          //   }\n          // }\n        },\n        tooltip: {\n          headerFormat: '<b>{series.name}</b><br>',\n          pointFormat: '{point.percentage:.1f}%'\n        },\n        plotOptions: {\n          series: {\n            cursor: 'pointer',\n            point: {\n              events: {\n                // tslint:disable-next-line:object-literal-shorthand\n                click: function () {\n                  console.log('Category: ' + this.category + ', Series:' + this.series.name + ', value: ' + this.y);\n                }\n              }\n            }\n          },\n          area: {\n            stacking: 'normal',\n            // lineColor: '#666666',\n            lineWidth: 1,\n            marker: {\n              enabled: false,\n              symbol: 'circle',\n              radius: 2,\n              states: {\n                hover: {\n                  enabled: true\n                }\n              },\n              lineWidth: 1,\n              lineColor: '#666666'\n            }\n          }\n        },\n        series: [{\n          name: 'Free',\n          data: [100, 100, 100, 100, 100, 100, null, null, null, null, null, null, 100, 100, 100, 100, 100, 100, null, null, null]\n        }, {\n          name: 'Used',\n          data: [5, 4, 6, 5, 4, 9, null, null, null, null, null, null, 4, 5, 2, 4, 5, 7, null, null, null]\n        }, {\n          name: 'Interference',\n          data: [20, 25, 18, 25, 22, 24, null, null, null, null, null, null, 20, 22, 25, 21, 23, 18, null, null, null]\n        }]\n      });\n      return of(object);\n    }\n    stackedAreaChartOptions1() {\n      const object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'area'\n        },\n        title: {\n          text: 'Stacked Area Chart'\n        },\n        colors: ['#338107', '#fbe936', '#fa423b'],\n        // subtitle: {\n        //   text: 'Source: Wikipedia.org'\n        // },\n        xAxis: {\n          labels: {\n            rotation: -45,\n            style: {\n              fontSize: '13px',\n              fontFamily: 'Verdana, sans-serif'\n            }\n          },\n          categories: ['09/25 12:15', '09/25 20:15', '09/26 04:15', '09/26 12:15', '09/26 20:15', '09/27 04:15', '09/27 12:15', '09/27 20:15', '09/28 04:15', '09/28 12:15', '09/28 20:15', '09/29 04:15', '09/29 12:15', '09/29 20:15', '09/30 04:15', '09/30 12:15', '09/30 20:15', '10/01 04:15', '10/01 12:15', '10/01 20:15', '10/02 04:15'],\n          tickmarkPlacement: 'on',\n          title: {\n            enabled: false\n          }\n        },\n        yAxis: {\n          min: 0,\n          max: 100,\n          tickInterval: 25,\n          title: {\n            text: 'Percentage(%)'\n          }\n          // labels: {\n          //   formatter() {\n          //     return this.value / 1000;\n          //   }\n          // }\n        },\n        tooltip: {\n          headerFormat: '<b>{series.name}</b><br>',\n          pointFormat: '{point.percentage:.1f}%'\n        },\n        plotOptions: {\n          series: {\n            cursor: 'pointer',\n            point: {\n              events: {\n                // tslint:disable-next-line:object-literal-shorthand\n                click: function () {\n                  console.log('Category: ' + this.category + ', Series:' + this.series.name + ', value: ' + this.y);\n                }\n              }\n            }\n          },\n          area: {\n            stacking: 'normal',\n            // lineColor: '#666666',\n            lineWidth: 1,\n            marker: {\n              enabled: false,\n              symbol: 'circle',\n              radius: 2,\n              states: {\n                hover: {\n                  enabled: true\n                }\n              },\n              lineWidth: 1,\n              lineColor: '#666666'\n            }\n          }\n        },\n        series: [{\n          name: 'Free',\n          data: [100, 100, 100, 100, 100, 100, null, null, null, null, null, null, 100, 100, 100, 100, 100, 100, null, null, null]\n        }, {\n          name: 'Used',\n          data: [2, 3, 2, 3, 2, 2, null, null, null, null, null, null, 3, 3, 2, 2, 2, 3, null, null, null]\n        }, {\n          name: 'Interference',\n          data: [2, 2, 3, 2, 2, 2, null, null, null, null, null, null, 2, 2, 2, 2, 3, 2, null, null, null]\n        }]\n      });\n      return of(object);\n    }\n    areaChartOptions() {\n      const object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'area'\n        },\n        // accessibility: {\n        // tslint:disable-next-line:max-line-length\n        //   description: 'Image description: An area chart compares the nuclear stockpiles of the USA and the USSR/Russia between 1945 and 2017. The number of nuclear weapons is plotted on the Y-axis and the years on the X-axis. The chart is interactive, and the year-on-year stockpile levels can be traced for each country. The US has a stockpile of 6 nuclear weapons at the dawn of the nuclear age in 1945. This number has gradually increased to 369 by 1950 when the USSR enters the arms race with 6 weapons. At this point, the US starts to rapidly build its stockpile culminating in 32,040 warheads by 1966 compared to the USSR’s 7,089. From this peak in 1966, the US stockpile gradually decreases as the USSR’s stockpile expands. By 1978 the USSR has closed the nuclear gap at 25,393. The USSR stockpile continues to grow until it reaches a peak of 45,000 in 1986 compared to the US arsenal of 24,401. From 1986, the nuclear stockpiles of both countries start to fall. By 2000, the numbers have fallen to 10,577 and 21,000 for the US and Russia, respectively. The decreases continue until 2017 at which point the US holds 4,018 weapons compared to Russia’s 4,500.'\n        // },\n        title: {\n          text: 'Area Chart'\n        },\n        // subtitle: {\n        //   text: 'Sources: <a href=\"https://thebulletin.org/2006/july/global-nuclear-stockpiles-1945-2006\">' +\n        //     'thebulletin.org</a> &amp; <a href=\"https://www.armscontrol.org/factsheets/Nuclearweaponswhohaswhat\">' +\n        //     'armscontrol.org</a>'\n        // },\n        xAxis: {\n          allowDecimals: false,\n          labels: {\n            formatter() {\n              return this.value; // clean, unformatted number for year\n            }\n          },\n\n          accessibility: {\n            rangeDescription: 'Range: 1940 to 2017.'\n          }\n        },\n        yAxis: {\n          title: {\n            text: 'Nuclear weapon states'\n          },\n          labels: {\n            formatter() {\n              return this.value / 1000 + 'k';\n            }\n          }\n        },\n        tooltip: {\n          pointFormat: '{series.name} had stockpiled <b>{point.y:,.0f}</b><br/>warheads in {point.x}'\n        },\n        plotOptions: {\n          area: {\n            pointStart: 1940,\n            marker: {\n              enabled: false,\n              symbol: 'circle',\n              radius: 2,\n              states: {\n                hover: {\n                  enabled: true\n                }\n              }\n            }\n          }\n        },\n        series: [{\n          name: 'USA',\n          data: [null, null, null, null, null, 6, 11, 32, 110, 235, 369, 640, 1005, 1436, 2063, 3057, 4618, 6444, 9822, 15468, 20434, 24126, 27387, 29459, 31056, 31982, 32040, 31233, 29224, 27342, 26662, 26956, 27912, 28999, 28965, 27826, 25579, 25722, 24826, 24605, 24304, 23464, 23708, 24099, 24357, 24237, 24401, 24344, 23586, 22380, 21004, 17287, 14747, 13076, 12555, 12144, 11009, 10950, 10871, 10824, 10577, 10527, 10475, 10421, 10358, 10295, 10104, 9914, 9620, 9326, 5113, 5113, 4954, 4804, 4761, 4717, 4368, 4018]\n        }, {\n          name: 'USSR/Russia',\n          data: [null, null, null, null, null, null, null, null, null, null, 5, 25, 50, 120, 150, 200, 426, 660, 869, 1060, 1605, 2471, 3322, 4238, 5221, 6129, 7089, 8339, 9399, 10538, 11643, 13092, 14478, 15915, 17385, 19055, 21205, 23044, 25393, 27935, 30062, 32049, 33952, 35804, 37431, 39197, 45000, 43000, 41000, 39000, 37000, 35000, 33000, 31000, 29000, 27000, 25000, 24000, 23000, 22000, 21000, 20000, 19000, 18000, 18000, 17000, 16000, 15537, 14162, 12787, 12600, 11400, 5500, 4512, 4502, 4502, 4500, 4500]\n        }]\n      });\n      return of(object);\n    }\n    // LINE CHARTS\n    multiLineChartOptions() {\n      let object = {\n        // ...this.commonHighChartOptions,\n        chart: {\n          type: 'line'\n          // plotBackgroundColor: '#A5C380',\n          // width: 1400,\n          // height: this.HouseholdchartHeight,\n        },\n\n        xAxis: [{\n          categories: ['11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00', '00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00', '09:00', '10:00'],\n          crosshair: true\n          // gridLineColor: '#ffffff',\n          // lineColor: '#ffffff'\n        }],\n\n        yAxis: [{\n          allowDecimals: true,\n          labels: {\n            // format: '{value} KB'\n            enabled: false\n            // formatter: function () {\n            //     return this.value.toFixed(1) >= 1 ? (this.value.toFixed(1) / 1000) + 'KB' : this.value.toFixed(0) + 'B';\n            // },\n            // style: {\n            //     color: '#727272',\n            // },\n          },\n\n          // title: {\n          //   enabled: false\n          // },\n          title: {\n            text: null\n          },\n          opposite: true,\n          gridLineColor: '#ffffff',\n          lineColor: '#ffffff'\n        }, {\n          min: 0,\n          allowDecimals: true,\n          labels: {\n            format: '{value} KB',\n            formatter: function () {\n              return this.value.toFixed(0) >= 1000 ? this.value.toFixed(0) / 1000 + 'KB' : this.value.toFixed(0) + 'B';\n            }\n          },\n          gridLineColor: '#ffffff',\n          lineColor: '#ffffff',\n          title: {\n            enabled: false\n          }\n          // title: {\n          //     text: 'Devices',\n          //     style: {\n          //         color: '#7cb5ec'\n          //     }\n          // },\n        }],\n\n        series: [{\n          name: 'per 10 minutes',\n          yAxis: 1,\n          data: [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.39, 1.5, 1.5, 1.5, 1.45, 1.5, 1.5, 1.5],\n          color: '#BA7528'\n          // data: data.numberOfDevices,\n        }, {\n          name: null,\n          data: [2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5],\n          color: '#2577A6'\n          // data: data.numberOfDevices,\n        }],\n\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            pointPadding: 2,\n            // groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            }\n          }\n        }\n      };\n      return of(object);\n    }\n    ChannelScoreChart1Options() {\n      const object = {\n        // ...this.commonHighChartOptions,\n        chart: {\n          type: 'line'\n        },\n        title: {\n          text: 'Channel Score'\n        },\n        xAxis: {\n          categories: ['Sep 05', '', '', 'Sep 16', '', '', '']\n        },\n        // xAxis: {\n        //     min: Date.UTC(2015, 4, 1),\n        //     max: Date.UTC(2015, 4, 30),\n        //     scrollbar: {\n        //         enabled: true\n        //     }\n        // },\n        yAxis: {\n          min: 0,\n          max: 5,\n          title: {\n            text: 'Channel Score'\n          },\n          plotLines: [{\n            color: '#338107',\n            width: 2,\n            value: 3,\n            dashStyle: 'line'\n          }]\n        },\n        plotOptions: {\n          line: {\n            marker: {\n              radius: 10\n            },\n            dataLabels: {\n              align: 'center',\n              enabled: true\n            }\n          }\n        },\n        series: [{\n          name: 'channel Score',\n          marker: {\n            symbol: 'circle'\n          },\n          data: [3, null, null, 3, null, null, null],\n          color: '#fa423b'\n        }]\n      };\n      return of(object);\n    }\n    getMeshTxExtendOptions() {\n      // let category = this.addMonthOnCategories(data.categories)\n      let householdOptions = {\n        // ...this.commonHighChartOptions,\n        chart: {\n          type: 'line'\n          // width: 1400,\n          // height: this.HouseholdchartHeight,\n        },\n\n        xAxis: [{\n          gridLineWidth: 1,\n          categories: ['11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00', '00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00', '09:00', '10:00'],\n          crosshair: true\n        }],\n        yAxis: [{\n          min: 0,\n          allowDecimals: true,\n          labels: {\n            format: '{value} KB'\n            // formatter: function () {\n            //     return this.value.toFixed(1) >= 1 ? (this.value.toFixed(1) / 1000) + 'KB' : this.value.toFixed(0) + 'B';\n            // },\n            // style: {\n            //     color: '#727272',\n            // },\n          },\n\n          // title: {\n          //   enabled: false\n          // },\n          title: {\n            text: null,\n            style: {\n              color: '#727272'\n            }\n          },\n          opposite: true\n        }, {\n          min: 0,\n          allowDecimals: true,\n          labels: {\n            format: '{value} KB',\n            // formatter: function () {\n            //     return this.value.toFixed(0) >= 1000 ? (this.value.toFixed(0) / 1000) + 'KB' : this.value.toFixed(0) + 'B';\n            // },\n            style: {\n              color: '#7cb5ec'\n            }\n          },\n          title: {\n            enabled: false\n          }\n          // title: {\n          //     text: 'Devices',\n          //     style: {\n          //         color: '#7cb5ec'\n          //     }\n          // },\n        }],\n\n        // tooltip: {\n        //     formatter: function () {\n        //         return `${this.series.name}<br/>\n        //                 <b>${data.categories[this.point.x]}: ${this.y}</b> `\n        //     }\n        // },\n        series: [{\n          name: 'Total Transmitted 5.5KB',\n          yAxis: 1,\n          data: [0.5, 0.5, 0.5, 0.5, 0.5, 5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 4, 0.5, 0.5, 0.5, 2, 0.5, 5, 0.5, 0.5],\n          color: '#35c7fc'\n          // data: data.numberOfDevices,\n        }, {\n          name: 'Total Recieved 256.6B',\n          // yAxis: 1,\n          data: [0.3, 0.3, 0.3, 0.3, 0.3, 1, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 1, 0.3, 0.3, 4.5, 0.3, 0.3, 3, 5.4, 0.3, 0.3, 0.3, 0.3],\n          color: '#F7C343'\n          // data: data.wifiScore,\n        }],\n\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            pointPadding: 2,\n            // groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n            // chartOptions: {\n            //     yAxis: [\n            //         {\n            //             labels: {\n            //                 align: 'right',\n            //                 x: 15,\n            //                 y: 5\n            //             },\n            //             title: {\n            //                 x: 15\n            //             },\n            //             showLastLabel: true\n            //         },\n            //         {\n            //             labels: {\n            //                 align: 'left',\n            //                 x: -15,\n            //                 y: 5\n            //             },\n            //             title: {\n            //                 x: -15\n            //             },\n            //             showLastLabel: true\n            //         }, {\n            //             visible: false\n            //         }]\n            // }\n          }]\n        }\n      };\n\n      return of(householdOptions);\n    }\n    getHouseholdOptions() {\n      // let category = this.addMonthOnCategories(data.categories)\n      let householdOptions = {\n        // ...this.commonHighChartOptions,\n        chart: {\n          type: 'line'\n          // width: 1400,\n          // height: this.HouseholdchartHeight,\n        },\n\n        xAxis: [{\n          gridLineWidth: 1,\n          categories: ['11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00', '00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00', '09:00', '10:00'],\n          crosshair: true\n        }],\n        yAxis: [{\n          min: 0,\n          allowDecimals: true,\n          labels: {\n            format: '{value} KB'\n            // formatter: function () {\n            //     return this.value.toFixed(1) >= 1 ? (this.value.toFixed(1) / 1000) + 'KB' : this.value.toFixed(0) + 'B';\n            // },\n            // style: {\n            //     color: '#727272',\n            // },\n          },\n\n          // title: {\n          //   enabled: false\n          // },\n          title: {\n            text: null,\n            style: {\n              color: '#727272'\n            }\n          },\n          opposite: true\n        }, {\n          min: 0,\n          allowDecimals: true,\n          labels: {\n            format: '{value} KB',\n            // formatter: function () {\n            //     return this.value.toFixed(0) >= 1000 ? (this.value.toFixed(0) / 1000) + 'KB' : this.value.toFixed(0) + 'B';\n            // },\n            style: {\n              color: '#7cb5ec'\n            }\n          },\n          title: {\n            enabled: false\n          }\n          // title: {\n          //     text: 'Devices',\n          //     style: {\n          //         color: '#7cb5ec'\n          //     }\n          // },\n        }],\n\n        // tooltip: {\n        //     formatter: function () {\n        //         return `${this.series.name}<br/>\n        //                 <b>${data.categories[this.point.x]}: ${this.y}</b> `\n        //     }\n        // },\n        series: [{\n          name: 'Total Transmitted 5.5KB',\n          yAxis: 1,\n          data: [0.5, 0.5, 0.5, 0.5, 0.5, 5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 4, 0.5, 0.5, 0.5, 2, 0.5, 5, 0.5, 0.5],\n          color: '#35c7fc'\n          // data: data.numberOfDevices,\n        }, {\n          name: 'Total Recieved 256.6B',\n          // yAxis: 1,\n          data: [0.3, 0.3, 0.3, 0.3, 0.3, 1, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 1, 0.3, 0.3, 4.5, 0.3, 0.3, 3, 5.4, 0.3, 0.3, 0.3, 0.3],\n          color: '#F7C343'\n          // data: data.wifiScore,\n        }],\n\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            pointPadding: 2,\n            // groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n            // chartOptions: {\n            //     yAxis: [\n            //         {\n            //             labels: {\n            //                 align: 'right',\n            //                 x: 15,\n            //                 y: 5\n            //             },\n            //             title: {\n            //                 x: 15\n            //             },\n            //             showLastLabel: true\n            //         },\n            //         {\n            //             labels: {\n            //                 align: 'left',\n            //                 x: -15,\n            //                 y: 5\n            //             },\n            //             title: {\n            //                 x: -15\n            //             },\n            //             showLastLabel: true\n            //         }, {\n            //             visible: false\n            //         }]\n            // }\n          }]\n        }\n      };\n\n      return of(householdOptions);\n    }\n    ChannelScoreChartOptions() {\n      const object = {\n        // ...this.commonHighChartOptions,\n        chart: {\n          type: 'line'\n        },\n        title: {\n          text: 'Channel Score'\n        },\n        xAxis: {\n          categories: ['Sep 05', 'Sep 05', 'Sep 10', 'Sep 16', 'Sep 17', 'Sep 23', 'Sep 28']\n        },\n        // xAxis: {\n        //     min: Date.UTC(2015, 4, 1),\n        //     max: Date.UTC(2015, 4, 30),\n        //     scrollbar: {\n        //         enabled: true\n        //     }\n        // },\n        yAxis: {\n          min: 0,\n          max: 5,\n          title: {\n            text: 'Channel Score'\n          }\n        },\n        plotOptions: {\n          line: {\n            marker: {\n              radius: 10\n            },\n            dataLabels: {\n              align: 'center',\n              enabled: true\n            }\n          }\n        },\n        series: [{\n          name: 'channel Score',\n          marker: {\n            symbol: 'circle'\n          },\n          data: [4, 4, 5, 5, 5, 5, 5],\n          color: '#338107'\n        }]\n      };\n      return of(object);\n    }\n    performSearch(orgId, filter, pageNumber, pageSize) {\n      const params = new HttpParams()\n      // .set(\"orgId\", orgId)\n      .set(\"filter\", filter || \"\").set(\"pageNumber\", pageNumber).set(\"pageSize\", pageSize);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.get(`${environment.SUPPORT_URL}${getSubscribeList}`, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    searchBySubscriberId(subscriberId, orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber/${subscriberId}?${ID}includeDeviceData=true&queryByLocationId=false`);\n    }\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n    getSubscriberInfo(orgId, subscriberId) {\n      var _a, _b, _c, _d;\n      return __awaiter(this, void 0, void 0, function* () {\n        const ID = this.sso.getOrg(orgId);\n        let url = `${environment.SUPPORT_URL}/subscriber-summary/${subscriberId}?${ID}`;\n        const ontData = (_a = this.sso.getDeviceData()) === null || _a === void 0 ? void 0 : _a.filter(obj => obj.hasOwnProperty('ont'));\n        if (ontData.length && !((_b = this.sso.getDeviceData()) === null || _b === void 0 ? void 0 : _b.some(obj => obj.opMode == 'RG'))) {\n          url = url + `&ontSerialNumber=${(_d = (_c = ontData[0]) === null || _c === void 0 ? void 0 : _c.ont) === null || _d === void 0 ? void 0 : _d.serialNumber}`;\n        }\n        return yield this.http.get(url).toPromise();\n      });\n    }\n    getSubscriberInfoEmailUpadte(orgId, subscriberId) {\n      var _a, _b, _c, _d;\n      return __awaiter(this, void 0, void 0, function* () {\n        const ID = this.sso.getOrg(orgId);\n        let url = `${environment.SUPPORT_URL}/subscriber-summary/${subscriberId}?${ID}`;\n        const ontData = (_a = this.sso.getDeviceData()) === null || _a === void 0 ? void 0 : _a.filter(obj => obj.hasOwnProperty('ont'));\n        if (ontData.length && !((_b = this.sso.getDeviceData()) === null || _b === void 0 ? void 0 : _b.some(obj => obj.opMode == 'RG'))) {\n          url = url + `&ontSerialNumber=${(_d = (_c = ontData[0]) === null || _c === void 0 ? void 0 : _c.ont) === null || _d === void 0 ? void 0 : _d.serialNumber}`;\n        }\n        return yield this.http.get(url).toPromise();\n      });\n    }\n    getSubscriberTabInfo(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber/network/status?${ID}serialNumber=${serialNumber}`);\n    }\n    setSubscriberInfo(subscribrData) {\n      this.subscriberInfo = subscribrData;\n    }\n    getStoredSubscriberInfo() {\n      return this.subscriberInfo;\n    }\n    setSubscriberTabInfoData(subscriberTabInfo) {\n      this.subscriberTabInfo = subscriberTabInfo;\n    }\n    getSubscriberTabInfoData() {\n      return this.subscriberTabInfo;\n    }\n    setDataSaver(key, value) {\n      this.dataSaver[key] = value;\n    }\n    getDataSaver(key) {\n      return this.dataSaver[key];\n    }\n    removeDataSaver() {\n      this.dataSaver = {};\n    }\n    setDeviceTabCount(DeviceCount) {\n      this.DeviceCount = DeviceCount;\n    }\n    getDeviceTabCount() {\n      return this.DeviceCount;\n    }\n    fetchMetaData(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.API_BASE_URL}calix/support/device/feature-properties?${ID}serialNumber=${serialNumber}`);\n    }\n    fetchMetaDataByModel(orgId, model) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.API_BASE_URL}calix/support/device/feature-properties?${ID}modelName=${model}`);\n    }\n    //new add apis\n    fetchMetaDatavalues(userid) {\n      return this.http.get(`${environment.API_BASE_URL}csc/router/wifi/secondarynetwork/list?userId=${userid}`);\n    }\n    fetchMetaDatavaluesNew(orgid, serialNumber, isRefreshed = false) {\n      return this.http.get(`${environment.API_BASE_URL}csc/device/${orgid}/${serialNumber}/ssidPool${isRefreshed ? '?forceRefresh=true' : ''}`);\n    }\n    getnetworktypevalues(userid) {\n      return this.http.get(`${environment.API_BASE_URL}csc/router/wifi/secondarynetwork/type?userId=${userid}`);\n    }\n    getEncryptionvalues(userid) {\n      return this.http.get(`${environment.API_BASE_URL}csc/router/wifi/encryptionType?userId=${userid}`);\n    }\n    getSMBWifiTypes() {\n      return this.http.get(`${environment.API_BASE_URL}csc/device/smb-wifi-type`);\n    }\n    getUserIdValues(serialNumber) {\n      return this.http.get(`${environment.SUPPORT_URL}/router/onboarded?sn=${serialNumber}`);\n    }\n    fetchMetaDatasingleValues(userid, eventid) {\n      return this.http.get(`${environment.API_BASE_URL}csc/router/wifi/secondarynetwork/single?userId=\n    ${userid}&eventId=${eventid}`);\n    }\n    updatefunctionssidpolling(orgId, serialNumber, data) {\n      return this.http.put(`${environment.SUPPORT_URL}/device/${orgId}/${serialNumber}/ssidPool`, data).pipe(catchError(this.handleError));\n    }\n    addfunctionforssidpolling(orgId, serialNumber, data) {\n      return this.http.post(`${environment.SUPPORT_URL}/device/${orgId}/${serialNumber}/ssidPool`, data).pipe(catchError(this.handleError));\n    }\n    updateSMBssidpolling(orgId, serialNumber, data) {\n      return this.http.put(`${environment.SUPPORT_URL}/device/${orgId}/${serialNumber}/ssidPool`, data).pipe(catchError(this.handleError));\n    }\n    deleteSMBSSID(serialNumber, type) {\n      return this.http.delete(`${environment.SUPPORT_URL}/device/smb-wifi?serialNumber=${serialNumber}&smbWifiNetworkType=${type}`);\n    }\n    // deleteSubscriber(subscriberId: any, orgId: any) {\n    //   return this.http.delete(`${environment.SUPPORT_URL}/subscriber/${subscriberId}?${ID}`);\n    // }\n    deleteProfileSSID(orgid, serialNumber, eventid) {\n      return this.http.delete(`${environment.SUPPORT_URL}/device/${orgid}/${serialNumber}/secondarynetwork/delete?eventId=${eventid}`);\n    }\n    //new add apis\n    getMetaData(serialNumber) {\n      return this.metaData.hasOwnProperty(serialNumber) ? this.metaData[serialNumber] : false;\n    }\n    setMetaData(serialNumber, metaData, reset = false) {\n      reset ? this.metaData = {} : this.metaData[serialNumber] = metaData;\n    }\n    recentSubscriber(request) {\n      return this.http.post(`${environment.SUPPORT_URL}/recentSubscribers`, request);\n    }\n    serviceTabInfo(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/speed-test/latest?${ID}sn=${serialNumber}`);\n    }\n    speedTestPrivPolicy(orgId) {\n      return this.http.get(`${environment.SUPPORT_URL}/device-st/speed-test/config/${orgId}`);\n    }\n    speedTest(request) {\n      return this.http.post(`${environment.SUPPORT_URL}/device-st/run-speed-test`, request);\n    }\n    speedTestPublicChart(orgId, serialNumber, limit) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-st/speed-test-results?${ID}sn=${serialNumber}&limit=${limit}&public-only=true`);\n    }\n    speedTestPrivateChart(orgId, serialNumber, limit) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-st/speed-test-results?${ID}sn=${serialNumber}&limit=${limit}&private-only=true`);\n    }\n    speedTestThirdPartyChart(orgId, serialNumber, limit) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-st/speed-test-results?${ID}sn=${serialNumber}&limit=${limit}`);\n    }\n    latencyTestChart(orgId, serialNumber, limit) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-st/latency-test-results?${ID}sn=${serialNumber}&limit=${limit}`);\n    }\n    latencyTest(request) {\n      return this.http.post(`${environment.SUPPORT_URL}/device-st/run-latency-test`, request);\n    }\n    setServiceTabInfo(serviceData) {\n      this.serviceTabData = serviceData;\n    }\n    ///////ont data service/////////\n    servicedefinitionsapicall() {\n      return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/serviceDefinitions?serviceType=DATA`);\n    }\n    servicestatusapicall(subId) {\n      return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/subscribers/${subId}/services/status`);\n    }\n    getDetailedSubscriberServices(subId) {\n      return this.http.get(`${environment.FOUNDATION_SERVICES_URL}subscribers/${subId}?includeDeviceData=false&includeDecommissionedDevices=false`);\n    }\n    bandwidthtiers(name) {\n      return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/bandwidthTiers?name=${name}`);\n    }\n    ///////////////////////////\n    getServiceTabInfo() {\n      return this.serviceTabData;\n    }\n    setLatencyTabInfo(serviceData) {\n      this.latencyTabInfo = serviceData;\n    }\n    getLatencyTabInfo() {\n      return this.latencyTabInfo;\n    }\n    pageErrorHandle(err) {\n      var _a, _b;\n      if (typeof err === 'string' && err) {\n        return err;\n      }\n      let errorInfo;\n      console.log('1404', err);\n      if ((_a = err === null || err === void 0 ? void 0 : err.error) === null || _a === void 0 ? void 0 : _a.errorDesc) {\n        errorInfo = `${(_b = err === null || err === void 0 ? void 0 : err.error) === null || _b === void 0 ? void 0 : _b.errorDesc}`;\n      } else if (err.error != undefined && err.error != null && typeof err.error == 'string') {\n        errorInfo = `${err.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.error != undefined && typeof err.error.error == 'string') {\n        console.log('1408', `${err.error.error}`);\n        errorInfo = `${err.error.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'string') {\n        errorInfo = `${err.error.fault}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'object' && err.error.fault.faultstring != undefined && typeof err.error.fault.faultstring == 'string') {\n        errorInfo = `${err.error.fault.faultstring}`;\n      } else if (err.error && err.error.errorMessage) {\n        errorInfo = err.error.errorMessage;\n      } else if (err.statusText == 'Unknown Error' && err.status == '0') {\n        errorInfo = \"Unknown Error - Please refresh the page\";\n      } else if (err.error != undefined) {\n        errorInfo = `${err.error.message}`;\n      } else {\n        errorInfo = `${err.message}`;\n      }\n      let langfromapi = this.sso.getspecificlangliterals();\n      errorInfo = errorInfo != 'undefined' && errorInfo && langfromapi[errorInfo] ? langfromapi[errorInfo] : errorInfo;\n      return errorInfo != 'undefined' && errorInfo.length ? errorInfo : Object.values(this.flatten(err)).join(' - ');\n    }\n    traverseAndFlatten(currentNode, target, flattenedKey) {\n      for (var key in currentNode) {\n        if (currentNode.hasOwnProperty(key)) {\n          var newKey;\n          if (flattenedKey === undefined) {\n            newKey = key;\n          } else {\n            newKey = flattenedKey + '.' + key;\n          }\n          var value = currentNode[key];\n          if (typeof value === \"object\") {\n            this.traverseAndFlatten(value, target, newKey);\n          } else {\n            target[newKey] = value;\n          }\n        }\n      }\n    }\n    flatten(obj) {\n      let flattenedObject = {};\n      try {\n        this.traverseAndFlatten(obj, flattenedObject);\n      } catch (ex) {\n        flattenedObject = {};\n      }\n      return flattenedObject;\n    }\n    timeToDays(time) {\n      let seconds = time;\n      const day = Math.floor(seconds / (24 * 3600));\n      seconds = seconds % (24 * 3600);\n      const hour = Math.floor(seconds / 3600);\n      seconds %= 3600;\n      const minutes = Math.floor(seconds / 60);\n      const second = Math.floor(seconds % 60);\n      return `${day ? day + 'd' : ''}\n              ${hour ? hour + 'h' : ''}\n              ${minutes ? String(minutes).padStart(2, '0') + 'm' : ''}\n              ${second ? String(second).padStart(2, '0') + 's' : ''}`;\n    }\n    timeSetter(createTime, timeCheck) {\n      let value = 0,\n        overtime = '',\n        connectingTime = 'second';\n      const min = 60,\n        hour = min * 60,\n        day = hour * 24,\n        week = day * 7,\n        month = week * 4;\n      if (createTime) {\n        if (timeCheck >= month) {\n          overtime = timeCheck > month ? this.language['Over'] + ' ' : '';\n          connectingTime = timeCheck > month ? 'Months' : 'month';\n          value = Math.ceil(timeCheck / month);\n        } else if (timeCheck >= week) {\n          overtime = timeCheck > week ? this.language['Over'] + ' ' : '';\n          connectingTime = timeCheck > week ? 'weeks' : 'week';\n          value = Math.ceil(timeCheck / week);\n        } else if (timeCheck >= day) {\n          overtime = timeCheck > day ? this.language['Over'] + ' ' : '';\n          connectingTime = timeCheck > day ? 'Days' : 'day';\n          value = Math.round(timeCheck / day);\n        } else if (timeCheck >= hour) {\n          overtime = timeCheck > hour ? this.language['Over'] + ' ' : '';\n          connectingTime = timeCheck > hour ? 'Hours' : 'Hour';\n          value = Math.ceil(timeCheck / hour);\n        } else if (timeCheck >= min) {\n          overtime = timeCheck > min ? this.language['Over'] + ' ' : '';\n          connectingTime = timeCheck > min ? 'Minutes' : 'Minutes';\n          value = Math.ceil(timeCheck / min);\n        }\n      }\n      return [overtime, connectingTime, value];\n    }\n    getDeviceInfo(serialNumber) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${this.sso.getOrg(this.sso.getOrgId())}/${serialNumber}/deviceinfo`);\n    }\n    getDeviceDetails(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/detail?${ID}deviceId=${serialNumber}`);\n    }\n    getUnassociatedDevice(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/unassociated-device-summary?${ID}serialNumber=${serialNumber}`);\n    }\n    setNetworkStatus(flag) {\n      this.NetworkStatus = flag;\n    }\n    getNetworkStatus() {\n      return this.NetworkStatus;\n    }\n    putOverview(orgId, data) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/subscriber/network/overview?${ID}`, data).pipe(catchError(this.handleError));\n    }\n    setSubscriberOverviewData(data) {\n      this.OverviewApiData = data;\n    }\n    getSubscriberOverviewData() {\n      return this.OverviewApiData;\n    }\n    setAllIssues(AllIssues) {\n      this.IssuesList = AllIssues;\n    }\n    getAllIssues() {\n      return this.IssuesList;\n    }\n    getL2SecurityData(orgId, serialNumber) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${serialNumber}/l2security`).pipe(catchError(this.handleError));\n    }\n    fetchSsidNameInfoData(orgId, serialNumber) {\n      return this.http.get(`${environment.API_BASE_URL}csc/device/${orgId}/${serialNumber}/ssid`);\n    }\n    getSsidNameInfoData(serialNumber) {\n      return this.SsidNameInfoData.hasOwnProperty(serialNumber) ? this.SsidNameInfoData[serialNumber] : false;\n    }\n    setSsidNameInfoData(serialNumber, SsidNameInfoData, reset = false) {\n      reset ? this.SsidNameInfoData = {} : this.SsidNameInfoData[serialNumber] = SsidNameInfoData;\n    }\n    //end-aswin-09-04-2021-siteScan-ssidNamaInfo-data-fetch\n    getWanInfo(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-summary/waninfo?${ID}serialNumber=${serialNumber}`);\n    }\n    getDevicePR(orgId, deviceId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-provisioning/provisioning-record?${ID}deviceId=${deviceId}`);\n    }\n    getRestoreChartData(key) {\n      return this.restoreChartObj.hasOwnProperty(key) ? this.restoreChartObj[key] : false;\n    }\n    setRestoreChartData(key, restoreChartObj, reset) {\n      reset ? this.restoreChartObj = {} : this.restoreChartObj[key] = restoreChartObj;\n    }\n    /***end-aswin-10-05-2021-highchart-streamoption-algorithm-change-try */\n    get multipleRegInstance() {\n      return this.multipleRegId;\n    }\n    set multipleRegInstance(data) {\n      this.multipleRegId = data;\n    }\n    getRegIdInstance(orgId, regId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/deviceInfo?${ID}registrationId=${regId}`);\n    }\n    getHubbData(subId) {\n      return this.http.get(`${environment.SUPPORT_URL}/netops-perf-testing/fccIdentifiers/${subId}`.replace(/%E2%80%8B/g, ''));\n    }\n    createHubbData(input) {\n      return this.http.post(`${environment.SUPPORT_URL}/netops-perf-testing/fccIdentifiers`, input).pipe(catchError(this.handleError));\n    }\n    updateHubbData(subId, input) {\n      return this.http.put(`${environment.SUPPORT_URL}/netops-perf-testing/fccIdentifiers/${subId}`, input).pipe(catchError(this.handleError));\n    }\n    deleteHubbData(subId) {\n      return this.http.delete(`${environment.SUPPORT_URL}/netops-perf-testing/fccIdentifiers/${subId}`);\n    }\n    getSpeedTestAvailability(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-st/speed-test/availability?${ID}sn=${serialNumber}`).pipe(catchError(this.handleError));\n    }\n    getDeleteAndFactoryreset(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/org-config/delete-and-factory-reset?${ID}`);\n    }\n    resetBaseline(request) {\n      return this.http.put(`${environment.SUPPORT_URL}/device-st/speed-test/reset-service-tier`, request).pipe(catchError(this.handleError));\n    }\n    cscSearch(params) {\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-search`, {\n        params\n      });\n    }\n    getDeviceStatus(srNo, name) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/app/status?fsn=${srNo}&appName=${name}`).pipe(catchError(this.handleError));\n    }\n    getqoslist_V2(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(`${environment.SUPPORT_URL}/qos/summary`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    deleteWarningSubscriber(orgId, subscriberId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/servify-contract?${ID}subscriberId=${subscriberId}`);\n    }\n    getAvailibilityStatus(orgId, serialNumber) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${serialNumber}/availability`);\n    }\n    deleteSSID(orgId, serialNumber, event_id) {\n      return this.http.delete(`${environment.SUPPORT_URL}/device/${orgId}/${serialNumber}/secondarynetwork/delete?eventId=${event_id}`);\n    }\n  }\n  DataServiceService.ɵfac = function DataServiceService_Factory(t) {\n    return new (t || DataServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService), i0.ɵɵinject(i3.TranslateService));\n  };\n  DataServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataServiceService,\n    factory: DataServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}