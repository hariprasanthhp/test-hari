{"ast":null,"code":"import { getLanesRoot } from '../util/LaneUtil';\nimport { is } from '../../../util/ModelUtil';\nimport { isAny } from '../util/ModelingUtil';\nvar HIGH_PRIORITY = 1500;\nvar HIGHEST_PRIORITY = 2000;\n\n/**\r\n * Correct hover targets in certain situations to improve diagram interaction.\r\n *\r\n * @param {ElementRegistry} elementRegistry\r\n * @param {EventBus} eventBus\r\n * @param {Canvas} canvas\r\n */\nexport default function FixHoverBehavior(elementRegistry, eventBus, canvas) {\n  eventBus.on(['create.hover', 'create.move', 'create.out', 'create.end', 'shape.move.hover', 'shape.move.move', 'shape.move.out', 'shape.move.end'], HIGH_PRIORITY, function (event) {\n    var context = event.context,\n      shape = context.shape || event.shape,\n      hover = event.hover;\n\n    // ensure elements are not dropped onto a bpmn:Lane but onto\n    // the underlying bpmn:Participant\n    if (is(hover, 'bpmn:Lane') && !isAny(shape, ['bpmn:Lane', 'bpmn:Participant'])) {\n      event.hover = getLanesRoot(hover);\n      event.hoverGfx = elementRegistry.getGraphics(event.hover);\n    }\n    var rootElement = canvas.getRootElement();\n\n    // ensure bpmn:Group and label elements are dropped\n    // always onto the root\n    if (hover !== rootElement && (shape.labelTarget || is(shape, 'bpmn:Group'))) {\n      event.hover = rootElement;\n      event.hoverGfx = elementRegistry.getGraphics(event.hover);\n    }\n  });\n  eventBus.on(['connect.hover', 'connect.out', 'connect.end', 'connect.cleanup', 'global-connect.hover', 'global-connect.out', 'global-connect.end', 'global-connect.cleanup'], HIGH_PRIORITY, function (event) {\n    var hover = event.hover;\n\n    // ensure connections start/end on bpmn:Participant,\n    // not the underlying bpmn:Lane\n    if (is(hover, 'bpmn:Lane')) {\n      event.hover = getLanesRoot(hover) || hover;\n      event.hoverGfx = elementRegistry.getGraphics(event.hover);\n    }\n  });\n  eventBus.on(['bendpoint.move.hover'], HIGH_PRIORITY, function (event) {\n    var context = event.context,\n      hover = event.hover,\n      type = context.type;\n\n    // ensure reconnect start/end on bpmn:Participant,\n    // not the underlying bpmn:Lane\n    if (is(hover, 'bpmn:Lane') && /reconnect/.test(type)) {\n      event.hover = getLanesRoot(hover) || hover;\n      event.hoverGfx = elementRegistry.getGraphics(event.hover);\n    }\n  });\n  eventBus.on(['connect.start'], HIGH_PRIORITY, function (event) {\n    var context = event.context,\n      start = context.start;\n\n    // ensure connect start on bpmn:Participant,\n    // not the underlying bpmn:Lane\n    if (is(start, 'bpmn:Lane')) {\n      context.start = getLanesRoot(start) || start;\n    }\n  });\n\n  // allow movement of participants from lanes\n  eventBus.on('shape.move.start', HIGHEST_PRIORITY, function (event) {\n    var shape = event.shape;\n    if (is(shape, 'bpmn:Lane')) {\n      event.shape = getLanesRoot(shape) || shape;\n    }\n  });\n}\nFixHoverBehavior.$inject = ['elementRegistry', 'eventBus', 'canvas'];","map":null,"metadata":{},"sourceType":"module"}