{"ast":null,"code":"import { of, Subject } from 'rxjs';\nimport * as XLSX from 'xlsx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nexport let CommonFunctionsService = /*#__PURE__*/(() => {\n  class CommonFunctionsService {\n    constructor(translateService) {\n      this.translateService = translateService;\n      this.showTabMenu$ = new Subject();\n      this.language = this.translateService.defualtLanguage;\n      this.translateSubscribe = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n    }\n    ngOnDestroy() {\n      if (this.translateSubscribe) {\n        this.translateSubscribe.unsubscribe();\n      }\n    }\n    plusIcon() {\n      // alert('plus icon')\n    }\n    delete(event) {\n      event.path.forEach(el => {\n        if (el.nodeName == 'TR') {\n          let rowId = el.id;\n        }\n      });\n    }\n    inlineSave() {\n      // alert('save')\n    }\n    formatTodayDate() {\n      var d = new Date(),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    }\n    generateExportName(firstName, adminFlag = false) {\n      let d = this.formatTodayDate();\n      if (adminFlag) {\n        let name = `${this.language[firstName]}_${this.language['export_file']}_${d}`;\n        return name;\n      } else {\n        let name = `${firstName}_export_${d}`;\n        return name;\n      }\n    }\n    onFileChange(ev) {\n      let workBook = null;\n      let jsonData = null;\n      const reader = new FileReader();\n      const file = ev.target.files[0];\n      reader.onload = event => {\n        const data = reader.result;\n        workBook = XLSX.read(data, {\n          type: 'binary'\n        });\n        jsonData = workBook.SheetNames.reduce((initial, name) => {\n          const sheet = workBook.Sheets[name];\n          initial[name] = XLSX.utils.sheet_to_json(sheet);\n          return initial;\n        }, {});\n        // const dataString = JSON.stringify(jsonData);\n        // document.getElementById('output').innerHTML = dataString.slice(0, 300).concat(\"...\");\n        // this.setDownload(dataString);\n      };\n\n      reader.readAsBinaryString(file);\n      return of([]);\n    }\n    //Ip valivations\n    isValidIpV4Addr(ip) {\n      return ip.indexOf(\"/\") == -1 ? /^(?=\\d+\\.\\d+\\.\\d+\\.\\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.?){4}$/.test(ip) : /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(3[0-2]|[1-2][0-9]|[0-9]))$/.test(ip);\n    }\n    isValidIpV6Addr(ip) {\n      //return /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/.test(ip);\n      return /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/g.test(ip);\n    }\n    //Subnets Validations\n    isValidSubnetV4(ip) {\n      return /^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))$/.test(ip);\n    }\n    isValidSubnetV6(ip) {\n      return /^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*(\\/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))$/.test(ip);\n    }\n    trimSubnet(str) {\n      str = str.trim();\n      while (str[str.length - 1] === \".\") str = str.slice(0, -1);\n      return str;\n    }\n    validateEmail(email) {\n      return /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email);\n    }\n    sortByColumn(data, type, column) {\n      data.sort((a, b) => {\n        var nameA = a[column] ? a[column].toUpperCase() : '';\n        var nameB = b[column] ? b[column].toUpperCase() : '';\n        if (type == 'asc') {\n          if (nameA < nameB) {\n            return -1;\n          }\n          if (nameA > nameB) {\n            return 1;\n          }\n        } else {\n          if (nameA > nameB) {\n            return -1;\n          }\n          if (nameA < nameB) {\n            return 1;\n          }\n        }\n        // names must be equal\n        return 0;\n      });\n      return data;\n    }\n    sortByColumnAggregated(data, type, column) {\n      if (column === 'aggregated') {\n        data.sort((a, b) => {\n          var isAggregatedA = this.isAggregatedGroupAvail(a);\n          var isAggregatedB = this.isAggregatedGroupAvail(b);\n          if (type == 'asc') {\n            return isAggregatedA === isAggregatedB ? 0 : isAggregatedA ? -1 : 1;\n          } else {\n            return isAggregatedA === isAggregatedB ? 0 : isAggregatedA ? 1 : -1;\n          }\n        });\n        return data;\n      } else {\n        return this.sortByColumn(data, type, column);\n      }\n    }\n    validateDomain(str) {\n      return /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$/.test(str);\n    }\n    validateURL(str) {\n      return /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/.test(str);\n    }\n    splitData(str, splitter) {\n      let splitBy = splitter ? splitter : ';';\n      let data = [];\n      if (str != '' && str != null) {\n        data = [...str.split(splitter)];\n      }\n      return data;\n    }\n    validateIpORHost(ip) {\n      return /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)+([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$/g.test(ip);\n    }\n    ValidateIpV4Addr(ip) {\n      return /^(?=\\d+\\.\\d+\\.\\d+\\.\\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.?){4}$/.test(ip);\n    }\n    isAggregatedGroupAvail(item) {\n      if (item && item.aggGroup) {\n        return this.validateUUID(item.aggGroup);\n      }\n      return false;\n    }\n    validateUUID(uuid) {\n      return /^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$/.test(uuid) && uuid != '00000000-0000-0000-0000-000000000000';\n    }\n    columnNameFromKeys(obj, columnName) {\n      Object.keys(columnName).forEach(key => {\n        obj[columnName[key]] = obj[key] !== null && obj[key] !== undefined ? obj[key] : '';\n        delete obj[key];\n      });\n      return obj;\n    }\n    keysFromColumnName(obj, columnName) {\n      Object.keys(columnName).forEach(key => {\n        obj[key] = obj[columnName[key]] !== null && obj[columnName[key]] !== undefined ? obj[columnName[key]] : '';\n        delete obj[columnName[key]];\n      });\n      return obj;\n    }\n  }\n  CommonFunctionsService.ɵfac = function CommonFunctionsService_Factory(t) {\n    return new (t || CommonFunctionsService)(i0.ɵɵinject(i1.TranslateService));\n  };\n  CommonFunctionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommonFunctionsService,\n    factory: CommonFunctionsService.ɵfac,\n    providedIn: 'root'\n  });\n  return CommonFunctionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}