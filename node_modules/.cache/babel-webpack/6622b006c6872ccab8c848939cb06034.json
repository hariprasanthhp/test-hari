{"ast":null,"code":"'use strict';\n\nvar escapeHTML = require('../Utils').escapeHTML;\nvar domQuery = require('min-dom').query;\n\n/**\n * @param  {object} options\n * @param  {string} options.id\n * @param  {string} [options.title='']\n * @param  {string} [options.description='']\n * @param  {boolean} [options.open=false]\n * @param  {Function} [options.onToggle]\n * @param  {Function} [options.onRemove]\n *\n * @return {object}\n */\nfunction Collapsible(options) {\n  var id = options.id,\n    title = options.title || '',\n    description = options.description || '',\n    open = !!options.open || false,\n    onToggle = options.onToggle || noop,\n    onRemove = options.onRemove,\n    cssClasses = options.cssClasses || [];\n  var collapsibleEntry = {\n    id: id,\n    toggle: toggle,\n    isOpen: isOpen,\n    set: set,\n    setOpen: setOpen,\n    get: get\n  };\n  if (typeof onRemove === 'function') {\n    collapsibleEntry.onRemove = function (entry, entryNode, actionId, event) {\n      var commands = onRemove(entry, entryNode, actionId, event);\n      if (commands) {\n        scheduleCommands(commands, entryNode);\n        return true;\n      }\n    };\n  }\n  function get(element, entryNode) {\n    if (options.get) {\n      return options.get(element, entryNode);\n    }\n    return {\n      title: title || '',\n      description: description || ''\n    };\n  }\n  function set() {\n    var commands = this._commands;\n    if (commands) {\n      delete this._commands;\n      return commands;\n    }\n  }\n  function toggle(element, entryNode, event, scope) {\n    var value = !open;\n    setOpen(value, entryNode);\n    onToggle(value, entryNode);\n  }\n\n  /**\n   * Set entry's open state.\n   *\n   * @param {boolean} value\n   * @param {HTMLElement} entryNode\n   */\n  function setOpen(value, entryNode) {\n    open = value;\n    entryNode.classList.toggle('bpp-collapsible--collapsed', !value);\n  }\n  function isOpen() {\n    return open;\n  }\n\n  /**\n   * Schedule commands to be run with next `set` method call.\n   *\n   * @param {Array<any>} commands\n   * @param {HTMLElement} entryNode\n   */\n  function scheduleCommands(commands, entryNode) {\n    collapsibleEntry._commands = commands;\n\n    // @barmac: hack to make properties panel call `set`\n    var input = domQuery('input[type=\"hidden\"]', entryNode);\n    input.value = 1;\n  }\n  collapsibleEntry.html = '<div class=\"bpp-field-wrapper\" data-action=\"toggle\"><input name=\"hidden\" type=\"hidden\">' + '<span class=\"bpp-collapsible__icon\"></span>' + '<label class=\"bpp-collapsible__title\" data-value=\"title\">' + escapeHTML(title) + '</label>' + '<label class=\"bpp-collapsible__description\" data-value=\"description\">' + escapeHTML(description) + '</label>' + (onRemove ? '<button class=\"bpp-collapsible__remove action-button clear\" data-action=\"onRemove\"></button>' : '') + '</div>';\n  collapsibleEntry.cssClasses = cssClasses.concat(open ? ['bpp-collapsible'] : ['bpp-collapsible', 'bpp-collapsible--collapsed']);\n  return collapsibleEntry;\n}\nmodule.exports = Collapsible;\nfunction noop() {}","map":null,"metadata":{},"sourceType":"script"}