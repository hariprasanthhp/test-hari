{"ast":null,"code":"import entryFactory from 'bpmn-js-properties-panel/lib/factory/EntryFactory';\nimport { getBusinessObject, is } from 'bpmn-js/lib/util/ModelUtil';\nimport elementHelper from 'bpmn-js-properties-panel/lib/helper/ElementHelper';\nimport cmdHelper from 'bpmn-js-properties-panel/lib/helper/CmdHelper';\nimport { createFormDefinition, createFormId, createFormKey, createUserTaskForm, getFormDefinition, getUserTaskForm } from '../../../../helper/FormsHelper';\nexport default function (element, bpmnFactory, translate) {\n  let entries = [];\n  function cleanupUserTaskForm(element) {\n    const businessObject = getBusinessObject(element),\n      rootElement = getRootElement(element),\n      extensionElements = businessObject.get('extensionElements'),\n      rootExtensionElements = rootElement.get('extensionElements');\n    let commands = [];\n\n    // (1) remove form definition\n    const formDefinition = getFormDefinition(element);\n    if (!formDefinition) {\n      return commands;\n    }\n    commands.push(cmdHelper.removeElementsFromList(element, extensionElements, 'values', 'extensionElements', [formDefinition]));\n\n    // (2) remove referenced user task form\n    const userTaskForm = getUserTaskForm(element);\n    if (!userTaskForm) {\n      return commands;\n    }\n    commands.push(cmdHelper.removeElementsFromList(element, rootExtensionElements, 'values', 'extensionElements', [userTaskForm]));\n    return commands;\n  }\n  entries.push(entryFactory.textField(translate, {\n    id: 'form-json',\n    label: translate('Form JSON Configuration'),\n    modelProperty: 'formJSON',\n    get: function (element) {\n      const userTaskForm = getUserTaskForm(element);\n      return {\n        formJSON: userTaskForm ? userTaskForm.get('body') : ''\n      };\n    },\n    set: function (element, values) {\n      const businessObject = getBusinessObject(element),\n        rootElement = getRootElement(element),\n        body = values.formJSON;\n      let commands = [],\n        userTaskForm,\n        formId;\n\n      // (0) cleanup user task form + form definition on empty body\n      if (!body || body === '') {\n        return cleanupUserTaskForm(element);\n      }\n\n      // (1) ensure extension elements\n      let extensionElements = businessObject.get('extensionElements');\n      if (!extensionElements) {\n        extensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n          values: []\n        }, businessObject, bpmnFactory);\n        commands.push(cmdHelper.updateBusinessObject(element, businessObject, {\n          extensionElements: extensionElements\n        }));\n      }\n\n      // (2) ensure root element extension elements\n      let rootExtensionElements = rootElement.get('extensionElements');\n      if (!rootExtensionElements) {\n        rootExtensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n          values: []\n        }, rootElement, bpmnFactory);\n        commands.push(cmdHelper.updateBusinessObject(element, rootElement, {\n          extensionElements: rootExtensionElements\n        }));\n      }\n\n      // (3) ensure form definition\n      let formDefinition = getFormDefinition(element);\n      if (!formDefinition) {\n        formId = createFormId();\n        formDefinition = createFormDefinition({\n          formKey: createFormKey(formId)\n        }, extensionElements, bpmnFactory);\n        commands.push(cmdHelper.addAndRemoveElementsFromList(element, extensionElements, 'values', 'extensionElements', [formDefinition], []));\n      }\n      formId = resolveFormId(formDefinition.get('formKey'));\n\n      // (4) ensure user task form\n      userTaskForm = getUserTaskForm(element);\n      if (!userTaskForm) {\n        userTaskForm = createUserTaskForm({\n          id: formId,\n          body: body\n        }, rootExtensionElements, bpmnFactory);\n        commands.push(cmdHelper.addAndRemoveElementsFromList(element, rootExtensionElements, 'values', 'extensionElements', [userTaskForm], []));\n      }\n\n      // (5) update user task form\n      commands.push(cmdHelper.updateBusinessObject(element, userTaskForm, {\n        body: values.formJSON\n      }));\n      return commands;\n    }\n  }));\n  return entries;\n}\n\n// helpers //////////////////////\n\nfunction getRootElement(element) {\n  var businessObject = getBusinessObject(element),\n    parent = businessObject;\n  while (parent.$parent && !is(parent, 'bpmn:Process')) {\n    parent = parent.$parent;\n  }\n  return parent;\n}\nfunction resolveFormId(formKey) {\n  return formKey.split(':')[2];\n}","map":null,"metadata":{},"sourceType":"module"}