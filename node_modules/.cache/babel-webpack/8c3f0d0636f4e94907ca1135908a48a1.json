{"ast":null,"code":"import { isFunction } from 'min-dash';\nimport { event as domEvent, matches as domMatches } from 'min-dom';\nimport { hasModifier, isCmd, isKey, isShift } from './KeyboardUtil';\nvar KEYDOWN_EVENT = 'keyboard.keydown',\n  KEYUP_EVENT = 'keyboard.keyup';\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * A keyboard abstraction that may be activated and\n * deactivated by users at will, consuming key events\n * and triggering diagram actions.\n *\n * For keys pressed down, keyboard fires `keyboard.keydown` event.\n * The event context contains one field which is `KeyboardEvent` event.\n *\n * The implementation fires the following key events that allow\n * other components to hook into key handling:\n *\n *  - keyboard.bind\n *  - keyboard.unbind\n *  - keyboard.init\n *  - keyboard.destroy\n *\n * All events contain one field which is node.\n *\n * A default binding for the keyboard may be specified via the\n * `keyboard.bindTo` configuration option.\n *\n * @param {Config} config\n * @param {EventBus} eventBus\n */\nexport default function Keyboard(config, eventBus) {\n  var self = this;\n  this._config = config || {};\n  this._eventBus = eventBus;\n  this._keydownHandler = this._keydownHandler.bind(this);\n  this._keyupHandler = this._keyupHandler.bind(this);\n\n  // properly clean dom registrations\n  eventBus.on('diagram.destroy', function () {\n    self._fire('destroy');\n    self.unbind();\n  });\n  eventBus.on('diagram.init', function () {\n    self._fire('init');\n  });\n  eventBus.on('attach', function () {\n    if (config && config.bindTo) {\n      self.bind(config.bindTo);\n    }\n  });\n  eventBus.on('detach', function () {\n    self.unbind();\n  });\n}\nKeyboard.$inject = ['config.keyboard', 'eventBus'];\nKeyboard.prototype._keydownHandler = function (event) {\n  this._keyHandler(event, KEYDOWN_EVENT);\n};\nKeyboard.prototype._keyupHandler = function (event) {\n  this._keyHandler(event, KEYUP_EVENT);\n};\nKeyboard.prototype._keyHandler = function (event, type) {\n  var target = event.target,\n    eventBusResult;\n  if (isInput(target)) {\n    return;\n  }\n  var context = {\n    keyEvent: event\n  };\n  eventBusResult = this._eventBus.fire(type || KEYDOWN_EVENT, context);\n  if (eventBusResult) {\n    event.preventDefault();\n  }\n};\nKeyboard.prototype.bind = function (node) {\n  // make sure that the keyboard is only bound once to the DOM\n  this.unbind();\n  this._node = node;\n\n  // bind key events\n  domEvent.bind(node, 'keydown', this._keydownHandler, true);\n  domEvent.bind(node, 'keyup', this._keyupHandler, true);\n  this._fire('bind');\n};\nKeyboard.prototype.getBinding = function () {\n  return this._node;\n};\nKeyboard.prototype.unbind = function () {\n  var node = this._node;\n  if (node) {\n    this._fire('unbind');\n\n    // unbind key events\n    domEvent.unbind(node, 'keydown', this._keydownHandler, true);\n    domEvent.unbind(node, 'keyup', this._keyupHandler, true);\n  }\n  this._node = null;\n};\nKeyboard.prototype._fire = function (event) {\n  this._eventBus.fire('keyboard.' + event, {\n    node: this._node\n  });\n};\n\n/**\n * Add a listener function that is notified with `KeyboardEvent` whenever\n * the keyboard is bound and the user presses a key. If no priority is\n * provided, the default value of 1000 is used.\n *\n * @param {number} [priority]\n * @param {Function} listener\n * @param {string} type\n */\nKeyboard.prototype.addListener = function (priority, listener, type) {\n  if (isFunction(priority)) {\n    type = listener;\n    listener = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  this._eventBus.on(type || KEYDOWN_EVENT, priority, listener);\n};\nKeyboard.prototype.removeListener = function (listener, type) {\n  this._eventBus.off(type || KEYDOWN_EVENT, listener);\n};\nKeyboard.prototype.hasModifier = hasModifier;\nKeyboard.prototype.isCmd = isCmd;\nKeyboard.prototype.isShift = isShift;\nKeyboard.prototype.isKey = isKey;\n\n// helpers ///////\n\nfunction isInput(target) {\n  return target && (domMatches(target, 'input, textarea') || target.contentEditable === 'true');\n}","map":null,"metadata":{},"sourceType":"module"}