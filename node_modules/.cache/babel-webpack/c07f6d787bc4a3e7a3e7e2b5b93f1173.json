{"ast":null,"code":"'use strict';\n\nvar is = require('bpmn-js/lib/util/ModelUtil').is,\n  isAny = require('bpmn-js/lib/features/modeling/util/ModelingUtil').isAny,\n  getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n  eventDefinitionHelper = require('../../../helper/EventDefinitionHelper');\nvar forEach = require('lodash/forEach');\nvar message = require('./implementation/MessageEventDefinition'),\n  signal = require('./implementation/SignalEventDefinition'),\n  error = require('./implementation/ErrorEventDefinition'),\n  escalation = require('./implementation/EscalationEventDefinition'),\n  timer = require('./implementation/TimerEventDefinition'),\n  compensation = require('./implementation/CompensateEventDefinition'),\n  condition = require('./implementation/ConditionalEventDefinition');\nmodule.exports = function (group, element, bpmnFactory, elementRegistry, translate) {\n  var events = ['bpmn:StartEvent', 'bpmn:EndEvent', 'bpmn:IntermediateThrowEvent', 'bpmn:BoundaryEvent', 'bpmn:IntermediateCatchEvent'];\n\n  // Message and Signal Event Definition\n  forEach(events, function (event) {\n    if (is(element, event)) {\n      var messageEventDefinition = eventDefinitionHelper.getMessageEventDefinition(element),\n        signalEventDefinition = eventDefinitionHelper.getSignalEventDefinition(element);\n      if (messageEventDefinition) {\n        message(group, element, bpmnFactory, messageEventDefinition, translate);\n      }\n      if (signalEventDefinition) {\n        signal(group, element, bpmnFactory, signalEventDefinition, translate);\n      }\n    }\n  });\n\n  // Special Case: Receive Task\n  if (is(element, 'bpmn:ReceiveTask')) {\n    message(group, element, bpmnFactory, getBusinessObject(element), translate);\n  }\n\n  // Error Event Definition\n  var errorEvents = ['bpmn:StartEvent', 'bpmn:BoundaryEvent', 'bpmn:EndEvent'];\n  forEach(errorEvents, function (event) {\n    if (is(element, event)) {\n      var errorEventDefinition = eventDefinitionHelper.getErrorEventDefinition(element);\n      if (errorEventDefinition) {\n        error(group, element, bpmnFactory, errorEventDefinition, translate);\n      }\n    }\n  });\n\n  // Escalation Event Definition\n  var escalationEvents = ['bpmn:StartEvent', 'bpmn:BoundaryEvent', 'bpmn:IntermediateThrowEvent', 'bpmn:EndEvent'];\n  forEach(escalationEvents, function (event) {\n    if (is(element, event)) {\n      var showEscalationCodeVariable = is(element, 'bpmn:StartEvent') || is(element, 'bpmn:BoundaryEvent');\n\n      // get business object\n      var escalationEventDefinition = eventDefinitionHelper.getEscalationEventDefinition(element);\n      if (escalationEventDefinition) {\n        escalation(group, element, bpmnFactory, escalationEventDefinition, showEscalationCodeVariable, translate);\n      }\n    }\n  });\n\n  // Timer Event Definition\n  var timerEvents = ['bpmn:StartEvent', 'bpmn:BoundaryEvent', 'bpmn:IntermediateCatchEvent'];\n  forEach(timerEvents, function (event) {\n    if (is(element, event)) {\n      // get business object\n      var timerEventDefinition = eventDefinitionHelper.getTimerEventDefinition(element);\n      if (timerEventDefinition) {\n        timer(group, element, bpmnFactory, timerEventDefinition, translate);\n      }\n    }\n  });\n\n  // Compensate Event Definition\n  var compensationEvents = ['bpmn:EndEvent', 'bpmn:IntermediateThrowEvent'];\n  forEach(compensationEvents, function (event) {\n    if (is(element, event)) {\n      // get business object\n      var compensateEventDefinition = eventDefinitionHelper.getCompensateEventDefinition(element);\n      if (compensateEventDefinition) {\n        compensation(group, element, bpmnFactory, compensateEventDefinition, elementRegistry, translate);\n      }\n    }\n  });\n\n  // Conditional Event Definition\n  var conditionalEvents = ['bpmn:StartEvent', 'bpmn:BoundaryEvent', 'bpmn:IntermediateThrowEvent', 'bpmn:IntermediateCatchEvent'];\n  if (isAny(element, conditionalEvents)) {\n    // get business object\n    var conditionalEventDefinition = eventDefinitionHelper.getConditionalEventDefinition(element);\n    if (conditionalEventDefinition) {\n      condition(group, element, bpmnFactory, conditionalEventDefinition, elementRegistry, translate);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}