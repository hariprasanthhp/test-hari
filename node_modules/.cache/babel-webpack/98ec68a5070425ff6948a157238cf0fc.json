{"ast":null,"code":"import { of } from 'rxjs';\nimport * as Highcharts from \"highcharts/highstock\";\nimport * as constants from \"../../marketing/shared/constants/marketing.constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/marketing/marketing-explore-data/basic/shared/services/explore-data-common.service\";\nimport * as i2 from \"src/app-services/translate.service\";\nrequire('highcharts/highcharts-more')(Highcharts);\nrequire('highcharts/modules/solid-gauge')(Highcharts);\nconst IndicatorsCore = require(\"highcharts/indicators/indicators\");\nIndicatorsCore(Highcharts);\nconst IndicatorZigZag = require(\"highcharts/indicators/zigzag\");\nIndicatorZigZag(Highcharts);\nconst borderRadius = require('highcharts-border-radius');\nborderRadius(Highcharts);\n// const $: any = require('jquery');\nexport let MarketingInsightsChartServiceService = /*#__PURE__*/(() => {\n  class MarketingInsightsChartServiceService {\n    constructor(marketingExploreCommonService, translateService) {\n      this.marketingExploreCommonService = marketingExploreCommonService;\n      this.translateService = translateService;\n      this.stackedColumnInlineColors = ['#82bf00', '#a3a5ed', '#b3d974', '#349885', '#0279ff'];\n      this.pieChartColurs = ['#84bbf8', '#a3a5ed', '#b3d974', '#fd9e4c', '#fc6784'];\n      this.stackedColumnColors = ['#82BF1F', '#0279ff'];\n      this.SubscriberUsagechartHeight = 268;\n      this.plotOptions = {\n        stacking: 'normal',\n        series: {\n          allowPointSelect: true\n        },\n        states: {\n          inactive: {\n            enabled: false\n          },\n          select: {\n            color: null,\n            borderWidth: 7,\n            borderColor: 'rgb(170, 170, 170)'\n          }\n        }\n      };\n      this.commonHighChartOptions = {\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        responsive: {\n          rules: [{\n            condition: {},\n            chartOptions: {\n              chart: {\n                styledMode: true\n              },\n              subtitle: {\n                text: null\n              },\n              navigator: {\n                enabled: false\n              }\n            }\n          }]\n        }\n      };\n      this.xAxisLabels = {\n        style: {\n          fontSize: '10px'\n        },\n        autoRotationLimit: 40\n      };\n      this.styleOptions = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '10px',\n        color: '#4c4c4c'\n      };\n      this.selectOptions = {\n        enabled: true,\n        color: null,\n        borderWidth: 2,\n        borderColor: '#AAAAAA'\n      };\n      this.styleOptions_tooltip = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '13px',\n        color: '#4c4c4c'\n      };\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n    }\n    // SOME COMMON FUNCTIONS\n    addMonthOnCategories(categoryArray) {\n      let newMonth;\n      let newCategories = [];\n      categoryArray.forEach(element => {\n        let type = typeof element;\n        let category;\n        if (type == 'object') {\n          element = element[0];\n        }\n        newMonth = element.split('-');\n        category = `${constants.monthsArray[+newMonth[1]]}-${+newMonth[0] - 2000}`;\n        newCategories.push(category);\n      });\n      return newCategories;\n    }\n    insightSubscriberUsageOptions(data) {\n      let categories = this.addMonthOnCategories(data.categories);\n      let streamingOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedColumnInlineColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          crosshair: true,\n          categories: categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions)\n          })\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          labels: {\n            formatter: function () {\n              return this.value.toFixed(0) >= 1000 ? this.value.toFixed(0) / 1000 + 'K' : this.value.toFixed(0);\n            },\n            style: Object.assign({}, this.styleOptions)\n          },\n          title: {\n            text: '',\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          },\n          stackLabels: {\n            enabled: true,\n            formatter: function () {\n              return Highcharts.numberFormat(this.total, 1, '.', ',') + ' GB';\n            },\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            allowPointSelect: false,\n            maxPointWidth: 24,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            }\n          }),\n          column: {\n            borderWidth: 0,\n            minPointLength: 3\n          }\n        },\n        tooltip: {\n          valueDecimals: 2,\n          crosshairs: true,\n          headerFormat: '{point.key}<br>',\n          // pointFormat: '<span style=\"color:{series.color};padding:0\">‚óè </span>' +\n          //     '<span style=\"padding:0\">{series.name}: <b>{point.y} GB</b></span> <br>',\n          pointFormat: `<span style=\"color:{point.color}\"> </span>{series.name}:<b> {point.y} GB </b> <br>`,\n          shared: true,\n          // useHTML: true,\n          style: Object.assign({}, this.styleOptions)\n        },\n        series: data.series,\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(streamingOptions);\n    }\n    WIFIOptions(result) {\n      let percentage = this.marketingExploreCommonService.arraysObjectsPercentageCalculator;\n      let WIFIOptions = {\n        colors: this.pieChartColurs,\n        chart: {\n          type: 'pie',\n          style: Object.assign({}, this.styleOptions)\n        },\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        accessibility: {\n          announceNewData: {\n            enabled: true\n          },\n          point: {\n            valueSuffix: '%'\n          }\n        },\n        plotOptions: {\n          series: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            },\n            dataLabels: {\n              enabled: true,\n              format: '{point.name}'\n            }\n          },\n          pie: {\n            size: '80%',\n            allowPointSelect: true,\n            cursor: 'pointer',\n            borderWidth: 0,\n            dataLabels: {\n              enabled: true,\n              format: '{point.name}',\n              //useHTML: true,\n              crop: false,\n              distance: 2,\n              overflow: \"visible\",\n              style: Object.assign({\n                width: '70px',\n                height: '100px'\n              }, this.styleOptions)\n            }\n          }\n        },\n        tooltip: {\n          opacity: '1',\n          formatter: function () {\n            let arrayofUsage = [];\n            result.forEach(el => {\n              arrayofUsage.push(+el.originalValue);\n            });\n            // let unscalled = true;\n            let scaleUnit = 'TB';\n            let usage = this.point.y;\n            usage = usage / 102.4 | 0;\n            // if (usage < 100) {\n            //     scaleUnit = 'GB';\n            //     unscalled = false;\n            // }\n            return ` Total Number of Devices <br/>\n                            <b>${result[this.point.x].name}: ${percentage(arrayofUsage, result[this.point.x].originalValue, 1)} % </b> <br/> \n                            <b> ${this.point.y}</b>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        legend: {\n          reversed: false,\n          align: 'center',\n          itemStyle: {\n            fontSize: '10px'\n          }\n        },\n        series: [{\n          // name: \"\",\n          colorByPoint: true,\n          data: result\n        }],\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      };\n      return of(WIFIOptions);\n    }\n    insightServiceLimitOptions(data) {\n      let categories = this.addMonthOnCategories(data.categories);\n      let serviceOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: ['#82BF1F', '#0279ff'],\n        xAxis: {\n          categories: categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions)\n          })\n        },\n        yAxis: {\n          min: 0,\n          allowDecimals: false,\n          softMax: 10,\n          title: {\n            text: '',\n            style: Object.assign({}, this.styleOptions)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: true,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            cursor: 'pointer',\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            },\n            enableMouseTracking: true\n          })\n        },\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name} <br/> \n                      <b>${this.x}: ${this.point.y} </b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions)\n        },\n        series: data.series.reverse(),\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(serviceOptions);\n    }\n    // WIFI TRENDS \n    insightWiFiTrendsOptions(data) {\n      console.log(\"dsgfdsg\", data);\n      let categories = this.addMonthOnCategories(data.categories);\n      let serviceOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: ['#82BF1F', '#0279ff'],\n        xAxis: {\n          categories: categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions)\n          })\n        },\n        yAxis: {\n          min: 0,\n          allowDecimals: false,\n          softMax: 10,\n          title: {\n            text: '',\n            style: Object.assign({}, this.styleOptions)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: true,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          line: {\n            marker: {\n              enabled: false\n            }\n          },\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            marker: {\n              enabled: false\n            },\n            point: {\n              events: {}\n            },\n            enableMouseTracking: true\n          }\n        },\n        tooltip: {\n          formatter: function () {\n            return `${this.series.name} <br/> \n                      <b>${this.x}: ${this.point.y} </b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions)\n        },\n        series: data.series.reverse(),\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(serviceOptions);\n    }\n    insightSubscriberCompetitorOptions(data) {\n      let categories = this.addMonthOnCategories(data.categories);\n      let subscriberCompetitorChartOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedColumnColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions)\n        },\n        xAxis: {\n          categories: categories,\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            style: Object.assign({}, this.styleOptions)\n          })\n        },\n        yAxis: {\n          allowDecimals: false,\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          },\n          min: 0,\n          softMax: 1,\n          title: {\n            text: '',\n            style: Object.assign({}, this.styleOptions)\n          },\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            formatter: function () {\n              return Highcharts.numberFormat(this.total, 1, '.', ',');\n            },\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        tooltip: {\n          crosshairs: true,\n          headerFormat: '<span>{point.key}</span><br>',\n          pointFormat: '<span style=\"color:{series.color};padding:0\"></span>' + '<span style=\"padding:0\">{series.name}: <b>{point.y} minutes</b></span><br>',\n          shared: true,\n          // useHTML: true,\n          style: Object.assign({}, this.styleOptions)\n        },\n        series: data.series,\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            allowPointSelect: false,\n            maxPointWidth: 24,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              },\n              select: Object.assign({}, this.selectOptions)\n            }\n          }),\n          column: {\n            borderWidth: 0,\n            minPointLength: 3\n          }\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        }\n      });\n      return of(subscriberCompetitorChartOptions);\n    }\n  }\n  MarketingInsightsChartServiceService.…µfac = function MarketingInsightsChartServiceService_Factory(t) {\n    return new (t || MarketingInsightsChartServiceService)(i0.…µ…µinject(i1.MarketingExploreCommonService), i0.…µ…µinject(i2.TranslateService));\n  };\n  MarketingInsightsChartServiceService.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: MarketingInsightsChartServiceService,\n    factory: MarketingInsightsChartServiceService.…µfac,\n    providedIn: 'root'\n  });\n  return MarketingInsightsChartServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}