{"ast":null,"code":"import inherits from 'inherits';\nimport BaseModeling from 'diagram-js/lib/features/modeling/Modeling';\nimport UpdateModdlePropertiesHandler from './cmd/UpdateModdlePropertiesHandler';\nimport UpdatePropertiesHandler from './cmd/UpdatePropertiesHandler';\nimport UpdateCanvasRootHandler from './cmd/UpdateCanvasRootHandler';\nimport AddLaneHandler from './cmd/AddLaneHandler';\nimport SplitLaneHandler from './cmd/SplitLaneHandler';\nimport ResizeLaneHandler from './cmd/ResizeLaneHandler';\nimport UpdateFlowNodeRefsHandler from './cmd/UpdateFlowNodeRefsHandler';\nimport IdClaimHandler from './cmd/IdClaimHandler';\nimport SetColorHandler from './cmd/SetColorHandler';\nimport UpdateLabelHandler from '../label-editing/cmd/UpdateLabelHandler';\n\n/**\n * BPMN 2.0 modeling features activator\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n * @param {BpmnRules} bpmnRules\n */\nexport default function Modeling(eventBus, elementFactory, commandStack, bpmnRules) {\n  BaseModeling.call(this, eventBus, elementFactory, commandStack);\n  this._bpmnRules = bpmnRules;\n}\ninherits(Modeling, BaseModeling);\nModeling.$inject = ['eventBus', 'elementFactory', 'commandStack', 'bpmnRules'];\nModeling.prototype.getHandlers = function () {\n  var handlers = BaseModeling.prototype.getHandlers.call(this);\n  handlers['element.updateModdleProperties'] = UpdateModdlePropertiesHandler;\n  handlers['element.updateProperties'] = UpdatePropertiesHandler;\n  handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;\n  handlers['lane.add'] = AddLaneHandler;\n  handlers['lane.resize'] = ResizeLaneHandler;\n  handlers['lane.split'] = SplitLaneHandler;\n  handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;\n  handlers['id.updateClaim'] = IdClaimHandler;\n  handlers['element.setColor'] = SetColorHandler;\n  handlers['element.updateLabel'] = UpdateLabelHandler;\n  return handlers;\n};\nModeling.prototype.updateLabel = function (element, newLabel, newBounds, hints) {\n  this._commandStack.execute('element.updateLabel', {\n    element: element,\n    newLabel: newLabel,\n    newBounds: newBounds,\n    hints: hints || {}\n  });\n};\nModeling.prototype.connect = function (source, target, attrs, hints) {\n  var bpmnRules = this._bpmnRules;\n  if (!attrs) {\n    attrs = bpmnRules.canConnect(source, target);\n  }\n  if (!attrs) {\n    return;\n  }\n  return this.createConnection(source, target, attrs, source.parent, hints);\n};\nModeling.prototype.updateModdleProperties = function (element, moddleElement, properties) {\n  this._commandStack.execute('element.updateModdleProperties', {\n    element: element,\n    moddleElement: moddleElement,\n    properties: properties\n  });\n};\nModeling.prototype.updateProperties = function (element, properties) {\n  this._commandStack.execute('element.updateProperties', {\n    element: element,\n    properties: properties\n  });\n};\nModeling.prototype.resizeLane = function (laneShape, newBounds, balanced) {\n  this._commandStack.execute('lane.resize', {\n    shape: laneShape,\n    newBounds: newBounds,\n    balanced: balanced\n  });\n};\nModeling.prototype.addLane = function (targetLaneShape, location) {\n  var context = {\n    shape: targetLaneShape,\n    location: location\n  };\n  this._commandStack.execute('lane.add', context);\n  return context.newLane;\n};\nModeling.prototype.splitLane = function (targetLane, count) {\n  this._commandStack.execute('lane.split', {\n    shape: targetLane,\n    count: count\n  });\n};\n\n/**\n * Transform the current diagram into a collaboration.\n *\n * @return {djs.model.Root} the new root element\n */\nModeling.prototype.makeCollaboration = function () {\n  var collaborationElement = this._create('root', {\n    type: 'bpmn:Collaboration'\n  });\n  var context = {\n    newRoot: collaborationElement\n  };\n  this._commandStack.execute('canvas.updateRoot', context);\n  return collaborationElement;\n};\nModeling.prototype.updateLaneRefs = function (flowNodeShapes, laneShapes) {\n  this._commandStack.execute('lane.updateRefs', {\n    flowNodeShapes: flowNodeShapes,\n    laneShapes: laneShapes\n  });\n};\n\n/**\n * Transform the current diagram into a process.\n *\n * @return {djs.model.Root} the new root element\n */\nModeling.prototype.makeProcess = function () {\n  var processElement = this._create('root', {\n    type: 'bpmn:Process'\n  });\n  var context = {\n    newRoot: processElement\n  };\n  this._commandStack.execute('canvas.updateRoot', context);\n};\nModeling.prototype.claimId = function (id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement,\n    claiming: true\n  });\n};\nModeling.prototype.unclaimId = function (id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement\n  });\n};\nModeling.prototype.setColor = function (elements, colors) {\n  if (!elements.length) {\n    elements = [elements];\n  }\n  this._commandStack.execute('element.setColor', {\n    elements: elements,\n    colors: colors\n  });\n};","map":null,"metadata":{},"sourceType":"module"}