{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory'),\n  cmdHelper = require('../../../../helper/CmdHelper'),\n  utils = require('../../../../Utils');\nvar eventDefinitionReference = require('./EventDefinitionReference'),\n  elementReferenceProperty = require('./ElementReferenceProperty');\nmodule.exports = function (group, element, bpmnFactory, escalationEventDefinition, showEscalationCodeVariable, translate) {\n  group.entries = group.entries.concat(eventDefinitionReference(element, escalationEventDefinition, bpmnFactory, {\n    label: translate('Global Escalation referenced'),\n    elementName: 'escalation',\n    elementType: 'bpmn:Escalation',\n    referenceProperty: 'escalationRef',\n    newElementIdPrefix: 'Escalation_'\n  }));\n  group.entries = group.entries.concat(elementReferenceProperty(element, escalationEventDefinition, bpmnFactory, translate, {\n    id: 'escalation-element-name',\n    label: translate('Global Escalation Name'),\n    referenceProperty: 'escalationRef',\n    modelProperty: 'name',\n    shouldValidate: true\n  }));\n  group.entries = group.entries.concat(elementReferenceProperty(element, escalationEventDefinition, bpmnFactory, translate, {\n    id: 'escalation-element-code',\n    label: translate('Global Escalation Code'),\n    referenceProperty: 'escalationRef',\n    modelProperty: 'escalationCode'\n  }));\n  if (showEscalationCodeVariable) {\n    group.entries.push(entryFactory.validationAwareTextField(translate, {\n      id: 'escalationCodeVariable',\n      label: translate('Escalation Code Variable'),\n      modelProperty: 'escalationCodeVariable',\n      description: translate('Define the name of the variable that will contain the escalation code'),\n      getProperty: function (element) {\n        var codeVariable = escalationEventDefinition.get('camunda:escalationCodeVariable');\n        return codeVariable;\n      },\n      setProperty: function (element, values) {\n        if (values.escalationCodeVariable === '') values.escalationCodeVariable = undefined;\n        return cmdHelper.updateBusinessObject(element, escalationEventDefinition, values);\n      },\n      validate: function (element, values) {\n        var validation = {},\n          targetValue = values.escalationCodeVariable;\n        if (utils.containsSpace(targetValue)) {\n          validation.escalationCodeVariable = translate('Escalation code variable must not contain spaces.');\n        }\n        return validation;\n      }\n    }));\n  }\n};","map":null,"metadata":{},"sourceType":"script"}