{"ast":null,"code":"import { environment } from \"../../../../../environments/environment\";\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let ManagementService = /*#__PURE__*/(() => {\n  class ManagementService {\n    constructor(http, Sso) {\n      this.http = http;\n      this.Sso = Sso;\n      this.deviceModels = {};\n      this.selectedDeviceHis = {};\n    }\n    addSubscriber(orgId, request) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${environment.SUPPORT_URL}/subscriber?${ID}`, request);\n    }\n    editSubscriber(orgId, subscriberId, request) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/subscriber/${subscriberId}?${ID}`, request);\n    }\n    deleteSubscriber(orgId, subscriberId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.delete(`${environment.SUPPORT_URL}/subscriber/${subscriberId}?${ID}`);\n    }\n    deleteDevice(orgId, subscriberId, deviceId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.delete(`${environment.SUPPORT_URL}/subscriber/${subscriberId}/devices/${deviceId}?${ID}`);\n    }\n    updateDevice(orgId, subscriberId, deviceList) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/subscriber/${subscriberId}/devices?${ID}deviceList=${deviceList}`, \"\");\n    }\n    addDevice(request) {\n      return this.http.post(`${environment.SUPPORT_URL}/subscriber-provisioning/provisioning-record`, request);\n    }\n    updateDeviceBySubscriber(request) {\n      return this.http.post(`${environment.SUPPORT_URL}/subscriber-provisioning/provisioning-record`, request);\n    }\n    getDeviceInfo(orgId, deviceId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-provisioning/provisioning-record?${ID}deviceId=${deviceId}`);\n    }\n    GetDiscoveredDevices_static(orgId, memberInfo) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/static-group-member?${ID}memberInfo=${memberInfo}`);\n    }\n    getDialPlanList(orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-dp/dial-plan?${ID}`);\n    }\n    deleteUnassociated(orgId, serialNumber) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.delete(`${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}systemId=${serialNumber}`);\n    }\n    replaceDevice(orgId, subscriberId, oldDeviceId, newDeviceId, params) {\n      const ID = this.Sso.getOrg(orgId);\n      let url = '';\n      let query = \"\";\n      for (var key in params) {\n        if (params[key]) {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n      }\n      if (query) {\n        return this.http.put(`${environment.SUPPORT_URL}/subscriber/${subscriberId}/devices/${oldDeviceId}?${query}`, {});\n      } else {\n        return this.http.put(`${environment.SUPPORT_URL}/subscriber/${subscriberId}/devices/${oldDeviceId}?${ID}newDeviceId=${newDeviceId}`, {});\n      }\n    }\n    unassociateAndDelete(orgId, serialNumber, subId, deviceId, params) {\n      const ID = this.Sso.getOrg(orgId);\n      let url = '';\n      let query = \"\";\n      for (var key in params) {\n        if (params[key]) {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n      }\n      if (query) {\n        url = `${environment.SUPPORT_URL}/device/delete?${query}`;\n      } else if (deviceId) {\n        url = `${environment.SUPPORT_URL}/device/delete?${ID}deviceId=${deviceId}&subscriberId=${subId}`;\n      } else {\n        url = `${environment.SUPPORT_URL}/device/delete?${ID}serialNumber=${serialNumber}&subscriberId=${subId}`;\n      }\n      return this.http.delete(url);\n    }\n    getStaticGroupMembers(orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/static-group-member?${ID}`);\n    }\n    unassoDeleteFounApi(orgId, systemId, deleteCIQorSMB) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.delete(`${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}systemId=${systemId}${deleteCIQorSMB ? '&deleteCiqUser=true' : ''}`);\n    }\n    setDiscoveredDeviceInfo(info) {\n      this.discoveredDeviceInfo = info || {};\n    }\n    getDiscoveredDeviceInfo() {\n      return this.discoveredDeviceInfo || {};\n    }\n    getedgesuiteData(orgId, subscriberId, iqEnabled) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}systemId=${subscriberId}`);\n    }\n    setDeviceModels(org, models) {\n      this.deviceModels[org] = models ? models : [];\n    }\n    getDeviceModels(org) {\n      return this.deviceModels[org] ? this.deviceModels[org] : [];\n    }\n    callRestApi(endpoint, filters) {\n      return this.http.get(`${endpoint}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    getSubscriberServices(subId) {\n      return this.http.get(`${environment.FOUNDATION_SERVICES_URL}subscribers/${subId}/services`);\n    }\n    setSelectedDeviceInfo(historyData) {\n      sessionStorage.setItem('selectedSubHistInfo', JSON.stringify(historyData.state));\n    }\n    getSelectedDeviceInfo() {\n      return sessionStorage.getItem('selectedSubHistInfo');\n    }\n  }\n  ManagementService.ɵfac = function ManagementService_Factory(t) {\n    return new (t || ManagementService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  ManagementService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ManagementService,\n    factory: ManagementService.ɵfac,\n    providedIn: 'root'\n  });\n  return ManagementService;\n})();","map":null,"metadata":{},"sourceType":"module"}