{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nimport * as i3 from \"@angular/router\";\nexport let LocationReportApiService = /*#__PURE__*/(() => {\n  class LocationReportApiService {\n    constructor(httpClient, sso, router) {\n      this.httpClient = httpClient;\n      this.sso = sso;\n      this.router = router;\n      this.orgId = this.sso.getOrganizationID(this.router.url);\n    }\n    makeIsoDate(value) {\n      let a = value.split('.');\n      let b = a[0].split(\":\");\n      b.pop();\n      return b.join(':') + ':00Z';\n    }\n    getAppTraffic(params) {\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      startDate = this.getISOStartOfDay(startDate);\n      endDate = this.getISOEndOfDay(endDate);\n      let granularity = this.getGranularity(startDate, endDate);\n      startDate = this.getStartUTCDate(params.startDate, 0);\n      endDate = this.getEndUTCDate(params.endDate);\n      let url = `${environment.CCO_REPORTS_BASE_URL}/timeseries?org=${this.orgId}&tenant=0&granularity=1hour&startTime=${startDate}&endTime=${endDate}&output=rate&direction=both&count=${params['limit']}&groupBy=application`;\n      let locationParams = '';\n      if (params['locationsSelected'] && !params['locationsSelected'].includes(\"All\")) {\n        params['locationsSelected'].forEach(element => {\n          locationParams += `&location=` + element;\n        });\n        url = `${url}${locationParams}`;\n      } else {\n        locationParams += '';\n      }\n      let eliminateUnknown = '';\n      if (params['type'] && params['type'] === 'location') {\n        eliminateUnknown = '&eliminateUnknown=location';\n        url = `${url}${eliminateUnknown}`;\n      }\n      return this.httpClient.get(url);\n    }\n    getMonthlyUsageByApp(params) {\n      let date = this.getMonthlyUsageDates();\n      let startDate = date.startDate;\n      let endDate = date.endDate;\n      let url = `${environment.CCO_REPORTS_BASE_URL}/reports/monthlyusagebyapplication?org=${this.orgId}&startTime=${startDate}&endTime=${endDate}&count=5&direction=${params.directionSelected}`;\n      let locationParams = '';\n      if (params['locationsSelected'] && !params['locationsSelected'].includes(\"All\")) {\n        params['locationsSelected'].forEach(element => {\n          locationParams += `&location=` + element;\n        });\n        url = `${url}${locationParams}`;\n      } else {\n        locationParams += '';\n      }\n      let eliminateUnknown = '';\n      if (params['type'] && params['type'] === 'location') {\n        eliminateUnknown = '&eliminateUnknown=location';\n        url = `${url}${eliminateUnknown}`;\n      }\n      return this.httpClient.get(url);\n    }\n    getSubDistributions(params) {\n      let firstDay = new Date(params.monthSelected).toISOString();\n      let lastDay = this.getEndOfMonth(params.monthSelected).toISOString();\n      let granularity = '1month';\n      let same = this.checkSameDate(params);\n      let startDate = new Date(firstDay);\n      let endDate = new Date(lastDay);\n      if (same) {\n        startDate = this.getISOStartEndDate(startDate);\n        endDate = this.getISOStartEndDate(endDate, true);\n      } else {\n        startDate = this.getISOStartEndDate(startDate, false);\n        endDate = this.getISOStartEndDate(endDate, true);\n      }\n      let url = `${environment.CCO_REPORTS_BASE_URL}/reports/subscriberdistribution?org=${this.orgId}&tenant=0&granularity=${granularity}&startTime=${startDate}&endTime=${endDate}&direction=${params['directionSelected']}&intervals=<5G,5G-20G,20G-40G,40G-50G,50G-100G,100-250G,>250G&aggregate=${params['aggregateSelected']}`;\n      let locationParams = '';\n      if (params['locationsSelected'] && !params['locationsSelected'].includes(\"All\")) {\n        params['locationsSelected'].forEach(element => {\n          locationParams += `&location=` + element;\n        });\n        url = `${url}${locationParams}`;\n      } else {\n        locationParams += '';\n      }\n      return this.httpClient.get(url);\n    }\n    getMonthlyUsageByService(params) {\n      let granularity = '1month';\n      let date = this.getMonthlyUsageDates();\n      let startDate = date.startDate;\n      let endDate = date.endDate;\n      let locationParams = '';\n      if (params['locationsSelected'] && !params['locationsSelected'].includes(\"All\")) {\n        params['locationsSelected'].forEach(element => {\n          locationParams += `&location=${element}`;\n        });\n      }\n      //  locationParams = '&location=33034a5f-e3ed-4970-9575-5dbeaf5cdf39'\n      let url = `${environment.CCO_REPORTS_BASE_URL}timeseries?org=${this.orgId}&tenant=0&granularity=${granularity}&startTime=${startDate}&endTime=${endDate}&output=usage&direction=${params.directionSelected}&groupApplications=true&groupBy=application${locationParams}`;\n      let eliminateUnknown = '';\n      if (params['type'] && params['type'] === 'location') {\n        eliminateUnknown = '&eliminateUnknown=location';\n        url = `${url}${eliminateUnknown}`;\n      }\n      return this.httpClient.get(url);\n    }\n    getTraffic(params, module) {\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      let criteria = params.criteriaSelected ? params.criteriaSelected : 'usage';\n      startDate = this.getISOStartOfDay(startDate);\n      endDate = this.getISOEndOfDay(endDate);\n      let granularity = this.getGranularity(startDate, endDate, \"traffic\", criteria);\n      startDate = this.getStartUTCDate(params.startDate, 0);\n      endDate = this.getEndUTCDate(params.endDate);\n      if (criteria != 'usage') {\n        params.startTime = params.startTime - 1;\n        params.endTime = params.endTime - 1;\n        let diff = moment(endDate).diff(moment(startDate), \"hour\");\n        let dayDiff = moment(endDate).diff(moment(startDate), \"days\");\n        granularity = dayDiff <= 31 ? '1hour' : '24hour';\n        if (diff <= 72 && dayDiff <= 3) {\n          let d = new Date(params.startDate);\n          startDate = this.getStartUTCDate(params.startDate, params.startTime);\n          endDate = this.getStartUTCDate(d, params.endTime);\n          granularity = '1min';\n          params.APIStartDate = startDate;\n          params.APIendDate = endDate;\n        }\n      } else if (criteria == 'usage') {\n        startDate = this.getISOStartOfDay(params.startDate);\n        endDate = this.getISOEndOfDay(params.endDate);\n      }\n      let locationParams = '';\n      if (params['locationsSelected'] && !params['locationsSelected'].includes(\"All\")) {\n        params['locationsSelected'].forEach(element => {\n          locationParams += `&location=${element}`;\n        });\n      }\n      let eliminateUnknown = '';\n      if (params['type'] && params['type'] === 'location') {\n        eliminateUnknown = '&eliminateUnknown=location';\n      }\n      let url = `${environment.CCO_REPORTS_BASE_URL}timeseries?org=${this.orgId}&tenant=0&granularity=${granularity}&startTime=${startDate}&endTime=${endDate}&output=${criteria}&direction=both${locationParams}${eliminateUnknown}`;\n      if (module && module == 'applications') {\n        let appParams = '';\n        if (params['applicationsSelected'] && !params['applicationsSelected'].includes(\"All\")) {\n          params['applicationsSelected'].forEach(element => {\n            appParams += `&application=${element}`;\n          });\n          url = `${url}${appParams}`;\n        }\n      }\n      return this.httpClient.get(url);\n    }\n    TopApplication(params, page) {\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      let criteria = params.criteriaSelected ? params.criteriaSelected : 'usage';\n      let limit = params.limit ? params.limit : 10;\n      let direction = params.directionSelected ? params.directionSelected : 'both';\n      let group = params.groupSelected == 'yes' ? true : false;\n      startDate = this.getISOStartOfDay(startDate);\n      endDate = this.getISOEndOfDay(endDate);\n      let granularity = this.getGranularity(startDate, endDate, 'topApplications');\n      if (criteria !== 'usage') {\n        startDate = this.getStartUTCDate(params.startDate, 0);\n        endDate = this.getEndUTCDate(params.endDate);\n      }\n      let url = `${environment.CCO_REPORTS_BASE_URL}/reports/topapplications?org=${this.orgId}&tenant=0&granularity=${granularity}&startTime=${startDate}&endTime=${endDate}&output=${criteria}&count=${limit}&direction=${direction}&groupApplications=${group}`;\n      let eliminateUnknown = '';\n      if (params['type'] && params['type'] === 'location') {\n        eliminateUnknown = '&eliminateUnknown=location';\n        url = `${url}${eliminateUnknown}`;\n      }\n      let locationParams = '';\n      if (params['locationsSelected'] && !params['locationsSelected'].includes(\"All\")) {\n        params['locationsSelected'].forEach(element => {\n          locationParams += `&location=` + element;\n        });\n        url = `${url}${locationParams}`;\n      }\n      return this.httpClient.get(url);\n    }\n    getData(url) {\n      return this.httpClient.get(url);\n    }\n    makeIsoDateZero(value) {\n      let a = value.split('.');\n      let b = a[0].split(\"T\");\n      b.pop();\n      return b.join(':') + 'T00:00:00Z';\n    }\n    getMaxDailyRate(params) {\n      let locationParams = '';\n      if (params['locationsSelected'] && !params['locationsSelected'].includes(\"All\")) {\n        params['locationsSelected'].forEach(element => {\n          locationParams += `&location=${element}`;\n        });\n      }\n      let startDate = this.getISODate(params.startDate);\n      let endDate = new Date(params.startDate);\n      endDate.setHours(endDate.getHours() + 24);\n      endDate = this.getISODate(endDate);\n      let granularity = '24hour';\n      let url = `${environment.CCO_REPORTS_BASE_URL}reports/maxrate?org=${this.orgId}&tenant=0&granularity=${granularity}&startTime=${startDate}&endTime=${endDate}${locationParams}`;\n      if (params['eliminateUnknownSelected'] == 'yes') {\n        url = `${url}&eliminateUnknown=subscriber`;\n      }\n      let eliminateUnknown = '';\n      if (params['type'] && params['type'] === 'location') {\n        eliminateUnknown = '&eliminateUnknown=location';\n        url = `${url}${eliminateUnknown}`;\n      }\n      return this.httpClient.get(url);\n    }\n    getISODate(dt) {\n      let d = new Date(dt);\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let date = `${year}-${month}-${day}T00:00:00Z`;\n      return date;\n    }\n    getGranularity(startDate, endDate, reportType = '', criteriaType = '') {\n      let granularity = '';\n      if (reportType == 'traffic') {\n        let diff = moment(endDate).diff(moment(startDate), \"hour\");\n        let dayDiff = moment(endDate).diff(moment(startDate), \"days\");\n        if (criteriaType != 'usage') {\n          granularity = diff <= 72 && dayDiff <= 3 ? '1min' : dayDiff <= 31 && diff > 72 ? '1hour' : '24hour';\n        } else {\n          granularity = diff <= 24 ? '1hour' : '24hour';\n        }\n      }\n      if (reportType == 'topSubscribers' || reportType == 'topApplications' || reportType == 'topLocations') {\n        let diff = moment(endDate).diff(moment(startDate), \"hour\");\n        granularity = diff <= 72 ? '1hour' : '24hour';\n      }\n      return granularity;\n    }\n    checkSameDate(params) {\n      let date1 = new Date(params.startDate).setHours(0, 0, 0, 0);\n      let date2 = new Date(params.endDate).setHours(0, 0, 0, 0);\n      if (date1 == date2) {\n        return true;\n      }\n      return false;\n    }\n    getISOStartEndDate(dt, end, addHours) {\n      let d = new Date(dt);\n      let today = new Date();\n      if (!end) {\n        //let hrsToAdd = addHours ? addHours : 0;\n        let hrsToAdd = 0;\n        d.setHours(0 + hrsToAdd, 0, 0, 0);\n      } else {\n        d.setHours(23, 59, 0, 0);\n      }\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (end) {\n        let selectedDate = new Date(d);\n        if (selectedDate > today) {\n          hr = `${new Date().getUTCHours()}`;\n          min = `${new Date().getUTCMinutes()}`;\n        }\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getISOLocalStartEndDate(dt, end, addHours) {\n      let d = new Date(dt);\n      let today = new Date();\n      if (!end) {\n        //let hrsToAdd = addHours ? addHours : 0;\n        let hrsToAdd = 0;\n        d.setHours(0 + hrsToAdd, 0, 0, 0);\n      } else {\n        d.setHours(23, 59, 0, 0);\n      }\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      let hr = `${d.getHours()}`;\n      let min = `${d.getMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (end) {\n        let selectedDate = new Date(d);\n        if (selectedDate > today) {\n          hr = `${new Date().getHours()}`;\n          min = `${new Date().getMinutes()}`;\n        }\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getStartOfMonth(dat) {\n      let date = new Date(dat);\n      let firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n      return firstDay;\n    }\n    getEndOfMonth(dat) {\n      let date = new Date(dat);\n      //let firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n      let lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n      return lastDay;\n    }\n    getISOStartOfDay(dt) {\n      //returns 12AM UTC of day\n      let d = new Date(dt);\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let date = `${year}-${month}-${day}T00:00:00Z`;\n      return date;\n    }\n    getISOEndOfDay(dt) {\n      //returns 12AM UTC of Next day of End date\n      let d = new Date(dt);\n      d.setDate(new Date(d).getDate() + 1);\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let date = `${year}-${month}-${day}T00:00:00Z`;\n      return date;\n    }\n    getStartDate(dt, hour, diff) {\n      let d = new Date(dt);\n      if (diff === 3 && hour < 48 && hour >= 24) {\n        d.setDate(new Date(d).getDate() + 1);\n      } else if (diff === 3 && hour >= 48) {\n        d.setDate(new Date(d).getDate() + 2);\n      }\n      if (diff === 2 && hour >= 24) {\n        d.setDate(new Date(d).getDate() + 1);\n      }\n      if (hour >= 48) {\n        hour = hour - 48;\n      } else if (hour >= 24) {\n        hour = hour - 24;\n      }\n      let year = `${d.getFullYear()}`;\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let hr = hour > 9 ? hour : '0' + hour;\n      let date = `${year}-${month}-${day}T${hr}:00:00Z`;\n      return date;\n    }\n    getEndDate(dt, hour, diff) {\n      let d = new Date(dt);\n      if (diff == 3 && hour <= 48 && hour > 24) {\n        d.setDate(new Date(d).getDate() - 1);\n      } else if (diff == 3 && hour <= 24) {\n        d.setDate(new Date(d).getDate() - 2);\n      }\n      if (diff == 2 && hour <= 24) {\n        d.setDate(new Date(d).getDate() - 1);\n      }\n      if (hour === 24 || hour === 48 || hour === 72) {\n        d.setDate(new Date(d).getDate() + 1);\n        hour = 0;\n      }\n      if (hour >= 48) {\n        hour = hour - 48;\n      } else if (hour >= 24) {\n        hour = hour - 24;\n      }\n      let year = `${d.getFullYear()}`;\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let hr = hour > 9 ? hour : '0' + hour;\n      let date = `${year}-${month}-${day}T${hr}:00:00Z`;\n      return date;\n    }\n    getStartUTCDate(dt, addHours) {\n      let d = new Date(dt);\n      d.setHours(addHours, 0, 0, 0);\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getEndUTCDate(dt) {\n      let d = new Date(dt);\n      d.setHours(0, 0, 0, 0);\n      d.setDate(new Date(d).getDate() + 1);\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getMonthlyUsageDates() {\n      let date = new Date();\n      let firstDay = new Date(date.getFullYear() - 1, date.getMonth(), 1);\n      let lastDay = new Date(date.getFullYear(), date.getMonth(), 0);\n      let startDate = new Date(firstDay);\n      let endDate = new Date(lastDay);\n      startDate = this.getISOStartOfDay(startDate);\n      endDate = this.getISOEndOfDay(endDate);\n      return {\n        startDate,\n        endDate\n      };\n    }\n  }\n  LocationReportApiService.ɵfac = function LocationReportApiService_Factory(t) {\n    return new (t || LocationReportApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService), i0.ɵɵinject(i3.Router));\n  };\n  LocationReportApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationReportApiService,\n    factory: LocationReportApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocationReportApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}