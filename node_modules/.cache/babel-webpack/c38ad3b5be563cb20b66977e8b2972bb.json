{"ast":null,"code":"import { getBusinessObject } from 'bpmn-js/lib/util/ModelUtil';\nimport inherits from 'inherits';\nimport { is } from 'bpmn-js/lib/util/ModelUtil';\nimport { getCalledElement, isPropagateAllChildVariables } from '../../../helper/CalledElementHelper';\nimport { getInputParameters, getOutputParameters, getInputOutput } from '../../../helper/InputOutputHelper';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nconst HIGH_PRIORITY = 15000;\n\n/**\n * UpdatePropagateAllChildVariablesBehavior reacts to either (1) toggling on propagateAllChildVariables\n * when there are outputParameters present or (2) to adding outputParameters when\n * propagateAllChildVariables is set to true.\n * It will ensure that the propagateAllChildVariables attribute on calledElement\n * extensionElements for callActivities is always consistent with outputParameter mappings\n */\nexport default function UpdatePropagateAllChildVariablesBehavior(eventBus) {\n  CommandInterceptor.call(this, eventBus);\n\n  // Behavior when toggling propagateAllChildVariables /////////////////////////\n  /**\n   * remove outputParameters from zeebe:IoMapping when setting propgateAlLChildVariables\n   * to true in the proeprties panel\n   */\n  this.executed('properties-panel.update-businessobject', HIGH_PRIORITY, function (context) {\n    const {\n      element,\n      properties\n    } = context;\n\n    // (1) Don't execute this behavior if we are not in a call activity or not\n    // have properties to update or not update the propagateAllChildVariables\n    // to false\n    if (!is(element, 'bpmn:CallActivity') || !properties || !!properties.propagateAllChildVariables === false) {\n      return;\n    }\n\n    // (2) Check whether we have outputParameters\n    const outputParameters = getOutputParameters(element),\n      inputParameters = getInputParameters(element);\n    if (!outputParameters || outputParameters.length === 0) {\n      return;\n    }\n\n    // (3) Store old outputParameters and remove them\n    context.oldOutputParameters = outputParameters;\n    const inputOutput = getInputOutput(element);\n    inputOutput.outputParameters = [];\n\n    // (4) if we also have no inputParameters, store IOMapping and remove it\n    if (!inputParameters || inputParameters.length === 0) {\n      const extensionElements = getBusinessObject(element).extensionElements;\n      context.oldExtensionElements = extensionElements.values;\n      extensionElements.values = extensionElements.values.filter(ele => ele.$type !== 'zeebe:IoMapping');\n    }\n  }, true);\n\n  // Revert behavior when toggling propagateAllChildVariables //////////////////\n  this.reverted('properties-panel.update-businessobject', HIGH_PRIORITY, function (context) {\n    const {\n      element,\n      oldOutputParameters,\n      oldExtensionElements\n    } = context;\n\n    // (1) Only intercept the revert, if the behavior became active\n    if (oldOutputParameters) {\n      // (2) If we removed the IOMapping, bring it back first\n      if (oldExtensionElements) {\n        const extensionElements = getBusinessObject(element).extensionElements;\n        extensionElements.values = oldExtensionElements;\n      }\n\n      // (3) Bring back the outputParameters\n      const inputOutput = getInputOutput(element);\n      inputOutput.outputParameters = oldOutputParameters;\n    }\n  }, true);\n\n  // Behavior when adding outputParameters ////////////////////////////////////\n  /**\n   * un-toggle propgateAlLChildVariables when adding output parameters\n   */\n  this.executed('properties-panel.update-businessobject-list', HIGH_PRIORITY, function (context) {\n    const {\n      element,\n      objectsToAdd\n    } = context;\n\n    // (1) Exit if we are not in a CallActivity, not adding an OutputParameter or not\n    // having set propagateAllChildVariables to false\n    if (!is(element, 'bpmn:CallActivity') || !objectsToAdd || objectsToAdd.length === 0 || objectsToAdd.filter(obj => is(obj, 'zeebe:Output')).length === 0 || isPropagateAllChildVariables(element) === false) {\n      return;\n    }\n\n    // (2) Store the old propAllChildVariables value and update it then\n    const bo = getBusinessObject(element),\n      calledElement = getCalledElement(bo);\n    context.oldPropagateAllChildVariables = true;\n    calledElement.propagateAllChildVariables = false;\n  }, true);\n\n  // Revert behavior when adding outputParmaeters ////////////////////////////////////\n  this.reverted('properties-panel.update-businessobject-list', HIGH_PRIORITY, function (context) {\n    const {\n      element,\n      oldPropagateAllChildVariables\n    } = context;\n\n    // (1) Only intercept the revert, if the behavior became active\n    if (oldPropagateAllChildVariables) {\n      const bo = getBusinessObject(element),\n        calledElement = getCalledElement(bo);\n      calledElement.propagateAllChildVariables = oldPropagateAllChildVariables;\n    }\n  }, true);\n}\nUpdatePropagateAllChildVariablesBehavior.$inject = ['eventBus'];\ninherits(UpdatePropagateAllChildVariablesBehavior, CommandInterceptor);","map":null,"metadata":{},"sourceType":"module"}