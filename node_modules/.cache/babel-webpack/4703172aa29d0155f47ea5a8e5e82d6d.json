{"ast":null,"code":"import { values } from 'min-dash';\nimport { getEnclosedElements } from '../../util/Elements';\nimport { hasSecondaryModifier } from '../../util/Mouse';\nimport { append as svgAppend, attr as svgAttr, create as svgCreate, remove as svgRemove } from 'tiny-svg';\nvar LASSO_TOOL_CURSOR = 'crosshair';\nexport default function LassoTool(eventBus, canvas, dragging, elementRegistry, selection, toolManager, mouse) {\n  this._selection = selection;\n  this._dragging = dragging;\n  this._mouse = mouse;\n  var self = this;\n\n  // lasso visuals implementation\n\n  /**\n  * A helper that realizes the selection box visual\n  */\n  var visuals = {\n    create: function (context) {\n      var container = canvas.getDefaultLayer(),\n        frame;\n      frame = context.frame = svgCreate('rect');\n      svgAttr(frame, {\n        class: 'djs-lasso-overlay',\n        width: 1,\n        height: 1,\n        x: 0,\n        y: 0\n      });\n      svgAppend(container, frame);\n    },\n    update: function (context) {\n      var frame = context.frame,\n        bbox = context.bbox;\n      svgAttr(frame, {\n        x: bbox.x,\n        y: bbox.y,\n        width: bbox.width,\n        height: bbox.height\n      });\n    },\n    remove: function (context) {\n      if (context.frame) {\n        svgRemove(context.frame);\n      }\n    }\n  };\n  toolManager.registerTool('lasso', {\n    tool: 'lasso.selection',\n    dragging: 'lasso'\n  });\n  eventBus.on('lasso.selection.end', function (event) {\n    var target = event.originalEvent.target;\n\n    // only reactive on diagram click\n    // on some occasions, event.hover is not set and we have to check if the target is an svg\n    if (!event.hover && !(target instanceof SVGElement)) {\n      return;\n    }\n    eventBus.once('lasso.selection.ended', function () {\n      self.activateLasso(event.originalEvent, true);\n    });\n  });\n\n  // lasso interaction implementation\n\n  eventBus.on('lasso.end', function (event) {\n    var bbox = toBBox(event);\n    var elements = elementRegistry.filter(function (element) {\n      return element;\n    });\n    self.select(elements, bbox);\n  });\n  eventBus.on('lasso.start', function (event) {\n    var context = event.context;\n    context.bbox = toBBox(event);\n    visuals.create(context);\n  });\n  eventBus.on('lasso.move', function (event) {\n    var context = event.context;\n    context.bbox = toBBox(event);\n    visuals.update(context);\n  });\n  eventBus.on('lasso.cleanup', function (event) {\n    var context = event.context;\n    visuals.remove(context);\n  });\n\n  // event integration\n\n  eventBus.on('element.mousedown', 1500, function (event) {\n    if (!hasSecondaryModifier(event)) {\n      return;\n    }\n    self.activateLasso(event.originalEvent);\n\n    // we've handled the event\n    return true;\n  });\n}\nLassoTool.$inject = ['eventBus', 'canvas', 'dragging', 'elementRegistry', 'selection', 'toolManager', 'mouse'];\nLassoTool.prototype.activateLasso = function (event, autoActivate) {\n  this._dragging.init(event, 'lasso', {\n    autoActivate: autoActivate,\n    cursor: LASSO_TOOL_CURSOR,\n    data: {\n      context: {}\n    }\n  });\n};\nLassoTool.prototype.activateSelection = function (event, autoActivate) {\n  this._dragging.init(event, 'lasso.selection', {\n    trapClick: false,\n    autoActivate: autoActivate,\n    cursor: LASSO_TOOL_CURSOR,\n    data: {\n      context: {}\n    }\n  });\n};\nLassoTool.prototype.select = function (elements, bbox) {\n  var selectedElements = getEnclosedElements(elements, bbox);\n  this._selection.select(values(selectedElements));\n};\nLassoTool.prototype.toggle = function () {\n  if (this.isActive()) {\n    return this._dragging.cancel();\n  }\n  var mouseEvent = this._mouse.getLastMoveEvent();\n  this.activateSelection(mouseEvent, !!mouseEvent);\n};\nLassoTool.prototype.isActive = function () {\n  var context = this._dragging.context();\n  return context && /^lasso/.test(context.prefix);\n};\nfunction toBBox(event) {\n  var start = {\n    x: event.x - event.dx,\n    y: event.y - event.dy\n  };\n  var end = {\n    x: event.x,\n    y: event.y\n  };\n  var bbox;\n  if (start.x <= end.x && start.y < end.y || start.x < end.x && start.y <= end.y) {\n    bbox = {\n      x: start.x,\n      y: start.y,\n      width: end.x - start.x,\n      height: end.y - start.y\n    };\n  } else if (start.x >= end.x && start.y < end.y || start.x > end.x && start.y <= end.y) {\n    bbox = {\n      x: end.x,\n      y: start.y,\n      width: start.x - end.x,\n      height: end.y - start.y\n    };\n  } else if (start.x <= end.x && start.y > end.y || start.x < end.x && start.y >= end.y) {\n    bbox = {\n      x: start.x,\n      y: end.y,\n      width: end.x - start.x,\n      height: start.y - end.y\n    };\n  } else if (start.x >= end.x && start.y > end.y || start.x > end.x && start.y >= end.y) {\n    bbox = {\n      x: end.x,\n      y: end.y,\n      width: start.x - end.x,\n      height: start.y - end.y\n    };\n  } else {\n    bbox = {\n      x: end.x,\n      y: end.y,\n      width: 0,\n      height: 0\n    };\n  }\n  return bbox;\n}","map":null,"metadata":{},"sourceType":"module"}