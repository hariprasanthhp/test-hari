{"ast":null,"code":"import { append as svgAppend, attr as svgAttr, create as svgCreate, remove as svgRemove } from 'tiny-svg';\nimport { getBusinessObject, is } from '../../util/ModelUtil';\nimport { translate } from 'diagram-js/lib/util/SvgTransformUtil';\nvar MARKER_HIDDEN = 'djs-element-hidden',\n  MARKER_LABEL_HIDDEN = 'djs-label-hidden';\nexport default function LabelEditingPreview(eventBus, canvas, elementRegistry, pathMap) {\n  var self = this;\n  var defaultLayer = canvas.getDefaultLayer();\n  var element, absoluteElementBBox, gfx;\n  eventBus.on('directEditing.activate', function (context) {\n    var activeProvider = context.active;\n    element = activeProvider.element.label || activeProvider.element;\n\n    // text annotation\n    if (is(element, 'bpmn:TextAnnotation')) {\n      absoluteElementBBox = canvas.getAbsoluteBBox(element);\n      gfx = svgCreate('g');\n      var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {\n        xScaleFactor: 1,\n        yScaleFactor: 1,\n        containerWidth: element.width,\n        containerHeight: element.height,\n        position: {\n          mx: 0.0,\n          my: 0.0\n        }\n      });\n      var path = self.path = svgCreate('path');\n      svgAttr(path, {\n        d: textPathData,\n        strokeWidth: 2,\n        stroke: getStrokeColor(element)\n      });\n      svgAppend(gfx, path);\n      svgAppend(defaultLayer, gfx);\n      translate(gfx, element.x, element.y);\n    }\n    if (is(element, 'bpmn:TextAnnotation') || element.labelTarget) {\n      canvas.addMarker(element, MARKER_HIDDEN);\n    } else if (is(element, 'bpmn:Task') || is(element, 'bpmn:CallActivity') || is(element, 'bpmn:SubProcess') || is(element, 'bpmn:Participant')) {\n      canvas.addMarker(element, MARKER_LABEL_HIDDEN);\n    }\n  });\n  eventBus.on('directEditing.resize', function (context) {\n    // text annotation\n    if (is(element, 'bpmn:TextAnnotation')) {\n      var height = context.height,\n        dy = context.dy;\n      var newElementHeight = Math.max(element.height / absoluteElementBBox.height * (height + dy), 0);\n      var textPathData = pathMap.getScaledPath('TEXT_ANNOTATION', {\n        xScaleFactor: 1,\n        yScaleFactor: 1,\n        containerWidth: element.width,\n        containerHeight: newElementHeight,\n        position: {\n          mx: 0.0,\n          my: 0.0\n        }\n      });\n      svgAttr(self.path, {\n        d: textPathData\n      });\n    }\n  });\n  eventBus.on(['directEditing.complete', 'directEditing.cancel'], function (context) {\n    var activeProvider = context.active;\n    if (activeProvider) {\n      canvas.removeMarker(activeProvider.element.label || activeProvider.element, MARKER_HIDDEN);\n      canvas.removeMarker(element, MARKER_LABEL_HIDDEN);\n    }\n    element = undefined;\n    absoluteElementBBox = undefined;\n    if (gfx) {\n      svgRemove(gfx);\n      gfx = undefined;\n    }\n  });\n}\nLabelEditingPreview.$inject = ['eventBus', 'canvas', 'elementRegistry', 'pathMap'];\n\n// helpers ///////////////////\n\nfunction getStrokeColor(element, defaultColor) {\n  var bo = getBusinessObject(element);\n  return bo.di.get('stroke') || defaultColor || 'black';\n}","map":null,"metadata":{},"sourceType":"module"}