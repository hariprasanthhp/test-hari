{"ast":null,"code":"import { getBusinessObject, is } from '../../util/ModelUtil';\nimport { isEventSubProcess, isExpanded } from '../../util/DiUtil';\nimport { isDifferentType } from './util/TypeUtil';\nimport { forEach, filter } from 'min-dash';\nimport * as replaceOptions from '../replace/ReplaceOptions';\n\n/**\n * This module is an element agnostic replace menu provider for the popup menu.\n */\nexport default function ReplaceMenuProvider(bpmnFactory, popupMenu, modeling, moddle, bpmnReplace, rules, translate) {\n  this._bpmnFactory = bpmnFactory;\n  this._popupMenu = popupMenu;\n  this._modeling = modeling;\n  this._moddle = moddle;\n  this._bpmnReplace = bpmnReplace;\n  this._rules = rules;\n  this._translate = translate;\n  this.register();\n}\nReplaceMenuProvider.$inject = ['bpmnFactory', 'popupMenu', 'modeling', 'moddle', 'bpmnReplace', 'rules', 'translate'];\n\n/**\n * Register replace menu provider in the popup menu\n */\nReplaceMenuProvider.prototype.register = function () {\n  this._popupMenu.registerProvider('bpmn-replace', this);\n};\n\n/**\n * Get all entries from replaceOptions for the given element and apply filters\n * on them. Get for example only elements, which are different from the current one.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\nReplaceMenuProvider.prototype.getEntries = function (element) {\n  var businessObject = element.businessObject;\n  var rules = this._rules;\n  var entries;\n  if (!rules.allowed('shape.replace', {\n    element: element\n  })) {\n    return [];\n  }\n  var differentType = isDifferentType(element);\n  if (is(businessObject, 'bpmn:DataObjectReference')) {\n    return this._createEntries(element, replaceOptions.DATA_OBJECT_REFERENCE);\n  }\n  if (is(businessObject, 'bpmn:DataStoreReference')) {\n    return this._createEntries(element, replaceOptions.DATA_STORE_REFERENCE);\n  }\n\n  // start events outside sub processes\n  if (is(businessObject, 'bpmn:StartEvent') && !is(businessObject.$parent, 'bpmn:SubProcess')) {\n    entries = filter(replaceOptions.START_EVENT, differentType);\n    return this._createEntries(element, entries);\n  }\n\n  // expanded/collapsed pools\n  if (is(businessObject, 'bpmn:Participant')) {\n    entries = filter(replaceOptions.PARTICIPANT, function (entry) {\n      return isExpanded(businessObject) !== entry.target.isExpanded;\n    });\n    return this._createEntries(element, entries);\n  }\n\n  // start events inside event sub processes\n  if (is(businessObject, 'bpmn:StartEvent') && isEventSubProcess(businessObject.$parent)) {\n    entries = filter(replaceOptions.EVENT_SUB_PROCESS_START_EVENT, function (entry) {\n      var target = entry.target;\n      var isInterrupting = target.isInterrupting !== false;\n      var isInterruptingEqual = getBusinessObject(element).isInterrupting === isInterrupting;\n\n      // filters elements which types and event definition are equal but have have different interrupting types\n      return differentType(entry) || !differentType(entry) && !isInterruptingEqual;\n    });\n    return this._createEntries(element, entries);\n  }\n\n  // start events inside sub processes\n  if (is(businessObject, 'bpmn:StartEvent') && !isEventSubProcess(businessObject.$parent) && is(businessObject.$parent, 'bpmn:SubProcess')) {\n    entries = filter(replaceOptions.START_EVENT_SUB_PROCESS, differentType);\n    return this._createEntries(element, entries);\n  }\n\n  // end events\n  if (is(businessObject, 'bpmn:EndEvent')) {\n    entries = filter(replaceOptions.END_EVENT, function (entry) {\n      var target = entry.target;\n\n      // hide cancel end events outside transactions\n      if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' && !is(businessObject.$parent, 'bpmn:Transaction')) {\n        return false;\n      }\n      return differentType(entry);\n    });\n    return this._createEntries(element, entries);\n  }\n\n  // boundary events\n  if (is(businessObject, 'bpmn:BoundaryEvent')) {\n    entries = filter(replaceOptions.BOUNDARY_EVENT, function (entry) {\n      var target = entry.target;\n      if (target.eventDefinitionType == 'bpmn:CancelEventDefinition' && !is(businessObject.attachedToRef, 'bpmn:Transaction')) {\n        return false;\n      }\n      var cancelActivity = target.cancelActivity !== false;\n      var isCancelActivityEqual = businessObject.cancelActivity == cancelActivity;\n      return differentType(entry) || !differentType(entry) && !isCancelActivityEqual;\n    });\n    return this._createEntries(element, entries);\n  }\n\n  // intermediate events\n  if (is(businessObject, 'bpmn:IntermediateCatchEvent') || is(businessObject, 'bpmn:IntermediateThrowEvent')) {\n    entries = filter(replaceOptions.INTERMEDIATE_EVENT, differentType);\n    return this._createEntries(element, entries);\n  }\n\n  // gateways\n  if (is(businessObject, 'bpmn:Gateway')) {\n    entries = filter(replaceOptions.GATEWAY, differentType);\n    return this._createEntries(element, entries);\n  }\n\n  // transactions\n  if (is(businessObject, 'bpmn:Transaction')) {\n    entries = filter(replaceOptions.TRANSACTION, differentType);\n    return this._createEntries(element, entries);\n  }\n\n  // expanded event sub processes\n  if (isEventSubProcess(businessObject) && isExpanded(businessObject)) {\n    entries = filter(replaceOptions.EVENT_SUB_PROCESS, differentType);\n    return this._createEntries(element, entries);\n  }\n\n  // expanded sub processes\n  if (is(businessObject, 'bpmn:SubProcess') && isExpanded(businessObject)) {\n    entries = filter(replaceOptions.SUBPROCESS_EXPANDED, differentType);\n    return this._createEntries(element, entries);\n  }\n\n  // collapsed ad hoc sub processes\n  if (is(businessObject, 'bpmn:AdHocSubProcess') && !isExpanded(businessObject)) {\n    entries = filter(replaceOptions.TASK, function (entry) {\n      var target = entry.target;\n      var isTargetSubProcess = target.type === 'bpmn:SubProcess';\n      var isTargetExpanded = target.isExpanded === true;\n      return isDifferentType(element, target) && (!isTargetSubProcess || isTargetExpanded);\n    });\n    return this._createEntries(element, entries);\n  }\n\n  // sequence flows\n  if (is(businessObject, 'bpmn:SequenceFlow')) {\n    return this._createSequenceFlowEntries(element, replaceOptions.SEQUENCE_FLOW);\n  }\n\n  // flow nodes\n  if (is(businessObject, 'bpmn:FlowNode')) {\n    entries = filter(replaceOptions.TASK, differentType);\n\n    // collapsed SubProcess can not be replaced with itself\n    if (is(businessObject, 'bpmn:SubProcess') && !isExpanded(businessObject)) {\n      entries = filter(entries, function (entry) {\n        return entry.label !== 'Sub Process (collapsed)';\n      });\n    }\n    return this._createEntries(element, entries);\n  }\n  return [];\n};\n\n/**\n * Get a list of header items for the given element. This includes buttons\n * for multi instance markers and for the ad hoc marker.\n *\n * @param {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu entry items\n */\nReplaceMenuProvider.prototype.getHeaderEntries = function (element) {\n  var headerEntries = [];\n  if (is(element, 'bpmn:Activity') && !isEventSubProcess(element)) {\n    headerEntries = headerEntries.concat(this._getLoopEntries(element));\n  }\n  if (is(element, 'bpmn:DataObjectReference')) {\n    headerEntries = headerEntries.concat(this._getDataObjectIsCollection(element));\n  }\n  if (is(element, 'bpmn:Participant')) {\n    headerEntries = headerEntries.concat(this._getParticipantMultiplicity(element));\n  }\n  if (is(element, 'bpmn:SubProcess') && !is(element, 'bpmn:Transaction') && !isEventSubProcess(element)) {\n    headerEntries.push(this._getAdHocEntry(element));\n  }\n  return headerEntries;\n};\n\n/**\n * Creates an array of menu entry objects for a given element and filters the replaceOptions\n * according to a filter function.\n *\n * @param  {djs.model.Base} element\n * @param  {Object} replaceOptions\n *\n * @return {Array<Object>} a list of menu items\n */\nReplaceMenuProvider.prototype._createEntries = function (element, replaceOptions) {\n  var menuEntries = [];\n  var self = this;\n  forEach(replaceOptions, function (definition) {\n    var entry = self._createMenuEntry(definition, element);\n    menuEntries.push(entry);\n  });\n  return menuEntries;\n};\n\n/**\n * Creates an array of menu entry objects for a given sequence flow.\n *\n * @param  {djs.model.Base} element\n * @param  {Object} replaceOptions\n\n * @return {Array<Object>} a list of menu items\n */\nReplaceMenuProvider.prototype._createSequenceFlowEntries = function (element, replaceOptions) {\n  var businessObject = getBusinessObject(element);\n  var menuEntries = [];\n  var modeling = this._modeling,\n    moddle = this._moddle;\n  var self = this;\n  forEach(replaceOptions, function (entry) {\n    switch (entry.actionName) {\n      case 'replace-with-default-flow':\n        if (businessObject.sourceRef.default !== businessObject && (is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') || is(businessObject.sourceRef, 'bpmn:InclusiveGateway') || is(businessObject.sourceRef, 'bpmn:ComplexGateway') || is(businessObject.sourceRef, 'bpmn:Activity'))) {\n          menuEntries.push(self._createMenuEntry(entry, element, function () {\n            modeling.updateProperties(element.source, {\n              default: businessObject\n            });\n          }));\n        }\n        break;\n      case 'replace-with-conditional-flow':\n        if (!businessObject.conditionExpression && is(businessObject.sourceRef, 'bpmn:Activity')) {\n          menuEntries.push(self._createMenuEntry(entry, element, function () {\n            var conditionExpression = moddle.create('bpmn:FormalExpression', {\n              body: ''\n            });\n            modeling.updateProperties(element, {\n              conditionExpression: conditionExpression\n            });\n          }));\n        }\n        break;\n      default:\n        // default flows\n        if (is(businessObject.sourceRef, 'bpmn:Activity') && businessObject.conditionExpression) {\n          return menuEntries.push(self._createMenuEntry(entry, element, function () {\n            modeling.updateProperties(element, {\n              conditionExpression: undefined\n            });\n          }));\n        }\n\n        // conditional flows\n        if ((is(businessObject.sourceRef, 'bpmn:ExclusiveGateway') || is(businessObject.sourceRef, 'bpmn:InclusiveGateway') || is(businessObject.sourceRef, 'bpmn:ComplexGateway') || is(businessObject.sourceRef, 'bpmn:Activity')) && businessObject.sourceRef.default === businessObject) {\n          return menuEntries.push(self._createMenuEntry(entry, element, function () {\n            modeling.updateProperties(element.source, {\n              default: undefined\n            });\n          }));\n        }\n    }\n  });\n  return menuEntries;\n};\n\n/**\n * Creates and returns a single menu entry item.\n *\n * @param  {Object} definition a single replace options definition object\n * @param  {djs.model.Base} element\n * @param  {Function} [action] an action callback function which gets called when\n *                             the menu entry is being triggered.\n *\n * @return {Object} menu entry item\n */\nReplaceMenuProvider.prototype._createMenuEntry = function (definition, element, action) {\n  var translate = this._translate;\n  var replaceElement = this._bpmnReplace.replaceElement;\n  var replaceAction = function () {\n    return replaceElement(element, definition.target);\n  };\n  var label = definition.label;\n  if (label && typeof label === 'function') {\n    label = label(element);\n  }\n  action = action || replaceAction;\n  var menuEntry = {\n    label: translate(label),\n    className: definition.className,\n    id: definition.actionName,\n    action: action\n  };\n  return menuEntry;\n};\n\n/**\n * Get a list of menu items containing buttons for multi instance markers\n *\n * @param  {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu items\n */\nReplaceMenuProvider.prototype._getLoopEntries = function (element) {\n  var self = this;\n  var translate = this._translate;\n  function toggleLoopEntry(event, entry) {\n    var loopCharacteristics;\n    if (entry.active) {\n      loopCharacteristics = undefined;\n    } else {\n      loopCharacteristics = self._moddle.create(entry.options.loopCharacteristics);\n      if (entry.options.isSequential) {\n        loopCharacteristics.isSequential = entry.options.isSequential;\n      }\n    }\n    self._modeling.updateProperties(element, {\n      loopCharacteristics: loopCharacteristics\n    });\n  }\n  var businessObject = getBusinessObject(element),\n    loopCharacteristics = businessObject.loopCharacteristics;\n  var isSequential, isLoop, isParallel;\n  if (loopCharacteristics) {\n    isSequential = loopCharacteristics.isSequential;\n    isLoop = loopCharacteristics.isSequential === undefined;\n    isParallel = loopCharacteristics.isSequential !== undefined && !loopCharacteristics.isSequential;\n  }\n  var loopEntries = [{\n    id: 'toggle-parallel-mi',\n    className: 'bpmn-icon-parallel-mi-marker',\n    title: translate('Parallel Multi Instance'),\n    active: isParallel,\n    action: toggleLoopEntry,\n    options: {\n      loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',\n      isSequential: false\n    }\n  }, {\n    id: 'toggle-sequential-mi',\n    className: 'bpmn-icon-sequential-mi-marker',\n    title: translate('Sequential Multi Instance'),\n    active: isSequential,\n    action: toggleLoopEntry,\n    options: {\n      loopCharacteristics: 'bpmn:MultiInstanceLoopCharacteristics',\n      isSequential: true\n    }\n  }, {\n    id: 'toggle-loop',\n    className: 'bpmn-icon-loop-marker',\n    title: translate('Loop'),\n    active: isLoop,\n    action: toggleLoopEntry,\n    options: {\n      loopCharacteristics: 'bpmn:StandardLoopCharacteristics'\n    }\n  }];\n  return loopEntries;\n};\n\n/**\n * Get a list of menu items containing a button for the collection marker\n *\n * @param  {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu items\n */\nReplaceMenuProvider.prototype._getDataObjectIsCollection = function (element) {\n  var self = this;\n  var translate = this._translate;\n  function toggleIsCollection(event, entry) {\n    self._modeling.updateModdleProperties(element, dataObject, {\n      isCollection: !entry.active\n    });\n  }\n  var dataObject = element.businessObject.dataObjectRef,\n    isCollection = dataObject.isCollection;\n  var dataObjectEntries = [{\n    id: 'toggle-is-collection',\n    className: 'bpmn-icon-parallel-mi-marker',\n    title: translate('Collection'),\n    active: isCollection,\n    action: toggleIsCollection\n  }];\n  return dataObjectEntries;\n};\n\n/**\n * Get a list of menu items containing a button for the participant multiplicity marker\n *\n * @param  {djs.model.Base} element\n *\n * @return {Array<Object>} a list of menu items\n */\nReplaceMenuProvider.prototype._getParticipantMultiplicity = function (element) {\n  var self = this;\n  var bpmnFactory = this._bpmnFactory;\n  var translate = this._translate;\n  function toggleParticipantMultiplicity(event, entry) {\n    var isActive = entry.active;\n    var participantMultiplicity;\n    if (!isActive) {\n      participantMultiplicity = bpmnFactory.create('bpmn:ParticipantMultiplicity');\n    }\n    self._modeling.updateProperties(element, {\n      participantMultiplicity: participantMultiplicity\n    });\n  }\n  var participantMultiplicity = element.businessObject.participantMultiplicity;\n  var participantEntries = [{\n    id: 'toggle-participant-multiplicity',\n    className: 'bpmn-icon-parallel-mi-marker',\n    title: translate('Participant Multiplicity'),\n    active: !!participantMultiplicity,\n    action: toggleParticipantMultiplicity\n  }];\n  return participantEntries;\n};\n\n/**\n * Get the menu items containing a button for the ad hoc marker\n *\n * @param  {djs.model.Base} element\n *\n * @return {Object} a menu item\n */\nReplaceMenuProvider.prototype._getAdHocEntry = function (element) {\n  var translate = this._translate;\n  var businessObject = getBusinessObject(element);\n  var isAdHoc = is(businessObject, 'bpmn:AdHocSubProcess');\n  var replaceElement = this._bpmnReplace.replaceElement;\n  var adHocEntry = {\n    id: 'toggle-adhoc',\n    className: 'bpmn-icon-ad-hoc-marker',\n    title: translate('Ad-hoc'),\n    active: isAdHoc,\n    action: function (event, entry) {\n      if (isAdHoc) {\n        return replaceElement(element, {\n          type: 'bpmn:SubProcess'\n        }, {\n          autoResize: false,\n          layoutConnection: false\n        });\n      } else {\n        return replaceElement(element, {\n          type: 'bpmn:AdHocSubProcess'\n        }, {\n          autoResize: false,\n          layoutConnection: false\n        });\n      }\n    }\n  };\n  return adHocEntry;\n};","map":null,"metadata":{},"sourceType":"module"}