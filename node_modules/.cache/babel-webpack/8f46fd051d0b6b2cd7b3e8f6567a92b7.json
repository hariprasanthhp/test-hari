{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let ConvertorService = /*#__PURE__*/(() => {\n  class ConvertorService {\n    constructor() {}\n    bytes(bytes, label, isFirst) {\n      var s = ['b', 'KB', 'MB', 'GB', 'TB', 'PB'],\n        tempLabel = [],\n        count;\n      var e, value;\n      if (bytes == 0) return 0;\n      if (isFirst) count = 0;\n      e = Math.floor(Math.log(bytes) / Math.log(1024));\n      value = (bytes / Math.pow(1024, Math.floor(e))).toFixed(2);\n      tempLabel[count] = value;\n      if (count > 0 && Math.abs(tempLabel[count - 1] - tempLabel[count]) < 0.0001) value = (bytes / Math.pow(1024, Math.floor(--e))).toFixed(2);\n      e = e < 0 ? -e : e;\n      if (label) value += ' ' + s[e];\n      count++;\n      return value;\n    }\n    bits(bytes, label, isFirst) {\n      var s = ['bps', 'Kbps', 'Mbps', 'Gbps', 'Tbps', 'Pbps'],\n        tempLabel = [],\n        count;\n      var e, value;\n      if (bytes == 0) return 0;\n      if (isFirst) count = 0;\n      e = Math.floor(Math.log(bytes) / Math.log(1024));\n      value = (bytes / Math.pow(1024, Math.floor(e))).toFixed(2);\n      tempLabel[count] = value;\n      if (count > 0 && Math.abs(tempLabel[count - 1] - tempLabel[count]) < 0.0001) value = (bytes / Math.pow(1024, Math.floor(--e))).toFixed(2);\n      e = e < 0 ? -e : e;\n      if (label) value += ' ' + s[e];\n      count++;\n      return value;\n    }\n    getStackedUnit(m) {\n      let unit;\n      if (m > 1099511627776) {\n        unit = [1099511627776, 'TB'];\n      } else if (m > 1073741824) {\n        unit = [1073741824, 'GB'];\n      } else if (m > 1048576) {\n        unit = [1048576, 'MB'];\n      } else if (m > 1024) {\n        unit = [1024, 'KB'];\n      } else {\n        unit = [1, 'KB'];\n      }\n      return unit;\n    }\n    getStackedUnitUpdate(m) {\n      let unit;\n      if (m > 1099511627776) {\n        unit = [1099511627776, 'T'];\n      } else if (m > 1073741824) {\n        unit = [1073741824, 'G'];\n      } else if (m > 1048576) {\n        unit = [1048576, 'M'];\n      } else if (m > 1024) {\n        unit = [1024, 'K'];\n      } else {\n        unit = [1, ''];\n      }\n      return unit;\n    }\n    kbpsTO(m, valueOnly, UnitOnly) {\n      let unit;\n      let units = [];\n      m = parseInt(m);\n      if (m > 1000000000) {\n        unit = (m / 1000000000).toFixed(2) + 'T';\n        units = [(m / 1000000000).toFixed(2), 'T'];\n      } else if (m > 1000000) {\n        unit = (m / 1000000).toFixed(2) + 'G';\n        units = [(m / 1000000).toFixed(2), 'G'];\n      } else if (m > 1000) {\n        unit = (m / 1000).toFixed(2) + 'M';\n        units = [(m / 1000).toFixed(2), 'M'];\n      } else {\n        unit = m + 'K';\n        units = [m, 'K'];\n      }\n      if (valueOnly) {\n        return units[0];\n      } else if (UnitOnly) {\n        return units[1];\n      }\n      return unit;\n    }\n    getByteInfo(pointValue, bps) {\n      let unit;\n      if (bps) {\n        unit = this.getStackedUnitUpdate(pointValue);\n      } else {\n        unit = this.getStackedUnit(pointValue);\n      }\n      let displayValue = (pointValue / unit[0]).toFixed(2);\n      return (displayValue == '0.00' ? '0' : displayValue) + ' ' + unit[1];\n    }\n  }\n  ConvertorService.ɵfac = function ConvertorService_Factory(t) {\n    return new (t || ConvertorService)();\n  };\n  ConvertorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConvertorService,\n    factory: ConvertorService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConvertorService;\n})();","map":null,"metadata":{},"sourceType":"module"}