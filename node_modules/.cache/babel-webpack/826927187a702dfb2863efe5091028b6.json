{"ast":null,"code":"import { event as domEvent, closest as domClosest } from 'min-dom';\nimport { getStepSize, cap } from './ZoomUtil';\nimport { log10 } from '../../util/Math';\nimport { bind } from 'min-dash';\nvar sign = Math.sign || function (n) {\n  return n >= 0 ? 1 : -1;\n};\nvar RANGE = {\n    min: 0.2,\n    max: 4\n  },\n  NUM_STEPS = 10;\nvar DELTA_THRESHOLD = 0.1;\nvar DEFAULT_SCALE = 0.75;\n\n/**\n * An implementation of zooming and scrolling within the\n * {@link Canvas} via the mouse wheel.\n *\n * Mouse wheel zooming / scrolling may be disabled using\n * the {@link toggle(enabled)} method.\n *\n * @param {Object} [config]\n * @param {boolean} [config.enabled=true] default enabled state\n * @param {number} [config.scale=.75] scroll sensivity\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n */\nexport default function ZoomScroll(config, eventBus, canvas) {\n  config = config || {};\n  this._enabled = false;\n  this._canvas = canvas;\n  this._container = canvas._container;\n  this._handleWheel = bind(this._handleWheel, this);\n  this._totalDelta = 0;\n  this._scale = config.scale || DEFAULT_SCALE;\n  var self = this;\n  eventBus.on('canvas.init', function (e) {\n    self._init(config.enabled !== false);\n  });\n}\nZoomScroll.$inject = ['config.zoomScroll', 'eventBus', 'canvas'];\nZoomScroll.prototype.scroll = function scroll(delta) {\n  this._canvas.scroll(delta);\n};\nZoomScroll.prototype.reset = function reset() {\n  this._canvas.zoom('fit-viewport');\n};\n\n/**\n * Zoom depending on delta.\n *\n * @param {number} delta\n * @param {Object} position\n */\nZoomScroll.prototype.zoom = function zoom(delta, position) {\n  // zoom with half the step size of stepZoom\n  var stepSize = getStepSize(RANGE, NUM_STEPS * 2);\n\n  // add until threshold reached\n  this._totalDelta += delta;\n  if (Math.abs(this._totalDelta) > DELTA_THRESHOLD) {\n    this._zoom(delta, position, stepSize);\n\n    // reset\n    this._totalDelta = 0;\n  }\n};\nZoomScroll.prototype._handleWheel = function handleWheel(event) {\n  // event is already handled by '.djs-scrollable'\n  if (domClosest(event.target, '.djs-scrollable', true)) {\n    return;\n  }\n  var element = this._container;\n  event.preventDefault();\n\n  // pinch to zoom is mapped to wheel + ctrlKey = true\n  // in modern browsers (!)\n\n  var isZoom = event.ctrlKey;\n  var isHorizontalScroll = event.shiftKey;\n  var factor = -1 * this._scale,\n    delta;\n  if (isZoom) {\n    factor *= event.deltaMode === 0 ? 0.020 : 0.32;\n  } else {\n    factor *= event.deltaMode === 0 ? 1.0 : 16.0;\n  }\n  if (isZoom) {\n    var elementRect = element.getBoundingClientRect();\n    var offset = {\n      x: event.clientX - elementRect.left,\n      y: event.clientY - elementRect.top\n    };\n    delta = Math.sqrt(Math.pow(event.deltaY, 2) + Math.pow(event.deltaX, 2)) * sign(event.deltaY) * factor;\n\n    // zoom in relative to diagram {x,y} coordinates\n    this.zoom(delta, offset);\n  } else {\n    if (isHorizontalScroll) {\n      delta = {\n        dx: factor * event.deltaY,\n        dy: 0\n      };\n    } else {\n      delta = {\n        dx: factor * event.deltaX,\n        dy: factor * event.deltaY\n      };\n    }\n    this.scroll(delta);\n  }\n};\n\n/**\n * Zoom with fixed step size.\n *\n * @param {number} delta - Zoom delta (1 for zooming in, -1 for out).\n * @param {Object} position\n */\nZoomScroll.prototype.stepZoom = function stepZoom(delta, position) {\n  var stepSize = getStepSize(RANGE, NUM_STEPS);\n  this._zoom(delta, position, stepSize);\n};\n\n/**\n * Zoom in/out given a step size.\n *\n * @param {number} delta\n * @param {Object} position\n * @param {number} stepSize\n */\nZoomScroll.prototype._zoom = function (delta, position, stepSize) {\n  var canvas = this._canvas;\n  var direction = delta > 0 ? 1 : -1;\n  var currentLinearZoomLevel = log10(canvas.zoom());\n\n  // snap to a proximate zoom step\n  var newLinearZoomLevel = Math.round(currentLinearZoomLevel / stepSize) * stepSize;\n\n  // increase or decrease one zoom step in the given direction\n  newLinearZoomLevel += stepSize * direction;\n\n  // calculate the absolute logarithmic zoom level based on the linear zoom level\n  // (e.g. 2 for an absolute x2 zoom)\n  var newLogZoomLevel = Math.pow(10, newLinearZoomLevel);\n  canvas.zoom(cap(RANGE, newLogZoomLevel), position);\n};\n\n/**\n * Toggle the zoom scroll ability via mouse wheel.\n *\n * @param  {boolean} [newEnabled] new enabled state\n */\nZoomScroll.prototype.toggle = function toggle(newEnabled) {\n  var element = this._container;\n  var handleWheel = this._handleWheel;\n  var oldEnabled = this._enabled;\n  if (typeof newEnabled === 'undefined') {\n    newEnabled = !oldEnabled;\n  }\n\n  // only react on actual changes\n  if (oldEnabled !== newEnabled) {\n    // add or remove wheel listener based on\n    // changed enabled state\n    domEvent[newEnabled ? 'bind' : 'unbind'](element, 'wheel', handleWheel, false);\n  }\n  this._enabled = newEnabled;\n  return newEnabled;\n};\nZoomScroll.prototype._init = function (newEnabled) {\n  this.toggle(newEnabled);\n};","map":null,"metadata":{},"sourceType":"module"}