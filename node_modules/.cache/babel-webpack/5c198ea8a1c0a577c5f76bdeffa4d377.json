{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../marketing-explore-data/basic/shared/services/explore-data-common.service\";\nexport let HomeDataAssignerService = /*#__PURE__*/(() => {\n  class HomeDataAssignerService {\n    constructor(marketingExploreCommonService) {\n      this.marketingExploreCommonService = marketingExploreCommonService;\n    }\n    topAppData(data) {\n      let topapps = [];\n      for (const item of data) {\n        for (var key in item) {\n          topapps.push({\n            \"application\": key,\n            'application1': this.marketingExploreCommonService.gamingReplacer(key),\n            \"average\": item[key][0],\n            \"percentage\": (item[key][1] * 100).toFixed(1)\n          });\n        }\n      }\n      return topapps;\n    }\n    // ACQUISITION RATE INSIGHTS\n    aquisitionTrendsFormatData(results) {\n      let returnObject = {};\n      var categories = [];\n      var seriesObj = {};\n      var totalObj = {};\n      var total = 0;\n      var categoryFeatureTotal = [];\n      var categoryExistingTotal = [];\n      results.forEach(month => {\n        for (var key in month) {\n          if (month.hasOwnProperty(key)) {\n            var emptyCategory = false;\n            var monthlyNewTotal = 0;\n            var monthlyExistingTotal = 0;\n            if (typeof month[key] === 'object') {\n              month[key].forEach(wrapper => {\n                for (const key in wrapper) {\n                  if (wrapper.hasOwnProperty(key)) {\n                    let newSubsExistingSubs = wrapper[key];\n                    let tier = key;\n                    if (!seriesObj[tier]) {\n                      seriesObj[tier] = [];\n                    }\n                    seriesObj[tier].push(newSubsExistingSubs[0]);\n                    monthlyNewTotal += Number(newSubsExistingSubs[0]);\n                    total += Number(newSubsExistingSubs[0]);\n                    if (!totalObj[tier]) {\n                      totalObj[tier] = [];\n                    }\n                    totalObj[tier].push(newSubsExistingSubs[1]);\n                    monthlyExistingTotal += Number(newSubsExistingSubs[1]);\n                  }\n                }\n              });\n            }\n            categories.push(String(key));\n            categoryFeatureTotal.push(monthlyNewTotal);\n            categoryExistingTotal.push(monthlyExistingTotal);\n          }\n        }\n      });\n      let series = [];\n      for (const item in seriesObj) {\n        let value, key;\n        if (seriesObj.hasOwnProperty(item)) {\n          value = seriesObj[item];\n          key = item;\n        }\n        series.push({\n          name: key,\n          data: value\n        });\n      }\n      ;\n      returnObject[\"categories\"] = categories;\n      returnObject[\"categoryExistingTotal\"] = categoryExistingTotal;\n      returnObject[\"categoryFeatureTotal\"] = categoryFeatureTotal;\n      returnObject[\"series\"] = series;\n      returnObject['totalObj'] = totalObj;\n      returnObject['total'] = total;\n      return returnObject;\n    }\n    //CHurn TRENDS\n    // CHURN RATE INSIGHTS\n    churnTrendsDataFormatter(results) {\n      let returnObject = {};\n      var categories = [];\n      var seriesObj = {};\n      var totalObj = {};\n      var total = 0;\n      var categoryFeatureTotal = [];\n      var categoryExistingTotal = [];\n      results.forEach(month => {\n        for (var key in month) {\n          if (month.hasOwnProperty(key)) {\n            var emptyCategory = false;\n            var monthlyNewTotal = 0;\n            var monthlyExistingTotal = 0;\n            if (typeof month[key] === 'object') {\n              month[key].forEach(wrapper => {\n                for (const key in wrapper) {\n                  if (wrapper.hasOwnProperty(key)) {\n                    let newSubsExistingSubs = wrapper[key];\n                    let tier = key;\n                    if (!seriesObj[tier]) {\n                      seriesObj[tier] = [];\n                    }\n                    seriesObj[tier].push(newSubsExistingSubs[0]);\n                    monthlyNewTotal += Number(newSubsExistingSubs[0]);\n                    total += Number(newSubsExistingSubs[0]);\n                    if (!totalObj[tier]) {\n                      totalObj[tier] = [];\n                    }\n                    totalObj[tier].push(newSubsExistingSubs[1]);\n                    monthlyExistingTotal += Number(newSubsExistingSubs[1]);\n                  }\n                }\n              });\n            }\n            // if (!emptyCategory) {\n            categories.push(String(key));\n            categoryFeatureTotal.push(monthlyNewTotal);\n            categoryExistingTotal.push(monthlyExistingTotal);\n            // }\n          }\n        }\n      });\n\n      let series = [];\n      for (const item in seriesObj) {\n        let value, key;\n        if (seriesObj.hasOwnProperty(item)) {\n          value = seriesObj[item];\n          key = item;\n        }\n        series.push({\n          name: key,\n          data: value\n        });\n      }\n      ;\n      returnObject[\"categories\"] = categories;\n      returnObject[\"categoryFeatureTotal\"] = categoryFeatureTotal;\n      returnObject[\"series\"] = series;\n      returnObject['totalObj'] = totalObj;\n      returnObject['categoryExistingTotal'] = categoryExistingTotal;\n      returnObject['total'] = total;\n      return returnObject;\n    }\n  }\n  HomeDataAssignerService.ɵfac = function HomeDataAssignerService_Factory(t) {\n    return new (t || HomeDataAssignerService)(i0.ɵɵinject(i1.MarketingExploreCommonService));\n  };\n  HomeDataAssignerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HomeDataAssignerService,\n    factory: HomeDataAssignerService.ɵfac,\n    providedIn: 'root'\n  });\n  return HomeDataAssignerService;\n})();","map":null,"metadata":{},"sourceType":"module"}