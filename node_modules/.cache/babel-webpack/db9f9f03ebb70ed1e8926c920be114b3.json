{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/sso-auth.service\";\nimport * as i2 from \"src/app/cco/shared/services/websocket.service\";\nimport * as i3 from \"src/app-services/translate.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../stream-chart/stream-chart.component\";\nfunction PonportChartComponent_div_10_app_stream_chart_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-stream-chart\", 15);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"chartName\", ctx_r2.language.RATE)(\"yAxixTitle\", ctx_r2.rateUnit)(\"data\", ctx_r2.data.maxRate)(\"time\", ctx_r2.data.sendTime)(\"windowLen\", ctx_r2.windowLen)(\"selectedFilter\", ctx_r2.selectedTime)(\"history\", ctx_r2.cacheRateData);\n  }\n}\nfunction PonportChartComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵtemplate(2, PonportChartComponent_div_10_app_stream_chart_2_Template, 1, 7, \"app-stream-chart\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.data.maxRate && ctx_r0.showRealTime);\n  }\n}\nfunction PonportChartComponent_div_12_app_stream_chart_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-stream-chart\", 15);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"chartName\", ctx_r3.language.PACKET)(\"yAxixTitle\", ctx_r3.packetUnit)(\"data\", ctx_r3.data.packet)(\"time\", ctx_r3.data.sendTime)(\"windowLen\", ctx_r3.windowLen)(\"selectedFilter\", ctx_r3.selectedTime)(\"history\", ctx_r3.cachePacketData);\n  }\n}\nfunction PonportChartComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelementStart(1, \"div\", 17);\n    i0.ɵɵtemplate(2, PonportChartComponent_div_12_app_stream_chart_2_Template, 1, 7, \"app-stream-chart\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.data.packet && ctx_r1.showRealTime);\n  }\n}\nexport let PonportChartComponent = /*#__PURE__*/(() => {\n  class PonportChartComponent {\n    constructor(sso, webSocketService, translateService) {\n      this.sso = sso;\n      this.webSocketService = webSocketService;\n      this.translateService = translateService;\n      this.monitorId = \"\";\n      this.regionUuid = \"\";\n      this.locationUuid = \"\";\n      this.systemUuid = \"\";\n      this.valueChange = new EventEmitter();\n      this.showRealTime = true;\n      this.WSRequestObj = {\n        \"orgId\": \"\",\n        \"monitorType\": \"PORT\",\n        \"networkId\": \"\",\n        \"monitorId\": \"\",\n        \"graphType\": \"TRF\",\n        \"region\": \"\",\n        \"location\": \"\",\n        \"system\": \"\",\n        \"port\": \"\",\n        \"regionUuid\": \"\",\n        \"locationUuid\": \"\",\n        \"systemUuid\": \"\"\n      };\n      this.data = {\n        maxRate: [],\n        packet: []\n      };\n      this.rateUnit = 'bps';\n      this.packetUnit = 'pps';\n      this.cachePacketData = {};\n      this.cacheRateData = {};\n      this.eventname = \"\";\n    }\n    ngOnInit() {\n      this.calculateSubscriptiontime();\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n      this.orgId = this.sso.getOrgId();\n      this.orgid_tenantid = this.orgId + '_' + '0';\n      this.WSRequestObj.orgId = this.orgId;\n      this.WSRequestObj.monitorType = \"PORT\";\n      this.WSRequestObj.networkId = this.orgid_tenantid;\n      this.WSRequestObj.monitorId = this.monitorId;\n      this.WSRequestObj.region = this.region;\n      this.WSRequestObj.location = this.location;\n      this.WSRequestObj.system = this.system;\n      this.WSRequestObj.port = this.ponPorts;\n      this.WSRequestObj.regionUuid = this.regionUuid;\n      this.WSRequestObj.locationUuid = this.locationUuid;\n      this.WSRequestObj.systemUuid = this.systemUuid;\n      this.WSRequestObj['startTime'] = new Date().getTime();\n      if (this.replay) {\n        this.WSRequestObj['replay'] = \"true\";\n        this.WSRequestObj['startTime'] = this.startTime.toString();\n        this.WSRequestObj['endTime'] = new Date().getTime();\n        this.eventname = \"IPFIX_REPLAY_\" + this.monitorId;\n        this.webSocketService.listenPonPorts(this.eventname);\n      }\n      if (this.IsDuplicate) {\n        this.getRtData();\n      } else {\n        this.getRtData();\n        this.send(\"IPFIX_PORT\", this.WSRequestObj);\n        this.webSocketService.listenPonPorts(\"IPFIX_PORT\");\n      }\n      let obj = {\n        monitorId: this.monitorId,\n        region: this.region,\n        location: this.location,\n        system: this.system,\n        port: this.ponPorts,\n        windowLen: this.windowLen,\n        IsDuplicate: this.IsDuplicate,\n        Position: this.Position,\n        startTime: this.WSRequestObj['startTime'],\n        replay: true,\n        regionUuid: this.regionUuid,\n        locationUuid: this.locationUuid,\n        systemUuid: this.systemUuid\n      };\n      if (!this.replay) {\n        this.webSocketService.setPonportsInfo(obj);\n      }\n      let that = this;\n      document.addEventListener(\"visibilitychange\", function () {\n        if (!document.hidden) {\n          let ponPortList = that.webSocketService.getPonportsInfo();\n          let ponPort = ponPortList.filter(element => {\n            if (element.monitorId === that.monitorId) {\n              return element;\n            }\n          });\n          let params = {\n            \"orgId\": that.orgId,\n            \"monitorType\": 'PORT',\n            \"networkId\": that.orgid_tenantid,\n            \"monitorId\": ponPort[0].monitorId,\n            \"graphType\": \"TRF\",\n            \"replay\": \"true\",\n            \"port\": ponPort[0].monitorId,\n            \"region\": ponPort[0].region,\n            \"location\": ponPort[0].location,\n            \"system\": ponPort[0].system,\n            \"startTime\": ponPort[0].startTime,\n            \"endTime\": new Date().getTime(),\n            \"regionUuid\": ponPort[0].regionUuid,\n            \"locationUuid\": ponPort[0].locationUuid,\n            \"systemUuid\": ponPort[0].systemUuid\n          };\n          that.eventname = \"IPFIX_REPLAY_\" + ponPort[0].monitorId;\n          that.webSocketService.listenPonPorts(that.eventname);\n          that.send('IPFIX_PORT', params);\n        }\n      });\n      this.reConnectWebSocket();\n    }\n    ngOnChanges(changes) {\n      if (changes.selectedTime && changes.selectedTime.currentValue) {\n        this.selectedTime = changes.selectedTime.currentValue;\n      }\n    }\n    ngOnDestroy() {\n      if (this.streamSubscription) {\n        this.streamSubscription.unsubscribe();\n      }\n      if (this.languageSubject) {\n        this.languageSubject.unsubscribe();\n      }\n      if (this.cacheDataSubscription) {\n        this.cacheDataSubscription.unsubscribe();\n      }\n      if (this.interval) {\n        clearInterval(this.interval);\n        this.interval = null;\n      }\n      if (this.reConnectSubscription) {\n        this.reConnectSubscription.unsubscribe();\n      }\n    }\n    closeChart() {\n      let obj = {\n        \"monitorId\": this.monitorId,\n        \"Position\": this.Position,\n        \"region\": this.region,\n        \"location\": this.location\n      };\n      this.valueChange.emit(obj);\n    }\n    send(eventname, data) {\n      this.webSocketService.emitPonports(eventname, data);\n    }\n    getRtData() {\n      if (this.streamSubscription) {\n        this.streamSubscription.unsubscribe();\n      }\n      this.streamSubscription = this.webSocketService.ponPortsStreamData$.subscribe(data => {\n        this.showRealTime = true;\n        if (data.ifName === this.monitorId && data.region === this.region) {\n          this.lastSubscriptionTime = new Date().getTime();\n          this.data = data;\n        }\n      });\n      this.cacheDataSubscription = this.webSocketService.cachePonportData$.subscribe(data => {\n        if (data['monitorId'] === this.eventname) {\n          this.cachePacketData = data['packet'];\n          this.cacheRateData = data['rate'];\n        }\n      });\n    }\n    calculateSubscriptiontime() {\n      this.interval = setInterval(() => {\n        let diff = new Date().getTime() - this.lastSubscriptionTime;\n        if (diff >= 30000) {\n          this.data.maxRate = [0, 0];\n          this.data.packet = [0, 0];\n        }\n      }, 15000);\n    }\n    reConnectWebSocket() {\n      if (this.reConnectSubscription) {\n        this.reConnectSubscription.unsubscribe();\n      }\n      this.webSocketService.connectWS$.subscribe(res => {\n        if (res && this.webSocketService.WebSocketServer.hasDisconnectedOnce) {\n          this.webSocketService.listenPonPorts(\"IPFIX_PORT\");\n          this.send('IPFIX_PORT', this.WSRequestObj);\n          let ponPortList = this.webSocketService.getPonportsInfo();\n          console.log(ponPortList, \"ponPortList\");\n          let ponPort = ponPortList.filter(element => {\n            if (element.monitorId === this.monitorId) {\n              return element;\n            }\n          });\n          let params = {\n            \"orgId\": this.orgId,\n            \"monitorType\": 'PORT',\n            \"networkId\": this.orgid_tenantid,\n            \"monitorId\": ponPort[0].monitorId,\n            \"graphType\": \"TRF\",\n            \"replay\": \"true\",\n            \"port\": ponPort[0].monitorId,\n            \"region\": ponPort[0].region,\n            \"location\": ponPort[0].location,\n            \"system\": ponPort[0].system,\n            \"startTime\": ponPort[0].startTime,\n            \"endTime\": new Date().getTime(),\n            \"regionUuid\": ponPort[0].regionUuid,\n            \"locationUuid\": ponPort[0].locationUuid,\n            \"systemUuid\": ponPort[0].systemUuid\n          };\n          this.eventname = \"IPFIX_REPLAY_\" + ponPort[0].monitorId;\n          this.webSocketService.listenPonPorts(this.eventname);\n          this.send('IPFIX_PORT', params);\n        }\n      });\n    }\n  }\n  PonportChartComponent.ɵfac = function PonportChartComponent_Factory(t) {\n    return new (t || PonportChartComponent)(i0.ɵɵdirectiveInject(i1.SsoAuthService), i0.ɵɵdirectiveInject(i2.WebsocketService), i0.ɵɵdirectiveInject(i3.TranslateService));\n  };\n  PonportChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PonportChartComponent,\n    selectors: [[\"app-ponport-chart\"]],\n    inputs: {\n      monitorId: \"monitorId\",\n      windowLen: \"windowLen\",\n      selectedTime: \"selectedTime\",\n      IsDuplicate: \"IsDuplicate\",\n      Position: \"Position\",\n      location: \"location\",\n      region: \"region\",\n      system: \"system\",\n      ponPorts: \"ponPorts\",\n      startTime: \"startTime\",\n      replay: \"replay\",\n      regionUuid: \"regionUuid\",\n      locationUuid: \"locationUuid\",\n      systemUuid: \"systemUuid\"\n    },\n    outputs: {\n      valueChange: \"valueChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 13,\n    vars: 8,\n    consts: [[1, \"row\", \"mt-3\", 3, \"id\"], [1, \"col-md-12\", \"px-0\"], [1, \"mwc-header\", \"flex\", \"w-100\", \"border-bottom\", \"mb-2\"], [\"data-toggle\", \"tooltip\", \"data-placement\", \"top\", 1, \"cco-secondary-title\", \"title-tooltip\", 3, \"title\"], [1, \"mwc-btns\", \"flex\", \"align-items-center\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"close\", \"m-2\", 3, \"click\"], [\"aria-hidden\", \"true\"], [1, \"d-flex\", \"justify-content-between\", \"md-block\"], [1, \"col-12\", \"col-md-12\", \"pr-0\", \"pl-0\", \"col-lg-6\", \"mpb-3\"], [\"id\", \"health-network-realtime-rate\", \"class\", \"card m-10\", 4, \"ngIf\"], [1, \"col-12\", \"col-md-12\", \"pr-0\", \"col-lg-6\"], [\"id\", \"health-network-realtime-packet\", \"class\", \"card m-10\", 4, \"ngIf\"], [\"id\", \"health-network-realtime-rate\", 1, \"card\", \"m-10\"], [\"id\", \"ngx-stream-path-chart-rate\", 1, \"\"], [3, \"chartName\", \"yAxixTitle\", \"data\", \"time\", \"windowLen\", \"selectedFilter\", \"history\", 4, \"ngIf\"], [3, \"chartName\", \"yAxixTitle\", \"data\", \"time\", \"windowLen\", \"selectedFilter\", \"history\"], [\"id\", \"health-network-realtime-packet\", 1, \"card\", \"m-10\"], [\"id\", \"ngx-stream-path-chart-packet\", 1, \"\"]],\n    template: function PonportChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function PonportChartComponent_Template_button_click_6_listener() {\n          return ctx.closeChart();\n        });\n        i0.ɵɵelement(7, \"span\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵelementStart(9, \"div\", 8);\n        i0.ɵɵtemplate(10, PonportChartComponent_div_10_Template, 3, 1, \"div\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 10);\n        i0.ɵɵtemplate(12, PonportChartComponent_div_12_Template, 3, 1, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵpropertyInterpolate1(\"id\", \"ponports-\", ctx.ponPorts, \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"title\", ctx.ponPorts);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate4(\" \", ctx.ponPorts, \" (\", ctx.region, \"/\", ctx.location, \"/\", ctx.system, \") \");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.data[\"maxRate\"].length || ctx.showRealTime);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.data[\"packet\"].length || ctx.showRealTime);\n      }\n    },\n    directives: [i4.NgIf, i5.StreamChartComponent],\n    styles: [\".cco-secondary-title[_ngcontent-%COMP%]{font-size:24px;font-style:normal;font-weight:400;line-height:30px;letter-spacing:0em;text-align:left;color:#1a1f22}.mwc-btns[_ngcontent-%COMP%]{justify-content:flex-end}.mwc-header[_ngcontent-%COMP%]{justify-content:space-between;margin-bottom:20px}\"]\n  });\n  return PonportChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}