{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApplicationsApiService = /*#__PURE__*/(() => {\n  class ApplicationsApiService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseURL = environment.faAdminURL;\n      this.responseSubject = new BehaviorSubject([]);\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.options = {\n        headers: headers\n      };\n    }\n    // Get API\n    DefinitionList(orgId) {\n      return this.httpClient.get(`${environment.faAdminURL}application?org-id=${orgId}`);\n    }\n    // Add API\n    DefinitionAdd(reqBody, orgId) {\n      return this.httpClient.post(`${environment.faAdminURL}application?org-id=${orgId}`, reqBody);\n    }\n    // Export API\n    exportDefinition(org_id) {\n      return this.httpClient.get(`${environment.faAdminURL}application?org-id=${org_id}`);\n    }\n    // Import API\n    importDefinition(params, org_id) {\n      return this.httpClient.put(`${environment.faAdminURL}application?org-id=${org_id}`, params);\n    }\n    // Delete API\n    DefinitionDelete(id, org_id) {\n      return this.httpClient.delete(`${environment.faAdminURL}application/${id}?org-id=${org_id}`);\n    }\n    // Update API\n    DefinitionUpdate(id, reqBody, org_id) {\n      return this.httpClient.put(`${environment.faAdminURL}application/${id}?org-id=${org_id}`, reqBody);\n    }\n    // Application Group List API\n    ApplicationGroupList(orgId) {\n      return this.httpClient.get(`${environment.faAdminURL}application-group?org-id=${orgId}&tenant-id=0`);\n    }\n    // Application GroupName List API\n    ApplicationGroupNameList(orgId) {\n      return this.httpClient.get(`${environment.faAdminURL}application-group?org-id=${orgId}&tenant-id=0`);\n    }\n    // Application Group Member List API\n    ApplicationGroupMmbrList(uuid, orgId) {\n      return this.httpClient.get(`${environment.faAdminURL}application-group-member/${uuid}?org-id=${orgId}&tenant-id=0`);\n    }\n    // Application Group Member Create API\n    ApplicationGroupMmbrCreate(reqBody, orgId) {\n      return this.httpClient.post(`${environment.faAdminURL}application-group-member?org-id=${orgId}&tenant-id=0`, reqBody);\n    }\n    // Application Group Member Update API\n    ApplicationGroupMmbrUpdate(reqBody, Id, orgId) {\n      return this.httpClient.put(`${environment.faAdminURL}application-group-member/${Id}?org-id=${orgId}&tenant-id=0`, reqBody);\n    }\n    ApplicationGroupMmbrDelete(id, orgId) {\n      return this.httpClient.delete(`${environment.faAdminURL}application-group-member/${id}?org-id=${orgId}&tenant-id=0`);\n    }\n    callRestApi(endpoint, filters) {\n      return this.httpClient.get(`${endpoint}`, this.options).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    trimAddress(str) {\n      str = str.trim();\n      while (str[str.length - 1] === \".\") str = str.slice(0, -1);\n      return str;\n    }\n    isSubnetV4(ip) {\n      let arr = ip.split('/');\n      let ipArray = arr[0].split('.');\n      if (ipArray.length == 4) {\n        return true;\n      }\n      return false;\n    }\n    isSubnetV6(ip) {\n      let arr = ip.split('/');\n      let ipArray = arr[0].split('.');\n      if (ipArray.length == 6) {\n        return true;\n      }\n      return false;\n    }\n    combineApps(curOrgApps, defOrgApps) {\n      curOrgApps = curOrgApps ? curOrgApps : [];\n      defOrgApps = defOrgApps ? defOrgApps : [];\n      // let temp;\n      // let availCurOrgApps: any = [];\n      let appIds = {};\n      curOrgApps = curOrgApps.map(obj => {\n        obj.type = \"Local\";\n        obj['v4s'] = this.splitData(obj['addressesV4']);\n        obj['v6s'] = this.splitData(obj['addressesV6']);\n        obj['newPorts'] = this.splitData(obj['ports']);\n        appIds[obj._id] = obj.name;\n        return obj;\n      });\n      let curs = curOrgApps.length ? curOrgApps.slice(0) : [];\n      if (defOrgApps && defOrgApps.length) {\n        const currentOrgName = curOrgApps.map(obj => obj.name);\n        defOrgApps = defOrgApps.map(obj => {\n          const currentOrgIndex = currentOrgName.indexOf(obj.name);\n          if (currentOrgIndex == -1) {\n            obj.type = \"Global\";\n            obj['v4s'] = this.splitData(obj['addressesV4']);\n            obj['v6s'] = this.splitData(obj['addressesV6']);\n            obj['newPorts'] = this.splitData(obj['ports']);\n            appIds[obj._id] = obj.name;\n          } else {\n            obj = curOrgApps[currentOrgIndex];\n            curs.splice(currentOrgIndex, 1);\n            appIds[obj._id] = obj.name;\n          }\n          return obj;\n        });\n        defOrgApps = [...defOrgApps, ...curs];\n      } else if (curOrgApps.length) {\n        defOrgApps = curOrgApps;\n      }\n      //defOrgApps = this.processData(defOrgApps);\n      let data = {\n        allApps: defOrgApps,\n        appIds: appIds\n      };\n      return data;\n    }\n    splitData(str) {\n      let data = [];\n      if (str != '' && str != null) {\n        data = [...str.split(';')];\n      }\n      return data;\n    }\n    ExportAppGroups(orgId) {\n      return this.httpClient.get(`${environment.faAdminURL}export/application-groups?org-id=${orgId}`);\n    }\n    ExportApps(orgId) {\n      return this.httpClient.get(`${environment.faAdminURL}export/applications?org-id=${orgId}`);\n    }\n    ImportApps(orgId, reqBody) {\n      return this.httpClient.put(`${environment.faAdminURL}fa_import/applications?org-id=${orgId}`, reqBody);\n    }\n    ImportAppGroups(orgId, reqBody) {\n      return this.httpClient.put(`${environment.faAdminURL}fa_import/application-groups?org-id=${orgId}`, reqBody);\n    }\n    portValidation(portStr) {\n      portStr = portStr ? portStr.trim() : '';\n      if (portStr != undefined && /^()([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])((\\/TCP)|(\\/UDP))?$/igm.test(portStr)) {\n        return true;\n      }\n      return false;\n    }\n    rPortValidation(portStr) {\n      portStr = portStr ? portStr.trim() : '';\n      if (portStr != undefined && /^([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])(?:-(?:([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])))((\\/TCP)|(\\/UDP))$/igm.test(portStr) && this.compareStartEndPorts(portStr)) {\n        return true;\n      }\n      return false;\n    }\n    validateJoinPorts(portStr) {\n      portStr = portStr ? portStr.trim() : '';\n      if (portStr && /^([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])(?:\\|(?:([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5]))){0,2}$/igm.test(portStr)) {\n        return true;\n      }\n      return false;\n    }\n    compareStartEndPorts(portStr) {\n      let port = portStr.split('/')[0];\n      if (port && (port === null || port === void 0 ? void 0 : port.length)) {\n        let ports = port.split('-');\n        if (ports && (ports === null || ports === void 0 ? void 0 : ports.length) && (ports === null || ports === void 0 ? void 0 : ports.length) == 2) {\n          let start = +ports[0];\n          let end = +ports[1];\n          if (end > start) return true;\n        }\n      }\n      return false;\n    }\n    importDefinitionDPI(reqBody, engineId) {\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/xml'\n      });\n      return this.httpClient.put(`${environment.faAdminURL}uploadExtApplications?engine-id=${engineId}`, reqBody, {\n        headers\n      });\n    }\n    importApplicationGroupDPI(reqBody, engineId) {\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/xml'\n      });\n      return this.httpClient.put(`${environment.faAdminURL}uploadExtApplicationsGroup?engine-id=${engineId}`, reqBody, {\n        headers,\n        responseType: 'blob'\n      });\n    }\n    applicationsPatch(id, reqBody, org_id) {\n      return this.httpClient.patch(`${environment.faAdminURL}application/${id}?org-id=${org_id}`, reqBody);\n    }\n    getApplicationByDomainName(domainName, orgId) {\n      return this.httpClient.get(`${environment.faAdminURL}getExtApplicationByDomain/${domainName}`);\n    }\n    getApplicationAudit(applicationIds, orgId) {\n      return this.httpClient.put(`${environment.faAdminURL}getApplicationAudit`, applicationIds);\n    }\n  }\n  ApplicationsApiService.ɵfac = function ApplicationsApiService_Factory(t) {\n    return new (t || ApplicationsApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ApplicationsApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApplicationsApiService,\n    factory: ApplicationsApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApplicationsApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}