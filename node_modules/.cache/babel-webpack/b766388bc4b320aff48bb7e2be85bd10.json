{"ast":null,"code":"import { environment } from \"../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/dashboard.service\";\nimport * as i2 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i3 from \"src/app-services/translate.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/platform-browser\";\nimport * as i6 from \"@angular/common\";\nconst _c0 = [\"fullScreeenModal\"];\nfunction MapComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵelementStart(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"button\", 15);\n    i0.ɵɵelement(5, \"span\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r0.language.Error_map, \"!\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMsg, \". \");\n  }\n}\nfunction MapComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelementStart(1, \"div\", 18);\n    i0.ɵɵelementStart(2, \"div\", 19);\n    i0.ɵɵelementStart(3, \"span\", 20);\n    i0.ɵɵtext(4, \"Loading...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MapComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 21);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r2.language.Number_of_Systems, \" = \", ctx_r2.deviceCount, \" \");\n  }\n}\nfunction MapComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 22);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r3.language.Number_of_Devices, \" = \", ctx_r3.deviceCount, \" \");\n  }\n}\nfunction MapComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_9_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.tableView();\n    });\n    i0.ɵɵelement(2, \"i\", 24);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r4.language.Table_View, \" \");\n  }\n}\nfunction MapComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵelementStart(1, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_11_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.mapViewFunction();\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r5.language.Map_View, \" \");\n  }\n}\nfunction MapComponent_tbody_25_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵelementStart(8, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function MapComponent_tbody_25_tr_1_Template_button_click_8_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r16);\n      const list_r14 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.open(list_r14.macAddr, $event);\n    });\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const list_r14 = ctx.$implicit;\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(list_r14.macAddr);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(list_r14.lat);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(list_r14.lng);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"view-details-\", list_r14.macAddr, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r13.language.View);\n  }\n}\nfunction MapComponent_tbody_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵtemplate(1, MapComponent_tbody_25_tr_1_Template, 10, 5, \"tr\", 27);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r6.locations);\n  }\n}\nfunction MapComponent_ng_template_26_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵelementStart(1, \"h4\", 30);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function MapComponent_ng_template_26_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.close();\n    });\n    i0.ɵɵelement(4, \"span\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 32);\n    i0.ɵɵelementStart(6, \"div\", 33);\n    i0.ɵɵelementStart(7, \"tr\");\n    i0.ɵɵelementStart(8, \"td\", 34);\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11, \" \\u00A0 \\u00A0: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"td\", 35);\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(14, \"br\");\n    i0.ɵɵelementStart(15, \"tr\");\n    i0.ɵɵelementStart(16, \"td\", 34);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"td\");\n    i0.ɵɵtext(19, \" \\u00A0 \\u00A0: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"td\", 35);\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"br\");\n    i0.ɵɵelementStart(23, \"tr\");\n    i0.ɵɵelementStart(24, \"td\", 34);\n    i0.ɵɵtext(25);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"td\");\n    i0.ɵɵtext(27, \" \\u00A0 \\u00A0: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"td\", 35);\n    i0.ɵɵtext(29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(30, \"br\");\n    i0.ɵɵelementStart(31, \"tr\");\n    i0.ɵɵelementStart(32, \"td\", 34);\n    i0.ɵɵtext(33);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(34, \"td\");\n    i0.ɵɵtext(35, \" \\u00A0 \\u00A0: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(36, \"td\", 35);\n    i0.ɵɵtext(37);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r8.language.MAC_Address, \"\\u00A0 \\u00A0:\\u00A0 \\u00A0\", ctx_r8.tablePopupData.macAddr, \" \");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r8.language.Model_Number);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \\u00A0 \\u00A0\", ctx_r8.tablePopupData.modelNumber, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r8.language.Serial_Number);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \\u00A0 \\u00A0\", ctx_r8.tablePopupData.serialNumber, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r8.language.Firmware_Version);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \\u00A0 \\u00A0\", ctx_r8.tablePopupData.firmwareVersion, \"\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r8.language.Application_s);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \\u00A0 \\u00A0\", ctx_r8.tablePopupData.appNames ? ctx_r8.tablePopupData.appNames : \"-\", \"\");\n  }\n}\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(renderer, service, dialogService, translateService, router, titleService) {\n      this.renderer = renderer;\n      this.service = service;\n      this.dialogService = dialogService;\n      this.translateService = translateService;\n      this.router = router;\n      this.titleService = titleService;\n      this.mapView = true;\n      this.mapLoaded = false;\n      this.deviceCount = 0;\n      this.locations = [];\n      this.markers = [];\n      this.markerData = [];\n      this.pins = [];\n      this.containers = {\n        'CIEP': 'ExperienceIQ',\n        'CIES': 'ProtectIQ',\n        'iothub': 'Smart Home Agent',\n        'wifiapi': 'WiFi Demo',\n        'vz_iothub': 'Usb IoT',\n        'sthub': 'Samsung Smartthings',\n        'alexa': 'Alexa'\n      };\n      this.loader = true;\n      this.index = 0;\n      this.classes = 'example-items-rows';\n      this.error = false;\n      this.errorMsg = '';\n    }\n    ngOnInit() {\n      //this.addJsToElement(`https://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=AtrOOyQ8ZIfDNt4DJgn6vI0MaMcwFylfGU35xKoS-9S4BwU2kawn8e3x-f762NXl`).onload\n      //this.loadRecords();\n      // this.titleService.setTitle('Geographic View - Systems - Deployment - Calix Cloud');\n      let url = this.router.url;\n      if (url.indexOf('foundation-geographic-view') == -1) {\n        this.foundationEnable = false;\n      } else {\n        this.foundationEnable = true;\n      }\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n    }\n    ngAfterViewInit() {\n      this.loadRecords();\n    }\n    showError(errorMsg) {\n      this.error = true;\n      this.errorMsg = errorMsg;\n    }\n    hideError() {\n      this.error = false;\n      this.errorMsg = '';\n    }\n    loadRecords() {\n      //this.loadMap();\n      this.service.getData();\n      this.serviceSubscription = this.service.result$.subscribe(res => {\n        // if (typeof res == 'object' && res['error']) {\n        //   this.showError(res['errorMsg']);\n        //   this.loader = false;\n        //   return;\n        // }\n        this.locations = res.locations ? res.locations : [];\n        this.deviceCount = res.size ? res.size : 0;\n        this.loadMap();\n        this.loader = false;\n      }, err => {\n        //console.log(err);\n        this.loader = false;\n      });\n    }\n    loadMap() {\n      this.map = new Microsoft.Maps.Map('#myMap', {\n        credentials: environment.BING_API_KEY,\n        zoom: 1\n      });\n      this.map.setView({\n        mapTypeId: Microsoft.Maps.MapTypeId.road\n      });\n      this.map.setOptions({\n        showLogo: false,\n        showDashboard: false,\n        showMapTypeSelector: false,\n        showCopyright: false,\n        disableBirdseye: true,\n        disableStreetside: false\n      });\n      this.infobox = new Microsoft.Maps.Infobox(this.map.getCenter(), {\n        visible: false\n      });\n      this.infobox.setMap(this.map);\n      Microsoft.Maps.registerModule('SpiderClusterManager', 'assets/js/SpiderClusterManager.js');\n      Microsoft.Maps.loadModule(['SpiderClusterManager'], () => {\n        let icon = {};\n        let locationsLen = this.locations.length;\n        for (let i = 0; i < locationsLen; i++) {\n          icon = this.createSpiderIcon('2'); //flag\n          let clusterPin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(this.locations[i]['lat'], this.locations[i]['lng']), icon);\n          clusterPin.metadata = this.locations[i];\n          this.pins.push(clusterPin);\n        }\n        this.spiderManager = new SpiderClusterManager(this.map, this.pins, {\n          pinSelected: (pin, cluster) => {\n            //console.log(pin.metadata);\n            if (cluster) {\n              //this.map.setView({ center: cluster.getLocation(), zoom: 2 });\n              this.showInfobox(cluster.getLocation(), pin.metadata.macAddr);\n            } else {\n              //this.map.setView({ center: pin.getLocation() });\n              this.showInfobox(pin.getLocation(), pin.metadata.macAddr);\n            }\n          },\n          pinUnselected: () => {\n            this.hideInfobox();\n          },\n          clusteredPinCallback: this.createCustomClusteredPin,\n          gridSize: 80\n        });\n      });\n    }\n    addJsToElement(src) {\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = src;\n      this.renderer.appendChild(document.head, script);\n      return script;\n    }\n    tableView() {\n      this.mapView = false;\n    }\n    mapViewFunction() {\n      this.mapView = true;\n      // this.ngOnInit()\n    }\n\n    createSpiderIcon(devType) {\n      let outlineWidth = 7;\n      let radius = 12;\n      //Default cluster color is red.\n      let fillColor = 'rgba(255, 40, 40, 0.9)';\n      if (devType == '1') {\n        fillColor = 'rgba(20, 180, 20, 0.9)';\n      } else if (devType == '2') {\n        fillColor = 'rgba(255, 210, 40, 0.9)';\n      } else if (devType == '3') {\n        fillColor = 'rgba(128, 0, 128, 0.9)';\n      }\n      let strokeWidth = 3;\n      let strokeColor = 'rgba(255, 255, 255, 0.7)';\n      //Create an SVG string of a circle with the specified radius and color.\n      let svg = ['<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"', radius * 2, '\" height=\"', radius * 2, '\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" style=\"shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd\"><g id=\"UrTavla\"><circle cx=\"', radius, '\" cy=\"', radius, '\" r=\"', radius - strokeWidth, '\" stroke=\"', strokeColor, '\" stroke-width=\"', strokeWidth, '\" fill=\"', fillColor, '\"/>    <text x=\"50%\" y=\"50%\" text-anchor=\"middle\" fill=\"white\" dy=\".3em\"></text></g></svg>'];\n      //Create a pushpin from the SVG and anchor it to the center of the circle.\n      let svgIcon = {\n        icon: svg.join(''),\n        anchor: new Microsoft.Maps.Point(radius, radius)\n        //text: devCount.toString(),\n      };\n\n      return svgIcon;\n    }\n    createCustomClusteredPin(cluster) {\n      let minRadius = 15;\n      let outlineWidth = 7;\n      //Get the number of pushpins in the cluster\n      let clusterSize = cluster.containedPushpins.length;\n      //Calculate the radius of the cluster based on the number of pushpins in the cluster, using a logarithmic scale.\n      let radius = Math.log(clusterSize) / Math.log(10) * 5 + minRadius;\n      let textPos = radius;\n      let image = 'assets/images/m1.png';\n      if (clusterSize < 10) {\n        image = 'assets/images/m1.png';\n        textPos = radius;\n      } else if (clusterSize < 100) {\n        image = 'assets/images/m2.png';\n        textPos = radius;\n      } else if (clusterSize < 1000) {\n        image = 'assets/images/m3.png';\n        textPos = radius + 1;\n      } else {\n        image = 'assets/images/m5.png';\n        textPos = radius + 9;\n      }\n      //Customize the clustered pushpin using the generated SVG and anchor on its center.\n      cluster.setOptions({\n        icon: image,\n        anchor: new Microsoft.Maps.Point(radius, radius),\n        textOffset: new Microsoft.Maps.Point(0, textPos)\n      });\n    }\n    showInfobox(location, macAddr) {\n      this.loader = true;\n      this.service.getGeoTelemetryData(macAddr).subscribe(json => {\n        let data = json.result;\n        let apps = [];\n        if (data && data['apps']) {\n          for (let i = 0; i < data.apps.length; i++) {\n            if (this.containers[data.apps[i]['name']]) {\n              apps.push(this.containers[data.apps[i]['name']]);\n            } else {\n              apps.push(data.apps[i]['name']);\n            }\n          }\n        }\n        data['appNames'] = apps.join(', ');\n        this.loader = false;\n        this.infobox.setOptions({\n          location: location,\n          title: this.language['System Information'],\n          description: `\n        FSAN: ${data.fsanSerialNumber ? data.fsanSerialNumber : ''}<br/>\n        ${this.language['MAC Address']} : ${data.macAddr}<br/>\n        ${this.language.Model_Number} : ${data.modelNumber}<br/>\n        ${this.language['Serial Number']} : ${data.serialNumber}\n        <br/>\n        ${this.language.Firmware_Version} : ${data.firmwareVersion !== undefined ? data.firmwareVersion : ''}\n        <br/>\n        \n                          `,\n          visible: true,\n          width: 300\n        });\n      }, err => {\n        this.loader = false;\n      });\n    }\n    hideInfobox() {\n      if (this.infobox !== undefined) {\n        this.infobox.setOptions({\n          visible: false\n        });\n      }\n      // this.map.setView({\n      //   zoom: 0\n      // });\n    }\n\n    open(macAddress, event) {\n      //this.loader = true;\n      console.log(event);\n      let ele = document.getElementById(`${event.target.id}`);\n      ele.disabled = true;\n      this.service.getGeoTelemetryData(macAddress).subscribe(data => {\n        ele.disabled = false;\n        let apps = [];\n        if (data && data['result'] && data['result'].apps) {\n          for (let i = 0; i < data['result'].apps.length; i++) {\n            if (this.containers[data['result'].apps[i]['name']]) {\n              apps.push(this.containers[data['result'].apps[i]['name']]);\n            } else {\n              apps.push(data.apps[i]['name']);\n            }\n          }\n        }\n        this.tablePopupData = Object.assign({\n          appNames: apps.join(', ')\n        }, data['result']);\n        this.close();\n        ////console.log(this.tablePopupData);\n        this.loader = false;\n        this.modalRef = this.dialogService.open(this.fullScreeenModal);\n      }, err => {\n        ele.disabled = false;\n      });\n    }\n    close() {\n      //console.log(\"close clicked\");\n      if (this.modalRef) {\n        this.modalRef.close();\n      }\n    }\n    ngOnDestroy() {\n      if (this.serviceSubscription) {\n        this.serviceSubscription.unsubscribe();\n      }\n      this.service.undoService();\n      this.languageSubject.unsubscribe();\n    }\n  }\n  MapComponent.ɵfac = function MapComponent_Factory(t) {\n    return new (t || MapComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.DashboardService), i0.ɵɵdirectiveInject(i2.NgbModal), i0.ɵɵdirectiveInject(i3.TranslateService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.Title));\n  };\n  MapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapComponent,\n    selectors: [[\"app-map\"]],\n    viewQuery: function MapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fullScreeenModal = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function MapComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.classes);\n      }\n    },\n    decls: 28,\n    vars: 16,\n    consts: [[\"class\", \"alert alert-warning alert-dismissible fade show\", \"role\", \"alert\", 4, \"ngIf\"], [\"class\", \"loader\", 4, \"ngIf\"], [1, \"main-card-exception\", 3, \"hidden\", \"ngClass\"], [1, \"w-100\", \"position-relative\"], [\"id\", \"myMap\", 1, \"map-v\", 3, \"dblclick\", \"mousedown\", \"scroll\"], [1, \"flex-around\", \"pos-abs-w\", 3, \"hidden\"], [4, \"ngIf\"], [3, \"ngClass\", \"hidden\"], [\"class\", \"modal-footer  border-reset mr-2\", 4, \"ngIf\"], [1, \"p-2\"], [1, \"table-responsive\"], [1, \"table\", \"table-bordered\"], [\"class\", \"col-md-8\"], [\"fullScreeenModal\", \"\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\", \"alert-dismissible\", \"fade\", \"show\"], [\"type\", \"button\", \"data-dismiss\", \"alert\", \"aria-label\", \"Close\", 1, \"close\"], [\"aria-hidden\", \"true\"], [1, \"loader\"], [1, \"d-flex\", \"justify-content-center\"], [\"role\", \"\", 1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"btn\", \"btn-white\", \"ml-2\", \"font-14\", \"cursor-default\"], [1, \"btn\", \"btn-white\", \"ml-2\", \"font-14\"], [1, \"btn\", \"btn-white\", \"font-14\", \"mr-2\", 3, \"click\"], [1, \"fa\", \"fa-list\", \"mr-1\"], [1, \"modal-footer\", \"border-reset\", \"mr-2\"], [1, \"btn\", \"btn-sm\", \"btn-success\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-success\", \"btn-sm\", 3, \"id\", \"click\"], [1, \"modal-header\"], [\"id\", \"modal-basic-title\", 1, \"modal-title\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"], [1, \"modal-body\"], [1, \"p-2\", \"border-bot-grey\"], [1, \"f-15\", \"w-150p\"], [1, \"f-15\"]],\n    template: function MapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵtemplate(1, MapComponent_div_1_Template, 6, 2, \"div\", 0);\n        i0.ɵɵtemplate(2, MapComponent_div_2_Template, 5, 0, \"div\", 1);\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵlistener(\"dblclick\", function MapComponent_Template_div_dblclick_5_listener() {\n          return ctx.hideInfobox();\n        })(\"mousedown\", function MapComponent_Template_div_mousedown_5_listener() {\n          return ctx.hideInfobox();\n        })(\"scroll\", function MapComponent_Template_div_scroll_5_listener() {\n          return ctx.hideInfobox();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵtemplate(7, MapComponent_div_7_Template, 3, 2, \"div\", 6);\n        i0.ɵɵtemplate(8, MapComponent_div_8_Template, 3, 2, \"div\", 6);\n        i0.ɵɵtemplate(9, MapComponent_div_9_Template, 4, 1, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 7);\n        i0.ɵɵtemplate(11, MapComponent_div_11_Template, 3, 1, \"div\", 8);\n        i0.ɵɵelementStart(12, \"div\", 9);\n        i0.ɵɵelementStart(13, \"div\", 10);\n        i0.ɵɵelementStart(14, \"table\", 11);\n        i0.ɵɵelementStart(15, \"thead\");\n        i0.ɵɵelementStart(16, \"tr\");\n        i0.ɵɵelementStart(17, \"th\");\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"th\");\n        i0.ɵɵtext(20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"th\");\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"th\");\n        i0.ɵɵtext(24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, MapComponent_tbody_25_Template, 2, 1, \"tbody\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, MapComponent_ng_template_26_Template, 38, 10, \"ng-template\", 12, 13, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loader);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.error)(\"ngClass\", !ctx.mapView ? \"d-none\" : \"d-block\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"hidden\", ctx.error);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.foundationEnable);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.foundationEnable);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.router.url.includes(\"cco-foundation/foundation-systems/foundation-geographic-view\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.mapView ? \"d-none\" : \"d-block\")(\"hidden\", ctx.error);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.router.url.includes(\"cco-foundation/foundation-systems/foundation-geographic-view\"));\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(ctx.foundationEnable ? ctx.language.System_MAC_address : ctx.language.Device_MAC_Address);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.language.Location_Latitude);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.language.Location_Longitude);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.language.Action);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.locations);\n      }\n    },\n    directives: [i6.NgIf, i6.NgClass, i6.NgForOf],\n    styles: [\".btn-white[_ngcontent-%COMP%]{background-color:#fff!important;border:1px solid #ccc}.btn-white[_ngcontent-%COMP%]:hover{background-color:#fff!important;border:1px solid #fff}.flex-around[_ngcontent-%COMP%]{display:flex;justify-content:space-between}.f-15[_ngcontent-%COMP%]{font-size:15px!important}.cursor-default[_ngcontent-%COMP%]{cursor:default!important}.map-v[_ngcontent-%COMP%]{width:100%;height:80vh}.border-bot-grey[_ngcontent-%COMP%]{border:.5px solid #e3ebf3}.w-150p[_ngcontent-%COMP%]{width:150px}.pos-abs-w[_ngcontent-%COMP%]{position:absolute;width:100%;top:20px}\"]\n  });\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}