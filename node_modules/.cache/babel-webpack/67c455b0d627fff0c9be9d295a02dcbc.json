{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/sso-auth.service\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"../shared/services/marketing-campaign-define-api.service\";\nimport * as i4 from \"../../shared/services/marketing-common.service\";\nimport * as i5 from \"src/app-services/translate.service\";\nimport * as i6 from \"../../marketing-home/marketing-home-Apiservice\";\nimport * as i7 from \"@angular/common\";\nfunction MarketingCampaignTSComponent_iframe_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"iframe\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r0.Url, i0.ɵɵsanitizeResourceUrl);\n  }\n}\nexport let MarketingCampaignTSComponent = /*#__PURE__*/(() => {\n  class MarketingCampaignTSComponent {\n    constructor(ssoAuthService, sanitizer, marketingCampaignDefineApiService, marketingCommonService, translateService, marketingHomeApiService) {\n      this.ssoAuthService = ssoAuthService;\n      this.sanitizer = sanitizer;\n      this.marketingCampaignDefineApiService = marketingCampaignDefineApiService;\n      this.marketingCommonService = marketingCommonService;\n      this.translateService = translateService;\n      this.marketingHomeApiService = marketingHomeApiService;\n      this.baseUrl_TS = `${environment.QLIK_TS_BASEURL}`;\n      this.Ts_TokenURL = `${environment.QLIK_TS_TOKEN_URL}`;\n      this.Ts_RedirectUrl = `${environment.QLIK_TS_REDIRECT}`;\n      this.isRefreshing = false;\n      this.uploadData = false;\n    }\n    ngOnInit() {\n      this.qlikTicketURL();\n    }\n    qlikTicketURL() {\n      return new Promise((resolve, reject) => {\n        this.marketingHomeApiService.getTsAuthToken().subscribe(res => {}, err => {\n          let ticket = err.error.text ? err.error.text : '';\n          if (ticket.includes(\"~~\")) {\n            var stringArray = ticket.split(\"~~\");\n            this.ticketId = stringArray[0];\n            this.ticketIdUser = stringArray[1];\n          } else {\n            this.ticketId = ticket;\n            this.ticketIdUser = '';\n          }\n          if (this.ticketId) this.formFrameUrl();\n          resolve(err.error.text);\n          //this.getList();\n        });\n      });\n    }\n\n    formFrameUrl() {\n      this.pocURL = `${this.baseUrl_TS}${this.Ts_TokenURL}?auth_token=${this.ticketId}&username=${this.ticketIdUser}&redirect_url=${this.Ts_RedirectUrl}/campaign?`;\n      this.Url = this.sanitizer.bypassSecurityTrustResourceUrl(`${this.pocURL}`);\n      if (this.savedSegmentSubject) {\n        this.savedSegmentSubject.unsubscribe();\n      }\n      // GET CHANGE SEGMENTS\n      this.savedSegmentSubject = this.marketingCampaignDefineApiService.savedSegmentSubject.subscribe(segment => {\n        if (segment != '' && segment != undefined) {\n          this.Url = undefined;\n          let filter = {};\n          if (segment.hasOwnProperty('location')) {\n            filter['location'] = segment.location;\n          }\n          if (segment.hasOwnProperty('region')) {\n            filter['region'] = segment.region;\n          }\n          if (segment.hasOwnProperty('serviceTier')) {\n            filter['servicegrp'] = segment.serviceTier;\n          }\n          if (segment.hasOwnProperty('propensity')) {\n            filter['propensity'] = [segment.propensity];\n          }\n          if (segment.hasOwnProperty('zipPlusFour')) {\n            filter['zip plus four'] = segment.zipPlusFour;\n          }\n          if (segment.hasOwnProperty('zipcode')) {\n            filter['zipcode'] = segment.zipcode;\n          }\n          let senddata = JSON.stringify(filter);\n          let formedUrl = `${this.pocURL}segement_id=${segment.segmentId}&select=${encodeURI(senddata)}`;\n          this.Url = this.sanitizer.bypassSecurityTrustResourceUrl(formedUrl);\n        }\n      });\n      this.refreshIframe();\n    }\n    refreshIframe() {\n      this.isRefreshing = true;\n      setTimeout(() => {\n        this.isRefreshing = false;\n      }, 50);\n    }\n    resizeIframe(obj) {\n      obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px';\n    }\n    ngOnDestroy() {\n      if (this.qlikTicketSubject) {\n        this.qlikTicketSubject.unsubscribe();\n      }\n      if (this.savedSegmentSubject) {\n        this.savedSegmentSubject.unsubscribe();\n      }\n    }\n  }\n  MarketingCampaignTSComponent.ɵfac = function MarketingCampaignTSComponent_Factory(t) {\n    return new (t || MarketingCampaignTSComponent)(i0.ɵɵdirectiveInject(i1.SsoAuthService), i0.ɵɵdirectiveInject(i2.DomSanitizer), i0.ɵɵdirectiveInject(i3.MarketingCampaignDefineApiService), i0.ɵɵdirectiveInject(i4.MarketingCommonService), i0.ɵɵdirectiveInject(i5.TranslateService), i0.ɵɵdirectiveInject(i6.MarketingHomeApiService));\n  };\n  MarketingCampaignTSComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MarketingCampaignTSComponent,\n    selectors: [[\"app-marketing-campaign-ts\"]],\n    inputs: {\n      hidden: \"hidden\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"frameborder\", \"0\", \"width\", \"100%\", \"height\", \"600px\", 3, \"src\", 4, \"ngIf\"], [\"frameborder\", \"0\", \"width\", \"100%\", \"height\", \"600px\", 3, \"src\"]],\n    template: function MarketingCampaignTSComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MarketingCampaignTSComponent_iframe_0_Template, 1, 1, \"iframe\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.isRefreshing && ctx.Url);\n      }\n    },\n    directives: [i7.NgIf],\n    styles: [\"\"]\n  });\n  return MarketingCampaignTSComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}