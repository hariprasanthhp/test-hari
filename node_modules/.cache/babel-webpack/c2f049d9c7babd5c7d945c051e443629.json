{"ast":null,"code":"import inherits from 'inherits';\nimport EditorActions from 'diagram-js/lib/features/editor-actions/EditorActions';\nimport { filter } from 'min-dash';\nimport { is } from '../../util/ModelUtil';\nimport { getBBox } from 'diagram-js/lib/util/Elements';\n\n/**\n * Registers and executes BPMN specific editor actions.\n *\n * @param {Injector} injector\n */\nexport default function BpmnEditorActions(injector) {\n  injector.invoke(EditorActions, this);\n}\ninherits(BpmnEditorActions, EditorActions);\nBpmnEditorActions.$inject = ['injector'];\n\n/**\n * Register default actions.\n *\n * @param {Injector} injector\n */\nBpmnEditorActions.prototype._registerDefaultActions = function (injector) {\n  // (0) invoke super method\n\n  EditorActions.prototype._registerDefaultActions.call(this, injector);\n\n  // (1) retrieve optional components to integrate with\n\n  var canvas = injector.get('canvas', false);\n  var elementRegistry = injector.get('elementRegistry', false);\n  var selection = injector.get('selection', false);\n  var spaceTool = injector.get('spaceTool', false);\n  var lassoTool = injector.get('lassoTool', false);\n  var handTool = injector.get('handTool', false);\n  var globalConnect = injector.get('globalConnect', false);\n  var distributeElements = injector.get('distributeElements', false);\n  var alignElements = injector.get('alignElements', false);\n  var directEditing = injector.get('directEditing', false);\n  var searchPad = injector.get('searchPad', false);\n  var modeling = injector.get('modeling', false);\n\n  // (2) check components and register actions\n\n  if (canvas && elementRegistry && selection) {\n    this._registerAction('selectElements', function () {\n      // select all elements except for the invisible\n      // root element\n      var rootElement = canvas.getRootElement();\n      var elements = elementRegistry.filter(function (element) {\n        return element !== rootElement;\n      });\n      selection.select(elements);\n      return elements;\n    });\n  }\n  if (spaceTool) {\n    this._registerAction('spaceTool', function () {\n      spaceTool.toggle();\n    });\n  }\n  if (lassoTool) {\n    this._registerAction('lassoTool', function () {\n      lassoTool.toggle();\n    });\n  }\n  if (handTool) {\n    this._registerAction('handTool', function () {\n      handTool.toggle();\n    });\n  }\n  if (globalConnect) {\n    this._registerAction('globalConnectTool', function () {\n      globalConnect.toggle();\n    });\n  }\n  if (selection && distributeElements) {\n    this._registerAction('distributeElements', function (opts) {\n      var currentSelection = selection.get(),\n        type = opts.type;\n      if (currentSelection.length) {\n        distributeElements.trigger(currentSelection, type);\n      }\n    });\n  }\n  if (selection && alignElements) {\n    this._registerAction('alignElements', function (opts) {\n      var currentSelection = selection.get(),\n        aligneableElements = [],\n        type = opts.type;\n      if (currentSelection.length) {\n        aligneableElements = filter(currentSelection, function (element) {\n          return !is(element, 'bpmn:Lane');\n        });\n        alignElements.trigger(aligneableElements, type);\n      }\n    });\n  }\n  if (selection && modeling) {\n    this._registerAction('setColor', function (opts) {\n      var currentSelection = selection.get();\n      if (currentSelection.length) {\n        modeling.setColor(currentSelection, opts);\n      }\n    });\n  }\n  if (selection && directEditing) {\n    this._registerAction('directEditing', function () {\n      var currentSelection = selection.get();\n      if (currentSelection.length) {\n        directEditing.activate(currentSelection[0]);\n      }\n    });\n  }\n  if (searchPad) {\n    this._registerAction('find', function () {\n      searchPad.toggle();\n    });\n  }\n  if (canvas && modeling) {\n    this._registerAction('moveToOrigin', function () {\n      var rootElement = canvas.getRootElement(),\n        boundingBox,\n        elements;\n      if (is(rootElement, 'bpmn:Collaboration')) {\n        elements = elementRegistry.filter(function (element) {\n          return is(element.parent, 'bpmn:Collaboration');\n        });\n      } else {\n        elements = elementRegistry.filter(function (element) {\n          return element !== rootElement && !is(element.parent, 'bpmn:SubProcess');\n        });\n      }\n      boundingBox = getBBox(elements);\n      modeling.moveElements(elements, {\n        x: -boundingBox.x,\n        y: -boundingBox.y\n      }, rootElement);\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}