{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EndpointManagementService = /*#__PURE__*/(() => {\n  class EndpointManagementService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.isDev = false;\n      this.flowDataSync = new BehaviorSubject({\n        flowDataTab: true\n      }); //to initialise the configuration tab while redirecting from flowdata\n      this.baseUrl = environment.faAdminCorrelatorURL;\n      this.correlator = 'correlator';\n      this.flowEndpoint = 'flowendpoint';\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.options = {\n        headers: headers\n      };\n    }\n    getCount(orgId) {\n      let url = `${this.baseUrl}${this.flowEndpoint}/count?org-id=${orgId}`;\n      return this.httpClient.get(url);\n    }\n    getLists(orgId, page, size) {\n      if (page == undefined) {\n        page = 0;\n      }\n      if (size == undefined) {\n        size = 10;\n      }\n      let url = `${environment.faAdminCorrelatorURL}flowendpoint?org-id=${orgId}&pagenumber=${page}&pagesize=${size}`;\n      return this.httpClient.get(url);\n    }\n    getListsDev(orgId, mappedBy, page, size) {\n      if (page == undefined) {\n        page = 0;\n      }\n      if (size == undefined) {\n        size = 10;\n      }\n      const url = `${environment.faAdminCorrelatorURL}flowendpoint?org-id=${orgId}&pagenumber=${page}&pagesize=${size}&mappedby=${mappedBy}`;\n      return this.httpClient.get(url);\n    }\n    AddIP(url) {\n      return this.httpClient.post(url, {}, this.options);\n    }\n    // EndpointDelete<T>(url: string, param) {\n    //   return this.httpClient.delete<T>(url, param)\n    // }\n    EndpointDelete(url) {\n      // if (isAssigned) {\n      //   return this.httpClient.request('DELETE', url, {\n      //     body: param\n      //   });\n      // }\n      //  else {\n      return this.httpClient.delete(url);\n      // }\n    }\n\n    NonAssignedEndpointDelete(url) {\n      return this.httpClient.delete(url);\n    }\n    getOrg(orgId) {\n      let url = `${environment.faAdminURL}organization?org-id=${orgId}`;\n      return this.httpClient.get(url);\n    }\n    updateOrgPUT(orgId, params) {\n      let url = `${environment.faAdminURL}organization?org-id=${orgId}`;\n      return this.httpClient.put(url, params, this.options);\n    }\n    /* CCL-42319 */\n    updateOrgPatch(orgId, params) {\n      let url = `${environment.faAdminURL}organization?org-id=${orgId}`;\n      return this.httpClient.patch(url, params, this.options);\n    }\n    createOrg(orgId, params) {\n      let url = `${environment.faAdminURL}organization?org-id=${orgId}`;\n      return this.httpClient.post(url, params, this.options);\n    }\n    updateManagement(orgId, params) {\n      let url = `${environment.faAdminCorrelatorURL}assigned/subscriber?org-id=${orgId}`;\n      return this.httpClient.put(url, params, this.options);\n    }\n    Export(orgId) {\n      return this.httpClient.post(`${environment.faAdminCorrelatorURL}assigned/subscriber/export?org-id=${orgId}`, {});\n    }\n    /*   getAssignedCount(orgId): any { CCL-33173\r\n        let url = `${environment.faAdminCorrelatorURL}flowendpoint/select?org-id=${orgId}&whereclause=mapped_by%20ilike%20%27%25ass%25%27%20AND%20NOT%20deleted%20AND%20ip_address%20is%20NOT%20null%20AND%20ip_address%20!=%20%27%27&count=true`;\r\n        return this.httpClient.get(url);\r\n      }\r\n    \r\n      getAssigned(orgId, page): any {\r\n        let url = `${environment.faAdminCorrelatorURL}flowendpoint/select?org-id=${orgId}&pagenumber=${page}&pagesize=1000&whereclause=mapped_by%20ilike%20%27%25ass%25%27%20AND%20NOT%20deleted%20AND%20ip_address%20is%20NOT%20null%20AND%20ip_address%20!=%20%27%27`;\r\n        return this.httpClient.get(url);\r\n      } */\n    getAssignedCount(orgId) {\n      const url = `${environment.faAdminCorrelatorURL}flowendpoint?org-id=${orgId}&mappedby=ASSIGNED&count=true`;\n      return this.httpClient.get(url);\n    }\n    getAssigned(orgId, page) {\n      const url = `${environment.faAdminCorrelatorURL}flowendpoint?org-id=${orgId}&pagenumber=${page}&pagesize=1000&mappedby=ASSIGNED`;\n      return this.httpClient.get(url);\n    }\n    importAssigned(params, orgId) {\n      return this.httpClient.post(`${environment.faAdminCorrelatorURL}assigned/subscriber/import?org-id=${orgId}`, params);\n    }\n    getAggregatedGroups(orgId, aggGrp) {\n      let url = `${environment.faAdminCorrelatorURL}flowendpoint?org-id=${orgId}&pagenumber=0&pagesize=100&agggroup=${aggGrp}`;\n      return this.httpClient.get(url);\n    }\n    add1MinuteAggregation(orgId, value) {\n      let url = `${environment.faAdminURL}organization/allow1minaggregation?enable=${value}&org-id=${orgId}`;\n      return this.httpClient.post(url, {});\n    }\n    addUnmappedIdAggregation(orgId, value) {\n      let url = `${environment.faAdminURL}organization/allowunmapped?enable=${value}&org-id=${orgId}`;\n      return this.httpClient.post(url, {});\n    }\n    getDelay(ORG_ID) {\n      return this.httpClient.get(`${environment.API_BASE_URL}flow-realtime/lateflows?orgId=${ORG_ID}&tenant-id=0`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      // Return obseravle with an error message;\n      return throwError(error);\n    }\n    getMappedcount(ORG_ID) {\n      return this.httpClient.get(`${environment.faAdminCorrelatorURL}flowendpoint/count?discovered=true&org-id=${ORG_ID}`);\n    }\n    getUnmappedcount(ORG_ID) {\n      return this.httpClient.get(`${environment.faAdminCorrelatorURL}flowendpoint/unmapped/count?org-id=${ORG_ID}&source=true`);\n    }\n  }\n  EndpointManagementService.ɵfac = function EndpointManagementService_Factory(t) {\n    return new (t || EndpointManagementService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  EndpointManagementService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EndpointManagementService,\n    factory: EndpointManagementService.ɵfac,\n    providedIn: 'root'\n  });\n  return EndpointManagementService;\n})();","map":null,"metadata":{},"sourceType":"module"}