{"ast":null,"code":"import { assign, find, forEach } from 'min-dash';\nimport { getBusinessObject, is } from 'bpmn-js/lib/util/ModelUtil';\nimport entryFactory from 'bpmn-js-properties-panel/lib/factory/EntryFactory';\nimport elementHelper from 'bpmn-js-properties-panel/lib/helper/ElementHelper';\nimport extensionElementsHelper from 'bpmn-js-properties-panel/lib/helper/ExtensionElementsHelper';\nimport cmdHelper from 'bpmn-js-properties-panel/lib/helper/CmdHelper';\nimport utils from 'bpmn-js-properties-panel/lib/Utils';\nfunction generatePropertyId() {\n  return utils.nextId('Header_');\n}\n\n/**\n * Get all zeebe:header objects for a specific business object\n *\n * @param  {ModdleElement} parent\n *\n * @return {Array<ModdleElement>} a list of zeebe:header objects\n */\nfunction getPropertyValues(parent) {\n  const properties = parent && getPropertiesElement(parent);\n  if (properties && properties.values) {\n    return properties.values;\n  }\n  return [];\n}\n\n/**\n * Get all zeebe:Header object for a specific business object\n *\n * @param  {ModdleElement} parent\n *\n * @return {ModdleElement} a zeebe:Headers object\n */\nfunction getPropertiesElement(element) {\n  if (!isExtensionElements(element)) {\n    return element.properties;\n  } else {\n    return getPropertiesElementInsideExtensionElements(element);\n  }\n}\n\n/**\n * Get first camunda:Properties object for a specific bpmn:ExtensionElements\n * business object.\n *\n * @param {ModdleElement} extensionElements\n *\n * @return {ModdleElement} a camunda:Properties object\n */\nfunction getPropertiesElementInsideExtensionElements(extensionElements) {\n  return find(extensionElements.values, elem => {\n    return is(elem, 'zeebe:TaskHeaders');\n  });\n}\n\n/**\n * Returns true, if the given business object is a bpmn:ExtensionElements.\n *\n * @param {ModdleElement} element\n *\n * @return {boolean} a boolean value\n */\nfunction isExtensionElements(element) {\n  return is(element, 'bpmn:ExtensionElements');\n}\n\n/**\n * Create a camunda:property entry using tableEntryFactory\n *\n * @param  {djs.model.Base} element\n * @param  {BpmnFactory} bpmnFactory\n * @param  {Function} translate\n * @param  {Object} options\n * @param  {string} options.id\n * @param  {Array<string>} options.modelProperties\n * @param  {Array<string>} options.labels\n * @param  {function} options.getParent Gets the parent business object\n * @param  {function} options.show Indicate when the entry will be shown, should return boolean\n *\n * @returns {Object} a tableEntry object\n */\nexport default function (element, bpmnFactory, translate, options) {\n  const getParent = options.getParent;\n  const modelProperties = options.modelProperties,\n    createParent = options.createParent;\n  const bo = getBusinessObject(element);\n  assign(options, {\n    addLabel: translate('Add Header'),\n    getElements: function (element, node) {\n      const parent = getParent(element, node, bo);\n      return getPropertyValues(parent);\n    },\n    addElement: function (element, node) {\n      const commands = [];\n      let parent = getParent(element, node, bo);\n      if (!parent && typeof createParent === 'function') {\n        const result = createParent(element, bo);\n        parent = result.parent;\n        commands.push(result.cmd);\n      }\n      let properties = getPropertiesElement(parent);\n      if (!properties) {\n        properties = elementHelper.createElement('zeebe:TaskHeaders', {}, parent, bpmnFactory);\n        if (!isExtensionElements(parent)) {\n          commands.push(cmdHelper.updateBusinessObject(element, parent, {\n            'taskHeaders': properties\n          }));\n        } else {\n          commands.push(cmdHelper.addAndRemoveElementsFromList(element, parent, 'values', 'extensionElements', [properties], []));\n        }\n      }\n      const propertyProps = {};\n      forEach(modelProperties, prop => {\n        propertyProps[prop] = undefined;\n      });\n\n      // create id if necessary\n      if (modelProperties.indexOf('id') >= 0) {\n        propertyProps.id = generatePropertyId();\n      }\n      const property = elementHelper.createElement('zeebe:Header', propertyProps, properties, bpmnFactory);\n      commands.push(cmdHelper.addElementsTolist(element, properties, 'values', [property]));\n      return commands;\n    },\n    updateElement: function (element, value, node, idx) {\n      const parent = getParent(element, node, bo),\n        property = getPropertyValues(parent)[idx];\n      forEach(modelProperties, prop => {\n        value[prop] = value[prop] || undefined;\n      });\n      return cmdHelper.updateBusinessObject(element, property, value);\n    },\n    validate: function (element, value, node, idx) {\n      // validate id if necessary\n      if (modelProperties.indexOf('id') >= 0) {\n        const parent = getParent(element, node, bo),\n          properties = getPropertyValues(parent),\n          property = properties[idx];\n        if (property) {\n          // check if id is valid\n          const validationError = utils.isIdValid(property, value.id);\n          if (validationError) {\n            return {\n              id: validationError\n            };\n          }\n        }\n      }\n    },\n    removeElement: function (element, node, idx) {\n      const commands = [],\n        parent = getParent(element, node, bo),\n        properties = getPropertiesElement(parent),\n        propertyValues = getPropertyValues(parent),\n        currentProperty = propertyValues[idx];\n      commands.push(cmdHelper.removeElementsFromList(element, properties, 'values', null, [currentProperty]));\n      if (propertyValues.length === 1) {\n        // remove camunda:properties if the last existing property has been removed\n        if (!isExtensionElements(parent)) {\n          commands.push(cmdHelper.updateBusinessObject(element, parent, {\n            headers: undefined\n          }));\n        } else {\n          forEach(parent.values, value => {\n            if (is(value, 'zeebe:TaskHeaders')) {\n              commands.push(extensionElementsHelper.removeEntry(bo, element, value));\n            }\n          });\n        }\n      }\n      return commands;\n    }\n  });\n  return entryFactory.table(translate, options);\n}","map":null,"metadata":{},"sourceType":"module"}