{"ast":null,"code":"import { BehaviorSubject, Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let ProtectIqService = /*#__PURE__*/(() => {\n  class ProtectIqService {\n    constructor(http, Sso) {\n      this.http = http;\n      this.Sso = Sso;\n      this.routerOnboardInfo = new BehaviorSubject({});\n      this.currentAvailabilityInfo = new BehaviorSubject({});\n      this.availabilityInfo = new Subject();\n      this.subscribtionStatus = new Subject();\n    }\n    getNotification(notificationUserId) {\n      return this.http.get(`${environment.SUPPORT_URL}/security/proof/notification?userId=${notificationUserId}`).pipe(catchError(this.handleError));\n    }\n    getSecurityList(id) {\n      return this.http.get(`${environment.SUPPORT_URL}/security/settings/list?userId=${id}`).pipe(catchError(this.handleError));\n    }\n    getAlerts(userId, alertType) {\n      return this.http.get(`${environment.SUPPORT_URL}/notification/iq?userId=${userId}&iqType=protectIQ${alertType == 'All' ? '' : \"&type=\" + alertType}`, {\n        observe: 'response'\n      }).pipe(catchError(this.handleError));\n    }\n    setSecuritySettings(body) {\n      return this.http.post(`${environment.SUPPORT_URL}/security/settings/set`, body).pipe(catchError(this.handleError));\n    }\n    addWhitelistDetails(body) {\n      return this.http.post(`${environment.SUPPORT_URL}/security/log/whitelist/add`, body).pipe(catchError(this.handleError));\n    }\n    getTrustList(whiteListType, id, selectedTab, roleId) {\n      let url;\n      if (whiteListType == '' || whiteListType == 'All') {\n        if (selectedTab) {\n          url = `${environment.SUPPORT_URL}/security/${selectedTab == \"primary-network\" ? \"\" : \"rolepolicy/\"}log/whitelist?userId=${id}${selectedTab == \"primary-network\" ? \"\" : roleId ? \"&roleId=\" + roleId : \"\"}`;\n        } else {\n          url = `${environment.SUPPORT_URL}/security/log/whitelist?userId=${id}`;\n        }\n      } else {\n        if (selectedTab) {\n          url = `${environment.SUPPORT_URL}/security/${selectedTab == \"primary-network\" ? \"\" : \"rolepolicy/\"}log/whitelist?userId=${id}&type=${whiteListType}${selectedTab == \"primary-network\" ? \"\" : roleId ? \"&roleId=\" + roleId : \"\"}`;\n        } else {\n          url = `${environment.SUPPORT_URL}/security/log/whitelist?userId=${id}&type=${whiteListType}`;\n        }\n      }\n      //once the old component deleted we can use this API formate\n      // if (whiteListType == '' || whiteListType == 'All') {\n      //     url = `${environment.SUPPORT_URL}/security/${selectedTab == \"primary-network\" ? \"\":\"rolepolicy/\"}log/whitelist?userId=${id}${selectedTab == \"primary-network\" ? \"\" : roleId ? \"&roleId=\" + roleId : \"\" }`;\n      // } else {\n      //     url = `${environment.SUPPORT_URL}/security/${selectedTab == \"primary-network\" ? \"\" : \"rolepolicy/\"}log/whitelist?userId=${id}&type=${whiteListType}${selectedTab == \"primary-network\" ? \"\" : roleId ? \"&roleId=\" + roleId : \"\" }`;\n      // }\n      return this.http.get(url, {\n        observe: 'response'\n      }).pipe(catchError(this.handleError));\n    }\n    removeItemInTrustList(sigId, id, selectedTab, roleId) {\n      if (selectedTab) {\n        return this.http.delete(`${environment.SUPPORT_URL}/security/log/whitelist/remove?userId=${id}&roleId=${1}&signatureId=${sigId}`).pipe(catchError(this.handleError));\n      } else {\n        return this.http.delete(`${environment.SUPPORT_URL}/security/log/whitelist/remove?userId=${id}&signatureId=${sigId}`).pipe(catchError(this.handleError));\n      }\n    }\n    getSkipList(id) {\n      return this.http.get(`${environment.SUPPORT_URL}/security/skip/station/list?userId=${id}`).pipe(catchError(this.handleError));\n    }\n    updateSkipStatus(body) {\n      return this.http.post(`${environment.SUPPORT_URL}/security/skip/station/set`, body).pipe(catchError(this.handleError));\n    }\n    setAllSkipStatus(body) {\n      return this.http.post(`${environment.SUPPORT_URL}/security/skip/station/set/all`, body).pipe(catchError(this.handleError));\n    }\n    getUserId(slNo) {\n      return this.http.get(`${environment.SUPPORT_URL}/router/onboarded?sn=${slNo}`).pipe(catchError(this.handleError));\n    }\n    getFeatureAvailability(id) {\n      return this.http.get(`${environment.SUPPORT_URL}/feature/availability?userId=${id}`).pipe(catchError(this.handleError));\n    }\n    getDeviceStatus(srNo, name) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/app/status?fsn=${srNo}&appName=${name}`).pipe(catchError(this.handleError));\n    }\n    setInstall(body) {\n      return this.http.post(`${environment.SUPPORT_URL}/device/app/install`, body).pipe(catchError(this.handleError));\n    }\n    setUnInstall(body) {\n      return this.http.post(`${environment.SUPPORT_URL}/device/app/uninstall`, body).pipe(catchError(this.handleError));\n    }\n    setEnabled(body) {\n      return this.http.post(`${environment.SUPPORT_URL}/app/enablement/enable`, body).pipe(catchError(this.handleError));\n    }\n    setUnEnabled(body) {\n      return this.http.post(`${environment.SUPPORT_URL}/app/enablement/disable`, body).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    subscribeStatus(orgId, serviceName, locationId) {\n      const ID = this.Sso.getOrg(orgId);\n      locationId = locationId || '';\n      const url = `${environment.SUPPORT_URL}/device/appServices/${serviceName}?${ID}subscriberLocationId=${encodeURIComponent(locationId)}`;\n      return this.http.get(url);\n    }\n    subscribeStatuswithoutsubscriber(orgId, systemInfo) {\n      const ID = this.Sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}systemId=${systemInfo}&includeEnabledStatus=true`;\n      return this.http.get(url);\n    }\n    toggleAppSubscriptionwithoutsubscriber(orgId, systemInfo, params) {\n      const ID = this.Sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites?${ID}systemId=${systemInfo}`;\n      return this.http.put(url, params);\n    }\n    toggleAppSubscription(orgId, serviceName, locationId, toggleVal) {\n      const ID = this.Sso.getOrg(orgId);\n      locationId = locationId || '';\n      const url = `/device/appServices/${serviceName}?${ID}subscriberLocationId=${encodeURIComponent(locationId)}`;\n      return this.http.put(`${environment.SUPPORT_URL}${url}`, {\n        'subscribe': toggleVal\n      });\n    }\n    tileStatus(orgId, serialNumber, locId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/suites/summary?${ID}serialNumber=${serialNumber}&subscriberId=${locId}`);\n    }\n    getArloAccount(orgId, snOrSubid, availInd) {\n      const ID = this.Sso.getOrg(orgId);\n      const suffixUrl = availInd == 1 ? `systemId=${snOrSubid}` : `subscriberId=${snOrSubid}`;\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}${suffixUrl}&includeEnabledStatus=true`);\n    }\n    getArloOverallStatus() {\n      return this.http.get(`${environment.SUPPORT_URL}/partner/feature/arlo/health`);\n    }\n    getArloDevice(userId) {\n      return this.http.get(`${environment.SUPPORT_URL}/partner/feature/arlo/devices?userId=${userId}`);\n    }\n    updateArloDevice(deviceId) {\n      return this.http.get(`${environment.SUPPORT_URL}/partner/feature/arlo/device/health?deviceId=${deviceId}`);\n    }\n    updateArloPostDevice(deviceId) {\n      return this.http.post(`${environment.SUPPORT_URL}/partner/feature/arlo/device/health`, {\n        deviceId: deviceId\n      });\n    }\n    setEnableStatus(orgId, serialNumber, input) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/iq-suites/container?${ID}systemId=${serialNumber}`, input);\n    }\n    getUserEmail(subId) {\n      return this.http.get(`${environment.API_BASE_URL}/admin/user/${subId}`).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    sendEmail([to, subject, content, replyTo]) {\n      const inp = {\n        to: to,\n        subject: subject,\n        content: content,\n        replyTo: replyTo\n      };\n      return this.http.post(`${environment.SUPPORT_URL}/filemanage/email`, inp).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    pageErrorHandle(err) {\n      var _a, _b;\n      if (typeof err === 'string' && err) {\n        return err;\n      }\n      let errorInfo;\n      if ((_a = err === null || err === void 0 ? void 0 : err.error) === null || _a === void 0 ? void 0 : _a.errorDesc) {\n        errorInfo = `${(_b = err === null || err === void 0 ? void 0 : err.error) === null || _b === void 0 ? void 0 : _b.errorDesc}`;\n      } else if (err.error != undefined && err.error != null && typeof err.error == 'string') {\n        errorInfo = `${err.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.error != undefined && typeof err.error.error == 'string') {\n        errorInfo = `${err.error.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'string') {\n        errorInfo = `${err.error.fault}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'object' && err.error.fault.faultstring != undefined && typeof err.error.fault.faultstring == 'string') {\n        errorInfo = `${err.error.fault.faultstring}`;\n      } else if (err.error && err.error.errorMessage) {\n        errorInfo = err.error.errorMessage;\n      } else if (err.statusText == 'Unknown Error' && err.status == '0') {\n        // errorInfo = \"Unknown Error - Please refresh the page\"; // remove later\n        errorInfo = \"An unknown error has occurred. Refresh the page to try again\";\n      } else if (err.error != undefined) {\n        errorInfo = `${err.error.message}`;\n      } else {\n        errorInfo = `${err.message}`;\n      }\n      return errorInfo != 'undefined' && errorInfo.length ? errorInfo : Object.values(this.flatten(err)).join(' - ');\n    }\n    traverseAndFlatten(currentNode, target, flattenedKey) {\n      for (var key in currentNode) {\n        if (currentNode.hasOwnProperty(key)) {\n          var newKey;\n          if (flattenedKey === undefined) {\n            newKey = key;\n          } else {\n            newKey = flattenedKey + '.' + key;\n          }\n          var value = currentNode[key];\n          if (typeof value === \"object\") {\n            this.traverseAndFlatten(value, target, newKey);\n          } else {\n            target[newKey] = value;\n          }\n        }\n      }\n    }\n    flatten(obj) {\n      let flattenedObject = {};\n      try {\n        this.traverseAndFlatten(obj, flattenedObject);\n      } catch (ex) {\n        flattenedObject = {};\n      }\n      return flattenedObject;\n    }\n    getdevices(serialnumber, orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(environment.SUPPORT_URL + \"/device/client/all\" + `?${ID}serialNumber=${serialnumber}`).pipe(catchError(this.handleError));\n    }\n    getSecurityListByRole(userId, roleId) {\n      return this.http.get(`${environment.SUPPORT_URL}/security/rolepolicy/settings/list?userId=${userId}&roleId=${roleId}`).pipe(catchError(this.handleError));\n    }\n    setSecuritySettingsByRole(body) {\n      return this.http.post(`${environment.SUPPORT_URL}/security/rolepolicy/setting/set`, body).pipe(catchError(this.handleError));\n    }\n    errorHandler(err) {\n      /* if(err.status == 400){\r\n        this.alertMessage = this.language.Bad_Request;\r\n      }if(err.status == 498){\r\n        this.alertMessage = this.language.token_invalid;\r\n      }if(err.status == 499){\r\n        this.alertMessage = this.language['need a token']\r\n      }if(err.status == 500){\r\n        this.alertMessage = this.language.Microservice_issues;\r\n      } */\n      if ((err === null || err === void 0 ? void 0 : err.status) === 401) {\n        return 'Access Denied';\n      } else if ((err === null || err === void 0 ? void 0 : err.status) === 504) {\n        return 'This alert is already trusted and requires no further action.';\n      } else if (err === null || err === void 0 ? void 0 : err.status) {\n        return this.Sso.pageErrorHandle(err);\n      }\n    }\n  }\n  ProtectIqService.ɵfac = function ProtectIqService_Factory(t) {\n    return new (t || ProtectIqService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  ProtectIqService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProtectIqService,\n    factory: ProtectIqService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProtectIqService;\n})();","map":null,"metadata":{},"sourceType":"module"}