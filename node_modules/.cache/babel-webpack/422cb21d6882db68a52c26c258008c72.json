{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as constants from '../../../../shared/constants/marketing.constants';\nimport * as AWS from 'aws-sdk';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/sso-auth.service\";\nimport * as i2 from \"./../../../../shared/services/marketing-api.sevice\";\nexport let MarketingExploreCommonService = /*#__PURE__*/(() => {\n  class MarketingExploreCommonService {\n    constructor(sso, marketingApiService) {\n      this.sso = sso;\n      this.marketingApiService = marketingApiService;\n    }\n    //QUERY PARAMS ASSIGNER\n    queryParamsAssigner(url) {\n      // let org_id = this.sso.getOrgId();\n      let period = this.marketingApiService.getPeriod();\n      let region = this.marketingApiService.getRegion();\n      let location = this.marketingApiService.getLocation();\n      if (region != 'All' && location != 'All') {\n        return `${url}period=${period}&region=${region.replace('&', '%26')}&location=${location.replace('&', '%26')}`;\n      } else if (region != 'All') {\n        return `${url}period=${period}&region=${region.replace('&', '%26')}`;\n      } else {\n        return `${url}period=${period}`;\n      }\n    }\n    //QUERY PARAMS ASSIGNER\n    queryParamsAssignerHome(url) {\n      // let org_id = this.sso.getOrgId();\n      let period = this.marketingApiService.getPeriod();\n      let region = this.marketingApiService.getRegion();\n      let location = this.marketingApiService.getLocation();\n      return `${url}period=${'last-30d'}`;\n    }\n    //churn risk w/o period\n    queryParamsWOPeriodAssigner(url) {\n      //let org_id = this.sso.getOrgId();\n      let period = this.marketingApiService.getPeriod();\n      let region = this.marketingApiService.getRegion();\n      let location = this.marketingApiService.getLocation();\n      if (region != 'All' && location != 'All') {\n        return `${url}region=${region.replace('&', '%26')}&location=${location.replace('&', '%26')}`;\n      } else if (region != 'All') {\n        return `${url}region=${region.replace('&', '%26')}`;\n      } else {\n        return `${url}`;\n      }\n    }\n    queryParamsWithoutPeriod(url) {\n      // let org_id = this.sso.getOrgId();\n      let region = this.marketingApiService.getRegion();\n      let location = this.marketingApiService.getLocation();\n      if (region != 'All' && location != 'All') {\n        return `${url}region=${region.replace('&', '%26')}&location=${location.replace('&', '%26')}`;\n      } else if (region != 'All') {\n        return `${url}region=${region.replace('&', '%26')}`;\n      } else {\n        return `${url}`;\n      }\n    }\n    // OBJECT SUM\n    sumOfObjectValues(obj) {\n      let count = Object.keys(obj).length;\n      return count ? Object.values(obj).reduce((a, b) => a + b) : 0;\n    }\n    // DATA CONVERTION \n    monthStartEndCategoriesCreator(month) {\n      let monthArray = constants.monthsArray;\n      let monthDataArray = month.split('-');\n      let monthNumber = monthArray.indexOf(monthDataArray[0]);\n      let yearNumber = '20' + monthDataArray[1];\n      let lastDayofMonth = this.lastdayofMonth(yearNumber, monthNumber);\n      let startDate = `${yearNumber}-${monthNumber > 9 ? monthNumber : '0' + monthNumber}-01`;\n      let endDate = `${yearNumber}-${monthNumber > 9 ? monthNumber : '0' + monthNumber}-${lastDayofMonth}`;\n      let returnObj = {\n        startDate: startDate,\n        endDate: endDate\n      };\n      localStorage.setItem('aquiredTier', `${yearNumber}-${monthNumber > 9 ? monthNumber : '0' + monthNumber}`);\n      return returnObj;\n    }\n    lastdayofMonth(year, month) {\n      return new Date(year, month, 0).getDate();\n    }\n    // GAMING REPLACER FUNCTION\n    gamingReplacer(string) {\n      let removeGaming = string.replace('Gaming', '');\n      removeGaming = removeGaming.replace('gaming', '');\n      let removeGaming1 = removeGaming.replace('(', '');\n      let returnStr = removeGaming1.replace(')', '');\n      return returnStr;\n    }\n    //  PERCENTAGE CALCULATOR FOR ARRAY,OBJECT\n    arraysObjectsPercentageCalculator(obj, value, digit) {\n      let numbersArray = obj;\n      if (typeof obj == 'object') {\n        numbersArray = Object.values(obj);\n      }\n      const reducer = (accumulator, currentValue) => accumulator + currentValue;\n      let total = numbersArray.reduce(reducer, 0);\n      return (100 * value / total).toFixed(digit ? digit : 2);\n    }\n    // PERCENTAGE CALCULATER FOR VALUES\n    valuesPercentageCalculator(value, wholeValue, digit) {\n      let percentage = (100 * value / wholeValue).toFixed(digit ? digit : 2);\n      return isNaN(percentage) ? 0.0 : percentage;\n    }\n    // URL DOWLOADER\n    downloaderFuntion(filename) {\n      let params = {\n        Bucket: environment.CMC_DOWNLOAD_CSV_BUCKET,\n        Key: filename.split('/').pop(),\n        Expires: 60 * 15\n      };\n      let s3 = new AWS.S3({\n        accessKeyId: environment.CMC_DOWNLOAD_CSV_AWS_ACCESS_KEY,\n        secretAccessKey: environment.CMC_DOWNLOAD_CSV_AWS_ACCESS_SECRET\n      });\n      let file = s3.getSignedUrl('getObject', params, function (error, data) {\n        error != null ? alert('Failed') : window.open(data);\n      });\n    }\n    downLoadFileFunction(data, type, fileName) {\n      let blob = new Blob([data], {\n        type: type\n      });\n      let url = window.URL.createObjectURL(blob);\n      let link = document.createElement('a');\n      link.href = url;\n      link.download = fileName + '.csv'; // put file name here\n      //  console.log(link.download)\n      link.click();\n    }\n    // NULL HANDLER FOR OBJECT\n    objectNullHandler(object) {\n      for (const property in object) {\n        object[property] = object[property] ? object[property] : 0;\n      }\n      return object;\n    }\n    // NULL HANDLER FOR ARRAY\n    arrayNullHandler(array) {\n      array.forEach(el => {\n        el = el ? el : 0;\n      });\n      return array;\n    }\n    arraySlicer(array, startPoint, endPoint) {\n      if (array.length > endPoint) {\n        return array.slice(startPoint - 1, endPoint);\n      } else {\n        return array;\n      }\n    }\n  }\n  MarketingExploreCommonService.ɵfac = function MarketingExploreCommonService_Factory(t) {\n    return new (t || MarketingExploreCommonService)(i0.ɵɵinject(i1.SsoAuthService), i0.ɵɵinject(i2.MarketingApiService));\n  };\n  MarketingExploreCommonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MarketingExploreCommonService,\n    factory: MarketingExploreCommonService.ɵfac,\n    providedIn: 'root'\n  });\n  return MarketingExploreCommonService;\n})();","map":null,"metadata":{},"sourceType":"module"}