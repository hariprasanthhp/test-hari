{"ast":null,"code":"import { assign, forEach } from 'min-dash';\n\n/**\n * A handler that toggles the collapsed state of an element\n * and the visibility of all its children.\n *\n * @param {Modeling} modeling\n */\nexport default function ToggleShapeCollapseHandler(modeling) {\n  this._modeling = modeling;\n}\nToggleShapeCollapseHandler.$inject = ['modeling'];\nToggleShapeCollapseHandler.prototype.execute = function (context) {\n  var shape = context.shape,\n    children = shape.children;\n\n  // recursively remember previous visibility of children\n  context.oldChildrenVisibility = getElementsVisibilityRecursive(children);\n\n  // toggle state\n  shape.collapsed = !shape.collapsed;\n\n  // recursively hide/show children\n  var result = setHiddenRecursive(children, shape.collapsed);\n  return [shape].concat(result);\n};\nToggleShapeCollapseHandler.prototype.revert = function (context) {\n  var shape = context.shape,\n    oldChildrenVisibility = context.oldChildrenVisibility;\n  var children = shape.children;\n\n  // recursively set old visability of children\n  var result = restoreVisibilityRecursive(children, oldChildrenVisibility);\n\n  // retoggle state\n  shape.collapsed = !shape.collapsed;\n  return [shape].concat(result);\n};\n\n// helpers //////////////////////\n\n/**\n * Return a map { elementId -> hiddenState}.\n *\n * @param {Array<djs.model.Shape>} elements\n *\n * @return {Object}\n */\nfunction getElementsVisibilityRecursive(elements) {\n  var result = {};\n  forEach(elements, function (element) {\n    result[element.id] = element.hidden;\n    if (element.children) {\n      result = assign({}, result, getElementsVisibilityRecursive(element.children));\n    }\n  });\n  return result;\n}\nfunction setHiddenRecursive(elements, newHidden) {\n  var result = [];\n  forEach(elements, function (element) {\n    element.hidden = newHidden;\n    result = result.concat(element);\n    if (element.children) {\n      result = result.concat(setHiddenRecursive(element.children, element.collapsed || newHidden));\n    }\n  });\n  return result;\n}\nfunction restoreVisibilityRecursive(elements, lastState) {\n  var result = [];\n  forEach(elements, function (element) {\n    element.hidden = lastState[element.id];\n    result = result.concat(element);\n    if (element.children) {\n      result = result.concat(restoreVisibilityRecursive(element.children, lastState));\n    }\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}