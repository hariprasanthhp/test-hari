{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CcochartService = /*#__PURE__*/(() => {\n  class CcochartService {\n    constructor(http) {\n      this.http = http;\n    }\n    GetBipErrorn(query) {\n      return this.http.get(`${environment.API_BASE_URL}health/reports/biperror?${query}`).pipe(catchError(this.handleError));\n    }\n    GetNotAtAttainable(query) {\n      return this.http.get(`${environment.API_BASE_URL}health/reports/dsl/lowrate?${query}`).pipe(catchError(this.handleError));\n    }\n    GetNotAtSNR(query) {\n      return this.http.get(`${environment.API_BASE_URL}health/reports/dsl/lowsnr?${query}`).pipe(catchError(this.handleError));\n    }\n    BipErrornew(query) {\n      let query1 = query + \"&countBy=interface\";\n      return this.http.get(`${environment.API_BASE_URL}health/reports/biperror/count?${query1}`).pipe(catchError(this.handleError));\n    }\n    callRestApi(endpoint, filters) {\n      return this.http.get(`${endpoint}`).pipe(catchError(this.handleError));\n    }\n    GetTimeseries() {\n      return this.http.get(`${environment.API_BASE_URL}health/timeseries`);\n    }\n    GetTimeseriesTableData(query) {\n      return this.http.get(`${environment.API_BASE_URL}health/reports/toponts?${query}`);\n    }\n    GetTop5ONTs(port, system) {\n      return this.http.get(`${environment.API_BASE_URL}cnap/invmgr/discoveredonts/state/toponts?port=${port}&system=${system}`);\n    }\n    // GetTimeseriesTableData(query) {\n    //   return this.http.get(`${environment.API_BASE_URL}health/reports/toponts?${query}`)\n    // }\n    GetPacketdroppedn(query1, page) {\n      let query;\n      if (page == 'pon') {\n        query = query1 + '&interfaceCategory=pon';\n        return this.http.get(`${environment.API_BASE_URL}health/reports/packetsdropped?${query}`).pipe(catchError(this.handleError));\n      } else if (page == 'ae') {\n        query = query1 + '&interfaceCategory=ae';\n        return this.http.get(`${environment.API_BASE_URL}health/reports/packeterrors?${query}`).pipe(catchError(this.handleError));\n      } else {\n        query = query1 + '&interfaceCategory=ethernet';\n        return this.http.get(`${environment.API_BASE_URL}health/reports/packeterrors?${query}`).pipe(catchError(this.handleError));\n      }\n    }\n    ///reports/utilization/thresholdexceededcount  &min=-1\n    Getutilizationthresholdexceededcount(query1, page) {\n      let query;\n      if (page == 'pon') query = query1 + '&interfaceCategory=pon';else if (page == 'ae') query = query1 + '&interfaceCategory=ae';else if (page == 'dsl') query = query1 + '&interfaceCategory=dsl';else query = query1 + '&interfaceCategory=ethernet';\n      return this.http.get(`${environment.API_BASE_URL}health/reports/utilization/thresholdexceededcount?${query}`).pipe(catchError(this.handleError));\n    }\n    GetAffectedPorts(time, endtime, page) {\n      return this.http.get(`${environment.API_BASE_URL}health/reports/utilization/thresholdexceeded?tenant=0&granularity=15min&startTime=${time}&endTime=${endtime}&interfaceCategory=${page}`).pipe(catchError(this.handleError));\n    }\n    // reports/utilization\n    GetUtilization(query) {\n      return this.http.get(`${environment.API_BASE_URL}health/reports/utilization?${query}`).pipe(catchError(this.handleError));\n    }\n    GetThreshold(query, page) {\n      query = query + '&interfaceCategory=ae';\n      return this.http.get(`${environment.API_BASE_URL}health/reports/utilization/thresholdexceededcount?${query}`).pipe(catchError(this.handleError));\n    }\n    GetPacket(query, page) {\n      query = query + '&interfaceCategory=ae';\n      return this.http.get(`${environment.API_BASE_URL}health/reports/packeterrors?${query}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      // Return obseravle with an error message;\n      return throwError(error);\n    }\n  }\n  CcochartService.ɵfac = function CcochartService_Factory(t) {\n    return new (t || CcochartService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  CcochartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CcochartService,\n    factory: CcochartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CcochartService;\n})();","map":null,"metadata":{},"sourceType":"module"}