{"ast":null,"code":"'use strict';\n\nvar cmdHelper = require('./CmdHelper'),\n  elementHelper = require('./ElementHelper');\nvar is = require('bpmn-js/lib/util/ModelUtil').is;\nvar ExtensionElementsHelper = {};\nvar getExtensionElements = function (bo) {\n  return bo.get('extensionElements');\n};\nExtensionElementsHelper.getExtensionElements = function (bo, type) {\n  var extensionElements = getExtensionElements(bo);\n  if (typeof extensionElements !== 'undefined') {\n    var extensionValues = extensionElements.get('values');\n    if (typeof extensionValues !== 'undefined') {\n      var elements = extensionValues.filter(function (value) {\n        return is(value, type);\n      });\n      if (elements.length) {\n        return elements;\n      }\n    }\n  }\n};\nExtensionElementsHelper.addEntry = function (bo, element, entry, bpmnFactory) {\n  var extensionElements = bo.get('extensionElements');\n\n  // if there is no extensionElements list, create one\n  if (!extensionElements) {\n    // TODO: Ask Daniel which operation costs more\n    extensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n      values: [entry]\n    }, bo, bpmnFactory);\n    return {\n      extensionElements: extensionElements\n    };\n  } else {\n    // add new failedJobRetryExtensionElement to existing extensionElements list\n    return cmdHelper.addElementsTolist(element, extensionElements, 'values', [entry]);\n  }\n};\nExtensionElementsHelper.removeEntry = function (bo, element, entry) {\n  var extensionElements = bo.get('extensionElements');\n  if (!extensionElements) {\n    // return an empty command when there is no extensionElements list\n    return {};\n  }\n  return cmdHelper.removeElementsFromList(element, extensionElements, 'values', 'extensionElements', [entry]);\n};\nmodule.exports = ExtensionElementsHelper;","map":null,"metadata":{},"sourceType":"script"}