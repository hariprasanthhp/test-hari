{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let IssuesService = /*#__PURE__*/(() => {\n  class IssuesService {\n    constructor(http, Sso) {\n      this.http = http;\n      this.Sso = Sso;\n    }\n    setIssues(issueData) {\n      this.issues = issueData;\n    }\n    getIssues() {\n      return this.issues;\n    }\n    setDeviceIssues(issues) {\n      this.DeviceIsses = issues;\n    }\n    getDeviceIssues() {\n      return this.DeviceIsses;\n    }\n    getissues(orgId, serialNumber, SubscriberId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(environment.SUPPORT_URL + \"/subscriber/issues\" + `?${ID}serialNumber=${serialNumber}&subscriberId=${SubscriberId}`).pipe(catchError(this.handleError));\n    }\n    putissues(orgId, data) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/subscriber/issues/all_issues?${ID}`, data).pipe(catchError(this.handleError));\n      // return this.issuselist;\n      //  return this.http.put(`${environment.SUPPORT_URL}/subscriber/issues/all_issues?${orgId}`, data).pipe(\n      //   catchError(this.handleError)\n      //   );\n      //return this.http.get(environment.SUPPORT_URL+\"/issues/all_issues\"+`?${ID}serialNumber=${serialNumber}&subscriberId=${SubscriberId}`).pipe(\n    }\n\n    topologyValue(orgId, data) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.put(environment.SUPPORT_URL + \"/subscriber/topology\" + `?${ID}`, data).pipe(catchError(this.handleError));\n    }\n    getClientDetails(orgId, serialNumber) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(environment.SUPPORT_URL + \"/device/client/all\" + `?${ID}serialNumber=${serialNumber}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    getQoeSummary(input) {\n      const {\n        sn,\n        orgId,\n        mac,\n        period,\n        start,\n        end,\n        tz\n      } = input;\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/qoe/subscriber-experience/summary?${ID}serialNumber=${sn}&router_mac=${mac}&period=${period}&startTime=${start}&endTime=${end}&timeZoneOffset=${tz}`).pipe(catchError(this.handleError));\n    }\n    rebootAndUpgradeEvent(orgId, sn) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-systools/rebootAndUpgradeEvent?${ID}serialNumber=${sn}`).pipe(catchError(this.handleError));\n    }\n    getAverageScore(input) {\n      const {\n        sn,\n        orgId,\n        mac,\n        period,\n        start,\n        end,\n        tz\n      } = input;\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/qoe/subscriber-experience/average-efficiency-score?${ID}serialNumber=${sn}&router_mac=${mac}&period=${period}&startTime=${start}&endTime=${end}&timeZoneOffset=${tz}`).pipe(catchError(this.handleError));\n    }\n  }\n  IssuesService.ɵfac = function IssuesService_Factory(t) {\n    return new (t || IssuesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  IssuesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IssuesService,\n    factory: IssuesService.ɵfac,\n    providedIn: 'root'\n  });\n  return IssuesService;\n})();","map":null,"metadata":{},"sourceType":"module"}