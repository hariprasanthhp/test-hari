{"ast":null,"code":"import CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport ImportSubProcessHandler from './cmd/ImportSubProcessHandler';\nimport DeleteSubProcessHandler from './cmd/DeleteSubProcessHandler';\nimport { is } from 'bpmn-js/lib/util/ModelUtil';\nimport { find } from 'min-dash';\nconst HIGH_PRIORITY = 2000;\nlet SignavioBehavior = /*#__PURE__*/(() => {\n  class SignavioBehavior extends CommandInterceptor {\n    constructor(bpmnjs, bpmnImporter, canvas, commandStack, eventBus, modeling, translate) {\n      super(eventBus);\n      this._bpmnjs = bpmnjs;\n      commandStack.registerHandler('signavioCompat.importSubProcess', ImportSubProcessHandler);\n      commandStack.registerHandler('signavioCompat.deleteSubProcess', DeleteSubProcessHandler);\n      function isSignavio() {\n        const $attrs = bpmnjs.getDefinitions().$attrs;\n        return find($attrs, function (attr) {\n          return attr === 'http://www.signavio.com';\n        });\n      }\n      this.postExecuted(['shape.toggleCollapse'], HIGH_PRIORITY, event => {\n        if (!isSignavio()) {\n          return;\n        }\n        const shape = event.context.shape;\n        if (!is(shape, 'bpmn:SubProcess')) {\n          return;\n        }\n        var context;\n        if (!shape.collapsed) {\n          // expand\n          const diagram = this.findDiagram(shape.id);\n          if (!diagram) {\n            return;\n          }\n          context = {\n            subProcess: shape,\n            subProcessDiagram: diagram\n          };\n          commandStack.execute('signavioCompat.importSubProcess', context);\n        } else {\n          // collapse\n          context = {\n            subProcess: shape,\n            subProcessDiagram: this.findDiagram(shape.id)\n          };\n          commandStack.execute('signavioCompat.deleteSubProcess', context);\n        }\n      });\n    }\n    findDiagram(id) {\n      var diagrams = this._bpmnjs.getDefinitions().diagrams;\n      return find(diagrams, function (diagram) {\n        const plane = diagram.plane,\n          bpmnElement = plane.bpmnElement;\n        return bpmnElement.id === id;\n      });\n    }\n  }\n  SignavioBehavior.$inject = ['bpmnjs', 'bpmnImporter', 'canvas', 'commandStack', 'eventBus', 'modeling', 'translate'];\n  return SignavioBehavior;\n})();\nexport { SignavioBehavior as default };","map":null,"metadata":{},"sourceType":"module"}