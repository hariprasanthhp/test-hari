{"ast":null,"code":"import { of } from 'rxjs';\nimport * as Highcharts from \"highcharts/highstock\";\n// const $: any = require('jquery');\nimport * as constants from \"../../shared/constants/marketing.constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nrequire('highcharts/highcharts-more')(Highcharts);\nrequire('highcharts/modules/solid-gauge')(Highcharts);\nconst IndicatorsCore = require(\"highcharts/indicators/indicators\");\nIndicatorsCore(Highcharts);\nconst IndicatorZigZag = require(\"highcharts/indicators/zigzag\");\nIndicatorZigZag(Highcharts);\nconst borderRadius = require('highcharts-border-radius');\nborderRadius(Highcharts);\nexport let MarketingCampaignsChartServiceService = /*#__PURE__*/(() => {\n  class MarketingCampaignsChartServiceService {\n    constructor(translateService) {\n      this.translateService = translateService;\n      this.stackedAqiteColors = ['#0027FF', '#5ACFEA'];\n      this.stackedAqiteColors1 = ['#0027FF', '#5ACFEA', '#A3A5ED', '#F7C343'];\n      this.commonHighChartOptions = {\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        responsive: {\n          rules: [{\n            condition: {},\n            chartOptions: {\n              chart: {},\n              subtitle: {\n                text: null\n              },\n              navigator: {\n                enabled: false\n              }\n            }\n          }]\n        }\n      };\n      this.styleOptions = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '12px',\n        color: '#4c4c4c'\n      };\n      this.styleOptions_yaxis = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '13px',\n        color: '#4c4c4c'\n      };\n      this.styleOptions_xaxis = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '13px',\n        color: '#4c4c4c'\n      };\n      this.styleOptions_tooltip = {\n        fontFamily: 'Source Sans Pro,Regular',\n        fontSize: '13px',\n        color: '#4c4c4c'\n      };\n      this.xAxisLabels = {\n        style: {\n          fontSize: '13px'\n        },\n        autoRotationLimit: -30\n      };\n      this.linePlotOptions = {\n        states: {\n          inactive: {\n            enabled: false\n          }\n        }\n      };\n      this.plotOptions = {\n        stacking: 'normal',\n        series: {\n          allowPointSelect: true\n        },\n        states: {\n          inactive: {\n            enabled: false\n          },\n          select: {\n            color: null,\n            borderWidth: 7,\n            borderColor: 'rgb(170, 170, 170)'\n          }\n        }\n      };\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.isRerender = true;\n      });\n    }\n    areaChartOptions() {\n      let object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'area',\n          border: 0\n        },\n        plotOptions: {\n          series: {\n            fillColor: {\n              linearGradient: [0, 0, 0, 450],\n              stops: [[0, '#5ACFEA'], [1, new Highcharts.Color('#5ACFEA').setOpacity(0).get('rgba')]]\n            },\n            marker: {\n              enabled: false\n            }\n          }\n        },\n        legend: {\n          symbolHeight: .001,\n          symbolWidth: .001,\n          symbolRadius: .001\n        },\n        xAxis: {\n          visible: false\n        },\n        yAxis: {\n          title: {\n            text: 'Conversions (%)'\n          },\n          // lineWidth: 0,\n          gridLineWidth: 0,\n          labels: {\n            enabled: false\n          },\n          plotLines: [{\n            value: 24099,\n            zIndex: 1111,\n            width: 1,\n            dashStyle: \"Dash\",\n            color: '#0027FF',\n            label: {\n              useHTML: true,\n              text: '<button class=\"btn-default primary\" style=\"font-size: 10px; margin-top:4px\">Target</button>',\n              align: 'right'\n            }\n          }]\n        },\n        series: [{\n          name: 'Date/Time',\n          color: '#5ACFEA',\n          data: [null, null, null, null, null, 6, 11, 32, 110, 235, 369, 640, 1005, 1436, 2063, 3057, 4618, 4954, 4804, 4761, 4717, 4368, 6444, 10577, 10527, 10475, 10421, 4368, 6444, 10358, 10295, 10104, 11009, 12144, 12555, 13076, 14747, 14747, 17287, 20434, 21004, 24126, 24304, 23464, 23708, 24099, 24357, 24237, 24401, 24344, 23586, 22380, 27387, 27342, 24401, 24344, 23586, 22380, 27387, 27342, 24344, 23586, 22380, 27387, 27342, 24344, 23586, 27387, 27342, 24826, 24605, 25579, 25722, 26662, 26956, 27826, 27912, 28999, 28965, 29224, 29459, 31056, 31982, 32040, 31233, null, null, null, null, null, null, null, null, null, null]\n        }]\n      });\n      //  this.addComment(object)\n      return of(object);\n    }\n    serviceTierTechnologyOptions(data) {\n      let data_cat = [];\n      let data_ser = [];\n      let seriesdata = [];\n      for (var i = 0; i < data.length; i++) {\n        data_cat.push(data[i].channelName);\n        data_ser.push(data[i].channelSize);\n      }\n      // console.log(data_ser, \"series\")\n      // console.log(data_cat, 'categories')\n      let serviceTierTechnologyOptions = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        colors: this.stackedAqiteColors,\n        chart: {\n          type: 'column',\n          style: Object.assign({}, this.styleOptions),\n          container: {\n            onclick: null\n          }\n        },\n        xAxis: {\n          categories: data_cat,\n          title: {\n            text: this.language.segmentChannels,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          },\n          labels: Object.assign(Object.assign({}, this.xAxisLabels), {\n            rotation: -30,\n            style: Object.assign({}, this.styleOptions_xaxis)\n          })\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: {\n          series: Object.assign(Object.assign({}, this.plotOptions), {\n            allowPointSelect: false,\n            maxPointWidth: 24,\n            point: {\n              events: {}\n            },\n            states: {\n              inactive: {\n                enabled: false\n              }\n            }\n          }),\n          column: {\n            borderWidth: 0,\n            minPointLength: 3\n          }\n        },\n        // series: data.series,\n        series: [{\n          showInLegend: false,\n          data: data_ser,\n          name: ''\n        }],\n        tooltip: {\n          formatter: function () {\n            return `${data_cat[this.point.x]}: <b>${Highcharts.numberFormat(this.point.y, 0, '', ',')}</b> <br/>`;\n          },\n          style: Object.assign({}, this.styleOptions_tooltip)\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language.Audience_Members,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions)\n          },\n          labels: {\n            // formatter: function () {\n            //   var label = this.axis.defaultLabelFormatter.call(this);\n            //   // Use thousands separator for four-digit numbers too\n            //   if (/^[0-9]{4,}$/.test(label)) {\n            //     return Highcharts.numberFormat(this.value, 0);\n            //   }\n            //   return label;\n            // },\n            style: Object.assign({}, this.styleOptions_yaxis)\n          },\n          // tooltip: {\n          //   formatter: function () {\n          //     return `${data.categories[this.point.x]}: <b>${Highcharts.numberFormat(this.point.y, 0, '', ',')} Subscribers</b> <br/>`;\n          //   },\n          //   style: {\n          //     ...this.styleOptions_tooltip\n          //   }\n          // },\n          gridLineColor: '#E6E6E6',\n          stackLabels: {\n            enabled: true,\n            allowOverlap: true,\n            style: Object.assign({}, this.styleOptions)\n          },\n          reversedStacks: false\n        }\n      });\n      return of(serviceTierTechnologyOptions);\n    }\n    stackedBarStreamChartOptions() {\n      let object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'column',\n          inverted: false\n        },\n        colors: this.stackedAqiteColors,\n        yAxis: {\n          labels: {\n            formatter: function () {\n              {\n                return this.value.toFixed(0) >= 1000 ? (this.value / 1000).toFixed(0) + 'K' : this.value.toFixed(0);\n              }\n            }\n          },\n          title: {\n            style: {\n              fontSize: '10px',\n              font: 'Source Sans Pro,Regular'\n            },\n            text: 'Subscribers'\n          },\n          stackLabels: {\n            enabled: true,\n            style: {\n              fontSize: '10px',\n              font: 'Source Sans Pro,Regular',\n              color: '#4c4c4c'\n            },\n            formatter: function () {\n              return this.total + '%';\n            }\n          }\n        },\n        tooltip: {\n          headerFormat: '<b>{point.x}</b><br/>',\n          pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'\n        },\n        xAxis: {\n          categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n          crosshair: false\n        },\n        legend: {\n          reversed: true\n        },\n        plotOptions: {\n          series: {\n            maxPointWidth: 8,\n            borderRadius: 0,\n            states: {\n              inactive: {\n                enabled: false\n              }\n            }\n          },\n          column: {\n            stacking: 'normal',\n            dataLabels: {\n              enabled: false\n            }\n          }\n        },\n        series: [{\n          name: 'Streaming',\n          borderRadiusTopLeft: 30,\n          borderRadiusTopRight: 30,\n          data: [5, 3, 4, 7, 2]\n        }, {\n          name: 'Non-Streaming',\n          data: [2, 2, 3, 2, 1]\n        }]\n      });\n      return of(object);\n    }\n    revenueTrendsOption(data, axixval, text_val, from, to) {\n      // let category = this.addMonthOnCategories(axixval);\n      let aquisationTrendsOption = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: this.stackedAqiteColors,\n        xAxis: {\n          categories: axixval,\n          //  labels: { ...this.xAxisLabels },\n          labels: {\n            rotation: -35\n          },\n          plotBands: [{\n            color: '#F8F8FA',\n            from: from,\n            to: to // End of the plot band\n          }]\n        },\n\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: text_val,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_yaxis)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: Object.assign(Object.assign({}, this.linePlotOptions), {\n          series: {\n            marker: {\n              enabled: false\n            },\n            states: {\n              inactive: {\n                enabled: false\n              }\n            },\n            point: {\n              events: {}\n            }\n          }\n        }),\n        // tooltip: {\n        //   formatter: function () {\n        //     return `${data.categories[this.point.x]}: <b>${Highcharts.numberFormat(this.point.y, 0, '', ',')} Subscribers</b> <br/>`;\n        //   },\n        //   style: {\n        //     ...this.styleOptions_tooltip\n        //   }\n        // },\n        tooltip: {\n          // formatter: function () {\n          //   return `${Highcharts.numberFormat(this.point.y, 0, '', ',')}`;\n          // },\n          // style: {\n          //   ...this.styleOptions_tooltip\n          // }\n          lang: {\n            decimalPoint: '.',\n            thousandsSep: ','\n          }\n        },\n        series: data\n      });\n      if (from == -1) {\n        delete aquisationTrendsOption.xAxis.plotBands;\n      }\n      return of(aquisationTrendsOption);\n    }\n    revenue_campTrendsOption(data, axixval, text_val, from, to) {\n      // let category = this.addMonthOnCategories(axixval);\n      let aquisationTrendsOption = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: this.stackedAqiteColors1,\n        xAxis: {\n          categories: axixval,\n          // labels: { ...this.xAxisLabels },\n          labels: {\n            rotation: -35\n          },\n          plotBands: [{\n            color: '#F8F8FA',\n            from: from,\n            to: to // End of the plot band\n          }]\n        },\n\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: text_val,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_yaxis)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: Object.assign(Object.assign({}, this.linePlotOptions), {\n          series: {\n            marker: {\n              enabled: false\n            },\n            states: {\n              inactive: {\n                enabled: false\n              }\n            },\n            point: {\n              events: {}\n            }\n          }\n        }),\n        // tooltip: {\n        //   formatter: function () {\n        //     return `${data.categories[this.point.x]}: <b>${Highcharts.numberFormat(this.point.y, 0, '', ',')} Subscribers</b> <br/>`;\n        //   },\n        //   style: {\n        //     ...this.styleOptions_tooltip\n        //   }\n        // },\n        // tooltip: {\n        //   formatter: function () {\n        //     return `${Highcharts.numberFormat(this.point.y, 0, '', ',')}`;\n        //   },\n        //   style: {\n        //     ...this.styleOptions_tooltip\n        //   }\n        // },\n        tooltip: {\n          // formatter: function () {\n          //   return `${Highcharts.numberFormat(this.point.y, 0, '', ',')}`;\n          // },\n          // style: {\n          //   ...this.styleOptions_tooltip\n          // }\n          lang: {\n            decimalPoint: '.',\n            thousandsSep: ','\n          }\n        },\n        series: data\n      });\n      if (from == -1) {\n        delete aquisationTrendsOption.xAxis.plotBands;\n      }\n      return of(aquisationTrendsOption);\n    }\n    addMonthOnCategories(categoryArray) {\n      let newMonth;\n      let newCategories = [];\n      categoryArray.forEach(element => {\n        let type = typeof element;\n        let category;\n        if (type == 'object') {\n          element = element[0];\n        }\n        newMonth = element.split('-');\n        category = `${constants.monthsArray[+newMonth[1]]}-${+newMonth[0] - 2000}`;\n        newCategories.push(category);\n      });\n      return newCategories;\n    }\n    triggered(data, axixval, name, val) {\n      let aquisationTrendsOption = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: this.stackedAqiteColors1,\n        xAxis: {\n          categories: axixval,\n          // labels: { ...this.xAxisLabels },\n          labels: {\n            rotation: -35\n          },\n          plotBands: [{\n            color: '#F8F8FA' // Color value\n          }]\n        },\n\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: name,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_yaxis)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: Object.assign(Object.assign({}, this.linePlotOptions), {\n          series: {\n            marker: {\n              enabled: false\n            },\n            states: {\n              inactive: {\n                enabled: false\n              }\n            },\n            point: {\n              events: {}\n            }\n          }\n        }),\n        // tooltip: {\n        //   formatter: function () {\n        //     return `${data.categories[this.point.x]}: <b>${Highcharts.numberFormat(this.point.y, 0, '', ',')} Subscribers</b> <br/>`;\n        //   },\n        //   style: {\n        //     ...this.styleOptions_tooltip\n        //   }\n        // },\n        // tooltip: {\n        //   formatter: function () {\n        //     return `${Highcharts.numberFormat(this.point.y, 0, '', ',')}`;\n        //   },\n        //   style: {\n        //     ...this.styleOptions_tooltip\n        //   }\n        // },\n        tooltip: {\n          // formatter: function () {\n          //   return `${Highcharts.numberFormat(this.point.y, 0, '', ',')}`;\n          // },\n          // style: {\n          //   ...this.styleOptions_tooltip\n          // }\n          lang: {\n            decimalPoint: '.',\n            thousandsSep: ','\n          }\n        },\n        series: data\n      });\n      // if (from == -1) {\n      //   delete aquisationTrendsOption.xAxis.plotBands\n      // }\n      return of(aquisationTrendsOption);\n    }\n    revenuenewTrendsOption(data, axixval, text_val, from, to) {\n      // let category = this.addMonthOnCategories(axixval);\n      let aquisationTrendsOption = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'line',\n          style: Object.assign({}, this.styleOptions)\n        },\n        colors: this.stackedAqiteColors,\n        xAxis: {\n          categories: axixval,\n          //  labels: { ...this.xAxisLabels },\n          labels: {\n            rotation: -35\n          },\n          plotBands: [{\n            color: '#F8F8FA',\n            from: from,\n            to: to // End of the plot band\n          }]\n        },\n\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: text_val,\n            style: Object.assign({\n              stacking: 'normal'\n            }, this.styleOptions_yaxis)\n          },\n          labels: {\n            formatter: function () {\n              var label = this.axis.defaultLabelFormatter.call(this);\n              // Use thousands separator for four-digit numbers too\n              if (/^[0-9]{4,}$/.test(label)) {\n                return Highcharts.numberFormat(this.value, 0);\n              }\n              return label;\n            },\n            style: Object.assign({}, this.styleOptions)\n          }\n        },\n        legend: {\n          reversed: false,\n          itemStyle: Object.assign({}, this.styleOptions)\n        },\n        plotOptions: Object.assign(Object.assign({}, this.linePlotOptions), {\n          series: {\n            marker: {\n              enabled: false\n            },\n            states: {\n              inactive: {\n                enabled: false\n              }\n            },\n            point: {\n              events: {}\n            }\n          }\n        }),\n        // tooltip: {\n        //   formatter: function () {\n        //     return `${data.categories[this.point.x]}: <b>${Highcharts.numberFormat(this.point.y, 0, '', ',')} Subscribers</b> <br/>`;\n        //   },\n        //   style: {\n        //     ...this.styleOptions_tooltip\n        //   }\n        // },\n        tooltip: {\n          formatter: function () {\n            return this.x + '<br>' + '<b>' + `Campaign Audience : $${this.y}` + '</b>';\n          },\n          lang: {\n            decimalPoint: '.',\n            thousandsSep: ','\n          }\n        },\n        series: data\n      });\n      if (from == -1) {\n        delete aquisationTrendsOption.xAxis.plotBands;\n      }\n      return of(aquisationTrendsOption);\n    }\n  }\n  MarketingCampaignsChartServiceService.ɵfac = function MarketingCampaignsChartServiceService_Factory(t) {\n    return new (t || MarketingCampaignsChartServiceService)(i0.ɵɵinject(i1.TranslateService));\n  };\n  MarketingCampaignsChartServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MarketingCampaignsChartServiceService,\n    factory: MarketingCampaignsChartServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return MarketingCampaignsChartServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}