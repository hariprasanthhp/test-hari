{"ast":null,"code":"import * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./wifi-mock-data\";\nvar keyNs = 'sxacc.';\nconst TR_181_DATA_MODEL_NAME = 'tr181';\nconst TR_181_DATA_MODEL_ROOT = 'Device';\nexport let DygraphSiteScanUtilsService = /*#__PURE__*/(() => {\n  class DygraphSiteScanUtilsService {\n    constructor(http, wifiMockData) {\n      this.http = http;\n      this.wifiMockData = wifiMockData;\n      this.getTR181DataModelName = function () {\n        return TR_181_DATA_MODEL_NAME;\n      };\n      this.isTR181 = function (dataModelName) {\n        return this.getTR181DataModelName() === dataModelName;\n      };\n      this.getSerialNumber = function () {\n        var serialNumber = JSON.parse(sessionStorage.getItem('serialNumber'));\n        return serialNumber;\n      };\n      this.getParameterRealAttributeInner = function (path, model, cfg) {\n        //  dd(\"getParameterRealAttributeInner >>> path [ \"+path+\" ] model [ \"+model+\" ]\");\n        var attribute = path.substring(path.lastIndexOf(\".\") + 1, path.length + 1);\n        if (attribute.length < path.length) {\n          //only full path supports alias\n          if (cfg && cfg.parameterSupported) {\n            for (var idx = 0; idx < cfg.parameterSupported.length; idx++) {\n              var paramFilter = cfg.parameterSupported[idx];\n              if (paramFilter && paramFilter.name && new RegExp(paramFilter.name).test(path)) {\n                if (paramFilter.alias && paramFilter.alias.length > 0) {\n                  attribute = paramFilter.alias;\n                } else if (paramFilter.realPath && paramFilter.realPath.length > 0) {\n                  attribute = paramFilter.realPath.substring(paramFilter.realPath.lastIndexOf(\".\") + 1, paramFilter.realPath.length + 1);\n                }\n                break;\n              }\n            }\n          } else {\n            //console.log(\"Missing feature configuration for model [ \" + model + \" ]\");\n          }\n        }\n        return attribute;\n      };\n      this.getParameterRealAttributeBS = function (path) {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        return this.getParameterRealAttributeInner(path, di.modelName, this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n      };\n      this.isFeatureSupportedInner = function (feature, modelName, softwareVersion, configuration) {\n        var result = false;\n        if (feature) {\n          var keys = feature.split(\".\");\n          var iteratedConfig = this.getConfigurationValueInner(feature, configuration);\n          if (iteratedConfig) {\n            //TODO clean up condition below: === true doesn't need check for undefined!\n            if (iteratedConfig.supported != undefined && iteratedConfig.supported === true) {\n              //   if (iteratedConfig.minSwVersion) {\n              //     result = this.compareVersion(softwareVersion, iteratedConfig.minSwVersion) >= 0;\n              //   } else {\n              //     result = true;\n              //   }\n              result = true;\n            }\n          }\n        }\n        return result;\n      };\n      this.isParameterSupportedInner = function (param, model, version, configuration) {\n        if (configuration && configuration.parameterSupported) {\n          for (var idx = 0; idx < configuration.parameterSupported.length; idx++) {\n            var parameterObj = configuration.parameterSupported[idx];\n            var parameterPattern = parameterObj.name;\n            if (parameterPattern) {\n              if (new RegExp(parameterPattern).test(param)) {\n                // if (parameterObj.minSwVersion && version) {\n                //   return (Utils.compareVersion(version, parameterObj.minSwVersion) >= 0);\n                // } else {\n                //   return true;\n                // }\n                return true;\n              }\n            }\n          }\n        } else {\n          //console.log(\"isParameterSupported ... Cannot find feature configuration for \" + model);\n        }\n        return false;\n      };\n      this.getParameterAttributeInner = function (path, attrName, model, cfg) {\n        var realPath = path;\n        if (cfg && cfg.parameterSupported) {\n          for (var idx = 0; idx < cfg.parameterSupported.length; idx++) {\n            var paramFilter = cfg.parameterSupported[idx];\n            if (paramFilter && paramFilter.name && new RegExp(paramFilter.name).test(path)) {\n              return paramFilter[attrName];\n            }\n          }\n        } else {\n          //console.log(\"Missiong feature configuration for model [ \" + model + \" ]\");\n        }\n      };\n      this.getParameterAttributeBS = function (path, attrName) {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        return this.getParameterAttributeInner(path, attrName, di.modelName, this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n      };\n      this.isParameterSupportedBS = function (path, modelName, dataModelName, swversion) {\n        if (modelName == null) {\n          var di = this.getDeviceInfo();\n          if (!di) return false;\n          modelName = di.modelName;\n          swversion = di.softwareVersion;\n          dataModelName = di.dataModelName;\n        }\n        return this.isParameterSupportedInner(path, modelName, swversion, this.getFeatureConfigurationBS(modelName, dataModelName, swversion));\n      };\n      this.isFeatureSupportedBS = function (feature, modelName, dataModelName, swversion) {\n        if (modelName == null) {\n          var di = this.getDeviceInfo();\n          if (!di) return false;\n          modelName = di.modelName;\n          swversion = di.softwareVersion;\n          dataModelName = di.dataModelName;\n        }\n        // console.trace();\n        return this.isFeatureSupportedInner(feature, modelName, swversion, this.getFeatureConfigurationBS(modelName, dataModelName, swversion));\n      };\n      this.is24GWirelessSupported = function () {\n        return this.isFeatureSupportedBS(\"featureSupported.wlan24G\");\n      };\n      this.is5GWirelessSupported = function () {\n        return this.isFeatureSupportedBS(\"featureSupported.wlan5G\");\n      };\n      this.is6GWirelessSupported = function () {\n        return this.isFeatureSupportedBS(\"featureSupported.wlan6G\");\n      };\n      this.get5gPrimaryWlanPath = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        var path = this.getConfigurationValueInner(\"featureSupported.wlan5G.PrimarySSIDPath\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n        if (path) {\n          return path;\n        }\n        var wlanPath = this.get5gWlanPath();\n        if (wlanPath == null || wlanPath.length == 0) {\n          return null;\n        }\n        return wlanPath[0];\n      };\n      this.get6gPrimaryWlanPath = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        var path = this.getConfigurationValueInner(\"featureSupported.wlan6G.PrimarySSIDPath\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n        if (path) {\n          return path;\n        }\n        var wlanPath = this.get6gWlanPath();\n        if (wlanPath == null || wlanPath.length == 0) {\n          return null;\n        }\n        return wlanPath[0];\n      };\n      this.getConfigurationValueInner = function (path, configuration) {\n        var keys = path.split(\".\");\n        var iteratedConfig = configuration;\n        for (var idx = 0; idx < keys.length; idx++) {\n          var key = keys[idx];\n          if (iteratedConfig) {\n            iteratedConfig = iteratedConfig[key];\n          } else {\n            break;\n          }\n        }\n        return iteratedConfig;\n      };\n      this.getFeatureConfigurationBS = function (pModel, dataModelName, swVersion) {\n        var configArr = this.wifiMockData.configurations;\n        ;\n        if (pModel == null) {\n          alert(\"model name cannot be null!\");\n          return;\n        }\n        var defaultFeatureConfig, dftTR181Cfg;\n        var isTR181 = this.isTR181(dataModelName);\n        var firstModelMatchedCfg = null;\n        if (configArr && configArr.length && configArr.length > 0) {\n          for (var idx = 0; idx < configArr.length; idx++) {\n            var featureConfig = configArr[idx];\n            if (featureConfig.models == null) {\n              continue;\n            }\n            if (featureConfig.models == \"default\") {\n              if (this.isTR181(featureConfig.dataModelName)) {\n                dftTR181Cfg = featureConfig;\n              } else {\n                defaultFeatureConfig = featureConfig;\n              }\n              continue;\n            }\n            for (var ii = 0; ii < featureConfig.models.length; ii++) {\n              var modelNameObj = featureConfig.models[ii];\n              var swVersions = featureConfig.swVersions;\n              var isCurTR181 = this.isTR181(featureConfig.dataModelName);\n              if (isTR181 === isCurTR181) {\n                if (\"string\" == typeof modelNameObj) {\n                  if (pModel.toUpperCase() == modelNameObj.toUpperCase()) {\n                    if (swVersions != null) {\n                      if (swVersion != null && swVersions.indexOf(swVersion) >= 0) {\n                        return featureConfig;\n                      }\n                    } else {\n                      firstModelMatchedCfg = featureConfig;\n                    }\n                  }\n                } else {\n                  if (modelNameObj.regex && pModel.match(modelNameObj.regex)) {\n                    if (swVersions != null) {\n                      if (swVersion != null) {\n                        return featureConfig;\n                      }\n                    } else {\n                      firstModelMatchedCfg = featureConfig;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (firstModelMatchedCfg != null) {\n          return firstModelMatchedCfg;\n        }\n        if (this.isTR181(dataModelName)) {\n          return dftTR181Cfg;\n        }\n        return defaultFeatureConfig;\n      };\n      this.getDeviceInfo = function () {\n        var deviceObj = JSON.parse(sessionStorage.getItem('calix.wifi.deviceInfo'));\n        var di = deviceObj;\n        return di;\n      };\n      this.get24gRadioPathCalix = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return \"InternetGatewayDevice.X_000631_Device.WiFi.Radio.1.\";\n        return this.getConfigurationValueInner(\"featureSupported.wlan24G.radioPathCalix\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion)) || \"InternetGatewayDevice.X_000631_Device.WiFi.Radio.1.\";\n      };\n      this.get24gRadioPath = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        var radioPath;\n        if (this.is24GWirelessSupported()) {\n          radioPath = this.getConfigurationValueInner(\"featureSupported.wlan24G.radioPath\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n          if (radioPath == null) {\n            radioPath = this.get24gPrimaryWlanPath();\n          }\n        }\n        return radioPath;\n      };\n      this.get24gWlanPath = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        if (this.is24GWirelessSupported()) {\n          return this.getConfigurationValueInner(\"featureSupported.wlan24G.path\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n        }\n      };\n      this.get5gWlanPath = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        if (this.is5GWirelessSupported()) {\n          return this.getConfigurationValueInner(\"featureSupported.wlan5G.path\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n        }\n      };\n      this.get6gWlanPath = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        if (this.is6GWirelessSupported()) {\n          return this.getConfigurationValueInner(\"featureSupported.wlan6G.path\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n        }\n      };\n      this.get5gRadioPathCalix = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return \"InternetGatewayDevice.X_000631_Device.WiFi.Radio.2.\";\n        return this.getConfigurationValueInner(\"featureSupported.wlan5G.radioPathCalix\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion)) || \"InternetGatewayDevice.X_000631_Device.WiFi.Radio.2.\";\n      };\n      this.get6gRadioPathCalix = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return \"InternetGatewayDevice.X_000631_Device.WiFi.Radio.3.\";\n        return this.getConfigurationValueInner(\"featureSupported.wlan6G.radioPathCalix\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion)) || \"InternetGatewayDevice.X_000631_Device.WiFi.Radio.3.\";\n      };\n      this.get24gPrimaryWlanPath = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        var path = this.getConfigurationValueInner(\"featureSupported.wlan24G.PrimarySSIDPath\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n        if (path) {\n          return path;\n        }\n        var wlanPath = this.get24gWlanPath();\n        if (wlanPath == null || wlanPath.length == 0) {\n          return null;\n        }\n        return wlanPath[0];\n      };\n      this.get5gRadioPath = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        var radioPath;\n        if (this.is5GWirelessSupported()) {\n          radioPath = this.getConfigurationValueInner(\"featureSupported.wlan5G.radioPath\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n          if (radioPath == null) {\n            radioPath = this.get5gPrimaryWlanPath();\n          }\n        }\n        return radioPath;\n      };\n      this.get6gRadioPath = function () {\n        var di = this.getDeviceInfo();\n        if (!di) return null;\n        var radioPath;\n        if (this.is6GWirelessSupported()) {\n          radioPath = this.getConfigurationValueInner(\"featureSupported.wlan6G.radioPath\", this.getFeatureConfigurationBS(di.modelName, di.dataModelName, di.softwareVersion));\n          if (radioPath == null) {\n            radioPath = this.get6gPrimaryWlanPath();\n          }\n        }\n        return radioPath;\n      };\n      this.getValueByPath = function (object, path) {\n        var value = object,\n          pathArray,\n          i,\n          k,\n          match,\n          re;\n        if (!_.isString(path)) return object;\n        pathArray = path.split('.');\n        if (value == null) return null;\n        for (i = 0; i < pathArray.length; i++) {\n          if (pathArray[i].length == 0) continue;\n          match = /^\\/(.*)\\/$/.exec(pathArray[i]);\n          if (match == null) {\n            // normal path\n            value = value[pathArray[i]];\n          } else {\n            // regexp, e.g. /xxx/\n            re = new RegExp(match[1]);\n            var mk = null;\n            for (k in value) {\n              if (re.test(k)) {\n                mk = k;\n                break;\n              }\n            }\n            if (mk == null) value = null;else value = value[mk];\n          }\n          if (value == null) break;\n        }\n        return value;\n      };\n    }\n  }\n  DygraphSiteScanUtilsService.ɵfac = function DygraphSiteScanUtilsService_Factory(t) {\n    return new (t || DygraphSiteScanUtilsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.wifiMockData));\n  };\n  DygraphSiteScanUtilsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DygraphSiteScanUtilsService,\n    factory: DygraphSiteScanUtilsService.ɵfac,\n    providedIn: 'root'\n  });\n  return DygraphSiteScanUtilsService;\n})();","map":null,"metadata":{},"sourceType":"module"}