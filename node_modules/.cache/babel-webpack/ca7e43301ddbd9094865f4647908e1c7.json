{"ast":null,"code":"import { DatePipe } from '@angular/common';\nimport { throwError, timer } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"../../service/issue.service\";\nimport * as i3 from \"src/app/shared/services/sso-auth.service\";\nimport * as i4 from \"src/app/sys-admin/services/common.service\";\nimport * as i5 from \"@angular/common/http\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"src/app/shared/services/export-excel.service\";\nimport * as i8 from \"@angular/platform-browser\";\nimport * as i9 from \"../../historyreport/service/history-chart-options.service\";\nimport * as i10 from \"src/app-services/routing.services\";\nimport * as i11 from \"@angular/router\";\nimport * as i12 from \"@angular/common\";\nimport * as i13 from \"../../alarms-shared/common-realtime-filter/common-realtime-filter.component\";\nimport * as i14 from \"./connected-alarms/connected-alarms.component\";\nfunction CurrentIssuesComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelementStart(1, \"span\", 4);\n    i0.ɵɵelement(2, \"img\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function CurrentIssuesComponent_div_0_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.closeAlert();\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r0.errorInfo, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction CurrentIssuesComponent_div_1_app_connected_alarms_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-connected-alarms\");\n  }\n}\nfunction CurrentIssuesComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"div\", 9);\n    i0.ɵɵelementStart(2, \"div\", 10);\n    i0.ɵɵelement(3, \"app-common-realtime-filter\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 12);\n    i0.ɵɵelementStart(5, \"div\", 13);\n    i0.ɵɵelementStart(6, \"div\", 14);\n    i0.ɵɵtemplate(7, CurrentIssuesComponent_div_1_app_connected_alarms_7_Template, 1, 0, \"app-connected-alarms\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"activeTab\", ctx_r1.activeTab);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.activeTab === \"alarms\");\n  }\n}\nfunction CurrentIssuesComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.language[\"Access denied due to RBAC. Please consult your Organization Administrator for access.\"], \" \");\n  }\n}\nexport let CurrentIssuesComponent = /*#__PURE__*/(() => {\n  class CurrentIssuesComponent {\n    constructor(translateService, issueService, ssoService, commonOrgService, http, fb, exportExcelService, titleService, chartOptionService, routerService, router, route, location) {\n      this.translateService = translateService;\n      this.issueService = issueService;\n      this.ssoService = ssoService;\n      this.commonOrgService = commonOrgService;\n      this.http = http;\n      this.fb = fb;\n      this.exportExcelService = exportExcelService;\n      this.titleService = titleService;\n      this.chartOptionService = chartOptionService;\n      this.routerService = routerService;\n      this.router = router;\n      this.route = route;\n      this.location = location;\n      //@ViewChild(CommonRealtimeFilterComponent) hello;\n      //Input() visible:boolean = false\n      this.isDev = false;\n      this.baseUrl = `${environment.API_BASE_URL}analytics-engine/`;\n      this.loading = true;\n      this.locked = false;\n      this.interval = 15 * 1000;\n      this.regionsDataArray = [\"All\"];\n      this.regionArray = [\"All\"];\n      this.locationDataArray = [\"All\"];\n      this.systemDataArray = [\"All\"];\n      this.limit = 10;\n      this.systemStatusData = [{\n        id: 'connected',\n        name: 'Connected'\n      }, {\n        id: 'disconnected',\n        name: 'Disconnected'\n      }];\n      this.severity = {\n        MINOR: 'assets/img/outline-error-minor.svg',\n        MAJOR: 'assets/img/outline-error-major.svg',\n        CRITICAL: 'assets/img/outline-error-red.svg',\n        WARNING: \"assets/img/outline-error-warning.svg\",\n        INFO: \"assets/img/outline-error-info.svg\"\n      };\n      this.filtersForm = this.fb.group({\n        region: [''],\n        location: [''],\n        system: [''],\n        limit: [20, [numValidator]],\n        systemStatus: 'connected',\n        alarmEventName: [''],\n        fsan_serialno: '',\n        device_type: 'ALL'\n      });\n      this.colors = {\n        MINOR: '#F3B426',\n        MAJOR: '#FC7235',\n        CRITICAL: '#C70000',\n        WARNING: \"#f7e9c1\",\n        INFO: \"#7cb5ec\"\n      };\n      this.colorClass = {\n        MINOR: 'minor-but',\n        MAJOR: 'major-but',\n        CRITICAL: 'critical-but',\n        WARNING: \"warning-but\",\n        INFO: \"severity-info-but\"\n      };\n      this.filtersObj = {\n        'region': 'Region',\n        'location': 'Location',\n        'system': 'System',\n        'alarmCount': 'Display Limit',\n        'alarmEventName': 'Exclude Alarms'\n      };\n      this.filters = ['region', 'location', 'system', 'alarmEventName', 'alarmCount'];\n      this.userPreferenceObj = {};\n      this.geoMapFilters = false;\n      this.geoMapIssue = 'false';\n      this.urls = this.router.url;\n      this.hasScopeAccess = false;\n      this.alarmNames = [];\n      this.activeTab = 'alarms';\n      // changeTab(activeTab) {\n      //   this.issueService.fromMapNavigation(false);\n      //   this.activeTab = activeTab\n      //   this.generateParams(activeTab);\n      // }\n      this.showFSAN = true;\n      this.fsanvalid = true;\n      this.location.onPopState(() => {\n        //from geomap\n        // if (this.routerService.currentUrl.indexOf('geoMapIssue=true') !== -1) {\n        //   this.issueService.fromMapNavigation(true);\n        // }\n      });\n    }\n    setTitle() {\n      this.titleService.setTitle(`${this.language['Real Time']} - ${this.issueService.getPageTitle()[this.issueService.getAlertType()]} - ${this.language['Alerts']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n    }\n    ngOnInit() {\n      var _a;\n      this.filtersForm.patchValue({\n        region: ['All'],\n        location: ['All'],\n        system: ['All'],\n        limit: 20,\n        systemStatus: 'connected',\n        alarmEventName: ['All'],\n        fsan_serialno: '',\n        device_type: 'ALL'\n      });\n      this.filtersForm.get('fsan_serialno').valueChanges.subscribe(fsan => {\n        if (!fsan) {\n          this.fsanvalid = true;\n        } else if (fsan.length == 12) {\n          this.fsanvalid = true;\n        }\n      });\n      this.timeZone = new Date().toString().split(\" \")[5].replace(/(.{2})$/, ':$1');\n      //this.getUserPreferences();\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.setTitle();\n      });\n      this.setTitle();\n      let scopes = this.ssoService.getScopes();\n      if (environment.VALIDATE_SCOPE) {\n        const alertScopes = this.issueService.getAlertScopes();\n        if (scopes === null || scopes === void 0 ? void 0 : scopes[(_a = alertScopes === null || alertScopes === void 0 ? void 0 : alertScopes[this.issueService.getAlertType()]) === null || _a === void 0 ? void 0 : _a.realtime]) {\n          this.hasScopeAccess = true;\n        }\n      } else {\n        this.hasScopeAccess = true;\n      }\n      if (!this.hasScopeAccess) {\n        this.ssoService.setPageAccess(false);\n        return;\n      } else {\n        this.ssoService.setPageAccess(true);\n      }\n      this.route.queryParams.subscribe(params => {\n        var _a, _b;\n        this.geoMapIssue = params['geoMapIssue'] && params.geoMapIssue == 'true' ? params.geoMapIssue : 'false';\n        if (this.geoMapIssue == 'true') {\n          this.homeGeoMapFilters = this.issueService.getAppliedFilters();\n          this.issuesGeoMapFilters = this.homeGeoMapFilters ? this.homeGeoMapFilters : {};\n          if (this.issuesGeoMapFilters) {\n            this.filtersForm.get('device_type').setValue(this.issuesGeoMapFilters['device_type'] ? (_a = this.issuesGeoMapFilters['device_type']) === null || _a === void 0 ? void 0 : _a.toUpperCase() : 'ALL');\n            this.onAlarmGroupChange(this.filtersForm.get('device_type').value);\n            if (((_b = this.issuesGeoMapFilters['device_type']) === null || _b === void 0 ? void 0 : _b.toUpperCase()) == 'ONT') {\n              this.filtersForm.get('fsan_serialno').setValue(this.issuesGeoMapFilters['fsan_serialno'] ? this.issuesGeoMapFilters['fsan_serialno'] : '');\n            }\n          }\n        }\n      });\n      this.timerSubscription = timer(0, 15000).pipe(map(() => {\n        this.alarmsCount();\n      })).subscribe();\n      this.geoMapfilterSubscription = this.issueService.geoMapFilterChanged$.subscribe(value => {\n        this.geoMapFilters = value;\n      });\n      // this.geoMapfilterSubscription = this.issueService.homegeomapNavigation$.subscribe(() => {\n      //   this.gotoHomeGeomap();\n      // });\n    }\n\n    Applybuttonfunction() {}\n    ngOnDestroy() {\n      if (this.languageSubject) {\n        this.languageSubject.unsubscribe();\n      }\n      clearInterval(this.timer);\n      this.timerSubscription.unsubscribe();\n    }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = this.language['Access Denied'];\n      } else {\n        this.errorInfo = this.commonOrgService.pageErrorHandle(err);\n      }\n      this.error = true;\n      this.loading = false;\n    }\n    closeAlert() {\n      this.error = false;\n    }\n    regionsApiLoader() {\n      const seen = new Set();\n      this.regionSelected = 'All';\n      this.locationSelected = \"All\";\n      this.systemSelected = \"All\";\n      this.regionsSubject = this.issueService.getRegions().subscribe(res => {\n        if (res && res.length) {\n          res = this.issueService.appendFqn(res);\n        }\n        this.chartOptionService.setRegionsInfo(res);\n        res.sort();\n        this.regionsDataArray = [...this.regionsDataArray, ...res];\n        //geomap functionalities\n        //set params that are set in geomap after navigated from alarm pushpins\n        // if(this.geoMapIssue == 'true'){\n        //   if(this.issuesGeoMapFilters && this.issuesGeoMapFilters['region'].length > 0){\n        //     if(this.issuesGeoMapFilters['region'].filter(el => el?.toLowerCase() != 'all')?.length == 0){\n        //       this.generateParams();\n        //     } else{\n        //       let regionArray = ['All'];\n        //       regionArray = this.issuesGeoMapFilters['region'] || ['All'];\n        //       this.filtersForm.get('region').setValue(regionArray);\n        //       this.loadLocationValue('');\n        //     }\n        //   }\n        // }\n        if (this.geoMapIssue == 'true') {\n          if (this.issuesGeoMapFilters) {\n            let regionArray = ['All'];\n            let locationArray = ['All'];\n            let systemArray = ['All'];\n            if (this.issuesGeoMapFilters && this.issuesGeoMapFilters['region']) {\n              regionArray = this.issuesGeoMapFilters['region'] || ['All'];\n            }\n            if (this.issuesGeoMapFilters && this.issuesGeoMapFilters['location']) {\n              locationArray = this.issuesGeoMapFilters['location'];\n            }\n            if (this.issuesGeoMapFilters && this.issuesGeoMapFilters['system']) {\n              systemArray = this.issuesGeoMapFilters['system'];\n            }\n            this.filtersForm.get('region').setValue(regionArray);\n            setTimeout(() => {\n              this.filtersForm.get('location').setValue(locationArray);\n              this.loadLocationValue('');\n              setTimeout(() => {\n                this.filtersForm.get('system').setValue(systemArray);\n                this.selectSystem('');\n                this.loadSystemValue();\n                // setTimeout(() => {\n                //   this.loadIntialData();\n                // }, 1000)\n              }, 200);\n            }, 200);\n          }\n        }\n      }, error => {});\n    }\n    loadLocationValue(event) {\n      this.clickedRegion = '';\n      this.locationSelected = \"All\";\n      this.systemSelected = \"All\";\n      let ids = this.filtersForm.get('region').value;\n      let locationIds = this.filtersForm.get('location').value;\n      this.regionSelected = ids;\n      if (this.regionSelected && this.regionSelected != ['All']) {\n        let regionQuery = '';\n        if (ids.length && ids !== ['All']) {\n          if (ids.indexOf('All') !== -1) {\n            this.regionName = null;\n            this.locationName = null;\n            this.systemName = null;\n            this.locationDataArray = [\"All\"];\n            this.systemDataArray = [\"All\"];\n            return;\n          }\n          ids.forEach(element => {\n            if (element == 'All') {\n              return;\n            }\n            regionQuery += `&region=${element}`;\n          });\n          this.locationsSubject = this.http.get(`${environment.API_BASE_URL}nfa/locations?tenant=0${regionQuery}`).pipe(map(res => {\n            res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n              numeric: false\n            }));\n            res = this.issueService.appendFqn(res);\n            return res;\n          }), catchError(this.handleError)).subscribe(res => {\n            //this.setLocationsInfo(res);\n            this.chartOptionService.setLocationsInfo(res);\n            this.locationDataArray = [\"All\"];\n            this.locationDataArray = [...this.locationDataArray, ...res];\n            // this.locationDataArray = res;\n            // this.locationDataArray.push(\"All\");\n            if (locationIds && locationIds.length) {\n              let locationsObj = this.chartOptionService.getLocationsObj();\n              let locationListIds = Object.keys(locationsObj).length ? Object.keys(locationsObj) : [];\n              let validLocationIds = [];\n              locationIds.forEach(element => {\n                if (locationListIds.indexOf(element) !== -1) {\n                  validLocationIds.push(element);\n                }\n              });\n              if (!validLocationIds.length) {\n                validLocationIds = ['All'];\n              }\n              this.filtersForm.get('location').setValue(validLocationIds);\n              this.loadSystemValue();\n            }\n          }, error => {});\n          //start of CCL-34242\n          this.regionName = ids;\n          //end of CCL-34242\n          this;\n        } else {\n          this.filtersForm.get('region').setValue(['All']);\n          this.filtersForm.get('location').setValue(['All']);\n          this.filtersForm.get('system').setValue(['All']);\n          //this.filtersForm.get('region').setValue(['All']);\n          this.regionName = null;\n          this.locationName = null;\n          this.systemName = null;\n          this.locationDataArray = [\"All\"];\n          this.systemDataArray = [\"All\"];\n        }\n      }\n    }\n    loadSystemValue(event) {\n      this.clickedLocation = '';\n      let regionids = this.filtersForm.get('region').value;\n      let locationids = this.filtersForm.get('location').value;\n      let systemIds = this.filtersForm.get('system').value;\n      this.systemSelected = [\"All\"];\n      if (regionids.length && locationids.length && locationids.indexOf('All') === -1) {\n        let regionQuery = '';\n        regionids.forEach(element => {\n          if (element == 'All') {\n            return;\n          }\n          regionQuery += `&region=${element}`;\n        });\n        let locationQuery = '';\n        locationids.forEach(element => {\n          if (element == 'All') {\n            return;\n          }\n          locationQuery += `&location=${element}`;\n        });\n        this.systemsSubject = this.http.get(`${environment.API_BASE_URL}nfa/systems?tenant=0${regionQuery}${locationQuery}`).pipe(map(res => {\n          res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n            numeric: false\n          }));\n          return res;\n        }), catchError(this.handleError)).subscribe(res => {\n          //this.setSystemsInfo(res);\n          this.chartOptionService.setSystemsInfo(res);\n          this.systemDataArray = [\"All\"];\n          this.systemDataArray = [...this.systemDataArray, ...res];\n          if (systemIds && systemIds.length) {\n            let systemsObj = this.chartOptionService.getSystemsObj();\n            let systemListIds = Object.keys(systemsObj).length ? Object.keys(systemsObj) : [];\n            let validSystemIds = [];\n            systemIds.forEach(element => {\n              if (systemListIds.indexOf(element) !== -1) {\n                validSystemIds.push(element);\n              }\n            });\n            if (!validSystemIds.length) {\n              validSystemIds = ['All'];\n              this.systemName = null;\n            }\n            this.filtersForm.get('system').setValue(validSystemIds);\n          }\n          // this.systemDataArray = res;\n          // this.systemDataArray.push(\"All\");\n        }, error => {});\n        //start of CCL-34242\n        this.locationName = locationids;\n        //end of CCL-34242\n      } else {\n        if (!locationids.length) {\n          this.filtersForm.get('location').setValue(['All']);\n          this.filtersForm.get('system').setValue(['All']);\n          this.locationName = null;\n          this.systemName = null;\n          this.systemDataArray = [\"All\"];\n        }\n      }\n    }\n    convertToDateTime(dateTime) {\n      if (!dateTime) {\n        return;\n      }\n      dateTime = Number(dateTime);\n      let pipe = new DatePipe('en-US');\n      return pipe.transform(new Date(dateTime), 'short');\n    }\n    validateLimit($event) {\n      let limit = this.filtersForm.get('limit').value;\n      if (limit > 10000) {\n        this.filtersForm.get('limit').setValue(10000);\n      }\n    }\n    alarmsCount() {\n      /* this.countSubscribe = this.http.get(`${environment.API_BASE_URL}analytics-engine/alarmCount?reportType=REALTIME`).subscribe((res: any) => {\r\n         this.countData = (res && res['alarm'] && res['alarm'].raised) ? res['alarm'].raised : {};\r\n         this.criticalAlarms = this.countData.critical ? this.countData.critical.toLocaleString() : '0';\r\n         this.majorAlarms = this.countData.major ? this.countData.major.toLocaleString() : '0';\r\n         this.minorAlarms = this.countData.minor ? this.countData.minor.toLocaleString() : '0';\r\n         this.totalAlarms = this.countData.critical + this.countData.major + this.countData.minor + this.countData.warning + this.countData.info;\r\n         this.totalAlarms = this.totalAlarms ? this.totalAlarms.toLocaleString() : '0';\r\n         if (this.countData && this.countData['info']) {\r\n           this.countData['info'] = this.countData['info'].toLocaleString();\r\n         }\r\n                if (this.countData && this.countData['warning']) {\r\n           this.countData['warning'] = this.countData['warning'].toLocaleString();\r\n         }\r\n                this.loading = false;\r\n       }, (err: HttpErrorResponse) => {\r\n         this.pageErrorHandle(err);\r\n         this.criticalAlarms = '0';\r\n         this.majorAlarms = '0';\r\n         this.minorAlarms = '0';\r\n         this.totalAlarms = '0';\r\n         this.loading = false;\r\n       });*/\n    }\n    clearFilter() {\n      this.locked = false;\n      this.showFSAN = true;\n      this.locationDataArray = [\"All\"];\n      this.systemDataArray = [\"All\"];\n      this.clickedRegion = undefined;\n      this.clickedLocation = undefined;\n      this.locationName = undefined;\n      this.regionName = undefined;\n      this.systemName = undefined;\n      this.filtersForm.patchValue({\n        region: ['All'],\n        location: ['All'],\n        system: ['All'],\n        limit: 20,\n        systemStatus: 'connected',\n        alarmEventName: ['All'],\n        fsan_serialno: '',\n        device_type: 'ALL'\n      });\n      let params = {\n        severity: 'CRITICAL,MAJOR,MINOR,INFO,WARNING',\n        historyReport: false,\n        alarmCount: 20,\n        limit: 20\n      };\n      if (this.urls.includes('/cco/issues/connectivity/realtime/current-issues')) {\n        delete params['severity'], delete params['historyReport'], delete params['limit'];\n      }\n      this.appliedParams = params;\n      if (this.activeTab == 'disconncted') {\n        this.geoMapFilters = false;\n      }\n      this.issueService.setAppliedFilters(params);\n    }\n    validateRegion(event) {\n      let regions = this.filtersForm.get('region').value;\n      if (event === 'All') {\n        regions = ['All'];\n      } else {\n        let index = regions.indexOf('All');\n        if (index > -1) {\n          regions.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('region').setValue(regions);\n      this.loadLocationValue('');\n    }\n    validateLocation(event) {\n      let locations = this.filtersForm.get('location').value;\n      if (event === 'All') {\n        this.clickedLocation = undefined;\n        this.locationName = undefined;\n        locations = ['All'];\n      } else {\n        let index = locations.indexOf('All');\n        if (index > -1) {\n          locations.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('location').setValue(locations);\n      this.loadSystemValue('');\n    }\n    validateSystem(event) {\n      let systems = this.filtersForm.get('system').value;\n      if (!systems.length) {\n        systems = ['All'];\n      } else if (event === 'All') {\n        systems = ['All'];\n      } else {\n        let index = systems.indexOf('All');\n        if (index > -1) {\n          systems.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('system').setValue(systems);\n    }\n    selectSystem(event) {\n      let systemid = this.filtersForm.get('system').value;\n      this.systemName = systemid;\n      if (systemid == 'All') {\n        this.systemName = null;\n      }\n    }\n    generateParams(changeTab) {\n      var _a, _b, _c;\n      this.loading = true;\n      if ((_b = (_a = this.filtersForm) === null || _a === void 0 ? void 0 : _a.controls) === null || _b === void 0 ? void 0 : _b.limit.invalid) {\n        return;\n      }\n      this.validateFSAN();\n      if (!this.fsanvalid) return;\n      this.locked = false;\n      let system = '';\n      if (this.systemName && this.systemName.length && this.systemName.indexOf('All') === -1) {\n        let filtered = this.systemName.filter(function (el) {\n          return el && el.length && el !== 'All';\n        });\n        system = filtered;\n      } else {\n        system = undefined;\n      }\n      let params = {\n        region: this.clickedRegion || this.regionName,\n        location: this.clickedLocation || this.locationName,\n        system: system,\n        severity: 'CRITICAL,MAJOR,MINOR,INFO,WARNING',\n        historyReport: false,\n        //alarmCount: this.limit ? this.limit : 10\n        alarmCount: this.filtersForm.get('limit').value ? this.filtersForm.get('limit').value : 0,\n        limit: this.filtersForm.get('limit').value ? this.filtersForm.get('limit').value : 0,\n        systemStatus: this.filtersForm.get('systemStatus').value\n        //customCategory: 'Cloud health,Cloud connectivity'\n      };\n\n      if (this.urls.includes('/cco/issues/device/realtime/current-issues')) {\n        params['fsan_serialno'] = this.filtersForm.get('fsan_serialno').value;\n        params['device_type'] = this.filtersForm.get('device_type').value;\n      }\n      if (this.filtersForm.get('device_type').value === 'OLT') {\n        delete params['fsan_serialno'];\n      }\n      let alarms = [];\n      (_c = this.filtersForm.get('alarmEventName').value) === null || _c === void 0 ? void 0 : _c.forEach(element => {\n        if (element == 'All') {\n          return;\n        }\n        alarms.push(element);\n      });\n      params['alarmEventName'] = alarms.join(',');\n      this.appliedParams = params;\n      if (this.activeTab == 'disconncted') {\n        this.geoMapFilters = false;\n      }\n      if (this.urls.includes('cco/issues/connectivity/realtime/current-issues') || this.urls.includes('cco/issues/cloud-health/realtime/current-issues')) {\n        delete params['severity'];\n        delete params['limit'];\n        delete params['customCategory'];\n        this.appliedParams = params;\n        if (this.activeTab == 'disconncted') {\n          this.geoMapFilters = false;\n        }\n        this.issueService.setAppliedFilters(params);\n      }\n      this.issueService.setAppliedFilters(params);\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    getUserPreferences() {\n      this.http.get(`${environment.API_BASE_URL}cmc/pref/user-preferences/${this.ssoService.getOrgId()}/${this.ssoService.getUserId()}`).subscribe(json => {\n        this.userPreferenceObj = {};\n      });\n    }\n    setUserPreferences() {\n      let obj = {\n        filters: {\n          cco_issues: {\n            limit: this.appliedParams.limit\n          }\n        }\n      };\n      if (Object.keys(this.userPreferenceObj).length) {\n        if (Object.keys(this.userPreferenceObj['filters']).length) {\n          this.userPreferenceObj['filters'] = Object.assign(Object.assign({}, this.userPreferenceObj['filters']), obj['filters']);\n        } else {\n          this.userPreferenceObj['filters'] = obj;\n        }\n      } else {\n        this.userPreferenceObj = obj;\n      }\n      this.http.post(`${environment.API_BASE_URL}cmc/pref/user-preferences/${this.ssoService.getOrgId()}/${this.ssoService.getUserId()}`, obj).subscribe(json => {});\n    }\n    isNumber(evt) {\n      let limit = this.filtersForm.get(\"limit\").value;\n      return /^\\d*\\.?\\d*$/.test(limit);\n    }\n    validateAlarmName(event) {\n      let alarms = this.filtersForm.get('alarmEventName').value;\n      if (!alarms.length) {\n        alarms = ['All'];\n      } else if (event === 'All') {\n        alarms = ['All'];\n      } else {\n        let index = alarms.indexOf('All');\n        if (index > -1) {\n          alarms.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('alarmEventName').setValue(alarms);\n    }\n    getAlarmNames() {\n      this.http.get(`${this.baseUrl}alarmEvent?historyalarm=false&notificationType=Alarm`).subscribe(json => {\n        let alarmNames = [{\n          id: \"All\",\n          name: \"None\"\n        }];\n        let alarm = json.sort(function (a, b) {\n          return a.toLowerCase().localeCompare(b.toLowerCase());\n        });\n        if (alarm) {\n          alarm.forEach(element => {\n            if (!element) {\n              return;\n            }\n            if (element === 'multiple-onts-down') {\n              return;\n            }\n            alarmNames.push({\n              id: element,\n              name: element\n            });\n          });\n        }\n        this.alarmNames = alarmNames;\n        if (this.urls.includes(\"/cco/issues/device/realtime/current-issues\")) {\n          this.getCustomAlarmsFunc();\n        }\n      });\n    }\n    getCustomAlarmsFunc() {\n      this.http.get(`${this.baseUrl}customAlarms/false`).subscribe(json => {\n        if (json && json.length > 0 && this.urls.includes('/cco/issues/device/realtime/current-issues')) {\n          let defaultExcludeAlarms = this.alarmNames.filter(el => json.findIndex(ele => ele['alarmName'] == el['name']) != -1).map(alarms => alarms['id']);\n          if (defaultExcludeAlarms && defaultExcludeAlarms.length > 0) {\n            this.filtersForm.get('alarmEventName').setValue(defaultExcludeAlarms);\n          }\n        }\n        this.generateParams();\n      }, err => {\n        this.error = true;\n        this.pageErrorHandle(err);\n        this.generateParams();\n      });\n    }\n    onAlarmGroupChange(value) {\n      if (value === 'OLT') {\n        this.showFSAN = false;\n      } else {\n        this.showFSAN = true;\n      }\n    }\n    validateFSAN() {\n      this.fsanvalid = true;\n      if (this.filtersForm.get('fsan_serialno').value.length !== 0 && this.filtersForm.get('fsan_serialno').value.length !== 12) {\n        this.fsanvalid = false;\n      }\n    }\n    removespecialcharacter(event) {\n      var key;\n      key = event.keyCode; //key = event.charCode;\n      return key > 47 && key < 58 || key > 64 && key < 91 || key > 96 && key < 123;\n    }\n  }\n  CurrentIssuesComponent.ɵfac = function CurrentIssuesComponent_Factory(t) {\n    return new (t || CurrentIssuesComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.IssueService), i0.ɵɵdirectiveInject(i3.SsoAuthService), i0.ɵɵdirectiveInject(i4.CommonService), i0.ɵɵdirectiveInject(i5.HttpClient), i0.ɵɵdirectiveInject(i6.FormBuilder), i0.ɵɵdirectiveInject(i7.ExportExcelService), i0.ɵɵdirectiveInject(i8.Title), i0.ɵɵdirectiveInject(i9.HistoryChartOptionsService), i0.ɵɵdirectiveInject(i10.RouterService), i0.ɵɵdirectiveInject(i11.Router), i0.ɵɵdirectiveInject(i11.ActivatedRoute), i0.ɵɵdirectiveInject(i12.PlatformLocation));\n  };\n  CurrentIssuesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CurrentIssuesComponent,\n    selectors: [[\"app-current-issues\"]],\n    decls: 3,\n    vars: 3,\n    consts: [[\"class\", \"w-100 alert alert-danger fade show my-3\", 4, \"ngIf\"], [\"class\", \"tab-content\", \"id\", \"myTabContent\", 4, \"ngIf\"], [\"role\", \"alert\", \"class\", \"alert alert-warning\", 4, \"ngIf\"], [1, \"w-100\", \"alert\", \"alert-danger\", \"fade\", \"show\", \"my-3\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [\"id\", \"myTabContent\", 1, \"tab-content\"], [\"id\", \"Current-Issues\", \"role\", \"tabpanel\", \"aria-labelledby\", \"home-tab\", 1, \"tab-pane\", \"fade\", \"show\", \"active\"], [\"id\", \"current-issues-filter\", 1, \"filter-elemnts\"], [3, \"activeTab\"], [\"id\", \"current-issues-results\", 1, \"row\"], [1, \"col-md-12\", \"mt-3\"], [\"id\", \"current-issue-table\", 1, \"current-issues-table\", \"overflow-auto\"], [4, \"ngIf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\"]],\n    template: function CurrentIssuesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CurrentIssuesComponent_div_0_Template, 6, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, CurrentIssuesComponent_div_1_Template, 8, 2, \"div\", 1);\n        i0.ɵɵtemplate(2, CurrentIssuesComponent_div_2_Template, 2, 1, \"div\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasScopeAccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasScopeAccess);\n      }\n    },\n    directives: [i12.NgIf, i13.CommonRealtimeFilterComponent, i14.ConnectedAlarmsComponent],\n    styles: [\"@charset \\\"UTF-8\\\";.red[_ngcontent-%COMP%]{color:#c70000}.issue-left-menu[_ngcontent-%COMP%]{width:100%}.issue-right-content[_ngcontent-%COMP%]{width:100%;border-left:1px solid #dedede;padding:10px}.current-issue-menu-item[_ngcontent-%COMP%]{flex-grow:0}.btn-secondary[_ngcontent-%COMP%]{color:#5f6165!important;background-color:#f7f8fa!important;border-color:#888!important}.current-issues-table[_ngcontent-%COMP%]{width:100%}.current-issues-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{width:100%}.current-issues-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]{font-size:14px}.current-issues-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]{font-size:14px}.btn-secondary[_ngcontent-%COMP%]{color:#5f6165!important;background-color:#f8f8fa!important;border-color:#f8f8fa!important;padding:3px \\\\200b 10px}.undo-icon[_ngcontent-%COMP%]{background-color:#f8f8fa;padding:3px;color:#9e9e9e;border-radius:15px;margin:2px;font-size:17px;cursor:pointer;width:30px;height:30px;text-align:center}.table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{font-weight:600!important;font-size:16px}.cco-secondary-title[_ngcontent-%COMP%]{font-size:24px;font-style:normal;font-weight:400;line-height:30px;letter-spacing:0em;text-align:left;color:#1a1f22}.mw-170[_ngcontent-%COMP%]{min-width:170px}.current-issue-menu-container[_ngcontent-%COMP%]{display:flex;margin:20px 0 0;align-items:center;flex-wrap:wrap;justify-self:start}.test-container[_ngcontent-%COMP%]{display:flex;width:100%}.item[_ngcontent-%COMP%]{flex-grow:1;border-left:1px solid #EBEAEF;padding-left:12px;width:calc(100% / 4)}.item[_ngcontent-%COMP%] + .item[_ngcontent-%COMP%]{margin-left:2%}@media screen and (max-width: 767px){.mpl[_ngcontent-%COMP%]{padding-left:15px!important}.current-issue-menu-container[_ngcontent-%COMP%]{display:block}.current-issue-menu-item[_ngcontent-%COMP%]{margin-top:10px;margin-left:0!important}.mt-center[_ngcontent-%COMP%]{text-align:center!important}#current-issue-table[_ngcontent-%COMP%]{overflow-x:scroll}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar{height:5px}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar-track{height:5px;background:#f1f1f1}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{height:5px;background:#ddd}}@media screen and (min-width: 768px) and (max-width: 1140px){#current-issue-table[_ngcontent-%COMP%]{overflow-x:scroll}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar{height:5px}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar-track{height:5px;background:#f1f1f1}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{height:5px;background:#ddd}}.modal.fade[_ngcontent-%COMP%]   .modal-dialog[_ngcontent-%COMP%]{border-radius:26px;max-width:70%!important}.current-issues-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(1){width:120px!important}.current-issues-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(1){width:120px!important}.max-w-90[_ngcontent-%COMP%]{max-width:90px}.col-recom[_ngcontent-%COMP%]{min-width:300px}.col-recom[_ngcontent-%COMP%]   .subj-text[_ngcontent-%COMP%]{max-height:300px;overflow-y:auto}.col-resource[_ngcontent-%COMP%]{max-width:400px!important}.col-resource[_ngcontent-%COMP%]   .col-res-data[_ngcontent-%COMP%]{min-width:400px;max-width:400px;word-break:break-all}.btn-transparent[_ngcontent-%COMP%]{color:#0279ff;border:none;background:none;font-size:14px}.btn-transparent[_ngcontent-%COMP%]:hover{color:#0054b2}.btn-sm-primary[_ngcontent-%COMP%]{height:24px;line-height:16px!important;padding:3px 20px!important;font-size:14px}\"]\n  });\n  return CurrentIssuesComponent;\n})();\nexport function numValidator(control) {\n  let regex = /^\\s*(\\d{1,5}|-\\d+)?\\s*$/;\n  if ((control === null || control === void 0 ? void 0 : control.value) == 0) {\n    control === null || control === void 0 ? void 0 : control.setValue(20);\n    return null;\n  }\n  if (!(control === null || control === void 0 ? void 0 : control.value)) {\n    return {\n      'isrequired': true\n    };\n  }\n  if ((control === null || control === void 0 ? void 0 : control.value) > 10000) {\n    control === null || control === void 0 ? void 0 : control.setValue(10000);\n    return null;\n  }\n  if ((control === null || control === void 0 ? void 0 : control.value) < 1) {\n    control === null || control === void 0 ? void 0 : control.setValue(Math.abs(control.value));\n    return null;\n  }\n  if (!regex.test(control.value)) {\n    return {\n      'invalidNumber': true\n    };\n  }\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}