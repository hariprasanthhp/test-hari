{"ast":null,"code":"export var START_EVENT = [{\n  label: 'Start Event',\n  actionName: 'replace-with-none-start',\n  className: 'bpmn-icon-start-event-none',\n  target: {\n    type: 'bpmn:StartEvent'\n  }\n}, {\n  label: 'Intermediate Throw Event',\n  actionName: 'replace-with-none-intermediate-throwing',\n  className: 'bpmn-icon-intermediate-event-none',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent'\n  }\n}, {\n  label: 'End Event',\n  actionName: 'replace-with-none-end',\n  className: 'bpmn-icon-end-event-none',\n  target: {\n    type: 'bpmn:EndEvent'\n  }\n}, {\n  label: 'Message Start Event',\n  actionName: 'replace-with-message-start',\n  className: 'bpmn-icon-start-event-message',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Timer Start Event',\n  actionName: 'replace-with-timer-start',\n  className: 'bpmn-icon-start-event-timer',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:TimerEventDefinition'\n  }\n}, {\n  label: 'Conditional Start Event',\n  actionName: 'replace-with-conditional-start',\n  className: 'bpmn-icon-start-event-condition',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n  }\n}, {\n  label: 'Signal Start Event',\n  actionName: 'replace-with-signal-start',\n  className: 'bpmn-icon-start-event-signal',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}];\nexport var START_EVENT_SUB_PROCESS = [{\n  label: 'Start Event',\n  actionName: 'replace-with-none-start',\n  className: 'bpmn-icon-start-event-none',\n  target: {\n    type: 'bpmn:StartEvent'\n  }\n}, {\n  label: 'Intermediate Throw Event',\n  actionName: 'replace-with-none-intermediate-throwing',\n  className: 'bpmn-icon-intermediate-event-none',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent'\n  }\n}, {\n  label: 'End Event',\n  actionName: 'replace-with-none-end',\n  className: 'bpmn-icon-end-event-none',\n  target: {\n    type: 'bpmn:EndEvent'\n  }\n}];\nexport var INTERMEDIATE_EVENT = [{\n  label: 'Start Event',\n  actionName: 'replace-with-none-start',\n  className: 'bpmn-icon-start-event-none',\n  target: {\n    type: 'bpmn:StartEvent'\n  }\n}, {\n  label: 'Intermediate Throw Event',\n  actionName: 'replace-with-none-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-none',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent'\n  }\n}, {\n  label: 'End Event',\n  actionName: 'replace-with-none-end',\n  className: 'bpmn-icon-end-event-none',\n  target: {\n    type: 'bpmn:EndEvent'\n  }\n}, {\n  label: 'Message Intermediate Catch Event',\n  actionName: 'replace-with-message-intermediate-catch',\n  className: 'bpmn-icon-intermediate-event-catch-message',\n  target: {\n    type: 'bpmn:IntermediateCatchEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Message Intermediate Throw Event',\n  actionName: 'replace-with-message-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-throw-message',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Timer Intermediate Catch Event',\n  actionName: 'replace-with-timer-intermediate-catch',\n  className: 'bpmn-icon-intermediate-event-catch-timer',\n  target: {\n    type: 'bpmn:IntermediateCatchEvent',\n    eventDefinitionType: 'bpmn:TimerEventDefinition'\n  }\n}, {\n  label: 'Escalation Intermediate Throw Event',\n  actionName: 'replace-with-escalation-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-throw-escalation',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent',\n    eventDefinitionType: 'bpmn:EscalationEventDefinition'\n  }\n}, {\n  label: 'Conditional Intermediate Catch Event',\n  actionName: 'replace-with-conditional-intermediate-catch',\n  className: 'bpmn-icon-intermediate-event-catch-condition',\n  target: {\n    type: 'bpmn:IntermediateCatchEvent',\n    eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n  }\n}, {\n  label: 'Link Intermediate Catch Event',\n  actionName: 'replace-with-link-intermediate-catch',\n  className: 'bpmn-icon-intermediate-event-catch-link',\n  target: {\n    type: 'bpmn:IntermediateCatchEvent',\n    eventDefinitionType: 'bpmn:LinkEventDefinition',\n    eventDefinitionAttrs: {\n      name: ''\n    }\n  }\n}, {\n  label: 'Link Intermediate Throw Event',\n  actionName: 'replace-with-link-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-throw-link',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent',\n    eventDefinitionType: 'bpmn:LinkEventDefinition',\n    eventDefinitionAttrs: {\n      name: ''\n    }\n  }\n}, {\n  label: 'Compensation Intermediate Throw Event',\n  actionName: 'replace-with-compensation-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-throw-compensation',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent',\n    eventDefinitionType: 'bpmn:CompensateEventDefinition'\n  }\n}, {\n  label: 'Signal Intermediate Catch Event',\n  actionName: 'replace-with-signal-intermediate-catch',\n  className: 'bpmn-icon-intermediate-event-catch-signal',\n  target: {\n    type: 'bpmn:IntermediateCatchEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}, {\n  label: 'Signal Intermediate Throw Event',\n  actionName: 'replace-with-signal-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-throw-signal',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}];\nexport var END_EVENT = [{\n  label: 'Start Event',\n  actionName: 'replace-with-none-start',\n  className: 'bpmn-icon-start-event-none',\n  target: {\n    type: 'bpmn:StartEvent'\n  }\n}, {\n  label: 'Intermediate Throw Event',\n  actionName: 'replace-with-none-intermediate-throw',\n  className: 'bpmn-icon-intermediate-event-none',\n  target: {\n    type: 'bpmn:IntermediateThrowEvent'\n  }\n}, {\n  label: 'End Event',\n  actionName: 'replace-with-none-end',\n  className: 'bpmn-icon-end-event-none',\n  target: {\n    type: 'bpmn:EndEvent'\n  }\n}, {\n  label: 'Message End Event',\n  actionName: 'replace-with-message-end',\n  className: 'bpmn-icon-end-event-message',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Escalation End Event',\n  actionName: 'replace-with-escalation-end',\n  className: 'bpmn-icon-end-event-escalation',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:EscalationEventDefinition'\n  }\n}, {\n  label: 'Error End Event',\n  actionName: 'replace-with-error-end',\n  className: 'bpmn-icon-end-event-error',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:ErrorEventDefinition'\n  }\n}, {\n  label: 'Cancel End Event',\n  actionName: 'replace-with-cancel-end',\n  className: 'bpmn-icon-end-event-cancel',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:CancelEventDefinition'\n  }\n}, {\n  label: 'Compensation End Event',\n  actionName: 'replace-with-compensation-end',\n  className: 'bpmn-icon-end-event-compensation',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:CompensateEventDefinition'\n  }\n}, {\n  label: 'Signal End Event',\n  actionName: 'replace-with-signal-end',\n  className: 'bpmn-icon-end-event-signal',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}, {\n  label: 'Terminate End Event',\n  actionName: 'replace-with-terminate-end',\n  className: 'bpmn-icon-end-event-terminate',\n  target: {\n    type: 'bpmn:EndEvent',\n    eventDefinitionType: 'bpmn:TerminateEventDefinition'\n  }\n}];\nexport var GATEWAY = [{\n  label: 'Exclusive Gateway',\n  actionName: 'replace-with-exclusive-gateway',\n  className: 'bpmn-icon-gateway-xor',\n  target: {\n    type: 'bpmn:ExclusiveGateway'\n  }\n}, {\n  label: 'Parallel Gateway',\n  actionName: 'replace-with-parallel-gateway',\n  className: 'bpmn-icon-gateway-parallel',\n  target: {\n    type: 'bpmn:ParallelGateway'\n  }\n}, {\n  label: 'Inclusive Gateway',\n  actionName: 'replace-with-inclusive-gateway',\n  className: 'bpmn-icon-gateway-or',\n  target: {\n    type: 'bpmn:InclusiveGateway'\n  }\n}, {\n  label: 'Complex Gateway',\n  actionName: 'replace-with-complex-gateway',\n  className: 'bpmn-icon-gateway-complex',\n  target: {\n    type: 'bpmn:ComplexGateway'\n  }\n}, {\n  label: 'Event based Gateway',\n  actionName: 'replace-with-event-based-gateway',\n  className: 'bpmn-icon-gateway-eventbased',\n  target: {\n    type: 'bpmn:EventBasedGateway',\n    instantiate: false,\n    eventGatewayType: 'Exclusive'\n  }\n}\n\n// Gateways deactivated until https://github.com/bpmn-io/bpmn-js/issues/194\n// {\n//   label: 'Event based instantiating Gateway',\n//   actionName: 'replace-with-exclusive-event-based-gateway',\n//   className: 'bpmn-icon-exclusive-event-based',\n//   target: {\n//     type: 'bpmn:EventBasedGateway'\n//   },\n//   options: {\n//     businessObject: { instantiate: true, eventGatewayType: 'Exclusive' }\n//   }\n// },\n// {\n//   label: 'Parallel Event based instantiating Gateway',\n//   actionName: 'replace-with-parallel-event-based-instantiate-gateway',\n//   className: 'bpmn-icon-parallel-event-based-instantiate-gateway',\n//   target: {\n//     type: 'bpmn:EventBasedGateway'\n//   },\n//   options: {\n//     businessObject: { instantiate: true, eventGatewayType: 'Parallel' }\n//   }\n// }\n];\n\nexport var SUBPROCESS_EXPANDED = [{\n  label: 'Transaction',\n  actionName: 'replace-with-transaction',\n  className: 'bpmn-icon-transaction',\n  target: {\n    type: 'bpmn:Transaction',\n    isExpanded: true\n  }\n}, {\n  label: 'Event Sub Process',\n  actionName: 'replace-with-event-subprocess',\n  className: 'bpmn-icon-event-subprocess-expanded',\n  target: {\n    type: 'bpmn:SubProcess',\n    triggeredByEvent: true,\n    isExpanded: true\n  }\n}, {\n  label: 'Sub Process (collapsed)',\n  actionName: 'replace-with-collapsed-subprocess',\n  className: 'bpmn-icon-subprocess-collapsed',\n  target: {\n    type: 'bpmn:SubProcess',\n    isExpanded: false\n  }\n}];\nexport var TRANSACTION = [{\n  label: 'Sub Process',\n  actionName: 'replace-with-subprocess',\n  className: 'bpmn-icon-subprocess-expanded',\n  target: {\n    type: 'bpmn:SubProcess',\n    isExpanded: true\n  }\n}, {\n  label: 'Event Sub Process',\n  actionName: 'replace-with-event-subprocess',\n  className: 'bpmn-icon-event-subprocess-expanded',\n  target: {\n    type: 'bpmn:SubProcess',\n    triggeredByEvent: true,\n    isExpanded: true\n  }\n}];\nexport var EVENT_SUB_PROCESS = [{\n  label: 'Sub Process',\n  actionName: 'replace-with-subprocess',\n  className: 'bpmn-icon-subprocess-expanded',\n  target: {\n    type: 'bpmn:SubProcess',\n    isExpanded: true\n  }\n}, {\n  label: 'Transaction',\n  actionName: 'replace-with-transaction',\n  className: 'bpmn-icon-transaction',\n  target: {\n    type: 'bpmn:Transaction',\n    isExpanded: true\n  }\n}];\nexport var TASK = [{\n  label: 'Task',\n  actionName: 'replace-with-task',\n  className: 'bpmn-icon-task',\n  target: {\n    type: 'bpmn:Task'\n  }\n}, {\n  label: 'Send Task',\n  actionName: 'replace-with-send-task',\n  className: 'bpmn-icon-send',\n  target: {\n    type: 'bpmn:SendTask'\n  }\n}, {\n  label: 'Receive Task',\n  actionName: 'replace-with-receive-task',\n  className: 'bpmn-icon-receive',\n  target: {\n    type: 'bpmn:ReceiveTask'\n  }\n}, {\n  label: 'User Task',\n  actionName: 'replace-with-user-task',\n  className: 'bpmn-icon-user',\n  target: {\n    type: 'bpmn:UserTask'\n  }\n}, {\n  label: 'Manual Task',\n  actionName: 'replace-with-manual-task',\n  className: 'bpmn-icon-manual',\n  target: {\n    type: 'bpmn:ManualTask'\n  }\n}, {\n  label: 'Business Rule Task',\n  actionName: 'replace-with-rule-task',\n  className: 'bpmn-icon-business-rule',\n  target: {\n    type: 'bpmn:BusinessRuleTask'\n  }\n}, {\n  label: 'Service Task',\n  actionName: 'replace-with-service-task',\n  className: 'bpmn-icon-service',\n  target: {\n    type: 'bpmn:ServiceTask'\n  }\n}, {\n  label: 'Script Task',\n  actionName: 'replace-with-script-task',\n  className: 'bpmn-icon-script',\n  target: {\n    type: 'bpmn:ScriptTask'\n  }\n}, {\n  label: 'Call Activity',\n  actionName: 'replace-with-call-activity',\n  className: 'bpmn-icon-call-activity',\n  target: {\n    type: 'bpmn:CallActivity'\n  }\n}, {\n  label: 'Sub Process (collapsed)',\n  actionName: 'replace-with-collapsed-subprocess',\n  className: 'bpmn-icon-subprocess-collapsed',\n  target: {\n    type: 'bpmn:SubProcess',\n    isExpanded: false\n  }\n}, {\n  label: 'Sub Process (expanded)',\n  actionName: 'replace-with-expanded-subprocess',\n  className: 'bpmn-icon-subprocess-expanded',\n  target: {\n    type: 'bpmn:SubProcess',\n    isExpanded: true\n  }\n}];\nexport var DATA_OBJECT_REFERENCE = [{\n  label: 'Data Store Reference',\n  actionName: 'replace-with-data-store-reference',\n  className: 'bpmn-icon-data-store',\n  target: {\n    type: 'bpmn:DataStoreReference'\n  }\n}];\nexport var DATA_STORE_REFERENCE = [{\n  label: 'Data Object Reference',\n  actionName: 'replace-with-data-object-reference',\n  className: 'bpmn-icon-data-object',\n  target: {\n    type: 'bpmn:DataObjectReference'\n  }\n}];\nexport var BOUNDARY_EVENT = [{\n  label: 'Message Boundary Event',\n  actionName: 'replace-with-message-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-message',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Timer Boundary Event',\n  actionName: 'replace-with-timer-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-timer',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:TimerEventDefinition'\n  }\n}, {\n  label: 'Escalation Boundary Event',\n  actionName: 'replace-with-escalation-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-escalation',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:EscalationEventDefinition'\n  }\n}, {\n  label: 'Conditional Boundary Event',\n  actionName: 'replace-with-conditional-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-condition',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n  }\n}, {\n  label: 'Error Boundary Event',\n  actionName: 'replace-with-error-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-error',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:ErrorEventDefinition'\n  }\n}, {\n  label: 'Cancel Boundary Event',\n  actionName: 'replace-with-cancel-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-cancel',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:CancelEventDefinition'\n  }\n}, {\n  label: 'Signal Boundary Event',\n  actionName: 'replace-with-signal-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-signal',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}, {\n  label: 'Compensation Boundary Event',\n  actionName: 'replace-with-compensation-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-compensation',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:CompensateEventDefinition'\n  }\n}, {\n  label: 'Message Boundary Event (non-interrupting)',\n  actionName: 'replace-with-non-interrupting-message-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-non-interrupting-message',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition',\n    cancelActivity: false\n  }\n}, {\n  label: 'Timer Boundary Event (non-interrupting)',\n  actionName: 'replace-with-non-interrupting-timer-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-non-interrupting-timer',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:TimerEventDefinition',\n    cancelActivity: false\n  }\n}, {\n  label: 'Escalation Boundary Event (non-interrupting)',\n  actionName: 'replace-with-non-interrupting-escalation-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-non-interrupting-escalation',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:EscalationEventDefinition',\n    cancelActivity: false\n  }\n}, {\n  label: 'Conditional Boundary Event (non-interrupting)',\n  actionName: 'replace-with-non-interrupting-conditional-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-non-interrupting-condition',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:ConditionalEventDefinition',\n    cancelActivity: false\n  }\n}, {\n  label: 'Signal Boundary Event (non-interrupting)',\n  actionName: 'replace-with-non-interrupting-signal-boundary',\n  className: 'bpmn-icon-intermediate-event-catch-non-interrupting-signal',\n  target: {\n    type: 'bpmn:BoundaryEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition',\n    cancelActivity: false\n  }\n}];\nexport var EVENT_SUB_PROCESS_START_EVENT = [{\n  label: 'Message Start Event',\n  actionName: 'replace-with-message-start',\n  className: 'bpmn-icon-start-event-message',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition'\n  }\n}, {\n  label: 'Timer Start Event',\n  actionName: 'replace-with-timer-start',\n  className: 'bpmn-icon-start-event-timer',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:TimerEventDefinition'\n  }\n}, {\n  label: 'Conditional Start Event',\n  actionName: 'replace-with-conditional-start',\n  className: 'bpmn-icon-start-event-condition',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:ConditionalEventDefinition'\n  }\n}, {\n  label: 'Signal Start Event',\n  actionName: 'replace-with-signal-start',\n  className: 'bpmn-icon-start-event-signal',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition'\n  }\n}, {\n  label: 'Error Start Event',\n  actionName: 'replace-with-error-start',\n  className: 'bpmn-icon-start-event-error',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:ErrorEventDefinition'\n  }\n}, {\n  label: 'Escalation Start Event',\n  actionName: 'replace-with-escalation-start',\n  className: 'bpmn-icon-start-event-escalation',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:EscalationEventDefinition'\n  }\n}, {\n  label: 'Compensation Start Event',\n  actionName: 'replace-with-compensation-start',\n  className: 'bpmn-icon-start-event-compensation',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:CompensateEventDefinition'\n  }\n}, {\n  label: 'Message Start Event (non-interrupting)',\n  actionName: 'replace-with-non-interrupting-message-start',\n  className: 'bpmn-icon-start-event-non-interrupting-message',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:MessageEventDefinition',\n    isInterrupting: false\n  }\n}, {\n  label: 'Timer Start Event (non-interrupting)',\n  actionName: 'replace-with-non-interrupting-timer-start',\n  className: 'bpmn-icon-start-event-non-interrupting-timer',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:TimerEventDefinition',\n    isInterrupting: false\n  }\n}, {\n  label: 'Conditional Start Event (non-interrupting)',\n  actionName: 'replace-with-non-interrupting-conditional-start',\n  className: 'bpmn-icon-start-event-non-interrupting-condition',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:ConditionalEventDefinition',\n    isInterrupting: false\n  }\n}, {\n  label: 'Signal Start Event (non-interrupting)',\n  actionName: 'replace-with-non-interrupting-signal-start',\n  className: 'bpmn-icon-start-event-non-interrupting-signal',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:SignalEventDefinition',\n    isInterrupting: false\n  }\n}, {\n  label: 'Escalation Start Event (non-interrupting)',\n  actionName: 'replace-with-non-interrupting-escalation-start',\n  className: 'bpmn-icon-start-event-non-interrupting-escalation',\n  target: {\n    type: 'bpmn:StartEvent',\n    eventDefinitionType: 'bpmn:EscalationEventDefinition',\n    isInterrupting: false\n  }\n}];\nexport var SEQUENCE_FLOW = [{\n  label: 'Sequence Flow',\n  actionName: 'replace-with-sequence-flow',\n  className: 'bpmn-icon-connection'\n}, {\n  label: 'Default Flow',\n  actionName: 'replace-with-default-flow',\n  className: 'bpmn-icon-default-flow'\n}, {\n  label: 'Conditional Flow',\n  actionName: 'replace-with-conditional-flow',\n  className: 'bpmn-icon-conditional-flow'\n}];\nexport var PARTICIPANT = [{\n  label: 'Expanded Pool',\n  actionName: 'replace-with-expanded-pool',\n  className: 'bpmn-icon-participant',\n  target: {\n    type: 'bpmn:Participant',\n    isExpanded: true\n  }\n}, {\n  label: function (element) {\n    var label = 'Empty Pool';\n    if (element.children && element.children.length) {\n      label += ' (removes content)';\n    }\n    return label;\n  },\n  actionName: 'replace-with-collapsed-pool',\n  // TODO(@janstuemmel): maybe design new icon\n  className: 'bpmn-icon-lane',\n  target: {\n    type: 'bpmn:Participant',\n    isExpanded: false\n  }\n}];","map":null,"metadata":{},"sourceType":"module"}