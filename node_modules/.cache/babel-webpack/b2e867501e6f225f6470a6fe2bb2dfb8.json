{"ast":null,"code":"import { environment } from \"../../../environments/environment\";\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./config.service\";\nimport * as i4 from \"../../../app/shared/services/sso-auth.service\";\nexport let ManageRouterService = /*#__PURE__*/(() => {\n  class ManageRouterService {\n    constructor(http, router, config, sso) {\n      this.http = http;\n      this.router = router;\n      this.config = config;\n      this.sso = sso;\n      this.routerDF$ = new Subject();\n      this.appsData$ = new Subject();\n      this.finalData = {};\n      this.routerCount = 0;\n      this.offsetValue = 0;\n      this.loadingMore = false;\n      this.noMoreRecords = false;\n      this.isFreshSearch = false;\n      this.appNames = [];\n      this.updateContainerParams = {};\n      this.defaulContainersAllowedHtml = '';\n      this.routerObj = {\n        main: true,\n        hasSub: false,\n        subCount: 0\n      };\n      this.rightClickEventIds = [];\n      this.selectedSatelliteData = {\n        'modelNumber': '',\n        'firmwareVersion': ''\n      };\n      this.routerDatas = {};\n      this.mainRouterData = {};\n      this.apMacAdr = '';\n      this.apRouterId = '';\n      this.searchRouterId = '';\n      this.searchRouterMacId = '';\n      this.gsRouter = false;\n      this.containerInputs = [];\n      this.routerDisplayData = [];\n      this.applicationsAllowed = [];\n      this.processingApps = [];\n      this.readyToInstallApps = [];\n      this.containersAllowed = [];\n      this.containersSelected = [];\n      this.parentRouter = {};\n      this.satRouters = {};\n      this.containersAllowedObj = this.config.getContainersAllowedObj();\n      this.applicationIds = {\n        \"CIEP\": \"7\",\n        \"CIES\": \"6\",\n        \"iothub\": \"2\",\n        \"wifiapi\": \"10000\",\n        \"vz_iothub\": \"10001\",\n        \"sthub\": \"3\"\n      };\n      this.refreshApps = false;\n      this.pendingData = {};\n      this.hideApplicationsList = false;\n      this.routerListObj = {};\n      this.installRouter = {};\n    }\n    getRouterCount(macAddr) {\n      this.searchRouterMacId = macAddr;\n      if (this.loadingMore) {\n        return;\n      }\n      macAddr = macAddr.trim();\n      if (!macAddr) {\n        return;\n      }\n      let params = {};\n      if (macAddr) {\n        macAddr = macAddr.toLowerCase();\n        params['value'] = macAddr;\n      }\n      params['type'] = \"router\";\n      //this.loadingMore = true;\n      let searchMacIsRG = false;\n      this.routerListObj = {};\n      return this.http.get(environment.SP_API_BASE_URL + '/router?type=' + params['type'] + '&value=' + params['value']);\n    }\n    getRouter(macAddr) {\n      this.searchRouterMacId = macAddr;\n      if (this.loadingMore) {\n        return;\n      }\n      macAddr = macAddr.trim();\n      if (!macAddr) {\n        return;\n      }\n      let params = {};\n      if (macAddr) {\n        macAddr = macAddr.toLowerCase();\n        params['value'] = macAddr;\n      }\n      params['type'] = \"router\";\n      this.loadingMore = true;\n      let searchMacIsRG = false;\n      this.routerListObj = {};\n      this.http.get(environment.SP_API_BASE_URL + '/router?type=' + params['type'] + '&value=' + params['value']).subscribe(jdata => {\n        if (jdata) {\n          this.hideApplicationsList = false;\n          this.containerInputs = [];\n          this.routerDisplayData = [];\n          this.mainRouterData = {};\n          this.apMacAdr = '';\n          this.apRouterId = '';\n          this.routerObj['hasSub'] = false;\n          this.routerObj['subCount'] = 0;\n          //$(\"#display-router-info-div\").show();\n          let uhtml = '';\n          let containersAllowedHtml = '';\n          let userData = jdata.user;\n          this.finalData['userData'] = userData;\n          let routers = jdata.routers;\n          let showIothub = false;\n          let showSthub = false;\n          let showVz_iothub = false;\n          this.rightClickEventIds = [];\n          this.routerDatas = {};\n          if (routers) {\n            this.routerCount = routers.length;\n            this.finalData['routers'] = routers;\n            let modelNumberImage = '';\n            let routerImagesObj = {\n              // 'MGS2026E-blue': 'app-assets/images/router_GS2026E_blue.png',\n              // 'MGS2026E-red': 'app-assets/images/router_GS2026E_red.png',\n              // 'MGS2020E-blue': 'app-assets/images/router_GS2020E_blue.png',\n              // 'MGS2020E-red': 'app-assets/images/router_GS2020E_red.png',\n              // 'GS2026E-blue': 'assets/images/router_GS2026E_blue.png',\n              // 'GS2026E-red': 'assets/images/router_GS2026E_red.png',\n              // 'GS2020E-blue': 'assets/images/router_GS2020E_blue.png',\n              // 'GS2020E-red': 'assets/images/router_GS2020E_red.png',\n              // 'GM1020-blue': 'assets/images/router_GM1020_blue.png',\n              // 'GM1020-red': 'assets/images/router_GM1020_red.png',\n              // 'GM844E-blue': 'assets/images/router_GM844E_blue.png',\n              // 'GM844E-red': 'assets/images/router_GM844E_red.png',\n              // 'HK01-blue': 'assets/images/router_HK01_blue.png',\n              // 'HK01-red': 'assets/images/router_HK01_red.png',\n              // '844E-1-blue': 'assets/images/router_844E-1_blue.png',\n              // '844E-1-red': 'assets/images/router_844E-1_red.png',\n              // '844E-2-blue': 'assets/images/router_844E-2_blue.png',\n              // '844E-2-red': 'assets/images/router_844E-2_red.png',\n              // '813G-2-blue': 'assets/images/router_813G-2_blue.png',\n              // '813G-2-red': 'assets/images/router_813G-2_red.png',\n              // '804Mesh-blue': 'assets/images/router_GM844E_blue.png',\n              // '804Mesh-red': 'assets/images/router_GM844E_red.png',\n              // '854G-2-blue': 'assets/images/router_854G-2_blue.png',\n              // '854G-2-red': 'assets/images/router_854G-2_red.png',\n            };\n            let html = \"\";\n            let rname = \"\";\n            let extraString = \"\";\n            let routerImg = \"\";\n            let modelNmbr = \"\";\n            let arrowType = \"\";\n            let userId = userData ? userData.userId : \"\";\n            let routersLen = routers.length;\n            if (routersLen > 1) {\n              this.routerObj['hasSub'] = true;\n              this.routerObj['subCount'] = routersLen - 1;\n            }\n            let gigaRouters = this.config.getGigaRouters();\n            for (let i = 0; i < routersLen; i++) {\n              this.routerListObj[routers[i].routerId] = routers[i];\n              if (i == 0) {\n                this.parentRouter = routers[i];\n                this.installRouter = routers[i];\n                for (let g = 0; g < gigaRouters.length; g++) {\n                  if (this.parentRouter.modelNumber.indexOf(gigaRouters[g]) !== -1) {\n                    this.hideApplicationsList = true;\n                  }\n                }\n              } else {\n                this.satRouters[routers[i].routerId] = routers[i];\n              }\n              modelNmbr = routers[i].modelNumber;\n              if (routers[i].routerMac == macAddr) {\n                this.searchRouterId = routers[i].routerId;\n              }\n              if (routers[i].routerMac == macAddr && routers[i].type == \"ROUTER\" && (modelNmbr.substr(0, 2) == \"GS\" || modelNmbr.substr(0, 3) == \"MGS\")) {\n                this.gsRouter = true;\n              }\n              /* #map-1151*/\n              if (routers[i].routerMac == macAddr && routers[i].type == \"ROUTER\") {\n                searchMacIsRG = true;\n              }\n              /* #map-1151*/\n              if (routers[i].modelNumber == \"GS2026E\") {\n                showIothub = true;\n                showSthub = true;\n              }\n              if (routers[i].modelNumber == \"HK01\") {\n                showVz_iothub = true;\n              }\n              rname = routers[i].name.replace(/'/g, '$');\n              if (routers[i].status.toUpperCase() == \"GOOD\") {\n                modelNumberImage = routers[i].modelNumber + \"-blue\";\n                if (routerImagesObj[modelNumberImage]) {\n                  routerImg = routerImagesObj[modelNumberImage];\n                } else {\n                  routerImg = 'assets/images/router_default_icon_3.png';\n                }\n              } else {\n                modelNumberImage = routers[i].modelNumber + \"-red\";\n                if (routerImagesObj[modelNumberImage]) {\n                  routerImg = routerImagesObj[modelNumberImage];\n                } else {\n                  routerImg = 'assets/images/router_red_icon_3.png';\n                }\n              }\n              if (i) {\n                arrowType = 'assets/images/dotted-arrow.png';\n              } else {\n                arrowType = 'assets/images/arrow.png';\n              }\n              this.routerDisplayData.push(Object.assign({\n                routerImage: routerImg,\n                arrowType: arrowType\n              }, routers[i]));\n              if (routers[i].type == \"ROUTER\") {\n                this.mainRouterData = routers[i];\n              }\n              if (routers[i].type == \"AP\" && routers[i]['status'].toUpperCase() == \"GOOD\" && this.mainRouterData['firmwareVersion'] != routers[i].firmwareVersion) {\n                this.rightClickEventIds.push({\n                  \"routerDiv\": 'router-' + routers[i].routerId,\n                  \"routerId\": routers[i].routerId\n                });\n              }\n              if (typeof this.routerDatas[routers[i].routerId] != 'object') {\n                this.routerDatas[routers[i].routerId] = {};\n              }\n              this.routerDatas[routers[i].routerId] = routers[i];\n            }\n          }\n          this.updateContainerParams = jdata.user;\n          this.updateContainerParams['macAddr'] = params['value'];\n          let containersAllowed = jdata.containersAllowed;\n          let containersSelected = jdata.containersSelected;\n          let checkCode = false;\n          this.containersAllowed = containersAllowed;\n          this.containersSelected = containersSelected;\n          // this.getApplicationsByRouter();\n          /* #map-1070 */\n          if (!showIothub) {\n            let iothubIndex = containersAllowed.indexOf(\"iothub\");\n            if (iothubIndex > -1) {\n              containersAllowed.splice(iothubIndex, 1);\n            }\n          }\n          if (!showVz_iothub) {\n            let vz_iothubIndex = containersAllowed.indexOf(\"vz_iothub\");\n            if (vz_iothubIndex > -1) {\n              containersAllowed.splice(vz_iothubIndex, 1);\n            }\n          }\n          /* #map-1070 */\n          /* #map-1686 */\n          if (!showSthub) {\n            let sthubIndex = containersAllowed.indexOf(\"sthub\");\n            if (sthubIndex > -1) {\n              containersAllowed.splice(sthubIndex, 1);\n            }\n          }\n          /* #map-1686 */\n          /* #map-1151*/\n          if (!this.gsRouter) {\n            let ciesIndex = containersAllowed.indexOf(\"CIES\");\n            if (ciesIndex > -1) {\n              containersAllowed.splice(ciesIndex, 1);\n            }\n            let ciepIndex = containersAllowed.indexOf(\"CIEP\");\n            if (ciepIndex > -1) {\n              containersAllowed.splice(ciepIndex, 1);\n            }\n          }\n          /* #map-1151 */\n          if (containersAllowed && containersAllowed.length) {\n            let containersAllowedObj = this.containersAllowedObj;\n            let containersAllowedName = '';\n            let containersAllowedLength = containersAllowed.length;\n            let disable = false;\n            let scope = this.sso.getScopes();\n            for (let j = 0; j < containersAllowedLength; j++) {\n              checkCode = false;\n              disable = true;\n              if (containersSelected && containersSelected.indexOf(containersAllowed[j]) != -1) {\n                checkCode = true;\n              }\n              if (containersAllowedObj[containersAllowed[j]]) {\n                containersAllowedName = containersAllowedObj[containersAllowed[j]];\n              } else {\n                containersAllowedName = containersAllowed[j];\n              }\n              // scopes\n              let ciepIndex = containersAllowed.indexOf(\"CIEP\");\n              if (ciepIndex > -1) {\n                disable = false;\n              }\n              let ciesIndex = containersAllowed.indexOf(\"CIES\");\n              if (ciesIndex > -1) {\n                disable = false;\n              }\n              let sthubIndex = containersAllowed.indexOf(\"sthub\");\n              if (sthubIndex > -1) {\n                disable = false;\n              }\n              this.containerInputs.push({\n                name: containersAllowedName,\n                value: containersAllowed[j],\n                checked: checkCode,\n                disabled: disable\n              });\n            }\n          }\n        }\n        this.finalData['hideApplicationsList'] = this.hideApplicationsList;\n        this.finalData['searchRouterId'] = this.searchRouterId;\n        this.finalData['searchRouterMacId'] = this.searchRouterMacId;\n        this.finalData['parentRouter'] = this.parentRouter;\n        this.finalData['hasSub'] = this.routerObj['hasSub'];\n        this.finalData['containerInputs'] = this.containerInputs;\n        this.finalData['routerDisplayData'] = this.routerDisplayData;\n        this.finalData['containersSelected'] = this.containersSelected;\n        this.finalData['routerDataLoaded'] = true;\n        this.finalData['containersAllowedObj'] = this.containersAllowedObj;\n        this.finalData['error'] = [];\n        this.routerDF$.next(this.finalData);\n        this.loadingMore = false;\n        //console.log(this.finalData);\n      }, err => {\n        this.loadingMore = false;\n        this.finalData['routerDataLoaded'] = true;\n        this.finalData['error'] = err;\n        this.routerDF$.next(this.finalData);\n      });\n    }\n    routerContainerUpdate(data) {\n      let params = Object.assign({\n        containersSelected: data\n      }, this.finalData['userData']);\n      delete params['name'];\n      ////console.log(params);return;\n      return this.http.post(environment.SP_API_BASE_URL + '/router/container/update', params);\n    }\n    removeRouter(data) {\n      let params = {};\n      params['routerId'] = data.routerId;\n      params['userId'] = data.userId;\n      params['type'] = data.type;\n      ////console.log(params);return;\n      return this.http.post(environment.SP_API_BASE_URL + '/router/remove', params);\n    }\n    removeDuplicates(array) {\n      return array.filter((a, b) => array.indexOf(a) === b);\n    }\n    getApplicationsByRouter(routerId) {\n      this.installRouter = this.routerListObj[routerId];\n      let params = {};\n      params['routerId'] = routerId;\n      params['userId'] = this.finalData['userData'].userId;\n      this.http.get(environment.SP_API_BASE_URL + '/application/list?routerId=' + params['routerId'] + '&userId=' + params['userId']).subscribe(jdata => {\n        if (jdata && jdata.apps && this.containersAllowed) {\n          this.pendingData = {};\n          let isStatusProcessing = false;\n          this.refreshApps = false;\n          let showEPC = false;\n          let showPIQ = false;\n          let showSHA = false;\n          let showST = false;\n          let installedServiceCount = 0;\n          let readyToInstallServiceCount = 0;\n          this.applicationsAllowed = [];\n          this.processingApps = [];\n          this.readyToInstallApps = [];\n          let data = jdata.apps;\n          if (routerId == this.parentRouter.routerId) {\n            showEPC = true;\n            showPIQ = true;\n          }\n          if (this.routerDatas[routerId] && this.routerDatas[routerId].modelNumber == \"GS2026E\") {\n            showSHA = true;\n            showST = true;\n          }\n          let installedAppsArr = [];\n          for (let i = 0; i < data.length; i++) {\n            if (data[i].name == 'alexa') {\n              continue;\n            }\n            if (this.containersAllowed.indexOf(data[i].name) == -1) {\n              continue;\n            }\n            if (this.containersSelected.indexOf(data[i].name) == -1 && data[i].status == \"installed\") {\n              this.refreshApps = true;\n            }\n            if (data[i].status == \"installed\") {\n              installedAppsArr.push(data[i].name);\n              if (data[i].status === 'installed' && routerId == this.parentRouter.routerId) {\n                installedServiceCount++;\n              }\n            } else if (data[i].status == \"uninstalled\") {\n              this.readyToInstallApps.push(data[i].name);\n            } else if (data[i].status == \"processing\") {\n              this.refreshApps = true;\n              this.processingApps.push(data[i].name);\n              isStatusProcessing = true;\n              this.pendingData = {\n                status: data[i].status,\n                desc: data[i].desc,\n                name: '( ' + this.containersAllowedObj[data[i].name] + ' )'\n              };\n            }\n          }\n          for (let i = 0; i < this.containersAllowed.length; i++) {\n            if (this.containersAllowed[i] == 'CIES' && !showPIQ) {\n              continue;\n            }\n            if (this.containersAllowed[i] == 'CIEP' && !showEPC) {\n              continue;\n            }\n            if (this.containersAllowed[i] == 'iothub' && !showSHA) {\n              continue;\n            }\n            if (this.containersAllowed[i] == 'vz_iothub' && !showST) {\n              continue;\n            }\n            if (this.containersAllowed[i] == 'sthub' && !showST) {\n              continue;\n            }\n            this.applicationsAllowed.push(this.containersAllowed[i]);\n          }\n          this.applicationsAllowed = this.removeDuplicates(this.applicationsAllowed);\n          this.readyToInstallApps = [];\n          for (var i = 0; i < this.applicationsAllowed.length; i++) {\n            if (installedAppsArr.indexOf(this.applicationsAllowed[i]) != -1) {\n              continue;\n            }\n            if (this.processingApps.indexOf(this.applicationsAllowed[i]) != -1) {\n              continue;\n            }\n            if (routerId == this.parentRouter.routerId) {\n              readyToInstallServiceCount++;\n            }\n            this.readyToInstallApps.push(this.applicationsAllowed[i]);\n          }\n          this.readyToInstallApps = this.removeDuplicates(this.readyToInstallApps);\n          if (installedAppsArr.indexOf('alexa') != -1) {\n            installedAppsArr.splice(installedAppsArr.indexOf('alexa'), 1);\n          }\n          // //console.log('installed apps - ' + installedAppsArr);\n          // //console.log('applications allowed - ' + this.applicationsAllowed);\n          // //console.log('processingApps - ' + this.processingApps)\n          // //console.log('readyToInstallApps - ' + this.readyToInstallApps);\n          // //console.log('isStatusProcessing ' + isStatusProcessing);\n          let installedAppNames = [];\n          for (let i = 0; i < installedAppsArr.length; i++) {\n            installedAppNames.push(this.containersAllowedObj[installedAppsArr[i]]);\n          }\n          let readyToInstallAppsObj = [];\n          for (let i = 0; i < this.readyToInstallApps.length; i++) {\n            readyToInstallAppsObj.push({\n              value: this.readyToInstallApps[i],\n              name: this.containersAllowedObj[this.readyToInstallApps[i]]\n            });\n          }\n          let showPendingApps = Object.keys(this.pendingData);\n          this.appsData$.next({\n            showPendingStatus: showPendingApps.length,\n            readyToInstallApps: readyToInstallAppsObj,\n            installedAppsArr: installedAppNames,\n            processingApps: this.processingApps,\n            pendingData: this.pendingData,\n            appDataLoaded: true,\n            refreshApps: this.refreshApps\n          });\n        }\n      });\n    }\n    installApplication(data) {\n      data['appId'] = this.applicationIds[data['appId']];\n      data['userId'] = this.finalData['userData'].userId;\n      return this.http.post(environment.SP_API_BASE_URL + '/application/install', data);\n    }\n    updateFirmwareVersion(data) {\n      return this.http.post(environment.SP_API_BASE_URL + '/swupgrade/event/add', data);\n    }\n    getFWIdByModelVersion(data) {\n      return this.http.get(environment.SP_API_BASE_URL + '/swupgrade/firmware/list?modelNumber=' + data['modelNumber'] + '&firmwareVersion=' + data['firmwareVersion']);\n    }\n    checkContainerPermission(appId) {\n      let params = {};\n      params['routerMac'] = this.parentRouter.routerMac;\n      params['appId'] = appId;\n      return this.http.get(environment.SP_API_BASE_URL + `/app/validate/container/permission?routerMac=${params['routerMac']}&appId=${params['appId']}`);\n    }\n    checkContainerInstall(appId) {\n      let params = {};\n      params['routerMac'] = this.installRouter.routerMac;\n      params['appId'] = appId;\n      return this.http.get(environment.SP_API_BASE_URL + `/app/validate/container/install?routerMac=${params['routerMac']}&appId=${params['appId']}`);\n    }\n  }\n  ManageRouterService.ɵfac = function ManageRouterService_Factory(t) {\n    return new (t || ManageRouterService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ConfigService), i0.ɵɵinject(i4.SsoAuthService));\n  };\n  ManageRouterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ManageRouterService,\n    factory: ManageRouterService.ɵfac,\n    providedIn: 'root'\n  });\n  return ManageRouterService;\n})();","map":null,"metadata":{},"sourceType":"module"}