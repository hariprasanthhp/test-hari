{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { addProfileAppUrl, addWebAddressUrl, checkProfileListUrl, getAppListUrl, getResSettingsByIDUrl, getSearchListUrl, getWebAddressUrl, removeSelectedAppUrl, removeWebUrl, roleProfileListUrl, updateRoleProfileUrl } from \"./endPoints\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nexport let SmbExperianceIQService = /*#__PURE__*/(() => {\n  class SmbExperianceIQService {\n    constructor(http, formBuilder) {\n      this.http = http;\n      this.formBuilder = formBuilder;\n    }\n    getRoleProfileList(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(roleProfileListUrl, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getResSettingsById(userId, roleId, profileId) {\n      const params = new HttpParams().set('userId', userId).set('roleId', roleId).set('profileId', profileId);\n      return this.http.get(getResSettingsByIDUrl, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateRoleProfile(body) {\n      return this.http.post(updateRoleProfileUrl, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getWebList(userId, profileId) {\n      const params = new HttpParams().set('userId', userId).set('profileId', profileId);\n      return this.http.get(getWebAddressUrl, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    addWebAddressMain(body) {\n      return this.http.put(addWebAddressUrl, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    removeWebUrlMain(webUrlId, profileId, userId) {\n      const params = new HttpParams().set('userId', userId).set('profileId', profileId).set('id', webUrlId);\n      return this.http.delete(removeWebUrl, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getAppListMain(userId, profileId) {\n      const params = new HttpParams().set('userId', userId).set('profileId', profileId);\n      return this.http.get(getAppListUrl, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    searchAppMain(keyWord, userId, profileId) {\n      const params = new HttpParams().set('userId', userId).set('profileId', profileId).set('keyword', keyWord);\n      return this.http.get(getSearchListUrl, {\n        params\n      }).pipe(map(data => data.apps), catchError(this.handleError)); //  handle the error)); \n    }\n\n    editAppMain(body) {\n      return this.http.post(addProfileAppUrl, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    deleteAppByProfileAndAppIdMain(appId, userId, profileId) {\n      const params = new HttpParams().set('userId', userId).set('profileId', profileId).set('aid', appId);\n      return this.http.delete(removeSelectedAppUrl, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    checkRoleProfilesCreated(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(checkProfileListUrl, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n  }\n  SmbExperianceIQService.ɵfac = function SmbExperianceIQService_Factory(t) {\n    return new (t || SmbExperianceIQService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FormBuilder));\n  };\n  SmbExperianceIQService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SmbExperianceIQService,\n    factory: SmbExperianceIQService.ɵfac,\n    providedIn: 'root'\n  });\n  return SmbExperianceIQService;\n})();","map":null,"metadata":{},"sourceType":"module"}