{"ast":null,"code":"import inherits from 'inherits';\nimport { forEach } from 'min-dash';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { isEventSubProcess } from '../../../util/DiUtil';\n\n/**\n * BPMN-specific replace behavior.\n */\nexport default function ReplaceElementBehaviour(bpmnReplace, bpmnRules, elementRegistry, injector, modeling, selection) {\n  injector.invoke(CommandInterceptor, this);\n  this._bpmnReplace = bpmnReplace;\n  this._elementRegistry = elementRegistry;\n  this._selection = selection;\n\n  // replace elements on move\n  this.postExecuted(['elements.move'], 500, function (event) {\n    var context = event.context,\n      target = context.newParent,\n      newHost = context.newHost,\n      elements = [];\n    forEach(context.closure.topLevel, function (topLevelElements) {\n      if (isEventSubProcess(topLevelElements)) {\n        elements = elements.concat(topLevelElements.children);\n      } else {\n        elements = elements.concat(topLevelElements);\n      }\n    });\n\n    // set target to host if attaching\n    if (elements.length === 1 && newHost) {\n      target = newHost;\n    }\n    var canReplace = bpmnRules.canReplace(elements, target);\n    if (canReplace) {\n      this.replaceElements(elements, canReplace.replacements, newHost);\n    }\n  }, this);\n\n  // update attachments on host replace\n  this.postExecute(['shape.replace'], 1500, function (e) {\n    var context = e.context,\n      oldShape = context.oldShape,\n      newShape = context.newShape,\n      attachers = oldShape.attachers,\n      canReplace;\n    if (attachers && attachers.length) {\n      canReplace = bpmnRules.canReplace(attachers, newShape);\n      this.replaceElements(attachers, canReplace.replacements);\n    }\n  }, this);\n\n  // keep ID on shape replace\n  this.postExecuted(['shape.replace'], 1500, function (e) {\n    var context = e.context,\n      oldShape = context.oldShape,\n      newShape = context.newShape;\n    modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);\n    modeling.updateProperties(newShape, {\n      id: oldShape.id\n    });\n  });\n}\ninherits(ReplaceElementBehaviour, CommandInterceptor);\nReplaceElementBehaviour.prototype.replaceElements = function (elements, newElements) {\n  var elementRegistry = this._elementRegistry,\n    bpmnReplace = this._bpmnReplace,\n    selection = this._selection;\n  forEach(newElements, function (replacement) {\n    var newElement = {\n      type: replacement.newElementType\n    };\n    var oldElement = elementRegistry.get(replacement.oldElementId);\n    var idx = elements.indexOf(oldElement);\n    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, {\n      select: false\n    });\n  });\n  if (newElements) {\n    selection.select(elements);\n  }\n};\nReplaceElementBehaviour.$inject = ['bpmnReplace', 'bpmnRules', 'elementRegistry', 'injector', 'modeling', 'selection'];","map":null,"metadata":{},"sourceType":"module"}