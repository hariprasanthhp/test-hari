{"ast":null,"code":"import { isAny } from 'bpmn-js/lib/features/modeling/util/ModelingUtil';\nimport { getBusinessObject } from 'bpmn-js/lib/util/ModelUtil';\nimport { escapeHTML } from 'bpmn-js-properties-panel/lib/Utils';\nimport { query as domQuery } from 'min-dom';\nimport cmdHelper from 'bpmn-js-properties-panel/lib/helper/CmdHelper';\nimport elementHelper from 'bpmn-js-properties-panel/lib/helper/ElementHelper';\nexport default function (group, element, bpmnFactory, translate) {\n  const bo = getBusinessObject(element);\n  if (!bo) {\n    return;\n  }\n  if (!isConditionalSource(element.source)) {\n    return;\n  }\n  group.entries.push({\n    id: 'condition',\n    label: translate('Condition expression'),\n    html:\n    // expression\n    `<div class=\"bpp-row\">\n              <label for=\"zeebe-condition\">\n                ${escapeHTML(translate('Condition expression'))}\n              </label>\n              <div class=\"bpp-field-wrapper\">\n                <input id=\"zeebe-condition\" type=\"text\" name=\"condition\" />\n                <button class=\"action-button clear\" data-action=\"clear\" data-show=\"canClear\">\n                 <span>X</span>\n                </button>\n              </div>\n            </div>`,\n    get: function (element, propertyName) {\n      // read values from xml:\n      const conditionExpression = bo.conditionExpression;\n      const values = {};\n      let conditionType = '';\n      if (conditionExpression) {\n        conditionType = 'expression';\n        values.condition = conditionExpression.get('body');\n      }\n      values.conditionType = conditionType;\n      return values;\n    },\n    set: function (element, values, containerElement) {\n      const conditionType = 'expression';\n      const commands = [];\n      const conditionProps = {\n        body: undefined\n      };\n      const condition = values.condition;\n      conditionProps.body = condition;\n      const update = {\n        'conditionExpression': undefined\n      };\n      if (conditionType) {\n        update.conditionExpression = elementHelper.createElement('bpmn:FormalExpression', conditionProps, bo, bpmnFactory);\n        const source = element.source;\n\n        // if default-flow, remove default-property from source\n        if (source.businessObject.default === bo) {\n          commands.push(cmdHelper.updateProperties(source, {\n            'default': undefined\n          }));\n        }\n      }\n      commands.push(cmdHelper.updateBusinessObject(element, bo, update));\n      return commands;\n    },\n    validate: function (element, values) {\n      const validationResult = {};\n      if (!values.condition && values.conditionType === 'expression') {\n        validationResult.condition = 'Must provide a value';\n      }\n      return validationResult;\n    },\n    isExpression: function (element, inputNode) {\n      const conditionType = domQuery('select[name=conditionType]', inputNode);\n      if (conditionType.selectedIndex >= 0) {\n        return conditionType.options[conditionType.selectedIndex].value === 'expression';\n      }\n    },\n    clear: function (element, inputNode) {\n      // clear text input\n      domQuery('input[name=condition]', inputNode).value = '';\n      return true;\n    },\n    canClear: function (element, inputNode) {\n      const input = domQuery('input[name=condition]', inputNode);\n      return input.value !== '';\n    },\n    cssClasses: ['bpp-textfield']\n  });\n}\n\n// helper //////////////////////////\n\nconst CONDITIONAL_SOURCES = ['bpmn:Activity', 'bpmn:ExclusiveGateway', 'bpmn:InclusiveGateway', 'bpmn:ComplexGateway'];\nfunction isConditionalSource(element) {\n  return isAny(element, CONDITIONAL_SOURCES);\n}","map":null,"metadata":{},"sourceType":"module"}