{"ast":null,"code":"import inherits from 'inherits';\nimport KeyboardBindings from 'diagram-js/lib/features/keyboard/KeyboardBindings';\n\n/**\n * BPMN 2.0 specific keyboard bindings.\n *\n * @param {Injector} injector\n */\nexport default function BpmnKeyboardBindings(injector) {\n  injector.invoke(KeyboardBindings, this);\n}\ninherits(BpmnKeyboardBindings, KeyboardBindings);\nBpmnKeyboardBindings.$inject = ['injector'];\n\n/**\n * Register available keyboard bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\nBpmnKeyboardBindings.prototype.registerBindings = function (keyboard, editorActions) {\n  // inherit default bindings\n  KeyboardBindings.prototype.registerBindings.call(this, keyboard, editorActions);\n\n  /**\n   * Add keyboard binding if respective editor action\n   * is registered.\n   *\n   * @param {string} action name\n   * @param {Function} fn that implements the key binding\n   */\n  function addListener(action, fn) {\n    if (editorActions.isRegistered(action)) {\n      keyboard.addListener(fn);\n    }\n  }\n\n  // select all elements\n  // CTRL + A\n  addListener('selectElements', function (context) {\n    var event = context.keyEvent;\n    if (keyboard.isKey(['a', 'A'], event) && keyboard.isCmd(event)) {\n      editorActions.trigger('selectElements');\n      return true;\n    }\n  });\n\n  // search labels\n  // CTRL + F\n  addListener('find', function (context) {\n    var event = context.keyEvent;\n    if (keyboard.isKey(['f', 'F'], event) && keyboard.isCmd(event)) {\n      editorActions.trigger('find');\n      return true;\n    }\n  });\n\n  // activate space tool\n  // S\n  addListener('spaceTool', function (context) {\n    var event = context.keyEvent;\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n    if (keyboard.isKey(['s', 'S'], event)) {\n      editorActions.trigger('spaceTool');\n      return true;\n    }\n  });\n\n  // activate lasso tool\n  // L\n  addListener('lassoTool', function (context) {\n    var event = context.keyEvent;\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n    if (keyboard.isKey(['l', 'L'], event)) {\n      editorActions.trigger('lassoTool');\n      return true;\n    }\n  });\n\n  // activate hand tool\n  // H\n  addListener('handTool', function (context) {\n    var event = context.keyEvent;\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n    if (keyboard.isKey(['h', 'H'], event)) {\n      editorActions.trigger('handTool');\n      return true;\n    }\n  });\n\n  // activate global connect tool\n  // C\n  addListener('globalConnectTool', function (context) {\n    var event = context.keyEvent;\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n    if (keyboard.isKey(['c', 'C'], event)) {\n      editorActions.trigger('globalConnectTool');\n      return true;\n    }\n  });\n\n  // activate direct editing\n  // E\n  addListener('directEditing', function (context) {\n    var event = context.keyEvent;\n    if (keyboard.hasModifier(event)) {\n      return;\n    }\n    if (keyboard.isKey(['e', 'E'], event)) {\n      editorActions.trigger('directEditing');\n      return true;\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}