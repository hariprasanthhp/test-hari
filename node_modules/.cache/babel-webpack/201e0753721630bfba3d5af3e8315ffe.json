{"ast":null,"code":"import { EventEmitter } from '@angular/core';\n// import * as Highcharts from 'highcharts/highstock';\nimport * as Highcharts from 'highcharts/highcharts';\nimport more from 'highcharts/highcharts-more';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"../../service/health.service\";\nimport * as i3 from \"../../pon-utilization/service/ccochart.service\";\nimport * as i4 from \"../../pon-utilization/service/nfainventory.service\";\nimport * as i5 from \"src/app/shared/services/export-excel.service\";\nimport * as i6 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i7 from \"src/app/sys-admin/services/common.service\";\nimport * as i8 from \"src/app/shared/services/common-functions.service\";\nimport * as i9 from \"src/app/support/shared/custom-pipes/shortnumber.pipe\";\nimport * as i10 from \"src/app/shared-utils/date-utils.service\";\nimport * as i11 from \"@angular/router\";\nimport * as i12 from \"src/app/support/support-traffic-reports/service/fa-utils.service\";\nimport * as i13 from \"src/app/shared/services/sso-auth.service\";\nimport * as i14 from \"@angular/common\";\nimport * as i15 from \"primeng/calendar\";\nimport * as i16 from \"@angular/forms\";\nconst _c0 = [\"showInfoModal\"];\nfunction TimeserieschartComponent_div_0_div_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.language[ctx_r8.timeseriesname] || ctx_r8.timeseriesname, \" \");\n  }\n}\nfunction TimeserieschartComponent_div_0_div_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.timeseriesname, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r9.system, \")\");\n  }\n}\nfunction TimeserieschartComponent_div_0_div_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r10.timeseriesname, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate3(\"(\", ctx_r10.interface, \"\", ctx_r10.system ? \",\" : \"\", \" \", ctx_r10.system, \")\");\n  }\n}\nfunction TimeserieschartComponent_div_0_div_2_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function TimeserieschartComponent_div_0_div_2_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(3);\n      return ctx_r12.closeChart();\n    });\n    i0.ɵɵelement(1, \"span\", 21);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TimeserieschartComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵelementStart(1, \"div\", 15);\n    i0.ɵɵtemplate(2, TimeserieschartComponent_div_0_div_2_div_2_Template, 2, 1, \"div\", 16);\n    i0.ɵɵtemplate(3, TimeserieschartComponent_div_0_div_2_div_3_Template, 4, 2, \"div\", 16);\n    i0.ɵɵtemplate(4, TimeserieschartComponent_div_0_div_2_div_4_Template, 4, 4, \"div\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 17);\n    i0.ɵɵtemplate(6, TimeserieschartComponent_div_0_div_2_button_6_Template, 2, 0, \"button\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", (!ctx_r4.interface || ctx_r4.interface == \"All\") && !ctx_r4.system);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (!ctx_r4.interface || ctx_r4.interface == \"All\") && ctx_r4.system);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.interface && ctx_r4.interface !== \"All\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.isCOC);\n  }\n}\nfunction TimeserieschartComponent_div_0_div_4_button_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function TimeserieschartComponent_div_0_div_4_button_15_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext(3);\n      return ctx_r15.closeChart();\n    });\n    i0.ɵɵelement(1, \"span\", 21);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c1 = function () {\n  return {\n    width: \"100%\",\n    height: \"38px\"\n  };\n};\nconst _c2 = function () {\n  return {\n    height: \"36px\"\n  };\n};\nconst _c3 = function () {\n  return {\n    standalone: true\n  };\n};\nfunction TimeserieschartComponent_div_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵelementStart(1, \"div\", 23);\n    i0.ɵɵelementStart(2, \"label\", 24);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 25);\n    i0.ɵɵelementStart(5, \"p-calendar\", 26);\n    i0.ɵɵlistener(\"ngModelChange\", function TimeserieschartComponent_div_0_div_4_Template_p_calendar_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return ctx_r17.lowFromDate = $event;\n    })(\"onSelect\", function TimeserieschartComponent_div_0_div_4_Template_p_calendar_onSelect_5_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.changeDate();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 23);\n    i0.ɵɵelementStart(7, \"label\", 24);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 25);\n    i0.ɵɵelementStart(10, \"p-calendar\", 26);\n    i0.ɵɵlistener(\"ngModelChange\", function TimeserieschartComponent_div_0_div_4_Template_p_calendar_ngModelChange_10_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return ctx_r20.lowToDate = $event;\n    })(\"onSelect\", function TimeserieschartComponent_div_0_div_4_Template_p_calendar_onSelect_10_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return ctx_r21.changeDate();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 27);\n    i0.ɵɵelementStart(12, \"div\", 28);\n    i0.ɵɵelementStart(13, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function TimeserieschartComponent_div_0_div_4_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.lowapplyfilter();\n    });\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(15, TimeserieschartComponent_div_0_div_4_button_15_Template, 2, 0, \"button\", 30);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r5.language[\"START_DATE\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(26, _c1));\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r5.language[\"START_DATE\"]);\n    i0.ɵɵproperty(\"inputStyle\", i0.ɵɵpureFunction0(27, _c2))(\"autoZIndex\", true)(\"selectOtherMonths\", true)(\"ngModel\", ctx_r5.lowFromDate)(\"showIcon\", true)(\"ngModelOptions\", i0.ɵɵpureFunction0(28, _c3))(\"maxDate\", ctx_r5.maxForStartDate)(\"minDate\", ctx_r5.minDateForCse);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r5.language[\"END_DATE\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(29, _c1));\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r5.language[\"END_DATE\"]);\n    i0.ɵɵproperty(\"inputStyle\", i0.ɵɵpureFunction0(30, _c2))(\"autoZIndex\", true)(\"selectOtherMonths\", true)(\"ngModel\", ctx_r5.lowToDate)(\"showIcon\", true)(\"ngModelOptions\", i0.ɵɵpureFunction0(31, _c3))(\"maxDate\", ctx_r5.maxDate)(\"minDate\", ctx_r5.lowFromDate);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.language.apply, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.page == \"ae\" && ctx_r5.charttype != \"ae_General\");\n  }\n}\nfunction TimeserieschartComponent_div_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵelementStart(1, \"span\", 33);\n    i0.ɵɵelement(2, \"img\", 34);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 35);\n    i0.ɵɵlistener(\"click\", function TimeserieschartComponent_div_0_div_5_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.timeseriesDatamsg = \"\";\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 36);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r6.timeseriesDatamsg, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction TimeserieschartComponent_div_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 37);\n    i0.ɵɵelementStart(1, \"div\", 38);\n    i0.ɵɵelementStart(2, \"div\", 39);\n    i0.ɵɵelementStart(3, \"span\", 40);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r7.language.Loading);\n  }\n}\nfunction TimeserieschartComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵtemplate(2, TimeserieschartComponent_div_0_div_2_Template, 7, 4, \"div\", 6);\n    i0.ɵɵelementStart(3, \"div\", 7);\n    i0.ɵɵtemplate(4, TimeserieschartComponent_div_0_div_4_Template, 16, 32, \"div\", 8);\n    i0.ɵɵtemplate(5, TimeserieschartComponent_div_0_div_5_Template, 6, 1, \"div\", 9);\n    i0.ɵɵtemplate(6, TimeserieschartComponent_div_0_div_6_Template, 5, 1, \"div\", 10);\n    i0.ɵɵelementStart(7, \"div\", 11);\n    i0.ɵɵelementStart(8, \"div\", 12);\n    i0.ɵɵelement(9, \"div\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r0.divid);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.csc || ctx_r0.page != \"ae\" || ctx_r0.charttype == \"ae_General\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.page != \"ae\" || ctx_r0.charttype == \"ae_General\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.timeseriesDatamsg);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.Timeseriesloader);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r0.Timeseriesloader && !ctx_r0.timeseriesDatamsg ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r0.chartnameid);\n  }\n}\nfunction TimeserieschartComponent_div_1_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵelementStart(1, \"span\", 33);\n    i0.ɵɵelement(2, \"img\", 34);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 35);\n    i0.ɵɵlistener(\"click\", function TimeserieschartComponent_div_1_div_22_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return ctx_r27.timeseriesDatamsg1 = \"\";\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 36);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r25 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r25.timeseriesDatamsg1, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction TimeserieschartComponent_div_1_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 37);\n    i0.ɵɵelementStart(1, \"div\", 38);\n    i0.ɵɵelementStart(2, \"div\", 39);\n    i0.ɵɵelementStart(3, \"span\", 40);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r26.language.Loading);\n  }\n}\nfunction TimeserieschartComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 41);\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵelementStart(2, \"div\", 14);\n    i0.ɵɵelementStart(3, \"div\", 15);\n    i0.ɵɵelement(4, \"div\", 42);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵelementStart(7, \"div\", 43);\n    i0.ɵɵelementStart(8, \"div\", 23);\n    i0.ɵɵelementStart(9, \"label\", 24);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 25);\n    i0.ɵɵelementStart(12, \"p-calendar\", 44);\n    i0.ɵɵlistener(\"ngModelChange\", function TimeserieschartComponent_div_1_Template_p_calendar_ngModelChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return ctx_r29.lowFromDateBIP = $event;\n    })(\"onSelect\", function TimeserieschartComponent_div_1_Template_p_calendar_onSelect_12_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.changeDateForBIP();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 23);\n    i0.ɵɵelementStart(14, \"label\", 24);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 25);\n    i0.ɵɵelementStart(17, \"p-calendar\", 44);\n    i0.ɵɵlistener(\"ngModelChange\", function TimeserieschartComponent_div_1_Template_p_calendar_ngModelChange_17_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return ctx_r32.lowToDateBIP = $event;\n    })(\"onSelect\", function TimeserieschartComponent_div_1_Template_p_calendar_onSelect_17_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r33 = i0.ɵɵnextContext();\n      return ctx_r33.changeDateForBIP();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 27);\n    i0.ɵɵelementStart(19, \"div\", 28);\n    i0.ɵɵelementStart(20, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function TimeserieschartComponent_div_1_Template_button_click_20_listener() {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return ctx_r34.lowapplyfilterForBIP();\n    });\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(22, TimeserieschartComponent_div_1_div_22_Template, 6, 1, \"div\", 9);\n    i0.ɵɵtemplate(23, TimeserieschartComponent_div_1_div_23_Template, 5, 1, \"div\", 10);\n    i0.ɵɵelementStart(24, \"div\", 11);\n    i0.ɵɵelementStart(25, \"div\", 12);\n    i0.ɵɵelement(26, \"div\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r1.divid);\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"START_DATE\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(28, _c1));\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r1.language[\"START_DATE\"]);\n    i0.ɵɵproperty(\"inputStyle\", i0.ɵɵpureFunction0(29, _c2))(\"autoZIndex\", true)(\"ngModel\", ctx_r1.lowFromDateBIP)(\"showIcon\", true)(\"ngModelOptions\", i0.ɵɵpureFunction0(30, _c3))(\"maxDate\", ctx_r1.maxForStartDate)(\"minDate\", ctx_r1.minDateForCse);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"END_DATE\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(31, _c1));\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r1.language[\"END_DATE\"]);\n    i0.ɵɵproperty(\"inputStyle\", i0.ɵɵpureFunction0(32, _c2))(\"autoZIndex\", true)(\"ngModel\", ctx_r1.lowToDateBIP)(\"showIcon\", true)(\"ngModelOptions\", i0.ɵɵpureFunction0(33, _c3))(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.lowFromDateBIP);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.language.apply, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.timeseriesDatamsg1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.TimeseriesloaderBIP);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r1.TimeseriesloaderBIP && !ctx_r1.timeseriesDatamsg1 ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r1.bipchartnameid);\n  }\n}\nfunction TimeserieschartComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r37 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 45);\n    i0.ɵɵelementStart(1, \"h5\", 46);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function TimeserieschartComponent_ng_template_2_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r37);\n      const modal_r35 = restoredCtx.$implicit;\n      return modal_r35.dismiss(\"Cross click\");\n    });\n    i0.ɵɵelement(6, \"span\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 48);\n    i0.ɵɵelementStart(8, \"button\", 49);\n    i0.ɵɵlistener(\"click\", function TimeserieschartComponent_ng_template_2_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r37);\n      const modal_r35 = restoredCtx.$implicit;\n      return modal_r35.close(\"Save click\");\n    });\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.language[ctx_r3.modalTitle]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.language[ctx_r3.modalInfo], \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.language.Ok, \" \");\n  }\n}\nrequire('highcharts/highcharts-more.js')(Highcharts);\nmore(Highcharts);\nconst noData = require('highcharts/modules/no-data-to-display');\nnoData(Highcharts);\nexport let TimeserieschartComponent = /*#__PURE__*/(() => {\n  class TimeserieschartComponent {\n    constructor(translateService, healthService, CcochartService, nfainventoryservice, exportExcelService, dialogService, commonOrgService, commonFunctionsService, ShortnumberPipe, dateUtilsService, activeRoute, utils, sso, router) {\n      this.translateService = translateService;\n      this.healthService = healthService;\n      this.CcochartService = CcochartService;\n      this.nfainventoryservice = nfainventoryservice;\n      this.exportExcelService = exportExcelService;\n      this.dialogService = dialogService;\n      this.commonOrgService = commonOrgService;\n      this.commonFunctionsService = commonFunctionsService;\n      this.ShortnumberPipe = ShortnumberPipe;\n      this.dateUtilsService = dateUtilsService;\n      this.activeRoute = activeRoute;\n      this.utils = utils;\n      this.sso = sso;\n      this.router = router;\n      this.maxDate = new Date();\n      this.minDateForCse = this.activeRoute.url.includes('support/router') ? new Date(new Date().setDate(new Date().getDate() - 90)) : new Date(new Date().setDate(new Date().getDate() - 727));\n      this.maxForStartDate = new Date();\n      this.valueChange = new EventEmitter();\n      this.lastOntValue = new EventEmitter();\n      this.lastTxValue = new EventEmitter();\n      this.selectedlegend = new EventEmitter();\n      this.highcharts = Highcharts;\n      this.Timeseriesloader = false;\n      this.singletimeseries = true;\n      this.upprvValue = 0;\n      this.previousvalue = {};\n      this.last24hours = false;\n      this.doubleTimeseries = false;\n      this.TimeseriesloaderBIP = false;\n      this.userselectedlegend = [];\n      this.dsl = false;\n      this.isCOC = false;\n      this.isCOC = this.router.url.includes('cco/health');\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n      this.toggleSubscription = this.sso.toggled$.subscribe(data => {\n        console.log(Highcharts.charts);\n        Highcharts.charts.forEach(chart => {\n          setTimeout(() => {\n            if (chart != undefined) chart.reflow();\n          }, 100);\n        });\n      });\n    }\n    ngOnInit() {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n      let date = new Date();\n      this.last24hours = ((_a = this.wholedata) === null || _a === void 0 ? void 0 : _a.last24hours) ? (_b = this.wholedata) === null || _b === void 0 ? void 0 : _b.last24hours : false;\n      this.lowFromDate = ((_c = this.params) === null || _c === void 0 ? void 0 : _c.startTime) ? (_d = this.params) === null || _d === void 0 ? void 0 : _d.startTime : new Date(date.getTime() - 1 * 24 * 60 * 60 * 1000);\n      this.lowFromDateBIP = ((_e = this.params) === null || _e === void 0 ? void 0 : _e.startTime) ? (_f = this.params) === null || _f === void 0 ? void 0 : _f.startTime : new Date(date.getTime() - 1 * 24 * 60 * 60 * 1000);\n      this.lowToDate = ((_g = this.params) === null || _g === void 0 ? void 0 : _g.endTime) ? (_h = this.params) === null || _h === void 0 ? void 0 : _h.endTime : new Date();\n      this.lowToDateBIP = ((_j = this.params) === null || _j === void 0 ? void 0 : _j.endTime) ? (_k = this.params) === null || _k === void 0 ? void 0 : _k.endTime : new Date();\n      // this.lowFromDate = this.params.startTime;\n      // this.lowToDate = this.params.endTime;\n      let urls = this.activeRoute.url;\n      this.csc = urls.split('/')[2] == 'router' ? true : false;\n      this.singletimeseries = true;\n      if (this.charttype == 'ponchart' || this.charttype == \"ae_threshold\") {\n        this.timeseriesname = this.title ? this.title : 'Threshold Exceeded By Timeseries';\n        if (urls.includes('health/cco-uplink') || urls.includes('health/cco-ae') || urls.includes('health/ae') || urls.includes('health/uplink')) this.userselectedlegend = [this.language[\"rxDis\"], this.language[\"txDis\"], this.language[\"oct\"], this.language[\"pkt\"], this.language[\"txPkt\"], this.language[\"rxPkt\"], this.language[\"rxOct\"], this.language[\"txOct\"], this.language[\"rxErr\"], this.language[\"txErr\"], this.language[\"usRate\"], this.language[\"dsRate\"], this.language[\"rxErrToPktRatio\"], this.language[\"txErrToPktRatio\"], this.language[\"rxDisToPktRatio\"], this.language[\"txDisToPktRatio\"]];else this.userselectedlegend = [this.language[\"usRate\"], this.language[\"dsRate\"]];\n      } else if (this.charttype == \"ae_packet\" || this.charttype == 'packagechart' && (urls.includes('health/cco-uplink') || urls.includes('health/uplink'))) {\n        this.timeseriesname = 'Packets Error By Timeseries';\n        this.userselectedlegend = [this.language[\"rxErr\"], this.language[\"txErr\"]];\n      } else if (this.charttype == 'packagechart') {\n        this.timeseriesname = this.title ? this.title : 'Packets Discards By Timeseries';\n        this.userselectedlegend = [this.language[\"rxDis\"], this.language[\"txDis\"]];\n      } else if (this.charttype == 'bipchart') {\n        this.doubleTimeseries = !(urls.split('/')[2] == 'router');\n        this.userselectedlegend = [this.language[\"usOct\"], this.language[\"dsOct\"], this.language[\"rxPkt\"], this.language[\"txPkt\"], this.language[\"rxDis\"], this.language[\"txDis\"], this.language[\"rxErr\"], this.language[\"txErr\"], this.language[\"usRate\"], this.language[\"dsRate\"], this.language[\"rxErrToPktRatio\"], this.language[\"txErrToPktRatio\"], this.language[\"rxDisToPktRatio\"], this.language[\"txDisToPktRatio\"]];\n        this.timeseriesname = this.title ? this.title : 'PON Interface Timeseries';\n        this.timeseriesnameBip = this.title ? this.title : 'BIP Error By Timeseries';\n        this.bipchartnameid = this.chartname + \"biperr\";\n        this.userselectedlegendbp = [this.language[\"Upstream Pon Errors\"], this.language[\"Downstream Pon Errors\"]];\n      } else if (this.charttype == \"BipChart\") {\n        this.userselectedlegend = [this.language[\"Upstream Pon Errors\"], this.language[\"Downstream Pon Errors\"]];\n        this.timeseriesname = this.title ? this.title : 'BIP Error By Timeseries';\n      } else if (this.charttype == \"Lowlighchart\") {\n        this.timeseriesname = \"Low Optical Power By Timeseries\";\n        this.userselectedlegend = [this.language[\"ONT Rx Power Level\"], this.language[\"OLT Rx Power Level\"]];\n      } else if (this.charttype == \"General\" && (urls.split('/')[2] == 'router' && this.page == 'ont' || urls.includes('health/ont') || urls.includes('health/cco-ont'))) {\n        this.timeseriesname = this.title ? this.title : \"ONT Health by Timeseries\";\n        this.doubleTimeseries = !(urls.split('/')[2] == 'router');\n        this.timeseriesnameBip = this.title ? this.title : 'BIP Error By Timeseries';\n        this.userselectedlegend = [this.language[\"ONT Rx Power Level\"], this.language[\"Upstream Pon Errors\"], this.language[\"Downstream Pon Errors\"], this.language[\"OLT Rx Power Level\"], this.language[\"upTime\"], this.language[\"Downstream Fec Total Code Words\"], this.language[\"Upstream Fec Total Code Words\"], this.language[\"ONT Tx Optical Power\"], this.language[\"Upstream Fec Corrected Bytes\"], this.language[\"Downstream Fec Corrected Bytes\"], this.language[\"Upstream Fec Uncorrected Code Words\"], this.language[\"Downstream Fec Uncorrected Code Words\"]];\n        this.bipchartnameid = this.chartname + \"biperr\";\n        this.userselectedlegendbp = [this.language[\"Upstream BER\"], this.language[\"Downstream BER\"]];\n      } else if (this.charttype == \"General\" && (urls.includes('health/cco-uplink') || urls.includes('health/uplink'))) {\n        this.timeseriesname = this.title ? this.title : \"Uplink Health By Timeseries\";\n        this.userselectedlegend = [this.language[\"oct\"], this.language[\"pkt\"], this.language[\"txPkt\"], this.language[\"rxPkt\"], this.language[\"rxOct\"], this.language[\"txOct\"], this.language[\"rxDis\"], this.language[\"txDis\"], this.language[\"rxErr\"], this.language[\"txErr\"], this.language[\"usRate\"], this.language[\"dsRate\"], this.language[\"rxErrToPktRatio\"], this.language[\"txErrToPktRatio\"], this.language[\"rxDisToPktRatio\"], this.language[\"txDisToPktRatio\"]];\n      } else if (this.charttype == \"General\" && (urls.includes('pon-utilization/overview/basic') || urls.includes('cco-pon-utilization/overview/basic'))) {\n        this.timeseriesname = this.title ? this.title : \"PON Health By Timeseries\";\n        this.doubleTimeseries = true;\n        this.timeseriesnameBip = this.title ? this.title : 'BIP Error By Timeseries';\n        this.userselectedlegend = [this.language[\"usOct\"], this.language[\"dsOct\"], this.language[\"rxPkt\"], this.language[\"txPkt\"], this.language[\"rxDis\"], this.language[\"txDis\"], this.language[\"rxErr\"], this.language[\"txErr\"], this.language[\"usRate\"], this.language[\"dsRate\"], this.language[\"rxErrToPktRatio\"], this.language[\"txErrToPktRatio\"], this.language[\"rxDisToPktRatio\"], this.language[\"txDisToPktRatio\"]];\n        this.bipchartnameid = this.chartname + \"biperr\";\n        this.userselectedlegendbp = [this.language[\"Upstream Pon Errors\"], this.language[\"Downstream Pon Errors\"]];\n      } else if ((this.charttype == \"General\" || this.charttype == \"ae_General\") && (urls.split('/')[2] == 'router' && this.page == 'ae' || urls.includes('health/ae') || urls.includes('health/cco-ae'))) {\n        this.timeseriesname = \"AE Interface Health\";\n        this.userselectedlegend = [this.language[\"oct\"], this.language[\"pkt\"], this.language[\"txPkt\"], this.language[\"rxPkt\"], this.language[\"rxOct\"], this.language[\"txOct\"], this.language[\"rxDis\"], this.language[\"txDis\"], this.language[\"rxErr\"], this.language[\"txErr\"], this.language[\"usRate\"], this.language[\"dsRate\"], this.language[\"rxErrToPktRatio\"], this.language[\"txErrToPktRatio\"], this.language[\"rxDisToPktRatio\"], this.language[\"txDisToPktRatio\"]];\n      } else if (this.charttype == \"General\" && urls.includes('cco/health/dsl')) {\n        this.timeseriesname = this.title ? this.title : \"DSL Health By Timeseries\";\n        this.userselectedlegend = [this.language[\"rxPkt\"], this.language[\"rxOct\"], this.language[\"rxDis\"], this.language[\"rxErr\"], this.language[\"txPkt\"], this.language[\"txOct\"], this.language[\"usCurRate\"], this.language[\"dsCurRate\"], this.language[\"usAttRate\"], this.language[\"dsAttRate\"], this.language[\"usSnrMargin\"], this.language[\"dsSnrMargin\"], this.language[\"usTargetSnr\"], this.language[\"dsTargetSnr\"], this.language[\"upTime\"], this.language[\"retrainCnt\"], this.language[\"usRate\"], this.language[\"dsRate\"], this.language[\"rxDisRate\"], this.language[\"rxErrRate\"]];\n      }\n      this.chartnameid = this.chartname;\n      this.bipchartnameid = this.chartname + \"biperr\";\n      this.timeseriesid = this.chartname + \"1\";\n      // setTimeout(() => {\n      //   Highcharts.chart(this.chartname, );\n      // }, 500);\n      if (this.chartdata != undefined) {\n        if ((_l = this.chartdata) === null || _l === void 0 ? void 0 : _l.length) {\n          let params1 = {\n            tenant: \"0\",\n            startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.lowFromDate)}`,\n            endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.lowToDate, true)}`\n          };\n          params1[\"granularity\"] = this.healthService.getGranularity(params1.startTime, params1.endTime);\n          this.starttimetoendtime(params1.startTime, params1.endTime, params1[\"granularity\"], this.chartdata);\n        }\n        if ((_o = (_m = this.wholedata) === null || _m === void 0 ? void 0 : _m.legendselected) === null || _o === void 0 ? void 0 : _o.length) this.userselectedlegend = (_p = this.wholedata) === null || _p === void 0 ? void 0 : _p.legendselected;\n        setTimeout(() => {\n          Highcharts.chart(this.chartname, this.LineChart1(this.chartdata || [], this.page));\n          var elmnt = document.getElementById(this.divid);\n          elmnt.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }, 500);\n      } else {\n        this.TimeseriesApiCall(this.params);\n        if (this.charttype == 'bipchart' || this.charttype == \"General\" && (urls.includes('pon-utilization/overview/basic') || urls.includes('cco-pon-utilization/overview/basic') || urls.includes('health/ont'))) {\n          this.TimeseriesApiCallForBipError(this.params);\n        }\n      }\n    }\n    changeDate() {\n      this.maxForStartDate = this.lowToDate;\n      if (!this.validateStartEndDates()) {\n        this.modalTitle = 'Time Period';\n        //this.modalInfo = this.language['Time range not valid, end time should be later than start time.']\n        this.openModalInfo();\n        return;\n      }\n      ;\n    }\n    changeDateForBIP() {\n      this.maxForStartDate = this.lowToDateBIP;\n      if (!this.validateStartEndDatesForBIP()) {\n        this.modalTitle = 'Time Period';\n        //this.modalInfo = this.language['Time range not valid, end time should be later than start time.']\n        this.openModalInfo();\n        return;\n      }\n      ;\n    }\n    validateStartEndDates() {\n      let currentdate = new Date();\n      if (!this.lowFromDate) {\n        this.modalInfo = 'Time range not valid, end time should be later than start time.';\n        return false;\n      }\n      if (this.lowFromDate > currentdate || this.lowToDate > currentdate) {\n        this.modalInfo = 'Time range not valid, End Date and Start Date should not above current Date';\n        return false;\n      }\n      if (this.lowFromDate && this.lowToDate) {\n        if (this.dateUtilsService.getUtCSecondsByDateObj(this.lowFromDate) > this.dateUtilsService.getUtCSecondsByDateObj(this.lowToDate, true)) {\n          this.modalInfo = 'Time range not valid, end time should be later than start time.';\n          return false;\n        } else if (this.dateUtilsService.getUtCSecondsByDateObj(this.lowFromDate) == this.dateUtilsService.getUtCSecondsByDateObj(this.lowToDate, true)) {\n          this.modalInfo = 'Time range not valid, Start Date and End Date should not be same.';\n          return false;\n        }\n        return true;\n      } else {\n        return true;\n      }\n    }\n    validateStartEndDatesForBIP() {\n      let currentdate = new Date();\n      if (!this.lowFromDateBIP) {\n        this.modalInfo = 'Time range not valid, end time should be later than start time.';\n        return false;\n      }\n      if (this.lowFromDateBIP > currentdate || this.lowToDateBIP > currentdate) {\n        this.modalInfo = 'Time range not valid, End Date and Start Date should not above current Date';\n        return false;\n      }\n      if (this.lowFromDateBIP && this.lowToDateBIP) {\n        if (this.dateUtilsService.getUtCSecondsByDateObj(this.lowFromDateBIP) > this.dateUtilsService.getUtCSecondsByDateObj(this.lowToDateBIP, true)) {\n          this.modalInfo = 'Time range not valid, end time should be later than start time.';\n          return false;\n        } else if (this.dateUtilsService.getUtCSecondsByDateObj(this.lowFromDateBIP) == this.dateUtilsService.getUtCSecondsByDateObj(this.lowToDateBIP, true)) {\n          this.modalInfo = 'Time range not valid, Start Date and End Date should not be same.';\n          return false;\n        }\n        return true;\n      } else {\n        return true;\n      }\n    }\n    chartCallback(chart) {}\n    convertolocaltime(time) {\n      let date = new Date(time * 1000);\n      return date.toLocaleString();\n      // console.log(new Date(time), date.toLocaleString());\n    }\n\n    startISODate(startDate, enddata) {\n      if (startDate == undefined) return undefined;\n      let date = new Date(startDate);\n      let year = date.getFullYear();\n      let month = `${date.getMonth() + 1}`;\n      let day = `${date.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let stdate;\n      if (enddata) stdate = `${year}-${month}-${day}T23:59:00Z`;else stdate = `${year}-${month}-${day}T00:00:00Z`;\n      // let d = new Date(stdate)\n      // return d.getTime();\n      return stdate;\n    }\n    TimeseriesApiCall(params1) {\n      var _a;\n      let params = {\n        tenant: \"0\",\n        startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.lowFromDate)}`,\n        endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.lowToDate, true)}`,\n        region: params1 === null || params1 === void 0 ? void 0 : params1.region,\n        location: params1 === null || params1 === void 0 ? void 0 : params1.location,\n        system: params1 === null || params1 === void 0 ? void 0 : params1.system,\n        interface: params1 === null || params1 === void 0 ? void 0 : params1.interface,\n        ont: (params1 === null || params1 === void 0 ? void 0 : params1.ont) ? params1.ont : \"\",\n        fsan: (params1 === null || params1 === void 0 ? void 0 : params1.fsan) ? params1 === null || params1 === void 0 ? void 0 : params1.fsan : \"\"\n      };\n      params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n      // if (params1?.oltRx) {\n      //   params['field'] = 'txOptLvl';\n      // }\n      let query = \"\";\n      for (var key in params) {\n        if (params[key] == undefined || params[key] == \"undefined\" || params[key] == \"\") {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(params[key]);\n      }\n      this.Timeseriesloader = true;\n      this.timeseries = (_a = this.healthService.timeseries(query, this.page)) === null || _a === void 0 ? void 0 : _a.subscribe(res => {\n        if (res && res.length) this.starttimetoendtime(params.startTime, params.endTime, params[\"granularity\"], res);\n        setTimeout(() => {\n          Highcharts.chart(this.chartname, this.LineChart1(res || [], this.page));\n          var elmnt = document.getElementById(this.divid);\n          elmnt.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }, 500);\n        this.Timeseriesloader = false;\n        this.timeseriesDatamsg = \"\";\n      }, err => {\n        this.Timeseriesloader = false;\n        if (err.status == 401) {\n          this.timeseriesDatamsg = this.language['Access Denied'];\n        } else {\n          this.timeseriesDatamsg = this.commonOrgService.pageErrorHandle(err);\n        }\n      });\n      return;\n    }\n    TimeseriesApiCallForBipError(params1) {\n      let params = {\n        tenant: \"0\",\n        startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.lowFromDateBIP)}`,\n        endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.lowToDateBIP, true)}`,\n        region: params1 === null || params1 === void 0 ? void 0 : params1.region,\n        location: params1 === null || params1 === void 0 ? void 0 : params1.location,\n        system: params1 === null || params1 === void 0 ? void 0 : params1.system,\n        interface: params1 === null || params1 === void 0 ? void 0 : params1.interface,\n        ont: (params1 === null || params1 === void 0 ? void 0 : params1.ont) ? params1.ont : \"\",\n        fsan: (params1 === null || params1 === void 0 ? void 0 : params1.fsan) ? params1 === null || params1 === void 0 ? void 0 : params1.fsan : \"\"\n      };\n      params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n      let query = \"\";\n      for (var key in params) {\n        if (params[key] == undefined || params[key] == \"undefined\" || params[key] == \"\") {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(params[key]);\n      }\n      this.TimeseriesloaderBIP = true;\n      this.timeseries = this.healthService.timeseriesBipError(query, this.page).subscribe(res => {\n        var _a, _b;\n        let data = [];\n        for (let i = 0; i < res.length;) {\n          if (res[i + 1] != 'undefined' && ((_a = res[i + 1]) === null || _a === void 0 ? void 0 : _a.timestamp)) {\n            if (this.dateUtilsService.getChartFormat(res[i].timestamp) == this.dateUtilsService.getChartFormat((_b = res[i + 1]) === null || _b === void 0 ? void 0 : _b.timestamp)) {\n              let usBipErr = 0,\n                dsBipErr = 0,\n                usBer = 0,\n                dsBer = 0;\n              let j;\n              for (j = i; j < res.length; j++) {\n                if (this.dateUtilsService.getChartFormat(res[i].timestamp) != this.dateUtilsService.getChartFormat(res[j].timestamp)) break;else {\n                  dsBipErr += res[j].dsBipErr ? res[j].dsBipErr : 0;\n                  usBipErr += res[j].usBipErr ? res[j].usBipErr : 0;\n                  dsBer += res[j].dsBer ? res[j].dsBer : 0;\n                  usBer += res[j].usBer ? res[j].usBer : 0;\n                }\n              }\n              res[i].dsBipErr = dsBipErr;\n              res[i].usBipErr = usBipErr;\n              res[i].dsBer = dsBer;\n              res[i].usBer = usBer;\n              data.push(res[i]);\n              i = j;\n            } else {\n              data.push(res[i]);\n              i++;\n            }\n          } else {\n            data.push(res[i]);\n            i++;\n          }\n        }\n        if (data && data.length) this.starttimetoendtime(params.startTime, params.endTime, params[\"granularity\"], data);\n        setTimeout(() => {\n          Highcharts.chart(this.bipchartnameid, this.LineChartForBIP(data || [], this.page));\n        }, 500);\n        this.TimeseriesloaderBIP = false;\n        this.timeseriesDatamsg1 = \"\";\n        var elmnt = document.getElementById(this.chartnameid);\n        elmnt.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }, err => {\n        this.TimeseriesloaderBIP = false;\n        if (err.status == 401) {\n          this.timeseriesDatamsg1 = this.language['Access Denied'];\n        } else {\n          this.timeseriesDatamsg1 = this.commonOrgService.pageErrorHandle(err);\n        }\n      });\n      return;\n    }\n    storeONTVALUE(value) {\n      this.previousvalue.rxOptPwr = value.rxOptPwr || value.rxOptPwr == 0 ? value.rxOptPwr < -40 ? null : value.rxOptPwr : this.previousvalue.rxOptPwr;\n      this.previousvalue.neOptSignalLvl = value.neOptSignalLvl || value.neOptSignalLvl == 0 ? value.neOptSignalLvl < -40 ? null : value.neOptSignalLvl : this.previousvalue.neOptSignalLvl;\n      this.previousvalue.usBipErr = value.usBipErr || value.usBipErr == 0 ? value.usBipErr : this.previousvalue.usBipErr;\n      this.previousvalue.dsBipErr = value.dsBipErr || value.dsBipErr == 0 ? value.dsBipErr : this.previousvalue.dsBipErr;\n      this.previousvalue.usFecTotCodeWord = value.usFecTotCodeWord || value.usFecTotCodeWord == 0 ? value.usFecTotCodeWord : this.previousvalue.usFecTotCodeWord;\n      this.previousvalue.dsFecTotCodeWord = value.dsFecTotCodeWord || value.dsFecTotCodeWord == 0 ? value.dsFecTotCodeWord : this.previousvalue.dsFecTotCodeWord;\n      this.previousvalue.upTime = value.upTime || value.upTime == 0 ? value.upTime : this.previousvalue.upTime;\n      this.previousvalue.txOptLvl = value.txOptLvl || value.txOptLvl == 0 ? value.txOptLvl : this.previousvalue.txOptLvl;\n    }\n    storeEthernetValue(value) {\n      this.previousvalue.oct = value.oct || value.oct == 0 ? value.oct : this.previousvalue.oct;\n      this.previousvalue.pkt = value.pkt || value.pkt == 0 ? value.pkt : this.previousvalue.pkt;\n      this.previousvalue.rxPkt = value.rxPkt || value.rxPkt == 0 ? value.rxPkt : this.previousvalue.rxPkt;\n      this.previousvalue.rxOct = value.rxOct || value.rxOct == 0 ? value.rxOct : this.previousvalue.rxOct;\n      this.previousvalue.rxDis = value.rxDis || value.rxDis == 0 ? value.rxDis : this.previousvalue.rxDis;\n      this.previousvalue.txPkt = value.txPkt || value.txPkt == 0 ? value.txPkt : this.previousvalue.txPkt;\n      this.previousvalue.rxErr = value.rxErr || value.rxErr == 0 ? value.rxErr : this.previousvalue.rxErr;\n      this.previousvalue.txDis = value.txDis || value.txDis == 0 ? value.txDis : this.previousvalue.txDis;\n      this.previousvalue.txErr = value.txErr || value.txErr == 0 ? value.txErr : this.previousvalue.txErr;\n      this.previousvalue.txOct = value.txOct || value.txOct == 0 ? value.txOct : this.previousvalue.txOct;\n      this.previousvalue.rxErrRate = value.rxErrRate || value.rxErrRate == 0 ? value.rxErrRate : this.previousvalue.rxErrRate;\n      this.previousvalue.txErrRate = value.txErrRate || value.txErrRate == 0 ? value.txErrRate : this.previousvalue.txErrRate;\n      this.previousvalue.rxDisRate = value.rxDisRate || value.rxDisRate == 0 ? value.rxDisRate : this.previousvalue.rxDisRate;\n      this.previousvalue.txDisRate = value.txDisRate || value.txDisRate == 0 ? value.txDisRate : this.previousvalue.txDisRate;\n      this.previousvalue.usRate = value.usRate || value.usRate == 0 ? value.usRate : this.previousvalue.usRate;\n      this.previousvalue.dsRate = value.dsRate || value.dsRate == 0 ? value.dsRate : this.previousvalue.dsRate;\n    }\n    storeponValue(value) {\n      this.previousvalue.usBipErr = value.usBipErr || value.usBipErr == 0 ? value.usBipErr : this.previousvalue.usBipErr;\n      this.previousvalue.dsBipErr = value.dsBipErr || value.dsBipErr == 0 ? value.dsBipErr : this.previousvalue.dsBipErr;\n      this.previousvalue.usOct = value.usOct || value.usOct == 0 ? value.usOct : this.previousvalue.usOct;\n      this.previousvalue.dsOct = value.dsOct || value.dsOct == 0 ? value.dsOct : this.previousvalue.dsOct;\n      this.previousvalue.rxPkt = value.rxPkt || value.rxPkt == 0 ? value.rxPkt : this.previousvalue.rxPkt;\n      this.previousvalue.rxDis = value.rxDis || value.rxDis == 0 ? value.rxDis : this.previousvalue.rxDis;\n      this.previousvalue.rxErr = value.rxErr || value.rxErr == 0 ? value.rxErr : this.previousvalue.rxErr;\n      this.previousvalue.txPkt = value.txPkt || value.txPkt == 0 ? value.txPkt : this.previousvalue.txPkt;\n      this.previousvalue.txDis = value.txDis || value.txDis == 0 ? value.txDis : this.previousvalue.txDis;\n      this.previousvalue.txErr = value.txErr || value.txErr == 0 ? value.txErr : this.previousvalue.txErr;\n      this.previousvalue.rxErrRate = value.rxErrRate || value.rxErrRate == 0 ? value.rxErrRate : this.previousvalue.rxErrRate;\n      this.previousvalue.txErrRate = value.txErrRate || value.txErrRate == 0 ? value.txErrRate : this.previousvalue.txErrRate;\n      this.previousvalue.rxDisRate = value.rxDisRate || value.rxDisRate == 0 ? value.rxDisRate : this.previousvalue.rxDisRate;\n      this.previousvalue.txDisRate = value.txDisRate || value.txDisRate == 0 ? value.txDisRate : this.previousvalue.txDisRate;\n      this.previousvalue.usRate = value.usRate || value.usRate == 0 ? value.usRate : this.previousvalue.usRate;\n      this.previousvalue.dsRate = value.dsRate || value.dsRate == 0 ? value.dsRate : this.previousvalue.dsRate;\n    }\n    LineChart1(data, type) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68;\n      const self = this;\n      let subTitle;\n      let value;\n      let maxvalue = 0;\n      var xAxisCategories = [];\n      var usdsxAxisCategories = [];\n      var upTime = [],\n        neOptSignalLvl = [],\n        rxOptPwr = [],\n        txOptPwr = [];\n      if (type == 'pon') {\n        this.previousvalue = {\n          usOct: null,\n          dsOct: null,\n          rxPkt: null,\n          rxDis: null,\n          rxErr: null,\n          txPkt: null,\n          txDis: null,\n          txErr: null,\n          rxErrRate: null,\n          txErrRate: null,\n          rxDisRate: null,\n          txDisRate: null,\n          usRate: null,\n          dsRate: null\n        };\n        var usOct = [],\n          dsOct = [],\n          rxPkt = [],\n          rxDis = [],\n          rxErr = [],\n          txPkt = [],\n          txDis = [],\n          txErr = [],\n          rxErrRate = [],\n          txErrRate = [],\n          rxDisRate = [],\n          txDisRate = [],\n          usRate = [],\n          dsRate = [];\n        subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span>${this.language['region']}: ${this.paramname.regionname},\n      ${this.language['location']}: ${this.paramname.locationname}, ${this.language['System']}: ${this.paramname.systemname}, ${this.language['interface']}: ${this.paramname.interfacename}`;\n        if (data.length) {\n          for (let i = 0; i < this.timestamp.length; i++) {\n            let dataobj = this.findObject(data, this.timestamp[i]);\n            xAxisCategories.push(this.dateUtilsService.getChartFormat(this.timestamp[i]));\n            usOct.push({\n              y: dataobj.usOct || dataobj.usOct == 0 ? dataobj.usOct : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsOct.push({\n              y: dataobj.dsOct || dataobj.dsOct == 0 ? dataobj.dsOct : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxPkt.push({\n              y: dataobj.rxPkt || dataobj.rxPkt == 0 ? dataobj.rxPkt : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxDis.push({\n              y: dataobj.rxDis || dataobj.rxDis == 0 ? dataobj.rxDis : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxErr.push({\n              y: dataobj.rxErr || dataobj.rxErr == 0 ? dataobj.rxErr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txPkt.push({\n              y: dataobj.txPkt || dataobj.txPkt == 0 ? dataobj.txPkt : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txDis.push({\n              y: dataobj.txDis || dataobj.txDis == 0 ? dataobj.txDis : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txErr.push({\n              y: dataobj.txErr || dataobj.txErr == 0 ? dataobj.txErr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            usRate.push({\n              y: dataobj.usRate || dataobj.usRate == 0 ? dataobj.usRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsRate.push({\n              y: dataobj.dsRate || dataobj.dsRate == 0 ? dataobj.dsRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxErrRate.push({\n              y: dataobj.rxErrRate || dataobj.rxErrRate == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('rxErrRate')) ? null : dataobj.rxErrRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txErrRate.push({\n              y: dataobj.txErrRate || dataobj.txErrRate == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('txErrRate')) ? null : dataobj.txErrRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxDisRate.push({\n              y: dataobj.rxDisRate || dataobj.rxDisRate == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('rxDisRate')) ? null : dataobj.rxDisRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txDisRate.push({\n              y: dataobj.txDisRate || dataobj.txDisRate == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('txDisRate')) ? null : dataobj.txDisRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n          }\n          maxvalue = xAxisCategories.length > 47 ? 48 : xAxisCategories.length;\n          this.xaxislenght = (xAxisCategories === null || xAxisCategories === void 0 ? void 0 : xAxisCategories.length) ? (xAxisCategories === null || xAxisCategories === void 0 ? void 0 : xAxisCategories.length) + 2000 : 200000;\n          let listoffield = [usOct, dsOct, rxPkt, rxDis, rxErr, txPkt, txDis, txErr, usRate, dsRate, rxErrRate, txErrRate, rxDisRate, txDisRate];\n          this.restructuring(listoffield);\n        }\n        // console.log(usOct, \"usOct\", dsOct, \"dsOct\", rxPkt, \"rxPkt\", txPkt, \"txPkt\", rxDis, \"rxDis\", txDis, \"txDis\", rxErr, \"rxErr\", txErr, \"txErr\",\n        //   usBipErr, \"usBipErr\", dsBipErr, \"dsBipErr\")\n        value = [{\n          visible: ((_a = this.userselectedlegend) === null || _a === void 0 ? void 0 : _a.includes(this.language[\"usOct\"])) ? true : false,\n          name: this.language[\"usOct\"],\n          data: usOct || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['usOct']\n        }, {\n          visible: ((_b = this.userselectedlegend) === null || _b === void 0 ? void 0 : _b.includes(this.language[\"dsOct\"])) ? true : false,\n          name: this.language[\"dsOct\"],\n          data: dsOct || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsOct']\n        }, {\n          visible: ((_c = this.userselectedlegend) === null || _c === void 0 ? void 0 : _c.includes(this.language[\"rxPkt\"])) ? true : false,\n          name: this.language[\"rxPkt\"],\n          data: rxPkt || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxPkt']\n        }, {\n          visible: ((_d = this.userselectedlegend) === null || _d === void 0 ? void 0 : _d.includes(this.language[\"txPkt\"])) ? true : false,\n          name: this.language[\"txPkt\"],\n          data: txPkt || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['txPkt']\n        }, {\n          visible: ((_e = this.userselectedlegend) === null || _e === void 0 ? void 0 : _e.includes(this.language[\"rxDis\"])) ? true : false,\n          name: this.language[\"rxDis\"],\n          data: rxDis || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxDis']\n        }, {\n          visible: ((_f = this.userselectedlegend) === null || _f === void 0 ? void 0 : _f.includes(this.language[\"txDis\"])) ? true : false,\n          name: this.language[\"txDis\"],\n          data: txDis || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['txDis']\n        }, {\n          visible: ((_g = this.userselectedlegend) === null || _g === void 0 ? void 0 : _g.includes(this.language[\"rxErr\"])) ? true : false,\n          name: this.language[\"rxErr\"],\n          data: rxErr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxErr']\n        }, {\n          visible: ((_h = this.userselectedlegend) === null || _h === void 0 ? void 0 : _h.includes(this.language[\"txErr\"])) ? true : false,\n          name: this.language[\"txErr\"],\n          data: txErr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['txErr']\n        }, {\n          yAxis: 3,\n          visible: ((_j = this.userselectedlegend) === null || _j === void 0 ? void 0 : _j.includes(this.language[\"usRate\"])) ? true : false,\n          name: this.language[\"usRate\"],\n          data: usRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['usRate']\n        }, {\n          yAxis: 3,\n          visible: ((_k = this.userselectedlegend) === null || _k === void 0 ? void 0 : _k.includes(this.language[\"dsRate\"])) ? true : false,\n          name: this.language[\"dsRate\"],\n          data: dsRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsRate']\n        }, {\n          yAxis: 4,\n          visible: ((_l = this.userselectedlegend) === null || _l === void 0 ? void 0 : _l.includes(this.language[\"rxErrToPktRatio\"])) ? true : false,\n          name: this.language[\"rxErrToPktRatio\"],\n          data: rxErrRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxErrToPktRatio']\n        }, {\n          yAxis: 4,\n          visible: ((_m = this.userselectedlegend) === null || _m === void 0 ? void 0 : _m.includes(this.language[\"txErrToPktRatio\"])) ? true : false,\n          name: this.language[\"txErrToPktRatio\"],\n          data: txErrRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['txErrToPktRatio']\n        }, {\n          yAxis: 4,\n          visible: ((_o = this.userselectedlegend) === null || _o === void 0 ? void 0 : _o.includes(this.language[\"rxDisToPktRatio\"])) ? true : false,\n          name: this.language[\"rxDisToPktRatio\"],\n          data: rxDisRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxDisToPktRatio']\n        }, {\n          yAxis: 4,\n          visible: ((_p = this.userselectedlegend) === null || _p === void 0 ? void 0 : _p.includes(this.language[\"txDisToPktRatio\"])) ? true : false,\n          name: this.language[\"txDisToPktRatio\"],\n          data: txDisRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['txDisToPktRatio']\n        }];\n      } else if (type == 'dsl') {\n        this.dsl = true;\n        this.previousvalue = {\n          rxPkt: null,\n          rxOct: null,\n          rxDis: null,\n          rxErr: null,\n          txPkt: null,\n          txOct: null,\n          usCurRate: null,\n          dsCurRate: null,\n          usAttRate: null,\n          dsAttRate: null,\n          usSnrMargin: null,\n          dsSnrMargin: null,\n          usTargetSnr: null,\n          dsTargetSnr: null,\n          upTime: null,\n          retrainCnt: null,\n          usRate: null,\n          dsRate: null,\n          rxDisRate: null,\n          rxErrRate: null\n        };\n        var rxPkt = [],\n          rxOct = [],\n          rxDis = [],\n          rxErr = [],\n          txPkt = [],\n          txOct = [],\n          usCurRate = [],\n          dsCurRate = [],\n          usAttRate = [],\n          dsAttRate = [],\n          usSnrMargin = [],\n          dsSnrMargin = [],\n          usTargetSnr = [],\n          dsTargetSnr = [],\n          upTime = [],\n          retrainCnt = [],\n          usRate = [],\n          dsRate = [],\n          rxDisRate = [],\n          rxErrRate = [];\n        subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span>${this.language['region']}: ${this.paramname.regionname},\n      ${this.language['location']}: ${this.paramname.locationname}, ${this.language['System']}: ${this.paramname.systemname}, ${this.language['interface']}: ${this.paramname.interfacename}`;\n        if (data.length) {\n          for (let i = 0; i < this.timestamp.length; i++) {\n            let dataobj = this.findObject(data, this.timestamp[i]);\n            xAxisCategories.push(this.dateUtilsService.getChartFormat(this.timestamp[i]));\n            rxPkt.push({\n              y: dataobj.rxPkt || dataobj.rxPkt == 0 ? dataobj.rxPkt : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxOct.push({\n              y: dataobj.rxOct || dataobj.rxOct == 0 ? dataobj.rxOct : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxDis.push({\n              y: dataobj.rxDis || dataobj.rxDis == 0 ? dataobj.rxDis : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxErr.push({\n              y: dataobj.rxErr || dataobj.rxErr == 0 ? dataobj.rxErr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txPkt.push({\n              y: dataobj.txPkt || dataobj.txPkt == 0 ? dataobj.txPkt : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txOct.push({\n              y: dataobj.txOct || dataobj.txOct == 0 ? dataobj.txOct : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            usCurRate.push({\n              y: dataobj.usCurRate || dataobj.usCurRate == 0 ? dataobj.usCurRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsCurRate.push({\n              y: dataobj.dsCurRate || dataobj.dsCurRate == 0 ? dataobj.dsCurRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            usAttRate.push({\n              y: dataobj.usAttRate || dataobj.usAttRate == 0 ? dataobj.usAttRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsAttRate.push({\n              y: dataobj.dsAttRate || dataobj.dsAttRate == 0 ? dataobj.dsAttRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            usSnrMargin.push({\n              y: dataobj.usSnrMargin || dataobj.usSnrMargin == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('usSnrMargin')) ? null : dataobj.usSnrMargin : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsSnrMargin.push({\n              y: dataobj.dsSnrMargin || dataobj.dsSnrMargin == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('dsSnrMargin')) ? null : dataobj.dsSnrMargin : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            usTargetSnr.push({\n              y: dataobj.usTargetSnr || dataobj.usTargetSnr == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('usTargetSnr')) ? null : dataobj.usTargetSnr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsTargetSnr.push({\n              y: dataobj.dsTargetSnr || dataobj.dsTargetSnr == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('dsTargetSnr')) ? null : dataobj.dsTargetSnr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            upTime.push({\n              y: dataobj.upTime || dataobj.upTime == 0 ? dataobj.upTime : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            retrainCnt.push({\n              y: dataobj.retrainCnt || dataobj.retrainCnt == 0 ? dataobj.retrainCnt : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            usRate.push({\n              y: dataobj.usRate || dataobj.usRate == 0 ? dataobj.usRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsRate.push({\n              y: dataobj.dsRate || dataobj.dsRate == 0 ? dataobj.dsRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxDisRate.push({\n              y: dataobj.rxDisRate || dataobj.rxDisRate == 0 ? dataobj.rxDisRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxErrRate.push({\n              y: dataobj.rxErrRate || dataobj.rxErrRate == 0 ? dataobj.rxErrRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n          }\n          maxvalue = xAxisCategories.length > 47 ? 48 : xAxisCategories.length;\n          this.xaxislenght = (xAxisCategories === null || xAxisCategories === void 0 ? void 0 : xAxisCategories.length) ? (xAxisCategories === null || xAxisCategories === void 0 ? void 0 : xAxisCategories.length) + 2000 : 200000;\n          let listoffield = [rxPkt, rxOct, rxDis, rxErr, txPkt, txOct, usCurRate, dsCurRate, usAttRate, dsAttRate, usSnrMargin, dsSnrMargin, usTargetSnr, dsTargetSnr, upTime, retrainCnt, usRate, dsRate, rxDisRate, rxErrRate];\n          this.restructuring(listoffield);\n        }\n        // console.log(usOct, \"usOct\", dsOct, \"dsOct\", rxPkt, \"rxPkt\", txPkt, \"txPkt\", rxDis, \"rxDis\", txDis, \"txDis\", rxErr, \"rxErr\", txErr, \"txErr\",\n        //   usBipErr, \"usBipErr\", dsBipErr, \"dsBipErr\")\n        value = [{\n          visible: ((_q = this.userselectedlegend) === null || _q === void 0 ? void 0 : _q.includes(this.language[\"rxPkt\"])) ? true : false,\n          name: this.language[\"rxPkt\"],\n          data: rxPkt || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxPkt']\n        }, {\n          visible: ((_r = this.userselectedlegend) === null || _r === void 0 ? void 0 : _r.includes(this.language[\"rxOct\"])) ? true : false,\n          name: this.language[\"rxOct\"],\n          data: rxOct || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxOct']\n        }, {\n          visible: ((_s = this.userselectedlegend) === null || _s === void 0 ? void 0 : _s.includes(this.language[\"rxDis\"])) ? true : false,\n          name: this.language[\"rxDis\"],\n          data: rxDis || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxDis']\n        }, {\n          visible: ((_t = this.userselectedlegend) === null || _t === void 0 ? void 0 : _t.includes(this.language[\"rxErr\"])) ? true : false,\n          name: this.language[\"rxErr\"],\n          data: rxErr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxErr']\n        }, {\n          visible: ((_u = this.userselectedlegend) === null || _u === void 0 ? void 0 : _u.includes(this.language[\"txPkt\"])) ? true : false,\n          name: this.language[\"txPkt\"],\n          data: txPkt || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['txPkt']\n        }, {\n          visible: ((_v = this.userselectedlegend) === null || _v === void 0 ? void 0 : _v.includes(this.language[\"txOct\"])) ? true : false,\n          name: this.language[\"txOct\"],\n          data: txOct || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['txOct']\n        }, {\n          visible: ((_w = this.userselectedlegend) === null || _w === void 0 ? void 0 : _w.includes(this.language[\"usCurRate\"])) ? true : false,\n          name: this.language[\"usCurRate\"],\n          data: usCurRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['usCurRate']\n        }, {\n          visible: ((_x = this.userselectedlegend) === null || _x === void 0 ? void 0 : _x.includes(this.language[\"dsCurRate\"])) ? true : false,\n          name: this.language[\"dsCurRate\"],\n          data: dsCurRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsCurRate']\n        }, {\n          yAxis: 3,\n          visible: ((_y = this.userselectedlegend) === null || _y === void 0 ? void 0 : _y.includes(this.language[\"usAttRate\"])) ? true : false,\n          name: this.language[\"usAttRate\"],\n          data: usAttRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['usAttRate']\n        }, {\n          yAxis: 3,\n          visible: ((_z = this.userselectedlegend) === null || _z === void 0 ? void 0 : _z.includes(this.language[\"dsAttRate\"])) ? true : false,\n          name: this.language[\"dsAttRate\"],\n          data: dsAttRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsAttRate']\n        }, {\n          yAxis: 1,\n          visible: ((_0 = this.userselectedlegend) === null || _0 === void 0 ? void 0 : _0.includes(this.language[\"usSnrMargin\"])) ? true : false,\n          name: this.language[\"usSnrMargin\"],\n          data: usSnrMargin || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['usSnrMargin']\n        }, {\n          yAxis: 1,\n          visible: ((_1 = this.userselectedlegend) === null || _1 === void 0 ? void 0 : _1.includes(this.language[\"dsSnrMargin\"])) ? true : false,\n          name: this.language[\"dsSnrMargin\"],\n          data: dsSnrMargin || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsSnrMargin']\n        }, {\n          yAxis: 1,\n          visible: ((_2 = this.userselectedlegend) === null || _2 === void 0 ? void 0 : _2.includes(this.language[\"usTargetSnr\"])) ? true : false,\n          name: this.language[\"usTargetSnr\"],\n          data: usTargetSnr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['usTargetSnr']\n        }, {\n          yAxis: 1,\n          visible: ((_3 = this.userselectedlegend) === null || _3 === void 0 ? void 0 : _3.includes(this.language[\"dsTargetSnr\"])) ? true : false,\n          name: this.language[\"dsTargetSnr\"],\n          data: dsTargetSnr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsTargetSnr']\n        }, {\n          yAxis: 4,\n          visible: ((_4 = this.userselectedlegend) === null || _4 === void 0 ? void 0 : _4.includes(this.language[\"upTime\"])) ? true : false,\n          name: this.language[\"upTime\"],\n          data: upTime || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['upTime']\n        }, {\n          yAxis: 4,\n          visible: ((_5 = this.userselectedlegend) === null || _5 === void 0 ? void 0 : _5.includes(this.language[\"retrainCnt\"])) ? true : false,\n          name: this.language[\"retrainCnt\"],\n          data: retrainCnt || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['retrainCnt']\n        }, {\n          yAxis: 4,\n          visible: ((_6 = this.userselectedlegend) === null || _6 === void 0 ? void 0 : _6.includes(this.language[\"usRate\"])) ? true : false,\n          name: this.language[\"usRate\"],\n          data: usRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['usRate']\n        }, {\n          yAxis: 4,\n          visible: ((_7 = this.userselectedlegend) === null || _7 === void 0 ? void 0 : _7.includes(this.language[\"dsRate\"])) ? true : false,\n          name: this.language[\"dsRate\"],\n          data: dsRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsRate']\n        }, {\n          yAxis: 4,\n          visible: ((_8 = this.userselectedlegend) === null || _8 === void 0 ? void 0 : _8.includes(this.language[\"rxDisRate\"])) ? true : false,\n          name: this.language[\"rxDisRate\"],\n          data: rxDisRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxDisRate']\n        }, {\n          yAxis: 4,\n          visible: ((_9 = this.userselectedlegend) === null || _9 === void 0 ? void 0 : _9.includes(this.language[\"rxErrRate\"])) ? true : false,\n          name: this.language[\"rxErrRate\"],\n          data: rxErrRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxErrRate']\n        }];\n      } else if (type == 'ethernet' || type == \"ae\" || type == 'ae_General') {\n        this.previousvalue = {\n          oct: null,\n          pkt: null,\n          rxPkt: null,\n          rxOct: null,\n          rxDis: null,\n          txPkt: null,\n          rxErr: null,\n          txDis: null,\n          txErr: null,\n          txOct: null,\n          rxErrRate: null,\n          txErrRate: null,\n          rxDisRate: null,\n          txDisRate: null,\n          usRate: null,\n          dsRate: null\n        };\n        var oct = [],\n          pkt = [],\n          rxPkt = [],\n          rxOct = [],\n          rxDis = [],\n          txPkt = [],\n          rxErr = [],\n          txDis = [],\n          txErr = [],\n          txOct = [],\n          rxErrRate = [],\n          txErrRate = [],\n          rxDisRate = [],\n          txDisRate = [],\n          usRate = [],\n          dsRate = [];\n        let urls = this.activeRoute.url;\n        if (urls.split('/')[2] == 'router') {\n          subTitle = '';\n        } else {\n          if (((_10 = this.params) === null || _10 === void 0 ? void 0 : _10.fsan) && this.paramname.regionname != undefined) subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span>${this.language[\"region\"]}: ${this.paramname.regionname},\n      ${this.language['location']}: ${this.paramname.locationname}, ${this.language['System']}: ${this.paramname.systemname}, ${this.language['interface']}: ${this.paramname.interfacename}, ${this.language[\"FSAN\"]}: ${(_11 = this.params) === null || _11 === void 0 ? void 0 : _11.fsan} ${this.paramname.deleted ? \" (Deleted)\" : \"\"}`;else if ((_12 = this.params) === null || _12 === void 0 ? void 0 : _12.fsan) subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span >${this.language[\"FSAN\"]}: ${(_13 = this.params) === null || _13 === void 0 ? void 0 : _13.fsan}`;else subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span>${this.language[\"region\"]}: ${this.paramname.regionname},\n      ${this.language['location']}: ${this.paramname.locationname}, ${this.language['System']}: ${this.paramname.systemname}, ${this.language['interface']}: ${this.paramname.interfacename}`;\n        }\n        if (data.length) {\n          let urls = this.activeRoute.url;\n          if (urls.split('/')[2] == 'router') {\n            this.cscPage = true;\n          } else {\n            this.cscPage = false;\n          }\n          for (let i = 0; i < this.timestamp.length; i++) {\n            let dataobj = this.findObject(this.cscPage && (data === null || data === void 0 ? void 0 : data.length) ? data[0].timeseries : data, this.timestamp[i]);\n            xAxisCategories.push(this.dateUtilsService.getChartFormat(this.timestamp[i]));\n            oct.push({\n              y: dataobj.oct || dataobj.oct == 0 ? dataobj.oct : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            pkt.push({\n              y: dataobj.pkt || dataobj.pkt == 0 ? dataobj.pkt : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxPkt.push({\n              y: dataobj.rxPkt || dataobj.rxPkt == 0 ? dataobj.rxPkt : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxOct.push({\n              y: dataobj.rxOct || dataobj.rxOct == 0 ? dataobj.rxOct : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxDis.push({\n              y: dataobj.rxDis || dataobj.rxDis == 0 ? dataobj.rxDis : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxErr.push({\n              y: dataobj.rxErr || dataobj.rxErr == 0 ? dataobj.rxErr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txPkt.push({\n              y: dataobj.txPkt || dataobj.txPkt == 0 ? dataobj.txPkt : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txDis.push({\n              y: dataobj.txDis || dataobj.txDis == 0 ? dataobj.txDis : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txErr.push({\n              y: dataobj.txErr || dataobj.txErr == 0 ? dataobj.txErr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txOct.push({\n              y: dataobj.txOct || dataobj.txOct == 0 ? dataobj.txOct : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            usRate.push({\n              y: dataobj.usRate || dataobj.usRate == 0 ? dataobj.usRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsRate.push({\n              y: dataobj.dsRate || dataobj.dsRate == 0 ? dataobj.dsRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxErrRate.push({\n              y: dataobj.rxErrRate || dataobj.rxErrRate == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('rxErrRate')) ? null : dataobj.rxErrRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txErrRate.push({\n              y: dataobj.txErrRate || dataobj.txErrRate == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('txErrRate')) ? null : dataobj.txErrRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxDisRate.push({\n              y: dataobj.rxDisRate || dataobj.rxDisRate == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('rxDisRate')) ? null : dataobj.rxDisRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            txDisRate.push({\n              y: dataobj.txDisRate || dataobj.txDisRate == 0 ? dataobj.invRatios && (dataobj === null || dataobj === void 0 ? void 0 : dataobj.invRatios.includes('txDisRate')) ? null : dataobj.txDisRate : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n          }\n          maxvalue = xAxisCategories.length > 47 ? 48 : xAxisCategories.length;\n          this.xaxislenght = (xAxisCategories === null || xAxisCategories === void 0 ? void 0 : xAxisCategories.length) ? (xAxisCategories === null || xAxisCategories === void 0 ? void 0 : xAxisCategories.length) + 2000 : 200000;\n          let listoffield = [oct, pkt, rxPkt, rxOct, rxDis, rxErr, txPkt, txDis, txErr, txOct, usRate, dsRate, rxErrRate, txErrRate, rxDisRate, txDisRate];\n          // console.log(listoffield);\n          this.restructuring(listoffield);\n          //console.log(listoffield);\n        }\n\n        value = [{\n          visible: ((_14 = this.userselectedlegend) === null || _14 === void 0 ? void 0 : _14.includes(this.language[\"oct\"])) ? true : false,\n          name: this.language[\"oct\"],\n          data: oct || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['oct']\n        }, {\n          visible: ((_15 = this.userselectedlegend) === null || _15 === void 0 ? void 0 : _15.includes(this.language[\"pkt\"])) ? true : false,\n          name: this.language[\"pkt\"],\n          data: pkt || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['pkt']\n        }, {\n          visible: ((_16 = this.userselectedlegend) === null || _16 === void 0 ? void 0 : _16.includes(this.language[\"txPkt\"])) ? true : false,\n          name: this.language[\"txPkt\"],\n          data: txPkt || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['txPkt']\n        }, {\n          visible: ((_17 = this.userselectedlegend) === null || _17 === void 0 ? void 0 : _17.includes(this.language[\"rxPkt\"])) ? true : false,\n          name: this.language[\"rxPkt\"],\n          data: rxPkt || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['rxPkt']\n        }, {\n          visible: ((_18 = this.userselectedlegend) === null || _18 === void 0 ? void 0 : _18.includes(this.language[\"rxOct\"])) ? true : false,\n          name: this.language[\"rxOct\"],\n          data: rxOct || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['rxOct']\n        }, {\n          visible: ((_19 = this.userselectedlegend) === null || _19 === void 0 ? void 0 : _19.includes(this.language[\"txOct\"])) ? true : false,\n          name: this.language[\"txOct\"],\n          data: txOct || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['txOct']\n        }, {\n          visible: ((_20 = this.userselectedlegend) === null || _20 === void 0 ? void 0 : _20.includes(this.language[\"rxDis\"])) ? true : false,\n          name: this.language[\"rxDis\"],\n          data: rxDis || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['rxDis']\n        }, {\n          visible: ((_21 = this.userselectedlegend) === null || _21 === void 0 ? void 0 : _21.includes(this.language[\"txDis\"])) ? true : false,\n          name: this.language[\"txDis\"],\n          data: txDis || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['txDis']\n        }, {\n          visible: ((_22 = this.userselectedlegend) === null || _22 === void 0 ? void 0 : _22.includes(this.language[\"rxErr\"])) ? true : false,\n          name: this.language[\"rxErr\"],\n          data: rxErr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['rxErr']\n        }, {\n          visible: ((_23 = this.userselectedlegend) === null || _23 === void 0 ? void 0 : _23.includes(this.language[\"txErr\"])) ? true : false,\n          name: this.language[\"txErr\"],\n          data: txErr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['txErr']\n        }, {\n          yAxis: 3,\n          visible: ((_24 = this.userselectedlegend) === null || _24 === void 0 ? void 0 : _24.includes(this.language[\"usRate\"])) ? true : false,\n          name: this.language[\"usRate\"],\n          data: usRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['usRate']\n        }, {\n          yAxis: 3,\n          visible: ((_25 = this.userselectedlegend) === null || _25 === void 0 ? void 0 : _25.includes(this.language[\"dsRate\"])) ? true : false,\n          name: this.language[\"dsRate\"],\n          data: dsRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['dsRate']\n        }, {\n          yAxis: 4,\n          visible: ((_26 = this.userselectedlegend) === null || _26 === void 0 ? void 0 : _26.includes(this.language[\"rxErrToPktRatio\"])) ? true : false,\n          name: this.language[\"rxErrToPktRatio\"],\n          data: rxErrRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['rxErrToPktRatio']\n        }, {\n          yAxis: 4,\n          visible: ((_27 = this.userselectedlegend) === null || _27 === void 0 ? void 0 : _27.includes(this.language[\"txErrToPktRatio\"])) ? true : false,\n          name: this.language[\"txErrToPktRatio\"],\n          data: txErrRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['txErrToPktRatio']\n        }, {\n          yAxis: 4,\n          visible: ((_28 = this.userselectedlegend) === null || _28 === void 0 ? void 0 : _28.includes(this.language[\"rxDisToPktRatio\"])) ? true : false,\n          name: this.language[\"rxDisToPktRatio\"],\n          data: rxDisRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['rxDisToPktRatio']\n        }, {\n          yAxis: 4,\n          visible: ((_29 = this.userselectedlegend) === null || _29 === void 0 ? void 0 : _29.includes(this.language[\"txDisToPktRatio\"])) ? true : false,\n          name: this.language[\"txDisToPktRatio\"],\n          data: txDisRate || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.UPLINK['txDisToPktRatio']\n        }];\n      } else if (type == \"ont\") {\n        this.previousvalue = {\n          usBipErr: null,\n          dsBipErr: null,\n          usFecTotCodeWord: null,\n          dsFecTotCodeWord: null,\n          upTime: null,\n          rxOptPwr: null,\n          neOptSignalLvl: null,\n          txOptLvl: null\n        };\n        var neOptSignalLvl1 = [],\n          rxOptPwr1 = [],\n          txOptPwr = [],\n          rxOptPwr = [],\n          neOptSignalLvl = [],\n          usBipErr = [],\n          dsBipErr = [],\n          usFecTotCodeWord = [],\n          dsFecTotCodeWord = [],\n          upTime = [];\n        var usFecCor = [],\n          dsFecCor = [],\n          usFecUncorCodeWord = [],\n          dsFecUncorCodeWord = [];\n        let urls = this.activeRoute.url;\n        if (urls.split('/')[2] == 'router') {\n          subTitle = '';\n        } else {\n          if (((_30 = this.params) === null || _30 === void 0 ? void 0 : _30.fsan) && !((_31 = this.paramname) === null || _31 === void 0 ? void 0 : _31.regionname)) subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span >${this.language[\"FSAN\"]}: ${(_32 = this.params) === null || _32 === void 0 ? void 0 : _32.fsan}`;else if (!((_33 = this.paramname) === null || _33 === void 0 ? void 0 : _33.locationname)) subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span >${this.language[\"Ont\"]}: ${(_34 = this.paramname) === null || _34 === void 0 ? void 0 : _34.ont}`;else subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span >${this.language[\"region\"]}: ${(_35 = this.paramname) === null || _35 === void 0 ? void 0 : _35.regionname},\n          ${this.language['location']}: ${(_36 = this.paramname) === null || _36 === void 0 ? void 0 : _36.locationname}, ${this.language['System']}: ${(_37 = this.paramname) === null || _37 === void 0 ? void 0 : _37.systemname}, ${this.language['interface']}: ${(_38 = this.paramname) === null || _38 === void 0 ? void 0 : _38.interfacename}, ${this.language[\"Ont\"]}: ${(_39 = this.paramname) === null || _39 === void 0 ? void 0 : _39.ont}`;\n        }\n        if (data.length) {\n          for (let i = 0; i < data.length; i++) {\n            if (data[i + 1] != 'undefined' && ((_40 = data[i + 1]) === null || _40 === void 0 ? void 0 : _40.timestamp)) if (this.dateUtilsService.getChartFormat(data[i].timestamp) == this.dateUtilsService.getChartFormat(data[i + 1].timestamp)) {\n              const nextdata = JSON.parse(JSON.stringify(data[i + 1]));\n              let currentdata = JSON.parse(JSON.stringify(data[i]));\n              let newcur = Object.assign(Object.assign({}, nextdata), currentdata);\n              data[i] = JSON.parse(JSON.stringify(newcur));\n              data[i + 1] = JSON.parse(JSON.stringify(newcur));\n              //  data.splice(data[i + 1], 1);\n            }\n          }\n\n          for (let i = 0; i < this.timestamp.length; i++) {\n            let dataobj = this.findObject(data, this.timestamp[i]);\n            xAxisCategories.push(this.dateUtilsService.getChartFormat(this.timestamp[i]));\n            usBipErr.push({\n              y: dataobj.usBipErr || dataobj.usBipErr == 0 ? dataobj.usBipErr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsBipErr.push({\n              y: dataobj.dsBipErr || dataobj.dsBipErr == 0 ? dataobj.dsBipErr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            usFecTotCodeWord.push({\n              y: dataobj.usFecTotCodeWord || dataobj.usFecTotCodeWord == 0 ? dataobj.usFecTotCodeWord : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsFecTotCodeWord.push({\n              y: dataobj.dsFecTotCodeWord || dataobj.dsFecTotCodeWord == 0 ? dataobj.dsFecTotCodeWord : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            upTime.push({\n              y: dataobj.upTime || dataobj.upTime == 0 ? dataobj.upTime : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            rxOptPwr1.push(dataobj.rxOptPwr || dataobj.rxOptPwr == 0 ? dataobj.rxOptPwr < -40 ? null : dataobj.rxOptPwr : null);\n            txOptPwr.push({\n              y: dataobj.txOptLvl || dataobj.txOptLvl == 0 ? dataobj.txOptLvl : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            neOptSignalLvl1.push(dataobj.neOptSignalLvl || dataobj.neOptSignalLvl == 0 ? dataobj.neOptSignalLvl < -40 ? null : dataobj.neOptSignalLvl : null);\n            rxOptPwr.push({\n              y: dataobj.rxOptPwr || dataobj.rxOptPwr == 0 ? dataobj.rxOptPwr < -40 ? null : dataobj.rxOptPwr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            neOptSignalLvl.push({\n              y: dataobj.neOptSignalLvl || dataobj.neOptSignalLvl == 0 ? dataobj.neOptSignalLvl < -40 ? null : dataobj.neOptSignalLvl : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            usFecCor.push({\n              y: dataobj.usFecCor || dataobj.usFecCor == 0 ? dataobj.usFecCor : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsFecCor.push({\n              y: dataobj.dsFecCor || dataobj.dsFecCor == 0 ? dataobj.dsFecCor : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            usFecUncorCodeWord.push({\n              y: dataobj.usFecUncorCodeWord || dataobj.usFecUncorCodeWord == 0 ? dataobj.usFecUncorCodeWord : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsFecUncorCodeWord.push({\n              y: dataobj.dsFecUncorCodeWord || dataobj.dsFecUncorCodeWord == 0 ? dataobj.dsFecUncorCodeWord : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n          }\n          let listoffield = [usBipErr, dsBipErr, usFecTotCodeWord, dsFecTotCodeWord, upTime, txOptPwr, usFecCor, dsFecCor, usFecUncorCodeWord, dsFecUncorCodeWord];\n          this.restructuring(listoffield);\n          console.log(usFecCor, 'listoffield');\n          for (let i = 0; i < rxOptPwr.length; i++) {\n            let iv = i + 1;\n            if (((_41 = rxOptPwr[i]) === null || _41 === void 0 ? void 0 : _41.y) != null) {\n              if (((_42 = rxOptPwr[i - 1]) === null || _42 === void 0 ? void 0 : _42.y) == null && iv < rxOptPwr.length && ((_43 = rxOptPwr[i + 1]) === null || _43 === void 0 ? void 0 : _43.y) == null) {\n                rxOptPwr[i][\"y\"] = ((_44 = rxOptPwr[i]) === null || _44 === void 0 ? void 0 : _44.y) < -40 ? null : (_45 = rxOptPwr[i]) === null || _45 === void 0 ? void 0 : _45.y, rxOptPwr[i][\"marker\"] = {\n                  enabled: true,\n                  radius: 2\n                };\n              } else if (((_46 = rxOptPwr[i - 1]) === null || _46 === void 0 ? void 0 : _46.y) == null && iv == rxOptPwr.length) {\n                rxOptPwr[i][\"y\"] = ((_47 = rxOptPwr[i]) === null || _47 === void 0 ? void 0 : _47.y) < -40 ? null : (_48 = rxOptPwr[i]) === null || _48 === void 0 ? void 0 : _48.y, rxOptPwr[i][\"marker\"] = {\n                  enabled: true,\n                  radius: 3\n                };\n              }\n            }\n          }\n          for (let i = 0; i < neOptSignalLvl.length; i++) {\n            let iv = i + 1;\n            if (((_49 = neOptSignalLvl[i]) === null || _49 === void 0 ? void 0 : _49.y) != null) {\n              if (((_50 = neOptSignalLvl[i - 1]) === null || _50 === void 0 ? void 0 : _50.y) == null && iv < neOptSignalLvl.length && ((_51 = neOptSignalLvl[i + 1]) === null || _51 === void 0 ? void 0 : _51.y) == null) {\n                var a = {};\n                neOptSignalLvl[i][\"y\"] = ((_52 = neOptSignalLvl[i]) === null || _52 === void 0 ? void 0 : _52.y) < -40 ? null : (_53 = neOptSignalLvl[i]) === null || _53 === void 0 ? void 0 : _53.y, neOptSignalLvl[i][\"marker\"] = {\n                  enabled: true,\n                  radius: 2\n                };\n              } else if (((_54 = neOptSignalLvl[i - 1]) === null || _54 === void 0 ? void 0 : _54.y) == null && iv == neOptSignalLvl.length) {\n                var a = {};\n                neOptSignalLvl[i][\"y\"] = ((_55 = neOptSignalLvl[i]) === null || _55 === void 0 ? void 0 : _55.y) < -40 ? null : (_56 = neOptSignalLvl[i]) === null || _56 === void 0 ? void 0 : _56.y, neOptSignalLvl[i][\"marker\"] = {\n                  enabled: true,\n                  radius: 3\n                };\n              }\n            }\n          }\n          maxvalue = xAxisCategories.length > 47 ? 48 : xAxisCategories.length;\n        }\n        this.lastOntValue.emit(rxOptPwr1);\n        this.lastTxValue.emit(neOptSignalLvl1);\n        this.xaxislenght = (xAxisCategories === null || xAxisCategories === void 0 ? void 0 : xAxisCategories.length) ? (xAxisCategories === null || xAxisCategories === void 0 ? void 0 : xAxisCategories.length) + 2000 : 200000;\n        value = [{\n          yAxis: 0,\n          visible: ((_57 = this.userselectedlegend) === null || _57 === void 0 ? void 0 : _57.includes(this.language[\"Upstream Pon Errors\"])) ? true : false,\n          name: this.language[\"Upstream Pon Errors\"],\n          data: usBipErr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['usbiperr']\n        }, {\n          yAxis: 0,\n          visible: ((_58 = this.userselectedlegend) === null || _58 === void 0 ? void 0 : _58.includes(this.language[\"Downstream Pon Errors\"])) ? true : false,\n          name: this.language[\"Downstream Pon Errors\"],\n          data: dsBipErr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['dsBipErr']\n        }, {\n          yAxis: 0,\n          visible: ((_59 = this.userselectedlegend) === null || _59 === void 0 ? void 0 : _59.includes(this.language[\"Upstream Fec Total Code Words\"])) ? true : false,\n          name: this.language[\"Upstream Fec Total Code Words\"],\n          data: usFecTotCodeWord || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['usFecTotCodeWord']\n        }, {\n          yAxis: 0,\n          visible: ((_60 = this.userselectedlegend) === null || _60 === void 0 ? void 0 : _60.includes(this.language[\"Downstream Fec Total Code Words\"])) ? true : false,\n          name: this.language[\"Downstream Fec Total Code Words\"],\n          data: dsFecTotCodeWord || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['dsFecTotCodeWord']\n        }, {\n          yAxis: 2,\n          visible: ((_61 = this.userselectedlegend) === null || _61 === void 0 ? void 0 : _61.includes(this.language[\"upTime\"])) ? true : false,\n          name: this.language[\"upTime\"],\n          data: upTime || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['upTime']\n        }, {\n          yAxis: 1,\n          visible: ((_62 = this.userselectedlegend) === null || _62 === void 0 ? void 0 : _62.includes(this.language[\"OLT Rx Power Level\"])) ? true : false,\n          name: this.language[\"OLT Rx Power Level\"],\n          data: neOptSignalLvl || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['neOptSignalLvl']\n        }, {\n          yAxis: 1,\n          visible: ((_63 = this.userselectedlegend) === null || _63 === void 0 ? void 0 : _63.includes(this.language[\"ONT Rx Power Level\"])) ? true : false,\n          name: this.language[\"ONT Rx Power Level\"],\n          data: rxOptPwr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['rxOptPwr']\n        }, {\n          yAxis: 1,\n          visible: ((_64 = this.userselectedlegend) === null || _64 === void 0 ? void 0 : _64.includes(this.language[\"ONT Tx Optical Power\"])) ? true : false,\n          name: this.language[\"ONT Tx Optical Power\"],\n          data: txOptPwr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['txOptPwr']\n        }, {\n          yAxis: 0,\n          visible: ((_65 = this.userselectedlegend) === null || _65 === void 0 ? void 0 : _65.includes(this.language[\"Upstream Fec Corrected Bytes\"])) ? true : false,\n          name: this.language[\"Upstream Fec Corrected Bytes\"],\n          data: usFecCor || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['usFecCor']\n        }, {\n          yAxis: 0,\n          visible: ((_66 = this.userselectedlegend) === null || _66 === void 0 ? void 0 : _66.includes(this.language[\"Downstream Fec Corrected Bytes\"])) ? true : false,\n          name: this.language[\"Downstream Fec Corrected Bytes\"],\n          data: dsFecCor || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['dsFecCor']\n        }, {\n          yAxis: 0,\n          visible: ((_67 = this.userselectedlegend) === null || _67 === void 0 ? void 0 : _67.includes(this.language[\"Upstream Fec Uncorrected Code Words\"])) ? true : false,\n          name: this.language[\"Upstream Fec Uncorrected Code Words\"],\n          data: usFecUncorCodeWord || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['usFecUncorCodeWord']\n        }, {\n          yAxis: 0,\n          visible: ((_68 = this.userselectedlegend) === null || _68 === void 0 ? void 0 : _68.includes(this.language[\"Downstream Fec Uncorrected Code Words\"])) ? true : false,\n          name: this.language[\"Downstream Fec Uncorrected Code Words\"],\n          data: dsFecUncorCodeWord || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['dsFecUncorCodeWord']\n        }];\n      }\n      return {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          zoomType: 'x'\n          //plotBackgroundColor: '#f6f6f6',\n        },\n\n        // colors: this.colors,\n        legend: {\n          symbolRadius: 100\n        },\n        exporting: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        // subtitle: {\n        //   text: subTitle,\n        // },\n        xAxis: [{\n          // tickInterval: 1,\n          tickmarkPlacement: 'on',\n          //tickWidth: 0,\n          // max: xAxisCategories?.length ? xAxisCategories?.length - 1 : null,\n          categories: xAxisCategories,\n          labels: {\n            formatter: function () {\n              let label = this.value;\n              let chart = this.chart;\n              if (!chart.resetZoomButton) {\n                if (this.isFirst) {\n                  label = this.axis.categories[0];\n                }\n                if (this.isLast) {\n                  let len = this.axis.categories.length;\n                  label = this.axis.categories[len - 1];\n                }\n              }\n              return label;\n            }\n          }\n        }, {\n          categories: usdsxAxisCategories,\n          showEmpty: false\n        }],\n        yAxis: [{\n          allowDecimals: false,\n          title: {\n            text: \"Count\",\n            style: {\n              fontFamily: \"Source Sans Pro\"\n            }\n          },\n          labels: {\n            formatter: function () {\n              return self.ShortnumberPipe.transform(this.value, false, 0);\n            }\n          },\n          padding: '5px',\n          showEmpty: false\n        }, {\n          opposite: true,\n          allowDecimals: false,\n          title: {\n            //text: rxOptPwr.some(code => code != null) || neOptSignalLvl.some(code => code != null) || txOptPwr.some(code => code != null) ? \"dBm\" : '',\n            text: rxOptPwr.some(code => code != null) || neOptSignalLvl.some(code => code != null) || txOptPwr.some(code => code != null) ? \"dBm\" : this.dsl && (usSnrMargin.some(code => code != null) || dsSnrMargin.some(code => code != null) || usTargetSnr.some(code => code != null) || dsTargetSnr.some(code => code != null)) ? \"dB\" : '',\n            style: {\n              color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['rxOptPwr'],\n              fontFamily: \"Source Sans Pro\"\n            }\n          },\n          labels: {\n            style: {\n              color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['rxOptPwr']\n            }\n          },\n          showEmpty: false\n        }, {\n          opposite: true,\n          allowDecimals: false,\n          title: {\n            text: upTime.some(code => typeof code === 'number') ? \"Seconds\" : '',\n            style: {\n              color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['upTime'],\n              fontFamily: \"Source Sans Pro\"\n            }\n          },\n          labels: {\n            style: {\n              color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['upTime'],\n              fontFamily: \"Source Sans Pro\"\n            }\n          },\n          showEmpty: false\n        }, {\n          opposite: true,\n          allowDecimals: false,\n          min: 0,\n          title: {\n            text: \"\",\n            style: {\n              color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsRate'],\n              fontFamily: \"Source Sans Pro\"\n            }\n          },\n          labels: {\n            formatter: function () {\n              return self.bitsToSize(this.value, false, 0);\n            },\n            style: {\n              color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsRate'],\n              fontFamily: \"Source Sans Pro\"\n            }\n          },\n          showEmpty: false\n        }, {\n          // min: 0,\n          // max: 100,\n          // alignTicks: false,\n          allowDecimals: false,\n          opposite: true,\n          title: {\n            text: \"\",\n            //text: (this.language && this.language.Percentage) ? `${this.language.Percentage}(%)` : 'Percentage(%)',\n            style: {\n              color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxDisToPktRatio'],\n              fontFamily: \"Source Sans Pro\"\n            }\n          },\n          labels: {\n            // formatter() {\n            //     return this.value / 1000;\n            //   }\n            style: {\n              color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['rxDisToPktRatio'],\n              fontFamily: \"Source Sans Pro\"\n            }\n          },\n          showEmpty: false\n        }],\n        tooltip: {\n          useHTML: true,\n          // headerFormat: '<span style = \"font-size:10px\">{point.key}</span><table>',\n          // pointFormatter: function () {\n          //   let s = `<tr><td style='color:${this.series.color};padding:0'> ${this.series.name} :</td>\n          //   <td style='padding:0;margin-left:10px'> ${self.tooltipunit(this.series.name, this.y)} </b></td></tr>`\n          //   return s;\n          // },\n          // //${self.bitsToSize(this.y, false, 2)} pointFormat: '<tr><td style = \"color:{series.color};padding:0\">{series.name}: </td>' +\n          // //   '<td style = \"padding:0;margin-left:10px\"><b>{point.y}</b></td></tr>',\n          // footerFormat: '</table>',\n          // followPointer: true,\n          formatter: function () {\n            var s = \"\",\n              h = \"\",\n              f = \"\",\n              info = \" \";\n            f = \"</table>\";\n            this.points.forEach(point => {\n              if (point.point.mydate == true) {\n                info = `(When all packets are discards and no Rx/Tx packets are processed,<br/>\n                the number provided is the last #of packets discarded and is not ratio)`;\n              } else if (point.point.deleted) {\n                info = \" (Deleted)\";\n              }\n              h = `<span style = \"font-size:10px\" > ${point.key} ${info}  </span><table>`;\n              s += `<tr><td style='color:${point.color};padding:0'> ${point.series.name} :</td>\n            <td style='padding:0;margin-left:10px'>&nbsp ${self.tooltipunit(point.series.name, point.y)} </b></td></tr>`;\n            });\n            let g = s + f;\n            return h + g;\n          },\n          shared: true\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            //connectNulls: true,\n            turboThreshold: this.xaxislenght,\n            cursor: 'cursor',\n            pointPadding: 2,\n            // groupPadding: 0.1,\n            marker: {\n              enabled: xAxisCategories.length == 1 ? true : false,\n              symbol: 'circle',\n              radius: 2,\n              states: {\n                hover: {\n                  enabled: true\n                }\n              }\n            },\n            //pointPlacement: 'on',\n            point: {\n              events: {}\n            },\n            events: {\n              // legendItemClick: function () {\n              //   if (type == 'pon') {\n              //     var seriesIndex = this.index;\n              //     var series = this.chart.series;\n              //     if (seriesIndex == 0 || seriesIndex == 1) {\n              //       for (var i = 2; i < series.length; i++) {\n              //         if (series[i].index != seriesIndex) {\n              //           series[i].hide();\n              //         }\n              //       }\n              //       return true;\n              //     }\n              //     else if (seriesIndex > 1) {\n              //       series[0].hide();\n              //       series[1].hide();\n              //       return true;\n              //     }\n              //   }\n              //   else return true;\n              // }\n              legendItemClick: function () {\n                var _a, _b;\n                if ((_a = self.userselectedlegend) === null || _a === void 0 ? void 0 : _a.includes(this.name)) {\n                  self.userselectedlegend.splice(self.userselectedlegend.indexOf(this.name), 1);\n                } else self.userselectedlegend.push(this.name);\n                if ((_b = self.params) === null || _b === void 0 ? void 0 : _b.fsan) {\n                  let obj = {};\n                  obj[self.params.fsan] = self.userselectedlegend;\n                  self.selectedlegend.emit(obj);\n                }\n              }\n            }\n          }\n        },\n        series: value\n      };\n    }\n    LineChartForBIP(data, type) {\n      var _a, _b, _c, _d;\n      //debugger\n      const self = this;\n      let subTitle;\n      let value;\n      let maxvalue = 0;\n      var xAxisCategories = [];\n      var usdsxAxisCategories = [];\n      if (type == 'pon') {\n        this.previousvalue = {\n          usBipErr: null,\n          dsBipErr: null\n        };\n        var usPonErr = [],\n          dsPonErr = [],\n          usBer = [],\n          dsBer = [];\n        subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span class=\"subtitle\" >${this.language['region']}: ${this.paramname.regionname},\n      ${this.language['location']}: ${this.paramname.locationname}, ${this.language['System']}: ${this.paramname.systemname}, ${this.language['interface']}: ${this.paramname.interfacename}`;\n        if (data.length) {\n          for (let i = 0; i < this.timestamp.length; i++) {\n            let dataobj = this.findObject(data, this.timestamp[i]);\n            usdsxAxisCategories.push(this.dateUtilsService.getChartFormat(this.timestamp[i]));\n            usPonErr.push({\n              y: dataobj.usBipErr || dataobj.usBipErr == 0 ? dataobj.usBipErr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsPonErr.push({\n              y: dataobj.dsBipErr || dataobj.dsBipErr == 0 ? dataobj.dsBipErr : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n          }\n          let listoffield = [usPonErr, dsPonErr];\n          this.restructuring(listoffield);\n          maxvalue = usdsxAxisCategories.length > 47 ? 48 : usdsxAxisCategories.length;\n          this.xaxislenght = (usdsxAxisCategories === null || usdsxAxisCategories === void 0 ? void 0 : usdsxAxisCategories.length) ? (usdsxAxisCategories === null || usdsxAxisCategories === void 0 ? void 0 : usdsxAxisCategories.length) + 2000 : 200000;\n        }\n        value = [{\n          visible: ((_a = this.userselectedlegendbp) === null || _a === void 0 ? void 0 : _a.includes(this.language[\"Upstream Pon Errors\"])) ? true : false,\n          name: this.language[\"Upstream Pon Errors\"],\n          data: usPonErr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['usbiperr']\n        }, {\n          visible: ((_b = this.userselectedlegendbp) === null || _b === void 0 ? void 0 : _b.includes(this.language[\"Downstream Pon Errors\"])) ? true : false,\n          name: this.language[\"Downstream Pon Errors\"],\n          data: dsPonErr || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsbiperr']\n        }];\n      } else if (type == 'ont') {\n        this.previousvalue = {\n          usBer: null,\n          dsBer: null\n        };\n        var usBer = [],\n          dsBer = [];\n        subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span class=\"subtitle\" >${this.language['region']}: ${this.paramname.regionname},\n      ${this.language['location']}: ${this.paramname.locationname}, ${this.language['System']}: ${this.paramname.systemname}, ${this.language['interface']}: ${this.paramname.interfacename}`;\n        if (data.length) {\n          for (let i = 0; i < this.timestamp.length; i++) {\n            let dataobj = this.findObject(data, this.timestamp[i]);\n            usdsxAxisCategories.push(this.dateUtilsService.getChartFormat(this.timestamp[i]));\n            usBer.push({\n              y: this.ErrorRatio(dataobj.usBer) || this.ErrorRatio(dataobj.usBer) == 0 ? dataobj.usBer : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n            dsBer.push({\n              y: this.ErrorRatio(dataobj.dsBer) || this.ErrorRatio(dataobj.dsBer) == 0 ? dataobj.dsBer : null,\n              deleted: (dataobj === null || dataobj === void 0 ? void 0 : dataobj.deleted) ? true : false\n            });\n          }\n          let listoffield = [usBer, dsBer];\n          this.restructuring(listoffield);\n          maxvalue = usdsxAxisCategories.length > 47 ? 48 : usdsxAxisCategories.length;\n          this.xaxislenght = (usdsxAxisCategories === null || usdsxAxisCategories === void 0 ? void 0 : usdsxAxisCategories.length) ? (usdsxAxisCategories === null || usdsxAxisCategories === void 0 ? void 0 : usdsxAxisCategories.length) + 2000 : 200000;\n        }\n        value = [{\n          yAxis: 1,\n          visible: ((_c = this.userselectedlegendbp) === null || _c === void 0 ? void 0 : _c.includes(this.language[\"Upstream BER\"])) ? true : false,\n          name: this.language[\"Upstream BER\"],\n          data: usBer || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['usbiperr']\n        }, {\n          yAxis: 1,\n          visible: ((_d = this.userselectedlegendbp) === null || _d === void 0 ? void 0 : _d.includes(this.language[\"Downstream BER\"])) ? true : false,\n          name: this.language[\"Downstream BER\"],\n          data: dsBer || [],\n          color: environment.OPERATIONS.HEALTH.TIMESERIES.ONT['dsbiperr']\n        }];\n      }\n      return {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          zoomType: 'x'\n        },\n        legend: {\n          symbolRadius: 100\n        },\n        exporting: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        // subtitle: {\n        //   text: subTitle,\n        // },\n        xAxis: [{\n          tickmarkPlacement: 'on',\n          categories: usdsxAxisCategories,\n          labels: {\n            formatter: function () {\n              let label = this.value;\n              let chart = this.chart;\n              if (!chart.resetZoomButton) {\n                if (this.isFirst) {\n                  label = this.axis.categories[0];\n                }\n                if (this.isLast) {\n                  let len = this.axis.categories.length;\n                  label = this.axis.categories[len - 1];\n                }\n              }\n              return label;\n            }\n          }\n        }],\n        yAxis: [{\n          allowDecimals: false,\n          title: {\n            text: \"Count\",\n            style: {\n              fontFamily: \"Source Sans Pro\"\n            }\n          },\n          labels: {\n            formatter: function () {\n              return self.ShortnumberPipe.transform(this.value, false, 0);\n            }\n          },\n          padding: '5px',\n          showEmpty: false\n        }, {\n          allowDecimals: true,\n          //min: 0,\n          title: {\n            text: usBer.some(code => code != null) || dsBer.some(code => code != null) ? \"Error Ratio\" : '',\n            style: {\n              //color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsRate'],\n              fontFamily: \"Source Sans Pro\"\n            }\n          },\n          labels: {\n            // formatter: function () {\n            //   return self.ErrorRatio(this.value, false, 0);\n            // },\n            style: {\n              //color: environment.OPERATIONS.HEALTH.TIMESERIES.PON['dsRate'],\n              fontFamily: \"Source Sans Pro\"\n            }\n          }\n        }],\n        tooltip: {\n          useHTML: true,\n          headerFormat: '<span style = \"font-size:10px\">{point.key}</span><table>',\n          pointFormatter: function () {\n            let s = `<tr><td style='color:${this.series.color};padding:0'> ${this.series.name} :</td>\n          <td style='padding:0;margin-left:10px'>&nbsp ${self.tooltipunit(this.series.name, this.y)} </b></td></tr>`;\n            return s;\n          },\n          footerFormat: '</table>',\n          followPointer: true,\n          shared: true\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        plotOptions: {\n          series: {\n            turboThreshold: this.xaxislenght,\n            cursor: 'cursor',\n            pointPadding: 2,\n            marker: {\n              enabled: usdsxAxisCategories.length == 1 ? true : false,\n              symbol: 'circle',\n              radius: 2,\n              states: {\n                hover: {\n                  enabled: true\n                }\n              }\n            },\n            events: {\n              legendItemClick: function () {\n                var _a;\n                if ((_a = self.userselectedlegendbp) === null || _a === void 0 ? void 0 : _a.includes(this.name)) {\n                  self.userselectedlegendbp.splice(self.userselectedlegendbp.indexOf(this.name), 1);\n                } else self.userselectedlegendbp.push(this.name);\n              }\n            }\n          }\n        },\n        series: value\n      };\n    }\n    closeChart() {\n      this.singletimeseries = !this.singletimeseries;\n      this.doubleTimeseries = !this.doubleTimeseries;\n      let obj = {\n        \"chartname\": this.chartname\n      };\n      this.valueChange.emit(obj);\n    }\n    closeChartBip() {\n      this.doubleTimeseries = !this.doubleTimeseries;\n      let obj = {\n        \"chartname\": this.chartname\n      };\n      this.valueChange.emit(obj);\n    }\n    tooltipunit(legendName, value) {\n      if (legendName == this.language[\"ONT Tx Optical Power\"] || legendName == \"rxOptPwr\" || legendName == \"neOptSignalLvl\" || legendName == this.language[\"OLT Rx Power Level\"] || legendName == this.language[\"ONT Rx Power Level\"]) return value.toFixed(2) + \" dBm\";else if (legendName == this.language[\"usSnrMargin\"] || legendName == this.language[\"dsSnrMargin\"] || legendName == this.language[\"usTargetSnr\"] || legendName == this.language[\"dsTargetSnr\"]) return value.toFixed(2) + \" dB\";else if (legendName == this.language[\"upTime\"]) return value.toFixed(2) + \" s\";else if (legendName == this.language[\"usRate\"] || legendName == this.language[\"dsRate\"]) return this.bitsToSize(value, false, 2);else if (legendName == this.language[\"rxErrToPktRatio\"] || legendName == this.language[\"txErrToPktRatio\"] || legendName == this.language[\"rxDisToPktRatio\"] || legendName == this.language[\"txDisToPktRatio\"]) {\n        return value;\n      } else return this.ShortnumberPipe.transform(value, false);\n    }\n    ErrorRatio(value, round, fixed) {\n      this.Errorratio = Math.log(value) / Math.log(10);\n      this.Errorratio = `${Math.pow(10, this.Errorratio)}`;\n      return this.Errorratio;\n    }\n    bitsToSize(bits, round, fixed) {\n      let bytes = bits;\n      let sizes = ['bps', 'Kbps', 'Mbps', 'Gbps', 'Tbps'];\n      if (bytes == 0) return '0 bps';\n      if (bytes < 0) {\n        bytes = bytes * -1;\n        var i = Math.floor(Math.log(bytes) / Math.log(1000));\n        if (round) {\n          return Math.round(bytes / Math.pow(1000, i)) + ' ' + sizes[i];\n        }\n        let value;\n        value = Highcharts.numberFormat(Math.abs(bytes / Math.pow(1000, i)), fixed);\n        return (value * -1).toFixed(fixed) + ' ' + sizes[i];\n      } else {\n        var i = Math.floor(Math.log(bytes) / Math.log(1000));\n        if (round) {\n          return Math.round(bytes / Math.pow(1000, i)) + ' ' + sizes[i];\n        }\n        return Highcharts.numberFormat(Math.abs(bytes / Math.pow(1000, i)), fixed) + ' ' + sizes[i];\n      }\n    }\n    lowapplyfilter() {\n      if (!this.validateStartEndDates()) {\n        this.modalTitle = 'Time Period';\n        // this.modalInfo = this.language['Time range not valid, end time should be later than start time.']\n        this.openModalInfo();\n        return;\n      }\n      ;\n      Object.keys(this.previousvalue).forEach(key => {\n        this.previousvalue[key] = null;\n      });\n      this.last24hours = false;\n      this.TimeseriesApiCall(this.params);\n    }\n    lowapplyfilterForBIP() {\n      if (!this.validateStartEndDatesForBIP()) {\n        this.modalTitle = 'Time Period';\n        // this.modalInfo = this.language['Time range not valid, end time should be later than start time.']\n        this.openModalInfo();\n        return;\n      }\n      ;\n      Object.keys(this.previousvalue).forEach(key => {\n        this.previousvalue[key] = null;\n      });\n      this.last24hours = false;\n      this.TimeseriesApiCallForBipError(this.params);\n    }\n    openModalInfo() {\n      this.modalRef = this.dialogService.open(this.showInfoModal, {\n        size: 'lg',\n        centered: true,\n        windowClass: 'custom-modal'\n      });\n    }\n    ngOnDestroy() {\n      if (this.languageSubject) this.languageSubject.unsubscribe();\n      if (this.timeseries) this.timeseries.unsubscribe();\n      if (this.toggleSubscription) this.toggleSubscription.unsubscribe();\n    }\n    starttimetoendtime(start, end, diff, data) {\n      // console.log(start, typeof (start), end);\n      let startTime = new Date(parseInt(start) * 1000);\n      let endTime = new Date(parseInt(end) * 1000);\n      // console.log(startTime, typeof (startTime), endTime);\n      // console.log(this.dateUtilsService.getUtCSecondsByDateObj(startTime, false), this.dateUtilsService.getUtCSecondsByDateObj(endTime, true));\n      let endloop = this.dateUtilsService.getUtCSecondsByDateObj(endTime, true);\n      this.timestamp = [];\n      if (diff == \"15min\") {\n        startTime.setSeconds(0);\n        let diffmins = startTime.getMinutes();\n        if (diffmins >= 1 && diffmins <= 15) startTime.setMinutes(15);else if (diffmins >= 16 && diffmins <= 30) startTime.setMinutes(30);else if (diffmins >= 31 && diffmins <= 44) startTime.setMinutes(45);else if (diffmins >= 45) {\n          startTime.setHours(startTime.getHours() + 1);\n          startTime.setMinutes(0);\n        }\n        while (new Date(startTime).getTime() / 1000 < endloop) {\n          this.timestamp.push(Math.floor(new Date(startTime).getTime() / 1000));\n          startTime.setMinutes(startTime.getMinutes() + 15);\n          // console.log(startTime, this.dateUtilsService.getChartFormat(startTime));\n        }\n      } else if (diff == \"1hour\") {\n        let mindiff = new Date(parseInt(data[0].timestamp) * 1000);\n        startTime.setMinutes(mindiff.getMinutes());\n        while (new Date(startTime).getTime() / 1000 < endloop) {\n          this.timestamp.push(Math.floor(new Date(startTime).getTime() / 1000));\n          startTime.setHours(startTime.getHours() + 1);\n          // console.log(startTime, this.dateUtilsService.getChartFormat(startTime));\n        }\n      } else if (diff == \"24hour\") {\n        let mindiff = new Date(parseInt(data[0].timestamp) * 1000);\n        startTime.setHours(mindiff.getHours());\n        startTime.setMinutes(mindiff.getMinutes());\n        while (new Date(startTime).getTime() / 1000 < endloop) {\n          this.timestamp.push(Math.floor(new Date(startTime).getTime() / 1000));\n          // startTime.setHours(startTime.getHours()+1);\n          startTime.setDate(startTime.getDate() + 1);\n          //console.log(startTime, this.dateUtilsService.getChartFormat(startTime));\n        }\n      } else if (diff == \"1month\") {\n        let mindiff = new Date(parseInt(data[0].timestamp) * 1000);\n        startTime.setHours(mindiff.getHours());\n        startTime.setMinutes(mindiff.getMinutes());\n        startTime.setDate(mindiff.getDate());\n        // console.log(new Date(startTime), 'nothing')\n        while (new Date(startTime).getTime() / 1000 < endloop) {\n          this.timestamp.push(Math.floor(new Date(startTime).getTime() / 1000));\n          // startTime.setHours(startTime.getHours()+1);\n          startTime.setMonth(startTime.getMonth() + 1);\n          // console.log(startTime, this.dateUtilsService.getChartFormat(startTime));\n        }\n      }\n      // console.log(this.timestamp, 'timestamps');\n    }\n\n    findObject(jsObjects, value) {\n      let rtrn = {};\n      if (jsObjects && jsObjects.length) {\n        for (var i = 0; i < jsObjects.length; i++) {\n          if (jsObjects[i]['timestamp'] == value) {\n            rtrn = jsObjects[i];\n            break;\n          }\n        }\n      }\n      return rtrn;\n    }\n    restructuring(listoffield) {\n      listoffield.map(fieldName => {\n        var _a, _b, _c;\n        // let data = []\n        // data = JSON.parse(JSON.stringify(fieldName));\n        // fieldName = []\n        // console.log(fieldName);\n        for (let i = 0; i < fieldName.length; i++) {\n          let iv = i + 1;\n          if (fieldName[i].y != null) {\n            if (((_a = fieldName[i - 1]) === null || _a === void 0 ? void 0 : _a.y) == null && iv < fieldName.length && ((_b = fieldName[i + 1]) === null || _b === void 0 ? void 0 : _b.y) == null) {\n              fieldName[i].marker = {\n                enabled: true,\n                radius: 3\n              };\n            } else if (((_c = fieldName[i - 1]) === null || _c === void 0 ? void 0 : _c.y) == null && iv == fieldName.length) {\n              fieldName[i].marker = {\n                enabled: true,\n                radius: 3\n              };\n            }\n          }\n        }\n        // console.log(fieldName);\n      });\n    }\n  }\n\n  TimeserieschartComponent.ɵfac = function TimeserieschartComponent_Factory(t) {\n    return new (t || TimeserieschartComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.HealthService), i0.ɵɵdirectiveInject(i3.CcochartService), i0.ɵɵdirectiveInject(i4.NfainventoryService), i0.ɵɵdirectiveInject(i5.ExportExcelService), i0.ɵɵdirectiveInject(i6.NgbModal), i0.ɵɵdirectiveInject(i7.CommonService), i0.ɵɵdirectiveInject(i8.CommonFunctionsService), i0.ɵɵdirectiveInject(i9.ShortnumberPipe), i0.ɵɵdirectiveInject(i10.DateUtilsService), i0.ɵɵdirectiveInject(i11.Router), i0.ɵɵdirectiveInject(i12.FaUtilsService), i0.ɵɵdirectiveInject(i13.SsoAuthService), i0.ɵɵdirectiveInject(i11.Router));\n  };\n  TimeserieschartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TimeserieschartComponent,\n    selectors: [[\"app-timeserieschart\"]],\n    viewQuery: function TimeserieschartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.showInfoModal = _t.first);\n      }\n    },\n    inputs: {\n      wholedata: \"wholedata\",\n      params: \"params\",\n      paramname: \"paramname\",\n      charttype: \"charttype\",\n      chartname: \"chartname\",\n      page: \"page\",\n      divid: \"divid\",\n      chartdata: \"chartdata\",\n      title: \"title\",\n      system: \"system\",\n      interface: \"interface\"\n    },\n    outputs: {\n      valueChange: \"valueChange\",\n      lastOntValue: \"lastOntValue\",\n      lastTxValue: \"lastTxValue\",\n      selectedlegend: \"selectedlegend\"\n    },\n    decls: 4,\n    vars: 2,\n    consts: [[\"class\", \"subscriber-trends-wrapper my-2\", 3, \"id\", 4, \"ngIf\"], [\"class\", \"subscriber-trends-wrapper\", 3, \"id\", 4, \"ngIf\"], [\"class\", \"col-md-12\"], [\"showInfoModal\", \"\"], [1, \"subscriber-trends-wrapper\", \"my-2\", 3, \"id\"], [1, \"w-100\"], [\"class\", \"d-flex justify-content-between border-bottom\", 4, \"ngIf\"], [1, \"img\", \"my-2\"], [\"class\", \"d-flex position-relative\", 4, \"ngIf\"], [\"class\", \"w-100 alert alert-danger  fade show my-3\", 4, \"ngIf\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [1, \"mwc-content\"], [1, \"col-md-12\", \"p-2\", 3, \"ngClass\"], [1, \"chart-box\", 2, \"height\", \"350px\", \"width\", \"100%\", 3, \"id\"], [1, \"d-flex\", \"justify-content-between\", \"border-bottom\"], [1, \"\"], [\"class\", \"chrat-secondary-title\", \"id\", \"app-timeseries-title\", 4, \"ngIf\"], [1, \"mwc-btns\", \"row\", \"align-items-center\"], [\"type\", \"button\", \"class\", \"close m-2\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [\"id\", \"app-timeseries-title\", 1, \"chrat-secondary-title\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"close\", \"m-2\", 3, \"click\"], [\"aria-hidden\", \"true\"], [1, \"d-flex\", \"position-relative\"], [1, \"current-issue-menu-item\", \"mr-2\"], [\"for\", \"Name\", 1, \"col-form-label\", \"select-font\"], [1, \"ccl-form\", \"col-filter\"], [\"id\", \"start_date\", \"appendTo\", \"body\", \"dateFormat\", \"mm-dd-yy\", 3, \"inputStyle\", \"autoZIndex\", \"selectOtherMonths\", \"placeholder\", \"ngModel\", \"showIcon\", \"ngModelOptions\", \"maxDate\", \"minDate\", \"ngModelChange\", \"onSelect\"], [1, \"mt-40px\"], [1, \"d-inline-flex\", \"mr-3\"], [\"type\", \"button\", 1, \"btn-default\", \"primary\", \"px-3\", 3, \"click\"], [\"type\", \"button\", \"class\", \"close right-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"close\", \"right-close-button\", 3, \"click\"], [1, \"w-100\", \"alert\", \"alert-danger\", \"fade\", \"show\", \"my-3\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [1, \"mt-3\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"subscriber-trends-wrapper\", 3, \"id\"], [1, \"cco-secondary-title\"], [1, \"d-flex\"], [\"id\", \"start_date1\", \"appendTo\", \"body\", \"dateFormat\", \"mm-dd-yy\", 3, \"inputStyle\", \"autoZIndex\", \"placeholder\", \"ngModel\", \"showIcon\", \"ngModelOptions\", \"maxDate\", \"minDate\", \"ngModelChange\", \"onSelect\"], [1, \"modal-header\", \"d-block\"], [\"id\", \"showInfoModal\", 1, \"modal-title\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"], [1, \"modal-body\", \"add-device-model\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn-default\", \"primary\", \"px-3\", \"px-3\", 3, \"click\"]],\n    template: function TimeserieschartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TimeserieschartComponent_div_0_Template, 10, 7, \"div\", 0);\n        i0.ɵɵtemplate(1, TimeserieschartComponent_div_1_Template, 27, 34, \"div\", 1);\n        i0.ɵɵtemplate(2, TimeserieschartComponent_ng_template_2_Template, 10, 3, \"ng-template\", 2, 3, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.singletimeseries);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.doubleTimeseries);\n      }\n    },\n    directives: [i14.NgIf, i14.NgClass, i15.Calendar, i16.NgControlStatus, i16.NgModel],\n    styles: [\"@charset \\\"UTF-8\\\";.health-pon-menu-wrapper[_ngcontent-%COMP%]{display:flex;width:100%;flex-wrap:wrap;justify-content:space-between;align-items:center}.health-pon-menu-item[_ngcontent-%COMP%]{flex-grow:1;border-left:3px solid #cdcdcd;width:calc(100% / 6)}.health-pon-menu-item[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-weight:600}.health-pon-menu-item[_ngcontent-%COMP%]   .menu-title[_ngcontent-%COMP%]{font-size:14px;font-weight:500}.health-pon-menu-item[_ngcontent-%COMP%]   .red[_ngcontent-%COMP%]{color:#ff3600}.health-pon-menu-item[_ngcontent-%COMP%]   .orange[_ngcontent-%COMP%]{color:#fc7235}.health-pon-menu-item[_ngcontent-%COMP%]   .blue[_ngcontent-%COMP%]{color:#72b4ff}.health-pon-menu-item[_ngcontent-%COMP%]   .yellow[_ngcontent-%COMP%]{color:#f3b426}.health-pon-menu-item[_ngcontent-%COMP%]   .green[_ngcontent-%COMP%]{color:#82bf00}.btn-secondary[_ngcontent-%COMP%]{color:#5f6165!important;background-color:#f8f8fa!important;border-color:#f8f8fa!important;padding:3px \\\\200b 10px}.subscriber-trends-wrapper[_ngcontent-%COMP%]{display:flex;width:100%}.subscriber-trends-item[_ngcontent-%COMP%]{width:50%}.subscriber-trend[_ngcontent-%COMP%]{width:100%}.subscriber-trends-item[_ngcontent-%COMP%] + .subscriber-trends-item[_ngcontent-%COMP%]{margin-left:3%}.all-icon[_ngcontent-%COMP%]{font-size:10px;color:#9c9c9c;line-height:31px}.undo-icon[_ngcontent-%COMP%]{background-color:#f8f8fa;padding:3px;color:#9e9e9e;border-radius:15px;margin:2px;font-size:17px;cursor:pointer;width:30px;height:30px;text-align:center}.current-issue-menu-container[_ngcontent-%COMP%]{margin:0;display:flex;width:100%;flex-wrap:wrap;justify-content:space-between;align-items:center}.current-issue-menu-item[_ngcontent-%COMP%]{flex-grow:0;width:16%}button.btn-dload[_ngcontent-%COMP%]{margin-right:6px;background-image:url(ic_download_grey.9f487628f7100a5a71b9.svg);display:none!important}button.btn-dload[_ngcontent-%COMP%]:hover{background-image:url(ic_download_grey.9f487628f7100a5a71b9.svg)}button.btn-dload[_ngcontent-%COMP%]:focus{background-image:url(ic_download_grey.9f487628f7100a5a71b9.svg)}button.btn-expand[_ngcontent-%COMP%]{margin-right:6px;background-image:url(ic_expand_grey.a00ec25dcedb0cff0b8c.svg)}button.btn-expand[_ngcontent-%COMP%]:hover{background-image:url(ic_expand_grey.a00ec25dcedb0cff0b8c.svg)}button.btn-expand[_ngcontent-%COMP%]:focus{background-image:url(ic_expand_grey.a00ec25dcedb0cff0b8c.svg)}button.btn-expand-inv[_ngcontent-%COMP%]{margin-right:6px;background-image:url(ic_expand_inverted_grey.044960530517ee37a1a9.svg)}button.btn-expand-inv[_ngcontent-%COMP%]:hover{background-image:url(ic_expand_inverted_grey.044960530517ee37a1a9.svg)}button.btn-expand-inv[_ngcontent-%COMP%]:focus{background-image:url(ic_expand_inverted_grey.044960530517ee37a1a9.svg)}.btn-dload.spinnershow[_ngcontent-%COMP%]{background-image:url(spinnersmall.8539076b5d15004b8953.svg)!important}.health-pon-report-filter[_ngcontent-%COMP%]   .col-filter[_ngcontent-%COMP%]{width:100%}.ccl-form[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{min-height:36px!important}@media screen and (max-width: 767px){.subscriber-trends-wrapper[_ngcontent-%COMP%]{display:block}.mp-0[_ngcontent-%COMP%]{padding:0!important}.subscriber-trends-item[_ngcontent-%COMP%]{width:100%}.subscriber-trends-item[_ngcontent-%COMP%] + .subscriber-trends-item[_ngcontent-%COMP%]{margin-left:0%!important}}@media screen and (min-width: 768px) and (max-width: 1140px){.subscriber-trends-wrapper[_ngcontent-%COMP%]{display:block}.mp-0[_ngcontent-%COMP%]{padding:0!important}.subscriber-trends-item[_ngcontent-%COMP%]{width:100%}.subscriber-trends-item[_ngcontent-%COMP%] + .subscriber-trends-item[_ngcontent-%COMP%]{margin-left:0%!important}.chart-box[_ngcontent-%COMP%]{width:100%!important}}.Ont-chart-area-info[_ngcontent-%COMP%]{overflow-x:scroll;white-space:nowrap;width:385.8px}.Ont-chart-area[_ngcontent-%COMP%]{width:1000px}.Ont-chart-area-info[_ngcontent-%COMP%]::-webkit-scrollbar{width:3px}.Ont-chart-area-info[_ngcontent-%COMP%]::-webkit-scrollbar-track{width:3px;background:#f1f1f1}.Ont-chart-area-info[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{width:3px;background:#ddd}.right-close-button[_ngcontent-%COMP%]{position:absolute;right:-6px;top:30px}.chrat-secondary-title[_ngcontent-%COMP%]{font-weight:400;font-size:24px;line-height:30px}.chrat-secondary-title[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{padding-left:6px;font-weight:400;font-size:18px;line-height:23px;color:#4c4c4c}.mt-40px[_ngcontent-%COMP%]{margin-top:40px}\"]\n  });\n  return TimeserieschartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}