{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let HomeserviceService = /*#__PURE__*/(() => {\n  class HomeserviceService {\n    // this.orgId = this.sso.getOrgId();\n    constructor(http, Sso) {\n      this.http = http;\n      this.Sso = Sso;\n    }\n    getsubscriber(orgId, agentID) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(environment.SUPPORT_URL + \"/recentSubscribers\" + `?agentId=${agentID}`).pipe(catchError(this.handleError));\n    }\n    getActiveSubscriber(orgId) {\n      return this.http.get(environment.FOUNDATION_BASE_URL + `dashboard/active-subscribers/${orgId}?limit=2`).pipe(catchError(this.handleError));\n    }\n    getActiveRGs(orgId) {\n      return this.http.get(environment.FOUNDATION_BASE_URL + `dashboard/system-status/${orgId}?limit=2`).pipe(catchError(this.handleError));\n    }\n    getSystemReboot(orgId) {\n      return this.http.get(environment.FOUNDATION_BASE_URL + `dashboard/system-reboot/${orgId}?limit=2`).pipe(catchError(this.handleError));\n    }\n    getSpeedTestFailure(orgId) {\n      return this.http.get(environment.FOUNDATION_BASE_URL + `dashboard/speed-test-failures/${orgId}?limit=2`).pipe(catchError(this.handleError));\n    }\n    getPONoutage(startTime, endTime) {\n      return this.http.get(environment.API_BASE_URL + `analytics-engine/alarmByName?startEpochTime=${startTime}&endEpochTime=${endTime}&interval=Days&alarmEventName=loss-of-pon`).pipe(catchError(this.handleError));\n    }\n    getONTimpact(startTime, endTime) {\n      return this.http.get(environment.API_BASE_URL + `analytics-engine/subscriberCount?startEpochTime=${startTime}&endEpochTime=${endTime}&interval=Days&alarmEventName=loss-of-pon`).pipe(catchError(this.handleError));\n    }\n    getTotalImpacts() {\n      return this.http.get(environment.API_BASE_URL + `analytics-engine/totalImpactedSubscribers`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n  }\n  HomeserviceService.ɵfac = function HomeserviceService_Factory(t) {\n    return new (t || HomeserviceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  HomeserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HomeserviceService,\n    factory: HomeserviceService.ɵfac,\n    providedIn: 'root'\n  });\n  return HomeserviceService;\n})();","map":null,"metadata":{},"sourceType":"module"}