{"ast":null,"code":"import { Subject, BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/sso-auth.service\";\nimport * as i2 from \"@angular/common/http\";\nconst CronJob = require('cron').CronJob;\nexport let CommonService = /*#__PURE__*/(() => {\n  class CommonService {\n    constructor(sso, http) {\n      //this.permissionDataProcess();\n      this.sso = sso;\n      this.http = http;\n      this.currentPageData = new Subject();\n      this.currentOrgData = new Subject();\n      this.scrollTop = new Subject();\n      this.closeAlerts = new Subject();\n      this.successAlert = new Subject();\n      this.errorAlert = new Subject();\n      this.showApiUsage = new Subject();\n      this.showAccountManagement = new Subject();\n      this.recordView = {\n        show: false\n      };\n      this.scopeMapping = {\n        //csc\n        apps: 'Applications',\n        experienceiq: 'ExperienceIQ',\n        protectiq: 'ProtectIQ ',\n        cpe: 'Router',\n        backup_restore: 'Backup/Restore',\n        calloutcome: 'Call Outcome',\n        call_avoidance: \"Call Avoidance\",\n        call_outcome: \"Call Outcome Report\",\n        audit_Report: \"Audit Report\",\n        comm_logs: \"Communication Logs\",\n        config: \"Configuration\",\n        config_files: \"Configuration files\",\n        configuration: \"Configuration\",\n        connect_device: \"Connect To Device\",\n        dashboards: \"Dashboard\",\n        data: \"Data\",\n        data_model: \"Data Model\",\n        device_group: \"System Groups\",\n        device_logs: \"Device Logs\",\n        devices: \"Devices\",\n        devices_delete: \"Delete Device\",\n        dial_plan: \"Dial Plan\",\n        enablement: \"Enablement\",\n        event_history: \"Event History\",\n        ext_file_server: \"External File Server\",\n        factory_reset: \"Factory Reset\",\n        gfast: \"GFAST\",\n        inv_report: \"Inventory Report\",\n        l2security: \"Security\",\n        mgmt: \"Subscriber Mgmt\",\n        netops: \"NetOps\",\n        operations: \"Operations\",\n        perf_testing: \"Performance Testing\",\n        ping: \"Ping\",\n        profiles: \"Profiles\",\n        reboot: \"Reboot\",\n        reports: \"Reports\",\n        search: \"Subscriber Search\",\n        secure_onboarding: \"Secure Onboarding\",\n        self_heal: \"Self Healing\",\n        services: \"Services\",\n        site_scan: \"SiteScan\",\n        speed_test: \"Run Speed Test\",\n        stale_purge: \"Stale System Purge\",\n        subnet_config: \"Subnet Configuration\",\n        subscribers: \"Subscriber Records\",\n        sw_images: \"Software Images\",\n        trace_route: \"Traceroute\",\n        trafficreports: \"Traffic Reports\",\n        unassociated_devices: \"Unassociated Devices\",\n        update_image: \"Update Software\",\n        video: \"Video\",\n        voice: \"Voice\",\n        websitecheck: \"Website Check\",\n        wifi: \"WiFi\",\n        workflow: \"Workflows\",\n        xdsl: \"XDSL\",\n        //cmc\n        exploredata: \"Explored Data\",\n        //shad\n        service: \"SHAD Service Access\",\n        networktrends: \"Network Trends\",\n        \"subscribersystems\": \"Subscriber Systems\",\n        \"activealarm\": \"Active Alarms\",\n        \"activepons\": \"Active PONs\",\n        \"biperrors\": \"BIP Errors\",\n        \"subscriberimpacted\": \"Subscriber Impacted\",\n        \"cmndiqstatus\": \"Command IQ Status\",\n        \"revedgesuitestatus\": \"Subscribers by Revenue EDGE Suite\",\n        \"systemmodel\": \"Systems by Model\",\n        \"systemstatus\": \"Systems Status\",\n        \"systemtype\": \"Systems by Type\",\n        \"historyalarm\": \"Historical Reports\",\n        \"calloutcomereports\": \"Call Outcome\",\n        \"epcountbymapper\": \"Endpoint Count By Mapper\",\n        \"invreports\": \"Inventory Reports\",\n        \"mappedeplists\": \"Mapped Endpoint Lists\",\n        \"ontdevices\": \"ONT Systems\",\n        \"unassociatedsystems\": \"Unassociated Systems\",\n        \"unmappedips\": \"UnMapped IPs\",\n        \"nwdelete\": \"Network Delete\",\n        \"nwdisconnect\": \"Network Disconnect\",\n        \"pon\": \"PON\",\n        \"ont\": \"ONT\",\n        \"edgesuitesbulkprovisioning\": \"EDGE Suites Bulk Provisioning\",\n        \"wan_status\": \"WAN Status\",\n        \"ae\": \"Active Ethernet\",\n        \"alarmnotifications\": \"Alarm Notifications\",\n        \"transformalarmrules\": \"Transform Alarm Rules\",\n        \"subscriber\": \"Subscriber Operations\",\n        \"realtime\": \"Real Time\",\n        \"mycommunityiq\": \"MyCommunityIQ\",\n        \"revedgesuiteecosystemstatus\": \"Subscribers with Revenue EDGE Ecosystem Suites\",\n        \"revenue\": \"Revenue\",\n        \"auditreport\": \"Audit Report\"\n      };\n      this.isNewVersionAvailable = new BehaviorSubject({\n        isUpdateAvailable: false,\n        isUpdateAnimation: true\n      });\n      this.tableInfo = {\n        'devices': {\n          id: '',\n          urlFromFC: 'network/devices'\n        },\n        'network_subnets': {\n          id: 'subnets-table',\n          urlFromFC: 'network/subnets'\n        },\n        'radius_server': {\n          id: 'radius-servers-table',\n          urlFromFC: 'network/radius-servers'\n        },\n        'locations': {\n          id: 'fc-locations-table',\n          urlFromFC: 'locations'\n        },\n        'definitions': {\n          id: 'app-definitions-table',\n          urlFromFC: 'applications/definitions'\n        },\n        'app_groups': {\n          id: 'app-groups-table',\n          urlFromFC: 'applications/app_groups'\n        },\n        'management': {\n          id: 'management-table',\n          urlFromFC: 'endpoint/management'\n        },\n        'endpoint_subnets': {\n          id: 'subnets-table',\n          urlFromFC: 'endpoint/subnets'\n        }\n      };\n      this.date = new Date();\n    }\n    currentPageAdder(data) {\n      this.currentPageData.next(data);\n    }\n    currentOrgAdder(data) {\n      this.currentOrgData.next(data);\n    }\n    validatePhoneNumber(number = '') {\n      return /^[^A-z]+$/.test(number);\n    }\n    validateEmail(email) {\n      return /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email);\n    }\n    allSupportDataProcess(mainObj, slctdPrmsns, doNotProcess) {\n      let scope = [];\n      let temp = [];\n      let temp2 = [];\n      let old = {};\n      let scopeBase = '';\n      mainObj = this.sortByColumn(mainObj, 'asc', 'name');\n      for (let perm of mainObj) {\n        scope = perm.name.split('.');\n        scopeBase = scope[0] + '.' + scope[1] + '.' + scope[2];\n        switch (scope.length) {\n          case 3:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            } else {\n              old = temp[scopeBase];\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = old['permissions'];\n              old = {};\n            }\n            break;\n          case 4:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = [];\n            } else {\n              old = temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]];\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = old['permissions2'];\n              old = {};\n            }\n            break;\n          case 5:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = [];\n            } else {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]];\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'][scopeBase + '.' + scope[3] + '.' + scope[4]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'][scopeBase + '.' + scope[3] + '.' + scope[4]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'][scopeBase + '.' + scope[3] + '.' + scope[4]]['permissions3'] = [];\n            }\n            break;\n        }\n      }\n      let temp3 = [];\n      let temp4 = [];\n      let checked = false;\n      let readWrite = false;\n      for (let key in temp) {\n        if (Object.keys(temp[key].permissions).length != 0) {\n          for (let key2 in temp[key].permissions) {\n            if (Object.keys(temp[key].permissions[key2].permissions2).length != 0) {\n              for (let key3 in temp[key].permissions[key2].permissions2) {\n                checked = false;\n                if (slctdPrmsns[key3]) {\n                  checked = true;\n                }\n                readWrite = false;\n                if (slctdPrmsns[key3] && slctdPrmsns[key3].indexOf('read,write') !== -1) {\n                  readWrite = true;\n                }\n                temp[key].permissions[key2].permissions2[key3].checked = checked;\n                temp[key].permissions[key2].permissions2[key3].readWrite = readWrite;\n                temp4.push(temp[key].permissions[key2].permissions2[key3]);\n              }\n            }\n            checked = false;\n            if (slctdPrmsns[key2]) {\n              checked = true;\n            }\n            readWrite = false;\n            if (slctdPrmsns[key2] && slctdPrmsns[key2].indexOf('read,write') !== -1) {\n              readWrite = true;\n            }\n            temp[key].permissions[key2].checked = checked;\n            temp[key].permissions[key2].readWrite = readWrite;\n            temp4 = this.sortByColumn(temp4, 'asc', 'displayName');\n            temp[key].permissions[key2].permissions2 = temp4;\n            temp4 = [];\n            temp3.push(temp[key].permissions[key2]);\n          }\n        }\n        temp3 = this.sortByColumn(temp3, 'asc', 'displayName');\n        temp[key].permissions = temp3;\n        checked = false;\n        if (slctdPrmsns[temp[key].name]) {\n          checked = true;\n        }\n        readWrite = false;\n        if (slctdPrmsns[temp[key].name] && slctdPrmsns[temp[key].name].indexOf('read,write') !== -1) {\n          readWrite = true;\n        }\n        temp[key].checked = checked;\n        temp[key].readWrite = readWrite;\n        temp2.push(temp[key]);\n        temp3 = [];\n      }\n      for (let i = 0; i < temp2.length; i++) {\n        let slctdScopes = [];\n        let showSelectedScopes = false;\n        if (temp2[i].permissions) {\n          for (let j = 0; j < temp2[i].permissions.length; j++) {\n            if (slctdPrmsns[temp2[i].permissions[j].name]) {\n              slctdScopes.push(temp2[i].permissions[j].displayName);\n            }\n            let innerSlctdScopes = [];\n            if (temp2[i].permissions[j].permissions2) {\n              for (let k = 0; k < temp2[i].permissions[j].permissions2.length; k++) {\n                if (slctdPrmsns[temp2[i].permissions[j].permissions2[k].name]) {\n                  innerSlctdScopes.push(temp2[i].permissions[j].permissions2[k].displayName);\n                  showSelectedScopes = true;\n                }\n              }\n              temp2[i].permissions[j]['selectedScopes'] = innerSlctdScopes.join(', ');\n              temp2[i].permissions[j]['showSelectedScopes'] = innerSlctdScopes.length ? true : false;\n              temp2[i]['showSelectedScopes'] = showSelectedScopes;\n              temp2[i].permissions[j]['area-expanded'] = innerSlctdScopes.length ? true : false;\n            }\n          }\n          temp2[i]['selectedScopes'] = slctdScopes.join(', ');\n          temp2[i]['showSelectedScopes'] = showSelectedScopes || temp2[i]['selectedScopes'].length ? true : false;\n          temp2[i]['area-expanded'] = temp2[i]['showSelectedScopes'] ? true : false;\n        }\n      }\n      temp2 = this.sortByColumn(temp2, 'asc', 'displayName');\n      return temp2;\n    }\n    allSupportDataProcessV21(mainObj, slctdPrmsns, doNotProcess) {\n      let scope = [];\n      let temp = [];\n      let temp2 = [];\n      let old = {};\n      let scopeBase = '';\n      ;\n      mainObj = this.sortByColumn(mainObj, 'asc', 'name');\n      for (let perm of mainObj) {\n        if (perm.name.indexOf('rbac') == -1) {\n          continue;\n        }\n        scope = perm.name.split('.');\n        scopeBase = scope[0] + '.' + scope[1] + '.' + scope[2] + '.' + scope[3];\n        switch (scope.length) {\n          case 4:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            } else {\n              old = temp[scopeBase];\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = old['permissions'];\n              old = {};\n            }\n            break;\n          case 5:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'] = [];\n            } else {\n              old = temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]];\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'] = old['permissions2'];\n              old = {};\n            }\n            break;\n          case 6:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'] = [];\n            } else {\n              // old = temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]];\n              // temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] = { ...perm };\n              // temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'] = old['permissions2'];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]]['permissions3'] = [];\n            } else {\n              // old = temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]];\n              // temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]] = { ...perm };\n              // temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]]['permissions3'] = old['permissions3'];\n              // old = {};\n            }\n            break;\n          case 7:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'] = [];\n            } else {\n              // old = temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]];\n              // temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] = { ...perm };\n              // temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'] = old['permissions2'];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]]['permissions3'] = [];\n            } else {\n              // old = temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]];\n              // temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]] = { ...perm };\n              // temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]]['permissions3'] = old['permissions3'];\n              // old = {};\n            }\n            let level4 = scopeBase + '.' + scope[4];\n            let level5 = scopeBase + '.' + scope[4] + '.' + scope[5];\n            let level6 = scopeBase + '.' + scope[4] + '.' + scope[5] + '.' + scope[6];\n            if (temp[scopeBase]['permissions'][level4]['permissions2'][level5]['permissions3'][level6] == undefined) {\n              temp[scopeBase]['permissions'][level4]['permissions2'][level5]['permissions3'][level6] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][level4]['permissions2'][level5]['permissions3'][level6]['permissions4'] = [];\n            } else {\n              // old = temp[scopeBase]['permissions'][level4]['permissions2'][level5];\n              // temp[scopeBase]['permissions'][level4]['permissions2'][level5] = { ...perm };\n              // temp[scopeBase]['permissions'][level4]['permissions2'][level5]['permissions3'] = old['permissions3'];\n              // old = {};\n            }\n            break;\n        }\n      }\n      let temp3 = [];\n      let temp4 = [];\n      let temp5 = [];\n      let checked = false;\n      let readWrite = false;\n      for (let key in temp) {\n        if (Object.keys(temp[key].permissions).length != 0) {\n          for (let key2 in temp[key].permissions) {\n            if (Object.keys(temp[key].permissions[key2].permissions2).length != 0) {\n              for (let key3 in temp[key].permissions[key2].permissions2) {\n                if (Object.keys(temp[key].permissions[key2].permissions2[key3].permissions3).length != 0) {\n                  for (let key4 in temp[key].permissions[key2].permissions2[key3].permissions3) {\n                    checked = false;\n                    if (slctdPrmsns[key4]) {\n                      checked = true;\n                    }\n                    readWrite = false;\n                    if (slctdPrmsns[key4] && slctdPrmsns[key4].indexOf('read,write') !== -1) {\n                      readWrite = true;\n                    }\n                    temp[key].permissions[key2].permissions2[key3].permissions3[key4].checked = checked;\n                    temp[key].permissions[key2].permissions2[key3].permissions3[key4].readWrite = readWrite;\n                    temp5.push(temp[key].permissions[key2].permissions2[key3].permissions3[key4]);\n                  }\n                }\n                checked = false;\n                if (slctdPrmsns[key3]) {\n                  checked = true;\n                }\n                readWrite = false;\n                if (slctdPrmsns[key3] && slctdPrmsns[key3].indexOf('read,write') !== -1) {\n                  readWrite = true;\n                }\n                temp[key].permissions[key2].permissions2[key3].checked = checked;\n                temp[key].permissions[key2].permissions2[key3].readWrite = readWrite;\n                temp5 = this.sortByColumn(temp5, 'asc', 'displayName');\n                temp[key].permissions[key2].permissions2[key3].permissions3 = temp5;\n                temp5 = [];\n                temp4.push(temp[key].permissions[key2].permissions2[key3]);\n              }\n            }\n            checked = false;\n            if (slctdPrmsns[key2]) {\n              checked = true;\n            }\n            readWrite = false;\n            if (slctdPrmsns[key2] && slctdPrmsns[key2].indexOf('read,write') !== -1) {\n              readWrite = true;\n            }\n            temp[key].permissions[key2].checked = checked;\n            temp[key].permissions[key2].readWrite = readWrite;\n            temp4 = this.sortByColumn(temp4, 'asc', 'displayName');\n            temp[key].permissions[key2].permissions2 = temp4;\n            temp4 = [];\n            temp3.push(temp[key].permissions[key2]);\n          }\n        }\n        temp3 = this.sortByColumn(temp3, 'asc', 'displayName');\n        temp[key].permissions = temp3;\n        checked = false;\n        if (slctdPrmsns[temp[key].name]) {\n          checked = true;\n        }\n        readWrite = false;\n        if (slctdPrmsns[temp[key].name] && slctdPrmsns[temp[key].name].indexOf('read,write') !== -1) {\n          readWrite = true;\n        }\n        temp[key].checked = checked;\n        temp[key].readWrite = readWrite;\n        temp2.push(temp[key]);\n        temp3 = [];\n      }\n      for (let i = 0; i < temp2.length; i++) {\n        let slctdScopes = [];\n        let showSelectedScopes = false;\n        let showInnerSelectedScopes = false;\n        if (temp2[i].permissions) {\n          for (let j = 0; j < temp2[i].permissions.length; j++) {\n            if (slctdPrmsns[temp2[i].permissions[j].name]) {\n              slctdScopes.push(temp2[i].permissions[j].displayName);\n            }\n            let innerSlctdScopes = [];\n            if (temp2[i].permissions[j].permissions2) {\n              for (let k = 0; k < temp2[i].permissions[j].permissions2.length; k++) {\n                if (slctdPrmsns[temp2[i].permissions[j].permissions2[k].name]) {\n                  innerSlctdScopes.push(temp2[i].permissions[j].permissions2[k].displayName);\n                  showSelectedScopes = true;\n                }\n                let deepInnerSlctdScopes = [];\n                if (temp2[i].permissions[j].permissions2[k].permissions3) {\n                  for (let l = 0; l < temp2[i].permissions[j].permissions2[k].permissions3.length; l++) {\n                    if (slctdPrmsns[temp2[i].permissions[j].permissions2[k].permissions3[l].name]) {\n                      deepInnerSlctdScopes.push(temp2[i].permissions[j].permissions2[k].permissions3[l].displayName);\n                      showInnerSelectedScopes = true;\n                    }\n                    temp2[i].permissions[j].permissions2[k]['selectedScopes'] = deepInnerSlctdScopes.join(', ');\n                    temp2[i].permissions[j].permissions2[k]['showSelectedScopes'] = deepInnerSlctdScopes.length ? true : false;\n                    temp2[i].permissions[j]['showSelectedScopes'] = showInnerSelectedScopes;\n                    temp2[i].permissions[j].permissions2[k]['area-expanded'] = deepInnerSlctdScopes.length ? true : false;\n                  }\n                }\n              }\n              temp2[i].permissions[j]['selectedScopes'] = innerSlctdScopes.join(', ');\n              temp2[i].permissions[j]['showSelectedScopes'] = innerSlctdScopes.length ? true : false;\n              temp2[i]['showSelectedScopes'] = showSelectedScopes;\n              temp2[i].permissions[j]['area-expanded'] = innerSlctdScopes.length ? true : false;\n            }\n          }\n          temp2[i]['selectedScopes'] = slctdScopes.join(', ');\n          temp2[i]['showSelectedScopes'] = showSelectedScopes || temp2[i]['selectedScopes'].length ? true : false;\n          temp2[i]['area-expanded'] = temp2[i]['showSelectedScopes'] ? true : false;\n        }\n      }\n      temp2 = this.sortByColumn(temp2, 'asc', 'displayName');\n      return temp2;\n    }\n    getSelectedSubScopeNames(allPrmsnfrmApi, slctdPrmsns, v21) {\n      let obj = {};\n      let otp = {};\n      let checkOtp = {};\n      let temp2;\n      if (v21) {\n        temp2 = this.allSupportDataProcessV21(allPrmsnfrmApi, slctdPrmsns, true);\n      } else {\n        temp2 = this.allSupportDataProcess(allPrmsnfrmApi, slctdPrmsns, true);\n      }\n      for (let i = 0; i < temp2.length; i++) {\n        let slctdScopes = [];\n        let showSelectedScopes = false;\n        let showInnerSelectedScopes = false;\n        let parentOfParent = [];\n        Object.keys(slctdPrmsns).forEach(elem => {\n          if (elem.indexOf(temp2[i].name) > -1) {\n            parentOfParent.push(temp2[i].displayName);\n          }\n        });\n        if (temp2[i].permissions) {\n          for (let j = 0; j < temp2[i].permissions.length; j++) {\n            if (slctdPrmsns[temp2[i].permissions[j].name]) {\n              slctdScopes.push(temp2[i].permissions[j].displayName);\n            }\n            obj[temp2[i].permissions[j]._id] = temp2[i].permissions[j].name;\n            let innerSlctdScopes = [];\n            if (temp2[i].permissions[j].permissions2) {\n              for (let k = 0; k < temp2[i].permissions[j].permissions2.length; k++) {\n                if (slctdPrmsns[temp2[i].permissions[j].permissions2[k].name]) {\n                  innerSlctdScopes.push(temp2[i].permissions[j].permissions2[k].displayName);\n                  showSelectedScopes = true;\n                }\n                obj[temp2[i].permissions[j].permissions2[k]._id] = temp2[i].permissions[j].permissions2[k].name;\n                //Newly added code\n                let deepInnerSlctdScopes = [];\n                if (temp2[i].permissions[j].permissions2[k].permissions3) {\n                  for (let l = 0; l < temp2[i].permissions[j].permissions2[k].permissions3.length; l++) {\n                    if (slctdPrmsns[temp2[i].permissions[j].permissions2[k].permissions3[l].name]) {\n                      deepInnerSlctdScopes.push(temp2[i].permissions[j].permissions2[k].permissions3[l].displayName);\n                      showInnerSelectedScopes = true;\n                    }\n                    obj[temp2[i].permissions[j].permissions2[k].permissions3[l]._id] = temp2[i].permissions[j].permissions2[k].permissions3[l].name;\n                  }\n                  temp2[i].permissions[j].permissions2[k]['selectedScopes'] = deepInnerSlctdScopes.join(', ');\n                  temp2[i].permissions[j].permissions2[k]['showSelectedScopes'] = deepInnerSlctdScopes.length ? true : false;\n                  temp2[i].permissions[j]['showSelectedScopes'] = showInnerSelectedScopes;\n                  temp2[i].permissions[j].permissions2[k]['area-expanded'] = deepInnerSlctdScopes.length ? true : false;\n                  otp[temp2[i].permissions[j].permissions2[k]._id] = temp2[i].permissions[j].permissions2[k]['selectedScopes'];\n                  checkOtp[temp2[i].permissions[j].permissions2[k]._id] = temp2[i].permissions[j].permissions2[k]['checked'];\n                }\n                //Newly added code\n              }\n\n              temp2[i].permissions[j]['selectedScopes'] = innerSlctdScopes.join(', ');\n              temp2[i].permissions[j]['showSelectedScopes'] = innerSlctdScopes.length ? true : false;\n              temp2[i].permissions[j]['showSelectedScopes'] = showSelectedScopes;\n              temp2[i].permissions[j]['area-expanded'] = innerSlctdScopes.length ? true : false;\n              otp[temp2[i].permissions[j]._id] = temp2[i].permissions[j]['selectedScopes'];\n              checkOtp[temp2[i].permissions[j]._id] = temp2[i].permissions[j]['checked'];\n            }\n          }\n          temp2[i]['selectedScopes'] = slctdScopes.join(', ');\n          temp2[i]['showSelectedScopes'] = showSelectedScopes || temp2[i]['selectedScopes'].length ? true : false;\n          temp2[i]['area-expanded'] = temp2[i]['showSelectedScopes'] ? true : false;\n          obj[temp2[i]._id] = temp2[i].name;\n          otp[temp2[i]._id] = temp2[i]['selectedScopes'];\n          checkOtp[temp2[i]._id] = temp2[i]['checked'];\n        }\n        if (parentOfParent.length && !otp[temp2[i]._id]) {\n          otp[temp2[i]._id] = ' ';\n        }\n      }\n      let data = {\n        scopes: Object.keys(otp),\n        selectedData: otp,\n        checkedScopes: checkOtp,\n        scopeNames: obj\n      };\n      return data;\n    }\n    permProcessForUserDetail(mainObj) {\n      let scope = [];\n      let temp = {};\n      let temp2 = [];\n      let old = {};\n      let scopeBase = '';\n      let scopeBase2 = '';\n      let scopeBase3 = '';\n      if (mainObj.permissions == undefined) {\n        return [];\n      }\n      for (let perm of mainObj.permissions) {\n        scope = perm.scopeName.split('.');\n        scopeBase = scope[0] + '.' + scope[1] + '.' + scope[2];\n        switch (scope.length) {\n          case 3:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            } else {\n              old = temp[scopeBase];\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = old['permissions'];\n              old = {};\n            }\n            break;\n          case 4:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = [];\n            } else {\n              old = temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]];\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = old['permissions2'];\n              old = {};\n            }\n            break;\n          case 5:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = [];\n            } else {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]];\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'][scopeBase + '.' + scope[3] + '.' + scope[4]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'][scopeBase + '.' + scope[3] + '.' + scope[4]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'][scopeBase + '.' + scope[3] + '.' + scope[4]]['permissions3'] = [];\n            }\n            break;\n        }\n      }\n      let temp3 = [];\n      let temp4 = [];\n      for (let key in temp) {\n        if (Object.keys(temp[key].permissions).length != 0) {\n          for (let key2 in temp[key].permissions) {\n            if (Object.keys(temp[key].permissions[key2].permissions2).length != 0) {\n              for (let key3 in temp[key].permissions[key2].permissions2) {\n                temp4.push(temp[key].permissions[key2].permissions2[key3]);\n              }\n            }\n            temp4 = this.sortByColumn(temp4, 'asc', 'scopeDisplayName');\n            temp[key].permissions[key2].permissions2 = temp4;\n            temp4 = [];\n            temp3.push(temp[key].permissions[key2]);\n          }\n        }\n        temp3 = this.sortByColumn(temp3, 'asc', 'scopeDisplayName');\n        temp[key].permissions = temp3;\n        temp2.push(temp[key]);\n        temp3 = [];\n      }\n      temp2 = this.sortByColumn(temp2, 'asc', 'scopeDisplayName');\n      return temp2;\n    }\n    permProcessForUserDetailDeployment(mainObj) {\n      let scope = [];\n      let temp = {};\n      let temp2 = [];\n      let old = {};\n      let scopeBase = '';\n      let scopeBase2 = '';\n      let scopeBase3 = '';\n      if (mainObj.permissions == undefined) {\n        return [];\n      }\n      for (let perm of mainObj.permissions) {\n        scope = perm.scopeName.split('.');\n        scopeBase = scope[0] + '.' + scope[1] + '.' + scope[2];\n        switch (scope.length) {\n          case 3:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            } else {\n              old = temp[scopeBase];\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = old['permissions'];\n              old = {};\n            }\n            break;\n          case 4:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = [];\n            } else {\n              old = temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]];\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = old['permissions2'];\n              old = {};\n            }\n            break;\n          case 5:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = [];\n            } else {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]] = temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]];\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'] = temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'];\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'][scopeBase + '.' + scope[3] + '.' + scope[4]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'][scopeBase + '.' + scope[3] + '.' + scope[4]] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[3]]['permissions2'][scopeBase + '.' + scope[3] + '.' + scope[4]]['permissions3'] = [];\n            }\n            break;\n        }\n      }\n      let temp3 = [];\n      let temp4 = [];\n      for (let key in temp) {\n        if (Object.keys(temp[key].permissions).length != 4) {\n          temp[key].action = '';\n        }\n        if (Object.keys(temp[key].permissions).length != 0) {\n          for (let key2 in temp[key].permissions) {\n            if (Object.keys(temp[key].permissions[key2].permissions2).length != 0) {\n              for (let key3 in temp[key].permissions[key2].permissions2) {\n                temp4.push(temp[key].permissions[key2].permissions2[key3]);\n              }\n            }\n            temp4 = this.sortByColumn(temp4, 'asc', 'scopeDisplayName');\n            temp[key].permissions[key2].permissions2 = temp4;\n            temp4 = [];\n            temp3.push(temp[key].permissions[key2]);\n          }\n        }\n        temp3 = this.sortByColumn(temp3, 'asc', 'scopeDisplayName');\n        temp[key].permissions = temp3;\n        temp2.push(temp[key]);\n        temp3 = [];\n      }\n      temp2 = this.sortByColumn(temp2, 'asc', 'scopeDisplayName');\n      return temp2;\n    }\n    permProcessForUserDetailV21(mainObj) {\n      let scope = [];\n      let temp = {};\n      let temp2 = [];\n      let old = {};\n      let scopeBase = '';\n      let scopeBase2 = '';\n      let scopeBase3 = '';\n      if (mainObj.permissions == undefined) {\n        return [];\n      }\n      let permissions = this.sortByColumn(mainObj.permissions, 'asc', 'scopeName');\n      for (let perm of permissions) {\n        if (perm.scopeName.indexOf('rbac') == -1) {\n          continue;\n        }\n        scope = perm.scopeName.split('.');\n        scopeBase = scope[0] + '.' + scope[1] + '.' + scope[2] + '.' + scope[3];\n        switch (scope.length) {\n          case 4:\n            if (temp[scopeBase] == undefined) {\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = [];\n            } else {\n              old = temp[scopeBase];\n              temp[scopeBase] = Object.assign({}, perm);\n              temp[scopeBase]['permissions'] = old['permissions'];\n              old = {};\n            }\n            break;\n          case 5:\n            if (temp[scopeBase] == undefined) {\n              /* temp[scopeBase] = { ...perm };\r\n              temp[scopeBase]['permissions'] = []; */\n              temp[scopeBase] = this.childOnlyScopes(scopeBase, perm);\n            }\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] = this.getChildScopes({\n                \"permission\": Object.assign({}, perm),\n                \"tempScope\": `${scopeBase}.${scope[4]}`,\n                isLast: true\n              });\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'] = [];\n            } else {\n              old = temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]];\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] = {\n                action: old.action.split(',').length > perm.action.split(',').length ? old.action : perm.action,\n                implied: perm.implied,\n                permName: old.action.split(',').length > perm.action.split(',').length ? old.permName : perm.permName,\n                scopeDisplayName: perm.scopeDisplayName,\n                scopeId: perm.scopeId,\n                scopeName: perm.scopeName\n              };\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'] = old['permissions2'];\n              old = {};\n            }\n            break;\n          case 6:\n            if (temp[scopeBase] == undefined) {\n              //temp[scopeBase] = { ...perm };\n              temp[scopeBase] = this.childOnlyScopes(scopeBase, perm);\n              //temp[scopeBase]['permissions'] = [];\n            }\n\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] = this.getChildScopes({\n                \"permission\": Object.assign({}, perm),\n                \"tempScope\": `${scopeBase}.${scope[4]}`,\n                isLast: false\n              });\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'] = [];\n            } else {}\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]] = this.getChildScopes({\n                \"permission\": Object.assign({}, perm),\n                \"tempScope\": `${scopeBase}.${scope[4]}.${scope[5]}`,\n                isLast: true\n              });\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]]['permissions3'] = [];\n            } else {}\n            this.setWithExcessAccess(temp, scopeBase, scope, perm);\n            break;\n          case 7:\n            if (temp[scopeBase] == undefined) {\n              /* temp[scopeBase] = { ...perm };\r\n              temp[scopeBase]['permissions'] = []; */\n              temp[scopeBase] = this.childOnlyScopes(scopeBase, perm);\n            } else {}\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]] = this.getChildScopes({\n                \"permission\": Object.assign({}, perm),\n                \"tempScope\": scopeBase + '.' + scope[4],\n                isLast: false\n              });\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'] = [];\n            } else {}\n            if (temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]] == undefined) {\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]] = this.getChildScopes({\n                \"permission\": Object.assign({}, perm),\n                \"tempScope\": `${scopeBase}.${scope[4]}.${scope[5]}`,\n                isLast: false\n              });\n              temp[scopeBase]['permissions'][scopeBase + '.' + scope[4]]['permissions2'][scopeBase + '.' + scope[4] + '.' + scope[5]]['permissions3'] = [];\n            } else {}\n            let level4 = scopeBase + '.' + scope[4];\n            let level5 = scopeBase + '.' + scope[4] + '.' + scope[5];\n            let level6 = scopeBase + '.' + scope[4] + '.' + scope[5] + '.' + scope[6];\n            if (temp[scopeBase]['permissions'][level4]['permissions2'][level5]['permissions3'][level6] == undefined) {\n              temp[scopeBase]['permissions'][level4]['permissions2'][level5]['permissions3'][level6] = this.getChildScopes({\n                \"permission\": Object.assign({}, perm),\n                \"tempScope\": level6,\n                isLast: true\n              });\n              temp[scopeBase]['permissions'][level4]['permissions2'][level5]['permissions3'][level6]['permissions4'] = [];\n            } else {}\n            this.setWithExcessAccess(temp, scopeBase, scope, perm);\n            break;\n        }\n      }\n      let temp3 = [];\n      let temp4 = [];\n      let temp5 = [];\n      for (let key in temp) {\n        if (Object.keys(temp[key].permissions).length != 0) {\n          for (let key2 in temp[key].permissions) {\n            if (Object.keys(temp[key].permissions[key2].permissions2).length != 0) {\n              for (let key3 in temp[key].permissions[key2].permissions2) {\n                if (Object.keys(temp[key].permissions[key2].permissions2[key3].permissions3).length != 0) {\n                  for (let key4 in temp[key].permissions[key2].permissions2[key3].permissions3) {\n                    temp5.push(temp[key].permissions[key2].permissions2[key3].permissions3[key4]);\n                  }\n                }\n                temp5 = this.sortByColumn(temp5, 'asc', 'scopeDisplayName');\n                temp[key].permissions[key2].permissions2[key3].permissions3 = temp5;\n                temp5 = [];\n                temp4.push(temp[key].permissions[key2].permissions2[key3]);\n              }\n            }\n            temp4 = this.sortByColumn(temp4, 'asc', 'scopeDisplayName');\n            temp[key].permissions[key2].permissions2 = temp4;\n            temp4 = [];\n            temp3.push(temp[key].permissions[key2]);\n          }\n        }\n        temp3 = this.sortByColumn(temp3, 'asc', 'scopeDisplayName');\n        temp[key].permissions = temp3;\n        temp2.push(temp[key]);\n        temp3 = [];\n      }\n      temp2 = this.sortByColumn(temp2, 'asc', 'scopeDisplayName');\n      return temp2;\n    }\n    setWithExcessAccess(temp, scopeBase, scope, perm) {\n      let objPath;\n      const level4 = scopeBase + '.' + scope[4];\n      const level5 = scopeBase + '.' + scope[4] + '.' + scope[5];\n      const level6 = scopeBase + '.' + scope[4] + '.' + scope[5] + '.' + scope[6];\n      if (perm.scopeName == temp[scopeBase][\"scopeName\"]) {\n        objPath = temp[scopeBase];\n      } else if (perm.scopeName == temp[scopeBase]['permissions'][level4][\"scopeName\"]) {\n        objPath = temp[scopeBase]['permissions'][level4];\n      } else if (perm.scopeName == temp[scopeBase]['permissions'][level4]['permissions2'][level5][\"scopeName\"]) {\n        objPath = temp[scopeBase]['permissions'][level4]['permissions2'][level5];\n      } else if (perm.scopeName == temp[scopeBase]['permissions'][level4]['permissions2'][level5]['permissions3'][level6][\"scopeName\"]) {\n        objPath = temp[scopeBase]['permissions'][level4]['permissions2'][level5]['permissions3'][level6];\n      }\n      objPath[\"action\"] = objPath.action.split(',').length > perm.action.split(',').length ? objPath.action : perm.action;\n      objPath[\"permName\"] = objPath.action.split(',').length > perm.action.split(',').length ? objPath.permName : perm.permName;\n    }\n    childOnlyScopes(scope, permission) {\n      let obj = Object.assign({}, permission);\n      obj.action = \"\";\n      obj.permName = scope + ':';\n      obj.scopeName = scope;\n      obj.scopeDisplayName = permission.scopeDisplayName;\n      /* CCL-37865 */\n      // const elemName = scope.split('.').reverse()[0];\n      // obj.scopeDisplayName = this.scopeMapping.hasOwnProperty(elemName) ?\n      //   this.scopeMapping[elemName] :\n      //   elemName.replace(/\\w\\S*/g, m => m.charAt(0).toUpperCase() + m.substr(1).toLowerCase())\n      obj.permissions = [];\n      const childScopes = permission.scopeName.replace(`${scope}.`, '').split('.');\n      let tempScope = scope,\n        scopePath = '';\n      childScopes.forEach((cScope, i) => {\n        let tempObj = {};\n        tempScope += `.${cScope}`;\n        const isLast = childScopes.length == i + 1;\n        tempObj.action = isLast ? permission.action : \"\";\n        tempObj.permName = isLast ? `${tempScope}:${permission.action}` : `${tempScope}:`;\n        tempObj.scopeName = tempScope;\n        /* CCL-37865 */\n        // tempObj.scopeDisplayName = this.scopeMapping.hasOwnProperty(cScope) ?\n        //   this.scopeMapping[cScope] :\n        //   cScope.replace(/\\w\\S*/g, m => m.charAt(0).toUpperCase() + m.substr(1).toLowerCase())\n        tempObj.scopeDisplayName = permission === null || permission === void 0 ? void 0 : permission.scopeDisplayName;\n        tempObj[`permissions${i + 2}`] = [];\n        scopePath += `${i ? '@!@' : ''}permissions${i ? i + 1 : ''}@!@${tempScope}`;\n        this.getValue(obj, scopePath.split('@!@'), tempObj);\n      });\n      return obj;\n    }\n    getChildScopes(param) {\n      let {\n        permission,\n        tempScope,\n        isLast = false\n      } = param;\n      let tempObj = {};\n      /* CCL-37865 */\n      // const cScope = tempScope.split('.').reverse()[0]; \n      tempObj.action = isLast ? permission.action : \"\";\n      tempObj.permName = isLast ? `${tempScope}:${permission.action}` : `${tempScope}:`;\n      tempObj.scopeName = tempScope;\n      tempObj.scopeDisplayName = permission.scopeDisplayName;\n      /* CCL-37865 */\n      // tempObj.scopeDisplayName = this.scopeMapping.hasOwnProperty(cScope) ? \n      //   this.scopeMapping[cScope] :\n      //   cScope.replace(/\\w\\S*/g, m => m.charAt(0).toUpperCase() + m.substr(1).toLowerCase())\n      return tempObj;\n      //this.getValue(mainObj, scopePath.split('@!@'), tempObj);\n    }\n\n    getValue(obj, keys, assignObj, i = 0) {\n      let currentObject = obj.hasOwnProperty(keys[i]) ? obj[keys[i]] : obj[keys[i]] = assignObj;\n      return i < keys.length - 1 ? this.getValue(currentObject, keys, assignObj, i + 1) : currentObject;\n    }\n    pageScrollTop() {\n      this.scrollTop.next();\n    }\n    closeAlert() {\n      this.closeAlerts.next();\n    }\n    openSuccessAlert(info) {\n      this.successAlert.next(info);\n    }\n    openErrorAlert(info) {\n      this.errorAlert.next(info);\n    }\n    pageErrorHandle(err) {\n      if (err.error != undefined && err.error != null && typeof err.error == 'string') {\n        // this.errorInfo = `${err.error}`;\n        if (this.IsJsonString(err.error)) {\n          let error = JSON.parse(err.error);\n          if (error.message) {\n            this.errorInfo = error.message;\n          } else if (error.errorMessage) {\n            this.errorInfo = error.errorMessage;\n          } else {\n            this.errorInfo = `${err.error}`;\n          }\n        } else {\n          this.errorInfo = `${err.error}`;\n        }\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.message != undefined && typeof err.error.message == 'string') {\n        this.errorInfo = `${err.error.message}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.errorDesc != undefined && typeof err.error.errorDesc == 'string') {\n        this.errorInfo = `${err.error.errorDesc}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.error != undefined && typeof err.error.error == 'string') {\n        this.errorInfo = `${err.error.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.error_code != undefined && typeof err.error.error_code == 'string') {\n        this.errorInfo = `${err.error.error_code}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'string') {\n        this.errorInfo = `${err.error.fault}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'object' && err.error.fault.faultstring != undefined && typeof err.error.fault.faultstring == 'string') {\n        this.errorInfo = `${err.error.fault.faultstring}`;\n      } else if (err.error && err.error.errorMessage) {\n        this.errorInfo = `${err.error.errorMessage}`;\n      } else if (err.error && err.error.response) {\n        this.errorInfo = `${err.error.response}`;\n      } else if (err.error && err.error.message) {\n        this.errorInfo = `${err.error.message}`;\n      } else if (err.status === 500) {\n        this.errorInfo = `Internal Server Error`;\n      } else if (err.statusText == 'Unknown Error' && err.status == 0) {\n        this.errorInfo = \"Unknown Error - Please refresh the page\";\n      } else if (err.status && err.status == 401) {\n        this.errorInfo = \"User Unauthorized\";\n      } else {\n        this.errorInfo = `${err.message}`;\n      }\n      let langfromapi = this.sso.getspecificlangliterals();\n      this.errorInfo = this.errorInfo != 'undefined' && this.errorInfo && langfromapi[this.errorInfo] ? langfromapi[this.errorInfo] : this.errorInfo;\n      return this.errorInfo != 'undefined' && this.errorInfo.length ? this.errorInfo : Object.values(this.flatten(err)).join(' - ');\n    }\n    traverseAndFlatten(currentNode, target, flattenedKey) {\n      for (var key in currentNode) {\n        if (currentNode.hasOwnProperty(key)) {\n          var newKey;\n          if (flattenedKey === undefined) {\n            newKey = key;\n          } else {\n            newKey = flattenedKey + '.' + key;\n          }\n          var value = currentNode[key];\n          if (typeof value === \"object\") {\n            this.traverseAndFlatten(value, target, newKey);\n          } else {\n            target[newKey] = value;\n          }\n        }\n      }\n    }\n    flatten(obj) {\n      let flattenedObject = {};\n      try {\n        this.traverseAndFlatten(obj, flattenedObject);\n      } catch (ex) {\n        flattenedObject = {};\n      }\n      return flattenedObject;\n    }\n    pageInvalidRqstErrorHandle(err) {\n      let errorResp = err.error;\n      let infoBody = '';\n      if (errorResp.hasOwnProperty('error_code')) {\n        infoBody = `${errorResp.error_code}`;\n      } else if (typeof errorResp.error == 'string') {\n        infoBody = `${errorResp.error}`;\n      } else if (err.status && err.status == 401) {\n        this.errorInfo = \"User Unauthorized\";\n      } else {\n        infoBody = `${err.message}`;\n      }\n      return infoBody != 'undefined' && infoBody.length ? infoBody : Object.values(this.flatten(err)).join(' - ');\n    }\n    //sort array of objects by comparaing object key values\n    sortByColumn(data, type, column, isNum) {\n      data.sort((a, b) => {\n        let nameA;\n        let nameB;\n        if (isNum) {\n          a[column] = a[column] ? parseInt(a[column]) : 0;\n          b[column] = b[column] ? parseInt(b[column]) : 0;\n          if (type == 'asc') {\n            return a[column] - b[column];\n          } else {\n            return b[column] - a[column];\n          }\n        } else {\n          nameA = a[column] ? a[column].toUpperCase() : '';\n          nameB = b[column] ? b[column].toUpperCase() : '';\n          if (type == 'asc') {\n            if (nameA < nameB) {\n              return -1;\n            }\n            if (nameA > nameB) {\n              return 1;\n            }\n          } else {\n            if (nameA > nameB) {\n              return -1;\n            }\n            if (nameA < nameB) {\n              return 1;\n            }\n          }\n        }\n        // names must be equal\n        return 0;\n      });\n      return data;\n    }\n    removeTableState(page, url) {\n      let MODULE = this.sso.getRedirectModule(url);\n      if (localStorage.getItem(`DataTables_${this.tableInfo[page].id}_/${MODULE}/flowAnalyze/${this.tableInfo[page].urlFromFC}`)) {\n        localStorage.removeItem(`DataTables_${this.tableInfo[page].id}_/${MODULE}/flowAnalyze/${this.tableInfo[page].urlFromFC}`);\n      }\n    }\n    IsJsonString(str) {\n      try {\n        JSON.parse(str);\n      } catch (e) {\n        return false;\n      }\n      return true;\n    }\n    initUpdateCronJob(updated) {\n      // ***** for live ***** //\n      if (!updated) {\n        if (this.date.getHours() < 9) {\n          this.date = new Date(this.date.setHours(9, 0, 0)); // for morning\n        } else if (this.date.getHours() >= 9 && this.date.getHours() < 21) {\n          this.date = new Date(this.date.setHours(21, 0, 0)); // for night\n        } else if (this.date.getHours() >= 21) {\n          var date = new Date();\n          date.setDate(date.getDate() + 1);\n          this.date = new Date(date.setHours(9, 0, 0)); // for next day morning\n        }\n      } else {\n        this.date = new Date(this.date.setHours(new Date().getHours(), new Date().getMinutes() + 30, new Date().getSeconds())); // add 5mins as per the button\n      }\n\n      console.log('this.date', this.date);\n      let self = this;\n      const job = new CronJob(this.date, function () {\n        self.http.get(`${environment.SUPPORT_URL}/gui/version`).subscribe(res => {\n          if (res.version > environment.VERSION) {\n            self.isNewVersionAvailable.next({\n              isUpdateAvailable: true,\n              isUpdateAnimation: true\n            });\n            window.scroll({\n              top: 0,\n              left: 0,\n              behavior: 'smooth'\n            });\n          }\n        });\n      });\n      job.start();\n    }\n  }\n  CommonService.ɵfac = function CommonService_Factory(t) {\n    return new (t || CommonService)(i0.ɵɵinject(i1.SsoAuthService), i0.ɵɵinject(i2.HttpClient));\n  };\n  CommonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommonService,\n    factory: CommonService.ɵfac,\n    providedIn: 'root'\n  });\n  return CommonService;\n})();","map":null,"metadata":{},"sourceType":"module"}