{"ast":null,"code":"'use strict';\n\nvar reduce = require('min-dash').reduce,\n  keys = require('min-dash').keys,\n  forEach = require('min-dash').forEach,\n  is = require('../../../util/ModelUtil').is,\n  getBusinessObject = require('../../../util/ModelUtil').getBusinessObject;\nfunction UpdateModdlePropertiesHandler(elementRegistry) {\n  this._elementRegistry = elementRegistry;\n}\nUpdateModdlePropertiesHandler.$inject = ['elementRegistry'];\nmodule.exports = UpdateModdlePropertiesHandler;\nUpdateModdlePropertiesHandler.prototype.execute = function (context) {\n  var element = context.element,\n    moddleElement = context.moddleElement,\n    properties = context.properties;\n  if (!moddleElement) {\n    throw new Error('<moddleElement> required');\n  }\n  var changed = context.changed || this.getVisualReferences(moddleElement).concat(element);\n  var oldProperties = context.oldProperties || getModdleProperties(moddleElement, keys(properties));\n  setModdleProperties(moddleElement, properties);\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n  return changed;\n};\nUpdateModdlePropertiesHandler.prototype.revert = function (context) {\n  var oldProperties = context.oldProperties,\n    moddleElement = context.moddleElement,\n    changed = context.changed;\n  setModdleProperties(moddleElement, oldProperties);\n  return changed;\n};\n\n/**\n * Return visual references of given moddle element within the diagram.\n *\n * @param {ModdleElement} moddleElement\n *\n * @return {Array<djs.model.Element>}\n */\nUpdateModdlePropertiesHandler.prototype.getVisualReferences = function (moddleElement) {\n  var elementRegistry = this._elementRegistry;\n  if (is(moddleElement, 'bpmn:DataObject')) {\n    return getAllDataObjectReferences(moddleElement, elementRegistry);\n  }\n  return [];\n};\n\n// helpers /////////////////\n\nfunction getModdleProperties(moddleElement, propertyNames) {\n  return reduce(propertyNames, function (result, key) {\n    result[key] = moddleElement.get(key);\n    return result;\n  }, {});\n}\nfunction setModdleProperties(moddleElement, properties) {\n  forEach(properties, function (value, key) {\n    moddleElement.set(key, value);\n  });\n}\nfunction getAllDataObjectReferences(dataObject, elementRegistry) {\n  return elementRegistry.filter(function (element) {\n    return is(element, 'bpmn:DataObjectReference') && getBusinessObject(element).dataObjectRef === dataObject;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}