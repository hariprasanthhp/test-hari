{"ast":null,"code":"import { RouterModule } from '@angular/router';\nimport { NetworkComponent } from './network.component';\nimport { RadiusServersComponent } from './radius-servers/radius-servers.component';\nimport { StaticSubnetsComponent } from './static-subnets/static-subnets.component';\nimport { CombinedSubnetsComponent } from './combined-subnets/combined-subnets.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst routes = [{\n  path: '',\n  component: NetworkComponent,\n  //canActivate: [AuthGuard],\n  children: [{\n    path: \"devices\",\n    loadChildren: () => import('./devices/devices.module').then(m => m.DevicesModule)\n  },\n  // { path: 'devices', component: DevicesComponent, data: { title: 'Calix Cloud - Flow Configuration' }, },\n  //{ path: 'subnets', component: SubnetsComponent, data: { title: 'Calix Cloud - Flow Configuration' }, },\n  {\n    path: 'subnets',\n    component: CombinedSubnetsComponent,\n    data: {\n      title: 'Calix Cloud - Flow Configuration'\n    }\n  }, {\n    path: 'combinedSubnets',\n    component: CombinedSubnetsComponent,\n    data: {\n      title: 'Calix Cloud - Flow Configuration'\n    }\n  }, {\n    path: 'static_subnets',\n    component: StaticSubnetsComponent,\n    data: {\n      title: 'Calix Cloud - Flow Configuration'\n    }\n  }, {\n    path: 'radius-servers',\n    component: RadiusServersComponent,\n    data: {\n      title: 'Calix Cloud - Flow Configuration'\n    }\n  }, {\n    path: '',\n    redirectTo: 'devices',\n    pathMatch: 'full',\n    data: {\n      title: 'Calix Cloud - Flow Configuration'\n    }\n  }]\n}];\nexport let NetworkRoutingModule = /*#__PURE__*/(() => {\n  class NetworkRoutingModule {}\n  NetworkRoutingModule.ɵfac = function NetworkRoutingModule_Factory(t) {\n    return new (t || NetworkRoutingModule)();\n  };\n  NetworkRoutingModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: NetworkRoutingModule\n  });\n  NetworkRoutingModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[RouterModule.forChild(routes)], RouterModule]\n  });\n  return NetworkRoutingModule;\n})();","map":null,"metadata":{},"sourceType":"module"}