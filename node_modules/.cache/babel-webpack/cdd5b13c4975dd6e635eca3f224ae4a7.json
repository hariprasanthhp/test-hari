{"ast":null,"code":"import { Subject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { MultiSelectComponent } from 'src/app/shared/components/multi-select/multi-select.component';\nimport { WindowRefService } from 'src/app/shared/services/window-ref.service';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/cco/issues/service/issue.service\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"src/app/sys-admin/services/common.service\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"src/app/shared/services/sso-auth.service\";\nimport * as i8 from \"@angular/platform-browser\";\nimport * as i9 from \"../services/home-geomap.service\";\nimport * as i10 from \"../../shared/services/websocket.service\";\nimport * as i11 from \"src/app-services/routing.services\";\nimport * as i12 from \"@angular/common\";\nimport * as i13 from \"@ng-select/ng-select\";\nimport * as i14 from \"../../../shared/components/multi-select/multi-select.component\";\nimport * as i15 from \"./system-list/system-list.component\";\nconst _c0 = [\"systemInfo\"];\nfunction ActiveDevicesGeomapComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.language[\"Access denied due to RBAC. Please consult your Organization Administrator for access.\"], \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵelementStart(2, \"span\", 20);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 21);\n    i0.ɵɵelementStart(5, \"span\", 22);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"Active Systems\"]);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.totalActiveSystems == null ? null : ctx_r1.totalActiveSystems.toLocaleString());\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_8_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵelementStart(1, \"div\", 53);\n    i0.ɵɵelementStart(2, \"span\", 54);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"span\", 55);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_ng_template_8_div_0_Template_span_click_4_listener() {\n      i0.ɵɵrestoreView(_r28);\n      i0.ɵɵnextContext(2);\n      const _r10 = i0.ɵɵreference(7);\n      return _r10.handleClearClick();\n    });\n    i0.ɵɵtext(5, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r24.language[\"all\"], \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_8_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 53);\n    i0.ɵɵelementStart(1, \"span\", 57);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\", 55);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_ng_template_8_div_1_div_1_Template_span_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r32);\n      const item_r30 = restoredCtx.$implicit;\n      const clear_r23 = i0.ɵɵnextContext(2).clear;\n      return clear_r23(item_r30);\n    });\n    i0.ɵɵtext(4, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r30 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", item_r30.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r30.name ? item_r30.name : item_r30, \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_8_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtemplate(1, ActiveDevicesGeomapComponent_section_7_ng_template_8_div_1_div_1_Template, 5, 2, \"div\", 56);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const items_r21 = i0.ɵɵnextContext().items;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", items_r21);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_8_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 53);\n    i0.ɵɵelementStart(1, \"span\", 57);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\", 55);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_ng_template_8_div_2_div_1_Template_span_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const item_r36 = restoredCtx.$implicit;\n      const clear_r23 = i0.ɵɵnextContext(2).clear;\n      return clear_r23(item_r36);\n    });\n    i0.ɵɵtext(4, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r36 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", item_r36.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r36.name ? item_r36.name : item_r36, \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_8_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtemplate(1, ActiveDevicesGeomapComponent_section_7_ng_template_8_div_2_div_1_Template, 5, 2, \"div\", 56);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const items_r21 = i0.ɵɵnextContext().items;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", items_r21);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ActiveDevicesGeomapComponent_section_7_ng_template_8_div_0_Template, 6, 1, \"div\", 51);\n    i0.ɵɵtemplate(1, ActiveDevicesGeomapComponent_section_7_ng_template_8_div_1_Template, 2, 1, \"div\", 51);\n    i0.ɵɵtemplate(2, ActiveDevicesGeomapComponent_section_7_ng_template_8_div_2_Template, 2, 1, \"div\", 51);\n  }\n  if (rf & 2) {\n    const items_r21 = ctx.items;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", items_r21.length == (ctx_r11.regionsDataArray == null ? null : ctx_r11.regionsDataArray.length));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", items_r21.length == 1 && items_r21.length !== (ctx_r11.regionsDataArray == null ? null : ctx_r11.regionsDataArray.length));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", items_r21.length > 1 && items_r21.length !== (ctx_r11.regionsDataArray == null ? null : ctx_r11.regionsDataArray.length));\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 58);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r41 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r41.name ? item_r41.name : item_r41);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r41.name ? item_r41.name : item_r41);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_15_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r51 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵelementStart(1, \"div\", 53);\n    i0.ɵɵelementStart(2, \"span\", 54);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"span\", 55);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_ng_template_15_div_0_Template_span_click_4_listener($event) {\n      i0.ɵɵrestoreView(_r51);\n      i0.ɵɵnextContext(2);\n      const _r13 = i0.ɵɵreference(14);\n      const ctx_r50 = i0.ɵɵnextContext();\n      _r13.handleClearClick();\n      return ctx_r50.loadSystemValue($event);\n    });\n    i0.ɵɵtext(5, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r47 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r47.language[\"all\"], \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_15_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r55 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 53);\n    i0.ɵɵelementStart(1, \"span\", 57);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\", 55);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_ng_template_15_div_1_div_1_Template_span_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r55);\n      const item_r53 = restoredCtx.$implicit;\n      const clear_r46 = i0.ɵɵnextContext(2).clear;\n      return clear_r46(item_r53);\n    });\n    i0.ɵɵtext(4, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r53 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", item_r53.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r53.name ? item_r53.name : item_r53, \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_15_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtemplate(1, ActiveDevicesGeomapComponent_section_7_ng_template_15_div_1_div_1_Template, 5, 2, \"div\", 56);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const items_r44 = i0.ɵɵnextContext().items;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", items_r44);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_15_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r61 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 53);\n    i0.ɵɵelementStart(1, \"span\", 57);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\", 55);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_ng_template_15_div_2_div_1_Template_span_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r61);\n      const item_r59 = restoredCtx.$implicit;\n      const clear_r46 = i0.ɵɵnextContext(2).clear;\n      return clear_r46(item_r59);\n    });\n    i0.ɵɵtext(4, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r59 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", item_r59.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r59.name ? item_r59.name : item_r59, \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_15_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtemplate(1, ActiveDevicesGeomapComponent_section_7_ng_template_15_div_2_div_1_Template, 5, 2, \"div\", 56);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const items_r44 = i0.ɵɵnextContext().items;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", items_r44);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ActiveDevicesGeomapComponent_section_7_ng_template_15_div_0_Template, 6, 1, \"div\", 51);\n    i0.ɵɵtemplate(1, ActiveDevicesGeomapComponent_section_7_ng_template_15_div_1_Template, 2, 1, \"div\", 51);\n    i0.ɵɵtemplate(2, ActiveDevicesGeomapComponent_section_7_ng_template_15_div_2_Template, 2, 1, \"div\", 51);\n  }\n  if (rf & 2) {\n    const items_r44 = ctx.items;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", items_r44.length == (ctx_r14.locationDataArray == null ? null : ctx_r14.locationDataArray.length));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", items_r44.length == 1 && items_r44.length !== (ctx_r14.locationDataArray == null ? null : ctx_r14.locationDataArray.length));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", items_r44.length > 1 && items_r44.length !== (ctx_r14.locationDataArray == null ? null : ctx_r14.locationDataArray.length));\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 58);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r64 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r64.name ? item_r64.name : item_r64);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r64.name ? item_r64.name : item_r64);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_22_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r74 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵelementStart(1, \"div\", 53);\n    i0.ɵɵelementStart(2, \"span\", 54);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"span\", 55);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_ng_template_22_div_0_Template_span_click_4_listener($event) {\n      i0.ɵɵrestoreView(_r74);\n      i0.ɵɵnextContext(2);\n      const _r16 = i0.ɵɵreference(21);\n      const ctx_r73 = i0.ɵɵnextContext();\n      _r16.handleClearClick();\n      return ctx_r73.validateSystem($event);\n    });\n    i0.ɵɵtext(5, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r70 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r70.language[\"all\"], \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_22_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r78 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 53);\n    i0.ɵɵelementStart(1, \"span\", 57);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\", 55);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_ng_template_22_div_1_div_1_Template_span_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r78);\n      const item_r76 = restoredCtx.$implicit;\n      const clear_r69 = i0.ɵɵnextContext(2).clear;\n      return clear_r69(item_r76);\n    });\n    i0.ɵɵtext(4, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r76 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", item_r76.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r76.name ? item_r76.name : item_r76, \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_22_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtemplate(1, ActiveDevicesGeomapComponent_section_7_ng_template_22_div_1_div_1_Template, 5, 2, \"div\", 56);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const items_r67 = i0.ɵɵnextContext().items;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", items_r67);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_22_div_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r84 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 53);\n    i0.ɵɵelementStart(1, \"span\", 57);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\", 55);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_ng_template_22_div_2_div_1_Template_span_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r84);\n      const item_r82 = restoredCtx.$implicit;\n      const clear_r69 = i0.ɵɵnextContext(2).clear;\n      return clear_r69(item_r82);\n    });\n    i0.ɵɵtext(4, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r82 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", item_r82.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r82.name ? item_r82.name : item_r82, \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_22_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵtemplate(1, ActiveDevicesGeomapComponent_section_7_ng_template_22_div_2_div_1_Template, 5, 2, \"div\", 56);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const items_r67 = i0.ɵɵnextContext().items;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", items_r67);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ActiveDevicesGeomapComponent_section_7_ng_template_22_div_0_Template, 6, 1, \"div\", 51);\n    i0.ɵɵtemplate(1, ActiveDevicesGeomapComponent_section_7_ng_template_22_div_1_Template, 2, 1, \"div\", 51);\n    i0.ɵɵtemplate(2, ActiveDevicesGeomapComponent_section_7_ng_template_22_div_2_Template, 2, 1, \"div\", 51);\n  }\n  if (rf & 2) {\n    const items_r67 = ctx.items;\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", items_r67.length == (ctx_r17.systemDataArray == null ? null : ctx_r17.systemDataArray.length));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", items_r67.length == 1 && items_r67.length !== (ctx_r17.systemDataArray == null ? null : ctx_r17.systemDataArray.length));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", items_r67.length > 1 && items_r67.length !== (ctx_r17.systemDataArray == null ? null : ctx_r17.systemDataArray.length));\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_ng_template_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 58);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r87 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r87.name ? item_r87.name : item_r87);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r87.name ? item_r87.name : item_r87);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r91 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ng-select\", 59);\n    i0.ɵɵlistener(\"change\", function ActiveDevicesGeomapComponent_section_7_div_42_Template_ng_select_change_3_listener($event) {\n      i0.ɵɵrestoreView(_r91);\n      const ctx_r90 = i0.ɵɵnextContext(2);\n      return ctx_r90.onSelectVendor($event);\n    })(\"remove\", function ActiveDevicesGeomapComponent_section_7_div_42_Template_ng_select_remove_3_listener($event) {\n      i0.ɵɵrestoreView(_r91);\n      const ctx_r92 = i0.ɵɵnextContext(2);\n      return ctx_r92.loadModelValues($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r19.language[\"Vendor ID\"] || \"Vendor ID\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r19.language[\"Vendor ID\"] || \"Vendor ID\");\n    i0.ɵɵproperty(\"items\", ctx_r19.vendorNames)(\"clearable\", false)(\"searchable\", false);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_div_43_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 63);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r93 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r93.language[\"Invalid FSAN\"]);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r95 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 60);\n    i0.ɵɵelementStart(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"input\", 61);\n    i0.ɵɵlistener(\"keypress\", function ActiveDevicesGeomapComponent_section_7_div_43_Template_input_keypress_3_listener($event) {\n      i0.ɵɵrestoreView(_r95);\n      const ctx_r94 = i0.ɵɵnextContext(2);\n      return ctx_r94.removespecialcharacter($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, ActiveDevicesGeomapComponent_section_7_div_43_p_4_Template, 2, 1, \"p\", 62);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r20.language[\"FSAN\"], \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r20.language[\"FSAN\"]);\n    i0.ɵɵproperty(\"disabled\", ctx_r20.tempSelectedAlertType == \"Cloud Connectivity\" || ctx_r20.tempSelectedAlertType == \"Transform Alarms\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r20.fsanvalid);\n  }\n}\nfunction ActiveDevicesGeomapComponent_section_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r97 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 23);\n    i0.ɵɵelementStart(1, \"div\", 24);\n    i0.ɵɵelementStart(2, \"div\", 25);\n    i0.ɵɵelementStart(3, \"div\", 26);\n    i0.ɵɵelementStart(4, \"label\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"ng-select\", 27, 28);\n    i0.ɵɵlistener(\"add\", function ActiveDevicesGeomapComponent_section_7_Template_ng_select_add_6_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r96 = i0.ɵɵnextContext();\n      return ctx_r96.validateRegion($event);\n    })(\"remove\", function ActiveDevicesGeomapComponent_section_7_Template_ng_select_remove_6_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r98 = i0.ɵɵnextContext();\n      return ctx_r98.loadLocationValue($event);\n    });\n    i0.ɵɵtemplate(8, ActiveDevicesGeomapComponent_section_7_ng_template_8_Template, 3, 3, \"ng-template\", 29);\n    i0.ɵɵtemplate(9, ActiveDevicesGeomapComponent_section_7_ng_template_9_Template, 2, 2, \"ng-template\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 31);\n    i0.ɵɵelementStart(11, \"label\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"ng-select\", 32, 33);\n    i0.ɵɵlistener(\"add\", function ActiveDevicesGeomapComponent_section_7_Template_ng_select_add_13_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r99 = i0.ɵɵnextContext();\n      return ctx_r99.validateLocation($event);\n    })(\"remove\", function ActiveDevicesGeomapComponent_section_7_Template_ng_select_remove_13_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r100 = i0.ɵɵnextContext();\n      return ctx_r100.loadSystemValue($event);\n    });\n    i0.ɵɵtemplate(15, ActiveDevicesGeomapComponent_section_7_ng_template_15_Template, 3, 3, \"ng-template\", 29);\n    i0.ɵɵtemplate(16, ActiveDevicesGeomapComponent_section_7_ng_template_16_Template, 2, 2, \"ng-template\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 34);\n    i0.ɵɵelementStart(18, \"label\");\n    i0.ɵɵtext(19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"ng-select\", 35, 36);\n    i0.ɵɵlistener(\"change\", function ActiveDevicesGeomapComponent_section_7_Template_ng_select_change_20_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r101 = i0.ɵɵnextContext();\n      return ctx_r101.selectSystem($event);\n    })(\"add\", function ActiveDevicesGeomapComponent_section_7_Template_ng_select_add_20_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r102 = i0.ɵɵnextContext();\n      return ctx_r102.validateSystem($event);\n    })(\"remove\", function ActiveDevicesGeomapComponent_section_7_Template_ng_select_remove_20_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r103 = i0.ɵɵnextContext();\n      return ctx_r103.validateSystem($event);\n    });\n    i0.ɵɵtemplate(22, ActiveDevicesGeomapComponent_section_7_ng_template_22_Template, 3, 3, \"ng-template\", 29);\n    i0.ɵɵtemplate(23, ActiveDevicesGeomapComponent_section_7_ng_template_23_Template, 2, 2, \"ng-template\", 30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"div\", 37);\n    i0.ɵɵelementStart(25, \"label\");\n    i0.ɵɵtext(26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"ng-select\", 38);\n    i0.ɵɵlistener(\"change\", function ActiveDevicesGeomapComponent_section_7_Template_ng_select_change_27_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r104 = i0.ɵɵnextContext();\n      return ctx_r104.onAlarmGroupChange($event, \"docChange\");\n    });\n    i0.ɵɵelementStart(28, \"ng-option\", 39);\n    i0.ɵɵtext(29);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"ng-option\", 40);\n    i0.ɵɵtext(31, \"ONT\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(32, \"ng-option\", 41);\n    i0.ɵɵtext(33, \"OLT\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(34, \"div\", 42);\n    i0.ɵɵelementStart(35, \"label\");\n    i0.ɵɵtext(36, \"Alert Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(37, \"ng-select\", 43);\n    i0.ɵɵlistener(\"change\", function ActiveDevicesGeomapComponent_section_7_Template_ng_select_change_37_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r105 = i0.ɵɵnextContext();\n      return ctx_r105.onSelectAlertTypes($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(38, \"div\", 37);\n    i0.ɵɵelementStart(39, \"label\");\n    i0.ɵɵtext(40);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(41, \"multi-select-dropdown\", 44);\n    i0.ɵɵlistener(\"cSelectChange\", function ActiveDevicesGeomapComponent_section_7_Template_multi_select_dropdown_cSelectChange_41_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r106 = i0.ɵɵnextContext();\n      return ctx_r106.setModelNames($event);\n    })(\"cBlurChange\", function ActiveDevicesGeomapComponent_section_7_Template_multi_select_dropdown_cBlurChange_41_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r107 = i0.ɵɵnextContext();\n      return ctx_r107.setModelNamesOnBlur($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(42, ActiveDevicesGeomapComponent_section_7_div_42_Template, 4, 5, \"div\", 45);\n    i0.ɵɵtemplate(43, ActiveDevicesGeomapComponent_section_7_div_43_Template, 5, 4, \"div\", 46);\n    i0.ɵɵelementStart(44, \"div\", 47);\n    i0.ɵɵelementStart(45, \"div\", 48);\n    i0.ɵɵelementStart(46, \"button\", 49);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_Template_button_click_46_listener() {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r108 = i0.ɵɵnextContext();\n      return ctx_r108.generateParams();\n    });\n    i0.ɵɵelementStart(47, \"span\");\n    i0.ɵɵtext(48);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(49, \"button\", 50);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_7_Template_button_click_49_listener() {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r109 = i0.ɵɵnextContext();\n      return ctx_r109.clearFilter();\n    });\n    i0.ɵɵelementStart(50, \"span\");\n    i0.ɵɵtext(51);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.language[\"Region\"], \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language.region);\n    i0.ɵɵproperty(\"multiple\", true)(\"items\", ctx_r2.regionsDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.language[\"Location\"], \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language.Location);\n    i0.ɵɵproperty(\"multiple\", true)(\"items\", ctx_r2.locationDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.language[\"System\"], \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language.System);\n    i0.ɵɵproperty(\"multiple\", true)(\"items\", ctx_r2.systemDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.language[\"System Type\"] || \"System Type\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"searchable\", false)(\"multiple\", false)(\"clearable\", false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.language.All);\n    i0.ɵɵadvance(8);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language[\"Alert Type\"] || \"Alert Type\");\n    i0.ɵɵproperty(\"items\", ctx_r2.alertTypes)(\"clearable\", false)(\"searchable\", false);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.language[\"Model_Name\"] || \"Model_Name\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"cItems\", ctx_r2.modelNames)(\"cSelectedItems\", ctx_r2.filtersForm == null ? null : ctx_r2.filtersForm.controls[\"modelNames\"] == null ? null : ctx_r2.filtersForm.controls[\"modelNames\"].value)(\"cBindValue\", \"value\")(\"cBindLabel\", \"label\")(\"cClearable\", false)(\"cSearchable\", true)(\"cName\", \"Models\")(\"cShowCountOfItems\", ctx_r2.showCountOfItems)(\"cPlaceHolder\", \"Model_Name\")(\"cShowSelectAll\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showFSAN);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showFSAN);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r2.language[\"apply\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"apply\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r2.language[\"TClearFilter\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"TClearFilter\"]);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"cursornallow\": a0\n  };\n};\nconst _c2 = function (a0) {\n  return {\n    \"diable-div\": a0\n  };\n};\nfunction ActiveDevicesGeomapComponent_section_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r111 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 4);\n    i0.ɵɵelementStart(1, \"div\", 64);\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵelementStart(3, \"div\", 65);\n    i0.ɵɵelementStart(4, \"div\", 66);\n    i0.ɵɵelementStart(5, \"div\", 67);\n    i0.ɵɵelementStart(6, \"label\", 68);\n    i0.ɵɵelement(7, \"input\", 69);\n    i0.ɵɵelementStart(8, \"span\");\n    i0.ɵɵelement(9, \"small\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"label\", 70);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 71);\n    i0.ɵɵelementStart(13, \"button\", 72);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_8_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r111);\n      const ctx_r110 = i0.ɵɵnextContext();\n      return ctx_r110.refreshGeomap();\n    });\n    i0.ɵɵelement(14, \"img\", 73);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 74);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_section_8_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r111);\n      const ctx_r112 = i0.ɵɵnextContext();\n      return ctx_r112.gotoRealtime();\n    });\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c1, ctx_r3.selectedAlertTypes != \"All Alerts\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c2, ctx_r3.selectedAlertTypes != \"All Alerts\"));\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r3.language[\"Hide Healthy Systems\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r3.language.Refresh);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r3.selectedAlertTypes == \"All Alerts\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.selectedAlertTypes + \" View\", \" \");\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 75);\n    i0.ɵɵelementStart(1, \"div\", 76);\n    i0.ɵɵelementStart(2, \"div\", 77);\n    i0.ɵɵelementStart(3, \"div\", 78);\n    i0.ɵɵelementStart(4, \"span\", 79);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r4.language.Loading);\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r114 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 80);\n    i0.ɵɵelementStart(1, \"span\", 81);\n    i0.ɵɵelement(2, \"img\", 82);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 83);\n    i0.ɵɵlistener(\"click\", function ActiveDevicesGeomapComponent_div_10_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r114);\n      const ctx_r113 = i0.ɵɵnextContext();\n      return ctx_r113.closeAlert();\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 84);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r5.errorInfo, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 85);\n    i0.ɵɵelementStart(1, \"table\");\n    i0.ɵɵelementStart(2, \"tbody\");\n    i0.ɵɵelementStart(3, \"tr\");\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵelement(5, \"img\", 86);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵelement(9, \"span\", 87);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"tr\");\n    i0.ɵɵelementStart(13, \"td\");\n    i0.ɵɵelement(14, \"img\", 88);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"td\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"td\");\n    i0.ɵɵelement(18, \"span\", 89);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"td\");\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"tr\");\n    i0.ɵɵelement(22, \"td\");\n    i0.ɵɵelement(23, \"td\");\n    i0.ɵɵelementStart(24, \"td\");\n    i0.ɵɵelement(25, \"span\", 90);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"td\");\n    i0.ɵɵtext(27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"tr\");\n    i0.ɵɵelement(29, \"td\");\n    i0.ɵɵelement(30, \"td\");\n    i0.ɵɵelementStart(31, \"td\");\n    i0.ɵɵelement(32, \"span\", 91);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(33, \"td\");\n    i0.ɵɵtext(34);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(35, \"tr\");\n    i0.ɵɵelement(36, \"td\");\n    i0.ɵɵelement(37, \"td\");\n    i0.ɵɵelementStart(38, \"td\");\n    i0.ɵɵelement(39, \"span\", 92);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(40, \"td\");\n    i0.ɵɵtext(41);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(42, \"tr\");\n    i0.ɵɵelement(43, \"td\");\n    i0.ɵɵelement(44, \"td\");\n    i0.ɵɵelementStart(45, \"td\");\n    i0.ɵɵelement(46, \"span\", 93);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(47, \"td\");\n    i0.ɵɵtext(48);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r6.language[\"ONT\"]);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r6.language[\"critical\"], \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r6.language[\"OLT\"]);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r6.language[\"major\"], \" \");\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r6.language[\"minor\"]);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r6.language[\"No alarms\"]);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r6.language[\"System aggregation\"]);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r6.language[\"System colocation\"]);\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_15_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 102);\n    i0.ɵɵelementStart(1, \"div\", 105);\n    i0.ɵɵelementStart(2, \"div\", 106);\n    i0.ɵɵelementStart(3, \"div\", 107);\n    i0.ɵɵelement(4, \"img\", 108);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 109);\n    i0.ɵɵelementStart(6, \"p\", 110);\n    i0.ɵɵtext(7, \"Service Disruption Detected\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"p\", 111);\n    i0.ɵɵtext(9, \"Cause: \");\n    i0.ɵɵelementStart(10, \"a\", 112);\n    i0.ɵɵelementStart(11, \"span\", 113);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r115 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(12);\n    i0.ɵɵtextInterpolate(ctx_r115.systemInfoData[\"outageAlarmName\"]);\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_15_tr_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r116 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r116.language[\"Subscriber_Name\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r116.systemInfoData[\"subscriberName\"]);\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_15_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 114);\n    i0.ɵɵelementStart(1, \"span\", 20);\n    i0.ɵɵtext(2, \"System Alarms\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 21);\n    i0.ɵɵelementStart(4, \"span\", 22);\n    i0.ɵɵelementStart(5, \"a\", 115);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r117 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r117.systemInfoData[\"systemAlarmCount\"]);\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_15_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 114);\n    i0.ɵɵelementStart(1, \"span\", 20);\n    i0.ɵɵtext(2, \"Transform Alarms\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 21);\n    i0.ɵɵelementStart(4, \"span\", 22);\n    i0.ɵɵelementStart(5, \"a\", 116);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r118 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r118.systemInfoData[\"transformedAlarmCount\"]);\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_15_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 114);\n    i0.ɵɵelementStart(1, \"span\", 20);\n    i0.ɵɵtext(2, \"Health Alerts\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 21);\n    i0.ɵɵelementStart(4, \"span\", 22);\n    i0.ɵɵelementStart(5, \"a\", 117);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r119 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r119.systemInfoData[\"cloudHealthCount\"]);\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_15_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 114);\n    i0.ɵɵelementStart(1, \"span\", 20);\n    i0.ɵɵtext(2, \"Cloud Connectivity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 21);\n    i0.ɵɵelementStart(4, \"span\", 22);\n    i0.ɵɵelementStart(5, \"a\", 118);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r120 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r120.systemInfoData[\"cloudConnectivityCount\"]);\n  }\n}\nfunction ActiveDevicesGeomapComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 94);\n    i0.ɵɵelementStart(1, \"div\", 95);\n    i0.ɵɵelementStart(2, \"div\", 96);\n    i0.ɵɵelementStart(3, \"a\", 97);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵelementStart(6, \"div\", 4);\n    i0.ɵɵtemplate(7, ActiveDevicesGeomapComponent_div_15_div_7_Template, 13, 1, \"div\", 98);\n    i0.ɵɵelementStart(8, \"div\", 99);\n    i0.ɵɵelementStart(9, \"table\", 100);\n    i0.ɵɵelementStart(10, \"tbody\");\n    i0.ɵɵelementStart(11, \"tr\");\n    i0.ɵɵelementStart(12, \"td\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"tr\");\n    i0.ɵɵelementStart(17, \"td\");\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"td\");\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"tr\");\n    i0.ɵɵelementStart(22, \"td\");\n    i0.ɵɵtext(23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"td\");\n    i0.ɵɵtext(25);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(26, ActiveDevicesGeomapComponent_div_15_tr_26_Template, 5, 2, \"tr\", 101);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"div\", 102);\n    i0.ɵɵelementStart(28, \"div\", 103);\n    i0.ɵɵtemplate(29, ActiveDevicesGeomapComponent_div_15_div_29_Template, 7, 1, \"div\", 104);\n    i0.ɵɵtemplate(30, ActiveDevicesGeomapComponent_div_15_div_30_Template, 7, 1, \"div\", 104);\n    i0.ɵɵtemplate(31, ActiveDevicesGeomapComponent_div_15_div_31_Template, 7, 1, \"div\", 104);\n    i0.ɵɵtemplate(32, ActiveDevicesGeomapComponent_div_15_div_32_Template, 7, 1, \"div\", 104);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r8.systemInfoData[\"deviceName\"]);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.systemInfoData[\"outage\"] == \"True\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r8.language[\"Region/Location\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate((ctx_r8.systemInfoData[\"deviceRegion\"] && ctx_r8.systemInfoData[\"deviceRegion\"][\"region_name\"] ? ctx_r8.systemInfoData[\"deviceRegion\"][\"region_name\"] : \"-\") + \"/\" + (ctx_r8.systemInfoData[\"deviceLocation\"] && ctx_r8.systemInfoData[\"deviceLocation\"][\"networkgroup_name\"] ? ctx_r8.systemInfoData[\"deviceLocation\"][\"networkgroup_name\"] : \"-\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r8.language[\"System Type\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r8.systemInfoData[\"deviceType\"]);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r8.language[\"Model_Name\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r8.systemInfoData[\"deviceModel\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.systemInfoData[\"deviceType\"] == \"ONT\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.systemInfoData[\"systemAlarmCount\"] > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.systemInfoData[\"transformedAlarmCount\"] > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.systemInfoData[\"cloudHealthCount\"] > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.systemInfoData[\"cloudConnectivityCount\"] > 0);\n  }\n}\nfunction ActiveDevicesGeomapComponent_app_system_list_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r123 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-system-list\", 119, 120);\n    i0.ɵɵlistener(\"hideInfoBox\", function ActiveDevicesGeomapComponent_app_system_list_16_Template_app_system_list_hideInfoBox_0_listener($event) {\n      i0.ɵɵrestoreView(_r123);\n      const ctx_r122 = i0.ɵɵnextContext();\n      return ctx_r122.hideToolbox($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"systemInfoData\", ctx_r9.systemListData);\n  }\n}\nexport let ActiveDevicesGeomapComponent = /*#__PURE__*/(() => {\n  class ActiveDevicesGeomapComponent {\n    constructor(translateService, renderer, router, issueService, http, commonOrgService, fb, ssoService, titleService, homeGeomapService, websocketservice, routerService) {\n      var _a;\n      this.translateService = translateService;\n      this.renderer = renderer;\n      this.router = router;\n      this.issueService = issueService;\n      this.http = http;\n      this.commonOrgService = commonOrgService;\n      this.fb = fb;\n      this.ssoService = ssoService;\n      this.titleService = titleService;\n      this.homeGeomapService = homeGeomapService;\n      this.websocketservice = websocketservice;\n      this.routerService = routerService;\n      this.hasScopeAccess = false;\n      this.loading = true;\n      this.map = undefined;\n      this.mapData = [];\n      this.pins = [];\n      this.reStoreMapViewDetails = {\n        mapCenterBound: undefined,\n        mapWidthBound: undefined,\n        mapHeightBound: undefined,\n        mapZoom: undefined\n      };\n      this.locs = 0;\n      this.mapSet = false;\n      this.baseUrl = `${environment.API_BASE_URL}analytics-engine/`;\n      this.errorInfo = '';\n      this.ontInfoBox = [{\n        key: 'regionLocation',\n        name: 'Region/Location'\n      }, {\n        key: 'deviceName',\n        name: 'System Name',\n        hyperlink: true\n      }, {\n        key: 'deviceType',\n        name: 'System Type'\n      }, {\n        key: 'deviceModel',\n        name: 'Model_Name'\n      }, {\n        key: 'subscriberName',\n        name: 'Subscriber Name'\n      }, {\n        key: 'outage',\n        name: 'Internet Outage'\n      }, {\n        key: 'outageAlarmName',\n        name: 'Internet Outage Cause',\n        hyperlink: true\n      }];\n      this.oltInfoBox = [{\n        key: 'regionLocation',\n        name: 'Region/Location'\n      }, {\n        key: 'deviceName',\n        hyperlink: true,\n        name: 'System Name'\n      }, {\n        key: 'deviceType',\n        name: 'System Type'\n      }, {\n        key: 'deviceModel',\n        name: 'Model_Name'\n      }];\n      this.listInfoBox = [{\n        key: 'deviceName',\n        hyperlink: true,\n        name: 'System Name'\n      }, {\n        key: 'regionLocation',\n        name: 'Region/Location'\n      }, {\n        key: 'deviceType',\n        name: 'System Type'\n      }, {\n        key: 'deviceModel',\n        name: 'Model_Name'\n      }, {\n        key: 'systemAlarmCount',\n        name: 'System Alarms'\n      }, {\n        key: 'transformedAlarmCount',\n        name: 'Transform Alarms'\n      }, {\n        key: 'cloudHealthCount',\n        name: 'Health Alerts'\n      }, {\n        key: 'cloudConnectivityCount',\n        name: 'Cloud Connectivity'\n      }, {\n        key: 'serviceDisruption',\n        name: 'Service Disruption'\n      }, {\n        key: 'subscriberName',\n        name: 'Subscriber Name'\n      }\n      // { key: 'outage', name: 'Internet Outage' },\n      // { key: 'outageAlarmName', name: 'Internet Outage Cause' },\n      ];\n\n      this.canCall = true;\n      this.devicesIcons = {\n        circles: {\n          red: 'assets/images/geomap-icons/circle-solid-red.svg',\n          green: 'assets/images/geomap-icons/circle-solid-green.svg',\n          yellow: 'assets/images/geomap-icons/circle-solid-yellow.svg',\n          amber: 'assets/images/geomap-icons/circle-solid-amber.svg',\n          black: 'assets/images/geomap-icons/circle-solid-black.svg',\n          blue: 'assets/images/geomap-icons/circle-solid-blue.svg'\n        },\n        diamonds: {\n          red: 'assets/images/geomap-icons/diamond-solid-red.svg',\n          green: 'assets/images/geomap-icons/diamond-solid-green.svg',\n          yellow: 'assets/images/geomap-icons/diamond-solid-yellow.svg',\n          amber: 'assets/images/geomap-icons/diamond-solid-amber.svg',\n          black: 'assets/images/geomap-icons/diamond-solid-black.svg',\n          blue: 'assets/images/geomap-icons/diamond-solid-blue.svg'\n        },\n        squares: {\n          red: 'assets/images/geomap-icons/square-solid-red.svg',\n          green: 'assets/images/geomap-icons/square-solid-green.svg',\n          yellow: 'assets/images/geomap-icons/square-solid-yellow.svg',\n          amber: 'assets/images/geomap-icons/square-solid-amber.svg',\n          black: 'assets/images/geomap-icons/square-solid-black.svg',\n          blue: 'assets/images/geomap-icons/square-solid-blue.svg'\n        }\n      };\n      this.systemListData = {};\n      this.canShowSystemList = false;\n      this.canShowAlertTypeList = false;\n      this.enableClustering = false;\n      this.regionsDataArray = ['All'];\n      this.regionArray = ['All'];\n      this.locationDataArray = ['All'];\n      this.systemDataArray = ['All'];\n      this.filtersForm = this.fb.group({\n        region: [''],\n        alertType: 'ALL',\n        location: [''],\n        system: [''],\n        modelNames: [],\n        vendorId: 'All',\n        fsan_serialno: '',\n        device_type: 'ALL',\n        showAllSystems: true,\n        showOntNetOutage: false,\n        searchInputText: ''\n      });\n      this.fsanvalid = true;\n      this.showFSAN = true;\n      this.appliedParams = ['region', 'location', 'system', 'alertType', 'modelNames', 'vendorId', 'fsan_serialno', 'device_type'];\n      // backUpMapData: any = [];\n      this.previousOntOutage = false;\n      this.totalActiveSystems = 0;\n      this.modelNames = [];\n      this.vendorNames = ['All'];\n      // modelNames : any;\n      // searchInputText = '';\n      this.isDev = false;\n      this.isDevfunc = false;\n      this.showCountOfItems = false;\n      this.clusters = [];\n      this.showAlertTypeList = new Subject();\n      this.alertTypes = [{\n        id: 'ALL',\n        name: 'All'\n      }, {\n        id: 'SYSTEM',\n        name: 'System Alarms'\n      }, {\n        id: 'TRANSFORMED',\n        name: 'Transform Alarms',\n        disableFor: 'ONT'\n      }, {\n        id: 'HEALTH',\n        name: 'Health Alerts'\n      }, {\n        id: 'CONNECTIVITY',\n        name: 'Cloud Connectivity',\n        disableFor: 'ONT'\n      }, {\n        name: 'Service Disruptions',\n        id: 'DISRUPTION',\n        disableFor: 'OLT'\n      }];\n      this.selectedAlertTypes = 'All Alerts';\n      this.tempSelectedAlertType = 'All Alerts';\n      this.clickNoOfAlarms = [{\n        element: \"clickNoOfCloudConnectivityAlarms\",\n        count: \"cloudConnectivityCount\",\n        col: \"Cloud Connectivity\",\n        id: \"CONNECTIVITY\"\n      }, {\n        element: \"clickNoOfcloudHealthAlarms\",\n        count: \"cloudHealthCount\",\n        col: \"Health Alerts\",\n        id: \"HEALTH\"\n      }, {\n        element: \"clickNoOfSystemAlarms\",\n        count: \"systemAlarmCount\",\n        col: \"System Alarms\",\n        id: \"SYSTEM\"\n      }, {\n        element: \"clickNoOfTransformedAlarms\",\n        count: \"transformedAlarmCount\",\n        col: \"Transform Alarms\",\n        id: \"TRANSFORMED\"\n      }];\n      // let base = `${environment.API_BASE}`;\n      let host = window.location.host;\n      this.prefillingFilters = (_a = history === null || history === void 0 ? void 0 : history.state) === null || _a === void 0 ? void 0 : _a.filters;\n      // if (base.indexOf('/dev.api.calix.ai') > -1 || host.indexOf('localhost') > -1) {\n      //   this.isDev = true;\n      // } else this.isDev = false;\n    }\n\n    ngOnInit() {\n      var _a;\n      console.log(history.state);\n      this.isDev = `${WindowRefService.prototype.nativeWindow}`.includes('cloud-dev.calix.com') || `${WindowRefService.prototype.nativeWindow}`.includes('localhost') ? true : false;\n      this.isDevfunc = `${WindowRefService.prototype.nativeWindow}`.includes('cloud-devfunc.calix.com') || `${WindowRefService.prototype.nativeWindow}`.includes('localhost') ? true : false;\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.hideToolbox();\n        this.titleService.setTitle(`${this.language['Active GeoMap']} - ${this.language['Home']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      });\n      this.titleService.setTitle(`${this.language['Active GeoMap']} - ${this.language['Home']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      let scopes = this.ssoService.getScopes();\n      if (environment.VALIDATE_SCOPE) {\n        let validScopes = Object.keys(scopes);\n        if (validScopes) {\n          for (let i = 0; i < validScopes.length; i++) {\n            if (validScopes[i].indexOf('cloud.rbac.coc.insights.activdevicesgeomap') !== -1) {\n              this.hasScopeAccess = true;\n              break;\n            }\n          }\n        }\n      } else {\n        this.hasScopeAccess = true;\n      }\n      if (!this.hasScopeAccess) {\n        this.loading = false;\n        return;\n      } else {\n        this.ssoService.setPageAccess(true);\n      }\n      this.filtersForm.patchValue({\n        region: ['All'],\n        location: ['All'],\n        system: ['All'],\n        alertType: 'ALL',\n        modelNames: [],\n        vendorId: 'All',\n        fsan_serialno: '',\n        device_type: 'ALL',\n        showAllSystems: true,\n        showOntNetOutage: false,\n        searchInputText: ''\n      }, {\n        emitEvent: false,\n        onlySelf: true\n      });\n      if (this.prefillingFilters) {\n        this.filtersForm.patchValue(this.prefillingFilters, {\n          emitEvent: false,\n          onlySelf: true\n        });\n      }\n      this.filterSubscription = this.issueService.issuesFilterChanged$.subscribe(value => {\n        if (value) {\n          this.hideToolbox();\n          setTimeout(() => {\n            this.getData();\n          }, 300);\n        }\n      });\n      // setTimeout(() => {\n      // this.navigatedGeoFilters = this.prefillingFilters ? this.prefillingFilters : this.issueService?.getGeomapAppliedFilters();\n      this.navigatedGeoFilters = this.prefillingFilters;\n      if (this.routerService.previousUrl.includes('cco/system/cco-network-system/show-details') || this.routerService.previousUrl.includes('cco/services/subscribers/system/list') || this.routerService.previousUrl.includes('active-reports?geoMapIssue=true')) {\n        this.navigatedGeoFilters = (_a = this.issueService) === null || _a === void 0 ? void 0 : _a.getGeomapAppliedFilters();\n      }\n      if (this.navigatedGeoFilters && Object.keys(this.navigatedGeoFilters).length > 0 && (this.navigatedGeoFilters['fromIssuesGeoMap'] == 'olt' || this.navigatedGeoFilters['fromIssuesGeoMap'] == 'ont' || this.navigatedGeoFilters['alertType'] != '')) {\n        let alertType = this.navigatedGeoFilters ? this.alertTypes.find(el => el.id == this.navigatedGeoFilters.alertType) : undefined;\n        this.selectedAlertTypes = this.tempSelectedAlertType = alertType && alertType['name'] ? alertType['name'] == 'All' ? 'All Alerts' : alertType['name'] : 'All Alerts';\n        if (this.navigatedGeoFilters['reStoreMapViewDetails']) {\n          this.reStoreMapViewDetails = {\n            mapCenterBound: this.navigatedGeoFilters['reStoreMapViewDetails']['mapCenterBound'] || undefined,\n            mapWidthBound: this.navigatedGeoFilters['reStoreMapViewDetails']['mapWidthBound'] || undefined,\n            mapHeightBound: this.navigatedGeoFilters['reStoreMapViewDetails']['mapHeightBound'] || undefined,\n            mapZoom: this.navigatedGeoFilters['reStoreMapViewDetails']['mapZoom'] || undefined\n          };\n        }\n        this.filtersForm.patchValue({\n          fsan_serialno: this.navigatedGeoFilters['fsan_serialno'] ? this.navigatedGeoFilters['fsan_serialno'] : this.navigatedGeoFilters['fsan'] ? this.navigatedGeoFilters['fsan'] : '',\n          device_type: this.navigatedGeoFilters['device_type'] || 'ALL',\n          alertType: this.navigatedGeoFilters['alertType'] || 'ALL',\n          showAllSystems: this.navigatedGeoFilters && this.navigatedGeoFilters['showAllSystems'] == false ? false : true,\n          showOntNetOutage: this.navigatedGeoFilters['showOntNetOutage'] || false\n        }, {\n          emitEvent: false,\n          onlySelf: true\n        });\n      }\n      // this.issueService.setgeoMapHomeFilterParams(geoFilters, true);\n      // }, 2000);\n      this.regionsApiLoader();\n      // this.getModalVendorIds();\n    }\n\n    ngAfterViewInit() {\n      var _a, _b;\n      (_a = this.filtersForm.get('showAllSystems').valueChanges) === null || _a === void 0 ? void 0 : _a.subscribe(selectedValue => {\n        var _a, _b;\n        this.filtersForm.get('showAllSystems').setValue(selectedValue, {\n          emitEvent: false\n        });\n        let geoFilters = (_a = this.issueService) === null || _a === void 0 ? void 0 : _a.getGeomapAppliedFilters();\n        geoFilters['showAllSystems'] = selectedValue;\n        if (selectedValue) {\n          this.filtersForm.get('showOntNetOutage').setValue(!selectedValue, {\n            emitEvent: false\n          });\n          geoFilters['showOntNetOutage'] = !selectedValue;\n        }\n        (_b = this.issueService) === null || _b === void 0 ? void 0 : _b.setGeomapAppliedFilters(geoFilters);\n        this.getData();\n      });\n      (_b = this.filtersForm.get('showOntNetOutage').valueChanges) === null || _b === void 0 ? void 0 : _b.subscribe(selectedValue => {\n        var _a, _b;\n        this.filtersForm.get('showOntNetOutage').setValue(selectedValue, {\n          emitEvent: false\n        });\n        let geoFilters = (_a = this.issueService) === null || _a === void 0 ? void 0 : _a.getGeomapAppliedFilters();\n        geoFilters['showOntNetOutage'] = selectedValue;\n        if (selectedValue) {\n          this.filtersForm.get('showAllSystems').setValue(!selectedValue, {\n            emitEvent: false\n          });\n          geoFilters['showAllSystems'] = !selectedValue;\n        }\n        this.getData();\n        (_b = this.issueService) === null || _b === void 0 ? void 0 : _b.setGeomapAppliedFilters(geoFilters);\n      });\n      this.filtersForm.get('fsan_serialno').valueChanges.subscribe(fsan => {\n        if (!fsan) {\n          this.fsanvalid = true;\n        } else if (fsan.length == 12) {\n          this.fsanvalid = true;\n        }\n      });\n    }\n    getModalVendorIds() {\n      let url = `${this.baseUrl}modelNames-vendorIds`;\n      // let url = `assets/data/modelvendor.json`;\n      this.http.get(url).subscribe(data => {\n        var _a, _b, _c;\n        this.vendorModals = data;\n        let modifiedModel = [];\n        let modifiedVendor = [];\n        if ((_a = this.vendorModals) === null || _a === void 0 ? void 0 : _a.vendorIdToModelMap) {\n          for (let [key, value] of Object.entries((_b = this.vendorModals) === null || _b === void 0 ? void 0 : _b.vendorIdToModelMap)) {\n            if (value && value['length'] > 0 && Array.isArray(value)) {\n              value.forEach(el => {\n                let obj = {};\n                obj['vendor'] = key;\n                obj['model'] = obj['value'] = obj['label'] = obj['name'] = el;\n                modifiedModel.push(obj);\n              });\n            }\n            let vendorObj = {};\n            vendorObj['vendor'] = vendorObj['value'] = vendorObj['label'] = vendorObj['name'] = key;\n            vendorObj['models'] = value;\n            modifiedVendor.push(vendorObj);\n          }\n        }\n        //sort modifiedVendor\n        modifiedModel.sort((a, b) => (a.model || '').toString().localeCompare((b.model || '').toString(), 'en', {\n          numeric: false\n        }));\n        this.actualModelNames = [...modifiedModel];\n        this.modelNames = [...modifiedModel];\n        this.actualvendorNames = [...this.vendorNames, ...modifiedVendor];\n        this.vendorNames = [...this.vendorNames, ...modifiedVendor];\n        this.filtersForm.get('modelNames').setValue(this.actualModelNames.map(el => el.model));\n        // this.filtersForm.get('modelNames').setValue(['All']);\n        // let geoFilters = this.issueService?.getGeomapAppliedFilters();\n        if (this.navigatedGeoFilters && (this.navigatedGeoFilters['fromIssuesGeoMap'] == 'olt' || this.navigatedGeoFilters['fromIssuesGeoMap'] == 'ont' || this.navigatedGeoFilters['alertType'] != '')) {\n          this.filtersForm.get('modelNames').setValue(this.navigatedGeoFilters['modelNames'] || this.actualModelNames.map(el => el.model));\n          // this.filtersForm.get('modelNames').setValue(this.navigatedGeoFilters['modelNames'] || ['All']);\n          this.filtersForm.get('vendorId').setValue(this.navigatedGeoFilters['vendorId'] || 'All');\n          this.setModelNames({\n            selectedItems: this.navigatedGeoFilters['modelNames'] || this.actualModelNames.map(el => el.model)\n          });\n          this.onSelectVendor(this.navigatedGeoFilters['vendorId'] || 'All', this.navigatedGeoFilters['modelNames'] || this.actualModelNames.map(el => el.model));\n          this.onAlarmGroupChange((_c = this.navigatedGeoFilters['device_type']) === null || _c === void 0 ? void 0 : _c.toUpperCase());\n        }\n        setTimeout(() => {\n          this.generateParams();\n        }, 1000);\n      }, error => {\n        setTimeout(() => {\n          this.generateParams();\n        }, 1000);\n      });\n    }\n    regionsApiLoader() {\n      const seen = new Set();\n      this.regionSelected = 'All';\n      this.locationSelected = 'All';\n      this.systemSelected = 'All';\n      this.regionsSubject = this.issueService.getRegions().subscribe(res => {\n        if (res && res.length) {\n          res.forEach(element => {\n            if (this.findObjectsCountByValue(res, element.name) > 1) {\n              let fqn = '';\n              if (element.fqn) {\n                let tmp = element['fqn'].split(',');\n                if (tmp.length) {\n                  let deviceName = tmp[0];\n                  if (deviceName) {\n                    let arr = deviceName.split('=');\n                    if (arr.length && arr[1]) {\n                      fqn = arr[1];\n                    }\n                  }\n                }\n              }\n              element['tempName'] = `${element.name} ${fqn ? `(${fqn})` : ''}`;\n            } else {\n              element['tempName'] = element.name;\n            }\n          });\n          res.forEach(element => {\n            element['name'] = element.tempName;\n          });\n        }\n        res.sort();\n        this.regionsDataArray = [...this.regionsDataArray, ...res];\n        //geomap functionalities\n        //set params that are set in geomap after navigated from alarm pushpins\n        // if (this.issueService.isMap()) {\n        // let geoFilters = this.issueService?.getGeomapAppliedFilters();\n        if (this.navigatedGeoFilters && (this.navigatedGeoFilters['fromIssuesGeoMap'] == 'olt' || this.navigatedGeoFilters['fromIssuesGeoMap'] == 'ont' || this.navigatedGeoFilters['alertType'] != '')) {\n          let regionArray = ['All'];\n          let locationArray = ['All'];\n          let systemArray = ['All'];\n          if (this.navigatedGeoFilters['region']) {\n            regionArray = this.navigatedGeoFilters['region'] || 'All';\n          }\n          if (this.navigatedGeoFilters['location']) {\n            locationArray = this.navigatedGeoFilters['location'] || 'All';\n          }\n          if (this.navigatedGeoFilters['system']) {\n            systemArray = this.navigatedGeoFilters['system'] || 'All';\n          }\n          this.filtersForm.get('region').setValue(regionArray);\n          setTimeout(() => {\n            this.filtersForm.get('location').setValue(locationArray);\n            this.loadLocationValue('');\n            setTimeout(() => {\n              this.filtersForm.get('system').setValue(systemArray);\n              this.selectSystem('');\n              this.loadSystemValue();\n              // setTimeout(() => {\n              //   this.loadIntialData();\n              // }, 1000)\n            }, 200);\n          }, 200);\n        }\n        this.getModalVendorIds();\n        // }\n      }, error => {\n        this.getModalVendorIds();\n        this.error = true;\n        this.loading = false;\n        this.pageErrorHandle(error);\n      });\n    }\n    findObjectsCountByValue(jsObjects, value) {\n      let count = 0;\n      if (jsObjects && jsObjects.length) {\n        for (var i = 0; i < jsObjects.length; i++) {\n          if (jsObjects[i]['name'].toLowerCase() == value.toLowerCase()) {\n            count++;\n          }\n        }\n      }\n      return count;\n    }\n    loadLocationValue(event) {\n      this.clickedRegion = '';\n      this.locationSelected = 'All';\n      this.systemSelected = 'All';\n      let ids = this.filtersForm.get('region').value;\n      let locationIds = this.filtersForm.get('location').value;\n      this.regionSelected = ids;\n      if (this.regionSelected.length) {\n        let regionQuery = '';\n        if (ids.length) {\n          if (ids.indexOf('All') !== -1) {\n            this.locationDataArray = [\"All\"];\n            this.systemDataArray = ['All'];\n            this.filtersForm.get('location').setValue(['All']);\n            this.filtersForm.get('system').setValue(['All']);\n            this.regionName = null;\n            this.locationName = null;\n            this.systemName = null;\n            return;\n          }\n          ids.forEach(element => {\n            if (element == 'All') {\n              return;\n            }\n            regionQuery += `&region=${element}`;\n          });\n          this.locationsSubject = this.http.get(`${environment.API_BASE_URL}nfa/locations?tenant=0${regionQuery}`).pipe(map(res => {\n            res = this.issueService.appendFqn(res);\n            res.sort((a, b) => (a['name'] || '').toString().localeCompare((b['name'] || '').toString(), 'en', {\n              numeric: false\n            }));\n            return res;\n          }), catchError(this.handleError)).subscribe(res => {\n            //this.setLocationsInfo(res);\n            this.locationDataArray = ['All'];\n            this.locationDataArray = [...this.locationDataArray, ...res];\n            // this.locationDataArray = res;\n            // this.locationDataArray.push(\"All\");\n            let locationsArray = this.filtersForm.get('location').value;\n            if (locationsArray && locationsArray.length > 0) {\n              locationsArray.forEach((el, index) => {\n                var _a;\n                if (el != 'All') {\n                  if (((_a = this.locationDataArray) === null || _a === void 0 ? void 0 : _a.findIndex(fi => fi['id'] == el)) == -1) {\n                    locationsArray = locationsArray === null || locationsArray === void 0 ? void 0 : locationsArray.filter(element => element != el);\n                  }\n                }\n              });\n            }\n            if (!locationsArray || locationsArray.length == 0) {\n              locationsArray = ['All'];\n            }\n            this.filtersForm.get('location').setValue(locationsArray);\n            this.loadSystemValue();\n          }, error => {});\n          //start of CCL-34242\n          this.regionName = ids;\n          //end of CCL-34242\n          this;\n        } else {\n          this.filtersForm.get('region').setValue(['All']);\n          this.filtersForm.get('location').setValue(['All']);\n          this.filtersForm.get('system').setValue(['All']);\n          //this.filtersForm.get('region').setValue(['All']);\n          this.regionName = null;\n          this.locationName = null;\n          this.systemName = null;\n          this.locationDataArray = ['All'];\n          this.systemDataArray = ['All'];\n        }\n      }\n    }\n    loadSystemValue(event) {\n      this.clickedLocation = '';\n      let regionids = this.filtersForm.get('region').value;\n      let locationids = this.filtersForm.get('location').value;\n      let systemIds = this.filtersForm.get('system').value;\n      this.systemSelected = ['All'];\n      if (regionids.length && locationids.length && locationids.indexOf('All') === -1) {\n        let regionQuery = '';\n        regionids.forEach(element => {\n          if (element == 'All') {\n            return;\n          }\n          regionQuery += `&region=${element}`;\n        });\n        let locationQuery = '';\n        locationids.forEach(element => {\n          if (element == 'All') {\n            return;\n          }\n          locationQuery += `&location=${element}`;\n        });\n        this.systemsSubject = this.http.get(`${environment.API_BASE_URL}nfa/systems?tenant=0${regionQuery}${locationQuery}`).pipe(map(res => {\n          res.sort((a, b) => (a['name'] || '').toString().localeCompare((b['name'] || '').toString(), 'en', {\n            numeric: false\n          }));\n          return res;\n        }), catchError(this.handleError)).subscribe(res => {\n          //this.setSystemsInfo(res);\n          this.systemDataArray = ['All'];\n          this.systemDataArray = [...this.systemDataArray, ...res];\n          let systemsArray = this.filtersForm.get('system').value;\n          if (systemsArray && systemsArray.length > 0) {\n            systemsArray.forEach((el, index) => {\n              var _a;\n              if (el != 'All') {\n                if (((_a = this.systemDataArray) === null || _a === void 0 ? void 0 : _a.findIndex(fi => fi['uuid'] == el)) == -1) {\n                  systemsArray = systemsArray === null || systemsArray === void 0 ? void 0 : systemsArray.filter(element => element != el);\n                }\n              }\n            });\n          }\n          if (!systemsArray || systemsArray.length == 0) {\n            systemsArray = ['All'];\n          }\n          this.filtersForm.get('system').setValue(systemsArray);\n          // this.systemDataArray = res;\n          // this.systemDataArray.push(\"All\");\n        }, error => {});\n        //start of CCL-34242\n        this.locationName = locationids;\n        //end of CCL-34242\n      } else {\n        if (!locationids.length || locationids.indexOf('All') != -1) {\n          this.filtersForm.get('location').setValue(['All']);\n          this.filtersForm.get('system').setValue(['All']);\n          this.locationName = null;\n          this.systemName = null;\n          this.systemDataArray = ['All'];\n        }\n      }\n    }\n    selectSystem(event) {\n      let systemid = this.filtersForm.get('system').value;\n      this.systemName = systemid;\n      if (systemid == 'All') {\n        this.systemName = null;\n      }\n    }\n    validateRegion(event) {\n      let regions = this.filtersForm.get('region').value;\n      if (event === 'All') {\n        regions = ['All'];\n      } else {\n        let index = regions.indexOf('All');\n        if (index > -1) {\n          regions.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('region').setValue(regions);\n      this.loadLocationValue('');\n    }\n    validateLocation(event) {\n      let locations = this.filtersForm.get('location').value;\n      if (event === 'All') {\n        this.clickedLocation = undefined;\n        this.locationName = undefined;\n        locations = ['All'];\n      } else {\n        let index = locations.indexOf('All');\n        if (index > -1) {\n          locations.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('location').setValue(locations);\n      this.loadSystemValue('');\n    }\n    validateSystem(event) {\n      let systems = this.filtersForm.get('system').value;\n      if (!systems.length) {\n        systems = ['All'];\n      } else if (event === 'All') {\n        systems = ['All'];\n      } else {\n        let index = systems.indexOf('All');\n        if (index > -1) {\n          systems.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('system').setValue(systems);\n    }\n    generateParams() {\n      this.validateFSAN();\n      if (!this.fsanvalid) return;\n      //hide healthy systems behaviour change\n      this.selectedAlertTypes = this.tempSelectedAlertType == 'All' ? 'All Alerts' : this.tempSelectedAlertType;\n      if (this.selectedAlertTypes != 'All Alerts') {\n        if (this.selectedAlertTypes == 'Cloud Connectivity' || this.selectedAlertTypes == 'Transform Alarms') {\n          this.filtersForm.get('fsan_serialno').setValue('', {\n            emitEvent: false\n          });\n          this.filtersForm.get('fsan_serialno').disable({\n            emitEvent: false\n          });\n        } else {\n          this.filtersForm.get('fsan_serialno').enable({\n            emitEvent: false\n          });\n        }\n        if (this.selectedAlertTypes == 'Service Disruptions') {\n          this.filtersForm.get('showAllSystems').setValue(false, {\n            emitEvent: false\n          });\n        } else {\n          this.filtersForm.get('showAllSystems').setValue(true, {\n            emitEvent: false\n          });\n        }\n        this.filtersForm.get('showAllSystems').disable({\n          emitEvent: false\n        });\n      } else {\n        this.filtersForm.get('showAllSystems').enable({\n          emitEvent: false\n        });\n        this.filtersForm.get('fsan_serialno').enable({\n          emitEvent: false\n        });\n      }\n      let fields = this.filtersForm.value;\n      let params = {\n        showAllSystems: fields['showAllSystems'],\n        showOntNetOutage: fields['showOntNetOutage'],\n        region: fields['region'],\n        location: fields['location'],\n        system: fields['system'],\n        fsan_serialno: fields['fsan_serialno'] ? fields['fsan_serialno'] : '',\n        device_type: fields['device_type'],\n        alertType: fields['alertType'],\n        modelNames: fields['modelNames'],\n        vendorId: fields['vendorId']\n      };\n      // if (fields['fsan_serialno'] && fields['device_type'] !== 'OLT') {\n      //   params['fsan_serialno'] = this.filtersForm.get('fsan_serialno').value;\n      // }\n      this.selectedAlertTypes = 'All Alerts';\n      if (fields['alertType']) {\n        this.selectedAlertTypes = this.tempSelectedAlertType == 'All' ? 'All Alerts' : this.tempSelectedAlertType;\n      }\n      // if (fields['vendorId'] && fields['device_type'] !== 'OLT') {\n      //   params['vendorId'] = fields['vendorId'];\n      // }\n      this.previousOntOutage = fields['showOntNetOutage'];\n      this.issueService.setGeomapAppliedFilters(params);\n      this.getData();\n    }\n    getData() {\n      var _a, _b, _c, _d, _e;\n      if (this.canCall) {\n        this.hideToolbox();\n        this.canShowAlertTypeList = false;\n        this.canShowSystemList = false;\n        this.canCall = false;\n        // this.totalActiveSystems = 0;\n        this.loading = true;\n        this.error = false;\n        this.errorInfo = undefined;\n        this.geoMapParams = {};\n        if (this.map) {\n          Microsoft.Maps.Events.removeHandler(this.endHandler);\n          if (this.map['layers']) {\n            this.map.layers.clear();\n          }\n          this.mapData = [];\n          // this.backUpMapData = [];\n          this.pins = [];\n        }\n        let getParams = Object.assign({}, this.issueService.getGeomapAppliedFilters());\n        if (getParams) {\n          this.geoMapParams = getParams;\n        }\n        let query = '';\n        if (this.filtersForm.get('showAllSystems').value) {\n          query = 'hide_healthy_systems=' + encodeURIComponent(this.filtersForm.get('showAllSystems').value);\n        }\n        for (var key in this.geoMapParams) {\n          if (this.geoMapParams[key] == undefined || this.geoMapParams[key] == '' || key == 'region' && this.geoMapParams[key].length == 1 && ((_a = this.geoMapParams[key][0]) === null || _a === void 0 ? void 0 : _a.toLowerCase()) == 'all' || key == 'location' && this.geoMapParams[key].length == 1 && ((_b = this.geoMapParams[key][0]) === null || _b === void 0 ? void 0 : _b.toLowerCase()) == 'all' || key == 'system' && this.geoMapParams[key].length == 1 && ((_c = this.geoMapParams[key][0]) === null || _c === void 0 ? void 0 : _c.toLowerCase()) == 'all' || key == 'showAllSystems' || key == 'showOntNetOutage' || key == 'modelNames' && ((_d = this.geoMapParams[key]) === null || _d === void 0 ? void 0 : _d.length) == ((_e = this.actualModelNames) === null || _e === void 0 ? void 0 : _e.length) || key == 'vendorId' && this.geoMapParams[key] == 'All' || this.appliedParams.findIndex(el => el == key) == -1) {\n            continue;\n          }\n          if (query != '') {\n            query += '&';\n          }\n          query += key + '=' + encodeURIComponent(this.geoMapParams[key]);\n        }\n        setTimeout(() => {\n          let url = `${this.baseUrl}devices?withoutGeo=false`;\n          if (query && query != '') {\n            url = `${this.baseUrl}devices?withoutGeo=false&${query}`;\n          }\n          // let json = `assets/data/indialoc.json`;\n          this.http.get(url)\n          // this.http.get(json)\n          .subscribe(json => {\n            // if (this.isDev || this.isDevfunc) {\n            this.mapData = json && json['devicesOutputData'] ? json['devicesOutputData'] : json ? json : [];\n            //set totalActiveSystems kpi\n            this.totalActiveSystems = json && json['activeSystemsCount'] ? json['activeSystemsCount'] : this.mapData && this.mapData[0] && this.mapData[0]['activeSystemsCount'] ? this.mapData[0]['activeSystemsCount'] : 0;\n            // }\n            // else {\n            //   this.mapData = json ? json : [];\n            //   //set totalActiveSystems kpi\n            //   this.totalActiveSystems = 0;\n            //   if (this.mapData.length > 0) {\n            //     this.totalActiveSystems = this.mapData && this.mapData[0] && this.mapData[0]['activeSystemsCount'] ? this.mapData[0]['activeSystemsCount'] : 0;\n            //   }\n            // }\n            if (this.mapData.length > 0) {\n              //filter empty response with system count\n              if (this.mapData && this.mapData.length == 1) {\n                this.mapData = this.mapData.filter(el => el['deviceUuid'] && el['deviceName']);\n              }\n              // find invalid lat and long and show message\n              this.error = this.mapData.some(el => Number(el['latitude']) == 0 && Number(el['longitude']) == 0);\n              this.mapData = this.mapData.filter(el => Number(el['latitude']) || Number(el['longitude']));\n              this.mapData.forEach(el => {\n                el['regionLocation'] = '-';\n                el['outage'] = el['outage'] || el['outage'] == false ? String(el['outage']).charAt(0).toUpperCase() + String(el['outage']).slice(1) : undefined;\n                if (el['deviceRegion'] && el['deviceRegion']['region_name'] || el['deviceLocation'] && el['deviceLocation']['networkgroup_name']) {\n                  el['regionLocation'] = `${el['deviceRegion'] && el['deviceRegion']['region_name'] ? el['deviceRegion']['region_name'] : '-'}/${el['deviceLocation'] && el['deviceLocation']['networkgroup_name'] ? el['deviceLocation']['networkgroup_name'] : '-'}`;\n                }\n              });\n              if (this.error) {\n                this.errorInfo = 'Invalid location co-ordinates (0,0)';\n              }\n            }\n            // this.backUpMapData = [...this.mapData];\n            // if(this.filtersForm.get('showOntNetOutage').value){\n            //   this.showOnlyOntInternetOutage();\n            // } else{\n            if (!this.mapSet) {\n              this.setMap();\n              this.mapSet = true;\n            } else {\n              if (this.mapData.length > 0) {\n                this.loadMap();\n              }\n            }\n            // canApplyOrRefresh again\n            this.canCall = true;\n            this.loading = false;\n            // }\n          }, err => {\n            this.canCall = true;\n            this.error = true;\n            this.loading = false;\n            this.pageErrorHandle(err);\n          });\n        }, 1000);\n      }\n    }\n    // showOnlyOntInternetOutage(){\n    //   this.mapData = this.backUpMapData.filter(el => el['outage'] == 'True');\n    //   if (!this.mapSet) {\n    //     this.setMap();\n    //     this.mapSet = true;\n    //   } else {\n    //     if (this.mapData.length > 0) {\n    //       this.loadMap();\n    //     }\n    //   }\n    //   // canApplyOrRefresh again\n    //   this.canCall = true;\n    //   this.loading = false;\n    // }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = 'Access Denied';\n      } else {\n        this.errorInfo = this.commonOrgService.pageErrorHandle(err);\n      }\n      this.error = true;\n    }\n    clearFilter() {\n      this.showFSAN = true;\n      this.fsanvalid = true;\n      this.locationDataArray = ['All'];\n      this.systemDataArray = ['All'];\n      this.selectedAlertTypes = 'All Alerts';\n      this.tempSelectedAlertType = 'All';\n      this.clickedRegion = undefined;\n      this.clickedLocation = undefined;\n      this.locationName = undefined;\n      this.regionName = undefined;\n      this.systemName = undefined;\n      // this.modelNames = [];\n      this.filtersForm.get('showOntNetOutage').enable({\n        emitEvent: false\n      });\n      this.filtersForm.get('showAllSystems').enable({\n        emitEvent: false\n      });\n      this.filtersForm.get('fsan_serialno').enable({\n        emitEvent: false\n      });\n      let alertTypes = [...this.alertTypes];\n      alertTypes.forEach(element => {\n        element['disabled'] = false;\n      });\n      this.alertTypes = [...alertTypes];\n      this.filtersForm.patchValue({\n        region: ['All'],\n        location: ['All'],\n        system: ['All'],\n        modelNames: [],\n        vendorId: 'All',\n        fsan_serialno: '',\n        device_type: 'ALL',\n        showAllSystems: true,\n        showOntNetOutage: false,\n        searchInputText: '',\n        alertType: 'ALL'\n      }, {\n        emitEvent: false,\n        onlySelf: true\n      });\n      // this.filtersForm.get('showAllSystems').setValue(true, { emitEvent: false });\n      // this.filtersForm.get('fsan_serialno').setValue('', { emitEvent: false });\n      // this.filtersForm.get('showOntNetOutage').setValue(false, { emitEvent: false });\n      this.setVendorModelToDefault();\n      let params = this.filtersForm.value;\n      // this.appliedParams = params;\n      this.issueService.setGeomapAppliedFilters(params);\n      this.getData();\n    }\n    setVendorModelToDefault() {\n      var _a;\n      (_a = this.MultiSelectComponent) === null || _a === void 0 ? void 0 : _a.resetSearchFilter();\n      this.showCountOfItems = false;\n      this.modelNames = [...this.actualModelNames];\n      this.filtersForm.get('modelNames').setValue(this.actualModelNames.map(el => el.model));\n      this.vendorNames = [...this.actualvendorNames];\n      this.filtersForm.get('vendorId').setValue('All');\n    }\n    setMap() {\n      this.map = new Microsoft.Maps.Map('#geoViewIssue', {\n        credentials: environment.BING_API_KEY,\n        zoom: 1\n      });\n      this.map.setView({\n        mapTypeId: Microsoft.Maps.MapTypeId.road\n      });\n      this.map.setOptions({\n        showLogo: false,\n        showLocateMeButton: false,\n        // showDashboard: false,\n        showMapTypeSelector: false,\n        showCopyright: false,\n        disableBirdseye: true,\n        disableStreetside: false,\n        showZoomButtons: true\n      });\n      this.systemListTooltip = new Microsoft.Maps.Infobox(this.map.getCenter(), {\n        visible: false\n      });\n      this.systemListTooltip.setMap(this.map);\n      this.tooltip = new Microsoft.Maps.Infobox(this.map.getCenter(), {\n        visible: false\n      });\n      this.tooltip.setMap(this.map);\n      let that = this;\n      Microsoft.Maps.Events.addHandler(that.map, 'click', function () {\n        that.hideToolbox();\n      });\n      // Microsoft.Maps.registerModule('SpiderClusterManager', 'assets/js/SpiderClusterManager.js');\n      if (that.mapData.length > 0) {\n        that.loadMap();\n      }\n    }\n    loadMap() {\n      let that = this;\n      this._that = this;\n      var pins,\n        clusterLayer,\n        locs = [];\n      // Microsoft.Maps.loadModule(['SpiderClusterManager'], () => {\n      Microsoft.Maps.loadModule('Microsoft.Maps.Clustering', function () {\n        var _a, _b;\n        pins = that.mapData;\n        let icon = {};\n        let locationsLen = pins.length;\n        for (let i = 0; i < locationsLen; i++) {\n          icon = that.createSpiderIcon((_a = pins[i]['nonZeroSev']) === null || _a === void 0 ? void 0 : _a.toLowerCase(), (_b = pins[i]['deviceType']) === null || _b === void 0 ? void 0 : _b.toLowerCase()); //flag\n          let clusterPin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(pins[i]['latitude'], pins[i]['longitude']), icon);\n          clusterPin.metadata = pins[i];\n          clusterPin['customId'] = pins[i]['deviceUuid'] + pins[i]['deviceName'];\n          locs.push(new Microsoft.Maps.Location(pins[i]['latitude'], pins[i]['longitude']));\n          Microsoft.Maps.Events.addHandler(clusterPin, 'mouseover', innerFnShowToolBox);\n          // Microsoft.Maps.Events.addHandler(\n          //   clusterPin,\n          //   'click',\n          //   pushpinClicked\n          // );\n          that.pushpinMouseOutHandler = Microsoft.Maps.Events.addHandler(clusterPin, 'mouseout', innerFnhideToolbox);\n          that.pins.push(clusterPin);\n        }\n        var bounds = Microsoft.Maps.LocationRect.fromLocations(locs);\n        that.map.setView({\n          bounds: bounds,\n          padding: 100\n        });\n        clusterLayer = new Microsoft.Maps.ClusterLayer(that.pins, {\n          clusteredPinCallback: createCustomClusteredPin,\n          gridSize: 80\n          // clusteringEnabled : that.enableClustering\n        });\n\n        that.map.layers.insert(clusterLayer);\n        if (that.reStoreMapViewDetails.mapCenterBound) {\n          // && (that.locs != 0 || (that.locs == locs.length))\n          let center = new Microsoft.Maps.Location(that.reStoreMapViewDetails.mapCenterBound.latitude, that.reStoreMapViewDetails.mapCenterBound.longitude);\n          let bounds = new Microsoft.Maps.LocationRect(center, that.reStoreMapViewDetails.mapWidthBound, that.reStoreMapViewDetails.mapHeightBound);\n          // let bounds = Microsoft.Maps.LocationRect.fromEdges(that.mapNorthBound, that.mapWestBound, that.mapSouthBound, that.mapEastBound)\n          that.map.setView({\n            bounds: bounds\n          });\n          that.map.setView({\n            zoom: that.reStoreMapViewDetails.mapZoom\n          });\n        }\n        function innerFnShowToolBox(e) {\n          that.showToolbox(e);\n        }\n        function innerFnhideToolbox(e) {\n          that.hideToolbox();\n        }\n        function createCustomClusteredPin(cluster) {\n          var _a;\n          if (that.clusters.findIndex(el => el['customId'] == cluster['customId']) == -1 && cluster.containedPushpins.length > 0) {\n            cluster['customId'] = cluster.containedPushpins[0].customId;\n            that.clusters.push(cluster);\n          }\n          let clickedIndex = that.clusters.findIndex(el => el['customId'] == cluster['customId']);\n          if (clickedIndex != -1 && that.clusters[clickedIndex]['lastClicked']) {\n            cluster['lastClicked'] = true;\n          }\n          //Define variables for minimum cluster radius, and how wide the outline area of the circle should be.\n          var minRadius = 12;\n          var outlineWidth = 7;\n          //Get the number of pushpins in the cluster\n          var clusterSize = (_a = cluster.containedPushpins) === null || _a === void 0 ? void 0 : _a.length;\n          var fillColor = '#008cff';\n          //find last aggregated cluster\n          // if(cluster.containedPushpins.length >= 50){\n          Microsoft.Maps.Events.addHandler(cluster, 'click', clusterClicked);\n          // cluster._options.visible = false\n          // }\n          if (cluster.containedPushpins && cluster.containedPushpins.length > 0) {\n            let initialGeometry = cluster.containedPushpins[0].geometry;\n            let lastAggCluster = cluster.containedPushpins.every(el => el['geometry']['x'] == initialGeometry['x'] && el['geometry']['y'] == initialGeometry['y']);\n            cluster.containedPushpins.forEach(element => {\n              element.changed.isPreviouslyInvoked = true;\n            });\n            if (lastAggCluster) {\n              fillColor = 'purple';\n            }\n            console.log(lastAggCluster, 'lastAggCluster');\n          }\n          //Calculate the radius of the cluster based on the number of pushpins in the cluster, using a logarithmic scale.\n          var radius = Math.log(clusterSize) / Math.log(10) * 3 + minRadius;\n          //set outerring color\n          let outerRingColor = '';\n          if (fillColor == 'purple') {\n            outerRingColor = '#ff00ff';\n          } else {\n            outerRingColor = '#003866';\n          }\n          //Default cluster color is red.\n          var svg = [];\n          if (cluster['lastClicked']) {\n            outlineWidth = 4;\n            svg = ['<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"', radius * 2, '\" height=\"', radius * 2, '\">', '<circle cx=\"', radius, '\" cy=\"', radius, '\" r=\"', radius, '\" fill=\"', outerRingColor, '\"/>', '<circle cx=\"', radius, '\" cy=\"', radius, '\" r=\"', radius - outlineWidth, '\" fill=\"', fillColor, '\"/>', '</svg>'];\n          } else {\n            svg = ['<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"', radius * 2, '\" height=\"', radius * 2, '\">', '<circle cx=\"', radius, '\" cy=\"', radius, '\" r=\"', radius, '\" fill=\"', fillColor, '\"/>', '<circle cx=\"', radius, '\" cy=\"', radius, '\" r=\"', radius - outlineWidth, '\" fill=\"', fillColor, '\"/>', '</svg>'];\n          }\n          //Customize the clustered pushpin using the generated SVG and anchor on its center.\n          cluster.setOptions({\n            icon: svg.join(''),\n            anchor: new Microsoft.Maps.Point(radius, radius),\n            textOffset: new Microsoft.Maps.Point(0, radius - 8) //Subtract 8 to compensate for height of text.\n          });\n        }\n\n        function clusterClicked(e) {\n          var _a;\n          // if systems greater than 50 show list\n          // that.spiderManager.hideSpiderCluster();\n          // if (e.target.containedPushpins && e.target.containedPushpins.length >= 50) {\n          that.hideToolbox('systemList');\n          // if(that.clusters.findIndex(el => el['customId'] == e.target.customId) == -1 && e.target.containedPushpins.length > 0){\n          // }\n          let clickedClusterIndex = that.clusters.findIndex(el => el['customId'] == e.target.customId);\n          that.clusters = [...new Map(that.clusters.map(m => [m.customId, m])).values()];\n          that.clusters.forEach((cluster, index) => {\n            cluster['lastClicked'] = false;\n          });\n          that.clusters.forEach((cluster, index) => {\n            if (clickedClusterIndex == index) {\n              cluster['lastClicked'] = true;\n            }\n            createCustomClusteredPin(cluster);\n          });\n          var minRadius = 12;\n          var outlineWidth = 4;\n          //Get the number of pushpins in the cluster\n          var clusterSize = (_a = e.target.containedPushpins) === null || _a === void 0 ? void 0 : _a.length;\n          var fillColor = '#008cff';\n          //find last aggregated cluster\n          // if(e.target.containedPushpins.length >= 50){\n          // Microsoft.Maps.Events.addHandler(cluster, 'click', clusterClicked);\n          // cluster._options.visible = false\n          // }\n          if (e.target.containedPushpins && e.target.containedPushpins.length > 0) {\n            let initialGeometry = e.target.containedPushpins[0].geometry;\n            let lastAggCluster = e.target.containedPushpins.every(el => el['geometry']['x'] == initialGeometry['x'] && el['geometry']['y'] == initialGeometry['y']);\n            if (lastAggCluster) {\n              fillColor = 'purple';\n            }\n            console.log(lastAggCluster, 'lastAggCluster');\n          }\n          //set outerring color\n          let outerRingColor = '';\n          if (fillColor == 'purple') {\n            outerRingColor = '#ff00ff';\n          } else {\n            outerRingColor = '#003866';\n          }\n          //Calculate the radius of the cluster based on the number of pushpins in the cluster, using a logarithmic scale.\n          var radius = Math.log(clusterSize) / Math.log(10) * 3 + minRadius;\n          var svg = ['<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"', radius * 2, '\" height=\"', radius * 2, '\">', '<circle cx=\"', radius, '\" cy=\"', radius, '\" r=\"', radius, '\" fill=\"', outerRingColor, '\"/>', '<circle cx=\"', radius, '\" cy=\"', radius, '\" r=\"', radius - outlineWidth, '\" fill=\"', fillColor, '\"/>', '</svg>'];\n          e.target.setOptions({\n            icon: svg.join(''),\n            anchor: new Microsoft.Maps.Point(radius, radius),\n            textOffset: new Microsoft.Maps.Point(0, radius - 8) //Subtract 8 to compensate for height of text.\n          });\n\n          that.systemListData = {};\n          that.loading = true;\n          // var locs = [];\n          let data = [];\n          if (e.target.containedPushpins && e.target.containedPushpins.length > 0) {\n            e.target.containedPushpins.forEach(el => {\n              data.push(el === null || el === void 0 ? void 0 : el.metadata);\n            });\n          }\n          that.showSystemsList(e.location, data);\n        }\n      });\n      that.locs = locs.length;\n      that.endHandler = Microsoft.Maps.Events.addHandler(that.map, 'viewchangeend', function () {\n        highlight('mapViewChangEnd');\n      });\n      function highlight(id) {\n        //Highlight the div to indicate that the event has fired.\n        let bounds = that.map.getBounds();\n        if (id == 'mapViewChangEnd') {\n          that.reStoreMapViewDetails.mapCenterBound = bounds.center;\n          that.reStoreMapViewDetails.mapWidthBound = bounds.width;\n          that.reStoreMapViewDetails.mapHeightBound = bounds.height;\n          that.reStoreMapViewDetails.mapZoom = that.map.getZoom();\n        }\n      }\n    }\n    showSystemsList(location, listData) {\n      var _a;\n      // this.hideToolbox('systemList');\n      this.systemListData = {};\n      let geoFilters = (_a = this.issueService) === null || _a === void 0 ? void 0 : _a.getGeomapAppliedFilters();\n      if (geoFilters) {\n        this.systemListData = geoFilters;\n      }\n      // this.removeElementsFromList(listData);\n      listData.forEach(el => {\n        if (el['deviceType'] == 'ONT') {\n          if (el['outage'] == 'True') {\n            el['serviceDisruption'] = `Yes - ${el['outageAlarmName']}`;\n          } else {\n            el['serviceDisruption'] = 'No';\n          }\n        }\n      });\n      this.systemListData['listData'] = listData;\n      this.systemListData['selectedAlertTypes'] = this.selectedAlertTypes;\n      this.systemListData['reStoreMapViewDetails'] = this.reStoreMapViewDetails;\n      //set header\n      this.listHasAllOLT = listData.every(el => {\n        var _a;\n        return ((_a = el['deviceType']) === null || _a === void 0 ? void 0 : _a.toUpperCase()) == 'OLT';\n      });\n      this.setListInfoBox = [...this.listInfoBox];\n      if (this.listHasAllOLT) {\n        this.setListInfoBox = this.listInfoBox.filter(el => el['key'] != 'subscriberName' && el['key'] != 'serviceDisruption');\n      }\n      this.systemListData['listColumn'] = this.setListInfoBox;\n      this.systemListData['listHasAllOLT'] = this.listHasAllOLT;\n      setTimeout(() => {\n        this.canShowSystemList = true;\n        this.loading = false;\n        // let template = this.systemList;\n        // // this.systemListTooltip.setHtmlContent(template);\n        // let Options = {\n        //   location: location,\n        //   htmlContent: template,\n        //   visible: true,\n        //   // offset : new Microsoft.Maps.Point(100, 100),\n        //   // offset: new Microsoft.Maps.Point(15, -95),\n        //   // width: 435,\n        // };\n        // this.systemListTooltip.setOptions(Options);\n        // this.repositionToolBox(\n        //   location,\n        //   this.systemListTooltip,\n        //   'showSystemsList'\n        // );\n        // this.map.entities.push(this.systemListTooltip);\n      }, 200);\n      setTimeout(() => {\n        window.scrollTo(0, document.body.scrollHeight);\n      }, 500);\n    }\n    showToolbox(e) {\n      var _a;\n      this.systemInfoData = e.target.metadata;\n      this.hideToolbox();\n      this.systemListData['reStoreMapViewDetails'] = this.reStoreMapViewDetails;\n      this.systemListData = {};\n      let geoFilters = (_a = this.issueService) === null || _a === void 0 ? void 0 : _a.getGeomapAppliedFilters();\n      if (geoFilters) {\n        this.systemListData = geoFilters;\n      }\n      setTimeout(() => {\n        let template = this.systemInfo['nativeElement'].innerHTML;\n        template = template.replace('hide-modal', '');\n        let Options = {\n          location: e.target.getLocation(),\n          htmlContent: template,\n          visible: true,\n          width: 500\n        };\n        this.tooltip.setOptions(Options);\n        this.repositionToolBox(e.target.getLocation(), this.tooltip);\n        let deviceNameTag = document.getElementById('clickdeviceName');\n        if (deviceNameTag) {\n          this.renderer.listen(deviceNameTag, 'click', event => {\n            this.homeGeomapService.redirectToPage('deviceName', e.target.metadata, this.systemListData);\n          });\n        }\n        let outageAlarmTag = document.getElementById('clickOutageAlarmName');\n        if (outageAlarmTag) {\n          this.renderer.listen(outageAlarmTag, 'click', event => {\n            this.homeGeomapService.redirectToPage('outageAlarmName', e.target.metadata, this.systemListData);\n          });\n        }\n        this.clickNoOfAlarms.forEach(el => {\n          let systemData = Object.assign({}, e.target.metadata);\n          let noOfAlarmsTag = document.getElementById(el['element']);\n          if (noOfAlarmsTag) {\n            this.renderer.listen(noOfAlarmsTag, 'click', event => {\n              systemData = Object.assign(Object.assign({}, systemData), el);\n              this.homeGeomapService.redirectToPage('noOfAlarms', systemData, this.systemListData);\n            });\n          }\n        });\n      }, 200);\n    }\n    repositionToolBox(location, tooltip, type) {\n      let buffer = 15;\n      let infoboxOffset = tooltip.getOffset();\n      let infoboxAnchor = tooltip.getAnchor();\n      let infoboxLocation = this.map.tryLocationToPixel(location, Microsoft.Maps.PixelReference.control);\n      let dx = infoboxLocation['x'] + infoboxOffset['x'] - infoboxAnchor['x'];\n      let dy = infoboxLocation.y - 15 - infoboxAnchor.y;\n      if (dy < buffer) {\n        //Infobox overlaps with top of map.\n        //Offset in opposite direction.\n        dy *= -1;\n        //add buffer from the top edge of the map.\n        dy += buffer;\n      } else {\n        //If dy is greater than zero than it does not overlap.\n        dy = 0;\n      }\n      if (dx < buffer) {\n        //Check to see if overlapping with left side of map.\n        //Offset in opposite direction.\n        dx *= -1;\n        //add a buffer from the left edge of the map.\n        dx += buffer;\n      } else {\n        //Check to see if overlapping with right side of map.\n        dx = this.map.getWidth() - infoboxLocation.x + infoboxAnchor.x - tooltip.getWidth();\n        //If dx is greater than zero then it does not overlap.\n        if (dx > buffer) {\n          dx = 0;\n        } else {\n          //add a buffer from the right edge of the map.\n          dx -= buffer;\n        }\n      }\n      //Adjust the map so infobox is in view\n      if (type == 'showSystemsList') {\n        // this.map.setView({ center: centerOffset });\n        // this.map.setView({ zoom: this.map.getZoom() });\n        // let center = {latitude: -28.040005914544835, longitude: -91.7605768435985, altitude: 0, altitudeReference: -1};\n        // this.map.setView({\n        //   // centerOffset: new Microsoft.Maps.Point(0, -214),\n        //   center: center,\n        // });\n      }\n      if (dx != 0 || dy != 0) {\n        this.map.setView({\n          centerOffset: new Microsoft.Maps.Point(dx, dy),\n          center: this.map.getCenter()\n        });\n      }\n    }\n    hideToolbox(toolbox) {\n      if (this.map) {\n        this.clusters = [...new Map(this.clusters.map(m => [m.customId, m])).values()];\n        this.clusters.forEach(cluster => {\n          cluster['lastClicked'] = false;\n        });\n        let center = this.map.getCenter();\n        this.map.setView({\n          // centerOffset: new Microsoft.Maps.Point(0, -214),\n          center: {\n            latitude: Number(center.latitude) + 0.00001,\n            longitude: Number(center.longitude) + 0.00001\n          }\n        });\n      }\n      if (toolbox == 'systemList') {\n        if (this.systemListTooltip !== undefined) {\n          this.systemListTooltip.setOptions({\n            visible: false\n          });\n          this.canShowSystemList = false;\n        }\n      } else {\n        if (this.tooltip !== undefined) {\n          this.tooltip.setOptions({\n            visible: false\n          });\n        }\n        // if (this.systemListTooltip !== undefined) {\n        //   this.systemListTooltip.setOptions({ visible: false });\n        //   this.canShowSystemList = false;\n        // }\n      }\n    }\n\n    createSpiderIcon(issueType, deviceType) {\n      let outlineWidth = 7;\n      let radius = 9;\n      //Default cluster color is red.\n      // let fillColor = 'green';\n      let svg = '';\n      if (deviceType == 'ont') {\n        if (issueType == 'critical') {\n          svg = this.devicesIcons.circles.red;\n        } else if (issueType == 'major') {\n          svg = this.devicesIcons.circles.amber;\n        } else if (issueType == 'minor') {\n          svg = this.devicesIcons.circles.yellow;\n        } else {\n          svg = this.devicesIcons.circles.green;\n        }\n      } else if (deviceType == 'olt') {\n        if (issueType == 'critical') {\n          svg = this.devicesIcons.squares.red;\n        } else if (issueType == 'major') {\n          svg = this.devicesIcons.squares.amber;\n        } else if (issueType == 'minor') {\n          svg = this.devicesIcons.squares.yellow;\n        } else {\n          svg = this.devicesIcons.squares.green;\n        }\n      } else if (deviceType == 'asm') {\n        if (issueType == 'critical') {\n          svg = this.devicesIcons.diamonds.red;\n        } else if (issueType == 'major') {\n          svg = this.devicesIcons.diamonds.amber;\n        } else if (issueType == 'minor') {\n          svg = this.devicesIcons.diamonds.yellow;\n        } else {\n          svg = this.devicesIcons.diamonds.green;\n        }\n      }\n      //Create a pushpin from the SVG and anchor it to the center of the circle.\n      let svgIcon = {\n        icon: svg,\n        anchor: new Microsoft.Maps.Point(radius, radius)\n        //text: devCount.toString(),\n      };\n\n      return svgIcon;\n    }\n    closeAlert() {\n      this.error = false;\n    }\n    validateFSAN() {\n      var _a, _b, _c, _d;\n      this.fsanvalid = true;\n      if (((_b = (_a = this.filtersForm.get('fsan_serialno')) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.length) !== 0 && ((_d = (_c = this.filtersForm.get('fsan_serialno')) === null || _c === void 0 ? void 0 : _c.value) === null || _d === void 0 ? void 0 : _d.length) !== 12) {\n        this.fsanvalid = false;\n      }\n    }\n    onAlarmGroupChange(value, type) {\n      //disable alertTypes \n      let alertTypes = [...this.alertTypes];\n      alertTypes.forEach(element => {\n        var _a, _b, _c;\n        if (value != 'ALL' && this.filtersForm.get('alertType').value == element['id'] && ((_a = element['disableFor']) === null || _a === void 0 ? void 0 : _a.includes(value))) {\n          this.filtersForm.get('alertType').setValue('ALL');\n        }\n        if (value == 'ONT' && ((_b = element['disableFor']) === null || _b === void 0 ? void 0 : _b.includes('ONT'))) {\n          element['disabled'] = true;\n        } else if (value == 'OLT' && ((_c = element['disableFor']) === null || _c === void 0 ? void 0 : _c.includes('OLT'))) {\n          element['disabled'] = true;\n        } else {\n          element['disabled'] = false;\n        }\n      });\n      this.alertTypes = [...alertTypes];\n      if (value === 'OLT') {\n        if (this.filtersForm.get('showOntNetOutage').value == true) {\n          this.previousOntOutage = true;\n          this.filtersForm.get('showOntNetOutage').setValue(false);\n        }\n        this.filtersForm.get('showOntNetOutage').disable({\n          emitEvent: false\n        });\n        this.filtersForm.get('fsan_serialno').setValue('');\n        this.showFSAN = false;\n        if (type == 'docChange') {\n          this.setVendorModelToDefault();\n        }\n      } else {\n        if (this.filtersForm.get('showOntNetOutage').value == false && this.previousOntOutage) {\n          this.filtersForm.get('showOntNetOutage').setValue(true);\n        }\n        this.filtersForm.get('showOntNetOutage').enable({\n          emitEvent: false\n        });\n        this.showFSAN = true;\n        if (type == 'docChange') {\n          this.setVendorModelToDefault();\n        }\n      }\n    }\n    removespecialcharacter(event) {\n      var key;\n      key = event.keyCode; //key = event.charCode;\n      return key > 47 && key < 58 || key > 64 && key < 91 || key > 96 && key < 123;\n    }\n    refreshGeomap() {\n      this.hideToolbox();\n      setTimeout(() => {\n        this.getData();\n      }, 300);\n    }\n    gotoRealtime() {\n      let existingParams = this.issueService.getGeomapAppliedFilters();\n      existingParams['reStoreMapViewDetails'] = this.reStoreMapViewDetails;\n      existingParams = Object.assign(Object.assign({}, existingParams), existingParams);\n      this.issueService.setGeomapAppliedFilters(existingParams);\n      let url = `/cco/alerts/${this.filtersForm.get('alertType').value.toLowerCase()}`;\n      if (this.filtersForm.get('alertType').value.toLowerCase() == 'disruption') {\n        url += '/list';\n      }\n      this.router.navigate([url], {\n        state: {\n          filters: this.issueService.getGeomapAppliedFilters()\n        }\n      });\n      // const link = this.router.serializeUrl(\n      //   this.router.createUrlTree([url], {\n      //     queryParams: queryParams,\n      //   })\n      // );\n      // window.open(link, '_blank');\n    }\n    //multiselect model names\n    setModelNames(event) {\n      if (event && event['selectedItems']) {\n        this.filtersForm.get('modelNames').setValue(event['selectedItems']);\n        this.loadVendorValues(event['selectedItems']);\n      }\n    }\n    setModelNamesOnBlur(event) {\n      var _a, _b;\n      if (event && event['selectedItems'] && event['selectedItems'].length == 0 && !((_b = (_a = event === null || event === void 0 ? void 0 : event.event) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.checked)) {\n        let vendors = this.filtersForm.get('vendorId').value;\n        if (vendors != '' && vendors != 'All') {\n          this.filtersForm.get('modelNames').setValue(this.modelNames.map(el => el.model));\n        } else {\n          this.filtersForm.get('modelNames').setValue(this.actualModelNames.map(el => el.model));\n        }\n        this.loadVendorValues(this.actualModelNames.map(el => el.model));\n      }\n    }\n    loadVendorValues(selectedModels) {\n      let actualVendors = [...this.actualvendorNames];\n      let appendVendors = [];\n      if (selectedModels && selectedModels.length > 0) {\n        selectedModels.forEach(items => {\n          let filteredVendors = actualVendors.filter(el => {\n            if (el && el.models && el.models.length > 0) {\n              return el.models.findIndex(mod => mod == items) != -1;\n            }\n            return false;\n          });\n          appendVendors = [...appendVendors, ...filteredVendors];\n        });\n      }\n      appendVendors = [...new Map(appendVendors.map(item => [item['value'], item])).values()];\n      this.vendorNames = ['All', ...appendVendors];\n    }\n    onSelectVendor(event, navModelNames) {\n      let vendors = this.filtersForm.get('vendorId').value;\n      if (event === 'All') {\n        if (!navModelNames) {\n          this.vendorNames = [...this.actualvendorNames];\n        }\n        vendors = 'All';\n        // this.modelNames = [...this.actualModelNames];\n      } else {\n        let index = vendors.indexOf('All');\n        if (index > -1) {\n          vendors.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('vendorId').setValue(vendors);\n      this.loadModelValues(vendors, navModelNames);\n    }\n    loadModelValues(vendors, navModelNames) {\n      var _a, _b, _c, _d;\n      this.showCountOfItems = false;\n      let selectedVendor = this.filtersForm.get('vendorId').value;\n      if (selectedVendor && selectedVendor === 'All') {\n        this.filtersForm.get('vendorId').setValue('All');\n        this.modelNames = [...this.actualModelNames];\n        // let selModels = this.filtersForm.get('modelNames').value;\n        // if(this.modelNames.filter(el => selModels?.findIndex(mod => mod == el['model']) !== -1)?.map(el => el.model)?.length > 0){\n        //   this.filtersForm.get('modelNames').setValue(this.modelNames.filter(el => selModels?.findIndex(mod => mod == el['model']) !== -1)?.map(el => el.model));\n        // }else{\n        if (navModelNames) {\n          this.filtersForm.get('modelNames').setValue(navModelNames);\n        } else {\n          this.filtersForm.get('vendorId').setValue('All');\n          this.filtersForm.get('modelNames').setValue(this.modelNames.map(el => el.model));\n        }\n        // }\n      } else {\n        let selModels = this.filtersForm.get('modelNames').value;\n        this.modelNames = [...this.actualModelNames.filter(el => el['vendor'] == selectedVendor)];\n        if (this.modelNames.length != this.actualModelNames.length) {\n          this.showCountOfItems = true;\n        }\n        if (((_b = (_a = this.modelNames.filter(el => (selModels === null || selModels === void 0 ? void 0 : selModels.findIndex(mod => mod == el['model'])) !== -1)) === null || _a === void 0 ? void 0 : _a.map(el => el.model)) === null || _b === void 0 ? void 0 : _b.length) > 0) {\n          this.filtersForm.get('modelNames').setValue((_c = this.modelNames.filter(el => (selModels === null || selModels === void 0 ? void 0 : selModels.findIndex(mod => mod == el['model'])) !== -1)) === null || _c === void 0 ? void 0 : _c.map(el => el.model));\n        } else {\n          this.filtersForm.get('modelNames').setValue((_d = this.modelNames) === null || _d === void 0 ? void 0 : _d.map(el => el.model));\n        }\n      }\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    onSelectAlertTypes(event) {\n      this.tempSelectedAlertType = event.name;\n      if (this.tempSelectedAlertType == 'Cloud Connectivity' || this.tempSelectedAlertType == 'Transform Alarms') {\n        this.fsanvalid = true;\n        this.filtersForm.get('fsan_serialno').setValue('', {\n          emitEvent: false\n        });\n        this.filtersForm.get('fsan_serialno').disable({\n          emitEvent: false\n        });\n      } else {\n        this.filtersForm.get('fsan_serialno').enable({\n          emitEvent: false\n        });\n      }\n    }\n    redirectToPages(type, systemInfoData) {\n      this.homeGeomapService.redirectToPage(type, systemInfoData, this.systemListData);\n    }\n    ngOnDestroy() {\n      var _a, _b;\n      if (!((_b = (_a = this.router) === null || _a === void 0 ? void 0 : _a.url) === null || _b === void 0 ? void 0 : _b.includes('current-issues'))) {\n        this.issueService.fromMapNavigation(false);\n      }\n      if (this.languageSubject) {\n        this.languageSubject.unsubscribe();\n      }\n      if (this.filterSubscription) {\n        this.filterSubscription.unsubscribe();\n      }\n    }\n  }\n  ActiveDevicesGeomapComponent.ɵfac = function ActiveDevicesGeomapComponent_Factory(t) {\n    return new (t || ActiveDevicesGeomapComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.IssueService), i0.ɵɵdirectiveInject(i4.HttpClient), i0.ɵɵdirectiveInject(i5.CommonService), i0.ɵɵdirectiveInject(i6.FormBuilder), i0.ɵɵdirectiveInject(i7.SsoAuthService), i0.ɵɵdirectiveInject(i8.Title), i0.ɵɵdirectiveInject(i9.HomeGeomapService), i0.ɵɵdirectiveInject(i10.WebsocketService), i0.ɵɵdirectiveInject(i11.RouterService));\n  };\n  ActiveDevicesGeomapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ActiveDevicesGeomapComponent,\n    selectors: [[\"app-active-devices-geomap\"]],\n    viewQuery: function ActiveDevicesGeomapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(MultiSelectComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.systemInfo = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.MultiSelectComponent = _t.first);\n      }\n    },\n    decls: 17,\n    vars: 10,\n    consts: [[1, \"loader-wrapper\"], [1, \"my-3\"], [1, \"container\"], [\"role\", \"alert\", \"class\", \"alert alert-warning\", 4, \"ngIf\"], [1, \"row\"], [\"class\", \"kbi-menu-wrapper\", 4, \"ngIf\"], [3, \"formGroup\"], [\"class\", \"pb-2 px-3 mt-4\", 4, \"ngIf\"], [\"class\", \"row\", 4, \"ngIf\"], [\"class\", \"loader-wrapper-info\", 4, \"ngIf\"], [\"class\", \"w-100 alert alert-danger fade show my-3\", 4, \"ngIf\"], [\"id\", \"geoViewIssue\", 1, \"geo-view-issue\"], [\"class\", \"geomap-legends\", 4, \"ngIf\"], [1, \"hide-modal\"], [\"systemInfo\", \"\"], [\"class\", \"custom-inlne-modal hide-modal custom-size-large\", 4, \"ngIf\"], [3, \"systemInfoData\", \"hideInfoBox\", 4, \"ngIf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\"], [1, \"kbi-menu-wrapper\"], [\"id\", \"active-devices\", 1, \"kbi-item\"], [1, \"menu-title\"], [1, \"d-flex\", \"align-content-around\", \"flex-wrap\"], [1, \"stats-value\"], [1, \"pb-2\", \"px-3\", \"mt-4\"], [1, \"row\", \"ccl-filter-row\", \"px-2\"], [1, \"d-flex\", \"flex-wrap\", \"w-100\"], [\"id\", \"current-issues-region\", 1, \"col-item\", \"ccl-form\"], [\"formControlName\", \"region\", \"bindValue\", \"id\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", \"custom-ng-multi\", 3, \"multiple\", \"items\", \"clearable\", \"searchable\", \"placeholder\", \"add\", \"remove\"], [\"regionNgSelect\", \"\"], [\"ng-multi-label-tmp\", \"\"], [\"ng-option-tmp\", \"\"], [\"id\", \"current-issues-location\", 1, \"col-item\", \"ccl-form\"], [\"formControlName\", \"location\", \"bindValue\", \"id\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", \"custom-ng-multi\", 3, \"multiple\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"add\", \"remove\"], [\"locationNgSelect\", \"\"], [\"id\", \"current-issues-system\", 1, \"col-item\", \"ccl-form\"], [\"formControlName\", \"system\", \"bindValue\", \"uuid\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", \"custom-ng-multi\", 3, \"multiple\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"change\", \"add\", \"remove\"], [\"systemNgSelect\", \"\"], [\"id\", \"current-issues-system-type\", 1, \"col-item\", \"ccl-form\"], [\"formControlName\", \"device_type\", 3, \"searchable\", \"multiple\", \"clearable\", \"change\"], [\"value\", \"ALL\"], [\"value\", \"ONT\"], [\"value\", \"OLT\"], [\"id\", \"current-issues-alert-type\", 1, \"col-item\", \"ccl-form\"], [\"formControlName\", \"alertType\", \"bindValue\", \"id\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"items\", \"clearable\", \"searchable\", \"placeholder\", \"change\"], [3, \"cItems\", \"cSelectedItems\", \"cBindValue\", \"cBindLabel\", \"cClearable\", \"cSearchable\", \"cName\", \"cShowCountOfItems\", \"cPlaceHolder\", \"cShowSelectAll\", \"cSelectChange\", \"cBlurChange\"], [\"class\", \"col-item ccl-form\", \"id\", \"current-issues-region\", 4, \"ngIf\"], [\"class\", \"col-item ccl-form position-relative\", \"id\", \"current-issues-system-type\", 4, \"ngIf\"], [1, \"col-item-action\"], [1, \"d-flex\", \"w-100\", \"align-items-start\", \"pl-3\"], [1, \"btn-default\", \"btn-primary\", \"py-0\", \"mr-2\", 3, \"title\", \"click\"], [1, \"btn-link\", \"primary\", \"mt-2\", 3, \"title\", \"click\"], [\"class\", \"ng-selected-label\", 4, \"ngIf\"], [1, \"ng-selected-label\"], [1, \"ng-value-placeholder\"], [1, \"ng-value\"], [\"aria-hidden\", \"true\", 1, \"ng-value-icon\", \"left\", \"cursor-pointer\", 3, \"click\"], [\"class\", \"ng-value-placeholder\", 4, \"ngFor\", \"ngForOf\"], [1, \"ng-value\", 3, \"title\"], [3, \"title\"], [\"formControlName\", \"vendorId\", \"bindValue\", \"value\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"items\", \"clearable\", \"searchable\", \"placeholder\", \"change\", \"remove\"], [\"id\", \"current-issues-system-type\", 1, \"col-item\", \"ccl-form\", \"position-relative\"], [\"formControlName\", \"fsan_serialno\", \"type\", \"text\", \"maxlength\", \"12\", 1, \"form-control\", 3, \"disabled\", \"placeholder\", \"keypress\"], [\"class\", \"mandatory-msg mb-0\", 4, \"ngIf\"], [1, \"mandatory-msg\", \"mb-0\"], [1, \"col-md-12\", \"mt-3\"], [1, \"col-8\"], [1, \"toggle-swtbtn\", \"checkbox\", \"switcher\", \"d-inline-flex\", \"mb-3\", \"mr-3\", 3, \"ngClass\"], [3, \"ngClass\"], [\"for\", \"ActivehideHealthySystems\"], [\"type\", \"checkbox\", \"id\", \"ActivehideHealthySystems\", \"formControlName\", \"showAllSystems\", \"value\", \"true\"], [\"for\", \"ActivehideHealthySystems\", 1, \"ml-3\", \"c-auto\"], [1, \"col-4\", \"text-right\"], [1, \"btn-refresh\", \"mr-3\", \"mb-3\", 3, \"title\", \"click\"], [\"src\", \"../../../../../../assets/img/ic_refresh.svg\"], [1, \"btn-default\", \"btn-dft\", \"h-24-btn\", \"mb-3\", \"mr-3\", 3, \"disabled\", \"click\"], [1, \"loader-wrapper-info\"], [1, \"loader\"], [1, \"d-flex\", \"justify-content-center\"], [\"role\", \"\", 1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"w-100\", \"alert\", \"alert-danger\", \"fade\", \"show\", \"my-3\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [1, \"geomap-legends\"], [\"src\", \"assets/images/geomap-icons/circle.svg\", \"alt\", \"\"], [1, \"dot\", \"critical\"], [\"src\", \"assets/images/geomap-icons/square.svg\", \"alt\", \"\"], [1, \"dot\", \"major\"], [1, \"dot\", \"minor\"], [1, \"dot\", \"no-alarms\"], [1, \"dot\", \"aggregation\"], [1, \"dot\", \"collocation\"], [1, \"custom-inlne-modal\", \"hide-modal\", \"custom-size-large\"], [1, \"mb-3\"], [1, \"cco-secondary-title\", \"text-primary\"], [\"id\", \"clickdeviceName\", 1, \"cursor-pointer\", \"text-decoration-none\"], [\"class\", \"col-12 mb-3\", 4, \"ngIf\"], [1, \"col-12\", \"mb-2\"], [1, \"table\", \"table-borderless\", \"sys-info-table\", \"w-100\"], [4, \"ngIf\"], [1, \"col-12\", \"mb-3\"], [1, \"sys-list-kbi\", \"pt-4\"], [\"class\", \"col-auto border-left\", 4, \"ngIf\"], [1, \"alert\", \"alert-warning\", \"mb-0\"], [1, \"d-flex\", \"pt-2\"], [1, \"col-auto\"], [\"src\", \"../../../../../assets/img/warning-icon.svg\", \"width\", \"24px\", \"height\", \"24px\"], [1, \"col\", \"pl-2\"], [1, \"mb-0\"], [1, \"mb-1\"], [\"id\", \"clickOutageAlarmName\", 1, \"cursor-pointer\", \"text-decoration-none\"], [1, \"text-primary\", \"pl-1\"], [1, \"col-auto\", \"border-left\"], [\"id\", \"clickNoOfSystemAlarms\", 1, \"cursor-pointer\", \"text-decoration-none\"], [\"id\", \"clickNoOfTransformedAlarms\", 1, \"cursor-pointer\", \"text-decoration-none\"], [\"id\", \"clickNoOfcloudHealthAlarms\", 1, \"cursor-pointer\", \"text-decoration-none\"], [\"id\", \"clickNoOfCloudConnectivityAlarms\", 1, \"cursor-pointer\", \"text-decoration-none\"], [3, \"systemInfoData\", \"hideInfoBox\"], [\"systemList\", \"\"]],\n    template: function ActiveDevicesGeomapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"section\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtemplate(3, ActiveDevicesGeomapComponent_div_3_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵtemplate(5, ActiveDevicesGeomapComponent_div_5_Template, 7, 2, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"form\", 6);\n        i0.ɵɵtemplate(7, ActiveDevicesGeomapComponent_section_7_Template, 52, 44, \"section\", 7);\n        i0.ɵɵtemplate(8, ActiveDevicesGeomapComponent_section_8_Template, 17, 10, \"section\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, ActiveDevicesGeomapComponent_div_9_Template, 6, 1, \"div\", 9);\n        i0.ɵɵtemplate(10, ActiveDevicesGeomapComponent_div_10_Template, 6, 1, \"div\", 10);\n        i0.ɵɵelement(11, \"div\", 11);\n        i0.ɵɵtemplate(12, ActiveDevicesGeomapComponent_div_12_Template, 49, 8, \"div\", 12);\n        i0.ɵɵelementStart(13, \"section\", 13, 14);\n        i0.ɵɵtemplate(15, ActiveDevicesGeomapComponent_div_15_Template, 33, 13, \"div\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, ActiveDevicesGeomapComponent_app_system_list_16_Template, 2, 1, \"app-system-list\", 16);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasScopeAccess);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasScopeAccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.filtersForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasScopeAccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasScopeAccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading && ctx.hasScopeAccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasScopeAccess);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.systemInfoData);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.canShowSystemList || ctx.canShowAlertTypeList) && ctx.hasScopeAccess);\n      }\n    },\n    directives: [i12.NgIf, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i13.NgSelectComponent, i6.NgControlStatus, i6.FormControlName, i13.ɵi, i13.ɵf, i13.ɵr, i14.MultiSelectComponent, i12.NgForOf, i6.DefaultValueAccessor, i6.MaxLengthValidator, i12.NgClass, i6.CheckboxControlValueAccessor, i15.SystemListComponent],\n    styles: [\".kbi-menu-wrapper[_ngcontent-%COMP%]{display:flex;width:100%}.kbi-item[_ngcontent-%COMP%]{flex-grow:1;border-left:1px solid #EBEAEF;padding-left:12px}.kbi-item[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{font-size:30px!important;color:#0054b2!important;line-height:32px!important;font-weight:300}.kbi-item[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{color:#1a1f22;font-size:14px;line-height:16.4px}.kbi-item[_ngcontent-%COMP%]   .red[_ngcontent-%COMP%]{color:#ff3600}.kbi-item[_ngcontent-%COMP%]   .orange[_ngcontent-%COMP%]{color:#fc7235}.kbi-item[_ngcontent-%COMP%]   .blue[_ngcontent-%COMP%]{color:#72b4ff}.kbi-item[_ngcontent-%COMP%]   .yellow[_ngcontent-%COMP%]{color:#f3b426}.kbi-item[_ngcontent-%COMP%]   .green[_ngcontent-%COMP%]{color:#82bf00}.health-pon-menu-item[_ngcontent-%COMP%] + .health-pon-menu-item[_ngcontent-%COMP%]{margin-left:2%}.loader-wrapper[_ngcontent-%COMP%]{position:relative}.loader-wrapper-info[_ngcontent-%COMP%]{transform:translate(-50%,-50%);top:50%;left:50%;position:absolute;width:100%;z-index:100;height:100%}.acg-container[_ngcontent-%COMP%]{display:flex;width:100%}  .MicrosoftMap .Infobox{display:none}  .MicrosoftMap .Infobox .infobox-actions{height:25px}  .InfoboxCustom .customInfobox{cursor:text;padding:10px;background-color:#fff;outline:black;border-radius:10px;border:1px solid #ddd;pointer-events:auto!important}  .InfoboxCustom .customInfobox .info-title{font-size:18px;font-weight:bold;line-height:35px}  .InfoboxCustom .customInfobox table tr td a{cursor:pointer!important;text-decoration:underline;color:#007bff}  .InfoboxCustom .customInfobox table tr td:first-child{padding-right:30px}  a.customInfoboxCloseButton:link, a.customInfoboxCloseButton[_ngcontent-%COMP%]:visited{cursor:pointer!important;color:#000;text-decoration:none;position:absolute;top:0px;right:10px;font-family:\\\"Segoe UI\\\",Tahoma,Geneva,Verdana,sans-serif;font-weight:bold;font-size:14px}  a.customSystemListCloseButton:link, a.customSystemListCloseButton[_ngcontent-%COMP%]:visited{cursor:pointer!important;color:#000;text-decoration:none;position:absolute;top:0px;right:10px;font-family:\\\"Segoe UI\\\",Tahoma,Geneva,Verdana,sans-serif;font-weight:bold;font-size:14px}  .InfoboxCustom .customList{max-width:700px;min-width:420px;height:510px;min-height:470px;max-height:510px;padding:10px;cursor:text;background-color:#fff;outline:none;border-radius:10px;pointer-events:auto!important}  .InfoboxCustom .customList .search-input{min-height:38px;max-height:42px;line-height:inherit;border-radius:26px;background:#f8f8fa;padding:0 15px;font-size:14px;font-weight:400;color:#646363;border:1px solid transparent}  .InfoboxCustom .customList .clear-search{position:relative;right:24px}  .InfoboxCustom .customList .search-input:active,   .InfoboxCustom .customList .search-input:focus{border:1px solid #0278ff}  .InfoboxCustom .customList table{min-width:415px;max-width:675px}  .InfoboxCustom .customList table thead{z-index:100;background-color:#fff}  .InfoboxCustom .customList table thead tr{display:block;border-bottom:2px solid lightgray;margin-bottom:3px}  .InfoboxCustom .customList table thead tr th:nth-child(1){width:160px;min-width:160px;word-break:break-word}  .InfoboxCustom .customList table thead tr th:nth-child(2){width:140px;min-width:140px;word-break:break-word}  .InfoboxCustom .customList table thead tr th:nth-child(3){width:65px;min-width:65px}  .InfoboxCustom .customList table thead tr th:nth-child(4){width:100px;min-width:100px}  .InfoboxCustom .customList table thead tr th:nth-child(5){width:85px;min-width:85px}  .InfoboxCustom .customList table thead tr th:nth-child(6){width:140px;min-width:140px}  .InfoboxCustom .customList table #data-available{overflow:auto;display:block;height:405px;width:100%}  .InfoboxCustom .customList table #data-available tr:nth-child(even){background-color:#f2f2f2}  .InfoboxCustom .customList table #data-available tr td .same-line{position:relative;padding-left:12px}  .InfoboxCustom .customList table #data-available tr td .same-line span.dot{position:absolute;left:0;top:9.5px}  .InfoboxCustom .customList table #data-available tr td a{cursor:pointer!important;color:#007bff}  .InfoboxCustom .customList table #data-available tr td:nth-child(1){width:160px;min-width:160px;word-break:break-word}  .InfoboxCustom .customList table #data-available tr td:nth-child(2){width:140px;min-width:140px;word-break:break-word}  .InfoboxCustom .customList table #data-available tr td:nth-child(3){width:65px;min-width:65px}  .InfoboxCustom .customList table #data-available tr td:nth-child(4){width:100px;min-width:100px;word-break:break-word}  .InfoboxCustom .customList table #data-available tr td:nth-child(5){width:85px;min-width:85px}  .InfoboxCustom .customList table #data-available tr td:nth-child(6){width:140px;min-width:140px;word-break:break-word}  .InfoboxCustom .customList table #no-data-available{display:block;height:405px;width:100%}  .InfoboxCustom .customList table #no-data-available tr .with-ont{min-width:610px;max-width:655px}  .InfoboxCustom .customList table #no-data-available tr .without-ont{min-width:495px;max-width:655px}.geomap-legends[_ngcontent-%COMP%]{padding:10px;width:220px;position:absolute;bottom:5px;left:20px;background-color:#fff}.geomap-legends[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{width:100%;outline:1px solid #00000075;font-size:12px}.geomap-legends[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]{background-color:#fff}.geomap-legends[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{border:1px solid #ddd;padding:5px}.geomap-legends[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{border:1px solid #ddd;padding:0 5px}.geomap-legends[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(2){border-right:1px solid #00000075}  .dot{height:8px;width:8px;border-radius:50%;display:inline-block}  .dot.critical{background-color:#c70000}  .dot.major{background-color:#fc7235}  .dot.minor{background-color:#f3b426}  .dot.no-alarms{background-color:green}  .dot.aggregation{background-color:#008cff}  .dot.collocation{background-color:purple}.geo-view-issue[_ngcontent-%COMP%]{width:100%;height:80vh}.clear-search-buton[_ngcontent-%COMP%]{position:absolute;top:15px;right:15px}.clear-search-buton[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{width:11.71px;height:11.71px;background-size:11.71px}.geomap-view-table[_ngcontent-%COMP%]{max-height:350px;overflow-y:auto;margin-top:1px;border:1px solid #ddd}.geomap-view-table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(2), .geomap-view-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(2), .geomap-view-table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(3), .geomap-view-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(3), .geomap-view-table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(4), .geomap-view-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(4){max-width:100px}.geomap-view-table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(5), .geomap-view-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:nth-child(5){max-width:80px}.hide-close-search[_ngcontent-%COMP%]{display:none}.show-close-search[_ngcontent-%COMP%]{color:gray;display:block;position:absolute;right:40px;font-size:22px;top:2px}.showHideTable[_ngcontent-%COMP%]{visibility:hidden}  .ccl-form .ng-select-multiple input{min-height:auto}  .custom-model-service .modal-content{padding:0!important}  .custom-model-service .modal-dialog{max-width:67.31%!important}.diable-div[_ngcontent-%COMP%]{pointer-events:none;opacity:.5}.cursornallow[_ngcontent-%COMP%]{cursor:not-allowed}.btn-refresh[_ngcontent-%COMP%]{border:none;background:none;outline:none;padding:0}.h-24-btn[_ngcontent-%COMP%]{height:24px;line-height:16px!important;padding:3px 20px!important;font-size:14px}.ccl-filter-row[_ngcontent-%COMP%]{background:#F8F8FA;border-top:1px solid #EBEAEF;border-bottom:1px solid #EBEAEF;padding:13px 0 22px}.ccl-filter-row[_ngcontent-%COMP%]   .col-item[_ngcontent-%COMP%]{width:15%;margin-left:15px}.ccl-filter-row[_ngcontent-%COMP%]   .col-item.ccl-form[_ngcontent-%COMP%] > input[_ngcontent-%COMP%]{background-color:#fff}.ccl-filter-row[_ngcontent-%COMP%]   .col-item-action[_ngcontent-%COMP%]{padding-top:35px}.ccl-filter-row[_ngcontent-%COMP%]   .btn-link[_ngcontent-%COMP%]{border:none;background:transparent;margin-top:5px}.ccl-filter-row[_ngcontent-%COMP%]   .btn-link[_ngcontent-%COMP%]:hover{color:#0069d9;text-decoration:none}  .ccl-filter-row .ng-select .ng-select-container{background-color:#fff!important}.ccl-filter-wrapper[_ngcontent-%COMP%]   .col-item[_ngcontent-%COMP%]{margin-right:15px;margin-bottom:15px}.ccl-filter-wrapper[_ngcontent-%COMP%]   .col-item[_ngcontent-%COMP%]:last-child{margin-right:0}.flex-g[_ngcontent-%COMP%]{flex-grow:1;display:grid;align-items:flex-start}.btn-sm-24[_ngcontent-%COMP%]{min-height:24px;line-height:normal!important;font-size:14px}.col-item-action[_ngcontent-%COMP%]   .btn-link[_ngcontent-%COMP%]{border:transparent;outline:none;background:transparent;color:#0278ff;padding:0!important;line-height:12px!important}.col-item-action[_ngcontent-%COMP%]{padding-top:33px}.col-item-action[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{white-space:nowrap;text-overflow:ellipsis;overflow:hidden}@media screen and (min-width: 1400px){.ccl-filter-row[_ngcontent-%COMP%]   .col-item[_ngcontent-%COMP%]{width:11%}}  .custom-ng-multi .ng-select-container .ng-value-container .ng-value{position:relative;background-color:#dcecff!important;padding:2px 12px 2px 18px;border-radius:16px!important;font-weight:600!important;color:#0054b2!important;font-size:12px!important;line-height:15px;min-height:19px}  .custom-ng-multi.ng-select-multiple .ng-select-container .ng-value-container{width:calc(100% - 20px)}  .custom-ng-multi .ng-select-container .ng-value-container .ng-value .ng-value-label,   .custom-ng-multi .ng-select-container .ng-value-container .ng-value .ng-value-icon.left{padding:0!important;border:0!important}  .custom-ng-multi .ng-select-container .ng-value-container .ng-value .ng-value-icon.left{left:6px;top:2px;position:absolute}.ng-selected-label[_ngcontent-%COMP%]{line-height:18px;max-width:100%}.ng-value-placeholder[_ngcontent-%COMP%]{height:19px;margin-bottom:5px}.ng-selected-label[_ngcontent-%COMP%]   .ng-value[_ngcontent-%COMP%]{display:inline-block;text-overflow:ellipsis;overflow:hidden;max-width:100%}input[_ngcontent-%COMP%]:disabled{cursor:not-allowed}it-works[_ngcontent-%COMP%]{z-index:9999}.hide-modal[_ngcontent-%COMP%]{display:none}.custom-inlne-modal[_ngcontent-%COMP%]{background-color:#fff;box-shadow:0 5px 15px #80808040;max-width:500px;padding:17px 20px;border-radius:26px;cursor:auto}.custom-inlne-modal[_ngcontent-%COMP%]   .sys-list-kbi[_ngcontent-%COMP%]{display:flex;border-top:1px solid #cccccc}.custom-inlne-modal[_ngcontent-%COMP%]   .sys-info-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{padding:2px 0}.custom-size-large[_ngcontent-%COMP%]{max-width:530px!important}\"]\n  });\n  return ActiveDevicesGeomapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}