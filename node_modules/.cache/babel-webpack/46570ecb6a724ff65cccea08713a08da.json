{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./sso-auth.service\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, sso, activatedRoute) {\n      this.router = router;\n      this.sso = sso;\n      this.activatedRoute = activatedRoute;\n      this.previousUrl = \"\";\n    }\n    canActivate(next, state) {\n      if (state.url.indexOf('/logout') > -1 && !this.sso.getRefreshToken()) {\n        console.log(\"user got already logged out, redirecting to login\");\n        this.router.navigate(['/login']);\n        return false;\n      }\n      let enttlmnts = this.sso.getEntitlements();\n      // if ((state.url).indexOf('/organization-admin/') !== -1) {\n      //   let roles = this.sso.getRoles();\n      //   if (roles && roles.indexOf('OrgAdmin') === -1) {\n      //     this.router.navigate(['/login']);\n      //     return false;\n      //   }\n      // } else \n      if (state.url.indexOf('/systemAdministration/') !== -1) {\n        let roles = this.sso.getRoles();\n        if (roles && roles.indexOf('SysAdmin') === -1) {\n          this.router.navigate(['/login']);\n          return false;\n        }\n      } else if (state.url.indexOf('/cco-subscriber-operations/operations/') !== -1) {\n        if (enttlmnts[210] && !enttlmnts[102]) {\n          this.router.navigate(['/login']);\n          return false;\n        }\n      } else if (state.url.indexOf('/cco/operations/cco-subscriber-operations/configurations/background-site-scan') !== -1) {\n        if (!(enttlmnts[118] || enttlmnts[120])) {\n          this.router.navigate(['/cco/operations/cco-subscriber-operations/configurations/dial-plan']);\n          return false;\n        }\n      }\n      if (enttlmnts[210] && !enttlmnts[102]) {\n        let blockedRoutes = ['/organization-admin/cco-admin/network-systems/list', '/organization-admin/cco-admin/network-systems/add', '/organization-admin/cco-admin/cco-admin-configurations', '/cco/system/cco-network-system/add', '/cco/system/cco-subscriber-system/add-service-system', '/cco/dashboard', '/cco/operations/cco-reports/ont-devices', '/cco/services/subscribers/system/list'];\n        if (blockedRoutes.indexOf(state.url) !== -1) {\n          this.router.navigate(['/login']);\n          return false;\n        }\n      }\n      return true;\n    }\n    canLoad(route, segments) {\n      let pathname = window.location.pathname;\n      if (pathname.indexOf('/shad/') > -1) {\n        this.router.navigate(['/login']);\n        return false;\n      }\n      const state = this.sso.checkScope('cloud.rbac.csc.calloutcome.enforce', 'read') ? JSON.parse(sessionStorage.getItem('extUserCheckModuleWise') || \"{}\") : {};\n      const redirectionPath = segments.map(obj => `/${obj.path}`).join('');\n      if (Object.keys(state).length && redirectionPath != (state === null || state === void 0 ? void 0 : state.routeTo) && this.sso.commonOutcomeWarnConditn(false)) {\n        state.externalUserNotAllowed = true;\n        this.router.navigate([(state === null || state === void 0 ? void 0 : state.routeTo) || '/support/overview'], {\n          \"state\": state\n        });\n        return false;\n      } else if ((state.routeTo || '').includes('support') && (sessionStorage.getItem('insideSubView') || sessionStorage.getItem('supportInsights')) && (history === null || history === void 0 ? void 0 : history.state)) {\n        history.state.externalUserNotAllowed = true;\n      }\n      return this.checkLogin();\n    }\n    canActivateChild(route, state) {\n      //console.log(route);\n      let url = state.url;\n      if (url.indexOf('traffic-reports') !== -1) {\n        if (this.sso.getSubscriberEndpointId()) {\n          return true;\n        } else {\n          this.router.navigate(['/support/subscriber/search']);\n          return false;\n        }\n      }\n      return true;\n    }\n    checkLogin() {\n      if (this.sso.isLoggedIn()) {\n        //console.log(this.router.url);\n        return true;\n      } else {\n        this.router.navigate(['/login']);\n        return false;\n      }\n    }\n    canDeactivate(component, currentRoute, currentState, nextState) {\n      var _a, _b;\n      if ((((_a = history === null || history === void 0 ? void 0 : history.state) === null || _a === void 0 ? void 0 : _a.externalSearch) || sessionStorage.getItem('insideSubView') || sessionStorage.getItem('supportInsights')) && this.sso.commonOutcomeWarnConditn()) {\n        let navigatedToTile = ['overview', 'service', 'router', 'wifi', 'device', 'application', 'traffic-reports', 'insights'].some(ele => nextState.url.includes(`support/${ele}`) || nextState.url.includes('logout'));\n        history.state.externalUserNotAllowed = !navigatedToTile;\n        if (nextState.url.includes('logout') && document.querySelector('#openLogoutConfirmationModel')) {\n          document.querySelector('#openLogoutConfirmationModel').click();\n          return false;\n        }\n        const navInfo = this.sso.parseStored('extUserCheckModuleWise');\n        sessionStorage.setItem('extUserCheckModuleWise', JSON.stringify(Object.assign(Object.assign({}, history.state), {\n          \"prevUrl\": navigatedToTile ? currentState.url : (navInfo === null || navInfo === void 0 ? void 0 : navInfo.prevUrl) || currentState.url,\n          \"routeTo\": navigatedToTile ? nextState.url : currentState.url\n        })));\n        if ((_b = history === null || history === void 0 ? void 0 : history.state) === null || _b === void 0 ? void 0 : _b.externalSearch) this.router.navigate([navigatedToTile ? nextState.url : currentState.url], {\n          state: history.state\n        });\n        setTimeout(() => {\n          if (!navigatedToTile && document.getElementById('extUserCreateWarning')) document.getElementById('extUserCreateWarning').classList.remove('d-none');\n        }, 100);\n        return navigatedToTile;\n      }\n      return true;\n    }\n  }\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.SsoAuthService), i0.ɵɵinject(i1.ActivatedRoute));\n  };\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}