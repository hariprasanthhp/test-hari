{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nimport * as i3 from \"@angular/router\";\nexport let EndpointReportsService = /*#__PURE__*/(() => {\n  class EndpointReportsService {\n    constructor(httpClient, sso, activatedRoute, router) {\n      this.httpClient = httpClient;\n      this.sso = sso;\n      this.activatedRoute = activatedRoute;\n      this.router = router;\n    }\n    getApplications(params) {\n      var _a, _b, _c;\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      startDate = this.getStartUTCDate(params.startDate, 0);\n      endDate = this.getEndUTCDate(params.endDate);\n      let granularity = this.getGranularity(startDate, endDate, 'topApplications');\n      if (params.criteriaSelected == 'usage') {\n        startDate = this.getISOStartOfDay(startDate);\n        endDate = this.getISOEndOfDay(endDate);\n      }\n      let url = '';\n      let inpParams = {\n        granularity: granularity,\n        tenant: 0,\n        startTime: startDate,\n        // endpoint: sessionStorage.getItem('aggregate_Endpoint_Id') ? JSON.parse(sessionStorage.getItem('aggregate_Endpoint_Id')) : this.activatedRoute.snapshot.queryParamMap.get('id'),\n        endpoint: (_c = (_b = (_a = params['endpointID']) !== null && _a !== void 0 ? _a : sessionStorage.getItem('aggregate_Endpoint_Id')) !== null && _b !== void 0 ? _b : this.activatedRoute.snapshot.queryParamMap.get('id')) !== null && _c !== void 0 ? _c : '',\n        output: params['criteriaSelected'],\n        direction: params['directionSelected'].toLowerCase(),\n        org: this.sso.getOrganizationID(this.router.url),\n        count: params['limit'],\n        endTime: endDate\n      };\n      if (params['groupSelected'] === 'yes') {\n        inpParams['groupApplications'] = true;\n      }\n      let query = \"\";\n      for (var key in inpParams) {\n        if (typeof inpParams[key] !== 'undefined') {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(inpParams[key]);\n        }\n      }\n      url = `${environment.SUPPORT_URL}/traffic/reports/topapplications?${query}`;\n      return this.httpClient.get(url);\n    }\n    getAppTraffic(params) {\n      var _a, _b, _c;\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      startDate = this.getStartUTCDate(params.startDate, 0);\n      endDate = this.getEndUTCDate(params.endDate);\n      let granularity = this.getGranularity(startDate, endDate);\n      let url = '';\n      let inpParams = {\n        granularity: '1hour',\n        org: this.sso.getOrganizationID(this.router.url),\n        tenant: 0,\n        startTime: startDate,\n        endTime: endDate,\n        // endpoint: sessionStorage.getItem('aggregate_Endpoint_Id') ? JSON.parse(sessionStorage.getItem('aggregate_Endpoint_Id')) : this.activatedRoute.snapshot.queryParamMap.get('id'),\n        endpoint: (_c = (_b = (_a = params['endpointID']) !== null && _a !== void 0 ? _a : sessionStorage.getItem('aggregate_Endpoint_Id')) !== null && _b !== void 0 ? _b : this.activatedRoute.snapshot.queryParamMap.get('id')) !== null && _c !== void 0 ? _c : '',\n        groupBy: 'application',\n        output: 'rate',\n        count: params['limit'],\n        direction: 'both'\n      };\n      let query = \"\";\n      for (var key in inpParams) {\n        if (typeof inpParams[key] !== 'undefined') {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(inpParams[key]);\n        }\n      }\n      url = `${environment.SUPPORT_URL}/traffic/timeseries?${query}`;\n      return this.httpClient.get(url);\n    }\n    getRate(params, enpoint) {\n      let orgId = this.sso.getOrg(this.orgId);\n      let criteria = 'rate';\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      let granularity = this.getGranularity(startDate, endDate, 'rate');\n      startDate = this.getStartUTCDate(params.startDate, 0);\n      endDate = this.getEndUTCDate(params.endDate);\n      params.startTime = params.startTime - 1;\n      params.endTime = params.endTime - 1;\n      let diff = moment(endDate).diff(moment(startDate), \"hour\");\n      let dayDiff = moment(endDate).diff(moment(startDate), \"days\");\n      granularity = dayDiff <= 31 ? '1hour' : '24hour';\n      if (diff <= 72 && dayDiff <= 3) {\n        let d = new Date(params.startDate);\n        startDate = this.getStartUTCDate(params.startDate, params.startTime);\n        endDate = this.getStartUTCDate(d, params.endTime);\n        granularity = '1hour';\n        params.APIStartDate = startDate;\n        params.APIendDate = endDate;\n      }\n      let url = `${environment.SUPPORT_URL}/traffic/timeseries?${this.sso.getOrg(this.orgId)}tenant=0&granularity=${granularity}&startTime=${startDate}&endTime=${endDate}&output=${criteria}&endpoint=${enpoint}`;\n      return this.httpClient.get(url);\n    }\n    getStartUTCDate(dt, addHours) {\n      let d = new Date(dt);\n      d.setHours(addHours, 0, 0, 0);\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getEndUTCDate(dt) {\n      let d = new Date(dt);\n      d.setHours(0, 0, 0, 0);\n      d.setDate(new Date(d).getDate() + 1);\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getISOStartOfDay(dt) {\n      let d = new Date(dt);\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let date = `${year}-${month}-${day}T00:00:00Z`;\n      return date;\n    }\n    getISOEndOfDay(dt) {\n      let d = new Date(dt);\n      d.setDate(new Date(d).getDate());\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let date = `${year}-${month}-${day}T00:00:00Z`;\n      return date;\n    }\n    getGranularity(startDate, endDate, chart) {\n      let granularity = '24hour';\n      // CCL-57017 - Changes made for this ticket\n      if (chart == 'topApplications') {\n        return granularity;\n      }\n      let diff = moment(endDate).diff(moment(startDate), \"hour\");\n      if (diff <= 24) {\n        granularity = \"1hour\";\n      } else {\n        granularity = \"24hour\";\n      }\n      if (chart && chart == 'rate') {\n        let dateDiff = moment(endDate).diff(moment(startDate), \"days\");\n        if (dateDiff <= 31) {\n          granularity = \"1hour\";\n        } else {\n          granularity = \"24hour\";\n        }\n      }\n      return granularity;\n    }\n  }\n  EndpointReportsService.ɵfac = function EndpointReportsService_Factory(t) {\n    return new (t || EndpointReportsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService), i0.ɵɵinject(i3.ActivatedRoute), i0.ɵɵinject(i3.Router));\n  };\n  EndpointReportsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EndpointReportsService,\n    factory: EndpointReportsService.ɵfac,\n    providedIn: 'root'\n  });\n  return EndpointReportsService;\n})();","map":null,"metadata":{},"sourceType":"module"}