{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport Dygraph from 'dygraphs';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/dygraph-sitescan.service\";\nimport * as i2 from \"../../services/wifi-mock-data\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../../data.service\";\nimport * as i5 from \"src/app-services/translate.service\";\nconst _c0 = [\"graph\"];\nvar keyWifidiagSiteScanObj = \"wifidiag.sitescan.obj\";\nvar NORMAL = 'normal';\nvar Band20 = '20MHZ',\n  Band40 = '40MHZ',\n  Band80 = '80MHZ',\n  Band160 = '160MHZ';\nvar BLANK = '';\nvar HIDDEN = 'Hidden';\nvar Band20Width = 2,\n  Band40Width = 4,\n  Band80Width = 8,\n  Band160Width = 16;\nvar SIGNAL_MIN = -100;\nvar SPLITTER = '$$$';\nvar busyness_colors = {};\nbusyness_colors[Band20] = {}, busyness_colors[Band40] = {}, busyness_colors[Band80] = {}, busyness_colors[Band160] = {};\nbusyness_colors[Band20][NORMAL] = '#F7C343';\nbusyness_colors[Band40][NORMAL] = '#F7C343';\nbusyness_colors[Band80][NORMAL] = '#F7C343';\nbusyness_colors[Band160][NORMAL] = '#F7C343';\nconst keyWifiCurrentTabForFive = 'five';\nconst keyWifidiagData = 'wifidiag.data';\nconst channelFilter = 'channelFilter',\n  ssidFilter = 'ssidFilter'; /***begin-aswin-11-05-2021-dygraph-filter-channel-issue-fix */\nexport let DygraphHistorySiteScanComponent = /*#__PURE__*/(() => {\n  class DygraphHistorySiteScanComponent {\n    constructor(SiteScanService, wifiMockData2, route, dataService, translateService) {\n      this.SiteScanService = SiteScanService;\n      this.wifiMockData2 = wifiMockData2;\n      this.route = route;\n      this.dataService = dataService;\n      this.translateService = translateService;\n      this.enableBusynessCheckBox = new EventEmitter(); /***begin-aswin-12-0-2021-busyness-hide */\n      this.SsidNameInfoData = {};\n      this.ssYaxisText = 'Power';\n      this.ssXaxisText = 'Channel';\n      this.ssY2axisText = 'Busyness';\n      this.renderSiteScanGraph = function (reload) {\n        var _a;\n        var siteScanObj;\n        var y1Top = 20;\n        if (reload) {\n          if (this.type == '2.4G') {\n            //this.siteScanTypeChange('two');\n            sessionStorage.setItem('currentTab', 'two');\n            sessionStorage.setItem('radioSummary', JSON.stringify(this.radioSummary['2.4G']));\n            sessionStorage.setItem('mainchannelvalue', this.chartData && this.chartData['24g'] ? JSON.stringify(this.chartData['24g'].current) : '');\n          } else if (this.type == '5G') {\n            sessionStorage.setItem('currentTab', 'five');\n            sessionStorage.setItem('radioSummary', JSON.stringify(this.radioSummary['5G']));\n            sessionStorage.setItem('mainchannelvalue', this.chartData && this.chartData['5g'] ? JSON.stringify(this.chartData['5g'].current) : '');\n          } else {\n            sessionStorage.setItem('currentTab', 'six');\n            sessionStorage.setItem('radioSummary', this.radioSummary ? JSON.stringify(this.radioSummary['6G']) : '');\n            sessionStorage.setItem('mainchannelvalue', this.chartData && this.chartData['6g'] ? JSON.stringify(this.chartData['6g'].current) : '');\n          }\n          siteScanObj = (_a = this.SiteScanService) === null || _a === void 0 ? void 0 : _a.getSiteScanObj();\n        } else {\n          siteScanObj = JSON.parse(sessionStorage.getItem(keyWifidiagSiteScanObj));\n        }\n        var lines = siteScanObj ? this.toCsv(siteScanObj) : '';\n        var bandwidthList = siteScanObj ? siteScanObj['bandwidthList'] : '';\n        var annotations = siteScanObj ? siteScanObj['annotations'] : '';\n        var ssidList = siteScanObj ? siteScanObj['ssidList'] : '';\n        var signalKeyList = siteScanObj ? siteScanObj['signalKeyList'] : '';\n        var mainSSID = siteScanObj ? siteScanObj.mainSSID : '';\n        var currentTab = sessionStorage.getItem('currentTab');\n        var lineLabels = this.getlabels(bandwidthList, signalKeyList);\n        // Use step plot for Main SSID and busyness\n        var stepPlotSeires = {\n          'GigaCenterMainSSIDSeriesID': {\n            stepPlot: true,\n            strokeWidth: 3,\n            strokePattern: Dygraph.DASHED_LINE,\n            color: \"#0279FF\"\n          }\n        };\n        _.each(bandwidthList, function (bandwidth) {\n          stepPlotSeires[bandwidth] = {\n            axis: 'y2',\n            color: busyness_colors[bandwidth][NORMAL],\n            stepPlot: true,\n            fillGraph: true\n          };\n        });\n        var that = this;\n        var axisLabelFormatter = currentTab === keyWifiCurrentTabForFive ? axisLabelFormatterFor50 : currentTab === 'two' ? axisLabelFormatterFor24 : axisLabelFormatterFor6;\n        var getVisibleFlagList = function (ssids, bandwidths) {\n          var allkeysList = _.union([mainSSID.id], signalKeyList, bandwidthList);\n          var allSelectedIds = [];\n          if (that.ssidChecked) {\n            if (ssids && ssids.length) {\n              allSelectedIds = _.union(allSelectedIds, ssids);\n            } else {\n              allSelectedIds = _.union(allSelectedIds, ssidList);\n            }\n          }\n          if (bandwidths && bandwidths.length) {\n            allSelectedIds = _.union(allSelectedIds, bandwidths);\n          } else {\n            allSelectedIds = _.union(allSelectedIds, bandwidthList);\n          }\n          var startsWith = function (str1, str2) {\n            return str1.indexOf(str2) === 0;\n          };\n          var matchIndexesInAllKeysList = function (allSelectedIds) {\n            var matched = [],\n              macaddress = null,\n              startStr = HIDDEN + \"-\";\n            _.each(allSelectedIds, function (selected) {\n              if (selected.indexOf(startStr) == 0) {\n                macaddress = selected.slice(startStr.length);\n              }\n              _.each(allkeysList, function (key, index) {\n                if (macaddress != null) {\n                  // The name of SSID is empty or Hidden, use macAddress to search\n                  if (key.indexOf(macaddress) != -1) {\n                    matched === null || matched === void 0 ? void 0 : matched.push(index);\n                  }\n                } else if (startsWith(key, selected)) {\n                  matched === null || matched === void 0 ? void 0 : matched.push(index);\n                }\n              });\n            });\n            return matched;\n          };\n          var flagList = [];\n          _.each(allkeysList, function (key, index) {\n            flagList === null || flagList === void 0 ? void 0 : flagList.push(false);\n          });\n          flagList[0] = true; // Always display main SSID\n          var visibleList = matchIndexesInAllKeysList(allSelectedIds);\n          _.each(visibleList, function (index) {\n            flagList[index] = true;\n          });\n          return flagList;\n        };\n        var visibleFlagListConstruct = function (ssids, bandwidths) {\n          var allkeysList = _.union([mainSSID.id], signalKeyList, bandwidthList);\n          var allSelectedIds = [];\n          var flagList = [];\n          _.each(allkeysList, function (key, index) {\n            flagList === null || flagList === void 0 ? void 0 : flagList.push(false);\n          });\n          if (that.ssidChecked) {\n            if (ssids && ssids.length) {\n              _.each(ssids, function (ssid, sindex) {\n                var ssid = ssid;\n                _.each(allkeysList, function (key, keyindex) {\n                  //var index = ssids.indexOf()\n                  var key = key;\n                  //  if (key.indexOf(ssid) != -1) {\n                  if (key.includes(ssid)) {\n                    flagList[keyindex] = true;\n                  }\n                });\n              });\n              flagList[0] = true; // Always display main SSID\n            } else {\n              // allSelectedIds = _.union(allSelectedIds, ssidList);\n              flagList = [];\n              _.each(allkeysList, function (key, index) {\n                flagList === null || flagList === void 0 ? void 0 : flagList.push(true);\n              });\n              flagList[0] = true; // Always display main SSID\n            }\n          } else {\n            flagList[0] = true;\n          }\n          if (that.busynessChecked) {\n            if (bandwidthList.length != 0) {\n              flagList[flagList.length - 1] = true;\n            }\n          } else {\n            if (bandwidthList.length != 0) {\n              flagList[flagList.length - 1] = false;\n            }\n          }\n          return flagList;\n        };\n        var ssids = this.siteScanSSIDSelected;\n        var bandwidths = bandwidthList;\n        console.log(\"ssids\", ssids);\n        console.log(\"bandwidth\", bandwidths);\n        /***begin-aswin-12-0-2021-busyness-hide */\n        // if (bandwidthList.length != 0) {\n        //   this.enableBusynessCheckBox.emit({\n        //     showSiteScanBusyness: true,\n        //     busynessChecked: true,\n        //     sitescanBusynessBand: bandwidthList[0]\n        //   });\n        // }\n        /***begin-aswin-12-0-2021-busyness-hide */\n        //var visibleFlagList = getVisibleFlagList(ssids, bandwidths);\n        var visibleFlagList = visibleFlagListConstruct(ssids, bandwidths);\n        const g = new Dygraph(this.graphdiv.nativeElement, lines, {\n          xlabel: this.ssXaxisText,\n          ylabel: this.ssYaxisText + ' (dBm)',\n          y2label: this.ssY2axisText + ' (%)',\n          series: stepPlotSeires,\n          legend: 'never',\n          showRangeSelector: true,\n          colors: ['#FF8238', '#B926F0', '#0027FF', '#FF489D'],\n          rangeSelectorHeight: 30,\n          rangeSelectorPlotStrokeColor: 'white',\n          rangeSelectorPlotFillColor: 'white',\n          highlightCircleSize: 1,\n          displayAnnotations: true,\n          fillAlpha: 0.05,\n          visibility: visibleFlagList,\n          labels: lineLabels,\n          axes: {\n            x: {\n              drawGrid: false,\n              pixelsPerLabel: 1,\n              axisLabelFormatter: axisLabelFormatter\n            },\n            y: {\n              drawGrid: true,\n              pixelsPerLabel: 20,\n              axisLabelWidth: 70,\n              axisLabelFormatter: function (y) {\n                if (y === 0) {\n                  return 0; //null\n                } else {\n                  return y;\n                }\n              },\n              valueRange: [-100, y1Top]\n            },\n            y2: {\n              pixelsPerLabel: 20,\n              axisLabelWidth: 70,\n              axisLabelFormatter: function (y2) {\n                if (y2 === 0 || y2 > 100) {\n                  return null;\n                } else {\n                  let digits = y2.toFixed(4);\n                  let numberof = Number(digits).toString();\n                  return numberof;\n                }\n              },\n              valueRange: [0, 120]\n            }\n          }\n        });\n        g.setAnnotations(annotations);\n      };\n    }\n    ngOnDestroy() {\n      if (this.languageSubject) this.languageSubject.unsubscribe();\n    }\n    ngOnInit() {\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.ssXaxisText = this.language.Channel;\n        this.ssYaxisText = this.language.Power;\n        this.ssY2axisText = this.language.Busyness;\n        this.renderSiteScanGraph(true);\n      });\n      this.ssXaxisText = this.language.Channel;\n      this.ssYaxisText = this.language.Power;\n      this.ssY2axisText = this.language.Busyness;\n      this.renderSiteScanGraph(true);\n      // this.graphRender()\n    }\n\n    graphRender() {\n      var deviceObj = JSON.parse(sessionStorage.getItem('calix.deviceData'));\n      var deviceInfo = deviceObj.filter(el => el.serialNumber === this.fsan)[0];\n      var deviceInfo = this.deviceInfo;\n      sessionStorage.setItem('calix.wifi.deviceInfo', JSON.stringify(deviceInfo));\n      if (this.type == '2.4G') {\n        //this.siteScanTypeChange('two');\n        sessionStorage.setItem('currentTab', 'two');\n        sessionStorage.setItem('radioSummary', JSON.stringify(this.radioSummary['2.4G']));\n        sessionStorage.setItem('mainchannelvalue', this.chartData && this.chartData['24g'] ? JSON.stringify(this.chartData['24g'].current) : '');\n      } else if (this.type == '5G') {\n        sessionStorage.setItem('currentTab', 'five');\n        sessionStorage.setItem('radioSummary', JSON.stringify(this.radioSummary['5G']));\n        sessionStorage.setItem('mainchannelvalue', this.chartData && this.chartData['5g'] ? JSON.stringify(this.chartData['5g'].current) : '');\n      } else {\n        sessionStorage.setItem('currentTab', 'six');\n        sessionStorage.setItem('radioSummary', JSON.stringify(this.radioSummary['6G']));\n        sessionStorage.setItem('mainchannelvalue', this.chartData && this.chartData['6g'] ? JSON.stringify(this.chartData['6g'].current) : '');\n      }\n      //this.SiteScanService.initParams(deviceInfo.modelName, deviceInfo.dataModelName)\n      if (this.chartData) {\n        var serialNumber = this.chartData['sn'] ? this.chartData['sn'] : deviceInfo.serialNumber;\n        var radio24gObj = this.chartData['24g'];\n        var channelList = [];\n        if (radio24gObj != null && radio24gObj['ranking_list'] != null) {\n          radio24gObj['ranking_list'].forEach((obj, index) => {\n            let objchannel = obj['channel'] ? obj['channel'] : '';\n            channelList === null || channelList === void 0 ? void 0 : channelList.push(objchannel);\n            //channelList.push(obj['channel']);\n          });\n\n          var radio24ChannelList = channelList;\n        }\n        channelList = [];\n        var radio5gObj = this.chartData['5g'];\n        if (radio5gObj != null && radio5gObj['ranking_list'] != null) {\n          radio5gObj['ranking_list'].forEach((obj, index) => {\n            let objchannel = obj['channel'] ? obj['channel'] : '';\n            channelList === null || channelList === void 0 ? void 0 : channelList.push(objchannel);\n          });\n          var radio5ChannelList = channelList;\n        }\n        ;\n        channelList = [];\n        var radio6gObj = this.chartData['6g'];\n        if (radio6gObj != null && radio6gObj['ranking_list'] != null) {\n          radio6gObj['ranking_list'].forEach((obj, index) => {\n            // channelList.push(obj['channel']);\n            let objchannel = obj['channel'] ? obj['channel'] : '';\n            channelList === null || channelList === void 0 ? void 0 : channelList.push(objchannel);\n          });\n          var radio6ChannelList = channelList;\n        }\n        ;\n        //api data missing temporary add\n        // this.chartData['ssidNameInfo'] = {\n        //   \"wlan2\": [\n        //     {\n        //       \"SSID\": \"CXNK00778D4D\",\n        //       \"Enable\": \"true\"\n        //     }\n        //   ],\n        //   \"wlan5\": [\n        //     {\n        //       \"SSID\": \"CXNK00778D4D\",\n        //       \"Enable\": \"true\"\n        //     },\n        //     {\n        //       \"SSID\": \"5GHz_IPTV_SSID778D4D\",\n        //       \"Enable\": \"false\"\n        //     }\n        //   ]\n        // }\n        /***begin-aswin-11-05-2021-dygraph-filter-channel-issue-fix */\n        this.SiteScanService.setSiteScanFilterData(channelFilter, this.siteScanChannelSelected, false);\n        /***end-aswin-11-05-2021-dygraph-filter-channel-issue-fix */\n        sessionStorage.setItem('serialNumber', JSON.stringify(serialNumber));\n        sessionStorage.setItem('radio24ChannelList', JSON.stringify(radio24ChannelList));\n        sessionStorage.setItem('radio5ChannelList', JSON.stringify(radio5ChannelList));\n        sessionStorage.setItem('radio6ChannelList', JSON.stringify(radio6ChannelList));\n        sessionStorage.setItem('wifidiag.sitescan', JSON.stringify(this.chartData));\n        sessionStorage.setItem(keyWifidiagData, JSON.stringify(this.wifiMockData2.wifiDiagdata));\n        this.renderSiteScanGraph(true);\n      }\n    }\n    ngOnChanges() {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n      this.SsidNameInfoData = this.dataService.getSsidNameInfoData(this.fsan);\n      if (!this.SsidNameInfoData) {\n        this.getSsidNameInfoData();\n      } else {\n        this.mSSID = '';\n        if (this.SsidNameInfoData['wlan2'] && ((_a = this.SsidNameInfoData['wlan2']) === null || _a === void 0 ? void 0 : _a.length) && ((_b = this.SsidNameInfoData['wlan2'][0]) === null || _b === void 0 ? void 0 : _b.SSID) && this.type == '2.4G') {\n          this.mSSID = (_c = this.SsidNameInfoData['wlan2'][0]) === null || _c === void 0 ? void 0 : _c.SSID;\n        }\n        if (this.SsidNameInfoData['wlan5'] && ((_d = this.SsidNameInfoData['wlan5']) === null || _d === void 0 ? void 0 : _d.length) && ((_e = this.SsidNameInfoData['wlan5'][0]) === null || _e === void 0 ? void 0 : _e.SSID) && this.type == '5G') {\n          this.mSSID = (_f = this.SsidNameInfoData['wlan5'][0]) === null || _f === void 0 ? void 0 : _f.SSID;\n        }\n        if (this.SsidNameInfoData['wlan6'] && ((_g = this.SsidNameInfoData['wlan6']) === null || _g === void 0 ? void 0 : _g.length) && ((_h = this.SsidNameInfoData['wlan6'][0]) === null || _h === void 0 ? void 0 : _h.SSID) && this.type == '6G') {\n          this.mSSID = (_j = this.SsidNameInfoData['wlan6'][0]) === null || _j === void 0 ? void 0 : _j.SSID;\n        }\n        if (this.mSSID) {\n          sessionStorage.setItem('calix.mSSID', this.mSSID);\n        } else sessionStorage.setItem('calix.mSSID', '');\n        this.chartData['ssidNameInfo'] = this.SsidNameInfoData;\n        this.graphRender();\n      }\n      // if (this.type) {\n      //   this.siteScanTypeChange('two');\n      // } else {\n      //   this.siteScanTypeChange('five');\n      // };\n    }\n\n    getSsidNameInfoData() {\n      this.graphRender();\n      //this.dataService.fetchSsidNameInfoData(this.orgId, this.fsan).subscribe((res: any) => {\n      this.dataService.fetchMetaDatavaluesNew(this.orgId, this.fsan).subscribe(res => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        if (res) {\n          var ssidResult = res[\"primary-operator-ssid\"];\n          var secondarySSID = res['secondary-ssid'];\n          this.graphRender();\n          if (ssidResult === null || ssidResult === void 0 ? void 0 : ssidResult.length) {\n            // ssidResult.primary.length==0 \n            this.SsidNameInfoData = {\n              \"wlan2\": [],\n              \"wlan5\": [],\n              \"wlan6\": []\n            };\n            for (var value of ssidResult) {\n              if (value.freqBand == \"2.4GHz\") {\n                if (value.SSID != \"\") {\n                  (_a = this.SsidNameInfoData['wlan2']) === null || _a === void 0 ? void 0 : _a.push({\n                    \"SSID\": value.SSID,\n                    \"Enable\": value.Enable\n                  });\n                }\n              } else if (value.freqBand == \"5GHz\") {\n                if (value.SSID != \"\") {\n                  (_b = this.SsidNameInfoData['wlan5']) === null || _b === void 0 ? void 0 : _b.push({\n                    \"SSID\": value.SSID,\n                    \"Enable\": value.Enable\n                  });\n                }\n              }\n            }\n            if (secondarySSID) {\n              for (var value of secondarySSID) {\n                if (value.ssid != \"\" && value.band6) {\n                  (_c = this.SsidNameInfoData['wlan6']) === null || _c === void 0 ? void 0 : _c.push({\n                    \"SSID\": value.ssid\n                    // \"Enable\": value.Enable\n                  });\n                }\n              }\n            }\n\n            if (this.SsidNameInfoData['wlan2'] && ((_d = this.SsidNameInfoData['wlan2']) === null || _d === void 0 ? void 0 : _d.length) && ((_e = this.SsidNameInfoData['wlan2'][0]) === null || _e === void 0 ? void 0 : _e.SSID) && this.type == '2.4G') {\n              this.mSSID = (_f = this.SsidNameInfoData['wlan2'][0]) === null || _f === void 0 ? void 0 : _f.SSID;\n            }\n            if (this.SsidNameInfoData['wlan5'] && ((_g = this.SsidNameInfoData['wlan5']) === null || _g === void 0 ? void 0 : _g.length) && ((_h = this.SsidNameInfoData['wlan5'][0]) === null || _h === void 0 ? void 0 : _h.SSID) && this.type == '5G') {\n              this.mSSID = (_j = this.SsidNameInfoData['wlan5'][0]) === null || _j === void 0 ? void 0 : _j.SSID;\n            }\n            if (this.SsidNameInfoData['wlan6'] && ((_k = this.SsidNameInfoData['wlan6']) === null || _k === void 0 ? void 0 : _k.length) && ((_l = this.SsidNameInfoData['wlan6'][0]) === null || _l === void 0 ? void 0 : _l.SSID) && this.type == '6G') {\n              this.mSSID = (_m = this.SsidNameInfoData['wlan6'][0]) === null || _m === void 0 ? void 0 : _m.SSID;\n            }\n            if (this.mSSID) {\n              sessionStorage.setItem('calix.mSSID', this.mSSID);\n            } else sessionStorage.setItem('calix.mSSID', '');\n            this.chartData['ssidNameInfo'] = this.SsidNameInfoData;\n          } else {\n            this.SsidNameInfoData = {};\n          }\n        } else {\n          this.SsidNameInfoData = {};\n        }\n        this.dataService.setSsidNameInfoData(this.fsan, this.SsidNameInfoData);\n        this.graphRender();\n      }, err => {\n        this.SsidNameInfoData = {};\n        this.dataService.setSsidNameInfoData(this.fsan, this.SsidNameInfoData);\n        this.graphRender();\n      });\n    }\n    siteScanTypeChange(value) {\n      sessionStorage.setItem('currentTab', value);\n      this.renderSiteScanGraph(true);\n      //this.renderSiteScanGraph2();\n      //this.renderSiteScanGraph3()\n    }\n\n    toCsv(siteScanObj) {\n      var interpolatedChannels = siteScanObj ? siteScanObj['interpolatedChannels'] : '';\n      var lines = \"\";\n      _.each(interpolatedChannels, function (valueChannel, keyChannel) {\n        lines += keyChannel + \",\" + _.values(valueChannel).join() + \"\\n\";\n      });\n      return lines;\n    }\n    getlabels(bandwidthList, signalKeyList) {\n      var ssidObj = this.SiteScanService.getMainSsidObj();\n      var labels = [\"Channel\", ssidObj === null || ssidObj === void 0 ? void 0 : ssidObj.id];\n      return labels.concat(signalKeyList, bandwidthList);\n    }\n  }\n  DygraphHistorySiteScanComponent.ɵfac = function DygraphHistorySiteScanComponent_Factory(t) {\n    return new (t || DygraphHistorySiteScanComponent)(i0.ɵɵdirectiveInject(i1.DygraphSiteScanService), i0.ɵɵdirectiveInject(i2.wifiMockData), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.DataServiceService), i0.ɵɵdirectiveInject(i5.TranslateService));\n  };\n  DygraphHistorySiteScanComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DygraphHistorySiteScanComponent,\n    selectors: [[\"dygraph-history-site-scan\"]],\n    viewQuery: function DygraphHistorySiteScanComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.graphdiv = _t.first);\n      }\n    },\n    inputs: {\n      chartData: \"chartData\",\n      fsan: \"fsan\",\n      orgId: \"orgId\",\n      deviceInfo: \"deviceInfo\",\n      type: \"type\",\n      siteScanChannelSelected: \"siteScanChannelSelected\",\n      siteScanSSIDSelected: \"siteScanSSIDSelected\",\n      ssidChecked: \"ssidChecked\",\n      busynessChecked: \"busynessChecked\",\n      radioSummary: \"radioSummary\",\n      showSiteScanBusyness: \"showSiteScanBusyness\"\n    },\n    outputs: {\n      enableBusynessCheckBox: \"enableBusynessCheckBox\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"container\"], [2, \"width\", \"100%\", \"height\", \"320px\"], [\"graph\", \"\"]],\n    template: function DygraphHistorySiteScanComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"div\", 1, 2);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\"]\n  });\n  return DygraphHistorySiteScanComponent;\n})();\nvar axisLabelFormatterFor24 = function (x) {\n  if (x < 1 || x > 13) {\n    return '';\n  } else {\n    if (is_int(x)) {\n      return x;\n    } else {\n      return '';\n    }\n  }\n};\nvar axisLabelFormatterFor50 = function (x) {\n  if (x > 35 && x < 145) {\n    if (x > 64 && x < 100) {\n      return '';\n    } else {\n      if (is_int(x)) {\n        if (x % 4 === 0) {\n          return x;\n        } else {\n          return '';\n        }\n      } else {\n        return '';\n      }\n    }\n  } else if (x > 148 && x < 168) {\n    if (is_int(x)) {\n      if (x % 4 === 1) {\n        return x;\n      } else {\n        return '';\n      }\n    } else {\n      return '';\n    }\n  } else {\n    return '';\n  }\n};\nvar axisLabelFormatterFor6 = function (x) {\n  if (x > 20 && x < 214) {\n    if (is_int(x)) {\n      if (x % 8 == 0) {\n        return x;\n      } else {\n        return '';\n      }\n    } else {\n      return '';\n    }\n  } else {\n    return '';\n  }\n};\nfunction is_int(value) {\n  return parseFloat(value) === parseInt(value) && !isNaN(value);\n}\n;","map":null,"metadata":{},"sourceType":"module"}