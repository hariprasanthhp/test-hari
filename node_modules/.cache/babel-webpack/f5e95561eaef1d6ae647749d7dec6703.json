{"ast":null,"code":"import { environment } from '../../../../../environments/environment';\nimport { DatePipe, TitleCasePipe } from '@angular/common';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../../../shared/services/sso-auth.service\";\nimport * as i3 from \"src/app/shared/services/export-excel.service\";\nimport * as i4 from \"../../../../shared/services/custom-translate.service\";\nimport * as i5 from \"../../service/fa-utils.service\";\nimport * as i6 from \"@angular/router\";\nexport let ReportApiService = /*#__PURE__*/(() => {\n  class ReportApiService {\n    constructor(httpClient, sso, excel, customTranslateService, utils, router) {\n      this.httpClient = httpClient;\n      this.sso = sso;\n      this.excel = excel;\n      this.customTranslateService = customTranslateService;\n      this.utils = utils;\n      this.router = router;\n      this.baseURL = environment.SUPPORT_URL;\n      this.org_id = environment.faAdminOrgId;\n      this.topn = this.baseURL + '/traffic/reports/topapplications';\n      this.language = this.customTranslateService.defualtLanguage;\n      this.customTranslateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n    }\n    Topn(params, page) {\n      let orgId = this.sso.getOrgId();\n      let startDate = new Date(params.startDate).toISOString();\n      startDate = this.makeIsoDate(startDate);\n      let endDate = new Date(params.endDate).toISOString();\n      endDate = this.makeIsoDate(endDate);\n      let criteria = params.criteriaSelected ? params.criteriaSelected : 'usage';\n      let limit = params.limit ? params.limit : 10;\n      let url = `${this.topn}?org=${orgId}&tenant=0&groupBy=${params.groupBy}&sortBy=total&granularity=1month&startTime=${startDate}&endTime=${endDate}&count=${limit}&output=${criteria}`;\n      if (page && page == 'top-applications') {\n        let group = params.groupSelected == 'yes' ? true : false;\n        url = `${this.topn}?granularity=24hour&org=${orgId}&tenant=0&startTime=${startDate}&endTime=${endDate}&endpoint=e8ba81c8-c6c7-458d-bcdc-e775af1de465&count=10&direction=both`;\n      }\n      return this.httpClient.get(url);\n    }\n    getTopEndpoints(params) {\n      let orgId = this.sso.getOrgId();\n      let startDate = new Date(params.startDate).toISOString();\n      startDate = this.makeIsoDate(startDate);\n      let endDate = new Date(params.endDate).toISOString();\n      endDate = this.makeIsoDate(endDate);\n      let criteria = params.criteriaSelected ? params.criteriaSelected : 'usage';\n      let limit = params.limit ? params.limit : 10;\n      let url = '';\n      if (params['criteriaSelected'] == 'usage') {\n        let endpointId = this.sso.getSubscriberEndpointId() ? this.sso.getSubscriberEndpointId() : '33e034e2-9bcf-4d71-81d7-3a2e97d3a84b';\n        url = `${environment.SUPPORT_URL}/traffic/reports/topdestinations?granularity=24hour&org=${this.sso.getOrgId()}&tenant=0&startTime=${startDate}&endTime=${endDate}&endpoint=${endpointId}&count=10&direction=${params['directionSelected'].toLowerCase()}`;\n      } else {\n        let endpointId = this.sso.getSubscriberEndpointId() ? this.sso.getSubscriberEndpointId() : '2a3686a2-6a92-4437-9e12-9f04e96e7fdf';\n        url = `${environment.SUPPORT_URL}/traffic/timeseries?granularity=1hour&org=${this.sso.getOrgId()}&tenant=0&startTime=${startDate}&endTime=${endDate}&endpoint=${endpointId}&groupBy=destination&direction=${params['directionSelected'].toLowerCase()}&output=${params['criteriaSelected']}&count=${params['limit']}`;\n      }\n      return this.httpClient.get(url);\n    }\n    getApplications(params) {\n      // let startDate = new Date(params.startDate).toISOString();\n      // startDate = this.makeIsoDate(startDate);\n      // let endDate = new Date(params.endDate).toISOString();\n      // endDate = this.makeIsoDate(endDate);\n      // let startDate = this.convertStartDate(this.dateUtils.getUserDateTimeByDateObj(params.startDate));\n      // let endDate = this.convertEndDate(this.dateUtils.getUserDateTimeByDateObj(params.endDate));\n      //CCL-26097\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      startDate = this.getStartUTCDate(params.startDate, 0);\n      endDate = this.getEndUTCDate(params.endDate);\n      if (params.criteriaSelected == 'usage') {\n        startDate = this.getISOStartOfDay(startDate);\n        endDate = this.getISOEndOfDay(endDate, 'applications');\n      }\n      let limit = params.limit ? params.limit : 10;\n      let url = '';\n      let inpParams = {\n        granularity: '24hour',\n        tenant: 0,\n        startTime: startDate,\n        endpoint: this.sso.getSubscriberEndpointId() ? this.sso.getSubscriberEndpointId() : 'e8ba81c8-c6c7-458d-bcdc-e775af1de465',\n        output: params['criteriaSelected'],\n        direction: params['directionSelected'].toLowerCase(),\n        org: this.sso.getOrgId(),\n        count: params['limit'],\n        endTime: endDate\n      };\n      if (params['groupSelected'] === 'yes') {\n        inpParams['groupApplications'] = true;\n      }\n      let query = \"\";\n      for (var key in inpParams) {\n        if (typeof inpParams[key] !== 'undefined') {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(inpParams[key]);\n        }\n      }\n      url = `${environment.SUPPORT_URL}/traffic/reports/topapplications?${query}`;\n      return this.httpClient.get(url);\n    }\n    getAppTraffic(params) {\n      // let startDate = new Date(params.startDate).toISOString();\n      // startDate = this.makeIsoDate(startDate);\n      // let endDate = new Date(params.endDate).toISOString();\n      // endDate = this.makeIsoDate(endDate);\n      // let startDate = this.convertStartDate(this.dateUtils.getUserDateTimeByDateObj(params.startDate));\n      // let endDate = this.convertEndDate(this.dateUtils.getUserDateTimeByDateObj(params.endDate));\n      //CCL-26097\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      startDate = this.getStartUTCDate(params.startDate, 0);\n      endDate = this.getEndUTCDate(params.endDate);\n      let granularity = this.getGranularityByChart(startDate, endDate);\n      //granularity = '24hour';\n      let url = '';\n      let inpParams = {\n        granularity: granularity ? granularity : '1hour',\n        org: this.sso.getOrgId(),\n        tenant: 0,\n        startTime: startDate,\n        endTime: endDate,\n        endpoint: this.sso.getSubscriberEndpointId() ? this.sso.getSubscriberEndpointId() : '2705d400-58a5-4cca-8091-8ee2843ea2c9',\n        groupBy: 'application',\n        output: 'rate',\n        count: params['limit'],\n        direction: 'both'\n      };\n      let query = \"\";\n      for (var key in inpParams) {\n        if (typeof inpParams[key] !== 'undefined') {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(inpParams[key]);\n        }\n      }\n      url = `${environment.SUPPORT_URL}/traffic/timeseries?${query}`;\n      return this.httpClient.get(url);\n    }\n    getUsage(params, enpoint) {\n      let orgId = this.sso.getOrgId();\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      startDate = this.getISOStartOfDay(startDate);\n      endDate = this.getISOEndOfDay(endDate);\n      let granularity = this.getGranularity(startDate, endDate);\n      params['granularity'] = granularity;\n      let criteria = 'usage';\n      let url = `${environment.SUPPORT_URL}/traffic/timeseries?org=${orgId}&tenant=0&granularity=${granularity}&startTime=${startDate}&endTime=${endDate}&output=${criteria}&endpoint=${enpoint}`;\n      //url = 'https://stage.api.calix.ai/v1/csc/traffic/timeseries?granularity=24hour&org=10&tenant=0&startTime=2020-11-20T00:00:00Z&endTime=2020-11-30T00:00:00Z&endpoint=42ab50f4-8185-407a-b047-81cfc5c07119';\n      return this.httpClient.get(url);\n    }\n    getRate(params, enpoint) {\n      let orgId = this.sso.getOrgId();\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      let granularity = this.getGranularityByChart(startDate, endDate, 'rate');\n      // startDate = this.getISOStartEndDate(startDate, false);\n      // endDate = this.getISOStartEndDate(endDate, true);\n      //CCL-26097\n      startDate = this.getStartUTCDate(params.startDate, 0);\n      endDate = this.getEndUTCDate(params.endDate);\n      let criteria = 'rate';\n      let url = `${environment.SUPPORT_URL}/traffic/timeseries?org=${orgId}&tenant=0&granularity=${granularity}&startTime=${startDate}&endTime=${endDate}&output=${criteria}&endpoint=${enpoint}`;\n      //url = 'https://stage.api.calix.ai/v1/csc/traffic/timeseries?granularity=1hour&org=10&tenant=0&startTime=2020-11-27T00:00:00Z&endTime=2020-11-30T00:00:00Z&endpoint=2705d400-58a5-4cca-8091-8ee2843ea2c9&output=rate';\n      return this.httpClient.get(url);\n    }\n    getMonthlyUsage(params, enpoint) {\n      let orgId = this.sso.getOrgId();\n      let date = new Date();\n      let monthCount = params.monthCount ? params.monthCount : 1;\n      let firstDay = new Date(date.getFullYear(), date.getMonth() - monthCount, 1);\n      let lastDay = new Date(date.getFullYear(), date.getMonth(), 0);\n      //CCL-39421\n      let startDate = this.getISOStartOfDay(firstDay);\n      let endDate = this.getISOEndOfDay(lastDay);\n      //CCL-26097\n      // let startDate: string | Date = this.getStartUTCDate(firstDay,0 );\n      // let endDate: string | Date = this.getEndUTCDate(lastDay);\n      let criteria = 'usage';\n      let url = `${environment.SUPPORT_URL}/traffic/timeseries?org=${orgId}&tenant=0&granularity=${params.granularity}&startTime=${startDate}&endTime=${endDate}&output=${criteria}&endpoint=${enpoint}`;\n      //url = 'https://stage.api.calix.ai/v1/csc/traffic/timeseries?granularity=1month&org=10&tenant=0&startTime=2020-09-01T00:00:00Z&endTime=2020-11-30T00:00:00Z&endpoint=42ab50f4-8185-407a-b047-81cfc5c07119';\n      return this.httpClient.get(url);\n    }\n    topAppTraffic(params) {\n      let orgId = this.sso.getOrgId();\n      //orgId = 12615054;\n      let startDate = new Date(params.startDate).toISOString();\n      startDate = this.makeIsoDate(startDate);\n      //startDate = '2020-09-01T22:03:00Z';\n      let endDate = new Date(params.endDate).toISOString();\n      endDate = this.makeIsoDate(endDate);\n      let limit = params.limit ? params.limit : 10;\n      return this.httpClient.get(`${this.topn}?org=${orgId}&tenant=0&groupBy=application&sortBy=total&granularity=1month&startTime=${startDate}&endTime=${endDate}&count=${limit}`);\n      // return this.httpClient.get<T>(`${this.topn}?org=${org}&tenant=0&groupBy=${params.groupBy}&sortBy=downstreamOctets&granularity=1month&startTime=${startDate}`)\n    }\n\n    makeOptions(data, type, params, downloadData) {\n      let title = downloadData.title;\n      let that = this;\n      let pipe = new DatePipe('en-US');\n      let capitalize = new TitleCasePipe();\n      let timezoneName = /\\((.*)\\)/.exec(new Date().toString())[1];\n      if (params.criteriaSelected == 'usage') {\n        timezoneName = 'Coordinated Universal Time';\n      }\n      // let timezoneName = 'UTC';\n      //     let subTitle = `<span style=\"font-size:16px; color:#ffffff\">...</span><span style=\"font-family: Lato; color: #000000; font-size: 12px; line-height: 1.1640625;\"> Time Window: ${pipe.transform(params.startDate, 'MM/dd/yyyy')} to ${pipe.transform(params.endDate, 'MM/dd/yyyy')} [${timezoneName}]</span><br/>\n      // <span style=\"font-family: Lato; color: #000000; font-size: 12px; line-height: 1.1640625;\">Up Usage: 4.44 GB    Down Usage: 185.4GB</span>`;\n      let categories = [];\n      let seriesData = [];\n      let direction = `${this.language['down']}`;\n      if (params.directionSelected == 'both') {\n        direction = `${this.language['Both(Down+Up)']}`;\n      } else if (params.directionSelected == 'Down') {\n        direction = `${this.language['down']}`;\n      } else {\n        direction = `${this.language['up']}`;\n      }\n      let subscriber = ``;\n      if (this.sso.getTrafficReportChartSubscriberInfo()) {\n        subscriber = `<span style=\"font-family: Lato; color: #000000; font-size: 12px; line-height: 1.1640625;\">${this.language['Subscriber']}: ${this.sso.getTrafficReportChartSubscriberInfo()}</span><span style=\"font-size:16px; color:#ffffff\">...</span>`;\n      }\n      let subTitle = `${subscriber}<span style=\"font-family: Lato; color: #000000; font-size: 12px; line-height: 1.1640625;\">${this.language['criteria']}: ${this.language[params['criteriaSelected']]}</span><span style=\"font-size:16px; color:#ffffff\">...</span><span style=\"font-family: Lato; color: #000000; font-size: 12px; line-height: 1.1640625;\"> ${this.language['time_win']}: ${pipe.transform(params.startDate, 'MM/dd/yyyy')} to ${pipe.transform(params.endDate, 'MM/dd/yyyy')} [${timezoneName}]</span><span style=\"font-size:16px; color:#ffffff\">...</span><span style=\"font-family: Lato; color: #000000; font-size: 12px; line-height: 1.1640625;\"> ${this.language['direction']}: ${direction}</span>`;\n      let options = {\n        chart: {\n          type: type,\n          zoomType: \"xy\"\n        },\n        title: {\n          text: title\n        },\n        subtitle: {\n          text: subTitle\n        },\n        xAxis: {\n          categories: categories\n        },\n        yAxis: {\n          min: 0,\n          title: {\n            text: ''\n          },\n          labels: {\n            formatter: function () {\n              let y = this;\n              var m = y.axis.series[0].dataMax;\n              var s;\n              if (params['criteriaSelected'] == 'usage') {\n                var unit = m > 1000000000000 ? [1000000000000, 'TB'] : m > 1000000000 ? [1000000000, 'GB'] : m > 1000000 ? [1000000, 'MB'] : m > 1000 ? [1000, 'KB'] : [1, 'B'];\n                s = (y.value / unit[0]).toFixed(1) + (y.isFirst ? ' ' + unit[1] : '');\n                ;\n              } else {\n                var unit = m > 1000000000000 ? [1000000000000, 'Tbps'] : m > 1000000000 ? [1000000000, 'Gbps'] : m > 1000000 ? [1000000, 'Mbps'] : m > 1000 ? [1000, 'Kbps'] : [1, 'bps'];\n                s = (y.isFirst ? 0 : (y.value / unit[0]).toFixed(1)) + (y.isFirst ? ' ' + unit[1] : '');\n              }\n              return s;\n            }\n          }\n        },\n        lang: {\n          noData: that.language[\"No Data Available\"]\n        },\n        legend: {\n          reversed: true\n        },\n        plotOptions: {\n          series: {\n            color: '#0279FF',\n            //colors: [\"#E87B00\", \"#44367D\", \"#8bbc21\", \"#910000\", \"#1aadce\", \"#492970\", \"#f28f43\", \"#77a1e5\", \"#c42525\", \"#a6c96a\"]\n            cursor: 'pointer',\n            point: {\n              events: {}\n            }\n          }\n        },\n        tooltip: {\n          formatter: function () {\n            var m = this.y;\n            var unit;\n            var s;\n            if (params['criteriaSelected'] == 'usage') {\n              unit = that.getStackedUnit(m);\n              s = `<b> ${this.key} </b><br/>\n                        <p>${this.series.name}<span>: <b>${(this.y / unit[0]).toFixed(2) + ' ' + unit[1]}</b><br/></span></p>`;\n            } else {\n              unit = that.utils.bitsToSize(m, false);\n              s = `<b> ${this.key} </b><br/>\n                        <p>${this.series.name}<span>: <b>${unit}</b><br/></span></p>`;\n            }\n            return s;\n          }\n        },\n        series: [],\n        exporting: {\n          filename: 'Subscriber_Top_Applications',\n          buttons: {\n            contextButton: {\n              menuItems: [{\n                textKey: 'downloadPDF',\n                text: this.language.exportPDF || 'Export PDF',\n                onclick: function () {\n                  this.exportChart({\n                    type: 'application/pdf'\n                  });\n                }\n              }, {\n                textKey: 'downloadCSV',\n                text: this.language.exportCsv || 'Export CSV',\n                onclick: function () {\n                  let dataExport = [];\n                  for (var i = 0; i < data.length; i++) {\n                    if (params['criteriaSelected'] == 'usage') {\n                      dataExport.push({\n                        'Name': data[i].name ? data[i].name : '',\n                        'Up Usage(Byte)': data[i].usOctets ? data[i].usOctets.toLocaleString() : 0,\n                        'Down Usage(Byte)': data[i].dsOctets ? data[i].dsOctets.toLocaleString() : 0,\n                        'Both(Down+Up) Usage(Byte)': data[i].totalOctets ? data[i].totalOctets.toLocaleString() : 0\n                      });\n                    } else {\n                      dataExport.push({\n                        'Name': data[i].name ? data[i].name : data[i].key,\n                        'Up Max Rate(bps)': data[i].peakUsRate ? data[i].peakUsRate.toLocaleString() : 0,\n                        'Up Average Rate(bps)': data[i].usRate ? data[i].usRate.toLocaleString() : 0,\n                        'Down Max Rate(bps)': data[i].peakDsRate ? data[i].peakDsRate.toLocaleString() : 0,\n                        'Down Average Rate(bps)': data[i].dsRate ? data[i].dsRate.toLocaleString() : 0\n                      });\n                    }\n                  }\n                  let extraData = '';\n                  let subscriber = ``;\n                  if (that.sso.getTrafficReportChartSubscriberInfo()) {\n                    subscriber = `${that.language['Subscriber']}: ${that.sso.getTrafficReportChartSubscriberInfo()}\\r\\n`;\n                  }\n                  extraData = `${title}\\r\\n${subscriber} Criteria: ${that.language[params['criteriaSelected']]} \\r\\n ${that.language['time_win']}: ${pipe.transform(params.startDate, 'MM/dd/yyyy')} - ${pipe.transform(params.endDate, 'MM/dd/yyyy')} [${timezoneName}]\\r\\n Direction: ${direction} \\r\\n`;\n                  that.excel.downLoadCSV(\"Subscriber_Top_Applications\", dataExport, extraData);\n                }\n              }],\n              text: this.language['export']\n              //className: 'export_menu',\n              // symbol: 'url(/assets/images/export.png)'\n            }\n          }\n        },\n\n        credits: {\n          enabled: false\n        }\n      };\n      if (type === 'bar') {\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].name) {\n            categories.push(data[i].name);\n          } else {\n            if (!data[i].key) {\n              data[i].key = 'others';\n            }\n            categories.push(data[i].key);\n          }\n          if (params['criteriaSelected'] == 'usage') {\n            if (params.directionSelected == 'both') {\n              seriesData.push(data[i].totalOctets);\n            } else if (params.directionSelected == 'Down') {\n              seriesData.push(data[i].dsOctets);\n            } else {\n              seriesData.push(data[i].usOctets);\n            }\n          } else if (params['criteriaSelected'] == 'rate') {\n            if (params.directionSelected == 'both') {\n              seriesData.push(data[i].dsRate + data[i].usRate);\n            } else if (params.directionSelected == 'Down') {\n              seriesData.push(data[i].dsRate);\n            } else {\n              seriesData.push(data[i].usRate);\n            }\n          }\n        }\n        options.series = [{\n          name: `${params.directionSelected == 'both' ? this.language['Both(Down+Up)'] : this.language[params.directionSelected]} ${capitalize.transform(params['criteriaSelected'])}`,\n          data: seriesData\n        }];\n      } else if (type === 'pie') {\n        for (let i = 0; i < data.length; i++) {\n          if (params.directionSelected == 'Both(Down+Up)') {\n            seriesData.push({\n              name: data[i].name,\n              y: data[i].dsOctets + data[i].usOctets\n            });\n          } else if (params.directionSelected == 'Down') {\n            seriesData.push({\n              name: data[i].name,\n              y: data[i].dsOctets\n            });\n          } else {\n            seriesData.push({\n              name: data[i].name,\n              y: data[i].usOctets\n            });\n          }\n        }\n        options.series = [{\n          //colorByPoint: true,\n          data: seriesData,\n          name: this.language[params.directionSelected]\n        }];\n        options.plotOptions.pie = {\n          allowPointSelect: true,\n          cursor: 'pointer'\n        };\n      }\n      return options;\n    }\n    makeIsoDate(value) {\n      let a = value.split('.');\n      let b = a[0].split(\":\");\n      b.pop();\n      return b.join(':') + ':00Z';\n    }\n    getISODate(dt) {\n      let d = new Date(dt);\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      let hr = `${new Date().getUTCHours()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:00:00Z`;\n      return date;\n    }\n    convertStartDate(dateStr) {\n      // let arr = dateStr.split(\"T\");\n      // arr.splice(1, 1);\n      // arr.push(\"T\");\n      // arr.push(\"00:00:00Z\")\n      // return arr.join(\"\");\n      let arr = dateStr.split(\"T\");\n      arr.splice(1, 1);\n      arr.push(\"00:00:00\");\n      let newDateStr = arr.join(\" \");\n      return new Date(newDateStr).toISOString();\n    }\n    convertEndDate(dateStr) {\n      // let arr = dateStr.split(\"T\");\n      // arr.splice(1, 1);\n      // arr.push(\"T\");\n      // arr.push(this.dateUtils.getTimeNow());\n      // arr.push(\"Z\");\n      // return arr.join(\"\");\n      let arr = dateStr.split(\"T\");\n      arr.splice(1, 1);\n      arr.push(\"23:59:59\");\n      let newDateStr = arr.join(\" \");\n      return new Date(newDateStr).toISOString();\n    }\n    checkSameDate(params) {\n      let date1 = new Date(params.startDate).setHours(0, 0, 0, 0);\n      let date2 = new Date(params.endDate).setHours(0, 0, 0, 0);\n      if (date1 == date2) {\n        return true;\n      }\n      return false;\n    }\n    getStartUTCDate(dt, addHours) {\n      let d = new Date(dt);\n      d.setHours(addHours, 0, 0, 0);\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getEndUTCDate(dt) {\n      let d = new Date(dt);\n      d.setHours(0, 0, 0, 0);\n      d.setDate(new Date(d).getDate() + 1);\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getISOStartOfDay(dt) {\n      //returns 12AM UTC of day\n      let d = new Date(dt);\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let date = `${year}-${month}-${day}T00:00:00Z`;\n      return date;\n    }\n    getISOEndOfDay(dt, type) {\n      //returns 12AM UTC of Next day of End date\n      let d = new Date(dt);\n      d.setDate(new Date(d).getDate() + (type === 'applications' ? 0 : 1));\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let date = `${year}-${month}-${day}T00:00:00Z`;\n      return date;\n    }\n    getISOStartEndDateNEW(dt, end, addHours) {\n      let d = new Date(dt);\n      let today = new Date();\n      if (!end) {\n        //let hrsToAdd = addHours ? addHours : 0;\n        let hrsToAdd = 0;\n        //d.setHours(0 + hrsToAdd, 0, 0, 0);\n      } else {\n        //sd.setHours(23, 59, 0, 0);\n      }\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      // if (!end || 1) {\n      //     hr = `${d.getUTCHours()}`;\n      // }\n      // hr = `${d.getUTCHours()}`;\n      if (end) {\n        let selectedDate = new Date(d);\n        if (selectedDate > today) {\n          hr = `${new Date().getUTCHours()}`;\n          min = `${new Date().getUTCMinutes()}`;\n        }\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getISOStartEndDate(dt, end, addHours) {\n      let d = new Date(dt);\n      let today = new Date();\n      if (!end) {\n        //let hrsToAdd = addHours ? addHours : 0;\n        let hrsToAdd = 0;\n        d.setHours(0 + hrsToAdd, 0, 0, 0);\n      } else {\n        d.setHours(23, 59, 0, 0);\n      }\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      // if (!end || 1) {\n      //     hr = `${d.getUTCHours()}`;\n      // }\n      // hr = `${d.getUTCHours()}`;\n      if (end) {\n        let selectedDate = new Date(d);\n        if (selectedDate > today) {\n          hr = `${new Date().getUTCHours()}`;\n          min = `${new Date().getUTCMinutes()}`;\n        }\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getISOEndDate(dt) {\n      let d = new Date(dt);\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      let hr = `${new Date().getUTCHours()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:00:00Z`;\n      return date;\n    }\n    getGranularity(startDate, endDate) {\n      let granularity = '24hour';\n      let diff = moment(endDate).diff(moment(startDate), \"hour\");\n      if (diff <= 24) {\n        granularity = \"1hour\";\n      } else {\n        granularity = \"24hour\";\n      }\n      return granularity;\n    }\n    getGranularityByChart(startDate, endDate, chart, days) {\n      // compareHour = compareHour ? compareHour * 60 * 60 : 1209600;\n      // let granularity = '24hour';\n      // let diff = moment(endDate).diff(moment(startDate), \"hour\") * 60 * 60;\n      // if (diff < compareHour) {\n      //     granularity = \"1hour\"\n      // }\n      // else {\n      //     granularity = \"24hour\"\n      // }\n      let granularity = '24hour';\n      let compareHour = 0;\n      if (chart && chart == 'rate') {\n        compareHour = days ? days * 24 * 60 * 60 : 2764800;\n        let diff = moment(endDate).diff(moment(startDate), \"hour\") * 60 * 60;\n        if (diff < compareHour) {\n          granularity = \"1hour\";\n        } else {\n          granularity = \"24hour\";\n        }\n      } else {\n        compareHour = days ? days * 24 * 60 * 60 : 2764800;\n        let diff = moment(endDate).diff(moment(startDate), \"hour\") * 60 * 60;\n        if (diff < compareHour) {\n          granularity = \"1hour\";\n        } else {\n          granularity = \"24hour\";\n        }\n      }\n      return granularity;\n    }\n    getStackedUnit(m) {\n      let unit;\n      if (m > 1000000000000) {\n        unit = [1000000000000, 'TB'];\n      } else if (m > 1000000000) {\n        unit = [1000000000, 'GB'];\n      } else if (m > 1000000) {\n        unit = [1000000, 'MB'];\n      } else if (m > 1000) {\n        unit = [1000, 'KB'];\n      } else {\n        unit = [1, 'KB'];\n      }\n      return unit;\n    }\n  }\n  ReportApiService.ɵfac = function ReportApiService_Factory(t) {\n    return new (t || ReportApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService), i0.ɵɵinject(i3.ExportExcelService), i0.ɵɵinject(i4.CustomTranslateService), i0.ɵɵinject(i5.FaUtilsService), i0.ɵɵinject(i6.Router));\n  };\n  ReportApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReportApiService,\n    factory: ReportApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReportApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}