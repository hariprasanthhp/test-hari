{"ast":null,"code":"import * as go from 'gojs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-spinner\";\nexport let SampleTopologyComponent = /*#__PURE__*/(() => {\n  class SampleTopologyComponent {\n    // historyShow3: boolean = false;\n    //@ViewChild(DiagramComponent, { static: false }) diagramComponent: DiagramComponent;\n    constructor(http, route, spinner) {\n      this.http = http;\n      this.route = route;\n      this.spinner = spinner;\n      // ngOnInit() {\n      //   this.loadDiagram();\n      //   this.loadDiagram1();\n      //   this.loadDiagram2();\n      // }\n      // loadDiagram(): any {\n      //   var $ = go.GraphObject.make;\n      //   var myDiagram =\n      //     $(go.Diagram, \"myDiagramDiv\",\n      //       { // enable Ctrl-Z to undo and Ctrl-Y to redo\n      //         \"undoManager.isEnabled\": true\n      //       });\n      //   var myModel = $(go.Model);\n      //   // for each object in this Array, the Diagram creates a Node to represent it\n      //   myModel.nodeDataArray = [\n      //     { key: \"Alpha\" },\n      //     { key: \"Beta\" },\n      //     { key: \"Gamma\" }\n      //   ];\n      //   myDiagram.model = myModel;\n      // }\n      // loadDiagram1(): any {\n      //   var $ = go.GraphObject.make;\n      //   var myDiagram =\n      //     $(go.Diagram, \"myDiagramDiv1\",\n      //       { // enable Ctrl-Z to undo and Ctrl-Y to redo\n      //         \"undoManager.isEnabled\": true\n      //       });\n      //   // define a simple Node template\n      //   myDiagram.nodeTemplate =\n      //     $(go.Node, \"Horizontal\",\n      //       // the entire node will have a light-blue background\n      //       { background: \"#44CCFF\" },\n      //       $(go.Picture,\n      //         // Pictures should normally have an explicit width and height.\n      //         // This picture has a red background, only visible when there is no source set\n      //         // or when the image is partially transparent.\n      //         { margin: 10, width: 50, height: 50, background: \"red\" },\n      //         // Picture.source is data bound to the \"source\" attribute of the model data\n      //         new go.Binding(\"source\")),\n      //       $(go.TextBlock,\n      //         \"Default Text\",  // the initial value for TextBlock.text\n      //         // some room around the text, a larger font, and a white stroke:\n      //         { margin: 12, stroke: \"white\", font: \"bold 16px sans-serif\" },\n      //         // TextBlock.text is data bound to the \"name\" property of the model data\n      //         new go.Binding(\"text\", \"name\"))\n      //     );\n      //   var model = $(go.Model);\n      //   model.nodeDataArray =\n      //     [ // note that each node data object holds whatever properties it needs;\n      //       // for this app we add the \"name\" and \"source\" properties\n      //       { name: \"Don Meow\", source: \"cat1.png\" },\n      //       { name: \"Copricat\", source: \"cat2.png\" },\n      //       { name: \"Demeter\", source: \"cat3.png\" },\n      //       { /* Empty node data */ }\n      //     ];\n      //   myDiagram.model = model;\n      // }\n      // loadDiagram2() {\n      //   var $ = go.GraphObject.make;\n      //   var myDiagram =\n      //     $(go.Diagram, \"myDiagramDiv2\",\n      //       {\n      //         \"undoManager.isEnabled\": true,\n      //         layout: $(go.TreeLayout,\n      //           { angle: 90, layerSpacing: 35 })\n      //       });\n      //   // the template we defined earlier\n      //   myDiagram.nodeTemplate =\n      //     $(go.Node, \"Horizontal\",\n      //       { background: \"#44CCFF\" },\n      //       $(go.Picture,\n      //         { margin: 10, width: 50, height: 50, background: \"red\" },\n      //         new go.Binding(\"source\")),\n      //       $(go.TextBlock, \"Default Text\",\n      //         { margin: 12, stroke: \"white\", font: \"bold 16px sans-serif\" },\n      //         new go.Binding(\"text\", \"name\"))\n      //     );\n      //   // define a Link template that routes orthogonally, with no arrowhead\n      //   myDiagram.linkTemplate =\n      //     $(go.Link,\n      //       { routing: go.Link.Orthogonal, corner: 5 },\n      //       $(go.Shape, // the link's path shape\n      //         { strokeWidth: 3, stroke: \"#555\" }));\n      //   var model = $(go.TreeModel);\n      //   model.nodeDataArray =\n      //     [\n      //       { key: \"1\", name: \"Don Meow\", source: \"cat1.png\" },\n      //       { key: \"2\", parent: \"1\", name: \"Demeter\", source: \"cat2.png\" },\n      //       { key: \"3\", parent: \"1\", name: \"Copricat\", source: \"cat3.png\" },\n      //       { key: \"4\", parent: \"3\", name: \"Jellylorum\", source: \"cat4.png\" },\n      //       { key: \"5\", parent: \"3\", name: \"Alonzo\", source: \"cat5.png\" },\n      //       { key: \"6\", parent: \"2\", name: \"Munkustrap\", source: \"cat6.png\" }\n      //     ];\n      //   myDiagram.model = model;\n      // }\n      this.lastDeviceClickData = {};\n      this.uniqueDevices = [];\n      this.uniqueHostnames = [];\n      this.clientData = {};\n      this.twoHrsCategory = [];\n      this.twoHrsData = [];\n      this.sixHrsCategory = [{\n        label: \"6hrs ago\"\n      }, {\n        label: \"5hrs 30mins ago\"\n      }, {\n        label: \"5hrs ago\"\n      }, {\n        label: \"4hrs 30mins ago\"\n      }, {\n        label: \"4hrs ago\"\n      }, {\n        label: \"3hrs 30mins ago\"\n      }, {\n        label: \"3hrs ago\"\n      }, {\n        label: \"2hrs 30mins ago\"\n      }, {\n        label: \"2hrs ago\"\n      }, {\n        label: \"1hrs 30mins ago\"\n      }, {\n        label: \"1hrs ago\"\n      }, {\n        label: \"30mins ago\"\n      }];\n      this.sixHrsData = [];\n      this.oneDayCategory = [{\n        label: \"24hrs ago\"\n      }, {\n        label: \"22hrs ago\"\n      }, {\n        label: \"20hrs ago\"\n      }, {\n        label: \"18hrs ago\"\n      }, {\n        label: \"16hrs ago\"\n      }, {\n        label: \"14hrs ago\"\n      }, {\n        label: \"12hrs ago\"\n      }, {\n        label: \"10hrs ago\"\n      }, {\n        label: \"8hrs ago\"\n      }, {\n        label: \"6hrs ago\"\n      }, {\n        label: \"4hrs ago\"\n      }, {\n        label: \"2hrs ago\"\n      }];\n      this.oneDayData = [];\n      this.weekCategory = [{\n        label: \"7 days ago\"\n      }, {\n        label: \"6 days ago\"\n      }, {\n        label: \"5 days ago\"\n      }, {\n        label: \"4 days ago\"\n      }, {\n        label: \"3 days ago\"\n      }, {\n        label: \"2 days ago\"\n      }, {\n        label: \"1 day ago\"\n      }];\n      this.data = {\n        chart: {\n          showhovereffect: \"1\",\n          drawcrossline: \"1\",\n          plottooltext: \"<b>$dataValue</b> on $seriesName\",\n          theme: \"fusion\"\n        },\n        categories: [{\n          category: this.twoHrsCategory\n        }],\n        dataset: this.twoHrsData\n      };\n      this.width = '100%';\n      this.height = 400;\n      this.type = \"msline\";\n      this.dataFormat = \"json\";\n      this.dataSource = this.data;\n      this.menuActive = '2 Hours';\n      this.chartMenu = [{\n        id: 1,\n        value: '2 Hours'\n      }, {\n        id: 2,\n        value: '6 Hours'\n      }, {\n        id: 3,\n        value: '1 Day'\n      }, {\n        id: 4,\n        value: '1 Week'\n      }];\n      this.closeDevicesArray = [];\n      this.mediumDevicesArray = [];\n      this.farDevicesArray = [];\n      this.dataArray = [];\n      this.deviceDataWithAll = [];\n      this.closeDevicesSplit = false;\n      this.mediumDevicesSplit = false;\n      this.farDevicesSplit = false;\n      this.allObject = {\n        type: 'All',\n        key4: 'All',\n        key6: 'All'\n      };\n      this.routerTooltip = `  IP Address: 192.168.1.65,\n  Device: Calix Router,\n  Connection: connected`;\n      this.accesPointTooltip = `IP Address: 192.168.1.1,\n  Device:AccessPoint 1,\n  Connection: connected`;\n      this.isActive1 = true;\n      this.isActive2 = false;\n      this.isSingleClick = true;\n      this.clickCount = 0;\n      this.title = 'app';\n      this.preventSingleClick = false;\n      this.dblcount = 0;\n      this.snglcount = 0;\n      this.showChart = false;\n      this.apInformtion = '';\n      this.VisitedPage = '';\n      this.routerKey = '';\n      this.nextVisitedPage = '';\n      this.nextRouterKey = '';\n      this.nextTabledataUniqueId = '';\n      this.currentPage = 'main';\n      this.dblClkFired = false;\n      this.$ = go.GraphObject.make;\n      this.topologyData = {\n        phy: [],\n        legacy: [],\n        clientWifi: []\n      };\n      this.topologyView = true;\n      this.tplgyType = '';\n      this.tableView = false;\n      this.legacyChecked = false;\n      this.phyChecked = false;\n      this.signalChecked = false;\n      this.filterEnabled = false;\n      this.successFilterEnabled = false;\n      this.deviceDatas = [];\n      this.deviceDatasUpdated = [];\n      this.backBtnDisabled = true;\n      this.accessPointId = '';\n      this.nodeDataArray = [];\n      this.linkDataArray = [];\n      this.hostnameFilterData = [];\n      this.settings = {\n        add: {\n          addButtonContent: '<i class=\"nb-plus\"></i>',\n          createButtonContent: '<i class=\"nb-checkmark\"></i>',\n          cancelButtonContent: '<i class=\"nb-close\"></i>'\n        },\n        edit: {\n          editButtonContent: '<i class=\"nb-edit\"></i>',\n          saveButtonContent: '<i class=\"nb-checkmark\"></i>',\n          cancelButtonContent: '<i class=\"nb-close\"></i>'\n        },\n        delete: {\n          deleteButtonContent: '<i class=\"nb-trash\"></i>',\n          confirmDelete: true\n        },\n        actions: false,\n        columns: {\n          accessPoint: {\n            filter: false,\n            title: 'Access Point'\n          },\n          image_url: {\n            title: 'DeviceType',\n            type: 'html',\n            valuePrepareFunction: images => {\n              // console.log(images);\n              // console.log(typeof images);\n              let width = \"50%\";\n              // let margin = \"\";\n              // if (images.indexOf('phone') !== -1) {\n              //   width = \"30%\";\n              //   margin = \"10px;\"\n              // }\n              return `<img width=\"${width}\" src=\"${images}\"/>`;\n            },\n            width: '50px',\n            height: '10px'\n          },\n          hostname: {\n            title: 'HostName',\n            filter: {\n              type: 'list',\n              config: {\n                selectText: 'All'\n              }\n            }\n          },\n          'fingerprint-model': {\n            filter: false,\n            title: 'Model'\n          },\n          'fingerpint-vendor': {\n            filter: false,\n            title: 'Vendor'\n          },\n          'ip-address': {\n            filter: false,\n            title: 'Ip address'\n          },\n          // 'wifi-mode': {\n          //   filter: false,\n          //   title: 'Mode'\n          // },\n          ssid: {\n            filter: false,\n            title: 'SSID'\n          },\n          // key9: {\n          //   filter: false,\n          //   title: 'US PHY Rate'\n          // },\n          // 'signal-strength': {\n          //   filter: false,\n          //   title: 'SNR'\n          // },\n          radio: {\n            filter: false,\n            title: 'Radio'\n          },\n          siganl_image: {\n            title: 'Signal',\n            filter: false,\n            type: 'html',\n            valuePrepareFunction: images => {\n              return `<img width=\"100%\" src=\"${images.url}\" title=\"${images['signal-strength']}\"/>`;\n            },\n            width: '50px',\n            height: '50px'\n          },\n          'DS-phy-rate': {\n            filter: false,\n            title: 'DS PHY Rate'\n          },\n          'US-phy-rate': {\n            filter: false,\n            title: 'US PHY Rate'\n          },\n          'DS-packet-drops': {\n            filter: false,\n            title: 'Packets Dropped DS'\n          },\n          'client-efficiency-score': {\n            filter: false,\n            title: 'Wi-Fi Score Current (Average)'\n          },\n          'client-note': {\n            filter: false,\n            title: 'Reason for failure'\n          }\n        }\n      };\n      this.images = ['assets/images/tv-all-clear.png', 'assets/images/printer-clear.png', 'assets/images/ipad-all-clear.png', 'assets/images/laptop-all-clear.png', 'assets/images/phone-all-clear-state.png', 'assets/images/camera-clear.png', 'assets/images/audiobox-clear.png', 'assets/images/gaming-clear.png', 'assets/images/ipad-all-clear.png', 'assets/images/laptop-all-clear.png'];\n      this.imagesObj = {\n        'Television': 'assets/images/tv-all-clear.png',\n        'Tablet': 'assets/images/ipad-all-clear.png',\n        'Phone': 'assets/images/phone-all-clear-state.png',\n        'Camera': 'assets/images/camera-clear.png',\n        'Media Player': 'assets/images/audiobox-clear.png',\n        'Console': 'assets/images/gaming-clear.png',\n        'Wi-Fi IoT': 'assets/images/iot.png',\n        'Wi Fi IoT': 'assets/images/iot.png',\n        'Wifi IoT': 'assets/images/iot.png',\n        'Computer': 'assets/images/computer.png',\n        'Printer': 'assets/images/printer-clear.png',\n        'Network': 'assets/images/network.png',\n        'Voip': 'assets/images/voip.png',\n        'Fridge': 'assets/images/iot.png',\n        'Television-red': 'assets/images/tv-critical-issues.png',\n        'Tablet-red': 'assets/images/ipad-critical.png',\n        'Phone-red': 'assets/images/phone-critical-state.png',\n        'Camera-red': 'assets/images/camera-critical.png',\n        'Media Player-red': 'assets/images/audiobox-critical.png',\n        'Console-red': 'assets/images/gaming-critical.png',\n        'Wi-Fi IoT-red': 'assets/images/iot-critical.png',\n        'Wi Fi IoT-red': 'assets/images/iot-critical.png',\n        'Wifi IoT-red': 'assets/images/iot-critical.png',\n        'Computer-red': 'assets/images/computer-critical.png',\n        'Printer-red': 'assets/images/printer-critical.png',\n        'Network-red': 'assets/images/network-critical.png',\n        'Voip-red': 'assets/images/voip-critical.png',\n        'Fridge-red': 'assets/images/iot-critical.png',\n        'iot-red': 'assets/images/iot-critical.png'\n      };\n      this.ssid = '';\n      this.radio = '';\n      this.ethOrAPType = '';\n      this.ethOrAPImageUrl = '';\n      this.accessPointImages = {\n        //'red': 'assets/images/access-point-critical.png',\n        'yellow': 'assets/images/access-point-minor-issues.mp4',\n        'green': 'assets/images/access-point-clear.png',\n        'red': 'assets/images/access-point-critical.mp4'\n        // 'yellow': 'assets/images/access-point-minor-issues.gif',\n        // 'green': 'assets/images/access-point-clear.png',\n      };\n\n      this.apData = {};\n      this.apImageUrl = '';\n      this.apNodeData = [];\n      this.apLinkData = [];\n      this.dataForUploadDownLoadChart = [];\n      this.dataForSignalStrengthChart = [];\n      this.dataForClientScoreChart = [];\n      this.dataSource1 = {};\n      this.dataSource2 = {};\n      go.Diagram.licenseKey = \"73f04ee5b03c08c702d90776423d6af919a17564cf814aa4090413f6eb0d6b06329dee7159d08ec9d4aa4dfa137ec989ddc26f79c74a523fe633d7d947e283f0b13774e71409458bf31136c5ccaa2ca1ae2870e0d2b676a1db678eede9\";\n    }\n    ngOnInit() {\n      //this.loadfirst();\n      document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n      //document.getElementById(\"card2\").style.display = \"none\";\n      //document.getElementById(\"button1\").style.display = \"none\";\n      this.backBtnDisabled = true;\n      this.route.queryParams.subscribe(params => {\n        this.routerMac = params['routerMac'];\n        this.getData();\n        //this.getAPData(this.routerMac);\n        this.getAllClientsData(this.routerMac);\n      });\n    }\n    ngAfterViewInit() {}\n    dataGenerator() {\n      this.sixHrsData = [];\n      this.oneDayData = [];\n      let series1 = {};\n      let series2 = {};\n      series1.data = [];\n      series2.data = [];\n      for (let i = 0; i <= 12; i++) {\n        let obj1 = {\n          value: Math.floor(Math.random() * 100)\n        };\n        let obj2 = {\n          value: Math.floor(Math.random() * 100)\n        };\n        series1.data.push(obj1);\n        series2.data.push(obj2);\n      }\n      // this.sixHrsData.push(series1);\n      // this.sixHrsData.push(series2);\n      // this.oneDayData.push(series1);\n      // this.oneDayData.push(series2);\n    }\n\n    chartTimeChange(data) {\n      this.menuActive = data;\n      if (data == '2 Hours') {\n        this.data.categories = [{\n          category: this.twoHrsCategory\n        }];\n        this.data.dataset = this.dataForUploadDownLoadChart;\n      } else if (data == '6 Hours') {\n        this.data.categories = [{\n          category: this.sixHrsCategory\n        }];\n        this.dataGenerator();\n        this.data.dataset = this.sixHrsData;\n      } else if (data == '1 Day') {\n        this.data.categories = [{\n          category: this.oneDayCategory\n        }];\n        this.dataGenerator();\n        this.data.dataset = this.oneDayData;\n      } else if (data == '1 Week') {\n        this.data.categories = [{\n          category: this.weekCategory\n        }];\n        this.data.dataset = [];\n      }\n    }\n    hideDDMenu() {\n      if (document.getElementById('myDropdown') && document.getElementById('myDropdown').classList.contains('show')) {\n        document.getElementById('myDropdown').classList.remove('show');\n      }\n    }\n    rangeFilter(data) {\n      this.closeDevicesSplit = false;\n      this.mediumDevicesSplit = false;\n      this.farDevicesSplit = false;\n      this.closeDevicesArray = [];\n      this.mediumDevicesArray = [];\n      this.farDevicesArray = [];\n      data.forEach(el => {\n        if (el['client-distance'] == 'close') {\n          this.closeDevicesArray.push(el);\n        } else if (el['client-distance'] == 'medium') {\n          this.mediumDevicesArray.push(el);\n        } else if (el['client-distance'] == 'far') {\n          this.farDevicesArray.push(el);\n        }\n      });\n      if (this.closeDevicesArray.length > 4) {\n        this.closeDevicesSplit = true;\n      }\n      if (this.mediumDevicesArray.length > 4) {\n        this.mediumDevicesSplit = true;\n      }\n      if (this.farDevicesArray.length > 4) {\n        this.farDevicesSplit = true;\n      }\n    }\n    deviceTypeChange(data) {\n      console.log(data);\n      if (data != undefined) {\n        this.selectedDeviceType = data['client-type'];\n      } else {\n        this.selectedDeviceType = 'All';\n      }\n      if (this.selectedDeviceType == 'All') {\n        this.rangeFilter(this.deviceDataWithAll);\n      } else {\n        let newArray = this.deviceDataWithAll.filter(el => {\n          return el['client-type'] == this.selectedDeviceType;\n        });\n        this.rangeFilter(newArray);\n      }\n      this.selectedHostName = undefined;\n      this.selectedMacAddress = undefined;\n    }\n    hostNameChange(data) {\n      console.log(data);\n      if (data != undefined) {\n        this.selectedHostName = data.hostname;\n      } else {\n        this.selectedHostName = 'All';\n      }\n      if (this.selectedHostName == 'All') {\n        this.rangeFilter(this.deviceDataWithAll);\n      } else {\n        let newArray = this.deviceDataWithAll.filter(el => {\n          return el.hostname == this.selectedHostName;\n        });\n        this.rangeFilter(newArray);\n      }\n      this.selectedDeviceType = undefined;\n      this.selectedMacAddress = undefined;\n    }\n    macAddressChange(data) {\n      console.log(data);\n      if (data != undefined) {\n        this.selectedMacAddress = data.key6;\n      } else {\n        this.selectedMacAddress = 'All';\n      }\n      if (this.selectedMacAddress == 'All') {\n        this.rangeFilter(this.deviceDataWithAll);\n      } else {\n        let newArray = this.deviceDataWithAll.filter(el => {\n          return el.key6 == this.selectedMacAddress;\n        });\n        this.rangeFilter(newArray);\n      }\n      this.selectedHostName = undefined;\n      this.selectedDeviceType = undefined;\n    }\n    imageDblClick(data) {\n      //this.showChart = true;\n      console.log(data);\n      document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n      document.getElementById(\"card2\").style.display = \"block\";\n      this.topologyView = false;\n      this.tableView = true;\n      this.currentPage = 'table';\n      this.VisitedPage = 'middle';\n      this.nextVisitedPage = 'table';\n      this.deviceDatasUpdated = [];\n      if (data == 0) {\n        // this.deviceDatasUpdated = this.deviceDatas;\n      } else {\n        this.deviceDatasUpdated.push(data);\n      }\n      this.clientData = data;\n      this.getClientData(data.mac);\n    }\n    rangeDeviceFilter(key) {\n      if (key == 0) {\n        this.rangeFilter(this.deviceDatas);\n        this.deviceDataWithAll = this.deviceDatas;\n        this.deviceDataWithAll.unshift(this.allObject);\n      } else {\n        this.dataArray = this.deviceDatas.filter(el => {\n          return el.key1 == key;\n        });\n        this.rangeFilter(this.dataArray);\n        this.deviceDataWithAll = this.dataArray;\n        this.deviceDataWithAll.unshift(this.allObject);\n      }\n    }\n    customSort(a, b) {\n      if (a['signal-strength-test-result'] === 'PASS' && b['signal-strength-test-result'] === 'PASS' && a['legacy-device-test-result'] === 'PASS' && b['legacy-device-test-result'] === 'PASS') {\n        return 1;\n      }\n      return -1;\n    }\n    loadfirst() {\n      this.currentPage = 'main';\n      let $ = this.$;\n      var colors = {\n        blue: \"#2a6dc0\",\n        orange: \"#ea2857\",\n        green: \"#1cc1bc\",\n        gray: \"#5b5b5b\",\n        white: \"#F5F5F5\"\n      };\n      if (myDiagram) {\n        myDiagram.div = null;\n      }\n      var myDiagram = $(go.Diagram, \"myDiagramDiv1\", {\n        initialContentAlignment: go.Spot.Center,\n        \"undoManager.isEnabled\": true,\n        //initialContentAlignment: go.Spot.Center,\n        initialAutoScale: go.Diagram.UniformToFill,\n        layout: $(go.LayeredDigraphLayout,\n        //LayeredDigraphLayout\n        {\n          direction: 0,\n          layerSpacing: 150,\n          columnSpacing: 30,\n          linkSpacing: 10\n        })\n        // \"undoManager.isEnabled\": true\n        // // enable Ctrl-Z to undo and Ctrl-Y to redo\n      });\n\n      myDiagram.toolManager.toolTipDuration = 60000;\n      myDiagram.toolManager.hoverDelay = 500;\n      function linkInfo4(d) {\n        return `${d.name}`;\n      }\n      var addNodeAndLink = (e, obj) => {\n        this.dblClkFired = false;\n        this.accessPointId = obj.part.data.accessPointId;\n        //this.loadTabledata();\n        console.log(obj.part.data);\n        this.VisitedPage = 'main';\n        this.routerKey = obj.part.data.key;\n        //new code\n        //this.second(obj.part.data.key, true);\n        this.getAPData('obj.part.data.key', true, '');\n        alert('clicked');\n      };\n      var arrowheads = go.Shape.getArrowheadGeometries().toKeySet().toArray();\n      var nodeHoverAdornment = $(go.Adornment, \"Spot\", {\n        background: \"transparent\",\n        // hide the Adornment when the mouse leaves it\n        mouseLeave: function (e, obj) {\n          let ad = obj.part;\n          ad.adornedPart.removeAdornment(\"mouseHover\");\n        }\n      }, $(go.Placeholder, {\n        background: \"transparent\",\n        isActionable: true,\n        click: function (e, obj) {\n          var node = obj.part.adornedPart;\n          node.diagram.select(node);\n        }\n      }), $(\"Button\", {\n        alignment: go.Spot.TopCenter,\n        alignmentFocus: go.Spot.TopCenter\n      }, {\n        click: (e, obj) => {\n          this.dblClkFired = false;\n          this.accessPointId = obj.part.data.accessPointId;\n          console.log(obj.part.data);\n          this.VisitedPage = 'main';\n          this.routerKey = obj.part.data.key;\n          this.getAPData(obj.part.data.key, true, '');\n        }\n      }, $(go.TextBlock, \"+\")));\n      myDiagram.nodeTemplate = $(go.Node, \"Auto\",\n      //for circle numbers\n      {\n        background: \"white\",\n        fromSpot: go.Spot.RightSide,\n        toSpot: go.Spot.LeftSide,\n        selectionAdorned: false\n      }, $(go.Panel, \"Horizontal\"), $(go.Picture, {\n        width: 70,\n        height: 70\n      }, new go.Binding(\"source\", \"source\", function (image) {\n        return image ? image : '';\n      }), new go.Binding(\"element\", \"source-video\", function (video) {\n        return video ? video : '';\n      })), $(go.Panel, \"Vertical\", new go.Binding(\"margin\", \"label\", function (l) {\n        return l ? new go.Margin(110, 0, 0, 0) : '';\n      }), new go.Binding(\"background\", \"label\", function (l) {\n        return l ? '#eaeaea' : '';\n      }), new go.Binding(\"padding\", \"label\", function (l) {\n        return l ? 10 : '';\n      }), $(go.TextBlock, {\n        margin: new go.Margin(0, 0, 0, 0),\n        maxSize: new go.Size(100, 30),\n        isMultiline: false\n        // click: () => {\n        //   alert('label clicked');\n        // }\n      }, new go.Binding(\"text\", \"label\", function (l) {\n        return l ? l : '';\n      }))), $(go.Panel, \"Auto\", new go.Binding(\"margin\", \"label\", function (l) {\n        return l ? new go.Margin(-65, 0, 0, 50) : '';\n      }), new go.Binding(\"cursor\", \"label\", function (l) {\n        return l ? 'pointer' : '';\n      }),\n      // decorations:\n      $(go.Shape, \"Circle\", {\n        width: 24,\n        height: 24,\n        fill: 'white',\n        stroke: \"green\",\n        strokeWidth: 2,\n        margin: 5,\n        visible: false,\n        click: (e, obj) => {\n          console.log(obj.part.data);\n          if (obj.part.data.key === 'internet') {\n            return;\n          }\n          if (obj.part.data.key === 'ethernet') {\n            return;\n          }\n          this.lastDeviceClickData = obj.part.data;\n          this.apInformtion = obj.part.data['rg-tech-notes'];\n          this.accessPointId = obj.part.data.accessPointId;\n          this.VisitedPage = 'main';\n          document.getElementById(\"myDiagramDiv1\").style.display = \"none\";\n          document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n          document.getElementById(\"card2\").style.display = \"none\";\n          //document.getElementById(\"button1\").style.display = \"block\";\n          this.backBtnDisabled = false;\n          this.dblClkFired = true;\n          // new code\n          //this.showTableView('', true);\n          this.getAPData(obj.part.data.key, '', true);\n          this.showChart = false;\n          this.phyChecked = obj.part.data.customFilterObj.phyChecked;\n          this.legacyChecked = obj.part.data.customFilterObj.legacyChecked;\n          this.successFilterEnabled = true;\n        }\n      }, new go.Binding(\"visible\", \"passed-clients\", function (l) {\n        return l ? l : false;\n      })), $(go.TextBlock, {\n        click: (e, obj) => {\n          console.log(obj.part.data);\n          if (obj.part.data.key === 'internet') {\n            return;\n          }\n          if (obj.part.data.key === 'ethernet') {\n            return;\n          }\n          this.lastDeviceClickData = obj.part.data;\n          this.apInformtion = obj.part.data['rg-tech-notes'];\n          this.accessPointId = obj.part.data.accessPointId;\n          this.VisitedPage = 'main';\n          document.getElementById(\"myDiagramDiv1\").style.display = \"none\";\n          document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n          document.getElementById(\"card2\").style.display = \"none\";\n          //document.getElementById(\"button1\").style.display = \"block\";\n          this.backBtnDisabled = false;\n          this.dblClkFired = true;\n          // new code\n          //this.showTableView('', true);\n          this.getAPData(obj.part.data.key, '', true);\n          this.showChart = false;\n          this.phyChecked = obj.part.data.customFilterObj.phyChecked;\n          this.legacyChecked = obj.part.data.customFilterObj.legacyChecked;\n          this.successFilterEnabled = true;\n        },\n        margin: 5\n      }, new go.Binding(\"text\", \"passed-clients\", function (l) {\n        return l ? l : '';\n      }))), $(go.Panel, \"Auto\", new go.Binding(\"margin\", \"label\", function (l) {\n        return l ? new go.Margin(-45, 0, 0, 90) : '';\n      }), new go.Binding(\"cursor\", \"label\", function (l) {\n        return l ? 'pointer' : '';\n      }),\n      // decorations:\n      $(go.Shape, \"Circle\", {\n        width: 24,\n        height: 24,\n        fill: 'white',\n        stroke: \"orange\",\n        strokeWidth: 2,\n        margin: 5,\n        visible: false,\n        click: (e, obj) => {\n          console.log(obj.part.data);\n          if (obj.part.data.key === 'internet') {\n            return;\n          }\n          if (obj.part.data.key === 'ethernet') {\n            return;\n          }\n          this.lastDeviceClickData = obj.part.data;\n          this.apInformtion = obj.part.data['ap-tech-note'];\n          this.accessPointId = obj.part.data.accessPointId;\n          this.VisitedPage = 'main';\n          document.getElementById(\"myDiagramDiv1\").style.display = \"none\";\n          document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n          document.getElementById(\"card2\").style.display = \"none\";\n          //document.getElementById(\"button1\").style.display = \"block\";\n          this.backBtnDisabled = false;\n          this.dblClkFired = true;\n          // new code\n          //this.showTableView('', true);\n          this.getAPData(obj.part.data.key, '', true);\n          this.showChart = false;\n          this.phyChecked = obj.part.data.customFilterObj.phyChecked;\n          this.legacyChecked = obj.part.data.customFilterObj.legacyChecked;\n          this.filterEnabled = true;\n        },\n        toolTip: $(\"ToolTip\", {\n          \"Border.stroke\": colors[\"blue\"],\n          \"Border.strokeWidth\": 1\n        }, $(go.TextBlock, \"Arrowheads\", {\n          margin: 4\n        }, {\n          font: \"bold 12px sans-serif\"\n        }, new go.Binding(\"text\", \"failedClientsNote\")))\n      }, new go.Binding(\"visible\", \"failed-clients\", function (l) {\n        return l ? l : false;\n      })), $(go.TextBlock, {\n        click: (e, obj) => {\n          console.log(obj.part.data);\n          if (obj.part.data.key === 'internet') {\n            return;\n          }\n          if (obj.part.data.key === 'ethernet') {\n            return;\n          }\n          this.lastDeviceClickData = obj.part.data;\n          this.apInformtion = obj.part.data['ap-tech-note'];\n          this.accessPointId = obj.part.data.accessPointId;\n          this.VisitedPage = 'main';\n          document.getElementById(\"myDiagramDiv1\").style.display = \"none\";\n          document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n          document.getElementById(\"card2\").style.display = \"none\";\n          //document.getElementById(\"button1\").style.display = \"block\";\n          this.backBtnDisabled = false;\n          this.dblClkFired = true;\n          // new code\n          //this.showTableView('', true);\n          this.getAPData(obj.part.data.key, '', true);\n          this.showChart = false;\n          this.phyChecked = obj.part.data.customFilterObj.phyChecked;\n          this.legacyChecked = obj.part.data.customFilterObj.legacyChecked;\n          this.filterEnabled = true;\n        },\n        margin: 5,\n        toolTip: $(\"ToolTip\", {\n          \"Border.stroke\": colors[\"blue\"],\n          \"Border.strokeWidth\": 1\n        }, $(go.TextBlock, \"Arrowheads\", {\n          margin: 4\n        }, {\n          font: \"bold 12px sans-serif\"\n        }, new go.Binding(\"text\", \"failedClientsNote\")))\n      }, new go.Binding(\"text\", \"failed-clients\", function (l) {\n        return l ? l : '';\n      }))),\n      ///btn\n      $(go.Panel, \"Auto\", new go.Binding(\"margin\", \"label\", function (l) {\n        return l ? new go.Margin(-65, 0, 0, 3) : '';\n      }), new go.Binding(\"cursor\", \"label\", function (l) {\n        return l ? 'pointer' : '';\n      }),\n      // decorations:\n      $(go.Shape, \"Square\", {\n        width: 15,\n        height: 15,\n        fill: '#eaeaea',\n        stroke: \"black\",\n        strokeWidth: 1,\n        margin: 5,\n        visible: false,\n        click: (e, obj) => {\n          this.dblClkFired = false;\n          this.accessPointId = obj.part.data.accessPointId;\n          this.lastDeviceClickData = obj.part.data;\n          console.log(this.lastDeviceClickData);\n          this.VisitedPage = 'main';\n          this.routerKey = obj.part.data.key;\n          this.getAPData(obj.part.data.key, true, '');\n        }\n      }, new go.Binding(\"visible\", \"showBtn\", function (l) {\n        return l ? l : false;\n      })), $(go.TextBlock, {\n        click: (e, obj) => {\n          this.dblClkFired = false;\n          this.accessPointId = obj.part.data.accessPointId;\n          this.lastDeviceClickData = obj.part.data;\n          console.log(this.lastDeviceClickData);\n          this.VisitedPage = 'main';\n          this.routerKey = obj.part.data.key;\n          this.getAPData(obj.part.data.key, true, '');\n        }\n      }, new go.Binding(\"text\", \"showBtn\", function (l) {\n        return l ? '+' : '';\n      }))), {\n        click: (e, obj) => {\n          if (obj.part.data['ap-tech-note']) {\n            this.apInformtion = obj.part.data['ap-tech-note'];\n          } else {\n            this.apInformtion = obj.part.data['rg-tech-notes'];\n          }\n          //console.log(this.apInformtion);\n        },\n\n        mouseHover: function (e, obj) {\n          let node = obj.part;\n          if (node.data.key === 'internet') {\n            return;\n          }\n          if (node.data.key === 'ethernet') {\n            return;\n          }\n          // nodeHoverAdornment.adornedObject = node;\n          // node.addAdornment(\"mouseHover\", nodeHoverAdornment);\n        },\n\n        contextClick: (e, obj) => {\n          console.log(obj.part.data);\n          alert(\"Right Clicked on \" + obj.part.data.key);\n        },\n        doubleClick: (e, obj) => {\n          console.log(obj.part.data);\n          if (obj.part.data.key === 'internet') {\n            return;\n          }\n          if (obj.part.data.key === 'ethernet') {\n            return;\n          }\n          // if (!obj.part.data['int-type']) {\n          //   return;\n          // }\n          this.accessPointId = obj.part.data.accessPointId;\n          this.VisitedPage = 'main';\n          document.getElementById(\"myDiagramDiv1\").style.display = \"none\";\n          document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n          document.getElementById(\"card2\").style.display = \"none\";\n          //document.getElementById(\"button1\").style.display = \"block\";\n          this.backBtnDisabled = false;\n          this.dblClkFired = true;\n          // new code\n          //this.showTableView('', true);\n          this.getAPData(obj.part.data.key, '', true);\n          this.showChart = false;\n        },\n        toolTip: $(\"ToolTip\", {\n          \"Border.stroke\": colors[\"blue\"],\n          \"Border.strokeWidth\": 1\n        }, $(go.TextBlock, \"Arrowheads\", {\n          margin: 4\n        }, {\n          font: \"bold 12px sans-serif\"\n        }, new go.Binding(\"text\", \"text\")))\n      });\n      myDiagram.linkTemplate = $(go.Link, {\n        curve: go.Link.Bezier,\n        //routing: go.Link.AvoidsNodes,\n        toShortLength: 6,\n        relinkableFrom: true,\n        relinkableTo: true\n        // fromSpot: go.Spot.LeftRightSides,\n        // toSpot: go.Spot.LeftRightSides,\n        // fromEndSegmentLength: 30,\n        // toEndSegmentLength: 30,\n        //isLayoutPositioned: false\n      },\n      // allow the user to relink existing links\n      $(go.Shape, {\n        strokeWidth: 3,\n        width: 200\n      }, new go.Binding(\"stroke\", \"color\"), new go.Binding(\"strokeWidth\", \"thick\")),\n      // $(go.Shape,\n      //   { toArrow: \"Standard\", stroke: null, scale: 1 },\n      //   new go.Binding(\"fill\", \"color\")),\n      {\n        // this tooltip Adornment is shared by all links\n        toolTip: $(\"ToolTip\", $(go.TextBlock, {\n          margin: 2\n        },\n        // the tooltip shows the result of calling linkInfo(data)\n        new go.Binding(\"text\", \"\", linkInfo4)))\n        // the same context menu Adornment is shared by all links\n        //contextMenu: partContextMenu\n      });\n\n      myDiagram.model = new go.GraphLinksModel(this.nodeDataArray, this.linkDataArray);\n      this.diagramRedrawInt = setInterval(() => {\n        console.log('diageam redraw');\n        myDiagram.redraw();\n      }, 600);\n      // let animation = new go.Animation();\n      // myDiagram.nodes.each(function (node: any) {\n      //   console.log(node.data.key);\n      //   if (node.data['ap-color'] === 'red' || node.data['ap-color'] === 'yellow') {\n      //     animation.add(node, \"scale\", node.scale, 0.98);\n      //   }\n      // });\n      // animation.duration = 500;\n      // animation.reversible = true; // Re-run backwards\n      // animation.runCount = Infinity; // Animate forever\n      // animation.start();\n    }\n\n    second(key, next) {\n      this.apInformtion = '';\n      this.VisitedPage = 'main';\n      this.routerKey = key;\n      this.currentPage = 'middle';\n      if (next) {\n        this.nextVisitedPage = 'middle';\n        this.nextRouterKey = key;\n      }\n      this.topologyView = true;\n      this.tableView = false;\n      document.getElementById(\"myDiagramDiv1\").style.display = \"none\";\n      document.getElementById(\"myDiagramDiv2\").style.display = \"block\";\n      document.getElementById(\"card2\").style.display = \"none\";\n      this.backBtnDisabled = false;\n      var colors = {\n        blue: \"#2a6dc0\",\n        orange: \"#ea2857\",\n        green: \"#1cc1bc\",\n        gray: \"#5b5b5b\",\n        white: \"#F5F5F5\"\n      };\n      if (this.myDiagramDiv2) {\n        this.myDiagramDiv2.div = null;\n      }\n      let $ = this.$;\n      this.myDiagramDiv2 = $(go.Diagram, \"apTopologyView\", {\n        initialContentAlignment: go.Spot.Center,\n        \"undoManager.isEnabled\": true,\n        initialAutoScale: go.Diagram.UniformToFill,\n        layout: $(go.LayeredDigraphLayout, {\n          direction: 0,\n          layerSpacing: 100,\n          columnSpacing: 7\n        })\n      });\n      function linkInfo(d) {\n        return `${d.name}`;\n      }\n      setInterval(() => {\n        this.myDiagramDiv2.redraw();\n      }, 60);\n      this.myDiagramDiv2.nodeTemplate = $(go.Node, \"Auto\", {\n        background: \"white\",\n        selectionAdorned: false\n      },\n      //new go.Binding(\"location\", \"loc\", go.Point.parse),\n      $(go.Panel, \"Horizontal\"), $(go.Picture, {\n        width: 65,\n        height: 65\n      }, new go.Binding(\"width\", \"isClient\", function (l) {\n        return l ? 35 : 65;\n      }), new go.Binding(\"height\", \"isClient\", function (l) {\n        return l ? 35 : 65;\n      }), new go.Binding(\"source\", \"source\", function (image) {\n        return image ? image : '';\n      }), new go.Binding(\"element\", \"source-video\", function (video) {\n        return video ? video : '';\n      })), $(go.Panel, \"Vertical\", new go.Binding(\"margin\", \"label\", function (l) {\n        return l ? new go.Margin(110, 0, 0, 0) : '';\n      }), new go.Binding(\"background\", \"label\", function (l) {\n        return l ? '#eaeaea' : '';\n      }), new go.Binding(\"padding\", \"label\", function (l) {\n        return l ? 3 : '';\n      }), $(go.TextBlock, {\n        margin: new go.Margin(0, 0, 0, 0),\n        maxSize: new go.Size(100, 30),\n        isMultiline: false\n        // click: () => {\n        //   alert('label clicked');\n        // }\n      }, new go.Binding(\"text\", \"label\", function (l) {\n        return l ? l : '';\n      }))), {\n        click: (e, obj) => {\n          console.log(obj.part.data);\n          if (obj.part.data.key === 'ethernet' || obj.part.data.key === 'ap') {\n            return;\n          }\n          if (obj.part.data.isClient) {\n            this.imageDblClick(obj.part.data);\n          } else {\n            this.showTableView('', false);\n          }\n        },\n        toolTip: $(\"ToolTip\", {\n          \"Border.stroke\": colors[\"blue\"],\n          \"Border.strokeWidth\": 1\n        }, $(go.TextBlock, \"Arrowheads\", {\n          margin: 4\n        }, {\n          font: \"bold 12px sans-serif\"\n        }, new go.Binding(\"text\", \"text\")))\n      });\n      this.myDiagramDiv2.linkTemplate = $(go.Link, {\n        curve: go.Link.Bezier,\n        toShortLength: 8,\n        relinkableFrom: true,\n        relinkableTo: true\n      },\n      // allow the user to relink existing links\n      $(go.Shape, new go.Binding(\"stroke\", \"color\"), new go.Binding(\"strokeWidth\", \"thick\")), {\n        toolTip: $(\"ToolTip\", $(go.TextBlock, {\n          margin: 2\n        },\n        // the tooltip shows the result of calling linkInfo(data)\n        new go.Binding(\"text\", \"\", linkInfo)))\n      });\n      var model = $(go.GraphLinksModel);\n      model.nodeDataArray = this.apNodeData;\n      model.linkDataArray = this.apLinkData;\n      this.myDiagramDiv2.model = model;\n    }\n    goBack() {\n      this.showChart = false;\n      console.log(this.nextVisitedPage);\n      console.log(this.VisitedPage);\n      this.hideDDMenu();\n      if (this.tableView) {\n        this.tableView = false;\n        this.topologyView = true;\n      } else {\n        this.tableView = true;\n        this.topologyView = false;\n      }\n      if (this.VisitedPage === 'main') {\n        this.tableView = false;\n        this.topologyView = true;\n        this.getAllClientsData(this.routerMac);\n        this.currentPage = 'main';\n        document.getElementById(\"myDiagramDiv1\").style.display = \"block\";\n        document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n        document.getElementById(\"card2\").style.display = \"none\";\n        //document.getElementById(\"button1\").style.display = \"none\";\n        this.backBtnDisabled = true;\n        this.nextRouterKey = this.routerKey;\n        if (this.dblClkFired) {\n          this.nextVisitedPage = 'table';\n          //this.dblClkFired = false;\n        } else {\n          this.nextVisitedPage = 'middle';\n        }\n      } else if (this.VisitedPage === 'middle') {\n        this.second(this.routerKey);\n      }\n    }\n    goForward() {\n      if (this.nextVisitedPage === 'middle') {\n        this.second(this.nextRouterKey);\n      } else if (this.nextVisitedPage === 'table') {\n        document.getElementById(\"myDiagramDiv1\").style.display = \"none\";\n        document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n        document.getElementById(\"card2\").style.display = \"none\";\n        //document.getElementById(\"button1\").style.display = \"block\";\n        this.backBtnDisabled = false;\n        this.showTableView(this.nextTabledataUniqueId, this.dblClkFired);\n      }\n    }\n    loadTabledata(key) {\n      this.deviceDatasUpdated = [];\n      if (key) {} else {\n        if (this.accessPointId) {\n          this.deviceDatasUpdated = [];\n          for (let i = 0; i < this.deviceDatas.length; i++) {\n            if (this.deviceDatas[i].key1 === this.accessPointId) {\n              this.deviceDatasUpdated.push(this.deviceDatas[i]);\n            }\n          }\n        } else {\n          // this.deviceDatas.shift();\n          if (this.deviceDatas[0].type == 'All') {\n            this.deviceDatas.shift();\n            this.deviceDatasUpdated = this.deviceDatas;\n          } else {\n            this.deviceDatasUpdated = this.deviceDatas;\n          }\n        }\n      }\n      //console.log(this.deviceDatasUpdated);\n    }\n\n    loadTopologyDataByType(type) {\n      this.tplgyType = type;\n      this.deviceDatasUpdated = [];\n      for (let i = 0; i < this.deviceDatas.length; i++) {\n        if (this.deviceDatas[i].deviceType === type && this.deviceDatas[i].deviceType != 'All') {\n          this.deviceDatasUpdated.push(this.deviceDatas[i]);\n        }\n      }\n      console.log(this.deviceDatasUpdated);\n    }\n    loadTopologydata() {\n      event.stopImmediatePropagation();\n      this.hideDDMenu();\n      this.topologyView = true;\n      this.tableView = false;\n      this.deviceDatasUpdated = [];\n      this.topologyData = {\n        phy: [],\n        legacy: [],\n        clientWifi: []\n      };\n      if (this.deviceDatas.length) {\n        for (let i = 0; i < this.deviceDatas.length; i++) {\n          if (this.deviceDatas[i].deviceType === 'phy') {\n            this.topologyData['phy'].push(this.deviceDatas[i]);\n          } else if (this.deviceDatas[i].deviceType === 'legacy') {\n            this.topologyData['legacy'].push(this.deviceDatas[i]);\n          } else {\n            this.topologyData['clientWifi'].push(this.deviceDatas[i]);\n          }\n        }\n        this.loadTopologyDataByType('phy');\n        console.log(this.topologyData);\n      }\n      this.VisitedPage = this.currentPage;\n      // if (this.currentPage == 'main') {\n      //   this.nextVisitedPage = 'table';\n      // }\n      document.getElementById(\"myDiagramDiv1\").style.display = \"none\";\n      document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n      document.getElementById(\"card2\").style.display = \"block\";\n      //document.getElementById(\"button1\").style.display = \"block\";\n      this.backBtnDisabled = false;\n      //console.log(this.myDiagramDiv2.model.toJson());\n    }\n\n    filterByLegacyType(event) {\n      console.log(event.target.checked);\n      if (event.target.checked) {\n        this.legacyChecked = true;\n      } else {\n        this.legacyChecked = false;\n      }\n      this.filterTableData();\n    }\n    filterByPhyType(event) {\n      console.log(event.target.checked);\n      if (event.target.checked) {\n        this.phyChecked = true;\n      } else {\n        this.phyChecked = false;\n      }\n      this.filterTableData();\n    }\n    filterTableData() {\n      console.log(this.deviceDatas);\n      this.deviceDatasUpdated = this.deviceDatas;\n      if (this.legacyChecked || this.phyChecked) {\n        this.deviceDatasUpdated = [];\n        for (let i = 0; i < this.deviceDatas.length; i++) {\n          if (this.deviceDatas[i]['legacy-device-test-result'] !== 'PASS' && this.legacyChecked) {\n            this.deviceDatasUpdated.push(this.deviceDatas[i]);\n          } else if (this.deviceDatas[i]['signal-strength-test-result'] !== 'PASS' && this.phyChecked) {\n            this.deviceDatasUpdated.push(this.deviceDatas[i]);\n          } else if (this.deviceDatas[i]['phy-rate-test-result'] !== 'PASS' && this.phyChecked) {\n            this.deviceDatasUpdated.push(this.deviceDatas[i]);\n          }\n          //phy-rate-test-result\n        }\n      }\n\n      this.setCustomFilterInTable();\n      console.log(this.deviceDatasUpdated);\n    }\n    filterTableSuccessData() {\n      console.log(this.deviceDatas);\n      this.deviceDatasUpdated = [];\n      for (let i = 0; i < this.deviceDatas.length; i++) {\n        if (this.deviceDatas[i]['legacy-device-test-result'] === 'PASS' && this.deviceDatas[i]['signal-strength-test-result'] === 'PASS') {\n          this.deviceDatasUpdated.push(this.deviceDatas[i]);\n        }\n      }\n      this.setCustomFilterInTable();\n      console.log(this.deviceDatasUpdated);\n    }\n    showTableView(uniqueId, dblClick) {\n      event.stopImmediatePropagation();\n      //this.hideDDMenu();\n      this.topologyView = false;\n      this.tableView = true;\n      this.currentPage = 'table';\n      //new code\n      //this.loadTabledata(uniqueId);\n      this.deviceDatasUpdated = this.deviceDatasUpdated.filter(function (obj) {\n        return obj['client-type'] !== 'All';\n      });\n      //localStorage.setItem('lastVisitedPage', 'middle');\n      //localStorage.setItem(' VisitedPage', 'middle');\n      if (!dblClick) {\n        this.VisitedPage = 'middle';\n      } else {\n        this.VisitedPage = 'main';\n      }\n      this.nextVisitedPage = 'table';\n      //this.nextRouterKey = key;\n      this.nextTabledataUniqueId = uniqueId;\n      document.getElementById(\"myDiagramDiv1\").style.display = \"none\";\n      document.getElementById(\"myDiagramDiv2\").style.display = \"none\";\n      document.getElementById(\"card2\").style.display = \"block\";\n      //document.getElementById(\"button1\").style.display = \"block\";\n      this.backBtnDisabled = false;\n      console.log(this.nextVisitedPage);\n      console.log(this.VisitedPage);\n    }\n    openMenu() {\n      event.stopImmediatePropagation();\n      document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n    }\n    play() {\n      return true;\n    }\n    getData() {\n      if (!this.routerMac) {\n        this.routerMac = '01:00:00:00:00:01';\n      }\n      this.spinner.show();\n      let url = `http://52.12.71.176:8080/topology/landing/${this.routerMac}`;\n      url = `assets/data/rg.json`;\n      this.http.get(url).subscribe(json => {\n        this.spinner.hide();\n        let nodeData = [];\n        let linkData = [];\n        let accessPointImages = this.accessPointImages;\n        let uplinkData = {\n          text: `MAC : ${json.landing.uplink.mac} \\n Download Rate : ${json.landing.uplink.downloadRate} Mbps \\n Upload Rate : ${json.landing.uplink.uploadRate} Mbps `,\n          source: 'assets/images/internet.png',\n          key: 'internet',\n          accessPointId: ''\n        };\n        let uplinkEthernetData = {\n          text: `Ethernet `,\n          source: 'assets/images/tar.png',\n          key: 'ethernet',\n          accessPointId: ''\n        };\n        if (json.landing && json.landing.rg && json.landing.rg.aps) {\n          let color;\n          color = json.landing.rg['online'] ? 'green' : 'red';\n          nodeData.push(uplinkData);\n          linkData.push({\n            from: uplinkData.key,\n            to: json.landing.rg.mac,\n            color: color,\n            thick: 3,\n            routing: go.Link.Normal,\n            name: uplinkData.text\n          });\n          json.landing.rg['text'] = `Ip address : ${json.landing.rg['ip']} \\n MAC : ${json.landing.rg['mac']} \\n Version : ${json.landing.rg['version']} \\n Device : ${json.landing.rg['hostname']} \\n`;\n          json.landing.rg['source'] = json.landing.rg['online'] ? 'assets/images/alarm-all-clear.png' : 'assets/images/router-critical-state.png';\n          json.landing.rg['key'] = json.landing.rg.mac;\n          json.landing.rg['accessPointId'] = '';\n          json.landing.rg['label'] = `${json.landing.rg['hostname']}`;\n          json.landing.rg['failedClientsNote'] = ``;\n          json.landing.rg['showBtn'] = true;\n          //set false for rg\n          // json.landing.rg['failed-clients'] = false;\n          // json.landing.rg['passed-clients'] = false;\n          json.landing.rg['customFilterObj'] = {\n            legacyChecked: false,\n            phyChecked: false\n          };\n          if (json.landing.rg['failed-clients']) {\n            let failedClientsNote = '';\n            let count = 1;\n            for (let c = 0; c < json.landing.rg['clients'].length; c++) {\n              if (json.landing.rg['clients'][c]['phy-rate-test-result'] == 'FAIL' || json.landing.rg['clients'][c]['signal-strength-test-result'] == 'FAIL' || json.landing.rg['clients'][c]['legacy-device-test-result'] == 'FAIL') {\n                if (json.landing.rg['clients'][c]['legacy-device-test-result'] == 'FAIL') {\n                  json.landing.rg['customFilterObj'].legacyChecked = true;\n                  failedClientsNote += `${count}) ${json.landing.rg['clients'][c]['hostname']} : ${json.landing.rg['clients'][c]['client-note']} \\n`;\n                } else if (json.landing.rg['clients'][c]['signal-strength-test-result'] == 'FAIL') {\n                  json.landing.rg['customFilterObj'].phyChecked = true;\n                  failedClientsNote += `${count}) ${json.landing.rg['clients'][c]['hostname']} : ${json.landing.rg['clients'][c]['client-note']} \\n`;\n                } else if (json.landing.rg['clients'][c]['phy-rate-test-result'] == 'FAIL') {\n                  json.landing.rg['customFilterObj'].phyChecked = true;\n                  failedClientsNote += `${count}) ${json.landing.rg['clients'][c]['hostname']} : ${json.landing.rg['clients'][c]['client-note']} \\n`;\n                }\n                count++;\n              }\n            }\n            json.landing.rg['failedClientsNote'] = failedClientsNote;\n          }\n          nodeData.push(json.landing.rg);\n          let rgData = json.landing.rg.aps;\n          for (let i = 0; i < rgData.length; i++) {\n            if (!rgData[i]) {\n              continue;\n            }\n            if (!rgData[i]['int-type']) {\n              continue;\n            }\n            rgData[i]['text'] = `Ip address : ${rgData[i]['ip']}\\n MAC : ${rgData[i]['mac']} \\n Version : ${rgData[i]['version']} \\n Device : ${rgData[i]['hostname']} \\n Note : ${rgData[i]['ap-tech-note']} \\n`;\n            if (rgData[i]['ap-color'] === 'green') {\n              rgData[i]['source'] = accessPointImages[rgData[i]['ap-color']] ? accessPointImages[rgData[i]['ap-color']] : 'assets/images/access-point-clear.png';\n            }\n            if (rgData[i]['ap-color'] !== 'green') {\n              let src = accessPointImages[rgData[i]['ap-color']];\n              let video = document.createElement('video');\n              video.setAttribute('preload', 'auto');\n              video.setAttribute('type', 'video/mp4');\n              video.autoplay = true;\n              video.setAttribute(\"width\", \"320\");\n              video.setAttribute(\"height\", \"240\");\n              video.src = src;\n              video.loop = true;\n              //video.muted = true;\n              // video.setAttribute('onloadedmetadata', this.play());\n              // video.setAttribute('oncanplay', this.play());\n              rgData[i]['source-video'] = video;\n            }\n            rgData[i]['key'] = rgData[i].mac;\n            rgData[i]['accessPointId'] = 'CXNK005A77E9';\n            rgData[i]['label'] = `${rgData[i]['hostname']}`;\n            rgData[i]['showBtn'] = true;\n            rgData[i]['failedClientsNote'] = ``;\n            rgData[i]['customFilterObj'] = {\n              legacyChecked: false,\n              phyChecked: false\n            };\n            if (rgData[i]['failed-clients']) {\n              let failedClientsNote = '';\n              let count = 1;\n              for (let c = 0; c < rgData[i]['clients'].length; c++) {\n                if (rgData[i]['clients'][c]['phy-rate-test-result'] == 'FAIL' || rgData[i]['clients'][c]['signal-strength-test-result'] == 'FAIL' || rgData[i]['clients'][c]['legacy-device-test-result'] == 'FAIL') {\n                  if (rgData[i]['clients'][c]['legacy-device-test-result'] == 'FAIL') {\n                    rgData[i]['customFilterObj'].legacyChecked = true;\n                    failedClientsNote += `${count}) ${rgData[i]['clients'][c]['hostname']}: ${rgData[i]['clients'][c]['client-note']} \\n`;\n                  } else if (rgData[i]['clients'][c]['signal-strength-test-result'] == 'FAIL') {\n                    rgData[i]['customFilterObj'].phyChecked = true;\n                    failedClientsNote += `${count}) ${rgData[i]['clients'][c]['hostname']}: ${rgData[i]['clients'][c]['client-note']} \\n`;\n                  } else if (rgData[i]['clients'][c]['phy-rate-test-result'] == 'FAIL') {\n                    rgData[i]['customFilterObj'].phyChecked = true;\n                    failedClientsNote += `${count}) ${rgData[i]['clients'][c]['hostname']}: ${rgData[i]['clients'][c]['client-note']} \\n`;\n                  }\n                  count++;\n                }\n              }\n              rgData[i]['failedClientsNote'] = failedClientsNote;\n            }\n            if (rgData[i]['int-type'] === 'UNKNOWN') {\n              rgData[i]['source'] = 'assets/images/cloud.png';\n              rgData[i]['failed-clients'] = json.landing.rg['failed-clients'];\n              rgData[i]['passed-clients'] = json.landing.rg['passed-clients'];\n              rgData[i]['failedClientsNote'] = json.landing.rg['failedClientsNote'];\n              rgData[i]['customFilterObj'] = json.landing.rg['customFilterObj'];\n              rgData[i]['label'] = `Unknown`;\n              //rgData[i]['label'] = `Cloud`;            \n              json.landing.rg['failed-clients'] = 0;\n              json.landing.rg['passed-clients'] = 0;\n              json.landing.rg['showBtn'] = false;\n            }\n            rgData[i].backhaul['rx-phy-rate'] = rgData[i].backhaul['rx-phy-rate'] ? this.bytesToSize(rgData[i].backhaul['rx-phy-rate']) : this.bytesToSize(0);\n            rgData[i].backhaul['tx-phy-rate'] = rgData[i].backhaul['tx-phy-rate'] ? this.bytesToSize(rgData[i].backhaul['tx-phy-rate']) : this.bytesToSize(0);\n            nodeData.push(rgData[i]);\n            if (rgData[i]['int-type'] === 'eth') {\n              //rgData[i]['source'] = 'assets/images/tar.png';\n              color = 'black';\n              nodeData.push(uplinkEthernetData);\n              linkData.push({\n                from: json.landing.rg.mac,\n                to: uplinkEthernetData.key,\n                color: color,\n                thick: 3,\n                routing: go.Link.Normal,\n                name: `${json.landing.rg.hostname} to Ethernet`\n              });\n              linkData.push({\n                from: uplinkEthernetData.key,\n                to: rgData[i].mac,\n                color: color,\n                thick: 3,\n                routing: go.Link.Normal,\n                name: `Ethernet to ${rgData[i].hostname}`\n              });\n            } else {\n              color = rgData[i].backhaul['backhaul-color'];\n              if (color === 'yellow') {\n                color = '#e0b34c';\n              }\n              linkData.push({\n                from: json.landing.rg.mac,\n                to: rgData[i].mac,\n                color: color,\n                thick: 3,\n                routing: go.Link.Normal,\n                name: `Transmit rate: ${rgData[i].backhaul['tx-phy-rate']} \\n Receive rate: ${rgData[i].backhaul['rx-phy-rate']}`\n              });\n            }\n            if (rgData[i].aps.length) {\n              for (let j = 0; j < rgData[i].aps.length; j++) {\n                if (rgData[i].aps[j]) {\n                  rgData[i].aps[j]['text'] = `Ip address : ${rgData[i].aps[j]['ip']} \\n MAC : ${rgData[i].aps[j]['mac']} \\n Version : ${rgData[i].aps[j]['version']} \\n Device : ${rgData[i].aps[j]['hostname']} \\n Note : ${rgData[i].aps[j]['ap-tech-note']}`;\n                  if (rgData[i].aps[j]['ap-color'] === 'green') {\n                    rgData[i].aps[j]['source'] = accessPointImages[rgData[i].aps[j]['ap-color']] ? accessPointImages[rgData[i].aps[j]['ap-color']] : 'assets/images/access-point-clear.png';\n                  }\n                  if (rgData[i].aps[j]['ap-color'] !== 'green') {\n                    let src = accessPointImages[rgData[i].aps[j]['ap-color']];\n                    let video = document.createElement('video');\n                    video.setAttribute('preload', 'auto');\n                    video.setAttribute('type', 'video/mp4');\n                    video.autoplay = true;\n                    video.setAttribute(\"width\", \"320\");\n                    video.setAttribute(\"height\", \"240\");\n                    video.src = src;\n                    video.loop = true;\n                    rgData[i].aps[j]['source-video'] = video;\n                  }\n                  rgData[i].aps[j]['key'] = rgData[i].aps[j].mac;\n                  rgData[i].aps[j]['accessPointId'] = 'CXNK005A77E9';\n                  rgData[i].aps[j].backhaul['rx-phy-rate'] = rgData[i].aps[j].backhaul['rx-phy-rate'] ? this.bytesToSize(rgData[i].aps[j].backhaul['rx-phy-rate']) : this.bytesToSize(0);\n                  rgData[i].aps[j].backhaul['tx-phy-rate'] = rgData[i].aps[j].backhaul['tx-phy-rate'] ? this.bytesToSize(rgData[i].aps[j].backhaul['tx-phy-rate']) : this.bytesToSize(0);\n                  rgData[i].aps[j]['label'] = `${rgData[i].aps[j]['hostname']}`;\n                  rgData[i].aps[j]['showBtn'] = true;\n                  rgData[i].aps[j]['failedClientsNote'] = ``;\n                  rgData[i].aps[j]['customFilterObj'] = {\n                    legacyChecked: false,\n                    phyChecked: false\n                  };\n                  if (rgData[i].aps[j]['failed-clients']) {\n                    let failedClientsNote = '';\n                    let count = 1;\n                    for (let c = 0; c < rgData[i].aps[j]['clients'].length; c++) {\n                      if (rgData[i].aps[j]['clients'][c]['phy-rate-test-result'] == 'FAIL' || rgData[i].aps[j]['clients'][c]['signal-strength-test-result'] == 'FAIL' || rgData[i].aps[j]['clients'][c]['legacy-device-test-result'] == 'FAIL') {\n                        if (rgData[i].aps[j]['clients'][c]['legacy-device-test-result'] == 'FAIL') {\n                          rgData[i].aps[j]['customFilterObj'].legacyChecked = true;\n                          failedClientsNote += `${count}) ${rgData[i].aps[j]['clients'][c]['hostname']} :  ${rgData[i].aps[j]['clients'][c]['client-note']} \\n`;\n                        } else if (rgData[i].aps[j]['clients'][c]['signal-strength-test-result'] == 'FAIL') {\n                          console.log('signal streength check');\n                          rgData[i].aps[j]['customFilterObj'].phyChecked = true;\n                          failedClientsNote += `${count}) ${rgData[i].aps[j]['clients'][c]['hostname']} :  ${rgData[i].aps[j]['clients'][c]['client-note']} \\n`;\n                        } else if (rgData[i].aps[j]['clients'][c]['phy-rate-test-result'] == 'FAIL') {\n                          rgData[i].aps[j]['customFilterObj'].phyChecked = true;\n                          failedClientsNote += `${count}) ${rgData[i].aps[j]['clients'][c]['hostname']} :  ${rgData[i].aps[j]['clients'][c]['client-note']} \\n`;\n                        }\n                        count++;\n                      }\n                    }\n                    rgData[i].aps[j]['failedClientsNote'] = failedClientsNote;\n                  }\n                  console.log(rgData[i].backhaul['tx-phy-rate']);\n                  nodeData.push(rgData[i].aps[j]);\n                  if (rgData[i].aps[j]['int-type'] === 'eth') {\n                    //rgData[i].aps[j]['source'] = 'assets/images/tar.png';\n                    color = 'black';\n                    nodeData.push(uplinkEthernetData);\n                    linkData.push({\n                      from: rgData[i].mac,\n                      to: uplinkEthernetData.key,\n                      color: \"#546caf\",\n                      thick: 3,\n                      routing: go.Link.Normal,\n                      name: `Internet to ${json.landing.rg.hostname}`\n                    });\n                    linkData.push({\n                      from: uplinkEthernetData.key,\n                      to: rgData[i].aps[j].mac,\n                      color: color,\n                      thick: 3,\n                      routing: go.Link.Normal,\n                      name: `${rgData[i].hostname} to ${rgData[i].aps[j].hostname}`\n                    });\n                  } else {\n                    color = rgData[i].aps[j].backhaul['backhaul-color'];\n                    if (color === 'yellow') {\n                      color = '#e0b34c';\n                    }\n                    linkData.push({\n                      from: rgData[i].mac,\n                      to: rgData[i].aps[j].mac,\n                      color: color,\n                      thick: 3,\n                      routing: go.Link.Normal,\n                      name: `Transmit rate: ${rgData[i].aps[j].backhaul['tx-phy-rate']} \\n Receive rate: ${rgData[i].aps[j].backhaul['rx-phy-rate']}`\n                    });\n                  }\n                  if (rgData[i].aps[j].aps.length) {\n                    for (let k = 0; k < rgData[i].aps[j].aps.length; k++) {\n                      if (rgData[i].aps[j].aps[k]) {\n                        rgData[i].aps[j].aps[k]['text'] = `Ip address : ${rgData[i].aps[j].aps[k]['ip']} \\n MAC : ${rgData[i].aps[j].aps[k]['mac']} \\n Version : ${rgData[i].aps[j].aps[k]['version']} \\n Device : ${rgData[i].aps[j].aps[k]['hostname']} \\n Note : ${rgData[i].aps[j].aps[k]['ap-tech-note']}`;\n                        if (rgData[i].aps[j].aps[k]['ap-color'] === 'green') {\n                          rgData[i].aps[j].aps[k]['source'] = accessPointImages[rgData[i].aps[j].aps[k]['ap-color']] ? accessPointImages[rgData[i].aps[j].aps[k]['ap-color']] : 'assets/images/access-point-clear.png';\n                        }\n                        if (rgData[i].aps[j].aps[k]['ap-color'] !== 'green') {\n                          let src = accessPointImages[rgData[i].aps[j].aps[k]['ap-color']];\n                          let video = document.createElement('video');\n                          video.setAttribute('preload', 'auto');\n                          video.setAttribute('type', 'video/mp4');\n                          video.autoplay = true;\n                          video.setAttribute(\"width\", \"320\");\n                          video.setAttribute(\"height\", \"240\");\n                          video.src = src;\n                          video.loop = true;\n                          rgData[i].aps[j].aps[k]['source-video'] = video;\n                        }\n                        rgData[i].aps[j].aps[k]['key'] = rgData[i].aps[j].aps[k].mac;\n                        rgData[i].aps[j].aps[k]['accessPointId'] = 'CXNK00207B91';\n                        rgData[i].aps[j].aps[k].backhaul['rx-phy-rate'] = rgData[i].aps[j].aps[k].backhaul['rx-phy-rate'] ? this.bytesToSize(rgData[i].aps[j].aps[k].backhaul['rx-phy-rate']) : this.bytesToSize(0);\n                        rgData[i].aps[j].aps[k].backhaul['tx-phy-rate'] = rgData[i].aps[j].aps[k].backhaul['tx-phy-rate'] ? this.bytesToSize(rgData[i].aps[j].aps[k].backhaul['tx-phy-rate']) : this.bytesToSize(0);\n                        rgData[i].aps[j].aps[k]['label'] = `${rgData[i].aps[j].aps[k]['hostname']}`;\n                        rgData[i].aps[j].aps[k]['showBtn'] = true;\n                        rgData[i].aps[j].aps[k]['failedClientsNote'] = ``;\n                        rgData[i].aps[j].aps[k]['customFilterObj'] = {\n                          legacyChecked: false,\n                          phyChecked: false\n                        };\n                        if (rgData[i].aps[j].aps[k]['failed-clients']) {\n                          let failedClientsNote = '';\n                          let count = 1;\n                          for (let c = 0; c < rgData[i].aps[j].aps[k]['clients'].length; c++) {\n                            if (rgData[i].aps[j].aps[k]['clients'][c]['phy-rate-test-result'] == 'FAIL' || rgData[i].aps[j].aps[k]['clients'][c]['signal-strength-test-result'] == 'FAIL' || rgData[i].aps[j].aps[k]['clients'][c]['legacy-device-test-result'] == 'FAIL') {\n                              if (rgData[i].aps[j].aps[k]['clients'][c]['legacy-device-test-result'] == 'FAIL') {\n                                rgData[i].aps[j].aps[k]['customFilterObj'].legacyChecked = true;\n                                failedClientsNote += `${count}) ${rgData[i].aps[j].aps[k]['clients'][c]['hostname']} : ${rgData[i].aps[j].aps[k]['clients'][c]['client-note']} \\n`;\n                              } else if (rgData[i].aps[j].aps[k]['clients'][c]['signal-strength-test-result'] == 'FAIL') {\n                                rgData[i].aps[j].aps[k]['customFilterObj'].phyChecked = true;\n                                failedClientsNote += `${count}) ${rgData[i].aps[j].aps[k]['clients'][c]['hostname']} : ${rgData[i].aps[j].aps[k]['clients'][c]['client-note']} \\n`;\n                              } else if (rgData[i].aps[j].aps[k]['clients'][c]['phy-rate-test-result'] == 'FAIL') {\n                                rgData[i].aps[j].aps[k]['customFilterObj'].phyChecked = true;\n                                failedClientsNote += `${count}) ${rgData[i].aps[j].aps[k]['clients'][c]['hostname']} : ${rgData[i].aps[j].aps[k]['clients'][c]['client-note']} \\n`;\n                              }\n                              count++;\n                            }\n                          }\n                          rgData[i].aps[j].aps[k]['failedClientsNote'] = failedClientsNote;\n                        }\n                        nodeData.push(rgData[i].aps[j].aps[k]);\n                        if (rgData[i].aps[j].aps[k]['int-type'] === 'eth') {\n                          //rgData[i].aps[j].aps[k]['source'] = 'assets/images/tar.png';\n                          color = 'black';\n                          nodeData.push(uplinkEthernetData);\n                          linkData.push({\n                            from: rgData[i].aps[j].mac,\n                            to: uplinkEthernetData.key,\n                            color: \"#546caf\",\n                            thick: 3,\n                            routing: go.Link.Normal,\n                            name: `Internet to ${json.landing.rg.hostname}`\n                          });\n                          linkData.push({\n                            from: uplinkEthernetData.key,\n                            to: rgData[i].aps[j].aps[k].mac,\n                            color: color,\n                            thick: 3,\n                            routing: go.Link.Normal,\n                            name: `${rgData[i].aps[j].hostname} to ${rgData[i].aps[j].aps[k].hostname}`\n                          });\n                        } else {\n                          color = rgData[i].aps[j].aps[k].backhaul['backhaul-color'];\n                          if (color === 'yellow') {\n                            color = '#e0b34c';\n                          }\n                          linkData.push({\n                            from: rgData[i].aps[j].mac,\n                            to: rgData[i].aps[j].aps[k].mac,\n                            color: color,\n                            thick: 3,\n                            routing: go.Link.Normal,\n                            name: `Transmit rate: ${rgData[i].aps[j].aps[k].backhaul['tx-phy-rate']} \\n Receive rate: ${rgData[i].aps[j].aps[k].backhaul['rx-phy-rate']}`\n                          });\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          this.nodeDataArray = nodeData;\n          this.linkDataArray = linkData;\n          this.loadfirst();\n          console.log(nodeData);\n          console.log(linkData);\n        }\n      }, err => {\n        console.log(err);\n      });\n    }\n    switchView() {\n      event.stopImmediatePropagation();\n      console.log('topology ' + this.topologyView);\n      console.log('table ' + this.tableView);\n      if (this.topologyView) {\n        this.deviceDatasUpdated = this.deviceDatas;\n        this.showTableView('', this.currentPage == 'main' ? true : false);\n        this.phyChecked = true;\n        this.legacyChecked = true;\n        this.filterTableData();\n        return;\n      } else if (this.tableView) {\n        this.goBack();\n        return;\n      }\n    }\n    onUserRowSelect(event) {\n      console.log(event.data.mac);\n      this.deviceDatasUpdated = [];\n      this.deviceDatasUpdated.push(event.data);\n      this.clientData = event.data;\n      this.getClientData(event.data.mac);\n    }\n    getAPData(apMac, singleClick, dblClick) {\n      let signalImages = {\n        0: 'assets/images/no-wifi-signal.png',\n        1: 'assets/images/low-wifi-signal.png',\n        2: 'assets/images/all-green-wifi.png',\n        3: 'assets/images/all-green-wifi.png'\n      };\n      let accessPointImages = this.accessPointImages;\n      this.spinner.show();\n      this.apInformtion = '';\n      console.log('last click');\n      console.log(this.lastDeviceClickData['int-type']);\n      if (this.lastDeviceClickData['int-type'] == 'UNKNOWN') {\n        apMac = this.routerMac;\n      }\n      this.http.get(`http://52.12.71.176:8080/topology/ap_view/${apMac}`).subscribe(json => {\n        this.spinner.hide();\n        if (!json['ap-view']) {\n          this.goBack();\n          return;\n        }\n        // for gojs daigram\n        this.apData = json['ap-view'].ap;\n        let nodeData = [];\n        let linkData = [];\n        let accessPointImages = this.accessPointImages;\n        this.ethOrAPType = this.lastDeviceClickData['int-type'];\n        let key = '';\n        let text = '';\n        let source = accessPointImages[this.apData['ap-color']];\n        if (!this.ethOrAPType) {\n          this.ethOrAPImageUrl = 'assets/images/internet.png';\n          text = 'Internet';\n          key = 'internet';\n          source = this.lastDeviceClickData['online'] ? 'assets/images/alarm-all-clear.png' : 'assets/images/router-critical-state.png';\n        } else if (this.ethOrAPType === 'eth') {\n          this.ethOrAPImageUrl = 'assets/images/tar.png';\n          text = 'Ethernet';\n          key = 'ethernet';\n        } else if (this.ethOrAPType === 'UNKNOWN') {\n          this.ethOrAPImageUrl = 'assets/images/alarm-all-clear.png';\n          text = 'Router';\n          key = 'router';\n          source = 'assets/images/cloud.png';\n        } else {\n          this.ethOrAPImageUrl = 'assets/images/access-point-clear.png';\n          text = 'AP';\n          key = 'ap';\n        }\n        let uplinkData = {\n          text: text,\n          source: this.ethOrAPImageUrl,\n          key: key\n        };\n        let color;\n        color = this.apData['ap-color'];\n        this.apLinkTooolTip = this.apData.backhaul['tx-phy-rate'] ? `Transmit Rate ${this.apData.backhaul['tx-phy-rate']} \\n Receive Rate ${this.apData.backhaul['rx-phy-rate']}` : `Ethernet to ${this.apData['hostname']}`;\n        nodeData.push(uplinkData);\n        linkData.push({\n          from: uplinkData.key,\n          to: this.apData['mac'],\n          color: color,\n          thick: this.lastDeviceClickData['int-type'] == 'UNKNOWN' ? 0 : 3,\n          routing: go.Link.Normal,\n          name: this.apLinkTooolTip\n        });\n        this.apData['text'] = `Ip address : ${this.apData['ip']} \\n MAC : ${this.apData['mac']} \\n Version : ${this.apData['version']} \\n Device : ${this.apData['hostname']} \\n Note : ${this.apData['ap-tech-note']} \\n `;\n        this.apData['source'] = source;\n        if (this.apData['ap-color'] !== 'green' && key == 'ap') {\n          let src = accessPointImages[this.apData['ap-color']];\n          let video = document.createElement('video');\n          video.autoplay = true;\n          video.setAttribute(\"width\", \"320\");\n          video.setAttribute(\"height\", \"240\");\n          video.src = src;\n          video.loop = true;\n          video.setAttribute('preload', 'auto');\n          this.apData['source-video'] = video;\n        }\n        this.apData['key'] = this.apData.mac;\n        if (this.lastDeviceClickData['int-type'] == 'UNKNOWN') {\n          this.apData['label'] = `Unknown`;\n        } else {\n          this.apData['label'] = `${this.apData['hostname']}`;\n        }\n        nodeData.push(this.apData);\n        // for gojs daigram\n        let data = json['ap-view'].clients;\n        this.ethOrAPType = json['ap-view'].ap['int-type'];\n        if (this.ethOrAPType === 'eth') {\n          this.ethOrAPImageUrl = 'assets/images/tar.png';\n        } else {\n          this.ethOrAPImageUrl = 'assets/images/access-point-clear.png';\n        }\n        this.apImageUrl = accessPointImages[json['ap-view'].ap['ap-color']];\n        this.apData = json['ap-view'].ap;\n        this.apToolTip = `Ip address : ${this.apData['ip']} \\n MAC : ${this.apData['mac']} \\n Version : ${this.apData['version']} \\n Device : ${this.apData['hostname']} \\n Note : ${this.apData['ap-tech-note']} \\n `;\n        this.apLinkTooolTip = this.apData.backhaul['tx-phy-rate'] ? `Transmit Rate ${this.apData.backhaul['tx-phy-rate']} \\n Receive Rate ${this.apData.backhaul['rx-phy-rate']}` : `Ethernet to ${this.apData['hostname']}`;\n        this.ssid = json['ap-view'].ap['radio-info'][0].ssid;\n        this.radio = json['ap-view'].ap['radio-info'][0]['freq-band'] + 'GHZ';\n        this.deviceDatasUpdated = [];\n        for (let i = 0; i < data.length; i++) {\n          if (!data[i]) {\n            continue;\n          }\n          //data[i]['ssid'] = this.ssid;\n          data[i]['radio'] = this.radio;\n          data[i]['accessPoint'] = data[i]['ap-hostname'] ? data[i]['ap-hostname'] : data[i]['access-point-hostname'];\n          // console.log(data[i]['client-type']);\n          // console.log(this.imagesObj[data[i]['client-type']]);\n          data[i]['image_url'] = data[i]['client-distance'] == 'far' ? this.imagesObj[data[i]['client-type'] + '-red'] ? this.imagesObj[data[i]['client-type'] + '-red'] : this.imagesObj[data[i]['client-type']] : this.imagesObj[data[i]['client-type']];\n          data[i]['siganl_image'] = {\n            'url': signalImages[data[i]['signal-bars']] ? signalImages[data[i]['signal-bars']] : 'assets/images/all-green-wifi.png',\n            'signal-strength': data[i]['signal-strength'] + ' dB'\n          };\n          data[i]['signal-strength'] = data[i]['signal-strength'] + 'dB';\n          this.deviceDatasUpdated.push(data[i]);\n          if (data[i]['intf-type'] === 'eth') {\n            data[i]['isClient'] = true;\n            data[i]['text'] = `Ip address : ${data[i]['ip-address']} \\n MAC : ${data[i]['mac']} \\n Device : ${data[i]['hostname']} \\n Note : ${data[i]['client-note']} \\n `;\n            data[i]['source'] = data[i]['image_url'];\n            data[i]['key'] = data[i].mac;\n            data[i]['label'] = `${data[i]['hostname']} - ${data[i]['client-type']}`;\n            nodeData.push(data[i]);\n            linkData.push({\n              from: this.apData.key,\n              to: data[i]['mac'],\n              color: 'black',\n              thick: 3,\n              routing: go.Link.Normal,\n              name: `Ethernet to ${data[i]['hostname']}`\n            });\n            //this.myDiagramDiv2.layout.layerSpacing = 100;\n          }\n        }\n        //gojs\n        console.log('ap data');\n        console.log(nodeData);\n        console.log(linkData);\n        this.apNodeData = nodeData;\n        this.apLinkData = linkData;\n        //gojs\n        this.deviceDatasUpdated = this.deviceDatasUpdated.sort(this.customSort);\n        this.deviceDatas = this.deviceDatasUpdated;\n        let flags = {};\n        let uniqueDevices = [{\n          'client-type': 'All'\n        }];\n        for (let i = 0; i < this.deviceDatas.length; i++) {\n          if (!flags[this.deviceDatas[i]['client-type']]) {\n            flags[this.deviceDatas[i]['client-type']] = true;\n            uniqueDevices.push(this.deviceDatas[i]);\n          }\n        }\n        this.uniqueDevices = uniqueDevices;\n        let hosts = {};\n        let uniqueHostnames = [{\n          'hostname': 'All'\n        }];\n        for (let i = 0; i < this.deviceDatas.length; i++) {\n          if (!hosts[this.deviceDatas[i]['hostname']]) {\n            hosts[this.deviceDatas[i]['hostname']] = true;\n            uniqueHostnames.push(this.deviceDatas[i]);\n          }\n        }\n        this.uniqueHostnames = uniqueHostnames;\n        if (dblClick) {\n          this.showTableView('', true);\n        }\n        if (singleClick) {\n          this.second(apMac, true);\n          this.rangeDeviceFilter(0);\n          // if (this.accessPointId) {\n          //   this.rangeDeviceFilter(this.accessPointId);\n          // } else {\n          //   this.rangeDeviceFilter(0);\n          // }\n        }\n\n        if (this.deviceDatas && this.deviceDatas[0].type == 'All') {\n          this.deviceDatas.shift();\n          this.deviceDatasUpdated = this.deviceDatas;\n        } else {\n          this.deviceDatasUpdated = this.deviceDatas;\n        }\n        if (this.filterEnabled) {\n          this.filterEnabled = false;\n          this.filterTableData();\n        } else if (this.successFilterEnabled) {\n          this.successFilterEnabled = false;\n          this.legacyChecked = false;\n          this.phyChecked = false;\n          this.filterTableSuccessData();\n        } else {\n          this.legacyChecked = true;\n          this.phyChecked = true;\n          this.filterTableData();\n        }\n        //console.log(this.deviceDatasUpdated);\n      });\n    }\n\n    getClientData(apMac, singleClick, dblClick) {\n      let signalImages = {\n        0: 'assets/images/no-wifi-signal.png',\n        1: 'assets/images/low-wifi-signal.png',\n        2: 'assets/images/all-green-wifi.png',\n        3: 'assets/images/all-green-wifi.png'\n      };\n      let seriesNames = {\n        'y_Client_Score': 'Client Score',\n        'y_Downloaded MBytes': 'Downloaded MBytes',\n        'y_Uploaded MBytes': 'Uploaded MBytes',\n        'y_Signal Strength dBm': 'Signal Strength dBm',\n        'time_value': 'Time'\n      };\n      this.spinner.show();\n      this.http.get(`http://52.12.71.176:8080/topology/client/${apMac}`).subscribe(json => {\n        this.spinner.hide();\n        let data = json.clients.pm_data;\n        console.log(data);\n        let length = data.length;\n        if (!length) {\n          return;\n        }\n        this.twoHrsData = [];\n        let chartData = [];\n        for (let i = 0; i < length; i++) {\n          if (data[i].series_name === 'time_value') {\n            this.twoHrsCategory = [];\n            let timeArr = data[i].series_data.split(\",\");\n            for (let j = 0; j < timeArr.length; j++) {\n              this.twoHrsCategory.push({\n                label: timeArr[j]\n              });\n            }\n          } else {\n            let dataArr = data[i].series_data.split(\",\");\n            let buildData = [];\n            let signalData = [];\n            let clientScoreData = [];\n            for (let j = 0; j < dataArr.length; j++) {\n              buildData.push({\n                value: dataArr[j]\n              });\n            }\n            this.twoHrsData.push({\n              seriesname: seriesNames[data[i].series_name] ? seriesNames[data[i].series_name] : data[i].series_name,\n              data: buildData\n            });\n          }\n        }\n        console.log(this.twoHrsData);\n        this.dataForClientScoreChart = [];\n        this.dataForSignalStrengthChart = [];\n        this.dataForUploadDownLoadChart = [];\n        for (let i = 0; i < this.twoHrsData.length; i++) {\n          if (this.twoHrsData[i]['seriesname'] === 'Client Score') {\n            this.dataForClientScoreChart.push(this.twoHrsData[i]);\n          } else if (this.twoHrsData[i]['seriesname'] === 'Signal Strength dBm') {\n            this.dataForSignalStrengthChart.push(this.twoHrsData[i]);\n          } else {\n            this.dataForUploadDownLoadChart.push(this.twoHrsData[i]);\n          }\n        }\n        // console.log(this.twoHrsCategory);\n        console.log(this.dataForUploadDownLoadChart);\n        console.log(this.dataForSignalStrengthChart);\n        console.log(this.dataForClientScoreChart);\n        this.data = {\n          chart: {\n            showhovereffect: \"1\",\n            drawcrossline: \"1\",\n            plottooltext: \"<b>$dataValue</b> on $seriesName\",\n            theme: \"fusion\"\n          },\n          categories: [{\n            category: this.twoHrsCategory\n          }],\n          dataset: this.dataForUploadDownLoadChart\n        };\n        this.dataSource = this.data;\n        this.dataSource1 = {\n          chart: {\n            showhovereffect: \"1\",\n            drawcrossline: \"1\",\n            plottooltext: \"<b>$dataValue</b> on $seriesName\",\n            theme: \"fusion\"\n          },\n          categories: [{\n            category: this.twoHrsCategory\n          }],\n          dataset: this.dataForClientScoreChart\n        };\n        this.dataSource2 = {\n          chart: {\n            showhovereffect: \"1\",\n            drawcrossline: \"1\",\n            plottooltext: \"<b>$dataValue</b> on $seriesName\",\n            theme: \"fusion\"\n          },\n          categories: [{\n            category: this.twoHrsCategory\n          }],\n          dataset: this.dataForSignalStrengthChart\n        };\n        ;\n        this.showChart = true;\n      });\n    }\n    getAllClientsData(apMac, singleClick, dblClick) {\n      let signalImages = {\n        0: 'assets/images/no-wifi-signal.png',\n        1: 'assets/images/low-wifi-signal.png',\n        2: 'assets/images/all-green-wifi.png',\n        3: 'assets/images/all-green-wifi.png'\n      };\n      this.spinner.show();\n      this.http.get(`http://52.12.71.176:8080/topology/subscriber_clients/${apMac}`).subscribe(json => {\n        this.spinner.hide();\n        let data = json.clients;\n        this.legacyChecked = false;\n        this.phyChecked = false;\n        this.deviceDatasUpdated = [];\n        for (let i = 0; i < data.length; i++) {\n          if (!data[i]) {\n            continue;\n          }\n          data[i]['ssid'] = this.ssid ? this.ssid : '-';\n          data[i]['radio'] = this.radio ? this.radio : '-';\n          data[i]['accessPoint'] = data[i]['ap-hostname'] ? data[i]['ap-hostname'] : data[i]['access-point-hostname'];\n          //data[i]['image_url'] = this.imagesObj[data[i]['client-type']] ? this.imagesObj[data[i]['client-type']] : this.images[0];\n          data[i]['image_url'] = data[i]['signal-bars'] < 2 ? this.imagesObj[data[i]['client-type'] + '-red'] ? this.imagesObj[data[i]['client-type'] + '-red'] : this.imagesObj['iot-red'] : this.imagesObj[data[i]['client-type']];\n          //data[i]['siganl_image'] = signalImages[data[i]['signal-bars']] ? signalImages[data[i]['signal-bars']] : 'assets/images/all-green-wifi.png';\n          data[i]['siganl_image'] = {\n            'url': signalImages[data[i]['signal-bars']] ? signalImages[data[i]['signal-bars']] : 'assets/images/all-green-wifi.png',\n            'signal-strength': data[i]['signal-strength'] + ' dB'\n          };\n          data[i]['signal-strength'] = data[i]['signal-strength'] + 'dB';\n          this.deviceDatasUpdated.push(data[i]);\n        }\n        this.deviceDatasUpdated = this.deviceDatasUpdated.sort(this.customSort);\n        //console.log(this.deviceDatasUpdated);\n        this.deviceDatas = this.deviceDatasUpdated;\n        if (dblClick) {\n          this.showTableView('', true);\n        }\n        if (singleClick) {\n          this.second(apMac, true);\n          this.rangeDeviceFilter(0);\n        }\n        // console.log('client datas');\n        // console.log(this.deviceDatasUpdated);\n      });\n    }\n\n    setCustomFilterInTable() {\n      let hosts = {};\n      let hostnameFilterData = [];\n      for (let i = 0; i < this.deviceDatasUpdated.length; i++) {\n        if (!hosts[this.deviceDatasUpdated[i]['hostname']]) {\n          console.log(this.deviceDatasUpdated[i]['hostname']);\n          hosts[this.deviceDatasUpdated[i]['hostname']] = true;\n          hostnameFilterData.push({\n            'value': this.deviceDatasUpdated[i]['hostname'],\n            'title': this.deviceDatasUpdated[i]['hostname']\n          });\n        }\n      }\n      this.hostnameFilterData = hostnameFilterData;\n      this.settings.columns.hostname.filter.config['list'] = hostnameFilterData;\n      this.settings = Object.assign({}, this.settings);\n    }\n    bytesToSize(bytes) {\n      // let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n      // if (bytes == 0) return '0 Byte';\n      // let i: any = Math.floor(Math.log(bytes) / Math.log(1024));\n      // return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];\n      return bytes + ' Bytes';\n    }\n    ngOnDestroy() {\n      if (this.diagramRedrawInt) {\n        clearInterval(this.diagramRedrawInt);\n      }\n    }\n  }\n  SampleTopologyComponent.ɵfac = function SampleTopologyComponent_Factory(t) {\n    return new (t || SampleTopologyComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.NgxSpinnerService));\n  };\n  SampleTopologyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SampleTopologyComponent,\n    selectors: [[\"app-sample-topology\"]],\n    decls: 6,\n    vars: 0,\n    consts: [[1, \"row\"], [1, \"col-md-12\"], [\"id\", \"myDiagramDiv1\", 2, \"width\", \"100%\", \"height\", \"600px\"], [1, \"col-sm-6\"], [\"id\", \"myDiagramDiv2\", 2, \"width\", \"100%\", \"height\", \"300px\"]],\n    template: function SampleTopologyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 0);\n        i0.ɵɵelementStart(4, \"div\", 3);\n        i0.ɵɵelement(5, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\"],\n    encapsulation: 2\n  });\n  return SampleTopologyComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}