{"ast":null,"code":"import { assign } from 'min-dash';\nimport { getElementLineIntersection } from './LayoutUtil';\nfunction dockingToPoint(docking) {\n  // use the dockings actual point and\n  // retain the original docking\n  return assign({\n    original: docking.point.original || docking.point\n  }, docking.actual);\n}\n\n/**\n * A {@link ConnectionDocking} that crops connection waypoints based on\n * the path(s) of the connection source and target.\n *\n * @param {djs.core.ElementRegistry} elementRegistry\n */\nexport default function CroppingConnectionDocking(elementRegistry, graphicsFactory) {\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n}\nCroppingConnectionDocking.$inject = ['elementRegistry', 'graphicsFactory'];\n\n/**\n * @inheritDoc ConnectionDocking#getCroppedWaypoints\n */\nCroppingConnectionDocking.prototype.getCroppedWaypoints = function (connection, source, target) {\n  source = source || connection.source;\n  target = target || connection.target;\n  var sourceDocking = this.getDockingPoint(connection, source, true),\n    targetDocking = this.getDockingPoint(connection, target);\n  var croppedWaypoints = connection.waypoints.slice(sourceDocking.idx + 1, targetDocking.idx);\n  croppedWaypoints.unshift(dockingToPoint(sourceDocking));\n  croppedWaypoints.push(dockingToPoint(targetDocking));\n  return croppedWaypoints;\n};\n\n/**\n * Return the connection docking point on the specified shape\n *\n * @inheritDoc ConnectionDocking#getDockingPoint\n */\nCroppingConnectionDocking.prototype.getDockingPoint = function (connection, shape, dockStart) {\n  var waypoints = connection.waypoints,\n    dockingIdx,\n    dockingPoint,\n    croppedPoint;\n  dockingIdx = dockStart ? 0 : waypoints.length - 1;\n  dockingPoint = waypoints[dockingIdx];\n  croppedPoint = this._getIntersection(shape, connection, dockStart);\n  return {\n    point: dockingPoint,\n    actual: croppedPoint || dockingPoint,\n    idx: dockingIdx\n  };\n};\n\n// helpers //////////////////////\n\nCroppingConnectionDocking.prototype._getIntersection = function (shape, connection, takeFirst) {\n  var shapePath = this._getShapePath(shape),\n    connectionPath = this._getConnectionPath(connection);\n  return getElementLineIntersection(shapePath, connectionPath, takeFirst);\n};\nCroppingConnectionDocking.prototype._getConnectionPath = function (connection) {\n  return this._graphicsFactory.getConnectionPath(connection);\n};\nCroppingConnectionDocking.prototype._getShapePath = function (shape) {\n  return this._graphicsFactory.getShapePath(shape);\n};\nCroppingConnectionDocking.prototype._getGfx = function (element) {\n  return this._elementRegistry.getGraphics(element);\n};","map":null,"metadata":{},"sourceType":"module"}