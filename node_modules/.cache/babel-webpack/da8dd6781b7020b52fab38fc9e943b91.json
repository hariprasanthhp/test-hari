{"ast":null,"code":"'use strict';\n\nvar entryFactory = require('../../../../factory/EntryFactory');\nvar cmdHelper = require('../../../../helper/CmdHelper'),\n  eventDefinitionHelper = require('../../../../helper/EventDefinitionHelper'),\n  utils = require('../../../../Utils');\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n  is = require('bpmn-js/lib/util/ModelUtil').is;\nvar forEach = require('lodash/forEach'),\n  find = require('lodash/find'),\n  filter = require('lodash/filter');\nfunction getContainedActivities(element) {\n  return getFlowElements(element, 'bpmn:Activity');\n}\nfunction getContainedBoundaryEvents(element) {\n  return getFlowElements(element, 'bpmn:BoundaryEvent');\n}\nfunction getFlowElements(element, type) {\n  return utils.filterElementsByType(element.flowElements, type);\n}\nfunction isCompensationEventAttachedToActivity(activity, boundaryEvents) {\n  var activityId = activity.id;\n  var boundaryEvent = find(boundaryEvents, function (boundaryEvent) {\n    var compensateEventDefinition = eventDefinitionHelper.getCompensateEventDefinition(boundaryEvent);\n    var attachedToRef = boundaryEvent.attachedToRef;\n    return compensateEventDefinition && attachedToRef && attachedToRef.id === activityId;\n  });\n  return !!boundaryEvent;\n}\n\n// subprocess: only when it is not triggeredByEvent\n// activity: only when it attach a compensation boundary event\n// callActivity: no limitation\nfunction canActivityBeCompensated(activity, boundaryEvents) {\n  return is(activity, 'bpmn:SubProcess') && !activity.triggeredByEvent || is(activity, 'bpmn:CallActivity') || isCompensationEventAttachedToActivity(activity, boundaryEvents);\n}\nfunction getActivitiesForCompensation(element) {\n  var boundaryEvents = getContainedBoundaryEvents(element);\n  return filter(getContainedActivities(element), function (activity) {\n    return canActivityBeCompensated(activity, boundaryEvents);\n  });\n}\nfunction getActivitiesForActivityRef(element) {\n  var bo = getBusinessObject(element);\n  var parent = bo.$parent;\n  var activitiesForActivityRef = getActivitiesForCompensation(parent);\n\n  // if throwing compensation event is in an event sub process:\n  // get also all activities outside of the event sub process\n  if (is(parent, 'bpmn:SubProcess') && parent.triggeredByEvent) {\n    parent = parent.$parent;\n    if (parent) {\n      activitiesForActivityRef = activitiesForActivityRef.concat(getActivitiesForCompensation(parent));\n    }\n  }\n  return activitiesForActivityRef;\n}\nfunction createActivityRefOptions(element) {\n  var options = [{\n    value: ''\n  }];\n  var activities = getActivitiesForActivityRef(element);\n  forEach(activities, function (activity) {\n    var activityId = activity.id;\n    var name = (activity.name ? activity.name + ' ' : '') + '(id=' + activityId + ')';\n    options.push({\n      value: activityId,\n      name: name\n    });\n  });\n  return options;\n}\nmodule.exports = function (group, element, bpmnFactory, compensateEventDefinition, elementRegistry, translate) {\n  group.entries.push(entryFactory.checkbox(translate, {\n    id: 'wait-for-completion',\n    label: translate('Wait for Completion'),\n    modelProperty: 'waitForCompletion',\n    get: function (element, node) {\n      return {\n        waitForCompletion: compensateEventDefinition.waitForCompletion\n      };\n    },\n    set: function (element, values) {\n      values.waitForCompletion = values.waitForCompletion || false;\n      return cmdHelper.updateBusinessObject(element, compensateEventDefinition, values);\n    }\n  }));\n  group.entries.push(entryFactory.selectBox(translate, {\n    id: 'activity-ref',\n    label: translate('Activity Ref'),\n    selectOptions: createActivityRefOptions(element),\n    modelProperty: 'activityRef',\n    get: function (element, node) {\n      var activityRef = compensateEventDefinition.activityRef;\n      activityRef = activityRef && activityRef.id;\n      return {\n        activityRef: activityRef || ''\n      };\n    },\n    set: function (element, values) {\n      var activityRef = values.activityRef || undefined;\n      activityRef = activityRef && getBusinessObject(elementRegistry.get(activityRef));\n      return cmdHelper.updateBusinessObject(element, compensateEventDefinition, {\n        activityRef: activityRef\n      });\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"script"}