{"ast":null,"code":"export const DEFAULT_VALUE = \"\";\nexport const SecurityTypes = [{\n  id: DEFAULT_VALUE,\n  name: DEFAULT_VALUE\n}, {\n  id: \"WPAand11i\",\n  name: \"WPA WPA2 Personal\"\n}, {\n  id: \"WPA\",\n  name: \"WPA Personal\"\n}, {\n  id: \"11i\",\n  name: \"WPA2-Personal\"\n}, {\n  id: \"Basic\",\n  name: \"Security Off\"\n}];\nexport const EncryptionTypes = [{\n  id: DEFAULT_VALUE,\n  name: DEFAULT_VALUE\n}, {\n  id: \"AESEncryption\",\n  name: \"AES\"\n}, {\n  id: \"TKIPEncryption\",\n  name: \"TKIP\"\n}, {\n  id: \"TKIPandAESEncryption\",\n  name: \"Both\"\n}];\nexport const fivegEncryptionTypes = [{\n  id: DEFAULT_VALUE,\n  name: DEFAULT_VALUE\n}, {\n  id: \"AESEncryption\",\n  name: \"AES\"\n}];\nexport const encryptionStoreToDisplay = {\n  'AESEncryption': 'AES',\n  'TKIPEncryption': 'TKIP',\n  'TKIPandAESEncryption': 'Both'\n};\n// export const securityNameToDisplay = {\n//     'SecurityOff': 'Security Off',\n//     'WPA-PSK': 'WPA-Personal',\n//     'WPA2-PSK': 'WPA2-Personal',\n//     'WPA/WPA2-PSK': 'WPA - WPA2-Personal',\n//     'WPA3-PSK': 'WPA3-Personal',\n//     'WPA2/WPA3-PSK': 'WPA2 - WPA3-Personal'\n// };\nexport const securityNameToDisplay = {\n  'SecurityOff': 'Security Off',\n  'WPA-PSK': 'WPA-Personal',\n  'WPA2-PSK': 'WPA2-Personal',\n  'WPA/WPA2-PSK': 'WPA WPA2-Personal',\n  'WPA3-PSK': 'WPA3-Personal',\n  'WPA2/WPA3-PSK': 'WPA2 WPA3-Personal',\n  'WPA3-SAE': 'WPA3-SAE'\n};\nexport const ssidMetaPattern = /^[ssid,SSID]{4}[0-9]+/;\nexport const IpPattern = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n/* /^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[1-9])$/ */\nexport const SSIDNamePattern = /^[a-zA-Z0-9\\_\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\~\\`\\,\\s\\.\\?\\|\\[\\]\\{\\}\\\"\\;\\:\\,\\<\\>\\\\\\/\\']*$/;\nexport function convertIpAddressToNumber(value) {\n  var values = value.split('.');\n  var num = ((values[0] * 256 + parseInt(values[1])) * 256 + parseInt(values[2])) * 256 + parseInt(values[3]);\n  return num;\n}\nexport const NamePatternError = \"The SSID Name may only contain letters [a-zA-Z], numbers [0-9], spaces, or [_!@#$%^&*()-=+~`,.?|[]{}\\\";:<>/'] , head or trailing spaces are not allowed\";\nexport function extractHostname(url) {\n  var hostname;\n  //find & remove protocol (http, ftp, etc.) and get hostname\n  let temp = url.split('/');\n  hostname = temp[0] + \"//\" + temp[2];\n  //find & remove \"?\"\n  hostname = hostname.split('?')[0];\n  return hostname;\n}\nexport function CreateMetaFieldObject(obj, metaArrayObj, ssidList) {\n  var returnObj = {};\n  var selectedFieldMeta = metaArrayObj === null || metaArrayObj === void 0 ? void 0 : metaArrayObj.filter(x => x.featureName == obj.SSIDName)[0];\n  if (selectedFieldMeta) {\n    selectedFieldMeta.fields.forEach(x => {\n      if (typeof x.writable === \"boolean\") {\n        returnObj[x.name] = x.writable;\n      } else {\n        let ssid = Object.keys(x.writable);\n        var primarySSIDObj = ssidList === null || ssidList === void 0 ? void 0 : ssidList.filter(x => x.SSIDName == ssid[0].split('.')[0]);\n        returnObj[x.name] = enableFlagUpdate(primarySSIDObj[0]);\n      }\n    });\n  }\n  return returnObj;\n}\nexport function enableFlagUpdate(obj) {\n  return obj.Enable;\n}\nexport function FetchSecurityOptionsFromSSIDMeta(obj, metaArrayObj, securityOptions) {\n  var returnObj = [];\n  var selectedFieldMeta = metaArrayObj === null || metaArrayObj === void 0 ? void 0 : metaArrayObj.filter(x => x.featureName == obj.SSIDName)[0];\n  if (selectedFieldMeta) {\n    selectedFieldMeta.fields.forEach(x => {\n      if (securityOptions) {\n        securityOptions.forEach(option => {\n          if (x.name === \"BeaconType\") {\n            if (x.valueList) {\n              x.valueList.forEach(val => {\n                if (val == option.id || val == option.name) {\n                  returnObj.push(option);\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n  return returnObj;\n}\nexport function wifiFetchSecurityOptionsFromSSIDMeta(obj, metaArrayObj, securityOptions) {\n  var returnObj = [];\n  var selectedFieldMeta = obj; //metaArrayObj.filter(x => x.featureName == obj.SSIDName)[0]\n  if (selectedFieldMeta) {\n    selectedFieldMeta.fields.forEach(x => {\n      if (securityOptions) {\n        securityOptions.forEach(option => {\n          if (x.name === \"BeaconType\") {\n            if (x.valueList) {\n              x.valueList.forEach(val => {\n                if (val == option.id || val == option.name) {\n                  returnObj.push(option);\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n  return returnObj;\n}\nexport const basicEncryptionModesParamName = 'BasicEncryptionModes';\nexport const wpaEncryptionModesParamName = 'WPAEncryptionModes';\nexport const ieee11iEncryptionModesParamName = 'IEEE11iEncryptionModes';\nexport function checkMultileFrequency(arr) {\n  var returnBool = false;\n  if (arr && (arr === null || arr === void 0 ? void 0 : arr.length) != 0) {\n    arr.forEach(x => {\n      if (Object.keys(x).length != 0) {\n        if (x.id.match(\"2.4G\") || x.id.match(\"5G\") || x.id.match(\"6G\")) {\n          returnBool = true;\n        }\n      }\n    });\n  }\n  return returnBool;\n}\nexport function seperateRadioList(ssidObject) {\n  var radio24G = [];\n  var radio5G = [];\n  var radio6G = [];\n  ssidObject.forEach(x => {\n    if (x.freqBand == '2.4GHz') {\n      radio24G.push(x);\n    } else if (x.freqBand == '5GHz') {\n      radio5G.push(x);\n    } else if (x.freqBand == '6GHz') {\n      radio6G.push(x);\n    }\n  });\n  return {\n    '2.4G': radio24G,\n    '5G': radio5G,\n    '6G': radio6G\n  };\n}\nexport function fetchRadioEncryption(raidoType, obj) {\n  switch (raidoType) {\n    case \"2.4G\":\n      {\n        for (let i = 0; i < obj.length; i++) {\n          if (obj[i].id.match(\"2.4G\")) {\n            return obj[i];\n          }\n        }\n      }\n    case \"5G\":\n      {\n        for (let i = 0; i < obj.length; i++) {\n          if (obj[i].id.match(\"5G\")) {\n            return obj[i];\n          }\n        }\n      }\n    case \"6G\":\n      {\n        for (let i = 0; i < obj.length; i++) {\n          if (obj[i].id.match(\"6G\")) {\n            return obj[i];\n          }\n        }\n      }\n    default:\n      {}\n  }\n}\nexport function constructSecurityValues(metaFiled) {\n  var returnSecurityOptions = [];\n  var securityOptions = metaFiled.properties.filter(x => x.featureName.includes(\"SecurityOptions\"))[0];\n  if (securityOptions && securityOptions.configuration) {\n    let keys = Object.keys(securityOptions.configuration);\n    keys.forEach(x => {\n      if (securityOptions.configuration[x]) {\n        returnSecurityOptions.push({\n          id: securityOptions.configuration[x].BeaconType,\n          name: x\n        });\n      }\n    });\n  }\n  return returnSecurityOptions;\n}\nexport function constructEncyptionModeValues(metaFiled, securityName) {\n  var _a;\n  var securityOptions = (_a = metaFiled === null || metaFiled === void 0 ? void 0 : metaFiled.properties) === null || _a === void 0 ? void 0 : _a.filter(x => x.featureName.includes(\"SecurityOptions\"))[0];\n  if (securityOptions && securityOptions.configuration) {\n    let paramName = [basicEncryptionModesParamName, wpaEncryptionModesParamName, ieee11iEncryptionModesParamName];\n    return fetchConfigurationEncryption(securityOptions.configuration, paramName, securityName);\n  }\n}\nexport function fetchConfigurationEncryption(configurations, encryptionName, securityName) {\n  var returnConfigObj = [];\n  Object.keys(securityNameToDisplay).forEach(securityOption => {\n    if (configurations[securityOption] && configurations[securityOption].BeaconType == securityName) {\n      for (let i = 0; i < encryptionName.length; i++) {\n        let encName = encryptionName[i];\n        var value = configurations[securityOption][encName];\n        if (value) {\n          if (isNonEmptyArrayOfStrings(value)) {\n            value.forEach(val => {\n              returnConfigObj.push(constructEncryptionObject(val));\n            });\n            return;\n          } else {\n            if (typeof value !== 'string') {\n              let val2G = [];\n              let val5G = [];\n              let val6G = [];\n              Object.keys(value).forEach(val => {\n                if (val.match('2.4G')) {\n                  value[val].forEach(encVal => {\n                    val2G.push(constructEncryptionObject(encVal));\n                  });\n                }\n                if (val.match('5G')) {\n                  value[val].forEach(encVal => {\n                    val5G.push(constructEncryptionObject(encVal));\n                  });\n                }\n                if (val.match('6G')) {\n                  value[val].forEach(encVal => {\n                    val6G.push(constructEncryptionObject(encVal));\n                  });\n                }\n              });\n              returnConfigObj.push({\n                id: '2.4G',\n                name: val2G\n              });\n              returnConfigObj.push({\n                id: '5G',\n                name: val5G\n              });\n              returnConfigObj.push({\n                id: '6G',\n                name: val6G\n              });\n              return;\n            }\n          }\n        }\n      }\n    }\n  });\n  return returnConfigObj;\n}\nexport function isNonEmptyArrayOfStrings(value) {\n  return Array.isArray(value) && value.length && value.every(item => typeof item === \"string\");\n}\nexport function constructEncryptionObject(encrptionMode) {\n  var returnEncryptionModesObj = {};\n  switch (encrptionMode) {\n    case 'AESEncryption':\n      returnEncryptionModesObj = {\n        id: \"AESEncryption\",\n        name: \"AES\"\n      };\n      break;\n    case 'TKIPEncryption':\n      returnEncryptionModesObj = {\n        id: \"TKIPEncryption\",\n        name: \"TKIP\"\n      };\n      break;\n    case 'TKIPandAESEncryption':\n      returnEncryptionModesObj = {\n        id: \"TKIPandAESEncryption\",\n        name: \"Both\"\n      };\n      break;\n    case 'tkip+aes':\n      returnEncryptionModesObj = {\n        id: \"tkip+aes\",\n        name: \"TKIP+AES\"\n      };\n      break;\n    case 'aes':\n      returnEncryptionModesObj = {\n        id: \"aes\",\n        name: \"AES\"\n      };\n      break;\n  }\n  return returnEncryptionModesObj;\n}\n// export function fetchBeconTypeName(security: string) {\n//     var securityName;\n//     switch (security) {\n//         case 'WPAand11i': securityName = \"WPA WPA2 Personal\"; break;\n//         case '11i': securityName = \"WPA2-Personal\"; break;\n//         case 'Basic': securityName = \"Security Off\"; break;\n//         case 'WPA3': securityName = \"WPA3-Personal\"; break;\n//         case '11iandWPA3': securityName = \"WPA2 WPA3 Personal\"; break;\n//     }\n//     return securityName;\n// }\nexport function fetchBeconTypeName(security) {\n  var securityName;\n  switch (security) {\n    case 'WPAand11i':\n      securityName = \"WPA-WPA2-Personal\";\n      break;\n    case '11i':\n      securityName = \"WPA2-Personal\";\n      break;\n    case 'Basic':\n      securityName = \"Security Off\";\n      break;\n    case 'WPA3':\n      securityName = \"WPA3-Personal\";\n      break;\n    case '11iandWPA3':\n      securityName = \"WPA2-WPA3 Personal\";\n      break;\n  }\n  return securityName;\n}\nexport function getUniqueListBy(arr, key) {\n  return [...new Map(arr.map(item => [item[key], item])).values()];\n}\nexport function convertToBoolean(input) {\n  try {\n    return JSON.parse(input);\n  } catch (e) {\n    return false;\n  }\n}\n//used to remove null/undefined values from object\nexport function cleanObject(obj) {\n  for (var propName in obj) {\n    if (obj[propName] === null || obj[propName] === undefined || obj[propName] === \"\") {\n      delete obj[propName];\n    }\n  }\n  return obj;\n}\nexport function cleanArray(arr) {\n  var filtered = arr.filter(function (el) {\n    return el != null;\n  });\n  return filtered;\n}\nexport function deleteFromObject(obj, val) {\n  delete obj[val];\n  return obj;\n}\nexport function deepCopy(obj) {\n  if (obj instanceof Array) {\n    return obj.slice();\n  } else {\n    return JSON.parse(JSON.stringify(obj));\n  }\n}\nexport function getFormattedTimeZone(date) {\n  var offset = new Date(date).getTimezoneOffset(),\n    o = Math.abs(offset);\n  return (offset < 0 ? \"+\" : \"-\") + (\"00\" + Math.floor(o / 60)).slice(-2) + \":\" + (\"00\" + o % 60).slice(-2);\n}\nexport function createBinaryFile(convertFile) {\n  var reader, base64Content, match;\n  if (convertFile) {\n    reader = new FileReader();\n    // Start reading.\n    reader.readAsDataURL(convertFile);\n    reader.onerror = function () {};\n    return reader.onload = () => {\n      match = /^data:.*;base64,(.*)$/.exec(reader.result);\n      if (match != null) {\n        base64Content = match[1];\n      } else {}\n      return base64Content;\n    };\n  }\n}\n;\nexport function constructSecurityList(optionList, wifiType, metaData) {\n  var _a;\n  let ssid = 1;\n  var returnSecurityOptions = [];\n  if (wifiType == 'X_CALIX_SXACC_PRIMARY_2DOT4GHZ_SSID') {\n    ssid = 1;\n  } else if (wifiType == 'X_CALIX_SXACC_PRIMARY_5GHZ_SSID') {\n    ssid = 9;\n  } else if (wifiType == 'X_CALIX_SXACC_GUEST_2DOT4GHZ_SSID') {\n    ssid = 2;\n  } else if (wifiType == 'X_CALIX_SXACC_GUEST_5GHZ_SSID') {\n    ssid = 10;\n  } else if (wifiType == 'X_CALIX_SXACC_PRIMARY_6GHZ_SSID') {\n    ssid = 17;\n  } else if (wifiType == 'X_CALIX_SXACC_GUEST_6GHZ_SSID') {\n    ssid = 18;\n  }\n  let feature = metaData.properties.filter(x => x.featureName == 'SSID' + ssid);\n  if (feature.length) {\n    let beacons = feature[0].fields.filter(x => x.name == 'BeaconType').length ? (_a = feature[0].fields.filter(x => x.name == 'BeaconType')[0]) === null || _a === void 0 ? void 0 : _a.valueList : [];\n    returnSecurityOptions = optionList.filter(x => beacons.includes(x.id));\n    return returnSecurityOptions;\n  } else {\n    return optionList;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}