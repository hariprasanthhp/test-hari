{"ast":null,"code":"import { hasPrimaryModifier, hasSecondaryModifier, isPrimaryButton } from '../../util/Mouse';\nimport { find, isArray } from 'min-dash';\nexport default function SelectionBehavior(eventBus, selection, canvas, elementRegistry) {\n  // Select elements on create\n  eventBus.on('create.end', 500, function (event) {\n    var context = event.context,\n      canExecute = context.canExecute,\n      elements = context.elements,\n      hints = context.hints || {},\n      autoSelect = hints.autoSelect;\n    if (canExecute) {\n      if (autoSelect === false) {\n        // Select no elements\n        return;\n      }\n      if (isArray(autoSelect)) {\n        selection.select(autoSelect);\n      } else {\n        // Select all elements by default\n        selection.select(elements.filter(isShown));\n      }\n    }\n  });\n\n  // Select connection targets on connect\n  eventBus.on('connect.end', 500, function (event) {\n    var context = event.context,\n      canExecute = context.canExecute,\n      hover = context.hover;\n    if (canExecute && hover) {\n      selection.select(hover);\n    }\n  });\n\n  // Select shapes on move\n  eventBus.on('shape.move.end', 500, function (event) {\n    var previousSelection = event.previousSelection || [];\n    var shape = elementRegistry.get(event.context.shape.id);\n\n    // Always select main shape on move\n    var isSelected = find(previousSelection, function (selectedShape) {\n      return shape.id === selectedShape.id;\n    });\n    if (!isSelected) {\n      selection.select(shape);\n    }\n  });\n\n  // Select elements on click\n  eventBus.on('element.click', function (event) {\n    if (!isPrimaryButton(event)) {\n      return;\n    }\n    var element = event.element;\n    if (element === canvas.getRootElement()) {\n      element = null;\n    }\n    var isSelected = selection.isSelected(element),\n      isMultiSelect = selection.get().length > 1;\n\n    // Add to selection if CTRL or SHIFT pressed\n    var add = hasPrimaryModifier(event) || hasSecondaryModifier(event);\n    if (isSelected && isMultiSelect) {\n      if (add) {\n        // Deselect element\n        return selection.deselect(element);\n      } else {\n        // Select element only\n        return selection.select(element);\n      }\n    } else if (!isSelected) {\n      // Select element\n      selection.select(element, add);\n    } else {\n      // Deselect element\n      selection.deselect(element);\n    }\n  });\n}\nSelectionBehavior.$inject = ['eventBus', 'selection', 'canvas', 'elementRegistry'];\nfunction isShown(element) {\n  return !element.hidden;\n}","map":null,"metadata":{},"sourceType":"module"}