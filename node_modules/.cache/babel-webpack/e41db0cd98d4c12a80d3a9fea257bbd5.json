{"ast":null,"code":"import { pointDistance } from './Geometry';\nimport intersectPaths from 'path-intersection';\nvar round = Math.round,\n  max = Math.max;\nfunction circlePath(center, r) {\n  var x = center.x,\n    y = center.y;\n  return [['M', x, y], ['m', 0, -r], ['a', r, r, 0, 1, 1, 0, 2 * r], ['a', r, r, 0, 1, 1, 0, -2 * r], ['z']];\n}\nfunction linePath(points) {\n  var segments = [];\n  points.forEach(function (p, idx) {\n    segments.push([idx === 0 ? 'M' : 'L', p.x, p.y]);\n  });\n  return segments;\n}\nvar INTERSECTION_THRESHOLD = 10;\nfunction getBendpointIntersection(waypoints, reference) {\n  var i, w;\n  for (i = 0; w = waypoints[i]; i++) {\n    if (pointDistance(w, reference) <= INTERSECTION_THRESHOLD) {\n      return {\n        point: waypoints[i],\n        bendpoint: true,\n        index: i\n      };\n    }\n  }\n  return null;\n}\nfunction getPathIntersection(waypoints, reference) {\n  var intersections = intersectPaths(circlePath(reference, INTERSECTION_THRESHOLD), linePath(waypoints));\n  var a = intersections[0],\n    b = intersections[intersections.length - 1],\n    idx;\n  if (!a) {\n    // no intersection\n    return null;\n  }\n  if (a !== b) {\n    if (a.segment2 !== b.segment2) {\n      // we use the bendpoint in between both segments\n      // as the intersection point\n\n      idx = max(a.segment2, b.segment2) - 1;\n      return {\n        point: waypoints[idx],\n        bendpoint: true,\n        index: idx\n      };\n    }\n    return {\n      point: {\n        x: round(a.x + b.x) / 2,\n        y: round(a.y + b.y) / 2\n      },\n      index: a.segment2\n    };\n  }\n  return {\n    point: {\n      x: round(a.x),\n      y: round(a.y)\n    },\n    index: a.segment2\n  };\n}\n\n/**\n * Returns the closest point on the connection towards a given reference point.\n *\n * @param  {Array<Point>} waypoints\n * @param  {Point} reference\n *\n * @return {Object} intersection data (segment, point)\n */\nexport function getApproxIntersection(waypoints, reference) {\n  return getBendpointIntersection(waypoints, reference) || getPathIntersection(waypoints, reference);\n}","map":null,"metadata":{},"sourceType":"module"}