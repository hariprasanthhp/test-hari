{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { environment } from 'src/environments/environment';\nimport { Subject } from 'rxjs';\nimport { openQlikConnection, openApp, openApp_aq } from './qlik-connection.js';\nimport { WindowRefService } from 'src/app/shared/services/window-ref.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nconst axios = require('axios');\nconst axiosCookieJar = require('axios-cookiejar-support');\nconst tough_cookie = require(\"tough-cookie\");\nexport let MarketingApiService = /*#__PURE__*/(() => {\n  class MarketingApiService {\n    constructor(httpClient, ssoAuthService) {\n      this.httpClient = httpClient;\n      this.ssoAuthService = ssoAuthService;\n      this.baseURL = environment.cmcBaseURL;\n      this.baseURLCMC = environment.API_BASE_URL_CMC;\n      this.Ts_baseURL = `${environment.QLIK_TS_BASEURL}`;\n      this.Ts_TokenUrl = `${environment.QLIK_TS_TOKEN_URL}`;\n      this.Ts_VizId = `${environment.QLIK_TS_VIZID}`;\n      this.Ts_KPIId = `${environment.QLIK_TS_KPIID}`;\n      this.Ts_AdvanceId = `${environment.QLIK_TS_ADVANCE_ID}`;\n      this.Ts_ProspectId = `${environment.QLIK_TS_PROSPECT_ID}`;\n      this.qlikThoughtspotInsightsBaseUrl = environment.QLIK_THOUTSPOT_INSIGHTS;\n      this.qlikOpenConnectionApp = new Subject();\n      this.qlikOpenConnectionApp_Aqui = new Subject();\n      this.dev = false;\n      this.getHomePageInsightsKPI = (username, auth_token) => __awaiter(this, void 0, void 0, function* () {\n        try {\n          // create an HTTP client with session\n          const sess = axiosCookieJar.wrapper(axios.create({\n            jar: new tough_cookie.CookieJar(),\n            withCredentials: true,\n            baseURL: this.Ts_baseURL,\n            headers: {\n              \"x-requested-by\": \"ThoughtSpot\"\n            }\n          }));\n          var session = yield sess({\n            method: \"POST\",\n            url: this.Ts_TokenUrl,\n            data: `username=${username}&auth_token=${auth_token}`\n          });\n          var sessionInfo = yield sess({\n            method: \"GET\",\n            url: \"/callosum/v1/tspublic/v1/session/info\"\n          });\n          console.log(`     GET  >> session/info    << HTTP ${sessionInfo.status}`);\n          var response = yield sess({\n            method: \"POST\",\n            url: \"/tspublic/rest/v2/data/liveboard\",\n            data: {\n              \"id\": this.Ts_KPIId,\n              \"vizId\": [this.Ts_VizId],\n              \"offset\": 0,\n              \"batchSize\": 100\n            },\n            headers: {\n              \"Accept-Language\": \"en-US,en;q=0.5\"\n            }\n          });\n          let vizId = Object.keys(response.data)[0],\n            tableColumnNames = response.data[vizId].columnNames,\n            tableData = response.data[vizId].data[0],\n            tableFormatted = {\n              [tableColumnNames[0]]: (tableData[0] * 100).toFixed(2),\n              [tableColumnNames[1]]: (tableData[1] * 100).toFixed(2),\n              [tableColumnNames[2]]: (tableData[2] * 100).toFixed(2),\n              [tableColumnNames[3]]: (tableData[3] * 100).toFixed(2),\n              [tableColumnNames[4]]: Math.round(tableData[4] * 100) / 100,\n              [tableColumnNames[5]]: tableData[5],\n              [tableColumnNames[6]]: tableData[6],\n              [tableColumnNames[7]]: tableData[7],\n              [tableColumnNames[8]]: tableData[8],\n              [tableColumnNames[9]]: tableData[9],\n              [tableColumnNames[10]]: (tableData[10] * 100).toFixed(2),\n              [tableColumnNames[11]]: (tableData[11] * 100).toFixed(2),\n              [tableColumnNames[12]]: (tableData[12] * 100).toFixed(2),\n              [tableColumnNames[13]]: (tableData[13] * 100).toFixed(2),\n              [tableColumnNames[14]]: (tableData[14] * 100).toFixed(2)\n            };\n          //static formated data\n          let tableFormatted_dataObj = {\n            ARPU: tableFormatted[tableColumnNames[4]],\n            ARPU_Percentage: tableFormatted[tableColumnNames[13]],\n            Acquisition_Rate: tableFormatted[tableColumnNames[10]],\n            Acquisition_Rate_Percentage: tableFormatted[tableColumnNames[11]],\n            All_Subscribers: tableFormatted[tableColumnNames[5]],\n            All_Subscribers_Percentage: tableFormatted[tableColumnNames[0]],\n            Churn_Rate: tableFormatted[tableColumnNames[12]],\n            Churn_Rate_Percentage: tableFormatted[tableColumnNames[14]],\n            Gaming_Subscribers: tableFormatted[tableColumnNames[7]],\n            Gaming_Subscribers_Percentage: tableFormatted[tableColumnNames[2]],\n            New_Subscribers_Per_Day: tableFormatted[tableColumnNames[9]],\n            New_Subscribers_Per_Day_Percentage: '-',\n            Streaming_Subscribers: tableFormatted[tableColumnNames[6]],\n            Streaming_Subscribers_Percentage: tableFormatted[tableColumnNames[1]],\n            Work_From_Home_Subscribers: tableFormatted[tableColumnNames[8]],\n            Work_From_Home_Subscribers_Percentage: tableFormatted[tableColumnNames[3]]\n          };\n          console.log(tableFormatted_dataObj);\n          return tableFormatted_dataObj;\n        } catch (error) {\n          return {};\n        }\n      });\n      this.getCampaignFilters = (username, auth_token, columnName, runtimeFilter = [], page) => __awaiter(this, void 0, void 0, function* () {\n        const worksheetId = page.toLowerCase() === 'advance' ? this.Ts_AdvanceId : this.Ts_ProspectId;\n        function getFilterQuery(baseQuery, _columnName, _runTimeFilter) {\n          let temp_runTimeFilter = [..._runTimeFilter].filter(elem => elem.columnName.toLowerCase() !== _columnName.toLowerCase()),\n            query = '';\n          temp_runTimeFilter.map(ele => {\n            if (ele.values.length > 0) query += `[${ele.columnName}]='${ele.values.join(',')}' `;\n          });\n          return query + baseQuery;\n        }\n        try {\n          const sess = axiosCookieJar.wrapper(axios.create({\n            jar: new tough_cookie.CookieJar(),\n            withCredentials: true,\n            baseURL: this.Ts_baseURL,\n            headers: {\n              \"x-requested-by\": \"ThoughtSpot\"\n            }\n          }));\n          var session = yield sess({\n            method: \"POST\",\n            url: this.Ts_TokenUrl,\n            data: `username=${username}&auth_token=${auth_token}`\n          });\n          var sessionInfo = yield sess({\n            method: \"GET\",\n            url: \"/callosum/v1/tspublic/v1/session/info\"\n          });\n          console.log(`     GET  >> session/info    << HTTP ${sessionInfo.status}`);\n          // let queryString = `[${columnName}] sort by [${columnName}]`\n          let queryString = getFilterQuery(`[${columnName}] sort by [${columnName}]`, columnName, runtimeFilter);\n          var response = yield sess({\n            method: \"POST\",\n            url: `/tspublic/rest/v2/data/search`,\n            data: {\n              queryString: queryString,\n              dataObjectId: worksheetId,\n              offset: 0,\n              batchSize: 100\n            },\n            headers: {\n              \"Accept-Language\": \"en-US,en;q=0.5\"\n            }\n          });\n          let returnData = response.data.data.map(ele => {\n            return {\n              [response.data.columnNames[0]]: ele[0]\n            };\n          });\n          console.log({\n            message: 'Successfully initiated',\n            data: returnData\n          });\n          return {\n            message: 'Successfully initiated',\n            data: returnData\n          };\n        } catch (err) {\n          console.log(err);\n        }\n      });\n      let base = `${environment.API_BASE}`;\n      if (base.indexOf('/dev.api.calix.ai') > -1) {\n        this.dev = true;\n      } else {\n        this.dev = false;\n      }\n      this.stg = `${WindowRefService.prototype.nativeWindow}`.includes('cloud-stg.calix.com') ? true : false;\n      this.dev_func = WindowRefService.prototype.nativeWindow.includes('cloud-devfunc.calix.com') ? true : false;\n    }\n    openQlikConnection() {\n      console.log(\"1.Open_qlik_connection\", new Date());\n      let entitlement = this.ssoAuthService.getEntitlements();\n      let cmcType = !entitlement['209'] ? 'CMC' : 'CMC-Pro';\n      this.ssoAuthService.getQlikTOkenByAppType(cmcType).subscribe(res => {\n        openQlikConnection(res.Ticket).then(res => {\n          console.log(\"2.Open_qlik_connection_response\", new Date());\n          this.openApp();\n        }, error => {\n          // this.openQlickConnectionWithTicket();\n        });\n      });\n    }\n    openQlickConnectionWithTicket() {\n      let entitlement = this.ssoAuthService.getEntitlements();\n      let cmcType = !entitlement['209'] ? 'CMC' : 'CMC-Pro';\n      this.ssoAuthService.getQlikTOkenByAppType(cmcType).subscribe(res => {\n        openQlikConnection(res.Ticket).then(res => {\n          //  this.openApp()\n        }, error => {\n          // this.openQlikConnection();\n        });\n      });\n    }\n    openApp() {\n      console.log(\"3.Qlik_app_opening_func\", new Date());\n      openApp().then(app => {\n        console.log(\"4.Qlik_app_opening_response\", app, new Date());\n        this.setQlickConnetedApp(app);\n        this.qlikOpenConnectionApp.next(this.qlikApp);\n      });\n      openApp_aq().then(app => {\n        console.log(\"4_1.Qlik_app_opening_response\", app, new Date());\n        this.setQlickConnetedApp_Aqui(app);\n        this.qlikOpenConnectionApp_Aqui.next(this.qlikApp_Aqui);\n      });\n    }\n    getDownloadFileContent(url) {\n      let fileUrl = `${url}&file=true`;\n      return this.httpClient.get(fileUrl, {\n        responseType: 'blob'\n      });\n    }\n    getDownloadFileContentTS(url) {\n      let fileUrl = `${url}`;\n      return this.httpClient.get(fileUrl, {\n        responseType: 'blob'\n      });\n    }\n    setQlickConnetedApp(app) {\n      this.qlikApp = app;\n    }\n    getQlikConnectedApp() {\n      return this.qlikApp;\n    }\n    setQlickConnetedApp_Aqui(app) {\n      this.qlikApp_Aqui = app;\n    }\n    getQlikConnectedApp_Aqui() {\n      return this.qlikApp_Aqui;\n    }\n    getUserPreference(region, period, location) {\n      let url = `${this.baseURLCMC}pref/user-preferences`;\n      this.httpClient.get(url).subscribe(json => {\n        this.userPreferences = json;\n        this.setUserPreference(region, period, location);\n      }, error => {});\n    }\n    getUserPreferenceInsights() {\n      let url = `${this.baseURLCMC}pref/user-preferences`;\n      return this.httpClient.get(url);\n    }\n    setUserPreference(region, period, location) {\n      let preference = {\n        region: region,\n        period: period,\n        location: location,\n        timezone: this.getTimezone()\n      };\n      this.userPreferences = Object.assign(Object.assign({}, this.userPreferences), preference);\n      let url = `${this.baseURLCMC}pref/user-preferences`;\n      this.httpClient.post(url, this.userPreferences).subscribe(json => {}, error => {});\n    }\n    getTimezone() {\n      var timezone_offset_min = new Date().getTimezoneOffset(),\n        offset_hrs = parseInt(Math.abs(timezone_offset_min / 60).toString()).toString(),\n        offset_min = Math.abs(timezone_offset_min % 60).toString(),\n        timezone_standard;\n      if (Number(offset_hrs) < 10) offset_hrs = '0' + offset_hrs;\n      if (Number(offset_min) < 10) offset_min = '0' + offset_min;\n      // Add an opposite sign to the offset\n      // If offset is 0, it means timezone is UTC\n      if (timezone_offset_min < 0) timezone_standard = offset_hrs + ':' + offset_min;else if (timezone_offset_min > 0) timezone_standard = '-' + offset_hrs + ':' + offset_min;else if (timezone_offset_min == 0) timezone_standard = '00:00';\n      return timezone_standard;\n      // Timezone difference in hours and minutes\n      // String such as +5:30 or -6:00 or Z\n      //console.log(timezone_standard);\n    }\n\n    userPreferenceApiLoader() {\n      this.getUserPreferenceInsights().subscribe(res => {\n        this.setSearchFilterValues(res);\n      }, error => {\n        this.setSearchFilterValues();\n      });\n    }\n    setSearchFilterValues(res) {\n      if (res && res.period) {\n        this.setPeriod(res.period == 'last-28d' ? 'last-30d' : res.period);\n      } else {\n        this.setPeriod('last-2m');\n      }\n      if (res && res.region) {\n        this.setRegion(res.region);\n      } else {\n        this.setRegion('All');\n      }\n      if (res && res.location) {\n        this.setLocation(res.location);\n      } else {\n        this.setLocation('All');\n      }\n    }\n    getLocation() {\n      return localStorage.getItem('location') ? localStorage.getItem('location') : 'All';\n    }\n    getRegion() {\n      return localStorage.getItem('region') ? localStorage.getItem('region') : 'All';\n    }\n    getPeriod() {\n      return localStorage.getItem('period') ? localStorage.getItem('period') : 'last-2m';\n    }\n    setLocation(location) {\n      return localStorage.setItem('location', location);\n    }\n    setRegion(region) {\n      return localStorage.setItem('region', region);\n    }\n    setPeriod(period) {\n      return localStorage.setItem('period', period);\n    }\n  }\n  MarketingApiService.ɵfac = function MarketingApiService_Factory(t) {\n    return new (t || MarketingApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  MarketingApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MarketingApiService,\n    factory: MarketingApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return MarketingApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}