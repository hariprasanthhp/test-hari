{"ast":null,"code":"function createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\nvar hat_1 = createCommonjsModule(function (module) {\n  var hat = module.exports = function (bits, base) {\n    if (!base) base = 16;\n    if (bits === undefined) bits = 128;\n    if (bits <= 0) return '0';\n    var digits = Math.log(Math.pow(2, bits)) / Math.log(base);\n    for (var i = 2; digits === Infinity; i *= 2) {\n      digits = Math.log(Math.pow(2, bits / i)) / Math.log(base) * i;\n    }\n    var rem = digits - Math.floor(digits);\n    var res = '';\n    for (var i = 0; i < Math.floor(digits); i++) {\n      var x = Math.floor(Math.random() * base).toString(base);\n      res = x + res;\n    }\n    if (rem) {\n      var b = Math.pow(base, rem);\n      var x = Math.floor(Math.random() * b).toString(base);\n      res = x + res;\n    }\n    var parsed = parseInt(res, base);\n    if (parsed !== Infinity && parsed >= Math.pow(2, bits)) {\n      return hat(bits, base);\n    } else return res;\n  };\n  hat.rack = function (bits, base, expandBy) {\n    var fn = function (data) {\n      var iters = 0;\n      do {\n        if (iters++ > 10) {\n          if (expandBy) bits += expandBy;else throw new Error('too many ID collisions, use more bits');\n        }\n        var id = hat(bits, base);\n      } while (Object.hasOwnProperty.call(hats, id));\n      hats[id] = data;\n      return id;\n    };\n    var hats = fn.hats = {};\n    fn.get = function (id) {\n      return fn.hats[id];\n    };\n    fn.set = function (id, value) {\n      fn.hats[id] = value;\n      return fn;\n    };\n    fn.bits = bits || 128;\n    fn.base = base || 16;\n    return fn;\n  };\n});\n\n/**\n * Create a new id generator / cache instance.\n *\n * You may optionally provide a seed that is used internally.\n *\n * @param {Seed} seed\n */\n\nfunction Ids(seed) {\n  if (!(this instanceof Ids)) {\n    return new Ids(seed);\n  }\n  seed = seed || [128, 36, 1];\n  this._seed = seed.length ? hat_1.rack(seed[0], seed[1], seed[2]) : seed;\n}\n/**\n * Generate a next id.\n *\n * @param {Object} [element] element to bind the id to\n *\n * @return {String} id\n */\n\nIds.prototype.next = function (element) {\n  return this._seed(element || true);\n};\n/**\n * Generate a next id with a given prefix.\n *\n * @param {Object} [element] element to bind the id to\n *\n * @return {String} id\n */\n\nIds.prototype.nextPrefixed = function (prefix, element) {\n  var id;\n  do {\n    id = prefix + this.next(true);\n  } while (this.assigned(id)); // claim {prefix}{random}\n\n  this.claim(id, element); // return\n\n  return id;\n};\n/**\n * Manually claim an existing id.\n *\n * @param {String} id\n * @param {String} [element] element the id is claimed by\n */\n\nIds.prototype.claim = function (id, element) {\n  this._seed.set(id, element || true);\n};\n/**\n * Returns true if the given id has already been assigned.\n *\n * @param  {String} id\n * @return {Boolean}\n */\n\nIds.prototype.assigned = function (id) {\n  return this._seed.get(id) || false;\n};\n/**\n * Unclaim an id.\n *\n * @param  {String} id the id to unclaim\n */\n\nIds.prototype.unclaim = function (id) {\n  delete this._seed.hats[id];\n};\n/**\n * Clear all claimed ids.\n */\n\nIds.prototype.clear = function () {\n  var hats = this._seed.hats,\n    id;\n  for (id in hats) {\n    this.unclaim(id);\n  }\n};\nexport default Ids;\n//# sourceMappingURL=index.esm.js.map","map":null,"metadata":{},"sourceType":"module"}