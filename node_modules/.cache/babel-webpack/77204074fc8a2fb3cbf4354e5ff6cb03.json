{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let LocationsApiService = /*#__PURE__*/(() => {\n  class LocationsApiService {\n    constructor(httpClient, sso) {\n      this.httpClient = httpClient;\n      this.sso = sso;\n      this.baseURL = environment.faAdminURL;\n      this.arrayToObject = (array, keyField) => array.reduce((obj, item) => {\n        obj[item[keyField]] = item;\n        return obj;\n      }, {});\n      this.org_id = this.sso.getOrgId();\n      this.locationList = this.baseURL + `location?org-id=${this.org_id}`;\n      this.locationAdd = this.baseURL + `location?org-id=${this.org_id}`;\n      this.locationExport = this.baseURL + `location?org-id=${this.org_id}`;\n      this.locationImport = this.baseURL + `location?org-id=${this.org_id}`;\n      this.locationDelete = this.baseURL + `location`;\n      this.locationEdit = this.baseURL + `location`;\n      let headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      this.options = {\n        headers: headers\n      };\n      this.export = this.baseURL + `export/`;\n    }\n    LocationList(orgId) {\n      return this.httpClient.get(this.baseURL + `location?org-id=${orgId}`);\n    }\n    LocationAdd(reqBody, orgId) {\n      return this.httpClient.post(this.baseURL + `location?org-id=${orgId}`, reqBody);\n    }\n    exportSubnets(orgId) {\n      return this.httpClient.get(this.baseURL + `location?org-id=${orgId}`);\n    }\n    importLocationSubnets(params, orgId) {\n      return this.httpClient.put(this.baseURL + `fa_import/locations?org-id=${orgId}`, params);\n    }\n    LocationDelete(id, orgId) {\n      return this.httpClient.delete(`${this.locationDelete}/${id}?org-id=${orgId}`);\n    }\n    LocationUpdate(id, reqBody, orgId) {\n      return this.httpClient.put(`${this.locationEdit}/${id}?org-id=${orgId}`, reqBody);\n    }\n    // exportProcess(data: any) {\n    //   let exports = [];\n    //   data.forEach(obj => {\n    //     obj['subnets'] = obj.subnetsV4 + obj.subnetsV6;\n    //     obj['subnets'] = obj.subnetsV4 + ';' + obj.subnetsV6;\n    //     exports.push({\n    //       'Name': obj.name ? obj.name : '',\n    //       // 'Subnets V4': obj.subnetsV4 ? obj.subnetsV4 : '',\n    //       // 'Subnets V6': obj.subnetsV6 ? obj.subnetsV6 : '',\n    //       'Subnets': obj.subnets ? obj.subnets : '',\n    //       'Region': obj.region ? obj.region : '',\n    //       'Address': obj.address ? obj.address : '',\n    //       'Geo': obj.geo ? obj.geo : ''\n    //     });\n    //   },\n    //   );\n    //   return exports;\n    // }\n    exportProcess(res) {\n      let exports = [];\n      res.forEach(obj => {\n        exports.push({\n          'Name': obj.name ? obj.name : '',\n          'SubnetsV4': obj.subnetsV4 ? obj.subnetsV4 : '',\n          'SubnetsV6': obj.subnetsV6 ? obj.subnetsV6 : '',\n          'Region': obj.region ? obj.region : '',\n          'Address': obj.address ? obj.address : '',\n          'Geo': obj.geo ? obj.geo : ''\n        });\n      });\n      return exports;\n    }\n    importDataProcess(data, isFullImport, isDryRun, orgId) {\n      // data.forEach((obj) => {\n      //   obj.excluded = (obj.excluded.toUpperCase() == 'N' || obj.excluded.toUpperCase() == \"NO\") ? false : true;\n      // });\n      // return this.arrayToObject(data, keyField);\n      let newData = [];\n      data.forEach(obj => {\n        obj.action = isDryRun ? 'Create' : obj.action;\n        if (obj.SubnetsV4) {\n          obj.subnetsV4 = obj.SubnetsV4 ? obj.SubnetsV4.trim() : '';\n        }\n        if (obj.SubnetsV6) {\n          obj.subnetsV6 = obj.SubnetsV6 ? obj.SubnetsV6.trim() : '';\n        }\n        if (obj.Region) {\n          obj.region = obj.Region ? obj.Region : '';\n        }\n        if (obj.Address) {\n          obj.address = obj.Address ? obj.Address : '';\n        }\n        if (obj.Geo) {\n          obj.geo = obj.Geo ? obj.Geo : '';\n        }\n        if (obj.name && (obj.subnetsV4 || obj.subnetsV6)) {\n          newData.push({\n            subnetsV4: obj.subnetsV4,\n            subnetsV6: obj.subnetsV6,\n            region: obj.region,\n            address: obj.address,\n            action: obj.action,\n            geo: obj.geo,\n            name: obj.name,\n            orgId: orgId\n          });\n        }\n      });\n      return newData;\n    }\n    Export(module, orgId) {\n      return this.httpClient.get(`${this.export}${module}?org-id=${orgId}`);\n    }\n  }\n  LocationsApiService.ɵfac = function LocationsApiService_Factory(t) {\n    return new (t || LocationsApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  LocationsApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationsApiService,\n    factory: LocationsApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return LocationsApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}