{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let TrimSpaceDirective = /*#__PURE__*/(() => {\n  class TrimSpaceDirective {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n    }\n    // @HostListener('window:keyup')\n    // @HostListener('window:keydown')\n    // @HostListener('document:keypress')\n    // removeSpaces() {\n    //   setTimeout(() => {\n    //     if (!(/^[\\s]+/.test(this.elementRef.nativeElement.value))) return;\n    //     let cursorPosition = this.elementRef.nativeElement.selectionStart, total = this.elementRef.nativeElement.value.length;\n    //     this.elementRef.nativeElement.value = this.elementRef.nativeElement.value.replace(/^\\s+/, '');\n    //     this.elementRef.nativeElement.setSelectionRange(cursorPosition - (total - this.elementRef.nativeElement.value.length), cursorPosition - (total - this.elementRef.nativeElement.value.length));\n    //   }, 0);\n    // }\n    // @HostListener('ngModelChange')\n    // removeUnwantedSpaces() {\n    //   if (!(/^[\\s]+/.test(this.elementRef.nativeElement.value))) return;\n    //   let cursorPosition = this.elementRef.nativeElement.selectionStart, total = this.elementRef.nativeElement.value.length;\n    //   this.elementRef.nativeElement.value = this.elementRef.nativeElement.value.replace(/^\\s+/, '');\n    //   this.elementRef.nativeElement.setSelectionRange(cursorPosition - (total - this.elementRef.nativeElement.value.length), cursorPosition - (total - this.elementRef.nativeElement.value.length));\n    // }\n    removeEndSpace() {\n      var _a;\n      if (!/^[\\s]+|[\\s]+$/.test(this.elementRef.nativeElement.value)) return;\n      // this.elementRef.nativeElement.value = this.elementRef.nativeElement.value.trim();\n      if ((_a = this.formValue) === null || _a === void 0 ? void 0 : _a.value) {\n        if (typeof this.formValue.value == 'object' && this.formValue.value !== null && !Array.isArray(this.formValue.value)) {\n          this.formValue.patchValue(this.removeSpaceFromObjects(this.formValue.value));\n        } else if (typeof this.formValue.value == 'object' && Array.isArray(this.formValue.value)) {\n          this.formValue.patchValue(this.removeSpaceFromArrayElements(this.formValue.value));\n        } else if (typeof this.formValue.value == 'string') {\n          this.formValue.patchValue(this.formValue.value.trim());\n        }\n      } else if (typeof this.formValue == 'object') {\n        // this.elementRef.nativeElement.value =\n        //   this.elementRef.nativeElement.value.trim();\n        if (typeof this.formValue == 'object' && this.formValue !== null && !Array.isArray(this.formValue)) {\n          this.formValue = this.removeSpaceFromObjects(this.formValue);\n        } else if (typeof this.formValue == 'object' && Array.isArray(this.formValue)) {\n          this.formValue = this.removeSpaceFromArrayElements(this.formValue);\n        }\n      }\n    }\n    removeSpaceFromObjects(obj) {\n      for (let key in obj) {\n        if (typeof obj[key] == 'object' && obj[key] !== null && !Array.isArray(obj[key])) {\n          obj[key] = this.removeSpaceFromObjects(obj[key]);\n        } else if (typeof obj[key] == 'object' && Array.isArray(obj[key])) {\n          obj[key] = this.removeSpaceFromArrayElements(obj[key]);\n        } else if (typeof obj[key] == 'string') {\n          obj[key] = obj[key].trim();\n        }\n      }\n      return obj;\n    }\n    removeSpaceFromArrayElements(arr) {\n      return arr.map(element => {\n        if (typeof element == 'object' && typeof element !== null && !Array.isArray(element)) {\n          return this.removeSpaceFromObjects(element);\n        } else if (typeof element == 'object' && Array.isArray(element)) {\n          return this.removeSpaceFromArrayElements(element);\n        } else if (typeof element == 'string') {\n          return element = element.trim();\n        }\n      });\n    }\n  }\n  TrimSpaceDirective.ɵfac = function TrimSpaceDirective_Factory(t) {\n    return new (t || TrimSpaceDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  TrimSpaceDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: TrimSpaceDirective,\n    selectors: [[\"\", \"trimSpace\", \"\"]],\n    hostBindings: function TrimSpaceDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"blur\", function TrimSpaceDirective_blur_HostBindingHandler() {\n          return ctx.removeEndSpace();\n        });\n      }\n    },\n    inputs: {\n      formValue: \"formValue\"\n    }\n  });\n  return TrimSpaceDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}