{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { catchError, map } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let MycommunityIqService = /*#__PURE__*/(() => {\n  class MycommunityIqService {\n    constructor(http, Sso) {\n      this.http = http;\n      this.Sso = Sso;\n      this.communityListSubject = new BehaviorSubject([]);\n    }\n    GetBspproviderInfo() {\n      return this.http.get(`${environment.MYCOMMUNITYIQ_URL}/bsp-provider`);\n    }\n    AddBspInfo(data) {\n      return this.http.post(`${environment.MYCOMMUNITYIQ_URL}/bsp-provider`, data);\n    }\n    DeleteBspInfo() {\n      return this.http.delete(`${environment.MYCOMMUNITYIQ_URL}/bsp-provider`);\n    }\n    EditBspInfo(data) {\n      return this.http.put(`${environment.MYCOMMUNITYIQ_URL}/bsp-provider`, data);\n    }\n    GetMicrosite() {\n      return this.http.get(`${environment.MYCOMMUNITYIQ_URL}/bsp-provider/microsites`).pipe(map(res => {\n        res.sort((a, b) => (a[\"communityName\"] || \"\").toString().localeCompare((b[\"communityName\"] || \"\").toString(), 'en', {\n          numeric: true\n        }));\n        return res;\n      }), catchError(this.handleError));\n    }\n    GetpredefinedCommunities() {\n      return this.http.get(`${environment.MYCOMMUNITYIQ_URL}/community/predefined/bsp-available`);\n    }\n    AddMicrosite(data) {\n      return this.http.post(`${environment.MYCOMMUNITYIQ_URL}/bsp-provider/microsite`, data);\n    }\n    EditMicrosite(data, id) {\n      return this.http.put(`${environment.MYCOMMUNITYIQ_URL}/bsp-provider/microsite?micrositeId=${id}`, data);\n    }\n    DeleteMicrosite(id) {\n      return this.http.delete(`${environment.MYCOMMUNITYIQ_URL}/bsp-provider/microsite?micrositeId=${id}`);\n    }\n    WarToDelMicrosite(orgId, data) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-wf/workflow?${ID}matcher=${data}`);\n    }\n    GetMicrositeForEdit(id) {\n      return this.http.get(`${environment.MYCOMMUNITYIQ_URL}/bsp-provider/microsite?micrositeId=${id}`);\n    }\n    Uploadcsv(data) {\n      return this.http.put(`${environment.API_BASE_URL}billing-upload-service/usoc`, data, {\n        responseType: 'text'\n      });\n    }\n    getCommunitySubscribers(orgId, micrositeId, filter, offset, limit) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.MYCOMMUNITYIQ_URL}/subscriber-systems/passpoint-subscribers?${ID}${micrositeId ? '&micrositeId=' + micrositeId : ''}${filter ? '&filter=' + filter : ''}${offset ? '&offset=' + offset : ''}${limit ? '&limit=' + limit : ''}`);\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    saveUsers(value, orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.post(`${environment.FOUNDATION_BASE_URL}/subscriber-systems/passpoint-subscribers?${ID}`, value);\n    }\n    // ORG ID is an required one for editCommunityAccess Please don't remove \n    editCommunityAccess(data, orgId, subscriberId) {\n      return this.http.put(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/mycommunityiq/subscriber?orgId=${orgId}&subscriberId=${subscriberId}`, data);\n    }\n    getSmartTownUsersCount(micrositeId, filter) {\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/passpoint-subscribers/count?${micrositeId ? 'micrositeId=' + micrositeId + (filter ? '&' : '') : ''}${filter ? 'filter=' + filter : ''}`);\n    }\n  }\n  MycommunityIqService.ɵfac = function MycommunityIqService_Factory(t) {\n    return new (t || MycommunityIqService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  MycommunityIqService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MycommunityIqService,\n    factory: MycommunityIqService.ɵfac,\n    providedIn: 'root'\n  });\n  return MycommunityIqService;\n})();","map":null,"metadata":{},"sourceType":"module"}