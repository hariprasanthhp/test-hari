{"ast":null,"code":"import { AlarmDetailsModalComponent } from '../active-devices-geomap/alarm-details-modal/alarm-details-modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../issues/service/issue.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ng-bootstrap/ng-bootstrap\";\nexport let HomeGeomapService = /*#__PURE__*/(() => {\n  class HomeGeomapService {\n    constructor(issueService, router, dialogService) {\n      this.issueService = issueService;\n      this.router = router;\n      this.dialogService = dialogService;\n    }\n    redirectToPage(type, system, systemInfoData) {\n      var _a, _b, _c, _d;\n      if (type == 'noOfAlarms') {\n        if (((_a = system === null || system === void 0 ? void 0 : system.deviceType) === null || _a === void 0 ? void 0 : _a.toUpperCase()) == 'ONT') {\n          this.setOntSystemsDetailsForListViewInService(system, systemInfoData);\n        } else if (((_b = system === null || system === void 0 ? void 0 : system.deviceType) === null || _b === void 0 ? void 0 : _b.toUpperCase()) == 'OLT') {\n          this.setOltSystemsDetailsForListViewInService(system, systemInfoData);\n        }\n        // this.issueService.setGeomapAppliedFilters(systemInfoData);\n        let url = `/cco/alerts/${system.id.toLowerCase()}/active-reports`;\n        if (system.id.toLowerCase() == 'disruption') {\n          url = '/cco/alerts/disruption/list';\n        }\n        this.router.navigate([url], {\n          queryParams: {\n            geoMapIssue: true\n          },\n          state: {\n            filters: this.issueService.getGeomapAppliedFilters()\n          }\n        });\n        return;\n        // this.router.navigate([`/cco/issues/device/active-reports`], {\n        //   queryParams: { geoMapIssue: true },\n        // });\n        // this.setOntSystemsDetailsForListViewInService(system, systemInfoData);\n      }\n\n      if (((_c = system === null || system === void 0 ? void 0 : system.deviceType) === null || _c === void 0 ? void 0 : _c.toUpperCase()) == 'ONT') {\n        if (type == 'deviceName') {\n          this.router.navigate([`/cco/services/subscribers/system/list`], {\n            queryParams: {\n              geoMapIssue: true\n            },\n            state: {\n              ccoSystemSearchText: system.deviceName && system.deviceName != '' ? system.deviceName : system.fsan_serialnumber ? system.fsan_serialnumber : (system === null || system === void 0 ? void 0 : system.subscriberName) || ''\n            }\n          });\n          this.setOntSystemsDetailsForListViewInService(system, systemInfoData);\n        } else if (type == 'outageAlarmName') {\n          this.setOntSystemsDetailsForListViewInService(system, systemInfoData);\n          this.modalRef = this.dialogService.open(AlarmDetailsModalComponent, {\n            size: 'xl',\n            centered: true,\n            windowClass: 'custom-model-service custom-modal'\n          });\n        }\n        // else if (type == 'noOfAlarms') {\n        //   let url = `/cco/alerts/${system.id.toLowerCase()}/realtime/current-issues`;\n        //   this.router.navigate([url], { queryParams: { geoMapIssue: true }, state: { filters: this.issueService.getGeomapAppliedFilters() }  });\n        //   // this.router.navigate([`/cco/issues/device/active-reports`], {\n        //   //   queryParams: { geoMapIssue: true },\n        //   // });\n        //   this.setOntSystemsDetailsForListViewInService(system, systemInfoData);\n        // }\n      } else if (((_d = system === null || system === void 0 ? void 0 : system.deviceType) === null || _d === void 0 ? void 0 : _d.toUpperCase()) == 'OLT') {\n        if (type == 'deviceName') {\n          system['isGeomap'] = true;\n          system['uuid'] = system['deviceUuid'];\n          localStorage.setItem(\"calix.network.system.details\", JSON.stringify(system));\n          let preFilterForm = {};\n          preFilterForm['isGeomap'] = true;\n          this.router.navigate(['/cco/system/cco-network-system/show-details'], {\n            state: {\n              networkSystemsListFilters: JSON.stringify(preFilterForm)\n            }\n          });\n          // this.router.navigate(\n          //   [`/cco/operations/system-onboarding/cms-exa/list`],\n          //   { queryParams: { geoMapIssue: true } }\n          // );\n          this.setOltSystemsDetailsForListViewInService(system, systemInfoData);\n        }\n        // else if (type == 'noOfAlarms') {\n        //   this.router.navigate([`/cco/issues/device/active-reports`], {\n        //     queryParams: { geoMapIssue: true },\n        //   });\n        //   this.setOltSystemsDetailsForListViewInService(system, systemInfoData);\n        // }\n      }\n    }\n\n    setOntSystemsDetailsForListViewInService(system, systemInfoData) {\n      let params = {\n        systemDetails: system,\n        fromIssuesGeoMap: 'ont'\n        // fsan:\n        //   system.fsan_serialnumber && system.fsan_serialnumber != ''\n        //     ? system.fsan_serialnumber\n        //     : '',\n        // fsan : el.deviceName && el.deviceName != ''? el.deviceName : el?.fsan_serialnumber,\n        // geoMapFilterParams: systemInfoData,\n      };\n\n      systemInfoData = Object.assign(Object.assign({}, systemInfoData), params);\n      this.issueService.setGeomapAppliedFilters(systemInfoData);\n    }\n    setOltSystemsDetailsForListViewInService(el, systemInfoData) {\n      let params = {\n        fromIssuesGeoMap: 'olt',\n        regions: el === null || el === void 0 ? void 0 : el.deviceRegion,\n        locations: el === null || el === void 0 ? void 0 : el.deviceLocation,\n        systemUuid: el === null || el === void 0 ? void 0 : el.deviceUuid,\n        oltName: el === null || el === void 0 ? void 0 : el.deviceName\n        // reStoreMapViewDetails: systemInfoData['reStoreMapViewDetails'],\n        // geoMapFilterParams: systemInfoData,\n      };\n\n      systemInfoData = Object.assign(Object.assign({}, systemInfoData), params);\n      this.issueService.setGeomapAppliedFilters(systemInfoData);\n    }\n    closeModal() {\n      this.modalRef.close();\n    }\n  }\n  HomeGeomapService.ɵfac = function HomeGeomapService_Factory(t) {\n    return new (t || HomeGeomapService)(i0.ɵɵinject(i1.IssueService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NgbModal));\n  };\n  HomeGeomapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HomeGeomapService,\n    factory: HomeGeomapService.ɵfac,\n    providedIn: 'root'\n  });\n  return HomeGeomapService;\n})();","map":null,"metadata":{},"sourceType":"module"}