{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    //'X-Calix-Username': 'admin@calix.com'\n  })\n};\nexport let OrgSecureAccessService = /*#__PURE__*/(() => {\n  class OrgSecureAccessService {\n    constructor(http) {\n      this.http = http;\n    }\n    getSCLByOrg(orgId) {\n      return this.http.get(`${environment.CALIX_ADMIN_BASE_URL}org-access/org/${orgId}/_expand`, httpOptions);\n    }\n    getOrgList() {\n      return this.http.get(`${environment.CALIX_ADMIN_ORG_BASE_URL}organizations`, httpOptions);\n    }\n    getOrgListByUsername(username) {\n      return this.http.get(`${environment.CALIX_ADMIN_BASE_URL}org-access/username/${username}`, httpOptions);\n    }\n    AddOrgListByUsername(username, params) {\n      return this.http.post(`${environment.CALIX_ADMIN_BASE_URL}org-access/username/${username}`, params, httpOptions);\n    }\n    checkType(str) {\n      if (str.indexOf('write') > -1) {\n        return 'Read and Write';\n      }\n      return 'Read only\t';\n    }\n    checkExpiry(obj) {\n      if (obj.endTime == -1) {\n        if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'fr') {\n          return \"Pas d'expiration\";\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'es') {\n          return \"Sin caducidad\";\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'de_DE') {\n          return \"Kein Ablaufdatum\";\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'en') {\n          return \"No Expiry\";\n        }\n        return 'No Expiry';\n      }\n      if (obj.beginTime && obj.endTime) {\n        let begin = this.roundOffTimestamp(obj.beginTime);\n        let end = this.roundOffTimestamp(obj.endTime);\n        //return `${new Date(obj.beginTime).toLocaleString()} - ${new Date(obj.endTime).toLocaleString()}`;\n        if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'fr') {\n          moment.locale('fr');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - ${moment(end).format('DD MMM YYYY, HH:mm')}`;\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'es') {\n          moment.locale('es');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - ${moment(end).format('DD MMM YYYY, HH:mm')}`;\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'de_DE') {\n          moment.locale('de_DE');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - ${moment(end).format('DD MMM YYYY, HH:mm')}`;\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'en') {\n          moment.locale('en');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - ${moment(end).format('DD MMM YYYY, HH:mm')}`;\n        }\n        return `${new Date(begin).toLocaleString()} - ${new Date(end).toLocaleString()}`;\n      }\n    }\n    checkExpiryOrgAccess(obj) {\n      // if (obj.endTime == -1) {\n      //   return `${new Date(obj.beginTime).toLocaleString()} - No Expiry\t`;\n      // } else if (obj.beginTime && obj.endTime) {\n      //   return `${new Date(obj.beginTime).toLocaleString()} - ${new Date(obj.endTime).toLocaleString()}`;\n      // } {\n      // }\n      if (obj.endTime == -1) {\n        let begin = this.roundOffTimestamp(obj.beginTime);\n        if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'en') {\n          moment.locale('en');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - No Expiry`;\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'fr') {\n          moment.locale('fr');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - Pas d'expiration`;\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'es') {\n          moment.locale('es');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - Sin caducidad`;\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'de_DE') {\n          moment.locale('de_DE');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - Kein Ablaufdatum `;\n        }\n        return `${new Date(begin).toLocaleString()} - No Expiry\t`;\n      } else if (obj.beginTime && obj.endTime) {\n        let begin = this.roundOffTimestamp(obj.beginTime);\n        let end = this.roundOffTimestamp(obj.endTime);\n        if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'fr') {\n          moment.locale('fr');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - ${moment(end).format('DD MMM YYYY, HH:mm')}`;\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'en') {\n          moment.locale('en');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - ${moment(end).format('DD MMM YYYY, HH:mm')}`;\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'es') {\n          moment.locale('es');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - ${moment(end).format('DD MMM YYYY, HH:mm')}`;\n        } else if (sessionStorage.getItem('defaultLanguage') && sessionStorage.getItem('defaultLanguage') == 'de_DE') {\n          moment.locale('de_DE');\n          return `${moment(begin).format('DD MMM YYYY, HH:mm')} - ${moment(end).format('DD MMM YYYY, HH:mm')}`;\n        }\n        return `${new Date(begin).toLocaleString()} - ${new Date(end).toLocaleString()}`;\n      }\n    }\n    localTimestampToUTC(d) {\n      let x = new Date(d);\n      let UTCseconds = x.getTime() + x.getTimezoneOffset() * 60 * 1000;\n      return UTCseconds;\n    }\n    utcTimestampTolocal(utc) {\n      let i = new Date();\n      let local = utc - i.getTimezoneOffset() * 60 * 1000;\n      return local;\n    }\n    roundOffTimestamp(ts) {\n      let newTS = Math.floor(ts / 1000) * 1000;\n      return newTS;\n    }\n  }\n  OrgSecureAccessService.ɵfac = function OrgSecureAccessService_Factory(t) {\n    return new (t || OrgSecureAccessService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  OrgSecureAccessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrgSecureAccessService,\n    factory: OrgSecureAccessService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrgSecureAccessService;\n})();","map":null,"metadata":{},"sourceType":"module"}