{"ast":null,"code":"'use strict';\n\nvar domify = require('min-dom').domify,\n  domClasses = require('min-dom').classes,\n  domEvent = require('min-dom').event;\nvar escapeHTML = require('../Utils').escapeHTML;\nvar MAX_DESCRIPTION_LENGTH = 200;\n\n/**\n * Create a linkified and HTML escaped entry field description.\n *\n * As a special feature, this description may contain both markdown,\n * plain <a href> links and <br />\n *\n * @param {string} description\n * @param {object} [options]\n * @param {string} [options.show] - name of callback to determine whether description is shown\n */\nmodule.exports = function entryFieldDescription(translate, description, options) {\n  var show = options && options.show;\n\n  // we tokenize the description to extract text, HTML and markdown links\n  // text, links and new lines are handled seperately\n\n  var escaped = [];\n\n  // match markdown [{TEXT}]({URL}) and HTML links <a href=\"{URL}\">{TEXT}</a>\n  var pattern = /(?:\\[([^\\]]+)\\]\\((https?:\\/\\/[^)]+)\\))|(?:<a href=\"(https?:\\/\\/[^\"]+)\">(.+?(?=<\\/))<\\/a>)/gi;\n  var index = 0;\n  var match;\n  var link, text;\n  while (match = pattern.exec(description)) {\n    // escape + insert text before match\n    if (match.index > index) {\n      escaped.push(escapeText(description.substring(index, match.index)));\n    }\n    link = match[2] && encodeURI(match[2]) || match[3];\n    text = match[1] || match[4];\n\n    // insert safe link\n    escaped.push('<a href=\"' + link + '\" target=\"_blank\">' + escapeText(text) + '</a>');\n    index = match.index + match[0].length;\n  }\n\n  // escape and insert text after last match\n  if (index < description.length) {\n    escaped.push(escapeText(description.substring(index)));\n  }\n  description = escaped.join('');\n  var html = domify('<div class=\"bpp-field-description description description--expanded\"' + (show ? 'data-show=\"' + show + '\">' : '>') + '</div>');\n  var descriptionText = domify('<span class=\"description__text\">' + description + '</span>');\n  html.appendChild(descriptionText);\n  function toggleExpanded(expanded) {\n    if (expanded) {\n      domClasses(html).add('description--expanded');\n      descriptionText.textContent = description + ' ';\n      expand.textContent = translate('Less');\n    } else {\n      domClasses(html).remove('description--expanded');\n      descriptionText.textContent = descriptionShortened + ' ... ';\n      expand.textContent = translate('More');\n    }\n  }\n  var descriptionShortened,\n    expand,\n    expanded = false;\n  if (description.length > MAX_DESCRIPTION_LENGTH) {\n    descriptionShortened = description.slice(0, MAX_DESCRIPTION_LENGTH);\n    expand = domify('<span class=\"bpp-entry-link description__expand\">' + translate('More') + '</span>');\n    domEvent.bind(expand, 'click', function () {\n      expanded = !expanded;\n      toggleExpanded(expanded);\n    });\n    html.appendChild(expand);\n    toggleExpanded(expanded);\n  }\n  return html;\n};\nfunction escapeText(text) {\n  var match,\n    index = 0,\n    escaped = [];\n\n  // match new line <br/> <br /> <br.... /> etc.\n  var pattern = /<br\\s*\\/?>/gi;\n  while (match = pattern.exec(text)) {\n    if (match.index > index) {\n      escaped.push(escapeHTML(text.substring(index, match.index)));\n    }\n    escaped.push('<br />');\n    index = match.index + match[0].length;\n  }\n  if (index < text.length) {\n    escaped.push(escapeHTML(text.substring(index)));\n  }\n  return escaped.join('');\n}","map":null,"metadata":{},"sourceType":"script"}