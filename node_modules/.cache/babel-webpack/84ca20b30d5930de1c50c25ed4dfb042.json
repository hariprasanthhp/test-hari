{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../../shared/services/sso-auth.service\";\nimport * as i2 from \"src/app-services/translate.service\";\nexport let MarketingCommonService = /*#__PURE__*/(() => {\n  class MarketingCommonService {\n    constructor(sso, translateService) {\n      this.sso = sso;\n      this.translateService = translateService;\n      this.language = this.translateService.defualtLanguage;\n      this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n    }\n    timeSplitter(date) {\n      let hour = new Date(date).getHours();\n      let min = new Date(date).getMinutes();\n      // let Hours24 = +hour > 12 ? hour - 12 : hour;\n      let Hours = +hour < 10 ? '0' + hour : hour;\n      let Minutes = +min < 10 ? '0' + min : min;\n      return `${Hours}:${Minutes}`;\n    }\n    objectProperyRemover(object, propertyValue) {\n      if (object[propertyValue]) {\n        delete object[propertyValue];\n      }\n      return object;\n    }\n    formatDateForCampaign(date) {\n      var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    }\n    formatDateForCampaignChart(date) {\n      var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [day, month].join('/');\n    }\n    formatMonthForCampaignChart(date) {\n      var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [month, day, year].join('-');\n    }\n    formatMonthForRevCampaignChart(date) {\n      var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [month, day, year].join('/');\n    }\n    extraParamsAssignerForQlik(url, selectedValues) {\n      let bookMark = '';\n      if (selectedValues != undefined) {\n        bookMark = selectedValues.recommended ? `&select=$::Primary_Seg_Name,${selectedValues.segmentName}&select=$::Upsell_Category,${selectedValues.segmentType}` : `&bookmark=${selectedValues.segmentId}`;\n      }\n      let newUrl = url + bookMark;\n      let regionUrl = '';\n      let loctionUrl = '';\n      let serviceUrl = '';\n      let propensityUrl = '';\n      let zipcodeUrl = '';\n      let zipplusfourUrl = '';\n      if (selectedValues) {\n        if (selectedValues.region && selectedValues.region.length != 0) {\n          if (selectedValues.region[0] != 'All') {\n            let region = `&select=$::region,${selectedValues.region[0]}`;\n            regionUrl = region ? region : '';\n          }\n        } else {\n          regionUrl = '';\n        }\n        if (selectedValues.location && selectedValues.location.length != 0) {\n          if (selectedValues.location[0] != 'All') {\n            let location = `&select=$::location,${selectedValues.location[0]}`;\n            loctionUrl = location ? location : '';\n          }\n        } else {\n          loctionUrl = '';\n        }\n        if (selectedValues.serviceTier && selectedValues.serviceTier.length != 0) {\n          if (selectedValues.serviceTier[0] != 'All') {\n            let service = `&select=$::servicegrp,${selectedValues.serviceTier[0]}`;\n            serviceUrl = service ? service : '';\n          }\n        } else {\n          serviceUrl = '';\n        }\n        if (selectedValues.propensity) {\n          if (selectedValues.propensity != 'All') {\n            let propensity = `&select=$::propensity,${selectedValues.propensity}`;\n            propensityUrl = propensity ? propensity : '';\n          }\n        } else {\n          propensityUrl = '';\n        }\n        if (selectedValues.zipcode != null) {\n          let zipcode = `&select=$::zipcode,${selectedValues.zipcode}`;\n          zipcodeUrl = zipcode ? zipcode : '';\n        } else {\n          zipcodeUrl = '';\n        }\n        if (selectedValues.zipPlusFour != null) {\n          let zipplusfour = `&select=$::zipplusfour,${selectedValues.zipPlusFour}`;\n          zipplusfourUrl = zipplusfour ? zipplusfour : '';\n        } else {\n          zipplusfourUrl = '';\n        }\n      }\n      return newUrl + regionUrl + loctionUrl + serviceUrl + propensityUrl + zipcodeUrl + zipplusfourUrl;\n    }\n    getCMCScopes() {\n      let scopes = this.sso.getScopes();\n      let returnObject = {};\n      returnObject['exploredata'] = scopes['cloud.rbac.cmc.exploredata'] ? scopes['cloud.rbac.cmc.exploredata'] : [];\n      returnObject['campaign'] = scopes['cloud.rbac.cmc.campaign'] ? scopes['cloud.rbac.cmc.campaign'] : [];\n      returnObject['subscriber'] = scopes['cloud.rbac.cmc.subscriber'] ? scopes['cloud.rbac.cmc.subscriber'] : [];\n      returnObject['revenue'] = scopes['cloud.rbac.cmc.revenue'] ? scopes['cloud.rbac.cmc.revenue'] : [];\n      let accessObject = {};\n      accessObject['exploredataNoAccess'] = returnObject['exploredata'].length == 0 ? true : false;\n      accessObject['exploredataRead'] = returnObject['exploredata'].length >= 1 ? true : false;\n      accessObject['exploredataWrite'] = returnObject['exploredata'].length == 2 ? true : false;\n      accessObject['campaignNoAccess'] = returnObject['campaign'].length == 0 ? true : false;\n      accessObject['campaignRead'] = returnObject['campaign'].length >= 1 ? true : false;\n      accessObject['campaignWrite'] = returnObject['campaign'].length == 2 ? true : false;\n      accessObject['subscriberNoAccess'] = returnObject['subscriber'].length == 0 ? true : false;\n      accessObject['subscriberRead'] = returnObject['subscriber'].length >= 1 ? true : false;\n      accessObject['subscriberWrite'] = returnObject['subscriber'].length == 2 ? true : false;\n      accessObject['revenueNoAccess'] = returnObject['revenue'].length == 0 ? true : false;\n      accessObject['revenueRead'] = returnObject['revenue'].length >= 1 ? true : false;\n      accessObject['revenueWrite'] = returnObject['revenue'].length == 2 ? true : false;\n      accessObject['allNoAccess'] = accessObject['exploredataNoAccess'] && accessObject['campaignNoAccess'] && accessObject['subscriberNoAccess'] && accessObject['revenueNoAccess'] ? true : false;\n      accessObject['allRead'] = accessObject['exploredataRead'] && accessObject['campaignRead'] && accessObject['subscriberRead'] && accessObject['revenueRead'] ? true : false;\n      accessObject['allWrite'] = accessObject['exploredataWrite'] && accessObject['campaignWrite'] && accessObject['subscriberRead'] && accessObject['revenueWrite'] ? true : false;\n      if (!environment.VALIDATE_SCOPE) {\n        accessObject['exploredataNoAccess'] = false;\n        accessObject['exploredataRead'] = true;\n        accessObject['exploredataWrite'] = true;\n        accessObject['campaignNoAccess'] = false;\n        accessObject['campaignRead'] = true;\n        accessObject['campaignWrite'] = true;\n        accessObject['subscriberNoAccess'] = false;\n        accessObject['subscriberRead'] = true;\n        accessObject['subscriberWrite'] = true;\n        accessObject['revenueNoAccess'] = false;\n        accessObject['revenueRead'] = true;\n        accessObject['revenueWrite'] = true;\n        accessObject['allNoAccess'] = false;\n        accessObject['allRead'] = true;\n        accessObject['allWrite'] = true;\n      }\n      return accessObject;\n    }\n    setCampaignID(id) {\n      return localStorage.setItem('campaignID', id);\n    }\n    removeCampaignID() {\n      return localStorage.removeItem('campaignID');\n    }\n    getCampaignID() {\n      return localStorage.getItem('campaignID');\n    }\n    setSubscriberID(id) {\n      return sessionStorage.setItem('subscriberID', id);\n    }\n    getSubscriberID() {\n      return sessionStorage.getItem('subscriberID');\n    }\n    setSearchValue(value) {\n      return localStorage.setItem('searchValue', value);\n    }\n    getSearchValue() {\n      return localStorage.getItem('searchValue');\n    }\n    setCSCtrueOrFalse(boolean) {\n      return localStorage.setItem('fromCSCpage', boolean);\n    }\n    getCSCtrueOrFalse() {\n      return localStorage.getItem('fromCSCpage');\n    }\n    errorHandling(err) {\n      console.log(err.error);\n      if (err.status == 401) {\n        return this.language['Access Denied'];\n      } else if (err.status == 503) {\n        return \"Service Temporarily Unavailable\";\n      } else if (err.status == 500) {\n        return this.language.internalServerError;\n      } else if (err.status == 404) {\n        return this.language.URLnotFoungError;\n      } else if (err.status == 504 || err.status == 502) {\n        return this.language.timeoutErrorError;\n      } else if (err.status == 400) {\n        return err.error ? err.error.error : this.language.timeoutErrorError;\n      } else if (err.status == 0) {\n        return this.language.connectionLost;\n      } else {\n        if (err.error && err.error.errorDesc) {\n          return `${err.error.errorDesc}`;\n        } else if (err.error && err.error.message) {\n          return `${err.error.message}`;\n        } else {\n          return `${err.message}`;\n        }\n      }\n    }\n  }\n  MarketingCommonService.ɵfac = function MarketingCommonService_Factory(t) {\n    return new (t || MarketingCommonService)(i0.ɵɵinject(i1.SsoAuthService), i0.ɵɵinject(i2.TranslateService));\n  };\n  MarketingCommonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MarketingCommonService,\n    factory: MarketingCommonService.ɵfac,\n    providedIn: 'root'\n  });\n  return MarketingCommonService;\n})();","map":null,"metadata":{},"sourceType":"module"}