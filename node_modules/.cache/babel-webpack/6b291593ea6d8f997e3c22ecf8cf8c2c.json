{"ast":null,"code":"import { is } from '../../../util/ModelUtil';\nimport { getLanesRoot, computeLanesResize } from '../util/LaneUtil';\nimport { eachElement } from 'diagram-js/lib/util/Elements';\nimport { asTRBL } from 'diagram-js/lib/layout/LayoutUtil';\nimport { substractTRBL } from 'diagram-js/lib/features/resize/ResizeUtil';\n\n/**\n * A handler that resizes a lane.\n *\n * @param {Modeling} modeling\n */\nexport default function ResizeLaneHandler(modeling, spaceTool) {\n  this._modeling = modeling;\n  this._spaceTool = spaceTool;\n}\nResizeLaneHandler.$inject = ['modeling', 'spaceTool'];\nResizeLaneHandler.prototype.preExecute = function (context) {\n  var shape = context.shape,\n    newBounds = context.newBounds,\n    balanced = context.balanced;\n  if (balanced !== false) {\n    this.resizeBalanced(shape, newBounds);\n  } else {\n    this.resizeSpace(shape, newBounds);\n  }\n};\n\n/**\n * Resize balanced, adjusting next / previous lane sizes.\n *\n * @param {djs.model.Shape} shape\n * @param {Bounds} newBounds\n */\nResizeLaneHandler.prototype.resizeBalanced = function (shape, newBounds) {\n  var modeling = this._modeling;\n  var resizeNeeded = computeLanesResize(shape, newBounds);\n\n  // resize the lane\n  modeling.resizeShape(shape, newBounds);\n\n  // resize other lanes as needed\n  resizeNeeded.forEach(function (r) {\n    modeling.resizeShape(r.shape, r.newBounds);\n  });\n};\n\n/**\n * Resize, making actual space and moving below / above elements.\n *\n * @param {djs.model.Shape} shape\n * @param {Bounds} newBounds\n */\nResizeLaneHandler.prototype.resizeSpace = function (shape, newBounds) {\n  var spaceTool = this._spaceTool;\n  var shapeTrbl = asTRBL(shape),\n    newTrbl = asTRBL(newBounds);\n  var trblDiff = substractTRBL(newTrbl, shapeTrbl);\n  var lanesRoot = getLanesRoot(shape);\n  var allAffected = [],\n    allLanes = [];\n  eachElement(lanesRoot, function (element) {\n    allAffected.push(element);\n    if (is(element, 'bpmn:Lane') || is(element, 'bpmn:Participant')) {\n      allLanes.push(element);\n    }\n    return element.children;\n  });\n  var change, spacePos, direction, offset, adjustments;\n  if (trblDiff.bottom || trblDiff.top) {\n    change = trblDiff.bottom || trblDiff.top;\n    spacePos = shape.y + (trblDiff.bottom ? shape.height : 0) + (trblDiff.bottom ? -10 : 10);\n    direction = trblDiff.bottom ? 's' : 'n';\n    offset = trblDiff.top > 0 || trblDiff.bottom < 0 ? -change : change;\n    adjustments = spaceTool.calculateAdjustments(allAffected, 'y', offset, spacePos);\n    spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, {\n      x: 0,\n      y: change\n    }, direction);\n  }\n  if (trblDiff.left || trblDiff.right) {\n    change = trblDiff.right || trblDiff.left;\n    spacePos = shape.x + (trblDiff.right ? shape.width : 0) + (trblDiff.right ? -10 : 100);\n    direction = trblDiff.right ? 'e' : 'w';\n    offset = trblDiff.left > 0 || trblDiff.right < 0 ? -change : change;\n    adjustments = spaceTool.calculateAdjustments(allLanes, 'x', offset, spacePos);\n    spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, {\n      x: change,\n      y: 0\n    }, direction);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}