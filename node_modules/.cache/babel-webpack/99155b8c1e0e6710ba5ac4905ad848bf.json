{"ast":null,"code":"import { isFunction } from 'min-dash';\n\n// TODO(nikku): remove with future bpmn-js version\n\n/**\n * Wraps APIs to check:\n *\n * 1) If a callback is passed -> Warn users about callback deprecation.\n * 2) If Promise class is implemented in current environment.\n *\n * @private\n */\nexport function wrapForCompatibility(api) {\n  return function () {\n    if (!window.Promise) {\n      throw new Error('Promises is not supported in this environment. Please polyfill Promise.');\n    }\n    var argLen = arguments.length;\n    if (argLen >= 1 && isFunction(arguments[argLen - 1])) {\n      var callback = arguments[argLen - 1];\n      console.warn(new Error('Passing callbacks to ' + api.name + ' is deprecated and will be removed in a future major release. ' + 'Please switch to promises: https://bpmn.io/l/moving-to-promises.html'));\n      var argsWithoutCallback = Array.prototype.slice.call(arguments, 0, -1);\n      api.apply(this, argsWithoutCallback).then(function (result) {\n        var firstKey = Object.keys(result)[0];\n\n        // The APIs we are wrapping all resolve a single item depending on the API.\n        // For instance, importXML resolves { warnings } and saveXML returns { xml }.\n        // That's why we can call the callback with the first item of result.\n        return callback(null, result[firstKey]);\n\n        // Passing a second paramter instead of catch because we don't want to\n        // catch errors thrown by callback().\n      }, function (err) {\n        return callback(err, err.warnings);\n      });\n    } else {\n      return api.apply(this, arguments);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}