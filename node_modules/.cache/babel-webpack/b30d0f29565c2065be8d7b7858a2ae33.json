{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { HttpParams } from '@angular/common/http';\nimport { getSecureOnBoarding, updateSecureOnBoarding } from './endpoint';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let SecureOnBoardingService = /*#__PURE__*/(() => {\n  class SecureOnBoardingService {\n    constructor(http, Sso) {\n      this.http = http;\n      this.Sso = Sso;\n    }\n    // Read\n    getSecureOnBoarding(orgId) {\n      const params = new HttpParams();\n      // .set(\"orgId\",orgId);\n      if (this.Sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.get(getSecureOnBoarding, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateSecureOnBoarding(body, orgId) {\n      // body.orgId = orgId;\n      if (this.Sso.getOrg(orgId)) {\n        body.orgId = orgId;\n      }\n      return this.http.put(updateSecureOnBoarding, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n  }\n  SecureOnBoardingService.ɵfac = function SecureOnBoardingService_Factory(t) {\n    return new (t || SecureOnBoardingService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  SecureOnBoardingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SecureOnBoardingService,\n    factory: SecureOnBoardingService.ɵfac,\n    providedIn: 'root'\n  });\n  return SecureOnBoardingService;\n})();","map":null,"metadata":{},"sourceType":"module"}