{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let MarketingCampaignsApiService = /*#__PURE__*/(() => {\n  class MarketingCampaignsApiService {\n    constructor(httpClient, ssoAuthService) {\n      this.httpClient = httpClient;\n      this.ssoAuthService = ssoAuthService;\n      this.baseURL = environment.API_BASE_URL;\n      this.validateDeployCampaign$ = new BehaviorSubject(false);\n      this.deployCampaignValidation = this.validateDeployCampaign$.asObservable();\n      this.campaign = this.baseURL + 'cmc-campaigns/campaign';\n      this.fileUploadAPI = this.baseURL + 's3/upload/files';\n      this.channel = this.baseURL + 'cmc-campaigns';\n      this.qlik = this.baseURL + 'cmc/qlik/getCreateSegment';\n      this.qlik_1 = this.baseURL + 'cmc/qlik/UpdateSegment';\n    }\n    CampaignsChartSeries(data) {\n      return this.httpClient.get(`${this.channel}/dailyTotals/revenue/org?months=` + data);\n    }\n    CampaignEventTrigger(resend, eventtype, threshold, segmentId, campaignId, segemntcategory) {\n      let _campaignId = campaignId != undefined && campaignId != '' ? campaignId : '';\n      let _segmentId = segmentId != undefined && segmentId != '' ? segmentId : '';\n      return this.httpClient.get(`${this.channel}/triggered_campaign/estimate_next_audience/${eventtype}/${threshold}?segmentId=${_segmentId}&campaignId=${_campaignId}&segmentCategory=${segemntcategory}`);\n      // return this.httpClient.post(`${this.campaign}/org/${this.ssoAuthService.getOrgId()}/userId/${this.ssoAuthService.getUsername()}`, campaignData)\n    }\n\n    getEventTrigger() {\n      return this.httpClient.get(`${this.channel}/triggered_campaign/threshold_values`);\n      // return this.httpClient.post(`${this.campaign}/org/${this.ssoAuthService.getOrgId()}/userId/${this.ssoAuthService.getUsername()}`, campaignData)\n    }\n\n    SubscriberChartSeries(data) {\n      return this.httpClient.get(`${this.channel}/dailyTotals/subscriber/org?months=` + data);\n    }\n    CampaignsChartSeries_rev(data, campaignId) {\n      return this.httpClient.get(`${this.channel}/dailyTotals/revenue/campaign/${campaignId}?months=` + data);\n    }\n    SubscriberChartSeries_rev(data, campaignId) {\n      return this.httpClient.get(`${this.channel}/dailyTotals/subscriber/campaign/${campaignId}?months=` + data);\n    }\n    CampaignsListGET(from, lang) {\n      return this.httpClient.get(`${this.campaign}/campaign-list/${from}?langId=${lang}`);\n    }\n    CampaignsListPopup(from, type) {\n      return this.httpClient.get(`${this.campaign}/campaign-list/${from}/${type}`);\n    }\n    TriggeredChartSeries_rev(data, campaignId) {\n      return this.httpClient.get(`${this.channel}/dailyTotals/performance/campaign/${campaignId}?months=` + data);\n    }\n    CampaignDetailGET(id) {\n      return this.httpClient.get(`${this.campaign}/${id}`);\n      // return this.httpClient.get(`${this.campaign}/${id}/${this.ssoAuthService.getUsername()}`)\n    }\n\n    CampaignPUT(campaignData) {\n      return this.httpClient.put(`${this.campaign}`, campaignData);\n      // return this.httpClient.put(`${this.campaign}/org/${this.ssoAuthService.getOrgId()}/userId/${this.ssoAuthService.getUsername()}`, campaignData)\n    }\n\n    CampaignPOST(campaignData) {\n      return this.httpClient.post(`${this.campaign}`, campaignData);\n      // return this.httpClient.post(`${this.campaign}/org/${this.ssoAuthService.getOrgId()}/userId/${this.ssoAuthService.getUsername()}`, campaignData)\n    }\n    //\n    CampaignCreate(campaignData, data) {\n      return this.httpClient.post(`${this.qlik}?segmentName=${campaignData.segmentName}&segmentDescription=${campaignData.segmentDescription}`, data);\n      // return this.httpClient.post(`${this.campaign}/org/${this.ssoAuthService.getOrgId()}/userId/${this.ssoAuthService.getUsername()}`, campaignData)\n    }\n\n    CampaignUpdate(campaignData, data) {\n      return this.httpClient.post(`${this.qlik_1}?segmentName=${campaignData.segmentName}&segmentDescription=${campaignData.segmentDescription}&segmentId=${campaignData.segmentId}`, data);\n      // return this.httpClient.post(`${this.campaign}/org/${this.ssoAuthService.getOrgId()}/userId/${this.ssoAuthService.getUsername()}`, campaignData)\n    }\n    //\n    CampaignDELETE(campaignId) {\n      return this.httpClient.delete(`${this.campaign}/${campaignId}`);\n      // return this.httpClient.delete(`${this.campaign}/${this.ssoAuthService.getOrgId()}/campaignId/${campaignId}`)\n    }\n\n    CampaignPauseUnpause(campaignId, status) {\n      return this.httpClient.put(`${this.campaign}/${campaignId}/status/${status}`, {});\n      // return this.httpClient.delete(`${this.campaign}/${this.ssoAuthService.getOrgId()}/campaignId/${campaignId}`)\n    }\n\n    fileUpload(formData) {\n      return this.httpClient.post(this.fileUploadAPI, formData);\n    }\n    getDeplyValidation(value) {\n      this.validateDeployCampaign$.next(value);\n    }\n    SubRevChartSeries(data, campaignId) {\n      return this.httpClient.get(`${this.channel}/dailyTotals/subscriber/campaign/${campaignId}?months=` + data);\n    }\n  }\n  MarketingCampaignsApiService.ɵfac = function MarketingCampaignsApiService_Factory(t) {\n    return new (t || MarketingCampaignsApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  MarketingCampaignsApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MarketingCampaignsApiService,\n    factory: MarketingCampaignsApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return MarketingCampaignsApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}