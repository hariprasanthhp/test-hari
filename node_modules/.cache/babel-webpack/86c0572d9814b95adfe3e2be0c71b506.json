{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\nexport default function EventBasedGatewayBehavior(eventBus, modeling) {\n  CommandInterceptor.call(this, eventBus);\n\n  /**\n   * Remove existing sequence flows of event-based target before connecting\n   * from event-based gateway.\n   */\n  this.preExecuted('connection.create', function (event) {\n    var context = event.context,\n      source = context.source,\n      target = context.target,\n      existingIncomingConnections = target.incoming.slice();\n    if (context.hints && context.hints.createElementsBehavior === false) {\n      return;\n    }\n    if (is(source, 'bpmn:EventBasedGateway') && target.incoming.length) {\n      existingIncomingConnections.filter(isSequenceFlow).forEach(function (sequenceFlow) {\n        modeling.removeConnection(sequenceFlow);\n      });\n    }\n  });\n\n  /**\n   *  After replacing shape with event-based gateway, remove incoming sequence\n   *  flows of event-based targets which do not belong to event-based gateway\n   *  source.\n   */\n  this.preExecuted('shape.replace', function (event) {\n    var newShape = event.context.newShape,\n      newShapeTargets,\n      newShapeTargetsIncomingSequenceFlows;\n    if (!is(newShape, 'bpmn:EventBasedGateway')) {\n      return;\n    }\n    newShapeTargets = newShape.outgoing.filter(isSequenceFlow).map(function (sequenceFlow) {\n      return sequenceFlow.target;\n    });\n    newShapeTargetsIncomingSequenceFlows = newShapeTargets.reduce(function (sequenceFlows, target) {\n      var incomingSequenceFlows = target.incoming.filter(isSequenceFlow);\n      return sequenceFlows.concat(incomingSequenceFlows);\n    }, []);\n    newShapeTargetsIncomingSequenceFlows.forEach(function (sequenceFlow) {\n      if (sequenceFlow.source !== newShape) {\n        modeling.removeConnection(sequenceFlow);\n      }\n    });\n  });\n}\nEventBasedGatewayBehavior.$inject = ['eventBus', 'modeling'];\ninherits(EventBasedGatewayBehavior, CommandInterceptor);\n\n// helpers //////////////////////\n\nfunction isSequenceFlow(connection) {\n  return is(connection, 'bpmn:SequenceFlow');\n}","map":null,"metadata":{},"sourceType":"module"}