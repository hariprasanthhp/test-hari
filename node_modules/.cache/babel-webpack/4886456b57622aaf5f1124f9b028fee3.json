{"ast":null,"code":"import { getBusinessObject, is } from '../../util/ModelUtil';\nimport { forEach, isArray, isUndefined, omit, reduce } from 'min-dash';\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [properties];\n  }\n  forEach(properties, function (property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\nfunction removeProperties(element, properties) {\n  if (!isArray(properties)) {\n    properties = [properties];\n  }\n  forEach(properties, function (property) {\n    if (element[property]) {\n      delete element[property];\n    }\n  });\n}\nvar LOW_PRIORITY = 750;\nexport default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function (context) {\n    var descriptor = context.descriptor,\n      element = context.element;\n    var businessObject = descriptor.oldBusinessObject = getBusinessObject(element);\n    descriptor.type = element.type;\n    copyProperties(businessObject, descriptor, 'name');\n    descriptor.di = {};\n\n    // fill and stroke will be set to DI\n    copyProperties(businessObject.di, descriptor.di, ['fill', 'stroke']);\n    copyProperties(businessObject.di, descriptor, 'isExpanded');\n    if (isLabel(descriptor)) {\n      return descriptor;\n    }\n\n    // default sequence flow\n    if (businessObject.default) {\n      descriptor.default = businessObject.default.id;\n    }\n  });\n  eventBus.on('moddleCopy.canCopyProperty', function (context) {\n    var parent = context.parent,\n      property = context.property,\n      propertyName = context.propertyName,\n      bpmnProcess;\n    if (propertyName === 'processRef' && is(parent, 'bpmn:Participant') && is(property, 'bpmn:Process')) {\n      bpmnProcess = bpmnFactory.create('bpmn:Process');\n\n      // return copy of process\n      return moddleCopy.copyElement(property, bpmnProcess);\n    }\n  });\n  var references;\n  function resolveReferences(descriptor, cache) {\n    var businessObject = getBusinessObject(descriptor);\n\n    // default sequence flows\n    if (descriptor.default) {\n      // relationship cannot be resolved immediately\n      references[descriptor.default] = {\n        element: businessObject,\n        property: 'default'\n      };\n    }\n\n    // boundary events\n    if (descriptor.host) {\n      // relationship can be resolved immediately\n      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[descriptor.host]);\n    }\n    references = omit(references, reduce(references, function (array, reference, key) {\n      var element = reference.element,\n        property = reference.property;\n      if (key === descriptor.id) {\n        element[property] = businessObject;\n        array.push(descriptor.id);\n      }\n      return array;\n    }, []));\n  }\n  eventBus.on('copyPaste.pasteElements', function () {\n    references = {};\n  });\n  eventBus.on('copyPaste.pasteElement', function (context) {\n    var cache = context.cache,\n      descriptor = context.descriptor,\n      oldBusinessObject = descriptor.oldBusinessObject,\n      newBusinessObject;\n\n    // do NOT copy business object if external label\n    if (isLabel(descriptor)) {\n      descriptor.businessObject = getBusinessObject(cache[descriptor.labelTarget]);\n      return;\n    }\n    newBusinessObject = bpmnFactory.create(oldBusinessObject.$type);\n    descriptor.businessObject = moddleCopy.copyElement(oldBusinessObject, newBusinessObject);\n\n    // resolve references e.g. default sequence flow\n    resolveReferences(descriptor, cache);\n    copyProperties(descriptor, newBusinessObject, ['isExpanded', 'name']);\n    removeProperties(descriptor, 'oldBusinessObject');\n  });\n}\nBpmnCopyPaste.$inject = ['bpmnFactory', 'eventBus', 'moddleCopy'];\n\n// helpers //////////\n\nfunction isLabel(element) {\n  return !!element.labelTarget;\n}","map":null,"metadata":{},"sourceType":"module"}