{"ast":null,"code":"import { flatten, forEach, filter, find, groupBy, map, matchPattern, size } from 'min-dash';\nimport { selfAndAllChildren } from '../../util/Elements';\nimport { append as svgAppend, attr as svgAttr, create as svgCreate, remove as svgRemove } from 'tiny-svg';\nimport { translate } from '../../util/SvgTransformUtil';\nvar LOW_PRIORITY = 499;\nvar MARKER_DRAGGING = 'djs-dragging',\n  MARKER_OK = 'drop-ok',\n  MARKER_NOT_OK = 'drop-not-ok',\n  MARKER_NEW_PARENT = 'new-parent',\n  MARKER_ATTACH = 'attach-ok';\n\n/**\n * Provides previews for moving shapes when moving.\n *\n * @param {EventBus} eventBus\n * @param {ElementRegistry} elementRegistry\n * @param {Canvas} canvas\n * @param {Styles} styles\n */\nexport default function MovePreview(eventBus, canvas, styles, previewSupport) {\n  function getVisualDragShapes(shapes) {\n    var elements = getAllDraggedElements(shapes);\n    var filteredElements = removeEdges(elements);\n    return filteredElements;\n  }\n  function getAllDraggedElements(shapes) {\n    var allShapes = selfAndAllChildren(shapes, true);\n    var allConnections = map(allShapes, function (shape) {\n      return (shape.incoming || []).concat(shape.outgoing || []);\n    });\n    return flatten(allShapes.concat(allConnections));\n  }\n\n  /**\n   * Sets drop marker on an element.\n   */\n  function setMarker(element, marker) {\n    [MARKER_ATTACH, MARKER_OK, MARKER_NOT_OK, MARKER_NEW_PARENT].forEach(function (m) {\n      if (m === marker) {\n        canvas.addMarker(element, m);\n      } else {\n        canvas.removeMarker(element, m);\n      }\n    });\n  }\n\n  /**\n   * Make an element draggable.\n   *\n   * @param {Object} context\n   * @param {djs.model.Base} element\n   * @param {boolean} addMarker\n   */\n  function makeDraggable(context, element, addMarker) {\n    previewSupport.addDragger(element, context.dragGroup);\n    if (addMarker) {\n      canvas.addMarker(element, MARKER_DRAGGING);\n    }\n    if (context.allDraggedElements) {\n      context.allDraggedElements.push(element);\n    } else {\n      context.allDraggedElements = [element];\n    }\n  }\n\n  // assign a low priority to this handler\n  // to let others modify the move context before\n  // we draw things\n  eventBus.on('shape.move.start', LOW_PRIORITY, function (event) {\n    var context = event.context,\n      dragShapes = context.shapes,\n      allDraggedElements = context.allDraggedElements;\n    var visuallyDraggedShapes = getVisualDragShapes(dragShapes);\n    if (!context.dragGroup) {\n      var dragGroup = svgCreate('g');\n      svgAttr(dragGroup, styles.cls('djs-drag-group', ['no-events']));\n      var defaultLayer = canvas.getDefaultLayer();\n      svgAppend(defaultLayer, dragGroup);\n      context.dragGroup = dragGroup;\n    }\n\n    // add previews\n    visuallyDraggedShapes.forEach(function (shape) {\n      previewSupport.addDragger(shape, context.dragGroup);\n    });\n\n    // cache all dragged elements / gfx\n    // so that we can quickly undo their state changes later\n    if (!allDraggedElements) {\n      allDraggedElements = getAllDraggedElements(dragShapes);\n    } else {\n      allDraggedElements = flatten([allDraggedElements, getAllDraggedElements(dragShapes)]);\n    }\n\n    // add dragging marker\n    forEach(allDraggedElements, function (e) {\n      canvas.addMarker(e, MARKER_DRAGGING);\n    });\n    context.allDraggedElements = allDraggedElements;\n\n    // determine, if any of the dragged elements have different parents\n    context.differentParents = haveDifferentParents(dragShapes);\n  });\n\n  // update previews\n  eventBus.on('shape.move.move', LOW_PRIORITY, function (event) {\n    var context = event.context,\n      dragGroup = context.dragGroup,\n      target = context.target,\n      parent = context.shape.parent,\n      canExecute = context.canExecute;\n    if (target) {\n      if (canExecute === 'attach') {\n        setMarker(target, MARKER_ATTACH);\n      } else if (context.canExecute && target && target.id !== parent.id) {\n        setMarker(target, MARKER_NEW_PARENT);\n      } else {\n        setMarker(target, context.canExecute ? MARKER_OK : MARKER_NOT_OK);\n      }\n    }\n    translate(dragGroup, event.dx, event.dy);\n  });\n  eventBus.on(['shape.move.out', 'shape.move.cleanup'], function (event) {\n    var context = event.context,\n      target = context.target;\n    if (target) {\n      setMarker(target, null);\n    }\n  });\n\n  // remove previews\n  eventBus.on('shape.move.cleanup', function (event) {\n    var context = event.context,\n      allDraggedElements = context.allDraggedElements,\n      dragGroup = context.dragGroup;\n\n    // remove dragging marker\n    forEach(allDraggedElements, function (e) {\n      canvas.removeMarker(e, MARKER_DRAGGING);\n    });\n    if (dragGroup) {\n      svgRemove(dragGroup);\n    }\n  });\n\n  // API //////////////////////\n\n  /**\n   * Make an element draggable.\n   *\n   * @param {Object} context\n   * @param {djs.model.Base} element\n   * @param {boolean} addMarker\n   */\n  this.makeDraggable = makeDraggable;\n}\nMovePreview.$inject = ['eventBus', 'canvas', 'styles', 'previewSupport'];\n\n// helpers //////////////////////\n\n/**\n * returns elements minus all connections\n * where source or target is not elements\n */\nfunction removeEdges(elements) {\n  var filteredElements = filter(elements, function (element) {\n    if (!isConnection(element)) {\n      return true;\n    } else {\n      return find(elements, matchPattern({\n        id: element.source.id\n      })) && find(elements, matchPattern({\n        id: element.target.id\n      }));\n    }\n  });\n  return filteredElements;\n}\nfunction haveDifferentParents(elements) {\n  return size(groupBy(elements, function (e) {\n    return e.parent && e.parent.id;\n  })) !== 1;\n}\n\n/**\n * Checks if an element is a connection.\n */\nfunction isConnection(element) {\n  return element.waypoints;\n}","map":null,"metadata":{},"sourceType":"module"}