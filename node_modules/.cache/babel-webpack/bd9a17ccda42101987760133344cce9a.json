{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { enterNumberOnly } from 'src/app/shared-utils/utils';\nimport { environment } from '../../../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"../../../../../shared/services/sso-auth.service\";\nimport * as i6 from \"@angular/platform-browser\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"../../../../shared/custom-directives/custom-digit-check-directive.directive\";\nimport * as i9 from \"../../../../shared/custom-directives/custom-min.directive\";\nimport * as i10 from \"../../../../shared/custom-directives/custom-max.directive\";\nimport * as i11 from \"../../../../../shared/directives/trim-space.directive\";\nimport * as i12 from \"../../../../shared/custom-directives/custom-num-min.directive\";\nimport * as i13 from \"../../../../shared/custom-directives/custom-num-max.directive\";\nimport * as i14 from \"../../../../shared/custom-directives/custom-negetive-val.directive\";\nimport * as i15 from \"../../../../shared/custom-directives/custom-starts-with.directive\";\nimport * as i16 from \"../../../../shared/custom-directives/custom-ends-with.directive\";\nconst _c0 = [\"nameRef\"];\nfunction DialPlanNewComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 34);\n    i0.ɵɵelementStart(1, \"span\", 35);\n    i0.ɵɵelement(2, \"img\", 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 37);\n    i0.ɵɵlistener(\"click\", function DialPlanNewComponent_div_0_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.closeAlert();\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 38);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r0.errorInfo, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction DialPlanNewComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 39);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.language.Enter_A_Value, \"\");\n  }\n}\nfunction DialPlanNewComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 40);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.language.Name_required_validation1, \"\");\n  }\n}\nfunction DialPlanNewComponent_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 40);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.language.Name_required_validation2, \"\");\n  }\n}\nfunction DialPlanNewComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r7.language.Enter_A_Value, \" \");\n  }\n}\nfunction DialPlanNewComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.language[\"ShortTimer_Value_Hint_Min\"], \" \");\n  }\n}\nfunction DialPlanNewComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 41);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.language[\"ShortTimer_Value_Hint_Max\"], \" \");\n  }\n}\nfunction DialPlanNewComponent_div_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 42);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r11.language.Enter_A_Value, \" \");\n  }\n}\nfunction DialPlanNewComponent_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 42);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.language.Digit_Validation_Dial_New, \" \");\n  }\n}\nfunction DialPlanNewComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 42);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r13.language.longDigitTimer_Value_Hint_Min, \" \");\n  }\n}\nfunction DialPlanNewComponent_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 42);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r14.language.longDigitTimer_Value_Hint_Max, \" \");\n  }\n}\nfunction DialPlanNewComponent_div_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r16.language.Enter_A_Value, \" \");\n  }\n}\nfunction DialPlanNewComponent_div_52_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r17.language.Rules_Validation, \" \");\n  }\n}\nfunction DialPlanNewComponent_div_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 42);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r18.language.Rules_Validation2, \" \");\n  }\n}\nfunction DialPlanNewComponent_div_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 42);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r19.language[\"Invalid Rule\"], \" \");\n  }\n}\nfunction DialPlanNewComponent_button_59_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 44);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.language.submit, \" \");\n  }\n}\nconst _c1 = function () {\n  return [\"digitShortTimer\", \"digitlongTimer\"];\n};\nconst _c2 = function (a0) {\n  return [a0];\n};\nexport let DialPlanNewComponent = /*#__PURE__*/(() => {\n  class DialPlanNewComponent {\n    constructor(translateService, formBuilder, router, activatedRoute, http, sso, titleService) {\n      this.translateService = translateService;\n      this.formBuilder = formBuilder;\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.http = http;\n      this.sso = sso;\n      this.titleService = titleService;\n      this.onClose = new EventEmitter();\n      // Initialize component essential variables.\n      this.numberOnly = enterNumberOnly;\n      this.unSubscribeParam$ = new Subject();\n      this.valueLessShort = false;\n      this.hasWriteAccess = false;\n      this.hasScopeAccess = false;\n      this.btnDisabled = false;\n      this.error = false;\n      this.errorInfo = '';\n      this.successInfo = '';\n      this.nameDisbable = false;\n      this.rulesPattern = \"^\\\\^[^\\\\|\\\\^]*(\\\\|\\\\^[^\\\\|\\\\^]*)*\\\\|?$\";\n      this.input = {\n        name: '',\n        description: '',\n        shortTimer: '',\n        longTimer: '',\n        rules: ''\n      };\n      this.isEmptySpace = false;\n      this.regexObj = {\n        name: /^[a-zA-Z0-9_\\s-]+$/,\n        rules: {\n          startsWith: \"^\",\n          endsWith: \"^\",\n          match: \"^\\\\^[^\\\\|\\\\^]*(\\\\|\\\\^[^\\\\|\\\\^]*)*\\\\|?$\"\n        }\n      };\n      this.errors = {\n        name: '',\n        descriptioin: '',\n        shortTimer: '',\n        longTimer: '',\n        rules: ''\n      };\n      this.createDialPlanFormGroup();\n      this.dialPlanObj = {\n        name: null,\n        description: null,\n        shortTimer: null,\n        longTimer: null,\n        rules: null\n      };\n    }\n    ngOnChanges(changes) {\n      this.id = this.Id;\n      if (this.editModalInput) {\n        this.input = {\n          name: '',\n          description: '',\n          shortTimer: '',\n          longTimer: '',\n          rules: ''\n        };\n        this.dialPlanObj = {\n          name: null,\n          description: null,\n          shortTimer: null,\n          longTimer: null,\n          rules: null\n        };\n        this.dialPlanObj = this.editModalInput;\n        this.dialPlanFormGroup.patchValue(this.dialPlanObj);\n        this.nameDisbable = true;\n        this.id = this.editModalInput._id;\n        this.viewDialPlan();\n      } else {\n        this.nameDisbable = false;\n      }\n    }\n    setTitle(url) {\n      if (this.router.url.includes('cco-foundation')) {\n        this.titleService.setTitle(`${this.language['Dial Plans']}  - ${this.language['Workflow Prerequisites']} - ${this.language['configuration']} - ${this.language['Deployment']} - ${this.language['Calix Cloud']}`);\n      } else if (this.router.url.includes('/cco/services/service-profiles/dial-plan')) {\n        this.titleService.setTitle(`${this.language['RG Dial Plans']} - ${this.language['Services Profiles']} - ${this.language['Services']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      } else if (this.router.url.includes('/support/netops-management')) {\n        this.titleService.setTitle(`${this.language['Dial Plans']} - ${this.language['Configurations']} - ${this.language['NetOps']} - ${this.language['Support']} - ${this.language['Calix Cloud']}`);\n      }\n    }\n    ngOnInit() {\n      var _a, _b;\n      this.id = this.Id;\n      if (this.editModalInput) {\n        this.input = {\n          name: '',\n          description: '',\n          shortTimer: '',\n          longTimer: '',\n          rules: ''\n        };\n        this.dialPlanObj = {\n          name: null,\n          description: null,\n          shortTimer: null,\n          longTimer: null,\n          rules: null\n        };\n        this.dialPlanObj = this.editModalInput;\n        this.dialPlanFormGroup.patchValue(this.dialPlanObj);\n        this.nameDisbable = true;\n        this.id = this.editModalInput._id;\n        this.viewDialPlan();\n      } else {\n        this.nameDisbable = false;\n      }\n      this.id = this.activatedRoute.snapshot.paramMap.get(\"id\");\n      if (this.id) {\n        this.viewDialPlan();\n      }\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.errors.name = this.language['Enter_A_Value'];\n        this.errors.shortTimer = this.language['Please enter a value less than or equal to 16'];\n        this.errors.longTimer = this.language['Enter_A_Value'];\n        this.errors.longTimer = this.language['Name_Validation2_dial_new'];\n        this.errors.rules = this.language['Rules_Validation'];\n        this.errors.rules = this.language['Rules_Validation2'];\n        this.errors.rules = this.language['Invalid Rule'];\n        this.errors.name = this.language['Enter_A_Value'];\n        this.errors.shortTimer = this.language['Enter_A_Value'];\n        this.errors.longTimer = this.language['Enter_A_Value'];\n        this.errors.name = this.language['Please enter value between 4 and 20 characters long'];\n        this.errors.name = this.language['Name_Validation_dial_new'];\n        this.errors.shortTimer = this.language['Please enter a value greater than or equal to 1'];\n        this.errors.shortTimer = this.language['Please enter a value less than or equal to 16'];\n        this.errors.shortTimer = this.language['Number_Validation_Dial_New'];\n        this.errors.longTimer = this.language['Digit_Validation_Dial_New'];\n        this.errors.longTimer = this.language['Value_Hint'];\n        this.setTitle(this.router.url);\n        // this.errorInfo = this.language['Access Denied'];\n      });\n\n      this.setTitle(this.router.url);\n      this.routerState$ = this.activatedRoute.paramMap.pipe(takeUntil(this.unSubscribeParam$), map(() => window.history.state));\n      this.routerState$.subscribe(state => {\n        if (state && state[`dialPlanObj`] !== null && state[`dialPlanObj`] !== undefined) {\n          this.dialPlanObj = state[`dialPlanObj`];\n          this.dialPlanFormGroup.patchValue(this.dialPlanObj);\n          this.nameDisbable = true;\n        }\n      });\n      let scopes = this.sso.getScopes();\n      if (!this.router.url.includes('cco-foundation') && !this.router.url.includes('cco/services/service-profiles/dial-plan')) {\n        if (environment.VALIDATE_SCOPE) {\n          scopes['cloud.rbac.csc.netops.config.dial_plan'] = scopes['cloud.rbac.csc.netops.config.dial_plan'] ? scopes['cloud.rbac.csc.netops.config.dial_plan'] : [];\n          if (scopes && scopes['cloud.rbac.csc.netops.config.dial_plan'] && scopes['cloud.rbac.csc.netops.config.dial_plan'].indexOf('write') !== -1) {\n            this.hasWriteAccess = true;\n            this.hasScopeAccess = true;\n          }\n        } else {\n          this.hasWriteAccess = true;\n          this.hasScopeAccess = true;\n        }\n      } else if (this.router.url.includes('cco/services/service-profiles/dial-plan')) {\n        if (environment.VALIDATE_SCOPE) {\n          if ((_a = scopes['cloud.rbac.coc.services.serviceprofiles.rgdialplans']) === null || _a === void 0 ? void 0 : _a.length) {\n            this.hasScopeAccess = true;\n          }\n          if (scopes && ((_b = scopes['cloud.rbac.coc.services.serviceprofiles.rgdialplans']) === null || _b === void 0 ? void 0 : _b.includes('write'))) {\n            this.hasWriteAccess = true;\n          }\n        } else {\n          this.hasWriteAccess = true;\n          this.hasScopeAccess = true;\n        }\n      } else {\n        if (environment.VALIDATE_SCOPE) {\n          scopes['cloud.rbac.foundation.configurations'] = scopes['cloud.rbac.foundation.configurations'] ? scopes['cloud.rbac.foundation.configurations'] : [];\n          if (scopes && scopes['cloud.rbac.foundation.configurations'].includes('write')) {\n            this.hasWriteAccess = true;\n            this.hasScopeAccess = true;\n          }\n        } else {\n          this.hasWriteAccess = true;\n          this.hasScopeAccess = true;\n        }\n      }\n      if (!this.hasScopeAccess) {\n        this.sso.setPageAccess(false);\n        return;\n      }\n    }\n    ngAfterViewInit() {\n      // this.nameRef.nativeElement.focus();\n      // this.validateTimer();\n      // this.validateRules();\n    }\n    ngOnDestroy() {\n      this.languageSubject.unsubscribe();\n      this.unSubscribeParam$.next();\n      this.unSubscribeParam$.complete();\n    }\n    /**\r\n     * @description - Method to create dial plan form group.\r\n     */\n    createDialPlanFormGroup() {\n      this.dialPlanFormGroup = this.formBuilder.group({\n        name: [null, [Validators.required, Validators.maxLength(20), Validators.minLength(4), Validators.pattern('/^[a-zA-Z0-9_\\s-]+$/')]],\n        description: null,\n        shortTimer: [null, [Validators.required, Validators.maxLength(2), Validators.max(16), Validators.min(1)]],\n        longTimer: [null, [Validators.required, Validators.maxLength(2), Validators.max(20), Validators.min(4)]],\n        rules: [null, Validators.required]\n      });\n    }\n    /**\r\n     * @description - Method to validate timer.\r\n     */\n    validateTimer() {\n      this.dialPlanFormGroup.get('longTimer').valueChanges.subscribe(value => {\n        if (value && Number(value) < this.shortTimer.value) {\n          this.longTimer.setErrors({\n            exceedsError: true\n          });\n        }\n      });\n    }\n    /**\r\n     * @description - Method to validate timer.\r\n     */\n    validateRules() {\n      this.dialPlanFormGroup.get('rules').valueChanges.subscribe(value => {\n        if (value && !value.startsWith('^', 0)) {\n          this.rules.setErrors({\n            invalidStartRule: true\n          });\n        } else if (value && value.endsWith('^')) {\n          this.rules.setErrors({\n            invalidEndRule: true\n          });\n        }\n      });\n    }\n    /**\r\n     * @description - Method to go back.\r\n     * @param - { any }.\r\n     */\n    goBack(data) {\n      this.input = {\n        name: '',\n        description: '',\n        shortTimer: '',\n        longTimer: '',\n        rules: ''\n      };\n      this.onClose.emit('close');\n      /* this.sso.redirectByUrl([\r\n        `support/netops-management/configuration/dial-plan`,\r\n        `./cco/operations/cco-system-operations/sub-profile`,\r\n        `/cco-foundation/foundation-configuration/configuration-prerequisites/dial-plan`,\r\n        `./cco/operations/cco-subscriber-operations/configurations/dial-plan`,\r\n      ]); */\n      //this.router.navigate(['/support/netops-management/configuration/dial-plan'], {});\n      // const goBackUrl = '/support/netops-management/configuration/dial-plan';\n      // this.router.navigateByUrl('/support/dummy', { skipLocationChange: true }).then(() => {\n      //   this.router.navigate([goBackUrl], {\n      //     state: {\n      //       dialPlanObj: data ? data : null\n      //     }\n      //   });\n      // });\n    }\n    /**\r\n     * @descriptioin - Method to trigger submit.\r\n     */\n    onSubmit() {\n      // if (!this.dialPlanFormGroup.valid) {\n      //   for (const key of Object.keys(this.dialPlanFormGroup.controls)) {\n      //     if (this.dialPlanFormGroup.controls[key].invalid) {\n      //       const invalidControl = this.el.nativeElement.querySelector('[formcontrolname=\"' + key + '\"]');\n      //       invalidControl.focus();\n      //       break;\n      //     }\n      //   }\n      //   return;\n      // }\n      // this.goBack(this.constructDialPad());\n    }\n    verifyName() {\n      this.error = false;\n      this.errors.name = '';\n      this.valueLessShort = false;\n      if (!this.input['name']) {\n        this.errors.name = this.language['Enter_A_Value'];\n        this.error = true;\n        return;\n      }\n      let len = this.input['name'].length;\n      if (len < 4 || len > 20) {\n        this.errors.name = this.language['Number_hint'];\n        this.error = true;\n        return;\n      }\n      if (!this.regexObj['name'].test(this.input['name'])) {\n        this.errors.name = this.language['Name_Validation_dial_new'];\n        this.error = true;\n        return;\n      }\n    }\n    verifyShorTimer() {\n      this.error = false;\n      this.errors.shortTimer = '';\n      this.valueLessShort = false;\n      if (!this.input['shortTimer']) {\n        this.errors.shortTimer = this.language['Enter_A_Value'];\n        this.error = true;\n        return;\n      }\n      if (this.input['shortTimer'].length < 1) {\n        this.errors.shortTimer = this.language['Please enter a value greater than or equal to 1'];\n        this.error = true;\n        return;\n      }\n      if (this.input['shortTimer'].length > 16) {\n        this.errors.shortTimer = this.language['Value_Hint_Max'];\n        this.error = true;\n        return;\n      }\n    }\n    verifyLongimer() {\n      this.error = false;\n      this.errors.longTimer = '';\n      this.valueLessShort = false;\n      if (!this.input['longTimer']) {\n        this.errors.longTimer = this.language['Enter_A_Value'];\n        this.error = true;\n        return;\n      }\n      // if (this.input['longTimer'] < 4) {\n      //   this.errors.longTimer = 'Please enter a value greater than or equal to 4';\n      //   this.error = true;\n      //   if (this.input['longTimer'] <= this.input['shortTimer'])this.valueLessShort = true\n      //   return;\n      // }\n      if (this.input['longTimer'] <= this.input['shortTimer']) {\n        this.errors.longTimer = this.language['Digit_Validation_Dial_New'];\n        this.error = true;\n        if (this.input['longTimer'] < 4) this.valueLessShort = true;\n        return;\n      }\n      if (this.input['longTimer'] > 20) {\n        this.errors.longTimer = this.language['Name_Validation2_dial_new'];\n        this.error = true;\n        return;\n      }\n    }\n    verifyRules() {\n      this.error = false;\n      this.errors.shortTimer = '';\n      this.valueLessShort = false;\n      if (!this.input['rules'].startsWith(\"^\")) {\n        this.errors.rules = this.language['Rules_Validation'];\n        this.error = true;\n        return;\n      }\n      if (this.input['rules'].endsWith(\"^\")) {\n        this.errors.rules = this.language['Rules_Validation2'];\n        this.error = true;\n        return;\n      }\n      if (!this.input['rules'].match(\"^\\\\^[^\\\\|\\\\^]*(\\\\|\\\\^[^\\\\|\\\\^]*)*\\\\|?$\")) {\n        this.errors.rules = this.language['Invalid Rule'];\n        this.error = true;\n        return;\n      }\n    }\n    nameSpaceNotAlloed(e) {\n      var _a;\n      this.isEmptySpace = ((_a = e.target.value) === null || _a === void 0 ? void 0 : _a.trim().length) == 0;\n    }\n    doSubmit() {\n      this.error = false;\n      this.errors = {\n        name: '',\n        descriptioin: '',\n        shortTimer: '',\n        longTimer: '',\n        rules: ''\n      };\n      this.valueLessShort = false;\n      if (!this.input['name']) {\n        this.errors.name = this.language['Enter_A_Value'];\n        this.error = true;\n        return;\n      }\n      if (!this.input['shortTimer']) {\n        this.errors.shortTimer = this.language['Enter_A_Value'];\n        this.error = true;\n      }\n      if (!this.input['longTimer']) {\n        this.errors.longTimer = this.language['Enter_A_Value'];\n        this.error = true;\n      }\n      if (!this.input['rules'].startsWith(\"^\")) {\n        this.errors.rules = this.language['Rules_Validation'];\n        this.error = true;\n        return;\n      }\n      let len = this.input['name'].length;\n      if (this.input['name'] && len < 4 || len > 20) {\n        this.errors.name = this.language['Please enter value between 4 and 20 characters long'];\n        this.error = true;\n        return;\n      }\n      if (this.input['name'] && !this.regexObj['name'].test(this.input['name'])) {\n        this.errors.name = this.language['Name_Validation_dial_new'];\n        this.error = true;\n        return;\n      }\n      if (this.input['shortTimer'] && this.input['shortTimer'] < 1) {\n        this.errors.shortTimer = this.language['Please enter a value greater than or equal to 1'];\n        this.error = true;\n        return;\n      }\n      if (this.input['shortTimer'] && this.input['shortTimer'] > 16) {\n        this.errors.shortTimer = this.language['Number_Validation_Dial_New'];\n        this.error = true;\n        return;\n      }\n      if (this.input['longTimer'] <= this.input['shortTimer']) {\n        this.errors.longTimer = this.language['Digit_Validation_Dial_New'];\n        this.error = true;\n        if (this.input['longTimer'] < 4) this.valueLessShort = true;\n        return;\n      }\n      if (this.input['longTimer'] && this.input['longTimer'] < 4) {\n        this.errors.longTimer = this.language['Value_Hint'];\n        this.error = true;\n        return;\n      }\n      if (this.input['longTimer'] && this.input['longTimer'] < this.input['shortTimer']) {\n        this.errors.longTimer = this.language['Digit_Validation_Dial_New'];\n        this.error = true;\n        return;\n      }\n      if (this.input['longTimer'] && this.input['longTimer'] > 20) {\n        this.errors.longTimer = this.language['Name_Validation2_dial_new'];\n        this.error = true;\n        return;\n      }\n      if (this.input['rules'].endsWith(\"^\")) {\n        this.errors.rules = this.language['Rules_Validation2'];\n        this.error = true;\n        return;\n      }\n      if (!this.input['rules'].match(\"^\\\\^[^\\\\|\\\\^]*(\\\\|\\\\^[^\\\\|\\\\^]*)*\\\\|?$\")) {\n        this.errors.rules = this.language['Invalid Rule'];\n        this.error = true;\n        return;\n      }\n      this.input['rules'] = this.input['rules'].toString().includes('|') ? this.input['rules'].toString().split('|') : this.input['rules'].toString().split();\n      this.btnDisabled = false;\n      this.id = this.Id;\n      if (this.id) {\n        delete this.input['_id'];\n        let url = `${environment[`SUPPORT_URL`]}/netops-dp/dial-plan/${this.id}?${this.sso.getOrg(this.orgId)}_id=${this.id}`;\n        this.http.put(url, this.input).subscribe(json => {\n          this.input = {\n            name: '',\n            description: '',\n            shortTimer: '',\n            longTimer: '',\n            rules: ''\n          };\n          this.onClose.emit('submit');\n          //this.router.navigate(['/support/netops-management/configuration/dial-plan']);\n        }, err => {\n          if (this.input.rules) {\n            if (this.input.rules.length > 1) {\n              this.input.rules = this.input.rules.join(\"|\");\n            } else {\n              this.input.rules = this.input.rules.toString(\"\");\n            }\n          }\n          this.input = this.input;\n          this.pageErrorHandle(err);\n        });\n      } else {\n        let url = `${environment[`SUPPORT_URL`]}/netops-dp/dial-plan?${this.sso.getOrg(this.orgId)}`;\n        this.http.post(url, this.input).subscribe(json => {\n          this.input = {\n            name: '',\n            description: '',\n            shortTimer: '',\n            longTimer: '',\n            rules: ''\n          };\n          this.onClose.emit('submit');\n          //this.router.navigate(['/support/netops-management/configuration/dial-plan']);\n        }, err => {\n          if (this.input.rules) {\n            if (this.input.rules.length > 1) {\n              this.input.rules = this.input.rules.join(\"|\");\n            } else {\n              this.input.rules = this.input.rules.toString(\"\");\n            }\n          }\n          this.input = this.input;\n          this.pageErrorHandle(err);\n        });\n      }\n    }\n    /**\r\n     * @description - Method to construct dialpad.\r\n     */\n    constructDialPad() {\n      const dialPlanObj = this.dialPlanFormGroup.getRawValue();\n      this.dialPlanObj.name = dialPlanObj.name.toString().trim();\n      this.dialPlanObj.description = dialPlanObj.description !== null ? dialPlanObj.description.toString().trim() : null;\n      this.dialPlanObj.shortTimer = Number(dialPlanObj.shortTimer);\n      this.dialPlanObj.longTimer = Number(dialPlanObj.longTimer);\n      this.dialPlanObj.rules = dialPlanObj.rules.toString().includes('|') ? dialPlanObj.rules.toString().split('|') : dialPlanObj.rules.toString().split();\n      return this.dialPlanObj;\n    }\n    get name() {\n      return this.dialPlanFormGroup.get('name');\n    }\n    get description() {\n      return this.dialPlanFormGroup.get('description');\n    }\n    get shortTimer() {\n      return this.dialPlanFormGroup.get('shortTimer');\n    }\n    get longTimer() {\n      return this.dialPlanFormGroup.get('longTimer');\n    }\n    get rules() {\n      return this.dialPlanFormGroup.get('rules');\n    }\n    viewDialPlan() {\n      let url = `${environment[`SUPPORT_URL`]}/netops-dp/dial-plan/${this.id}?${this.sso.getOrg(this.orgId)}_id=${this.id}`;\n      this.http.get(url).subscribe(json => {\n        if (json.rules) {\n          if (json.rules.length > 1) {\n            json.rules = json.rules.join(\"|\");\n          } else {\n            json.rules = json.rules.toString(\"\");\n          }\n        }\n        this.input = json;\n        delete this.input.orgId;\n      }, err => {\n        this.pageErrorHandle(err);\n      });\n    }\n    closeAlert() {\n      this.error = false;\n      this.success = false;\n    }\n    showError(msg) {\n      this.closeAlert();\n      this.errorInfo = msg;\n      this.error = true;\n    }\n    pageErrorHandle(err) {\n      this.btnDisabled = false;\n      if (err.status == 401) {\n        this.errorInfo = this.language['Access Denied'];\n      } else {\n        this.errorInfo = this.sso.pageErrorHandle(err);\n      }\n      this.closeAlert();\n      this.error = true;\n      $(\"html, body\").animate({\n        scrollTop: 0\n      }, \"slow\");\n    }\n  }\n  DialPlanNewComponent.ɵfac = function DialPlanNewComponent_Factory(t) {\n    return new (t || DialPlanNewComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.HttpClient), i0.ɵɵdirectiveInject(i5.SsoAuthService), i0.ɵɵdirectiveInject(i6.Title));\n  };\n  DialPlanNewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DialPlanNewComponent,\n    selectors: [[\"app-dial-plan-new\"]],\n    viewQuery: function DialPlanNewComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nameRef = _t.first);\n      }\n    },\n    inputs: {\n      editModalInput: \"editModalInput\",\n      Id: \"Id\"\n    },\n    outputs: {\n      onClose: \"onClose\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 63,\n    vars: 53,\n    consts: [[\"class\", \"w-100 alert alert-danger fade show margin-top-20\", 4, \"ngIf\"], [\"id\", \"dial-plan-form\", \"novalidate\", \"\", 1, \"form-group\", \"ccl-form\", 3, \"customDigitCheck\", \"ngSubmit\"], [\"myForm\", \"ngForm\"], [1, \"form-group\", \"row\", \"ccl-form\", \"required\"], [\"for\", \"name\", 1, \"col-md-12\", \"col-form-label\"], [1, \"error\"], [1, \"col-md-12\", 3, \"ngClass\"], [\"type\", \"text\", \"id\", \"name\", \"name\", \"name\", \"customMin\", \"4\", \"customMax\", \"20\", \"required\", \"\", \"aria-required\", \"true\", \"aria-describedby\", \"name-error\", \"aria-invalid\", \"true\", \"autocomplete\", \"new-password\", \"pattern\", \"^[a-zA-Z0-9_\\\\s]+$\", \"trimSpace\", \"\", 1, \"form-control\", 3, \"placeholder\", \"ngModel\", \"disabled\", \"formValue\", \"ngModelChange\"], [\"name\", \"ngModel\"], [\"class\", \"pl-3\", \"id\", \"name-error\", 4, \"ngIf\"], [\"class\", \"\", \"id\", \"name-error\", 4, \"ngIf\"], [1, \"form-group\", \"row\", \"ccl-form\"], [\"for\", \"description\", 1, \"col-md-12\", \"col-form-label\"], [1, \"col-md-12\"], [\"type\", \"text\", \"name\", \"description\", \"maxlength\", \"100\", \"id\", \"dail-description\", \"trimSpace\", \"\", 1, \"form-control\", 3, \"placeholder\", \"ngModel\", \"formValue\", \"ngModelChange\"], [\"for\", \"digitShortTimer\", 1, \"col-md-12\", \"col-form-label\"], [\"id\", \"digitShortTimer\", \"type\", \"number\", \"required\", \"\", \"customNumMin\", \"1\", \"min\", \"1\", \"customNumMax\", \"16\", \"customNeg\", \"\", \"name\", \"digitShortTimer\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"aria-required\", \"true\", \"aria-describedby\", \"digitShortTimer-error\", \"aria-invalid\", \"true\", \"autocomplete\", \"new-password\", 1, \"form-control\", 3, \"ngModel\", \"title\", \"ngModelChange\"], [\"digitShortTimer\", \"ngModel\"], [\"class\", \"errorMessage\", \"id\", \"digitShortTimer-error\", 4, \"ngIf\"], [\"for\", \"digitlongTimer\", 1, \"col-md-12\", \"col-form-label\"], [\"id\", \"digitlongTimer\", \"type\", \"number\", \"required\", \"\", \"customNumMin\", \"4\", \"min\", \"1\", \"customNumMax\", \"20\", \"customNeg\", \"\", \"name\", \"digitlongTimer\", \"data-toggle\", \"tooltip\", \"data-placement\", \"bottom\", \"aria-required\", \"true\", \"aria-describedby\", \"digitlongTimer-error\", \"aria-invalid\", \"true\", \"autocomplete\", \"new-password\", 1, \"form-control\", 3, \"ngModel\", \"title\", \"ngModelChange\"], [\"digitlongTimer\", \"ngModel\"], [\"class\", \"errorMessage\", \"id\", \"digitlongTimer-error\", 4, \"ngIf\"], [\"for\", \"Rules\", 1, \"col-md-12\", \"col-form-label\"], [1, \"col-md-12\", \"rules-textarea\", 3, \"ngClass\"], [\"id\", \"Rules\", \"type\", \"number\", \"required\", \"\", \"customNeg\", \"\", \"name\", \"Rules\", \"data-toggle\", \"tooltip\", \"customStartsWith\", \"^\", \"customEndsWith\", \"^\", \"data-placement\", \"bottom\", \"aria-required\", \"true\", \"aria-describedby\", \"Rules-error\", \"aria-invalid\", \"true\", \"autocomplete\", \"new-password\", \"trimSpace\", \"\", 1, \"form-control\", 3, \"ngModel\", \"placeholder\", \"title\", \"pattern\", \"formValue\", \"ngModelChange\"], [\"Rules\", \"ngModel\"], [\"class\", \"errorMessage\", \"id\", \"Rules-error\", 4, \"ngIf\"], [1, \"row\", \"mt-3\"], [1, \"col-12\"], [\"role\", \"toolbar\", \"aria-label\", \"Toolbar with button groups\", 1, \"btn-toolbar\"], [\"role\", \"group\", \"aria-label\", \"First group\", 1, \"btn-group\", \"mr-2\"], [\"type\", \"submit\", \"class\", \"btn btn-primary btn-sm br-26 px-3\", \"id\", \"submit-btn\", 4, \"ngIf\"], [\"type\", \"button\", \"id\", \"cancel-btn\", 1, \"btn-default\", \"btn-dft\", 3, \"click\"], [1, \"w-100\", \"alert\", \"alert-danger\", \"fade\", \"show\", \"margin-top-20\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", \"id\", \"err-mss\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [\"id\", \"name-error\", 1, \"pl-3\"], [\"id\", \"name-error\", 1, \"\"], [\"id\", \"digitShortTimer-error\", 1, \"errorMessage\"], [\"id\", \"digitlongTimer-error\", 1, \"errorMessage\"], [\"id\", \"Rules-error\", 1, \"errorMessage\"], [\"type\", \"submit\", \"id\", \"submit-btn\", 1, \"btn\", \"btn-primary\", \"btn-sm\", \"br-26\", \"px-3\"]],\n    template: function DialPlanNewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r23 = i0.ɵɵgetCurrentView();\n        i0.ɵɵtemplate(0, DialPlanNewComponent_div_0_Template, 6, 1, \"div\", 0);\n        i0.ɵɵelementStart(1, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function DialPlanNewComponent_Template_form_ngSubmit_1_listener() {\n          i0.ɵɵrestoreView(_r23);\n          const _r1 = i0.ɵɵreference(2);\n          return _r1.form.valid && ctx.doSubmit();\n        });\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"label\", 4);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementStart(6, \"span\", 5);\n        i0.ɵɵtext(7, \"*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵelementStart(9, \"input\", 7, 8);\n        i0.ɵɵlistener(\"ngModelChange\", function DialPlanNewComponent_Template_input_ngModelChange_9_listener($event) {\n          return ctx.input.name = $event;\n        })(\"ngModelChange\", function DialPlanNewComponent_Template_input_ngModelChange_9_listener($event) {\n          return ctx.nameSpaceNotAlloed($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, DialPlanNewComponent_span_11_Template, 2, 1, \"span\", 9);\n        i0.ɵɵtemplate(12, DialPlanNewComponent_span_12_Template, 2, 1, \"span\", 10);\n        i0.ɵɵtemplate(13, DialPlanNewComponent_span_13_Template, 2, 1, \"span\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 11);\n        i0.ɵɵelementStart(15, \"label\", 12);\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 13);\n        i0.ɵɵelementStart(18, \"input\", 14);\n        i0.ɵɵlistener(\"ngModelChange\", function DialPlanNewComponent_Template_input_ngModelChange_18_listener($event) {\n          return ctx.input.description = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 3);\n        i0.ɵɵelementStart(20, \"label\", 15);\n        i0.ɵɵtext(21);\n        i0.ɵɵelementStart(22, \"span\", 5);\n        i0.ɵɵtext(23, \"*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 6);\n        i0.ɵɵelementStart(25, \"input\", 16, 17);\n        i0.ɵɵlistener(\"ngModelChange\", function DialPlanNewComponent_Template_input_ngModelChange_25_listener($event) {\n          return ctx.input.shortTimer = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(27, DialPlanNewComponent_div_27_Template, 2, 1, \"div\", 18);\n        i0.ɵɵtemplate(28, DialPlanNewComponent_div_28_Template, 2, 1, \"div\", 18);\n        i0.ɵɵtemplate(29, DialPlanNewComponent_div_29_Template, 2, 1, \"div\", 18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"div\", 3);\n        i0.ɵɵelementStart(31, \"label\", 19);\n        i0.ɵɵtext(32);\n        i0.ɵɵelementStart(33, \"span\", 5);\n        i0.ɵɵtext(34, \"*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"div\", 6);\n        i0.ɵɵelementStart(36, \"input\", 20, 21);\n        i0.ɵɵlistener(\"ngModelChange\", function DialPlanNewComponent_Template_input_ngModelChange_36_listener($event) {\n          return ctx.input.longTimer = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(38, DialPlanNewComponent_div_38_Template, 2, 1, \"div\", 22);\n        i0.ɵɵtemplate(39, DialPlanNewComponent_div_39_Template, 2, 1, \"div\", 22);\n        i0.ɵɵtemplate(40, DialPlanNewComponent_div_40_Template, 2, 1, \"div\", 22);\n        i0.ɵɵtemplate(41, DialPlanNewComponent_div_41_Template, 2, 1, \"div\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"div\", 3);\n        i0.ɵɵelementStart(43, \"label\", 23);\n        i0.ɵɵtext(44);\n        i0.ɵɵelementStart(45, \"span\", 5);\n        i0.ɵɵtext(46, \"*\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"div\", 24);\n        i0.ɵɵelementStart(48, \"textarea\", 25, 26);\n        i0.ɵɵlistener(\"ngModelChange\", function DialPlanNewComponent_Template_textarea_ngModelChange_48_listener($event) {\n          return ctx.input.rules = $event;\n        });\n        i0.ɵɵtext(50, \"        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(51, DialPlanNewComponent_div_51_Template, 2, 1, \"div\", 27);\n        i0.ɵɵtemplate(52, DialPlanNewComponent_div_52_Template, 2, 1, \"div\", 27);\n        i0.ɵɵtemplate(53, DialPlanNewComponent_div_53_Template, 2, 1, \"div\", 22);\n        i0.ɵɵtemplate(54, DialPlanNewComponent_div_54_Template, 2, 1, \"div\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"div\", 28);\n        i0.ɵɵelementStart(56, \"div\", 29);\n        i0.ɵɵelementStart(57, \"div\", 30);\n        i0.ɵɵelementStart(58, \"div\", 31);\n        i0.ɵɵtemplate(59, DialPlanNewComponent_button_59_Template, 2, 1, \"button\", 32);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(60, \"div\", 31);\n        i0.ɵɵelementStart(61, \"button\", 33);\n        i0.ɵɵlistener(\"click\", function DialPlanNewComponent_Template_button_click_61_listener() {\n          return ctx.goBack(null);\n        });\n        i0.ɵɵtext(62);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n        const _r2 = i0.ɵɵreference(10);\n        const _r6 = i0.ɵɵreference(26);\n        const _r10 = i0.ɵɵreference(37);\n        const _r15 = i0.ɵɵreference(49);\n        i0.ɵɵproperty(\"ngIf\", ctx.error && ctx.errorInfo);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"customDigitCheck\", i0.ɵɵpureFunction0(44, _c1));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"\", ctx.language.Name, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(45, _c2, ((_r2.errors == null ? null : _r2.errors.required) || (_r2.errors == null ? null : _r2.errors.pattern) || (_r2.errors == null ? null : _r2.errors.customMin) || (_r2.errors == null ? null : _r2.errors.customMax) || ctx.isEmptySpace) && (_r1.submitted || _r2.touched) ? \"errorMessage\" : \"\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.language.Name);\n        i0.ɵɵproperty(\"ngModel\", ctx.input.name)(\"disabled\", ctx.nameDisbable)(\"formValue\", ctx.input);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", (_r2.touched || _r1.submitted) && (_r2.errors == null ? null : _r2.errors.required) || ctx.isEmptySpace);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (_r2.touched || _r1.submitted) && (_r2.errors == null ? null : _r2.errors.pattern));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (_r2.touched || _r1.submitted) && ((_r2.errors == null ? null : _r2.errors.customMin) || (_r2.errors == null ? null : _r2.errors.customMax)));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate2(\"\", ctx.language.description, \" (\", ctx.language.Optional, \")\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.language.description);\n        i0.ɵɵproperty(\"ngModel\", ctx.input.description)(\"formValue\", ctx.input);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.language.Digit_shortimer, \"(s) \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(47, _c2, ((_r6.errors == null ? null : _r6.errors.required) || (_r6.errors == null ? null : _r6.errors.customNumMin) || (_r6.errors == null ? null : _r6.errors.customNeg)) && (_r1.submitted || _r6.touched) ? \"errorMessage\" : \"\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"title\", ctx.language.Digit_shortimer);\n        i0.ɵɵproperty(\"ngModel\", ctx.input.shortTimer);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", (_r6.errors == null ? null : _r6.errors.required) && (_r1.submitted || _r6.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((_r6.errors == null ? null : _r6.errors.customNumMin) || (_r6.errors == null ? null : _r6.errors.customNeg)) && (_r1.submitted || _r6.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((_r6.errors == null ? null : _r6.errors.customNumMax) || (_r6.errors == null ? null : _r6.errors.customNeg)) && (_r1.submitted || _r6.touched));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.language.Digit_longimer, \"(s) \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(49, _c2, ((_r10.errors == null ? null : _r10.errors.required) || (_r10.errors == null ? null : _r10.errors.longDigitTimer) || (_r10.errors == null ? null : _r10.errors.customNumMin) || (_r10.errors == null ? null : _r10.errors.customNeg)) && (_r1.submitted || _r10.touched) ? \"errorMessage\" : \"\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"title\", ctx.language.Digit_longimer);\n        i0.ɵɵproperty(\"ngModel\", ctx.input.longTimer);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", (_r10.errors == null ? null : _r10.errors.required) && (_r1.submitted || _r10.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (_r10.errors == null ? null : _r10.errors.longDigitTimer) && (_r1.submitted || _r10.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((_r10.errors == null ? null : _r10.errors.customNumMin) || (_r10.errors == null ? null : _r10.errors.customNeg)) && (_r1.submitted || _r10.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((_r10.errors == null ? null : _r10.errors.customNumMax) || (_r10.errors == null ? null : _r10.errors.customNeg)) && (_r1.submitted || _r10.touched));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.language.Rules, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(51, _c2, ((_r15.errors == null ? null : _r15.errors.required) || (_r15.errors == null ? null : _r15.errors.pattern)) && (_r1.submitted || _r15.touched) ? \"errorMessage\" : \"\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate1(\"placeholder\", \"\", ctx.language.RegEx_Pattern_eg, \"::^911n|^411|^[2-9][0-9]{6}\");\n        i0.ɵɵpropertyInterpolate1(\"title\", \"\", ctx.language.RegEx_Pattern_eg, \"::^911n|^411|^[2-9][0-9]{6}\");\n        i0.ɵɵproperty(\"ngModel\", ctx.input.rules)(\"pattern\", ctx.rulesPattern)(\"formValue\", ctx.input);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", (_r15.errors == null ? null : _r15.errors.required) && (_r1.submitted || _r15.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (_r15.errors == null ? null : _r15.errors.customStartsWith) && (_r1.submitted || _r15.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (_r15.errors == null ? null : _r15.errors.customEndsWith) && (_r1.submitted || _r15.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (_r15.errors == null ? null : _r15.errors.pattern) && (_r1.submitted || _r15.touched));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasWriteAccess);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.cancel, \" \");\n      }\n    },\n    directives: [i7.NgIf, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm, i8.CustomDigitCheckDirective, i7.NgClass, i2.DefaultValueAccessor, i9.CustomMinDirective, i10.CustomMaxDirective, i2.RequiredValidator, i2.PatternValidator, i11.TrimSpaceDirective, i2.NgControlStatus, i2.NgModel, i2.MaxLengthValidator, i2.MinValidator, i2.NumberValueAccessor, i12.CustomNumMinDirective, i13.CustomNumMaxDirective, i14.CustomNegDirective, i15.CustomStartsWithDirective, i16.CustomEndsWithDirective],\n    styles: [\".btn-orange[_ngcontent-%COMP%]{background-color:#1d9e74;border-color:#1d9e74;color:#fff}.br-26[_ngcontent-%COMP%]{border-radius:26px}input[_ngcontent-%COMP%], select[_ngcontent-%COMP%]{border-radius:20px;background:#F8F8FA}.form-control.is-valid[_ngcontent-%COMP%], .form-control.is-invalid[_ngcontent-%COMP%]{background-image:none;padding-right:inherit}.form-control[_ngcontent-%COMP%]:disabled{cursor:not-allowed}.rules-textarea[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%]{min-height:60px!important;height:auto}\"]\n  });\n  return DialPlanNewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}