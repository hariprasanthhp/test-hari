{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { Subject, forkJoin, of } from 'rxjs';\nimport { DataTableDirective } from 'angular-datatables';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"src/app/sys-admin/services/common.service\";\nimport * as i3 from \"@angular/platform-browser\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"src/app/shared/services/sso-auth.service\";\nimport * as i6 from \"src/app/flow-config/services/endpoint-management.service\";\nimport * as i7 from \"@angular/common/http\";\nimport * as i8 from \"src/app/flow-config/services/network-devices-api.service\";\nimport * as i9 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"angular-datatables\";\nconst _c0 = [\"infoModal\"];\nfunction DevicesStatusComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelementStart(1, \"div\", 8);\n    i0.ɵɵelementStart(2, \"div\", 9);\n    i0.ɵɵelementStart(3, \"span\", 10);\n    i0.ɵɵtext(4, \"Loading...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DevicesStatusComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵelementStart(1, \"div\", 12);\n    i0.ɵɵelementStart(2, \"label\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 14);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 12);\n    i0.ɵɵelementStart(7, \"label\", 13);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 14);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 15);\n    i0.ɵɵelementStart(12, \"label\", 13);\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 14);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"discoveredCount\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.counts.discoveredCount);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"mappedCount\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.counts.mappedCount);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"mappedPercent\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.mappedPercentage, \"%\");\n  }\n}\nfunction DevicesStatusComponent_tbody_17_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 17);\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵelementStart(2, \"a\", 18);\n    i0.ɵɵlistener(\"click\", function DevicesStatusComponent_tbody_17_tr_1_Template_a_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const item_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.routeToDevicePlaceholder(item_r7.device_ip);\n    });\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"td\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"td\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate(\"id\", item_r7._id);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r7.device_ip || \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r7.flow_rate || \"0\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r7.packet_rate || \"0\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r7.virtual_packet_rate ? ctx_r6.formatPacket(item_r7.virtual_packet_rate) : \"0 pps\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r7.virtual_bit_rate ? ctx_r6.formatBytes(item_r7.virtual_bit_rate) : \"0 bps\");\n  }\n}\nfunction DevicesStatusComponent_tbody_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵtemplate(1, DevicesStatusComponent_tbody_17_tr_1_Template, 12, 6, \"tr\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.deviceStatusData);\n  }\n}\nfunction DevicesStatusComponent_tbody_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵelementStart(2, \"td\", 19);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r3.language[\"No data available in table\"]);\n  }\n}\nfunction DevicesStatusComponent_ng_template_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵelementStart(1, \"h4\", 21);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function DevicesStatusComponent_ng_template_19_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.closeModal();\n    });\n    i0.ɵɵelement(4, \"span\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 24);\n    i0.ɵɵelementStart(6, \"div\", 25);\n    i0.ɵɵelementStart(7, \"p\", 26);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 27);\n    i0.ɵɵelementStart(10, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function DevicesStatusComponent_ng_template_19_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.closeModal();\n    });\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.infoTitle);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r5.infoBody);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.language[\"Okay\"], \" \");\n  }\n}\nexport let DevicesStatusComponent = /*#__PURE__*/(() => {\n  class DevicesStatusComponent {\n    constructor(translateService, commonOrgService, titleService, router, sso, endpointManagementService, http, networkDeviceApiService, dialogService) {\n      this.translateService = translateService;\n      this.commonOrgService = commonOrgService;\n      this.titleService = titleService;\n      this.router = router;\n      this.sso = sso;\n      this.endpointManagementService = endpointManagementService;\n      this.http = http;\n      this.networkDeviceApiService = networkDeviceApiService;\n      this.dialogService = dialogService;\n      this.statusTableOptions = {\n        pageLength: 10,\n        pagingType: 'full_numbers',\n        stateSave: false,\n        order: [0, 'asc'],\n        columnDefs: [{\n          targets: [1, 2, 3, 4],\n          orderable: false\n        }],\n        lengthChange: true,\n        ordering: true,\n        searching: true\n      };\n      this.dtTrigger = new Subject();\n      this.counts = {\n        discoveredCount: null,\n        mappedCount: null\n      };\n      this.show = {\n        count: false,\n        loading: false\n      };\n      this.mappedPercentage = 0;\n      this.deviceStatusData = [];\n      this.language = this.translateService.defualtLanguage;\n      const url = this.router.url;\n      this.commonOrgService.closeAlert();\n      this.MODULE = this.sso.getRedirectModule(url);\n      this.ORG_ID = this.sso.getOrganizationID(url);\n      this.translateSub = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.setTableOptions('language');\n        this.titleService.setTitle(`${this.language['Bsp_Microsite_Status']} - ${this.language['devices']} - ${this.language['Network']} - ${this.language['flowconfiguration']} - ${this.MODULE === 'systemAdministration' ? this.language['System Administration'] : this.language['administration']} - ${this.language['Calix Cloud']}`);\n      });\n      this.titleService.setTitle(`${this.language['Bsp_Microsite_Status']} - ${this.language['devices']} - ${this.language['Network']} - ${this.language['flowconfiguration']} - ${this.MODULE === 'systemAdministration' ? this.language['System Administration'] : this.language['administration']} - ${this.language['Calix Cloud']}`);\n    }\n    ngOnInit() {\n      this.getCounts();\n      this.getDeviceStatusList();\n    }\n    ngOnDestroy() {\n      if (this.dtTrigger) {\n        this.dtTrigger.unsubscribe();\n      }\n      if (this.translateSub) {\n        this.translateSub.unsubscribe();\n      }\n      if (this.countSub) {\n        this.countSub.unsubscribe();\n      }\n    }\n    getDeviceStatusList() {\n      this.show.loading = true;\n      this.getDeviceStatusListSub = this.networkDeviceApiService.DeviceStatusList(this.ORG_ID).subscribe(res => {\n        this.show.loading = false;\n        this.rerender();\n        if (res && res.metrics && res.metrics.length) {\n          this.deviceStatusData = res.metrics;\n          this.dtTrigger.next();\n        }\n      }, err => {\n        this.show.loading = false;\n        this.rerender();\n        this.pageErrorHandle(err);\n      });\n    }\n    getCounts() {\n      const responses = {};\n      responses['mappedCount'] = this.endpointManagementService.getMappedcount(this.ORG_ID).pipe(catchError(err => {\n        return of(err);\n      }));\n      responses['unmappedCount'] = this.endpointManagementService.getUnmappedcount(this.ORG_ID).pipe(catchError(err => {\n        return of(err);\n      }));\n      this.countSub = forkJoin(responses).subscribe(json => {\n        this.counts.discoveredCount = (json === null || json === void 0 ? void 0 : json.mappedCount) + (json === null || json === void 0 ? void 0 : json.unmappedCount);\n        this.counts.mappedCount = json === null || json === void 0 ? void 0 : json.mappedCount;\n        this.getMappedPercentage();\n        this.show.count = true;\n      });\n    }\n    getMappedPercentage() {\n      this.mappedPercentage = this.counts.mappedCount / this.counts.discoveredCount * 100;\n      this.mappedPercentage = this.mappedPercentage ? this.mappedPercentage.toFixed(2) : 0;\n    }\n    routeToDevicePlaceholder(deviceIp) {\n      this.router.navigate([`${this.MODULE}/devices-name-placeholder`], {\n        state: {\n          deviceIp: deviceIp\n        }\n      });\n    }\n    setTableOptions(type) {\n      this.statusTableOptions = {\n        pagingType: 'full_numbers',\n        order: [0, 'asc'],\n        columnDefs: [{\n          targets: [1, 2, 3, 4],\n          orderable: false\n        }],\n        stateSave: false,\n        pageLength: 10,\n        lengthChange: true,\n        ordering: true,\n        searching: true\n      };\n      this.tableLanguageOptions();\n      if (type && type == 'language') {\n        setTimeout(() => {\n          this.rerender();\n          // this.dataAvailable = true;\n          this.show.loading = false;\n        }, 200);\n      } else {\n        setTimeout(() => {\n          // this.dataAvailable = true;\n          this.show.loading = false;\n        }, 200);\n      }\n    }\n    rerender() {\n      var _a;\n      if (!((_a = this.dtElement) === null || _a === void 0 ? void 0 : _a.dtInstance)) return;\n      this.dtElement.dtInstance.then(dtInstance => {\n        dtInstance.destroy();\n        this.dtTrigger.next();\n      });\n    }\n    tableLanguageOptions() {\n      if (this.language.fileLanguage == 'fr') {\n        this.statusTableOptions.language = this.translateService.fr;\n      } else if (this.language.fileLanguage == 'es') {\n        this.statusTableOptions.language = this.translateService.es;\n      } else if (this.language.fileLanguage == 'de_DE') {\n        this.statusTableOptions.language = this.translateService.de_DE;\n      } else if (this.language.fileLanguage == 'en' && this.statusTableOptions.language) {\n        delete this.statusTableOptions.language;\n      }\n    }\n    openInfoModal() {\n      this.closeModal();\n      this.modalRef = this.dialogService.open(this.infoModal);\n    }\n    closeModal() {\n      if (this.modalRef) {\n        this.modalRef.close();\n      }\n    }\n    pageErrorHandle(err, title) {\n      var _a, _b, _c;\n      let errorInfo = '';\n      if (((_a = err === null || err === void 0 ? void 0 : err.error) === null || _a === void 0 ? void 0 : _a.code) === 404) {\n        return;\n      }\n      if (err.status == 400 || err.status == 417) {\n        if (err.status == 417 && ((_b = err === null || err === void 0 ? void 0 : err.error) === null || _b === void 0 ? void 0 : _b.message)) {\n          this.infoBody = (_c = err === null || err === void 0 ? void 0 : err.error) === null || _c === void 0 ? void 0 : _c.message;\n        } else {\n          this.infoBody = this.commonOrgService.pageInvalidRqstErrorHandle(err);\n        }\n        this.infoTitle = title ? title : 'Error';\n        this.openInfoModal();\n        this.show.loading = false;\n      } else {\n        if (err.status == 401) {\n          errorInfo = this.language['Access Denied'];\n        } else {\n          errorInfo = this.commonOrgService.pageErrorHandle(err);\n        }\n        this.commonOrgService.openErrorAlert(errorInfo);\n        this.commonOrgService.pageScrollTop();\n        this.show.loading = false;\n        setTimeout(() => {\n          this.commonOrgService.closeAlert();\n        }, 3000);\n      }\n    }\n    formatBytes(bits, decimals = 2) {\n      if (!+bits) return '0 Bits';\n      const k = 1000;\n      const dm = decimals < 0 ? 0 : decimals;\n      const sizes = ['Bits', 'Kbps', 'Mbps', 'Gbps', 'Tbps', 'Pbps', 'Ebps', 'Zbps', 'Ybps'];\n      const i = Math.floor(Math.log(bits) / Math.log(k));\n      return `${parseFloat((bits / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n    }\n    formatPacket(packets, decimals = 2) {\n      if (!+packets) return '0 pps';\n      const k = 1000;\n      const dm = decimals < 0 ? 0 : decimals;\n      const sizes = ['pps', 'Kpps', 'Mpps', 'Gpps', 'Tbps', 'Ppps', 'Epps', 'Zpps', 'Ypsps'];\n      const i = Math.floor(Math.log(packets) / Math.log(k));\n      return `${parseFloat((packets / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n    }\n  }\n  DevicesStatusComponent.ɵfac = function DevicesStatusComponent_Factory(t) {\n    return new (t || DevicesStatusComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.CommonService), i0.ɵɵdirectiveInject(i3.Title), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.SsoAuthService), i0.ɵɵdirectiveInject(i6.EndpointManagementService), i0.ɵɵdirectiveInject(i7.HttpClient), i0.ɵɵdirectiveInject(i8.NetworkDevicesApiService), i0.ɵɵdirectiveInject(i9.NgbModal));\n  };\n  DevicesStatusComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DevicesStatusComponent,\n    selectors: [[\"app-devices-status\"]],\n    viewQuery: function DevicesStatusComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(DataTableDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.infoModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dtElement = _t.first);\n      }\n    },\n    decls: 21,\n    vars: 15,\n    consts: [[\"class\", \"loader\", 4, \"ngIf\"], [\"class\", \"d-flex align-items-start w-100 my-3\", 4, \"ngIf\"], [1, \"row\"], [1, \"col-12\", \"col-lg-12\"], [\"width\", \"100%\", \"id\", \"statusDataTable\", \"datatable\", \"\", 1, \"table\", \"w-100\", 3, \"dtTrigger\", \"dtOptions\"], [4, \"ngIf\"], [\"infoModal\", \"\"], [1, \"loader\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"d-flex\", \"align-items-start\", \"w-100\", \"my-3\"], [1, \"border-left\", \"line-height-normal\", \"px-3\", \"mr-3\"], [1, \"stats-label\", \"mb-0\"], [1, \"stats-value\"], [1, \"border-left\", \"line-height-normal\", \"px-3\"], [3, \"id\", 4, \"ngFor\", \"ngForOf\"], [3, \"id\"], [1, \"primary\", \"cursor-pointer\", \"text-decoration-none\", \"text-break\", 3, \"click\"], [\"colspan\", \"5\", 1, \"no-data-available\"], [1, \"modal-header\"], [\"id\", \"modal-basic-title\", 1, \"modal-title\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\"], [1, \"modal-body\", \"modal-scrll\"], [1, \"w-100\"], [1, \"f-size-16px\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn-default\", \"primary\", \"px-3\", 3, \"click\"]],\n    template: function DevicesStatusComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DevicesStatusComponent_div_0_Template, 5, 0, \"div\", 0);\n        i0.ɵɵtemplate(1, DevicesStatusComponent_div_1_Template, 16, 6, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"table\", 4);\n        i0.ɵɵelementStart(5, \"thead\");\n        i0.ɵɵelementStart(6, \"tr\");\n        i0.ɵɵelementStart(7, \"th\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"th\");\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"th\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"th\");\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"th\");\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, DevicesStatusComponent_tbody_17_Template, 2, 1, \"tbody\", 5);\n        i0.ɵɵtemplate(18, DevicesStatusComponent_tbody_18_Template, 4, 1, \"tbody\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, DevicesStatusComponent_ng_template_19_Template, 12, 3, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.show == null ? null : ctx.show.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.show.count);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"dtTrigger\", ctx.dtTrigger)(\"dtOptions\", ctx.statusTableOptions);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.language[\"deviceIP\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"\", ctx.language[\"flowRate\"], \" (\", ctx.language[\"perSecond\"], \")\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"\", ctx.language[\"packetRate\"], \" (\", ctx.language[\"perSecond\"], \")\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"\", ctx.language[\"virtualPacketRate\"], \" (\", ctx.language[\"perSecond\"], \")\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"\", ctx.language[\"virtualBitRate\"], \" (\", ctx.language[\"perSecond\"], \")\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.deviceStatusData == null ? null : ctx.deviceStatusData.length);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !(ctx.deviceStatusData == null ? null : ctx.deviceStatusData.length));\n      }\n    },\n    directives: [i10.NgIf, i11.DataTableDirective, i10.NgForOf],\n    styles: [\"\"]\n  });\n  return DevicesStatusComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}