{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let FoundationManageService = /*#__PURE__*/(() => {\n  class FoundationManageService {\n    constructor(http, sso) {\n      this.http = http;\n      this.sso = sso;\n      this.metaData = {};\n      this.staticGroupSubject = new Subject();\n      this.showCountStatus = new BehaviorSubject(false);\n      this.showCountStatus$ = this.showCountStatus.asObservable();\n      this.removeNull = obj => {\n        Object.keys(obj).forEach(key => obj[key] && typeof obj[key] === 'object' && this.removeNull(obj[key]) || (obj[key] === '' || obj[key] === null) && delete obj[key]);\n        return obj;\n      };\n    }\n    updateServiceData(orgId, systemInfo, params) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems/rg-service?${ID}`;\n      if (systemInfo && systemInfo.sn) {\n        url = `${url}systemId=${systemInfo.sn}`;\n      } else if (systemInfo && systemInfo.subscriberId) {\n        url = `${url}subscriberId=${systemInfo.subscriberId}`;\n      }\n      return this.http.put(url, params);\n    }\n    updateEdgeSuitsData(orgId, systemInfo, params) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites?${ID}`;\n      if (systemInfo && systemInfo.sn) {\n        url = `${url}systemId=${systemInfo.sn}`;\n      } else if (systemInfo && systemInfo.subscriberId) {\n        url = `${url}subscriberId=${systemInfo.subscriberId}`;\n      }\n      return this.http.put(url, params);\n    }\n    updateEdgeSuitsDataCOC(orgId, systemInfo, params) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites?${ID}subscriberId=${systemInfo}`;\n      return this.http.put(url, params);\n    }\n    performSearch(orgId, filter, pageNumber, pageSize) {\n      const params = new HttpParams()\n      //.set(\"orgId\", orgId)\n      .set(\"filter\", filter || \"\").set(\"pageNumber\", pageNumber).set(\"pageSize\", pageSize);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-search`, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n    showCount(val) {\n      this.showCountStatus.next(val);\n    }\n    swapNewSystem(orgId, params) {\n      const ID = this.sso.getOrg(orgId);\n      let cscurl = `${environment.SUPPORT_URL}/device/swap?${ID}isReloadSSID=true`;\n      return this.http.put(cscurl, params);\n    }\n    updateNewSystem(orgId, params, skipSSIDLoad = false) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.SUPPORT_URL}/device/swap?${ID}`;\n      if (skipSSIDLoad) {\n        params[`skipSSIDLoad`] = true;\n      }\n      return this.http.put(url, params);\n    }\n    AddSystemSubscriberData(orgId, params) {\n      const ID = this.sso.getOrg(orgId);\n      const systemsubscriberurl = `${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}`;\n      return this.http.post(systemsubscriberurl, params);\n    }\n    UpdateSystemSubscriberData(orgId, params, systemInfo) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}`;\n      if (systemInfo && systemInfo.sn) {\n        url = `${url}systemId=${systemInfo.sn}`;\n      } else if (systemInfo && systemInfo.subscriberId) {\n        url = `${url}subscriberId=${systemInfo.subscriberId}`;\n      }\n      return this.http.put(url, params);\n    }\n    disassociateDevice(orgId, params) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.put(`${environment.FOUNDATION_BASE_URL}subscriber-systems/disassociate?${ID}`, params);\n    }\n    deleteAndDisassociatedDevice(orgId, systemId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.delete(`${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}systemId=${systemId}`);\n    }\n    deleteWarningSubscriber(orgId, subscriberId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/servify-contract?${ID}subscriberId=${subscriberId}`);\n    }\n    deleteSubscriber(subscriberId, orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.delete(`${environment.SUPPORT_URL}/subscriber/${subscriberId}?${ID}`);\n    }\n    getSubscribersSystemList(orgId, systemInfo, iqEnabled) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}`;\n      if (systemInfo && systemInfo.sn) {\n        url = `${url}systemId=${systemInfo.sn}`;\n      } else if (systemInfo && systemInfo.subscriberId) {\n        url = `${url}subscriberId=${systemInfo.subscriberId}`;\n      }\n      if (iqEnabled) {\n        url = `${url}&includeEnabledStatus=true`;\n      }\n      return this.http.get(url);\n    }\n    getSystemStatusData(orgId, systemId, iqEnabled) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}systemId=${systemId}&includeEnabledStatus=true`);\n    }\n    getedgesuiteData(orgId, subscriberId, iqEnabled) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}subscriberId=${subscriberId}&includeEnabledStatus=true`);\n    }\n    AddSubscriberData(orgId, request) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.post(`${environment.SUPPORT_URL}/subscriber?${ID}`, request);\n    }\n    UpdateSubscriberData(orgId, request, subscriberId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/subscriber/${subscriberId}?${ID}`, request);\n    }\n    GetSubscriberData(orgId, subscriberId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber/${subscriberId}?${ID}queryByLocationId=false`);\n    }\n    UpdateSystemInfo(orgId, params, systemInfo) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}`;\n      if (systemInfo && systemInfo.sn) {\n        url = `${url}systemId=${systemInfo.sn}`;\n      }\n      return this.http.put(url, params);\n    }\n    callRestApi(endpoint, filters) {\n      return this.http.get(`${endpoint}`).pipe(catchError(this.handleError));\n    }\n    getDeviceGroupCount(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/group/count?${ID}`);\n    }\n    getDeviceGoupList(orgId, limit) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/group?${ID}skip=0&limit=${limit}`);\n    }\n    getRadioStatus(orgId, systemId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${systemId}/wifi/radioSummaries`);\n    }\n    getProvisionrecord(orgId, systemId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-provisioning/provisioning-record?${ID}deviceId=${systemId}`);\n    }\n    updateStaticGroupsData(orgId, systemInfo, params) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems/static-group-memberships?${ID}`;\n      if (systemInfo && systemInfo.sn) {\n        url = `${url}systemId=${systemInfo.sn}`;\n      } else if (systemInfo && systemInfo.subscriberId) {\n        url = `${url}subscriberId=${systemInfo.subscriberId}`;\n      }\n      return this.http.put(url, params);\n    }\n    getModeFeature(orgId, modelName) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.CALIX_URL}/support/device/feature-properties?${ID}modelName=${modelName}`);\n    }\n    getSearchResult(orgId, system) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-search?${ID}filter=device:${system}&pageNumber=1&pageSize=1`);\n    }\n    getDeviceInfo(orgId, systemId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${systemId}/deviceinfo`);\n    }\n    checkSwapStatus(system, orgId) {\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/replacing?orgId=${orgId}&systemId=${system}`);\n    }\n    gerArloSmartData(userId) {\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}feature/arlo/devices?userId=${userId}`);\n    }\n    deleteArloSmartData(userId, deviceId) {\n      return this.http.delete(`${environment.FOUNDATION_BASE_URL}feature/arlo/device?userId=${userId}&deviceId=${deviceId}`);\n    }\n    getDialPlan(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-dp/dial-plan?${ID}`);\n    }\n    getRegIdInstance(orgId, regId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/deviceInfo?${ID}registrationId=${regId}`);\n    }\n    fetchMetaData(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.API_BASE_URL}calix/support/device/feature-properties?${ID}serialNumber=${serialNumber}`);\n    }\n    getMetaData(serialNumber) {\n      return this.metaData.hasOwnProperty(serialNumber) ? this.metaData[serialNumber] : false;\n    }\n    setMetaData(serialNumber, metaData, reset = false) {\n      reset ? this.metaData = {} : this.metaData[serialNumber] = metaData;\n    }\n    getServicesOfSubscriber(orgId, subId) {\n      return this.http.get(`${environment.FOUNDATION_SERVICES_URL}subscribers/${subId}/services?summaryOnly=true`);\n    }\n    associateDevice(orgId, params) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.put(`${environment.FOUNDATION_BASE_URL}subscriber-systems/associate?${ID}`, params);\n    }\n    getDeleteAndFactoryreset(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/org-config/delete-and-factory-reset?${ID}`);\n    }\n    DeleteAndFactoryreset(orgId, params) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.put(`${environment.FOUNDATION_BASE_URL}subscriber-systems/org-config/delete-and-factory-reset?${ID}`, params);\n    }\n    getCommandIqOfSubscriber(orgId, subId, serialNo) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.SUPPORT_URL}/subscriber-summary/${subId}?${ID}`;\n      if (serialNo) {\n        url = `${url}ontSerialNumber=${serialNo}`;\n      }\n      return this.http.get(url);\n    }\n    getCommandIqOfSystem(orgId, systemId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/unassociated-device-summary?${ID}serialNumber=${systemId}`);\n    }\n    saveSubscriberSystem(params) {\n      return this.http.post(`${environment.SUPPORT_URL}/subscriber-provisioning/provisioning-record`, params);\n    }\n    getStaticGroupData(orgId, systemId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}/subscriber-systems/static-group-memberships?${ID}systemId=${systemId}`);\n    }\n    getEdgeSuitesData(orgId, systemInfo) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites?${ID}`;\n      if (systemInfo && systemInfo.sn) {\n        url = `${url}systemId=${systemInfo.sn}`;\n      } else if (systemInfo && systemInfo.subscriberId) {\n        url = `${url}subscriberId=${systemInfo.subscriberId}`;\n      }\n      return this.http.get(url);\n    }\n    updateSystemServiceData(orgId, systemId, params) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.put(`${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}systemId=${systemId}`, params);\n    }\n    getDeviceGoupCount(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/group/count?${ID}`);\n    }\n    getDetailedSubscriberServices(subId) {\n      return this.http.get(`${environment.FOUNDATION_SERVICES_URL}subscribers/${subId}?includeDeviceData=false&includeDecommissionedDevices=false`);\n    }\n    getSubscriberSystemList(subId) {\n      return this.http.get(`${environment.FOUNDATION_SERVICES_URL}subscribers/${subId}/devices`);\n    }\n    addSubscriberSystemList(subId, sysId) {\n      return this.http.post(`${environment.FOUNDATION_SERVICES_URL}subscribers/${subId}/devices?deviceId=${sysId}`, {});\n    }\n    getBWProfile(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-config/configuration-profile?${ID}`);\n    }\n    updateEnableApp(orgId, systemInfo, params) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/iq-suites/container?${ID}systemId=${systemInfo.sn}`;\n      return this.http.put(url, params);\n    }\n    getRadiosummary(orgId, sysId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${sysId}/wifi/radioSummaries`);\n    }\n    getSubscriberServices(subId) {\n      return this.http.get(`${environment.FOUNDATION_SERVICES_URL}subscribers/${subId}/services`);\n    }\n    getPasspointStatus(orgId, fsan) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/mycommunityiq/passpoint?${ID}systemId=${fsan}`);\n    }\n    getsmallBizStatus(orgId, fsan) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/smallbiziq?${ID}systemId=${fsan}`);\n    }\n    getsmallBizStatusCOC(orgId, fsan) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/smallbiziq?${ID}subscriberId=${fsan}`);\n    }\n    getPasspointcocStatus(orgId, fsan) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/mycommunityiq/passpoint?${ID}subscriberId=${fsan}`);\n    }\n    deleteCommunitySubscriber(orgId, subscriberId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/mycommunityiq/subscriber?${ID}subscriberId=${subscriberId}`);\n    }\n    getONTIpaddress(orgId, serialNo) {\n      return this.http.get(`${environment.CMC_API_BASE_URL}/search/prioritySearch?filter=${serialNo}`).pipe(catchError(this.handleError));\n    }\n    getONTIpAddresswithAggGroup(agggroup, orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.faAdminCorrelatorURL}flowendpoint?agggroup=${agggroup}&assigned=false&count=false&mappedby=NONE&orderby=name&org-id=${orgId}&pagenumber=0&pagesize=1000&sortdirection=asc`).pipe(catchError(this.handleError));\n    }\n    getOntDetails(card, ont) {\n      let url = `${environment.API_BASE_URL}cnap/invmgr/devices/${card}/state/details?onuid=${ont}`;\n      return this.http.get(url);\n    }\n  }\n  FoundationManageService.ɵfac = function FoundationManageService_Factory(t) {\n    return new (t || FoundationManageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  FoundationManageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FoundationManageService,\n    factory: FoundationManageService.ɵfac,\n    providedIn: 'root'\n  });\n  return FoundationManageService;\n})();","map":null,"metadata":{},"sourceType":"module"}