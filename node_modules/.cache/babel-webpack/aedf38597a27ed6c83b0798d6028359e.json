{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../shared/services/sso-auth.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let WhitelabelService = /*#__PURE__*/(() => {\n  class WhitelabelService {\n    constructor(ssoservice, http) {\n      this.ssoservice = ssoservice;\n      this.http = http;\n      this.API = `${environment.AUTH_API_HOST}`;\n    }\n    setSpId() {\n      return this.ssoservice.getSPID();\n    }\n    getInfo(spId) {\n      let headers = new HttpHeaders();\n      headers = headers.append('X-Calix-ClientID', environment.X_CALIX_CLIENTID);\n      return this.http.get(`${this.API}/usertype?spId=${spId}`, {\n        headers\n      });\n    }\n    whiteLabellist(spId) {\n      // let headers: HttpHeaders = new HttpHeaders();\n      // headers = headers.append('X-Calix-ClientID', environment.X_CALIX_CLIENTID);\n      var accessToken = localStorage.getItem('calix.csc_token');\n      const httpHeaders = new HttpHeaders({\n        'Authorization': 'Bearer' + ' ' + accessToken\n      });\n      return this.http.get(environment.SP_API_BASE_URL + `/whitelabel/info?spId=${spId}`, {\n        observe: 'response'\n      });\n      // return this.http.get(`https://dev.rgw.calix.ai/map/v1/admin/calix/whitelabel/info?spId=${spId}`,{\n      //   headers: httpHeaders,\n      //   observe: 'response'\n      // });\n    }\n\n    whiteLabelinfo(spId) {\n      return this.http.get(environment.SP_API_BASE_URL + `/whitelabel/info?spid=${spId}`);\n    }\n    spinfo(spId) {\n      var accessToken = localStorage.getItem('calix.csc_token');\n      // var headers_object = new HttpHeaders().set(\"Authorization\", \"Bearer \" + accessToken);\n      const httpHeaders = new HttpHeaders({\n        'Authorization': 'Bearer' + ' ' + accessToken\n      });\n      return this.http.get(environment.SP_API_BASE_URL + `/whitelabel/info?spid=${spId}`, {\n        observe: 'response'\n      });\n      // return this.http.get(`https://dev.rgw.calix.ai/map/v1/admin/calix/whitelabel/info?spId=${spId}`,{\n      //   headers: httpHeaders,\n      //   observe: 'response'\n      // });\n    }\n\n    add(params) {\n      var accessToken = localStorage.getItem('calix.csc_token');\n      const httpHeaders = new HttpHeaders({\n        'Authorization': 'Bearer' + ' ' + accessToken\n      });\n      console.log(params);\n      return this.http.put(environment.SP_API_BASE_URL + '/whitelabel/add', params);\n      // return this.http.put('https://dev.rgw.calix.ai/map/v1/admin/calix/whitelabel/add', params, {\n      //   headers: httpHeaders,\n      //   observe: 'response'\n      // });\n    }\n\n    update(params) {\n      var accessToken = localStorage.getItem('calix.csc_token');\n      const httpHeaders = new HttpHeaders({\n        'Authorization': 'Bearer' + ' ' + accessToken\n      });\n      return this.http.post(environment.SP_API_BASE_URL + '/whitelabel/update', params);\n      // return this.http.post('https://dev.rgw.calix.ai/map/v1/admin/calix/whitelabel/update', params, {\n      //   headers: httpHeaders,\n      //   observe: 'response'\n      // });\n    }\n\n    UpdateSupportInfo(params) {\n      return this.http.put(`${environment.apiHost}/support/info`, params);\n    }\n    fetchSupportInfo(spid) {\n      return this.http.get(`${environment.apiHost}/support/info?spid=${spid}`);\n    }\n    DeleteSupportInfo() {\n      return this.http.delete(`${environment.apiHost}/support/info`);\n    }\n    commandIqList(spId) {\n      return this.http.get(environment.SP_API_BASE_URL + `/smb/whitelabel?spid=${spId}`, {\n        observe: 'response'\n      });\n    }\n    commandIqadd(params) {\n      return this.http.post(environment.SP_API_BASE_URL + '/smb/whitelabel', params);\n    }\n    commandIqUpdate(params) {\n      return this.http.put(environment.SP_API_BASE_URL + '/smb/whitelabel', params);\n    }\n    updateAppCustomName(param) {\n      return this.http.post(`${environment.apiHost}/admin/application/custom/name`, param);\n    }\n    callRestApi(endpoint) {\n      return this.http.get(`${endpoint}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n  }\n  WhitelabelService.ɵfac = function WhitelabelService_Factory(t) {\n    return new (t || WhitelabelService)(i0.ɵɵinject(i1.SsoAuthService), i0.ɵɵinject(i2.HttpClient));\n  };\n  WhitelabelService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WhitelabelService,\n    factory: WhitelabelService.ɵfac,\n    providedIn: 'root'\n  });\n  return WhitelabelService;\n})();","map":null,"metadata":{},"sourceType":"module"}