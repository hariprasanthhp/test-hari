{"ast":null,"code":"import { hasPrimaryModifier } from '../../util/Mouse';\nimport { isKey } from '../../features/keyboard/KeyboardUtil';\nvar HIGH_PRIORITY = 1500;\nvar HAND_CURSOR = 'grab';\nexport default function HandTool(eventBus, canvas, dragging, injector, toolManager, mouse) {\n  this._dragging = dragging;\n  this._mouse = mouse;\n  var self = this,\n    keyboard = injector.get('keyboard', false);\n  toolManager.registerTool('hand', {\n    tool: 'hand',\n    dragging: 'hand.move'\n  });\n  eventBus.on('element.mousedown', HIGH_PRIORITY, function (event) {\n    if (!hasPrimaryModifier(event)) {\n      return;\n    }\n    self.activateMove(event.originalEvent, true);\n    return false;\n  });\n  keyboard && keyboard.addListener(HIGH_PRIORITY, function (e) {\n    if (!isSpace(e.keyEvent) || self.isActive()) {\n      return;\n    }\n    var mouseEvent = self._mouse.getLastMoveEvent();\n    self.activateMove(mouseEvent, !!mouseEvent);\n  }, 'keyboard.keydown');\n  keyboard && keyboard.addListener(HIGH_PRIORITY, function (e) {\n    if (!isSpace(e.keyEvent) || !self.isActive()) {\n      return;\n    }\n    self.toggle();\n  }, 'keyboard.keyup');\n  eventBus.on('hand.end', function (event) {\n    var target = event.originalEvent.target;\n\n    // only reactive on diagram click\n    // on some occasions, event.hover is not set and we have to check if the target is an svg\n    if (!event.hover && !(target instanceof SVGElement)) {\n      return false;\n    }\n    eventBus.once('hand.ended', function () {\n      self.activateMove(event.originalEvent, {\n        reactivate: true\n      });\n    });\n  });\n  eventBus.on('hand.move.move', function (event) {\n    var scale = canvas.viewbox().scale;\n    canvas.scroll({\n      dx: event.dx * scale,\n      dy: event.dy * scale\n    });\n  });\n  eventBus.on('hand.move.end', function (event) {\n    var context = event.context,\n      reactivate = context.reactivate;\n\n    // Don't reactivate if the user is using the keyboard keybinding\n    if (!hasPrimaryModifier(event) && reactivate) {\n      eventBus.once('hand.move.ended', function (event) {\n        self.activateHand(event.originalEvent, true, true);\n      });\n    }\n    return false;\n  });\n}\nHandTool.$inject = ['eventBus', 'canvas', 'dragging', 'injector', 'toolManager', 'mouse'];\nHandTool.prototype.activateMove = function (event, autoActivate, context) {\n  if (typeof autoActivate === 'object') {\n    context = autoActivate;\n    autoActivate = false;\n  }\n  this._dragging.init(event, 'hand.move', {\n    autoActivate: autoActivate,\n    cursor: HAND_CURSOR,\n    data: {\n      context: context || {}\n    }\n  });\n};\nHandTool.prototype.activateHand = function (event, autoActivate, reactivate) {\n  this._dragging.init(event, 'hand', {\n    trapClick: false,\n    autoActivate: autoActivate,\n    cursor: HAND_CURSOR,\n    data: {\n      context: {\n        reactivate: reactivate\n      }\n    }\n  });\n};\nHandTool.prototype.toggle = function () {\n  if (this.isActive()) {\n    return this._dragging.cancel();\n  }\n  var mouseEvent = this._mouse.getLastMoveEvent();\n  this.activateHand(mouseEvent, !!mouseEvent);\n};\nHandTool.prototype.isActive = function () {\n  var context = this._dragging.context();\n  if (context) {\n    return /^(hand|hand\\.move)$/.test(context.prefix);\n  }\n  return false;\n};\n\n// helpers //////////\n\nfunction isSpace(keyEvent) {\n  return isKey(' ', keyEvent);\n}","map":null,"metadata":{},"sourceType":"module"}