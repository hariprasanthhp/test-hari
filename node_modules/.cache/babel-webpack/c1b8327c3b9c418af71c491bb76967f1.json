{"ast":null,"code":"import BpmnTreeWalker from 'bpmn-js/lib/import/BpmnTreeWalker';\nimport { getBusinessObject } from 'bpmn-js/lib/util/ModelUtil';\nimport { add as collectionAdd, remove as collectionRemove } from 'diagram-js/lib/util/Collections';\nimport { saveClear } from 'diagram-js/lib/util/Removal';\nimport { find } from 'min-dash';\nimport { computeChildrenBBox } from 'diagram-js/lib/features/resize/ResizeUtil';\n\n/**\r\n * Similar to the bpmn-js/lib/import/Importer we emit\r\n * import life-cycle events:\r\n *\r\n * * signavio.import.render.start\r\n * * signavio.import.render.complete\r\n * * signavio.import.done\r\n */\nlet ImportElementsHandler = /*#__PURE__*/(() => {\n  class ImportElementsHandler {\n    constructor(eventBus, bpmnImporter, bpmnjs, canvas, modeling, translate) {\n      this._eventBus = eventBus;\n      this._bpmnImporter = bpmnImporter;\n      this._bpmnjs = bpmnjs;\n      this._canvas = canvas;\n      this._modeling = modeling;\n      this._translate = translate;\n    }\n    execute(context) {\n      var self = this;\n      var eventBus = this._eventBus;\n      var subProcessElement = context.subProcess,\n        subProcessDiagram = context.subProcessDiagram;\n      var warnings = [];\n      var visitor = {\n        /**\r\n           * {ModdleElement} addedElement - Business object.\r\n           * {<djs.moddle.shape>} - Diagram shape.\r\n           */\n        element: function (element, parentShape) {\n          if (!context.cached) {\n            context.cached = {};\n          }\n\n          // use cached element on CommandStack#redo\n          var cachedElement = context.cached[element.id];\n          if (cachedElement) {\n            if (cachedElement.label) {\n              self._canvas.addShape(cachedElement.label, parentShape);\n            }\n            if (cachedElement.waypoints) {\n              return self._canvas.addConnection(cachedElement, parentShape);\n            } else {\n              return self._canvas.addShape(cachedElement, parentShape);\n            }\n          }\n          var addedElement = self._bpmnImporter.add(element, parentShape);\n          context.cached[addedElement.id] = addedElement;\n          return addedElement;\n        },\n        error: function (message, context) {\n          warnings.push({\n            message: message,\n            context: context\n          });\n        }\n      };\n      var walker = new BpmnTreeWalker(visitor, this._translate);\n      var plane = subProcessDiagram.plane,\n        planeElements = plane.planeElement;\n\n      // (1) register DI first\n      planeElements.forEach(function (planeElement) {\n        walker.registerDi(planeElement);\n      });\n\n      // (2) move DI\n      moveDI(subProcessDiagram, this.findDiagram(this._canvas.getRootElement().id));\n      var subProcess = getBusinessObject(subProcessElement);\n      eventBus.fire('signavio.import.render.start', {\n        subProcess: subProcess\n      });\n      var error;\n\n      // (3) try to import\n      try {\n        walker.handleSubProcess(subProcess, subProcessElement);\n\n        // must be called afterwards\n        walker.handleDeferred();\n      } catch (e) {\n        error = e;\n      }\n      eventBus.fire('signavio.import.render.complete', {\n        error: error,\n        subProcess: subProcess,\n        warnings: warnings\n      });\n      eventBus.fire('signavio.import.done', {\n        error: error,\n        subProcess: subProcess,\n        warnings: warnings\n      });\n    }\n    postExecute(context) {\n      var subProcess = context.subProcess;\n      var visibleElements = filterVisible(subProcess.children);\n      var visibleBBox = computeChildrenBBox(visibleElements);\n      var visibleBBoxMid = {\n        x: visibleBBox.x + visibleBBox.width / 2,\n        y: visibleBBox.y + visibleBBox.height / 2\n      };\n      var subProcessMid = {\n        x: subProcess.x + subProcess.width / 2,\n        y: subProcess.y + subProcess.height / 2\n      };\n      var delta = {\n        x: subProcessMid.x - visibleBBoxMid.x,\n        y: subProcessMid.y - visibleBBoxMid.y\n      };\n\n      // move elements to an appropriate position\n      this._modeling.moveElements(subProcess.children, delta, subProcess);\n    }\n    revert(context) {\n      var self = this;\n      function deleteElements(elements) {\n        saveClear(elements, function (element) {\n          deleteElement(element);\n        });\n      }\n      function deleteElement(element) {\n        if (element.waypoints) {\n          self._canvas.removeConnection(element);\n        } else {\n          self._canvas.removeShape(element);\n        }\n      }\n      var subProcess = context.subProcess,\n        targetDiagram = context.subProcessDiagram;\n      var sourceDiagram = this.findDiagram(this._canvas.getRootElement().id);\n      var sourcePlaneElements = sourceDiagram.plane.planeElement.filter(function (element) {\n        return hasParentWithId(element, subProcess.id);\n      });\n\n      // (1) remove DI binding\n      sourcePlaneElements.forEach(function (sourcePlaneElement) {\n        delete sourcePlaneElement.bpmnElement.di;\n      });\n\n      // (2) move DI (but only children of subProcess)\n      moveDI(sourceDiagram, targetDiagram, sourcePlaneElements);\n\n      // (3) delete children\n      if (subProcess.children && subProcess.children.length) {\n        deleteElements(subProcess.children);\n      }\n    }\n    findDiagram(id) {\n      var diagrams = this._bpmnjs.getDefinitions().diagrams;\n      return find(diagrams, function (diagram) {\n        const plane = diagram.plane,\n          bpmnElement = plane.bpmnElement;\n        return bpmnElement.id === id;\n      });\n    }\n  }\n  ImportElementsHandler.$inject = ['eventBus', 'bpmnImporter', 'bpmnjs', 'canvas', 'modeling', 'translate'];\n\n  // helpers ///////////\n\n  /**\r\n   * Move DI elements from one bpmndi:BPMNDiagram to another.\r\n   *\r\n   * @param {Object} sourceDiagram\r\n   * @param {Object} targetDiagram\r\n   * @param {Array} sourcePlaneElements - Optional list of elements to move.\r\n   * If not specified, all elements will be moved.\r\n   */\n  return ImportElementsHandler;\n})();\nexport { ImportElementsHandler as default };\nfunction moveDI(sourceDiagram, targetDiagram, sourcePlaneElements) {\n  sourcePlaneElements = sourcePlaneElements || sourceDiagram.plane.planeElement;\n  var targetPlaneElements = targetDiagram.plane.planeElement;\n\n  // (1) add to target plane\n  sourcePlaneElements.forEach(function (sourcePlaneElement) {\n    collectionAdd(targetPlaneElements, sourcePlaneElement);\n  });\n\n  // (2) remove from source plane\n  sourcePlaneElements.slice().forEach(function (sourcePlaneElement) {\n    collectionRemove(sourceDiagram.plane.planeElement, sourcePlaneElement);\n    sourcePlaneElement.$parent = targetDiagram.plane;\n  });\n}\nfunction hasParentWithId(planeElement, parentId) {\n  while (planeElement.bpmnElement && planeElement.bpmnElement.$parent) {\n    if (planeElement.bpmnElement.$parent.id === parentId) {\n      return true;\n    }\n    planeElement = planeElement.bpmnElement.$parent;\n  }\n  return false;\n}\nfunction filterVisible(elements) {\n  return elements.filter(function (e) {\n    return !e.hidden;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}