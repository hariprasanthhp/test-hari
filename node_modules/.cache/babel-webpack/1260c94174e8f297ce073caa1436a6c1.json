{"ast":null,"code":"import { qlikLogout } from '../marketing/shared/services/qlik-connection.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/services/sso-auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let LogoutComponent = /*#__PURE__*/(() => {\n  class LogoutComponent {\n    constructor(auth, router) {\n      this.auth = auth;\n      this.router = router;\n    }\n    thoughtspotLogout() {\n      this.auth.logoutThoughtspot().subscribe(res => {\n        console.log(res);\n      });\n    }\n    ngOnInit() {\n      var _a;\n      if (!this.auth.getRefreshToken()) {\n        this.router.navigate(['login']);\n        return;\n      }\n      this.thoughtspotLogout();\n      // (async () => {\n      //   const token = this.auth.getAccessToken() ? this.auth.getAccessToken() : 'token';\n      //   this.auth.doLogoutCSC();\n      //   this.auth.doLogout();\n      //   localStorage.removeItem('calix.login_data');\n      //   localStorage.removeItem('calix.userInfo');\n      //   this.clearCalixAdminSessionData();\n      //   const cleanApi = await fetch(`${environment.CALIX_URL}cleanupSession`, {\n      //     method: 'GET',\n      //     headers: {\n      //       'X-Calix-ClientID': environment.X_CALIX_CLIENTID,\n      //       'X-Calix-AccessToken': token,\n      //     },\n      //   })\n      //     .then(response => {\n      //       console.log(response);\n      //       if (response.redirected) {\n      //         window.location.href = response.url;\n      //       }\n      //       if (response.status === 200) {\n      //       }\n      //     })\n      //     .then((data: any) => {\n      //       console.log(data)\n      //     })\n      //     .catch((error: any) => {\n      //       console.error(error);\n      //       //this.router.navigate(['login']);\n      //     });\n      // })();\n      this.auth.setLogoutFlag(true);\n      this.auth.setActionLog('CSC', 'logout', 'logout', window.location.href, 'User logged out the app');\n      if (this.auth.getAccessToken()) {\n        this.auth.getCleanupSessionApi().subscribe(json => {\n          if (json.success) {\n            this.auth.doLogoutCSC();\n            this.auth.doLogout();\n            localStorage.removeItem('calix.login_data');\n            localStorage.removeItem('calix.userInfo');\n            localStorage.removeItem('specificlangliterals');\n            this.clearCalixAdminSessionData();\n            qlikLogout();\n            window.location.href = json.success;\n          }\n        }, err => {\n          console.log(err);\n          this.auth.doLogoutCSC();\n          this.auth.doLogout();\n          localStorage.removeItem('calix.login_data');\n          localStorage.removeItem('calix.userInfo');\n          localStorage.removeItem('specificlangliterals');\n          this.clearCalixAdminSessionData();\n          this.router.navigate(['login']);\n        });\n      } else {\n        this.auth.doLogoutCSC();\n        this.auth.doLogout();\n        localStorage.removeItem('calix.login_data');\n        localStorage.removeItem('calix.userInfo');\n        localStorage.removeItem('specificlangliterals');\n        this.clearCalixAdminSessionData();\n        const state = ((_a = history === null || history === void 0 ? void 0 : history.state) === null || _a === void 0 ? void 0 : _a.externalUser) ? history === null || history === void 0 ? void 0 : history.state : {};\n        this.router.navigate(['login'], {\n          state: state\n        });\n      }\n    }\n    clearCalixAdminSessionData() {\n      sessionStorage.removeItem('calixAdminOrgDetail');\n      sessionStorage.removeItem('calixAdminOrgID');\n      sessionStorage.removeItem('calixAdminUserDetail');\n      sessionStorage.removeItem('calixAdminAddRole');\n      sessionStorage.removeItem('calixAdminAddRoleId');\n      sessionStorage.removeItem('SecuredAccessUser');\n      sessionStorage.removeItem('Orgacceforssid');\n    }\n  }\n  LogoutComponent.ɵfac = function LogoutComponent_Factory(t) {\n    return new (t || LogoutComponent)(i0.ɵɵdirectiveInject(i1.SsoAuthService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  LogoutComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LogoutComponent,\n    selectors: [[\"ngx-logout\"]],\n    decls: 0,\n    vars: 0,\n    template: function LogoutComponent_Template(rf, ctx) {},\n    styles: [\"\"]\n  });\n  return LogoutComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}