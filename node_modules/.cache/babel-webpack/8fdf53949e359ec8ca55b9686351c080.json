{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let NfainventoryService = /*#__PURE__*/(() => {\n  class NfainventoryService {\n    constructor(http, ssoauthservice) {\n      this.http = http;\n      this.ssoauthservice = ssoauthservice;\n      this.baseURL = environment.API_BASE_URL;\n      let orgId = this.ssoauthservice.getOrgId();\n      this.regions = this.baseURL + 'nfa/regions?tenant=0';\n      this.locations = this.baseURL + 'nfa/locations?tenant=0';\n      this.systems = this.baseURL + 'nfa/systems?tenant=0';\n      //this.Count = this.baseURL + 'nfa/interfaces/pon/count?tenant=0';\n    }\n    // &org-id=${this.ssoauthservice.getOrgId()}\n    GetRegions() {\n      return this.http.get(`${this.regions}`).pipe(catchError(this.handleError));\n    }\n    GetLocations(id) {\n      let region = '&region=' + id;\n      return this.http.get(`${this.locations}${region}`).pipe(map(res => {\n        res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n        return res;\n      }), catchError(this.handleError));\n    }\n    GetSystems(regionId, locationId, page) {\n      let region = '&region=' + regionId;\n      let location = '&location=' + locationId;\n      if (page == 'ae') location += '&aeMgmt=true';\n      if (page == 'pon' || page == 'ont') location += `&interfaceCategory=${page}`;\n      return this.http.get(`${this.systems}${region}${location}`).pipe(map(res => {\n        res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n        return res;\n      }), catchError(this.handleError));\n    }\n    GetPonCount(state) {\n      if (state == 'quarantine') this.Count = this.baseURL + 'nfa/interfaces/pon/count?tenant=0&quarantinedOnt=true';else this.Count = this.baseURL + 'nfa/interfaces/pon/count?tenant=0&quarantinedOnt=false';\n      return this.http.get(`${this.Count}`).pipe(catchError(this.handleError));\n    }\n    GetDslCount(value) {\n      return this.http.get(`${this.baseURL}nfa/interfaces/dsl/count?tenant=0&showtime=${value}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      // Return userfriendly   error message;\n      return throwError(error);\n    }\n  }\n  NfainventoryService.ɵfac = function NfainventoryService_Factory(t) {\n    return new (t || NfainventoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  NfainventoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NfainventoryService,\n    factory: NfainventoryService.ɵfac,\n    providedIn: 'root'\n  });\n  return NfainventoryService;\n})();","map":null,"metadata":{},"sourceType":"module"}