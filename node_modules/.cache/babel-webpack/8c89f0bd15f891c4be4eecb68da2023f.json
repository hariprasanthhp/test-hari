{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\nimport { filter, forEach } from 'min-dash';\n\n/**\n * BPMN specific boundary event behavior\n */\nexport default function BoundaryEventBehavior(eventBus, modeling) {\n  CommandInterceptor.call(this, eventBus);\n  function getBoundaryEvents(element) {\n    return filter(element.attachers, function (attacher) {\n      return is(attacher, 'bpmn:BoundaryEvent');\n    });\n  }\n\n  // remove after connecting to event-based gateway\n  this.postExecute('connection.create', function (event) {\n    var source = event.context.source,\n      target = event.context.target,\n      boundaryEvents = getBoundaryEvents(target);\n    if (is(source, 'bpmn:EventBasedGateway') && is(target, 'bpmn:ReceiveTask') && boundaryEvents.length > 0) {\n      modeling.removeElements(boundaryEvents);\n    }\n  });\n\n  // remove after replacing connected gateway with event-based gateway\n  this.postExecute('connection.reconnect', function (event) {\n    var oldSource = event.context.oldSource,\n      newSource = event.context.newSource;\n    if (is(oldSource, 'bpmn:Gateway') && is(newSource, 'bpmn:EventBasedGateway')) {\n      forEach(newSource.outgoing, function (connection) {\n        var target = connection.target,\n          attachedboundaryEvents = getBoundaryEvents(target);\n        if (is(target, 'bpmn:ReceiveTask') && attachedboundaryEvents.length > 0) {\n          modeling.removeElements(attachedboundaryEvents);\n        }\n      });\n    }\n  });\n}\nBoundaryEventBehavior.$inject = ['eventBus', 'modeling'];\ninherits(BoundaryEventBehavior, CommandInterceptor);","map":null,"metadata":{},"sourceType":"module"}