{"ast":null,"code":"'use strict';\n\nvar escapeHTML = require('../Utils').escapeHTML;\nvar domify = require('min-dom').domify,\n  domQuery = require('min-dom').query;\nvar entryFieldDescription = require('./EntryFieldDescription');\nvar textField = function (translate, options, defaultParameters) {\n  // Default action for the button next to the input-field\n  var defaultButtonAction = function (element, inputNode) {\n    var input = domQuery('input[name=\"' + options.modelProperty + '\"]', inputNode);\n    input.value = '';\n    return true;\n  };\n\n  // default method to determine if the button should be visible\n  var defaultButtonShow = function (element, inputNode) {\n    var input = domQuery('input[name=\"' + options.modelProperty + '\"]', inputNode);\n    return input.value !== '';\n  };\n  var resource = defaultParameters,\n    label = options.label || resource.id,\n    dataValueLabel = options.dataValueLabel,\n    buttonLabel = options.buttonLabel || 'X',\n    actionName = typeof options.buttonAction != 'undefined' ? options.buttonAction.name : 'clear',\n    actionMethod = typeof options.buttonAction != 'undefined' ? options.buttonAction.method : defaultButtonAction,\n    showName = typeof options.buttonShow != 'undefined' ? options.buttonShow.name : 'canClear',\n    showMethod = typeof options.buttonShow != 'undefined' ? options.buttonShow.method : defaultButtonShow,\n    canBeDisabled = !!options.disabled && typeof options.disabled === 'function',\n    canBeHidden = !!options.hidden && typeof options.hidden === 'function',\n    description = options.description;\n  resource.html = domify('<label for=\"camunda-' + escapeHTML(resource.id) + '\" ' + (canBeDisabled ? 'data-disable=\"isDisabled\" ' : '') + (canBeHidden ? 'data-show=\"isHidden\" ' : '') + (dataValueLabel ? 'data-value=\"' + escapeHTML(dataValueLabel) + '\"' : '') + '>' + escapeHTML(label) + '</label>' + '<div class=\"bpp-field-wrapper\" ' + (canBeDisabled ? 'data-disable=\"isDisabled\"' : '') + (canBeHidden ? 'data-show=\"isHidden\"' : '') + '>' + '<input id=\"camunda-' + escapeHTML(resource.id) + '\" type=\"text\" name=\"' + escapeHTML(options.modelProperty) + '\" ' + (canBeDisabled ? 'data-disable=\"isDisabled\"' : '') + (canBeHidden ? 'data-show=\"isHidden\"' : '') + ' />' + '<button class=\"action-button ' + escapeHTML(actionName) + '\" data-action=\"' + escapeHTML(actionName) + '\" data-show=\"' + escapeHTML(showName) + '\" ' + (canBeDisabled ? 'data-disable=\"isDisabled\"' : '') + (canBeHidden ? ' data-show=\"isHidden\"' : '') + '>' + '<span>' + escapeHTML(buttonLabel) + '</span>' + '</button>' + '</div>');\n\n  // add description below text input entry field\n  if (description) {\n    resource.html.appendChild(entryFieldDescription(translate, description, {\n      show: canBeHidden && 'isHidden'\n    }));\n  }\n  resource[actionName] = actionMethod;\n  resource[showName] = showMethod;\n  if (canBeDisabled) {\n    resource.isDisabled = function () {\n      return options.disabled.apply(resource, arguments);\n    };\n  }\n  if (canBeHidden) {\n    resource.isHidden = function () {\n      return !options.hidden.apply(resource, arguments);\n    };\n  }\n  resource.cssClasses = ['bpp-textfield'];\n  return resource;\n};\nmodule.exports = textField;","map":null,"metadata":{},"sourceType":"script"}