{"ast":null,"code":"import { assign, forEach, isArray } from 'min-dash';\nimport { Base } from '../../model';\nimport AlignElementsHandler from './cmd/AlignElementsHandler';\nimport AppendShapeHandler from './cmd/AppendShapeHandler';\nimport CreateConnectionHandler from './cmd/CreateConnectionHandler';\nimport CreateElementsHandler from './cmd/CreateElementsHandler';\nimport CreateLabelHandler from './cmd/CreateLabelHandler';\nimport CreateShapeHandler from './cmd/CreateShapeHandler';\nimport DeleteConnectionHandler from './cmd/DeleteConnectionHandler';\nimport DeleteElementsHandler from './cmd/DeleteElementsHandler';\nimport DeleteShapeHandler from './cmd/DeleteShapeHandler';\nimport DistributeElementsHandler from './cmd/DistributeElementsHandler';\nimport LayoutConnectionHandler from './cmd/LayoutConnectionHandler';\nimport MoveConnectionHandler from './cmd/MoveConnectionHandler';\nimport MoveElementsHandler from './cmd/MoveElementsHandler';\nimport MoveShapeHandler from './cmd/MoveShapeHandler';\nimport ReconnectConnectionHandler from './cmd/ReconnectConnectionHandler';\nimport ReplaceShapeHandler from './cmd/ReplaceShapeHandler';\nimport ResizeShapeHandler from './cmd/ResizeShapeHandler';\nimport SpaceToolHandler from './cmd/SpaceToolHandler';\nimport ToggleShapeCollapseHandler from './cmd/ToggleShapeCollapseHandler';\nimport UpdateAttachmentHandler from './cmd/UpdateAttachmentHandler';\nimport UpdateWaypointsHandler from './cmd/UpdateWaypointsHandler';\n\n/**\n * The basic modeling entry point.\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n */\nexport default function Modeling(eventBus, elementFactory, commandStack) {\n  this._eventBus = eventBus;\n  this._elementFactory = elementFactory;\n  this._commandStack = commandStack;\n  var self = this;\n  eventBus.on('diagram.init', function () {\n    // register modeling handlers\n    self.registerHandlers(commandStack);\n  });\n}\nModeling.$inject = ['eventBus', 'elementFactory', 'commandStack'];\nModeling.prototype.getHandlers = function () {\n  return {\n    'shape.append': AppendShapeHandler,\n    'shape.create': CreateShapeHandler,\n    'shape.delete': DeleteShapeHandler,\n    'shape.move': MoveShapeHandler,\n    'shape.resize': ResizeShapeHandler,\n    'shape.replace': ReplaceShapeHandler,\n    'shape.toggleCollapse': ToggleShapeCollapseHandler,\n    'spaceTool': SpaceToolHandler,\n    'label.create': CreateLabelHandler,\n    'connection.create': CreateConnectionHandler,\n    'connection.delete': DeleteConnectionHandler,\n    'connection.move': MoveConnectionHandler,\n    'connection.layout': LayoutConnectionHandler,\n    'connection.updateWaypoints': UpdateWaypointsHandler,\n    'connection.reconnect': ReconnectConnectionHandler,\n    'elements.create': CreateElementsHandler,\n    'elements.move': MoveElementsHandler,\n    'elements.delete': DeleteElementsHandler,\n    'elements.distribute': DistributeElementsHandler,\n    'elements.align': AlignElementsHandler,\n    'element.updateAttachment': UpdateAttachmentHandler\n  };\n};\n\n/**\n * Register handlers with the command stack\n *\n * @param {CommandStack} commandStack\n */\nModeling.prototype.registerHandlers = function (commandStack) {\n  forEach(this.getHandlers(), function (handler, id) {\n    commandStack.registerHandler(id, handler);\n  });\n};\n\n// modeling helpers //////////////////////\n\nModeling.prototype.moveShape = function (shape, delta, newParent, newParentIndex, hints) {\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = null;\n  }\n  var context = {\n    shape: shape,\n    delta: delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n  this._commandStack.execute('shape.move', context);\n};\n\n/**\n * Update the attachment of the given shape.\n *\n * @param {djs.mode.Base} shape\n * @param {djs.model.Base} [newHost]\n */\nModeling.prototype.updateAttachment = function (shape, newHost) {\n  var context = {\n    shape: shape,\n    newHost: newHost\n  };\n  this._commandStack.execute('element.updateAttachment', context);\n};\n\n/**\n * Move a number of shapes to a new target, either setting it as\n * the new parent or attaching it.\n *\n * @param {Array<djs.mode.Base>} shapes\n * @param {Point} delta\n * @param {djs.model.Base} [target]\n * @param {Object} [hints]\n * @param {boolean} [hints.attach=false]\n */\nModeling.prototype.moveElements = function (shapes, delta, target, hints) {\n  hints = hints || {};\n  var attach = hints.attach;\n  var newParent = target,\n    newHost;\n  if (attach === true) {\n    newHost = target;\n    newParent = target.parent;\n  } else if (attach === false) {\n    newHost = null;\n  }\n  var context = {\n    shapes: shapes,\n    delta: delta,\n    newParent: newParent,\n    newHost: newHost,\n    hints: hints\n  };\n  this._commandStack.execute('elements.move', context);\n};\nModeling.prototype.moveConnection = function (connection, delta, newParent, newParentIndex, hints) {\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = undefined;\n  }\n  var context = {\n    connection: connection,\n    delta: delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n  this._commandStack.execute('connection.move', context);\n};\nModeling.prototype.layoutConnection = function (connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n  this._commandStack.execute('connection.layout', context);\n};\n\n/**\n * Create connection.\n *\n * @param {djs.model.Base} source\n * @param {djs.model.Base} target\n * @param {number} [parentIndex]\n * @param {Object|djs.model.Connection} connection\n * @param {djs.model.Base} parent\n * @param {Object} hints\n *\n * @return {djs.model.Connection} the created connection.\n */\nModeling.prototype.createConnection = function (source, target, parentIndex, connection, parent, hints) {\n  if (typeof parentIndex === 'object') {\n    hints = parent;\n    parent = connection;\n    connection = parentIndex;\n    parentIndex = undefined;\n  }\n  connection = this._create('connection', connection);\n  var context = {\n    source: source,\n    target: target,\n    parent: parent,\n    parentIndex: parentIndex,\n    connection: connection,\n    hints: hints\n  };\n  this._commandStack.execute('connection.create', context);\n  return context.connection;\n};\n\n/**\n * Create a shape at the specified position.\n *\n * @param {djs.model.Shape|Object} shape\n * @param {Point} position\n * @param {djs.model.Shape|djs.model.Root} target\n * @param {number} [parentIndex] position in parents children list\n * @param {Object} [hints]\n * @param {boolean} [hints.attach] whether to attach to target or become a child\n *\n * @return {djs.model.Shape} the created shape\n */\nModeling.prototype.createShape = function (shape, position, target, parentIndex, hints) {\n  if (typeof parentIndex !== 'number') {\n    hints = parentIndex;\n    parentIndex = undefined;\n  }\n  hints = hints || {};\n  var attach = hints.attach,\n    parent,\n    host;\n  shape = this._create('shape', shape);\n  if (attach) {\n    parent = target.parent;\n    host = target;\n  } else {\n    parent = target;\n  }\n  var context = {\n    position: position,\n    shape: shape,\n    parent: parent,\n    parentIndex: parentIndex,\n    host: host,\n    hints: hints\n  };\n  this._commandStack.execute('shape.create', context);\n  return context.shape;\n};\nModeling.prototype.createElements = function (elements, position, parent, parentIndex, hints) {\n  if (!isArray(elements)) {\n    elements = [elements];\n  }\n  if (typeof parentIndex !== 'number') {\n    hints = parentIndex;\n    parentIndex = undefined;\n  }\n  hints = hints || {};\n  var context = {\n    position: position,\n    elements: elements,\n    parent: parent,\n    parentIndex: parentIndex,\n    hints: hints\n  };\n  this._commandStack.execute('elements.create', context);\n  return context.elements;\n};\nModeling.prototype.createLabel = function (labelTarget, position, label, parent) {\n  label = this._create('label', label);\n  var context = {\n    labelTarget: labelTarget,\n    position: position,\n    parent: parent || labelTarget.parent,\n    shape: label\n  };\n  this._commandStack.execute('label.create', context);\n  return context.shape;\n};\n\n/**\n * Append shape to given source, drawing a connection\n * between source and the newly created shape.\n *\n * @param {djs.model.Shape} source\n * @param {djs.model.Shape|Object} shape\n * @param {Point} position\n * @param {djs.model.Shape} target\n * @param {Object} [hints]\n * @param {boolean} [hints.attach]\n * @param {djs.model.Connection|Object} [hints.connection]\n * @param {djs.model.Base} [hints.connectionParent]\n *\n * @return {djs.model.Shape} the newly created shape\n */\nModeling.prototype.appendShape = function (source, shape, position, target, hints) {\n  hints = hints || {};\n  shape = this._create('shape', shape);\n  var context = {\n    source: source,\n    position: position,\n    target: target,\n    shape: shape,\n    connection: hints.connection,\n    connectionParent: hints.connectionParent,\n    hints: hints\n  };\n  this._commandStack.execute('shape.append', context);\n  return context.shape;\n};\nModeling.prototype.removeElements = function (elements) {\n  var context = {\n    elements: elements\n  };\n  this._commandStack.execute('elements.delete', context);\n};\nModeling.prototype.distributeElements = function (groups, axis, dimension) {\n  var context = {\n    groups: groups,\n    axis: axis,\n    dimension: dimension\n  };\n  this._commandStack.execute('elements.distribute', context);\n};\nModeling.prototype.removeShape = function (shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n  this._commandStack.execute('shape.delete', context);\n};\nModeling.prototype.removeConnection = function (connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n  this._commandStack.execute('connection.delete', context);\n};\nModeling.prototype.replaceShape = function (oldShape, newShape, hints) {\n  var context = {\n    oldShape: oldShape,\n    newData: newShape,\n    hints: hints || {}\n  };\n  this._commandStack.execute('shape.replace', context);\n  return context.newShape;\n};\nModeling.prototype.alignElements = function (elements, alignment) {\n  var context = {\n    elements: elements,\n    alignment: alignment\n  };\n  this._commandStack.execute('elements.align', context);\n};\nModeling.prototype.resizeShape = function (shape, newBounds, minBounds, hints) {\n  var context = {\n    shape: shape,\n    newBounds: newBounds,\n    minBounds: minBounds,\n    hints: hints\n  };\n  this._commandStack.execute('shape.resize', context);\n};\nModeling.prototype.createSpace = function (movingShapes, resizingShapes, delta, direction, start) {\n  var context = {\n    delta: delta,\n    direction: direction,\n    movingShapes: movingShapes,\n    resizingShapes: resizingShapes,\n    start: start\n  };\n  this._commandStack.execute('spaceTool', context);\n};\nModeling.prototype.updateWaypoints = function (connection, newWaypoints, hints) {\n  var context = {\n    connection: connection,\n    newWaypoints: newWaypoints,\n    hints: hints || {}\n  };\n  this._commandStack.execute('connection.updateWaypoints', context);\n};\nModeling.prototype.reconnect = function (connection, source, target, dockingOrPoints, hints) {\n  var context = {\n    connection: connection,\n    newSource: source,\n    newTarget: target,\n    dockingOrPoints: dockingOrPoints,\n    hints: hints || {}\n  };\n  this._commandStack.execute('connection.reconnect', context);\n};\nModeling.prototype.reconnectStart = function (connection, newSource, dockingOrPoints, hints) {\n  if (!hints) {\n    hints = {};\n  }\n  this.reconnect(connection, newSource, connection.target, dockingOrPoints, assign(hints, {\n    docking: 'source'\n  }));\n};\nModeling.prototype.reconnectEnd = function (connection, newTarget, dockingOrPoints, hints) {\n  if (!hints) {\n    hints = {};\n  }\n  this.reconnect(connection, connection.source, newTarget, dockingOrPoints, assign(hints, {\n    docking: 'target'\n  }));\n};\nModeling.prototype.connect = function (source, target, attrs, hints) {\n  return this.createConnection(source, target, attrs || {}, source.parent, hints);\n};\nModeling.prototype._create = function (type, attrs) {\n  if (attrs instanceof Base) {\n    return attrs;\n  } else {\n    return this._elementFactory.create(type, attrs);\n  }\n};\nModeling.prototype.toggleCollapse = function (shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n  this._commandStack.execute('shape.toggleCollapse', context);\n};","map":null,"metadata":{},"sourceType":"module"}