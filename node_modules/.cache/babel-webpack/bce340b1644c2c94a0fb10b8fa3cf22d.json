{"ast":null,"code":"import { of, Subject } from 'rxjs';\nimport * as Highcharts from \"highcharts\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared-utils/date-utils.service\";\nimport * as i2 from \"src/app-services/translate.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../issues/service/issue.service\";\nrequire('highcharts/highcharts-more.js')(Highcharts);\nexport let HomeChartOptionsService = /*#__PURE__*/(() => {\n  class HomeChartOptionsService {\n    constructor(dateUtils, translateService, router, issueService) {\n      this.dateUtils = dateUtils;\n      this.translateService = translateService;\n      this.router = router;\n      this.issueService = issueService;\n      this.filterDays = '7';\n      this.filterDays$ = new Subject();\n      this.systemStatusData$ = new Subject();\n      this.commonHighChartOptions = {\n        exporting: {\n          enabled: false\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: ''\n        },\n        responsive: {\n          rules: [{\n            condition: {},\n            chartOptions: {\n              chart: {\n                color: '#4c4c4c'\n              },\n              subtitle: {\n                text: null\n              },\n              navigator: {\n                enabled: false\n              }\n            }\n          }]\n        }\n      };\n      this.lineChartColors = ['#b3d974', '#fd9e4c', '#fc6784'];\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n    }\n    getNetworkAvailabilityOptions(cData, yLabel, showLegend) {\n      let categories = [],\n        outage = [],\n        degrade = [];\n      let chartData = [];\n      var that = this;\n      if (cData.length) {\n        cData = this.sortByTimestamp(cData, 'time');\n        cData.forEach(e => {\n          categories.push(this.dateUtils.getChartFormatDate(e.time, 'M/d/yy', true));\n          outage.push(e.outage);\n          degrade.push(e.degrade);\n        });\n        chartData;\n      }\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          },\n          plotBorderWidth: 1\n        },\n        colors: ['#0027FF', '#5ACFEA'],\n        title: {\n          text: null\n        },\n        xAxis: [{\n          min: 0,\n          gridLineWidth: 1,\n          categories: categories,\n          tickInterval: 5\n          //crosshair: true,\n        }],\n        yAxis: [{\n          min: 0,\n          allowDecimals: true,\n          // labels: {\n          //   formatter: function () {\n          //     //var maxElement = Math.abs(this.axis.min);\n          //     var maxElement = Math.abs(this.axis.max);\n          //     var unit = that.getStackedUnit(maxElement);\n          //     var m = this.value;\n          //     m = Math.abs(m);\n          //     let displayValue = (m / unit[0]).toFixed(2);\n          //     return (displayValue == '0.00' ? '0' : displayValue) + ' ' + unit[1];\n          //   },\n          // },\n          title: {\n            text: yLabel && this.language ? this.language[yLabel] : yLabel ? yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        legend: {\n          symbol: 'square',\n          enabled: showLegend ? true : false\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true\n        },\n        series: [{\n          name: `${this.language['Service Outage']}`,\n          data: outage\n          //color: '#35c7fc'\n        }, {\n          name: `${this.language['Service Degradation']}`,\n          data: degrade\n          //color: '#F7C343',\n          //yAxis: 1,\n        }],\n\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            //pointPadding: 2, // Defaults to 0.1\n            // groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            pointPlacement: 'on',\n            point: {\n              events: {}\n            }\n          },\n          states: {\n            inactive: {\n              enabled: false\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n          }]\n        }\n      });\n      return options;\n    }\n    getCommonSubscribersChartOptions(cData, yLabel, showLegend) {\n      // let last_index = cData.categories.length - 1\n      // if (cData.categories.length == 30) {\n      //   var val = last_index + 1;\n      //   cData.categories[val] = cData.categories[last_index];\n      //   cData.series[0].data[val] = cData.series[0].data[last_index];\n      // }\n      let that = this;\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          },\n          plotBorderWidth: 1\n        },\n        colors: ['#0027FF', '#5ACFEA', '#b926f0', '#FF8238', '#029A7C', '#F7C343', '#FF489D'],\n        title: {\n          text: null\n        },\n        xAxis: [{\n          min: 0,\n          gridLineWidth: 1,\n          categories: cData.categories,\n          labels: {\n            rotation: -25\n          },\n          //tickInterval: 5,\n          tickmarkPlacement: 'on',\n          tickInterval: function () {\n            let sLength = cData.series ? cData.series.length : 0;\n            let xCategLength = cData.categories ? cData.categories.length : 0;\n            let xAxisLen = Math.floor(xCategLength / sLength);\n            let f = 1;\n            if (xCategLength <= 6) {\n              f = 1;\n            } else if (xCategLength > 6 && xCategLength < 13) {\n              f = 2;\n            } else {\n              f = Math.floor(xCategLength / 6) ? Math.floor(xCategLength / 6) : 1;\n            }\n            return f;\n          }()\n          //crosshair: true,\n        }],\n        yAxis: [{\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          // labels: {\n          //   formatter: function () {\n          //     //var maxElement = Math.abs(this.axis.min);\n          //     var maxElement = Math.abs(this.axis.max);\n          //     var unit = that.getStackedUnit(maxElement);\n          //     var m = this.value;\n          //     m = Math.abs(m);\n          //     let displayValue = (m / unit[0]).toFixed(2);\n          //     return (displayValue == '0.00' ? '0' : displayValue) + ' ' + unit[1];\n          //   },\n          // },\n          title: {\n            text: yLabel && this.language ? this.language[yLabel] : yLabel ? yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        lang: {\n          noData: that.language[\"No Data Available\"]\n        },\n        legend: {\n          symbol: 'square',\n          enabled: showLegend ? true : false\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true\n        },\n        series: [...cData.series],\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            //pointPadding: 2, // Defaults to 0.1\n            groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            pointPlacement: 'on',\n            point: {\n              events: {}\n            }\n          },\n          states: {\n            inactive: {\n              enabled: false\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n          }]\n        }\n      });\n      return of(options);\n    }\n    /////\n    getCommonSubscribersChart30recordsOptions(cData, yLabel, showLegend) {\n      let that = this;\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          },\n          plotBorderWidth: 1\n        },\n        colors: ['#0027FF', '#5ACFEA', '#b926f0', '#FF8238', '#029A7C', '#F7C343', '#FF489D'],\n        title: {\n          text: null\n        },\n        xAxis: [{\n          min: 0,\n          gridLineWidth: 1,\n          categories: cData.categories,\n          labels: {\n            rotation: -25\n          },\n          //tickInterval: 5,\n          tickmarkPlacement: 'on',\n          showLastLabel: true,\n          tickPositions: [0, 5, 10, 15, 20, 25, 29],\n          tickInterval: function () {\n            let sLength = cData.series ? cData.series.length : 0;\n            let xCategLength = cData.categories ? cData.categories.length : 0;\n            let xAxisLen = Math.floor(xCategLength / sLength);\n            let f = 1;\n            if (xCategLength <= 6) {\n              f = 1;\n            } else if (xCategLength > 6 && xCategLength < 13) {\n              f = 2;\n            } else {\n              f = Math.floor(xCategLength / 6) ? Math.floor(xCategLength / 6) : 1;\n            }\n            return f;\n          }()\n          //crosshair: true,\n        }],\n        yAxis: [{\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          // labels: {\n          //   formatter: function () {\n          //     //var maxElement = Math.abs(this.axis.min);\n          //     var maxElement = Math.abs(this.axis.max);\n          //     var unit = that.getStackedUnit(maxElement);\n          //     var m = this.value;\n          //     m = Math.abs(m);\n          //     let displayValue = (m / unit[0]).toFixed(2);\n          //     return (displayValue == '0.00' ? '0' : displayValue) + ' ' + unit[1];\n          //   },\n          // },\n          title: {\n            text: yLabel && this.language ? this.language[yLabel] : yLabel ? yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        lang: {\n          noData: that.language[\"No Data Available\"]\n        },\n        legend: {\n          symbol: 'square',\n          enabled: showLegend ? true : false\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true\n        },\n        series: [...cData.series],\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            //pointPadding: 2, // Defaults to 0.1\n            groupPadding: 0.1,\n            marker: {\n              enabled: false\n            },\n            pointPlacement: 'on',\n            point: {\n              events: {}\n            }\n          },\n          states: {\n            inactive: {\n              enabled: false\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n          }]\n        }\n      });\n      return of(options);\n    }\n    getColumnChartOption(cData, yLabel, showLegend) {\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'column',\n          inverted: true,\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          }\n        },\n        colors: ['#0027FF', '#5ACFEA', '#fd9e4c', '#CBC75F'],\n        title: {\n          text: this.language && this.language['Firmware Image Count (%) / Model'] ? this.language['Firmware Image Count (%) / Model'] : 'Firmware Image Count (%) / Model',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          }\n        },\n        xAxis: {\n          categories: [...cData.categories],\n          title: {\n            text: 'Model'\n          }\n        },\n        yAxis: {\n          opposite: true,\n          min: 0,\n          title: {\n            text: null\n          },\n          stackLabels: {\n            enabled: true,\n            style: {\n              fontWeight: 'bold'\n              // color: ( // theme\n              //   Highcharts.defaultOptions.title.style &&\n              //   Highcharts.defaultOptions.title.style.color\n              // ) || 'gray'\n            }\n          }\n        },\n\n        legend: {\n          enabled: false\n        },\n        tooltip: {\n          headerFormat: '<b>{point.x}</b><br/>',\n          pointFormat: '{series.name}: {point.y}<br/>Total: {point.stackTotal}'\n        },\n        plotOptions: {\n          column: {\n            stacking: 'normal',\n            dataLabels: {\n              enabled: true\n            }\n          }\n        },\n        series: [{\n          data: [...cData.series]\n        }]\n      });\n      return of(options);\n    }\n    sortByTimestamp(list, key) {\n      list === null || list === void 0 ? void 0 : list.sort(function (x, y) {\n        x[key] = x[key] ? parseInt(x[key]) : 0;\n        y[key] = y[key] ? parseInt(y[key]) : 0;\n        return x[key] - y[key];\n      });\n      return list;\n    }\n    getOptions(cData, yLabel, showLegend) {\n      let categories = [],\n        outage = [],\n        degrade = [];\n      if (cData && cData['loss-of-pon'] && cData['loss-of-pon'].length) {\n        let data = cData['loss-of-pon'];\n        data.forEach(e => {\n          categories.push(this.dateUtils.getChartFormatDate(e.epochtime, 'M/d/yy', true));\n          outage.push(e.count);\n          //degrade.push(e.count);\n        });\n      }\n\n      if (cData && cData['ont-us-sdber']) {\n        let length = cData['ont-us-sdber'].length;\n        for (let i = 0; i < length; i++) {\n          degrade.push(cData['ont-us-sdber'][i].count);\n        }\n      }\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          },\n          plotBorderWidth: 1\n        },\n        colors: ['#0027FF', '#5ACFEA'],\n        title: {\n          text: null\n        },\n        xAxis: [{\n          min: 0,\n          gridLineWidth: 1,\n          categories: categories\n          //tickInterval: 5,\n          //crosshair: true,\n        }],\n        yAxis: [{\n          min: 0,\n          allowDecimals: false,\n          title: {\n            text: yLabel ? this.language[yLabel] || yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        legend: {\n          symbolRadius: 100\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true\n        },\n        series: [{\n          name: `${this.language['Service Outage']}`,\n          data: outage\n          //color: '#35c7fc'\n        }, {\n          name: `${this.language['Service Degradation']}`,\n          data: degrade\n          //color: '#F7C343',\n          //yAxis: 1,\n        }],\n\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            //pointPadding: 2, // Defaults to 0.1\n            // groupPadding: 0.1,\n            marker: {\n              enabled: categories.length == 1 ? true : false,\n              symbol: 'circle',\n              radius: 2,\n              states: {\n                hover: {\n                  enabled: true\n                }\n              }\n            },\n            pointPlacement: 'on',\n            point: {\n              events: {}\n            }\n          },\n          states: {\n            inactive: {\n              enabled: false\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n          }]\n        }\n      });\n      return options;\n    }\n    getBarOptions(cData, yLabel, showLegend) {\n      let categories = [],\n        outage = [];\n      if (cData && cData['loss-of-pon'] && cData['loss-of-pon'].length) {\n        let data = cData['loss-of-pon'];\n        data.forEach(e => {\n          categories.push(this.dateUtils.getChartFormatDate(e.epochtime, 'M/d/yy', true));\n          outage.push(e.count ? e.count : 0);\n          //degrade.push(e.count);\n        });\n      }\n\n      let that = this;\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'column',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          }\n        },\n        colors: ['#0027FF', '#5ACFEA'],\n        title: {\n          text: null\n        },\n        xAxis: {\n          categories: categories\n        },\n        yAxis: [{\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: yLabel ? this.language[yLabel] || yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        legend: {\n          symbolRadius: 100\n        },\n        lang: {\n          noData: !(outage === null || outage === void 0 ? void 0 : outage.length) ? this.language[\"No Data Available\"] : \" \"\n        },\n        series: [{\n          name: `${this.language['Loss of PON Alarms'] || 'Loss of PON Alarms'}`,\n          data: outage\n        }],\n        plotOptions: {\n          column: {\n            pointPadding: 0.2,\n            borderWidth: 0\n          },\n          series: {\n            minPointLength: 3,\n            cursor: 'pointer',\n            point: {\n              events: {\n                click: function () {\n                  let xAxisValue = this.category;\n                  that.navigateByUrl(cData, xAxisValue, 'serviceDisruption');\n                }\n              }\n            }\n          }\n        },\n        tooltip: {\n          formatter: function () {\n            return `<span style=\"font-size:10px\">${this.point.category}</span><table><tr><td style=\"color:${this.series.color};padding:0\">${this.series.name}: </td><td style=\"padding:0\"> &nbsp ${Highcharts.numberFormat(this.point.y, 0, '', '')}</td></tr></table>`;\n          },\n          useHTML: true\n        }\n      });\n      if ((categories === null || categories === void 0 ? void 0 : categories.length) === 30) {\n        options.xAxis.labels = {\n          step: 1,\n          rotation: -60\n        };\n      }\n      return options;\n    }\n    navigateByUrl(data, xAxisValue, type) {\n      let url = ``,\n        filters = {};\n      if (type == 'serviceDisruption') {\n        url = `cco/alerts/system/history-reports`;\n        let fields = {\n          date: [new Date(xAxisValue), new Date(xAxisValue)]\n        };\n        let diffDays = this.issueService.getDateParam(fields, false);\n        let diffDates = diffDays === null || diffDays === void 0 ? void 0 : diffDays.split(',');\n        let FromDate, ToDate;\n        if (diffDates && diffDates.length > 0) {\n          FromDate = new Date(Number(diffDates[0]));\n          ToDate = new Date(Number(diffDates[1]));\n        }\n        filters = {\n          date: [FromDate, ToDate],\n          eventName: ['loss-of-pon']\n        };\n      }\n      this.router.navigate([url], {\n        state: {\n          filters: filters\n        }\n      });\n    }\n    getSubscriberOptions(cData, yLabel, showLegend) {\n      let categories = [],\n        outage = [],\n        degrade = [];\n      let chartData = [];\n      var that = this;\n      if (cData && cData['subscriber'] && cData['subscriber'].length) {\n        let data = cData['subscriber'];\n        data.forEach(e => {\n          categories.push(this.dateUtils.getChartFormatDate(e.epochtime, 'M/d/yy', true));\n          outage.push(e.count);\n          //degrade.push(e.count);\n        });\n      }\n\n      if (cData && cData['serviceDegrade']) {\n        let length = cData['serviceDegrade'].length;\n        if (!categories.length) {\n          for (let i = 0; i < length; i++) {\n            categories.push(this.dateUtils.getChartFormatDate(cData['serviceDegrade'][i].epochtime, 'M/d/yy', true));\n          }\n        }\n        for (let i = 0; i < length; i++) {\n          degrade.push(cData['serviceDegrade'][i].count);\n        }\n      }\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'line',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          },\n          plotBorderWidth: 1\n        },\n        colors: ['#0027FF', '#5ACFEA'],\n        title: {\n          text: null\n        },\n        xAxis: [{\n          min: 0,\n          gridLineWidth: 1,\n          categories: categories\n          //tickInterval: 5,\n          //crosshair: true,\n        }],\n        yAxis: [{\n          min: 0,\n          allowDecimals: false,\n          title: {\n            text: yLabel ? this.language[yLabel] || yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        legend: {\n          symbolRadius: 100\n        },\n        tooltip: {\n          shared: true,\n          crosshairs: true,\n          useHTML: true\n          // formatter: function () {\n          //   var s = '<b>' + this.x + '</b>';\n          //   this.points.forEach(point => {\n          //     //  s += '<br/><span style=\"color:' + point.color + '\">\\u25CF</span> ' + 'Number of Subscribers' + ': ' + point.y;\n          //   });\n          //   return s;\n          // },\n        },\n        series: [{\n          name: `${this.language['Number of Subscribers Impacted']}`,\n          data: outage\n        }, {\n          name: `${this.language['Service Degradation']}`,\n          data: degrade\n        }],\n        plotOptions: {\n          series: {\n            // ...this.plotOptions,\n            cursor: 'pointer',\n            //pointPadding: 2, // Defaults to 0.1\n            // groupPadding: 0.1,\n            marker: {\n              enabled: categories.length == 1 ? true : false,\n              symbol: 'circle',\n              radius: 2,\n              states: {\n                hover: {\n                  enabled: true\n                }\n              }\n            },\n            pointPlacement: 'on',\n            point: {\n              events: {}\n            }\n          },\n          states: {\n            inactive: {\n              enabled: false\n            }\n          }\n        },\n        responsive: {\n          rules: [{\n            condition: {}\n          }]\n        }\n      });\n      return options;\n    }\n    getSubscriberBarOptions(cData, yLabel, showLegend) {\n      let categories = [],\n        outage = [];\n      if (cData && cData['subscriber'] && cData['subscriber'].length) {\n        let data = cData['subscriber'];\n        data.forEach(e => {\n          categories.push(this.dateUtils.getChartFormatDate(e.epochtime, 'M/d/yy', true));\n          outage.push(e.count ? e.count : 0);\n          //degrade.push(e.count);\n        });\n      }\n\n      let that = this;\n      let options = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'column',\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '12px',\n            color: '#4c4c4c'\n          }\n        },\n        colors: ['#0027FF', '#5ACFEA'],\n        title: {\n          text: null\n        },\n        xAxis: {\n          categories: categories\n          // showLastLabel: true,\n          // endOnTick: false,\n        },\n        yAxis: [{\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: yLabel ? this.language[yLabel] || yLabel : '',\n            style: {\n              color: '#727272'\n            }\n          },\n          style: {\n            fontFamily: 'Source Sans Pro,Regular',\n            fontSize: '13px',\n            color: '#4c4c4c'\n          }\n        }],\n        legend: {\n          symbolRadius: 100\n        },\n        lang: {\n          noData: !(outage === null || outage === void 0 ? void 0 : outage.length) ? this.language[\"No Data Available\"] : \"\"\n        },\n        series: [{\n          name: `${this.language['Subscribers affected by ONT or PON Alarms'] || 'Subscribers affected by ONT or PON Alarms'}`,\n          data: outage\n        }],\n        plotOptions: {\n          column: {\n            pointPadding: 0.2,\n            borderWidth: 0\n          },\n          series: {\n            minPointLength: 3,\n            cursor: 'pointer',\n            point: {\n              events: {}\n            }\n          }\n        },\n        tooltip: {\n          formatter: function () {\n            return `<span style=\"font-size:10px\">${this.point.category}</span><table><tr><td style=\"color:${this.series.color};padding:0\">${this.series.name}: </td><td style=\"padding:0\"> &nbsp ${Highcharts.numberFormat(this.point.y, 0, '', '')}</td></tr></table>`;\n          },\n          useHTML: true\n        }\n      });\n      if ((categories === null || categories === void 0 ? void 0 : categories.length) === 30) {\n        options.xAxis.labels = {\n          step: 1,\n          rotation: -60\n        };\n      }\n      return options;\n    }\n    setFilterDays(value) {\n      this.filterDays = value;\n      this.filterDays$.next(value);\n    }\n    setSystemStatusData(data) {\n      this.systemStatusData$.next(data);\n    }\n    loadSystemStatusData() {}\n    setpercentage(a, b, degit) {\n      //return ((100 * ((a - b) / ((a + b) / 2))).toFixed(degit ? degit : 0))\n      return (100 * ((a - b) / b)).toFixed(degit ? degit : 2);\n    }\n    checkPositvNegativ(returnqlickdata) {\n      if (returnqlickdata == '0') {\n        return '+';\n      }\n      if (returnqlickdata.charAt(0) == '-') return '-';else return '+';\n    }\n  }\n  HomeChartOptionsService.ɵfac = function HomeChartOptionsService_Factory(t) {\n    return new (t || HomeChartOptionsService)(i0.ɵɵinject(i1.DateUtilsService), i0.ɵɵinject(i2.TranslateService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.IssueService));\n  };\n  HomeChartOptionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HomeChartOptionsService,\n    factory: HomeChartOptionsService.ɵfac,\n    providedIn: 'root'\n  });\n  return HomeChartOptionsService;\n})();","map":null,"metadata":{},"sourceType":"module"}