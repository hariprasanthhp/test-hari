{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    //'X-Calix-Username': 'admin@calix.com'\n  })\n};\nexport let CallOutComeService = /*#__PURE__*/(() => {\n  class CallOutComeService {\n    // public addRole: string;\n    // public addUsers: string;\n    // public users: string;\n    constructor(httpClient, Sso) {\n      this.httpClient = httpClient;\n      this.Sso = Sso;\n      this.baseURL = environment.SUPPORT_URL;\n      this.org_id = environment.faAdminOrgId;\n      this.callOutComeStartTime = null;\n      this.subscriberId = null;\n      this.escalationEmail = null;\n      //    this.addRole = this.baseURL + 'role';\n      //this.addUsers = this.baseURL + 'role';\n      //this.users = this.baseURL + 'users';\n    }\n\n    GetStatuses(orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.httpClient.get(`${this.baseURL}/statuses`, httpOptions).pipe(catchError(this.handleError));\n    }\n    CreateStatus(params) {\n      return this.httpClient.put(`${this.baseURL}/call/status`, params, httpOptions).pipe(catchError(this.handleError));\n    }\n    UpdateStatus(params, statusName) {\n      let res = `${this.baseURL}/call/status?editingStatus=${statusName}`;\n      let uri = encodeURI(res);\n      return this.httpClient.post(uri, params, httpOptions).pipe(catchError(this.handleError));\n    }\n    RestoreStatus(params, orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.httpClient.put(`${this.baseURL}/call/status/restore?${ID}statusNames=${params}`, {}, httpOptions).pipe(catchError(this.handleError));\n    }\n    DeleteStatus(orgId, name) {\n      const ID = this.Sso.getOrg(orgId);\n      let res = `${this.baseURL}/call/status?${ID}name=${name}`;\n      let uri = encodeURI(res);\n      return this.httpClient.delete(uri, httpOptions).pipe(catchError(this.handleError));\n    }\n    CallOutCome(params) {\n      return this.httpClient.put(`${this.baseURL}/calloutcome`, params, httpOptions).pipe(catchError(this.handleError));\n    }\n    GetCallHistory(orgId, subscriberId, csrId, page, size) {\n      /* csrId removed based on CCL-33739 */\n      const ID = this.Sso.getOrg(orgId);\n      return this.httpClient.get(`${this.baseURL}/calloutcome/history?subscriberId=${subscriberId}&page=${page}&pagesize=${size}`, httpOptions).pipe(catchError(this.handleError));\n    }\n    updateCommandIQEmails(Obj) {\n      return this.httpClient.put(`${this.baseURL}/smbiq/account/email`, Obj);\n    }\n    subscriberImpactedOutages(subscriberId) {\n      return this.httpClient.get(`${environment.API_BASE_URL}analytics-engine/cscSubscriberOutage/${subscriberId}`, httpOptions).pipe(catchError(this.handleError));\n    }\n    deleteCommandIQEmails(userId, isPrimary) {\n      return this.httpClient.delete(`${this.baseURL}/smbiq/account?userId=${userId}&isPrimary=${isPrimary}`);\n    }\n    Savepasspharseauditlog(request) {\n      //https://stage.api.calix.ai/v1/csc/useraudit/saveAuditLog\n      return this.httpClient.post(`${environment.API_BASE_URL}csc/useraudit/saveAuditLog`, request);\n    }\n    // /device/{orgId}/{deviceId}/deviceinfo\n    UpdateNotes(params) {\n      return this.httpClient.post(`${this.baseURL}/call/calloutcome/note`, params, httpOptions).pipe(catchError(this.handleError));\n    }\n    GetNotes(ticketId) {\n      return this.httpClient.get(`${this.baseURL}/call/calloutcome/note?ticketId=${ticketId}`, httpOptions).pipe(catchError(this.handleError));\n    }\n    showAndHideTicketNumber(orgid) {\n      return this.httpClient.get(`${this.baseURL}/call/calloutcome/extrefconfig/nisc?orgId=${orgid}`, httpOptions).pipe(catchError(this.handleError));\n    }\n    loadstatustypes() {\n      return this.httpClient.get(`${this.baseURL}/call/calloutcome/loadstatustypes`, httpOptions).pipe(catchError(this.handleError));\n    }\n    // public ServiceLimit(endpoint_id): Promise<any> {\n    //     return this.httpClient.get(`${this.baseURL}/subscriber/single-subscriber-usage'?endpoint-id=${endpoint_id}&month=6&`).toPromise()\n    //         .then((res) => { console.log(res); return res; });\n    // }\n    // getCustomerNameByCustomerID(id): Promise<string> {\n    //     return this.httpClient.get(this.baseURL +\n    //       'search/prioritySearch/id?orgId=' + this.ssoAuthService.getOrgId() + '&filter=\"' + id, { responseType: 'text' })\n    //       .toPromise()\n    //       .then((res) => { console.log(res); return res; });\n    //   }\n    handleError(error) {\n      return throwError(error);\n    }\n    pageErrorHandle(err) {\n      var _a, _b;\n      if (typeof err === 'string' && err) {\n        return err;\n      }\n      let errorInfo;\n      if ((_a = err === null || err === void 0 ? void 0 : err.error) === null || _a === void 0 ? void 0 : _a.errorDesc) {\n        errorInfo = `${(_b = err === null || err === void 0 ? void 0 : err.error) === null || _b === void 0 ? void 0 : _b.errorDesc}`;\n      } else if (err.error != undefined && err.error != null && typeof err.error == 'string') {\n        errorInfo = `${err.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.error != undefined && typeof err.error.error == 'string') {\n        // console.log('1408', `${err.error.error}`);\n        errorInfo = `${err.error.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'string') {\n        errorInfo = `${err.error.fault}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'object' && err.error.fault.faultstring != undefined && typeof err.error.fault.faultstring == 'string') {\n        errorInfo = `${err.error.fault.faultstring}`;\n      } else if (err.error && err.error.errorMessage) {\n        errorInfo = err.error.errorMessage;\n      } else if (err.statusText == 'Unknown Error' && err.status == '0') {\n        // errorInfo = \"Unknown Error - Please refresh the page\"; // remove later\n        errorInfo = \"An unknown error has occurred. Refresh the page to try again\";\n      } else if (err.error != undefined) {\n        errorInfo = `${err.error.message}`;\n      } else {\n        errorInfo = `${err.message}`;\n      }\n      return errorInfo != 'undefined' && errorInfo.length ? errorInfo : Object.values(this.flatten(err)).join(' - ');\n    }\n    flatten(obj) {\n      let flattenedObject = {};\n      try {\n        this.traverseAndFlatten(obj, flattenedObject);\n      } catch (ex) {\n        flattenedObject = {};\n      }\n      return flattenedObject;\n    }\n    traverseAndFlatten(currentNode, target, flattenedKey) {\n      for (var key in currentNode) {\n        if (currentNode.hasOwnProperty(key)) {\n          var newKey;\n          if (flattenedKey === undefined) {\n            newKey = key;\n          } else {\n            newKey = flattenedKey + '.' + key;\n          }\n          var value = currentNode[key];\n          if (typeof value === \"object\") {\n            this.traverseAndFlatten(value, target, newKey);\n          } else {\n            target[newKey] = value;\n          }\n        }\n      }\n    }\n    updateOutcomeTimer(Obj, sec) {\n      return this.httpClient[sec ? 'put' : 'delete'](`${this.baseURL}/call/calloutcome/abort-timer`, Obj);\n    }\n    getOutcomeTimer(orgId) {\n      return this.httpClient.get(`${this.baseURL}/call/calloutcome/abort-timer?orgId=${orgId}`).pipe(catchError(this.handleError));\n    }\n  }\n  CallOutComeService.ɵfac = function CallOutComeService_Factory(t) {\n    return new (t || CallOutComeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  CallOutComeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CallOutComeService,\n    factory: CallOutComeService.ɵfac,\n    providedIn: 'root'\n  });\n  return CallOutComeService;\n})();","map":null,"metadata":{},"sourceType":"module"}