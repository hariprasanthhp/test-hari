{"ast":null,"code":"import inherits from 'inherits';\nimport { find, isArray, matchPattern, some } from 'min-dash';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { add as collectionAdd, remove as collectionRemove } from 'diagram-js/lib/util/Collections';\nimport { getBusinessObject, is } from '../../../util/ModelUtil';\nimport { isAny } from '../util/ModelingUtil';\nimport { hasEventDefinition } from '../../../util/DiUtil';\nvar LOW_PRIORITY = 500;\n\n/**\r\n * Add referenced root elements (error, escalation, message, signal) if they don't exist.\r\n * Copy referenced root elements on copy & paste.\r\n */\nexport default function RootElementReferenceBehavior(bpmnjs, eventBus, injector, moddleCopy, bpmnFactory) {\n  injector.invoke(CommandInterceptor, this);\n  function canHaveRootElementReference(element) {\n    return isAny(element, ['bpmn:ReceiveTask', 'bpmn:SendTask']) || hasAnyEventDefinition(element, ['bpmn:ErrorEventDefinition', 'bpmn:EscalationEventDefinition', 'bpmn:MessageEventDefinition', 'bpmn:SignalEventDefinition']);\n  }\n  function hasRootElement(rootElement) {\n    var definitions = bpmnjs.getDefinitions(),\n      rootElements = definitions.get('rootElements');\n    return !!find(rootElements, matchPattern({\n      id: rootElement.id\n    }));\n  }\n  function getRootElementReferencePropertyName(eventDefinition) {\n    if (is(eventDefinition, 'bpmn:ErrorEventDefinition')) {\n      return 'errorRef';\n    } else if (is(eventDefinition, 'bpmn:EscalationEventDefinition')) {\n      return 'escalationRef';\n    } else if (is(eventDefinition, 'bpmn:MessageEventDefinition')) {\n      return 'messageRef';\n    } else if (is(eventDefinition, 'bpmn:SignalEventDefinition')) {\n      return 'signalRef';\n    }\n  }\n  function getRootElement(businessObject) {\n    if (isAny(businessObject, ['bpmn:ReceiveTask', 'bpmn:SendTask'])) {\n      return businessObject.get('messageRef');\n    }\n    var eventDefinitions = businessObject.get('eventDefinitions'),\n      eventDefinition = eventDefinitions[0];\n    return eventDefinition.get(getRootElementReferencePropertyName(eventDefinition));\n  }\n  function setRootElement(businessObject, rootElement) {\n    if (isAny(businessObject, ['bpmn:ReceiveTask', 'bpmn:SendTask'])) {\n      return businessObject.set('messageRef', rootElement);\n    }\n    var eventDefinitions = businessObject.get('eventDefinitions'),\n      eventDefinition = eventDefinitions[0];\n    return eventDefinition.set(getRootElementReferencePropertyName(eventDefinition), rootElement);\n  }\n\n  // create shape\n  this.executed('shape.create', function (context) {\n    var shape = context.shape;\n    if (!canHaveRootElementReference(shape)) {\n      return;\n    }\n    var businessObject = getBusinessObject(shape),\n      rootElement = getRootElement(businessObject),\n      rootElements;\n    if (rootElement && !hasRootElement(rootElement)) {\n      rootElements = bpmnjs.getDefinitions().get('rootElements');\n\n      // add root element\n      collectionAdd(rootElements, rootElement);\n      context.addedRootElement = rootElement;\n    }\n  }, true);\n  this.reverted('shape.create', function (context) {\n    var addedRootElement = context.addedRootElement;\n    if (!addedRootElement) {\n      return;\n    }\n    var rootElements = bpmnjs.getDefinitions().get('rootElements');\n\n    // remove root element\n    collectionRemove(rootElements, addedRootElement);\n  }, true);\n  eventBus.on('copyPaste.copyElement', function (context) {\n    var descriptor = context.descriptor,\n      element = context.element;\n    if (!canHaveRootElementReference(element)) {\n      return;\n    }\n    var businessObject = getBusinessObject(element),\n      rootElement = getRootElement(businessObject);\n    if (rootElement) {\n      descriptor.referencedRootElement = rootElement;\n    }\n  });\n  eventBus.on('copyPaste.pasteElement', LOW_PRIORITY, function (context) {\n    var descriptor = context.descriptor,\n      businessObject = descriptor.businessObject;\n    if (!canHaveRootElementReference(businessObject)) {\n      return;\n    }\n    var referencedRootElement = descriptor.referencedRootElement;\n    if (!referencedRootElement) {\n      return;\n    }\n    if (!hasRootElement(referencedRootElement)) {\n      referencedRootElement = moddleCopy.copyElement(referencedRootElement, bpmnFactory.create(referencedRootElement.$type));\n    }\n    setRootElement(businessObject, referencedRootElement);\n  });\n}\nRootElementReferenceBehavior.$inject = ['bpmnjs', 'eventBus', 'injector', 'moddleCopy', 'bpmnFactory'];\ninherits(RootElementReferenceBehavior, CommandInterceptor);\n\n// helpers //////////\n\nfunction hasAnyEventDefinition(element, types) {\n  if (!isArray(types)) {\n    types = [types];\n  }\n  return some(types, function (type) {\n    return hasEventDefinition(element, type);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}