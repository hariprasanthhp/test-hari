{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let AddSubscriberService = /*#__PURE__*/(() => {\n  class AddSubscriberService {\n    constructor(http, sso) {\n      this.http = http;\n      this.sso = sso;\n      this.showCountStatus = new BehaviorSubject(false);\n      this.showCountStatus$ = this.showCountStatus.asObservable();\n      this.subsSystemStep = new Subject();\n      this.removeNull = obj => {\n        Object.keys(obj).forEach(key => obj[key] && typeof obj[key] === 'object' && this.removeNull(obj[key]) || (obj[key] === '' || obj[key] === null) && delete obj[key]);\n        return obj;\n      };\n    }\n    associateDevice(req, subid, systemid) {\n      return this.http.post(`${environment.FOUNDATION_SERVICES_URL}/subscribers/${subid}/devices?deviceId=${systemid}`, req);\n    }\n    deleteAndDisassociatedDevice(orgId, systemId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.delete(`${environment.FOUNDATION_BASE_URL}subscriber-systems?${ID}systemId=${systemId}`);\n    }\n    DeleteONT(serialNumber) {\n      return this.http.delete(`${environment.API_BASE_URL}/cnap/invmgr/discoveredonts/${serialNumber}`);\n    }\n    disassociateDevice(subid, systemId) {\n      return this.http.delete(`${environment.FOUNDATION_SERVICES_URL}subscribers/${subid}/devices/${systemId}`);\n    }\n    GetSubscriberData(orgId, subscriberId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber/${subscriberId}?${ID}queryByLocationId=false`);\n    }\n    deleteSubscriber(subscriberId, orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.delete(`${environment.SUPPORT_URL}/subscriber/${subscriberId}?${ID}`);\n    }\n    getDeleteAndFactoryreset(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/org-config/delete-and-factory-reset?${ID}`);\n    }\n    checkSubscriberCommunity(id, orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/mycommunityiq/subscriber?${ID}subscriberId=${id}`);\n    }\n    AddSubscriberData(orgId, request) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.post(`${environment.SUPPORT_URL}/subscriber?${ID}`, request);\n    }\n    performSearch(orgId, filter, pageNumber, pageSize) {\n      const params = new HttpParams()\n      // .set(\"orgId\", orgId)\n      .set(\"filter\", filter || \"\").set(\"pageNumber\", pageNumber).set(\"pageSize\", pageSize);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-search`, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n    UpdateSubscriberData(orgId, request, subscriberId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/subscriber/${subscriberId}?${ID}`, request);\n    }\n    updateEdgeSuitsData(orgId, systemInfo, params) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites?${ID}`;\n      if (systemInfo && systemInfo.sn) {\n        url = `${url}systemId=${systemInfo.sn}`;\n      } else if (systemInfo && systemInfo.subscriberId) {\n        url = `${url}subscriberId=${systemInfo.subscriberId}`;\n      }\n      return this.http.put(url, params);\n    }\n    callRestApi(endpoint, filters) {\n      return this.http.get(`${endpoint}`).pipe(catchError(this.handleError));\n    }\n    getDetailedSubscriberServices(subId) {\n      return this.http.get(`${environment.FOUNDATION_SERVICES_URL}subscribers/${subId}?includeDeviceData=false&includeDecommissionedDevices=false`);\n    }\n    getDialPlan(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-dp/dial-plan?${ID}`);\n    }\n    getSubscribersSystemList(systemInfo, iqEnabled) {\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems?`;\n      if (systemInfo && systemInfo.sn) {\n        url = `${url}systemId=${systemInfo.sn}`;\n      } else if (systemInfo && systemInfo.subscriberId) {\n        url = `${url}subscriberId=${systemInfo.subscriberId}`;\n      }\n      if (iqEnabled) {\n        url = `${url}&includeEnabledStatus=true`;\n      }\n      return this.http.get(url);\n    }\n    saveServiceData(subId, request) {\n      let url = `${environment.FOUNDATION_SERVICES_URL}/subscribers/${subId}/services${request._id ? '/' + request._id : ''}`,\n        method = request._id || Object.keys(request).length === 1 && request.hasOwnProperty('_id') ? 'put' : 'post';\n      request = Object.assign({}, request);\n      delete request._id;\n      return Object.keys(request).length ? this.http[method](url, request) : this.http.delete(url);\n    }\n    UpdateServiceData(subId, request) {\n      return this.http.put(`${environment.COC_SERVICES_ACTIVATION_URL}/subscribers/${subId}`, request);\n    }\n    updateSubsSystemStepInfo(data) {\n      this.subsSystemStep.next(data);\n    }\n    factoryReset(orgId, params) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.put(`${environment.FOUNDATION_BASE_URL}/subscriber-systems/factory-reset?${ID}`, params);\n    }\n    doReboot(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.post(`${environment.SUPPORT_URL}/device-systools/reboot?${ID}serialNumber=${serialNumber}`, {});\n    }\n    doRebootforont(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.post(`${environment.API_BASE_URL}/cnap/invmgr/discoveredonts/${serialNumber}/reset?forced=true`, {});\n    }\n    redoServic(params) {\n      return this.http.post(`${environment.COC_SERVICES_ACTIVATION_URL}/retry`, params);\n    }\n    afterOntReboot(serialNumber) {\n      return this.http.get(`${environment.API_BASE_URL}nfa/onts?fsanMac=${serialNumber}`).pipe(catchError(this.handleError));\n    }\n    getBWProfile(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-config/configuration-profile?${ID}`);\n    }\n    getServicesStatus(subId) {\n      return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/subscribers/${subId}/services/status`);\n    }\n    getAllDatafSubscriber(orgId, subId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-summary/${subId}?${ID}`);\n    }\n    getProvisionrecord(orgId, systemId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-provisioning/provisioning-record?${ID}deviceId=${systemId}`);\n    }\n    getDeviceInfo(orgId, systemId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${systemId}/deviceinfo`);\n    }\n    GetVlanMode(dataplan) {\n      return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/serviceTemplates?name=${dataplan}`);\n    }\n    updateEnableApp(orgId, systemInfo, params) {\n      const ID = this.sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/iq-suites/container?${ID}systemId=${systemInfo.sn}`;\n      return this.http.put(url, params);\n    }\n    getOntDeviceStatus(serialNo) {\n      return this.http.get(`${environment.API_BASE_URL}nfa/onts?offset=0&limit=10&fsanMac=${serialNo}`).pipe(catchError(this.handleError));\n    }\n    fetchAmdins(type) {\n      if (type == 'All' || type == '' || type == 'undefined') {\n        return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/orgAdminData`).pipe(catchError(this.handleError));\n      } else {\n        return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/orgAdminData?serviceType=${type}`).pipe(catchError(this.handleError));\n      }\n    }\n    getSubscriberServices(subId) {\n      return this.http.get(`${environment.FOUNDATION_SERVICES_URL}subscribers/${subId}/services`);\n    }\n    deleteWarningSubscriber(orgId, subscriberId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscriber-systems/edge-suites/servify-contract?${ID}subscriberId=${subscriberId}`);\n    }\n    getGeomapAddress(subscriberId) {\n      return this.http.get(`${environment.FOUNDATION_BASE_URL}subscribers/${subscriberId}/geo-location`);\n    }\n    updateGeomapAddress(subscriberId) {\n      return this.http.put(`${environment.FOUNDATION_BASE_URL}subscribers/${subscriberId}/geo-location/update`, {});\n    }\n    GetInterface(name) {\n      return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/serviceDefinitions?name=${name}&profileDetails=true`);\n    }\n    GetServiceDefinition(name) {\n      return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/serviceDefinitions?serviceType=${name}`);\n    }\n    GetServiceProfile(name) {\n      return this.http.get(`${environment.COC_SERVICES_ACTIVATION_URL}/serviceTemplates/type?type=${name}`).pipe(catchError(this.handleError));\n    }\n    GetCscService() {\n      return this.http.get(`${environment.SUPPORT_URL}/netops-config/configuration-profile`);\n    }\n  }\n  AddSubscriberService.ɵfac = function AddSubscriberService_Factory(t) {\n    return new (t || AddSubscriberService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  AddSubscriberService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddSubscriberService,\n    factory: AddSubscriberService.ɵfac,\n    providedIn: 'root'\n  });\n  return AddSubscriberService;\n})();","map":null,"metadata":{},"sourceType":"module"}