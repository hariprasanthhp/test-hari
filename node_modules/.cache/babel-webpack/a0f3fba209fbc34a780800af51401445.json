{"ast":null,"code":"'use strict';\n\nvar nameEntryFactory = require('./implementation/Name'),\n  createCategoryValue = require('../../../helper/CategoryHelper').createCategoryValue,\n  is = require('bpmn-js/lib/util/ModelUtil').is,\n  getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;\nmodule.exports = function (group, element, bpmnFactory, canvas, translate, options) {\n  if (!options) {\n    options = {};\n  }\n  function initializeCategory(semantic) {\n    var rootElement = canvas.getRootElement(),\n      definitions = getBusinessObject(rootElement).$parent,\n      categoryValue = createCategoryValue(definitions, bpmnFactory);\n    semantic.categoryValueRef = categoryValue;\n  }\n  function setGroupName(element, values) {\n    var bo = getBusinessObject(element),\n      categoryValueRef = bo.categoryValueRef;\n    if (!categoryValueRef) {\n      initializeCategory(bo);\n    }\n\n    // needs direct call to update categoryValue properly\n    return {\n      cmd: 'element.updateLabel',\n      context: {\n        element: element,\n        newLabel: values.categoryValue\n      }\n    };\n  }\n  function getGroupName(element) {\n    var bo = getBusinessObject(element),\n      value = (bo.categoryValueRef || {}).value;\n    return {\n      categoryValue: value\n    };\n  }\n  if (!is(element, 'bpmn:Collaboration')) {\n    var nameOptions = {\n      id: options.id,\n      label: options.label && translate(options.label)\n    };\n    if (is(element, 'bpmn:TextAnnotation')) {\n      nameOptions.modelProperty = 'text';\n      nameOptions.label = translate('Text');\n    } else if (is(element, 'bpmn:Group')) {\n      nameOptions.modelProperty = 'categoryValue';\n      nameOptions.label = translate('Category Value');\n      nameOptions.get = getGroupName;\n      nameOptions.set = setGroupName;\n    }\n\n    // name\n    group.entries = group.entries.concat(nameEntryFactory(element, nameOptions, translate));\n  }\n};","map":null,"metadata":{},"sourceType":"script"}