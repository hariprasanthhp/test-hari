{"ast":null,"code":"import { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, forwardRef, Renderer2, NgZone, ElementRef, ViewChild, Input, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/// <reference types=\"select2\" />\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"selector\"];\nconst _c1 = [[[\"option\"], [\"optgroup\"]]];\nconst _c2 = [\"option, optgroup\"];\nlet NgSelect2Component = /*#__PURE__*/(() => {\n  class NgSelect2Component {\n    // private style = `CSS`;\n    constructor(renderer, zone, _element) {\n      this.renderer = renderer;\n      this.zone = zone;\n      this._element = _element;\n      // value for placeholder\n      this.placeholder = '';\n      this.dropdownParent = '';\n      this.allowClear = false;\n      // enable / disable select2\n      this.disabled = false;\n      // emitter when value is changed\n      this.valueChanged = new EventEmitter();\n      this.element = undefined;\n      this.check = false;\n      this.propagateChange = value => {};\n    }\n    ngDoCheck() {\n      if (!this.element) {\n        return;\n      }\n    }\n    ngOnInit() {\n      // if (this.cssImport) {\n      //   const head = document.getElementsByTagName('head')[0];\n      //   const link: any = head.children[head.children.length - 1];\n      //   if (!link.version) {\n      //     const newLink = this.renderer.createElement(head, 'style');\n      //     this.renderer.setElementProperty(newLink, 'type', 'text/css');\n      //     this.renderer.setElementProperty(newLink, 'version', 'select2');\n      //     this.renderer.setElementProperty(newLink, 'innerHTML', this.style);\n      //   }\n      // }\n    }\n    ngOnChanges(changes) {\n      if (!this.element) {\n        return;\n      }\n      if (changes['data'] && JSON.stringify(changes['data'].previousValue) !== JSON.stringify(changes['data'].currentValue)) {\n        this.initPlugin();\n        const newValue = this.value;\n        this.setElementValue(newValue);\n        this.valueChanged.emit(newValue);\n        this.propagateChange(newValue);\n      }\n      if (changes['value'] && changes['value'].previousValue !== changes['value'].currentValue) {\n        const newValue = changes['value'].currentValue;\n        this.setElementValue(newValue);\n        this.valueChanged.emit(newValue);\n        this.propagateChange(newValue);\n      }\n      if (changes['disabled'] && changes['disabled'].previousValue !== changes['disabled'].currentValue) {\n        this.renderer.setProperty(this.selector.nativeElement, 'disabled', this.disabled);\n      }\n      if (changes['placeholder'] && changes['placeholder'].previousValue !== changes['placeholder'].currentValue) {\n        this.element.data('select2').$container.find('.select2-selection__placeholder').text(this.placeholder);\n      }\n      if (changes['dropdownParent'] && changes['dropdownParent'].previousValue !== changes['dropdownParent'].currentValue) {\n        this.renderer.setAttribute(this.selector.nativeElement, 'data-dropdownParent', this.dropdownParent);\n      }\n      if (changes['allowClear'] && changes['allowClear'].previousValue !== changes['allowClear'].currentValue) {\n        this.renderer.setAttribute(this.selector.nativeElement, 'data-allow-clear', this.allowClear.toString());\n      }\n    }\n    ngAfterViewInit() {\n      this.element = jQuery(this.selector.nativeElement);\n      this.renderer.setAttribute(this.selector.nativeElement, 'data-dropdownParent', this.dropdownParent);\n      this.renderer.setAttribute(this.selector.nativeElement, 'data-allow-clear', this.allowClear.toString());\n      // console.log(this.selector.nativeElement);\n      this.initPlugin();\n      if (typeof this.value !== 'undefined') {\n        this.setElementValue(this.value);\n      }\n      this.element.on('select2:select select2:unselect', e => {\n        // const newValue: string = (e.type === 'select2:unselect') ? '' : this.element.val();\n        const newValue = this.element.val();\n        this.valueChanged.emit(newValue);\n        this.propagateChange(newValue);\n      });\n    }\n    ngOnDestroy() {\n      if (this.element) {\n        this.element.off('select2:select');\n      }\n    }\n    initPlugin() {\n      if (!this.element.select2) {\n        if (!this.check) {\n          this.check = true;\n          console.log('Please add Select2 library (js file) to the project.' + 'You can download it from https://github.com/select2/select2/tree/master/dist/js.');\n        }\n        return;\n      }\n      // If select2 already initialized remove him and remove all tags inside\n      if (this.element.hasClass('select2-hidden-accessible') === true) {\n        this.element.select2('destroy');\n        this.renderer.setProperty(this.selector.nativeElement, 'innerHTML', '');\n      }\n      let options = {\n        data: this.data,\n        width: this.width ? this.width : 'resolve',\n        placeholder: this.placeholder\n      };\n      if (this.dropdownParent) {\n        options = {\n          data: this.data,\n          width: this.width ? this.width : 'resolve',\n          dropdownParent: jQuery('#' + this.dropdownParent)\n        };\n      }\n      Object.assign(options, this.options);\n      if (options.matcher) {\n        jQuery.fn.select2.amd.require(['select2/compat/matcher'], oldMatcher => {\n          options.matcher = oldMatcher(options.matcher);\n          this.element.select2(options);\n          if (typeof this.value !== 'undefined') {\n            this.setElementValue(this.value);\n          }\n        });\n      } else {\n        this.element.select2(options);\n      }\n      this.renderer.setProperty(this.selector.nativeElement, 'disabled', this.disabled);\n    }\n    setElementValue(newValue) {\n      // this.zone.run(() => {\n      if (Array.isArray(newValue)) {\n        for (const option of this.selector.nativeElement.options) {\n          this.renderer.setProperty(option, 'selected', newValue.indexOf(option.value) > -1);\n        }\n      } else {\n        this.renderer.setProperty(this.selector.nativeElement, 'value', newValue);\n      }\n      if (this.element) {\n        this.element.trigger('change.select2');\n      }\n      // });\n    }\n\n    writeValue(value) {\n      if (value !== undefined) {\n        this.value = value;\n        this.setElementValue(value);\n      }\n    }\n    registerOnChange(fn) {\n      this.propagateChange = fn;\n    }\n    registerOnTouched() {}\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.renderer.setProperty(this.selector.nativeElement, 'disabled', this.disabled);\n    }\n  }\n  NgSelect2Component.ɵfac = function NgSelect2Component_Factory(t) {\n    return new (t || NgSelect2Component)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n  NgSelect2Component.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgSelect2Component,\n    selectors: [[\"ng-select2\"]],\n    viewQuery: function NgSelect2Component_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.selector = _t.first);\n      }\n    },\n    inputs: {\n      placeholder: \"placeholder\",\n      dropdownParent: \"dropdownParent\",\n      allowClear: \"allowClear\",\n      disabled: \"disabled\",\n      value: \"value\",\n      data: \"data\",\n      width: \"width\",\n      options: \"options\"\n    },\n    outputs: {\n      valueChanged: \"valueChanged\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgSelect2Component),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 3,\n    vars: 0,\n    consts: [[\"selector\", \"\"]],\n    template: function NgSelect2Component_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵelementStart(0, \"select\", null, 0);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NgSelect2Component;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgSelect2Module = /*#__PURE__*/(() => {\n  class NgSelect2Module {}\n  NgSelect2Module.ɵfac = function NgSelect2Module_Factory(t) {\n    return new (t || NgSelect2Module)();\n  };\n  NgSelect2Module.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgSelect2Module\n  });\n  NgSelect2Module.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NgSelect2Module;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSelect2Module, {\n    declarations: function () {\n      return [NgSelect2Component];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NgSelect2Component];\n    }\n  });\n})();\n\n/*\r\n * Public API Surface of ng-select2\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgSelect2Component, NgSelect2Module };\n\n//# sourceMappingURL=ng-select2.js.map","map":null,"metadata":{},"sourceType":"module"}