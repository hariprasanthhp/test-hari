{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormArray, FormControl, FormGroup } from '@angular/forms';\nimport { forkJoin } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/support/netops-management/operations/services/workflow.service\";\nimport * as i2 from \"src/app-services/translate.service\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"src/app/sys-admin/services/common.service\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"src/app/shared/services/sso-auth.service\";\nimport * as i7 from \"@angular/platform-browser\";\nimport * as i8 from \"@angular/common\";\nfunction CcoAlarmRulesComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelementStart(1, \"span\", 11);\n    i0.ɵɵelement(2, \"img\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function CcoAlarmRulesComponent_div_1_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.closeAlert();\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r0.language[ctx_r0.errorInfo] || ctx_r0.errorInfo, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction CcoAlarmRulesComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵelementStart(1, \"span\", 16);\n    i0.ɵɵelement(2, \"img\", 17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function CcoAlarmRulesComponent_div_2_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.success = false;\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r1.language[ctx_r1.successInfo] || ctx_r1.successInfo, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction CcoAlarmRulesComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵelementStart(2, \"div\", 20);\n    i0.ɵɵelementStart(3, \"div\", 21);\n    i0.ɵɵelementStart(4, \"div\", 22);\n    i0.ɵɵelementStart(5, \"span\", 23);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r2.language.Loading);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    greyout: a0\n  };\n};\nfunction CcoAlarmRulesComponent_ng_container_9_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0, 26);\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵelementStart(2, \"div\", 27);\n    i0.ɵɵelementStart(3, \"div\", 28);\n    i0.ɵɵelementStart(4, \"input\", 29);\n    i0.ɵɵlistener(\"click\", function CcoAlarmRulesComponent_ng_container_9_ng_container_2_Template_input_click_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const i_r11 = restoredCtx.index;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onChangeCheckbox(\"check\", $event, \"checked\", i_r11);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"label\", 30);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 31);\n    i0.ɵɵelementStart(8, \"div\", 5);\n    i0.ɵɵelementStart(9, \"div\", 32);\n    i0.ɵɵelementStart(10, \"div\", 33);\n    i0.ɵɵelementStart(11, \"label\", 34);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementStart(13, \"span\", 35);\n    i0.ɵɵtext(14, \"*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"input\", 36);\n    i0.ɵɵlistener(\"keyup\", function CcoAlarmRulesComponent_ng_container_9_ng_container_2_Template_input_keyup_15_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const i_r11 = restoredCtx.index;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.enforceMinMax($event, \"raiseThreshold\", i_r11);\n    })(\"change\", function CcoAlarmRulesComponent_ng_container_9_ng_container_2_Template_input_change_15_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const i_r11 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.enforceMinMax($event, \"raiseThreshold\", i_r11);\n    })(\"keydown\", function CcoAlarmRulesComponent_ng_container_9_ng_container_2_Template_input_keydown_15_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.avoidInvalidValues($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 32);\n    i0.ɵɵelementStart(17, \"div\", 33);\n    i0.ɵɵelementStart(18, \"label\", 34);\n    i0.ɵɵtext(19);\n    i0.ɵɵelementStart(20, \"span\", 35);\n    i0.ɵɵtext(21, \"*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"input\", 37);\n    i0.ɵɵlistener(\"keyup\", function CcoAlarmRulesComponent_ng_container_9_ng_container_2_Template_input_keyup_22_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const i_r11 = restoredCtx.index;\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return ctx_r17.enforceMinMax($event, \"clearThreshold\", i_r11);\n    })(\"keydown\", function CcoAlarmRulesComponent_ng_container_9_ng_container_2_Template_input_keydown_22_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return ctx_r18.avoidInvalidValues($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"div\", 32);\n    i0.ɵɵelementStart(24, \"div\", 33);\n    i0.ɵɵelementStart(25, \"label\", 34);\n    i0.ɵɵtext(26);\n    i0.ɵɵelementStart(27, \"span\", 35);\n    i0.ɵɵtext(28, \"*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"input\", 38);\n    i0.ɵɵlistener(\"keyup\", function CcoAlarmRulesComponent_ng_container_9_ng_container_2_Template_input_keyup_29_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const i_r11 = restoredCtx.index;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.enforceMinMax($event, \"duration\", i_r11);\n    })(\"keydown\", function CcoAlarmRulesComponent_ng_container_9_ng_container_2_Template_input_keydown_29_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return ctx_r20.avoidInvalidValues($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r11 = ctx.index;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroupName\", i_r11);\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r9.alarmsList == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11].value);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(14, _c0, !ctx_r9.hasWriteAccess));\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r9.alarmsList == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11].value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r9.language[ctx_r9.alarmsList == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11].display_name] || (ctx_r9.alarmsList == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11].display_name), \" \");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r9.language[\"Raised Count\"], \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"min\", ctx_r9.alarmsList == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11] == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11].raiseCountMin)(\"max\", ctx_r9.alarmsList == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11] == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11].raiseCountMax);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r9.language[\"Clear Count\"], \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"max\", (ctx_r9.alarmsList == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11] == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11].raiseThreshold) - 1);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r9.language.Duration, \" (minutes) \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r9.language[\"1-120 mins\"]);\n    i0.ɵɵproperty(\"min\", ctx_r9.alarmsList == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11] == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11].durationMin)(\"max\", ctx_r9.alarmsList == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11] == null ? null : ctx_r9.alarmsList.alarmRulesData[i_r11].durationMax);\n  }\n}\nfunction CcoAlarmRulesComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementContainerStart(1, 24);\n    i0.ɵɵtemplate(2, CcoAlarmRulesComponent_ng_container_9_ng_container_2_Template, 30, 16, \"ng-container\", 25);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.alarmsList == null ? null : ctx_r3.alarmsList.alarmListForm == null ? null : ctx_r3.alarmsList.alarmListForm.controls == null ? null : ctx_r3.alarmsList.alarmListForm.controls.alarmsFormArray == null ? null : ctx_r3.alarmsList.alarmListForm.controls.alarmsFormArray.controls);\n  }\n}\nfunction CcoAlarmRulesComponent_div_10_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 40);\n    i0.ɵɵelementStart(1, \"button\", 41);\n    i0.ɵɵlistener(\"click\", function CcoAlarmRulesComponent_div_10_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.crudAlarmRules();\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 42);\n    i0.ɵɵlistener(\"click\", function CcoAlarmRulesComponent_div_10_div_2_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r24 = i0.ɵɵnextContext(2);\n      return ctx_r24.setAlarmListForm(\"clear\");\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r21.alarmsList.disableSaved);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r21.language.Save, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r21.alarmsList.disableCleared);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r21.language.Clear, \" \");\n  }\n}\nfunction CcoAlarmRulesComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵtemplate(2, CcoAlarmRulesComponent_div_10_div_2_Template, 5, 4, \"div\", 39);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r4.cco_entitlement);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    disable: a0\n  };\n};\nexport let CcoAlarmRulesComponent = /*#__PURE__*/(() => {\n  class CcoAlarmRulesComponent {\n    constructor(workflowService, translateService, http, commonOrgService, formBuilder, service, titleService) {\n      this.workflowService = workflowService;\n      this.translateService = translateService;\n      this.http = http;\n      this.commonOrgService = commonOrgService;\n      this.formBuilder = formBuilder;\n      this.service = service;\n      this.titleService = titleService;\n      this.baseUrl = `${environment.API_BASE_URL}analytics-engine/`;\n      this.errorInfo = '';\n      this.successInfo = '';\n      this.loading = false;\n      this.btnDisabled = false;\n      this.errorMsg = undefined;\n      this.alarmsList = {\n        disableSaved: false,\n        disableCleared: false,\n        alarmListForm: undefined,\n        alarmRulesData: []\n      };\n      this.cco_entitlement = false;\n      this.checkDev = false;\n      this.hasWriteAccess = false;\n      this.hasScopeAccess = false;\n    }\n    ngOnInit() {\n      var _a;\n      let base = `${environment.API_BASE}`;\n      if (base.indexOf('/dev.api.calix.ai') > -1) {\n        this.checkDev = true;\n      } else this.checkDev = false;\n      let enttlmnts = this.service.getEntitlements();\n      if (enttlmnts[210] && !enttlmnts[102]) {\n        this.cco_entitlement = true;\n      }\n      let scopes = this.service.getScopes();\n      if (environment.VALIDATE_SCOPE) {\n        if (scopes && ((_a = scopes['cloud.rbac.coc.operations.alarms.transformalarmrules']) === null || _a === void 0 ? void 0 : _a.indexOf('write')) !== -1) {\n          this.hasWriteAccess = true;\n        }\n        if (scopes && scopes['cloud.rbac.coc.operations.alarms.transformalarmrules']) {\n          this.hasScopeAccess = true;\n        }\n      }\n      this.setAlarmRulesData();\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.titleService.setTitle(`${this.language['Transform Alarm Rules']} - ${this.language['Alarms']} - ${this.language['Operations']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      });\n      this.titleService.setTitle(`${this.language['Transform Alarm Rules']} - ${this.language['Alarms']} - ${this.language['Operations']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      if (!this.hasScopeAccess) {\n        this.service.setPageAccess(false);\n        return;\n      }\n      this.setAlarmListForm();\n      this.callMultipleAPI();\n    }\n    setAlarmRulesData(type) {\n      this.alarmsList['alarmRulesData'] = [{\n        display_name: `Entire Network (Multiple-ONTs-Down-Network)`,\n        name: 'Multiple-ONTs-Down-Network',\n        value: 'multiple-onts-down-network',\n        request_param: 'network',\n        raiseThreshold: 2,\n        clearThreshold: 0,\n        // description: '',\n        duration: 1,\n        raiseCountMin: 2,\n        raiseCountMax: 3600000,\n        durationMin: 1,\n        durationMax: 120,\n        alarmRuleId: type == 'clear' ? this.alarmsList['alarmRulesData'] && this.alarmsList['alarmRulesData'].length > 0 ? this.alarmsList['alarmRulesData'][0]['alarmRuleId'] : '' : '',\n        checked: false\n      }, {\n        display_name: `Same Node (Multiple-ONTs-Down-OLT)`,\n        name: 'Multiple-ONTs-Down-OLT',\n        value: 'multiple-onts-down-olt',\n        request_param: 'olt',\n        raiseThreshold: 2,\n        clearThreshold: 0,\n        // description: '',\n        duration: 1,\n        raiseCountMin: 2,\n        raiseCountMax: 16000,\n        durationMin: 1,\n        durationMax: 120,\n        alarmRuleId: type == 'clear' ? this.alarmsList['alarmRulesData'] && this.alarmsList['alarmRulesData'].length > 0 ? this.alarmsList['alarmRulesData'][1]['alarmRuleId'] : '' : '',\n        checked: false\n      }, {\n        display_name: `Same PON (Multiple-ONTs-Down-PON)`,\n        name: 'Multiple-ONTs-Down-PON',\n        value: 'multiple-onts-down-pon',\n        request_param: 'pon',\n        raiseThreshold: 2,\n        clearThreshold: 0,\n        // description: '',\n        duration: 1,\n        raiseCountMin: 2,\n        raiseCountMax: 128,\n        durationMin: 1,\n        durationMax: 120,\n        alarmRuleId: type == 'clear' ? this.alarmsList['alarmRulesData'] && this.alarmsList['alarmRulesData'].length > 0 ? this.alarmsList['alarmRulesData'][2]['alarmRuleId'] : '' : '',\n        checked: false\n      }];\n    }\n    setAlarmListForm(type) {\n      this.alarmsList['alarmListForm'] = this.formBuilder.group({\n        alarmsFormArray: new FormArray([])\n      });\n      this.setAlarmRulesData(type);\n      this.patchRulesFormValue(type);\n    }\n    callMultipleAPI() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield Promise.all([this.getAlarmRulesController()]);\n      });\n    }\n    patchRulesFormValue(type) {\n      const alarmRulesData = this.alarmsList['alarmListForm'].get('alarmsFormArray');\n      this.alarmsList['alarmRulesData'].forEach(rules => {\n        alarmRulesData.push(new FormGroup({\n          display_name: new FormControl(rules.display_name),\n          name: new FormControl(rules.name),\n          value: new FormControl(rules.value),\n          request_param: new FormControl(rules.request_param),\n          raiseThreshold: new FormControl(rules.raiseThreshold),\n          clearThreshold: new FormControl(rules.clearThreshold),\n          description: new FormControl(rules.description),\n          duration: new FormControl(rules.duration),\n          checked: new FormControl(rules['checked'] || false),\n          alarmRuleId: new FormControl(rules['alarmRuleId'] || '')\n        }));\n      });\n      this.onChangeCheckbox('clear');\n    }\n    onChangeCheckbox(call, event, type, index) {\n      var _a;\n      const arrayControl = this.alarmsList.alarmListForm.get('alarmsFormArray');\n      let arr = arrayControl['value'];\n      if (call == 'check') {\n        if (arrayControl.controls[index]['controls']) {\n          (_a = arrayControl.controls[index]['controls']['checked']) === null || _a === void 0 ? void 0 : _a.setValue(event.target.checked);\n          // this.alarmsList.alarmRulesData[index]['checked'] = event.target.checked;\n        }\n      }\n\n      if (arr.every(el => el.alarmRuleId == '')) {\n        if (type == 'checked') {\n          if (arrayControl['value'].some(el => el.checked)) {\n            this.alarmsList.disableSaved = false;\n          } else {\n            this.alarmsList.disableSaved = true;\n          }\n        } else {\n          this.alarmsList.disableSaved = true;\n        }\n      } else {\n        this.alarmsList.disableSaved = false;\n      }\n      // else if(call == 'clear'){\n      if (arrayControl['value'].some(el => el.checked)) {\n        this.alarmsList.disableCleared = false;\n      } else {\n        this.alarmsList.disableCleared = true;\n      }\n      // }\n    }\n\n    getAlarmRulesController() {\n      this.loading = true;\n      this.http.get(`${this.baseUrl}alarmRules`).subscribe(data => {\n        var _a;\n        this.loading = false;\n        if (data && data.length > 0) {\n          const ruleFormArray = (_a = this.alarmsList) === null || _a === void 0 ? void 0 : _a.alarmListForm.get('alarmsFormArray');\n          if ((ruleFormArray === null || ruleFormArray === void 0 ? void 0 : ruleFormArray.value) && Object.entries(ruleFormArray === null || ruleFormArray === void 0 ? void 0 : ruleFormArray.value).length > 0) {\n            this.alarmsList.disableSaved = false;\n            this.alarmsList.disableCleared = false;\n            ruleFormArray.value.forEach((rules, index) => {\n              let patchObj = data.find(el => el['name'] == rules['value']);\n              // let alarmRulesData = this.alarmsList.alarmRulesData.find((el) => el['value'] == rules['value']);\n              // if(patchObj && Object.entries(patchObj).length > 0){\n              ruleFormArray.controls[index].patchValue({\n                duration: patchObj ? patchObj['duration'] : 1,\n                clearThreshold: patchObj ? patchObj['clearThreshold'] : 0,\n                raiseThreshold: patchObj ? patchObj['raiseThreshold'] : 2,\n                alarmRuleId: patchObj ? patchObj['alarmRuleId'] : '',\n                checked: patchObj ? patchObj['alarmRuleId'] && patchObj['alarmRuleId'] != '' ? true : false : false\n              });\n              data.forEach(element => {\n                let alarmRulesData = this.alarmsList.alarmRulesData.find(el => el['value'] == element['name']);\n                if (alarmRulesData && Object.entries(alarmRulesData).length > 0) {\n                  alarmRulesData['duration'] = element['duration'];\n                  alarmRulesData['clearThreshold'] = element['clearThreshold'];\n                  alarmRulesData['raiseThreshold'] = element['raiseThreshold'];\n                  alarmRulesData['alarmRuleId'] = element['alarmRuleId'];\n                  alarmRulesData['checked'] = true;\n                }\n              });\n              // }\n            });\n          }\n        } else if (!data || data.length <= 0) {\n          this.alarmsList.disableSaved = true;\n          this.alarmsList.disableCleared = true;\n          this.setAlarmRulesData();\n          this.setAlarmListForm();\n        }\n      }, error => {\n        this.error = true;\n        this.pageErrorHandle(error);\n        this.loading = false;\n        this.alarmsList.disableSaved = true;\n        this.alarmsList.disableCleared = true;\n        this.setAlarmRulesData();\n        this.setAlarmListForm();\n      });\n    }\n    crudAlarmRules() {\n      var _a;\n      const alarmRulesForm = Object.assign({}, (_a = this.alarmsList.alarmListForm) === null || _a === void 0 ? void 0 : _a.value);\n      if (alarmRulesForm.alarmsFormArray && alarmRulesForm.alarmsFormArray.length > 0) {\n        this.successInfo = '';\n        this.alarmsList.disableSaved = true;\n        let _requests = {};\n        alarmRulesForm.alarmsFormArray.forEach((element, index) => {\n          let request;\n          if (element['checked']) {\n            let request_body = {};\n            request_body = {\n              clearThreshold: element['clearThreshold'],\n              duration: element['duration'],\n              raiseThreshold: element['raiseThreshold'],\n              name: element['value']\n            };\n            if (element['alarmRuleId'] && element['alarmRuleId'] != '') {\n              request = this.http.put(`${this.baseUrl}alarmRule/${element['alarmRuleId']}`, request_body, {\n                responseType: 'text'\n              });\n            } else {\n              request = this.http.post(`${this.baseUrl}alarmRule`, request_body, {\n                responseType: 'text'\n              });\n            }\n          } else {\n            if (element['alarmRuleId'] && element['alarmRuleId'] != '') {\n              request = this.http.delete(`${this.baseUrl}alarmRule/${element['alarmRuleId']}`, {\n                responseType: 'text'\n              });\n            }\n          }\n          if (request) {\n            _requests[element['request_param']] = request;\n          }\n        });\n        if (_requests && Object.entries(_requests).length > 0) {\n          this.loading = true;\n          forkJoin(_requests).subscribe(({\n            network,\n            olt,\n            pon\n          }) => {\n            //network\n            if (network && network == 'Updated') {\n              this.successInfo += this.language.alarmRulesMsg(this.alarmsList['alarmRulesData'][0]['name'], 'updated');\n              // this.successInfo += `${this.alarmsList['alarmRulesData'][0]['name']} updated successfully <br> `;\n            } else if (network && network == 'AlarmRule deleted successfully') {\n              this.alarmsList.alarmRulesData[0].alarmRuleId = '';\n              this.successInfo += this.language.alarmRulesMsg(this.alarmsList['alarmRulesData'][0]['name'], 'deleted');\n              // this.successInfo += `${this.alarmsList['alarmRulesData'][0]['name']} deleted successfully <br> `;\n            } else if (network && network != '') {\n              this.successInfo += this.language.alarmRulesMsg(this.alarmsList['alarmRulesData'][0]['name'], 'saved');\n              // this.successInfo += `${this.alarmsList['alarmRulesData'][0]['name']} saved successfully <br> `;\n            }\n            //olt\n            if (olt && olt == 'Updated') {\n              // this.successInfo += `${this.alarmsList['alarmRulesData'][1]['name']} updated successfully <br> `;\n              this.successInfo += this.language.alarmRulesMsg(this.alarmsList['alarmRulesData'][1]['name'], 'updated');\n            } else if (olt && olt == 'AlarmRule deleted successfully') {\n              this.alarmsList.alarmRulesData[1].alarmRuleId = '';\n              // this.successInfo += `${this.alarmsList['alarmRulesData'][1]['name']} deleted successfully <br> `;\n              this.successInfo += this.language.alarmRulesMsg(this.alarmsList['alarmRulesData'][1]['name'], 'deleted');\n            } else if (olt && olt != '') {\n              // this.successInfo += `${this.alarmsList['alarmRulesData'][1]['name']} saved successfully <br> `;\n              this.successInfo += this.language.alarmRulesMsg(this.alarmsList['alarmRulesData'][1]['name'], 'saved');\n            }\n            //pon\n            if (pon && pon == 'Updated') {\n              // this.successInfo += `${this.alarmsList['alarmRulesData'][2]['name']} updated successfully <br> `;\n              this.successInfo += this.language.alarmRulesMsg(this.alarmsList['alarmRulesData'][2]['name'], 'updated');\n            } else if (pon && pon == 'AlarmRule deleted successfully') {\n              this.alarmsList.alarmRulesData[2].alarmRuleId = '';\n              // this.successInfo += `${this.alarmsList['alarmRulesData'][2]['name']} deleted successfully <br> `;\n              this.successInfo += this.language.alarmRulesMsg(this.alarmsList['alarmRulesData'][2]['name'], 'deleted');\n            } else if (pon && pon != '') {\n              // this.successInfo += `${this.alarmsList['alarmRulesData'][2]['name']} saved successfully <br> `;\n              this.successInfo += this.language.alarmRulesMsg(this.alarmsList['alarmRulesData'][2]['name'], 'saved');\n            }\n            this.loading = false;\n            this.successInfo = this.successInfo.slice(0, -5);\n            this.success = true;\n            setTimeout(() => {\n              this.alarmsList.disableSaved = false;\n              this.enableDisableSave();\n              this.successInfo = '';\n              this.success = false;\n            }, 4000);\n            this.getAlarmRulesController();\n          }, error => {\n            this.error = true;\n            this.loading = false;\n            this.alarmsList.disableSaved = false;\n            this.pageErrorHandle(error);\n            this.getAlarmRulesController();\n          });\n        }\n      }\n    }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = 'Access Denied';\n      } else {\n        this.errorInfo = this.commonOrgService.pageErrorHandle(err);\n      }\n      this.closeAlert();\n      this.error = true;\n    }\n    enforceMinMax(event, controlName, index) {\n      let timer = 0;\n      if (controlName == 'raiseThreshold') timer = 500;\n      this.alarmsList.disableSaved = true;\n      setTimeout(() => {\n        var _a, _b;\n        let value = this.workflowService.enforceMinMax(event);\n        if (value != -1) {\n          const arrayControl = this.alarmsList.alarmListForm.get('alarmsFormArray');\n          if (arrayControl.controls && arrayControl.controls[index]['controls']) {\n            (_a = arrayControl.controls[index]['controls'][controlName]) === null || _a === void 0 ? void 0 : _a.setValue(value);\n            if (controlName == 'raiseThreshold') {\n              this.alarmsList.alarmRulesData[index]['raiseThreshold'] = value;\n              if (value < arrayControl.controls[index]['controls']['clearThreshold'].value) {\n                (_b = arrayControl.controls[index]['controls']['clearThreshold']) === null || _b === void 0 ? void 0 : _b.setValue(0);\n                this.alarmsList.alarmRulesData[index]['clearThreshold'] = 0;\n              }\n            }\n          }\n        }\n        this.enableDisableSave();\n      }, timer);\n    }\n    enableDisableSave() {\n      const arrayControl = this.alarmsList.alarmListForm.get('alarmsFormArray');\n      let arr = arrayControl['value'];\n      if (arr.every(el => el.alarmRuleId == '')) {\n        if (arrayControl['value'].some(el => el.checked)) {\n          this.alarmsList.disableSaved = false;\n        } else {\n          this.alarmsList.disableSaved = true;\n        }\n      } else {\n        this.alarmsList.disableSaved = false;\n      }\n    }\n    avoidInvalidValues(event) {\n      if (event.key === '.' || (event === null || event === void 0 ? void 0 : event.which) != 8 && (event === null || event === void 0 ? void 0 : event.which) != 0 && ((event === null || event === void 0 ? void 0 : event.which) < 48 || (event === null || event === void 0 ? void 0 : event.which) > 57) && ((event === null || event === void 0 ? void 0 : event.which) < 96 || (event === null || event === void 0 ? void 0 : event.which) > 105)) {\n        event.preventDefault();\n      }\n    }\n    closeAlert() {\n      this.error = false;\n      this.success = false;\n    }\n  }\n  CcoAlarmRulesComponent.ɵfac = function CcoAlarmRulesComponent_Factory(t) {\n    return new (t || CcoAlarmRulesComponent)(i0.ɵɵdirectiveInject(i1.WorkflowService), i0.ɵɵdirectiveInject(i2.TranslateService), i0.ɵɵdirectiveInject(i3.HttpClient), i0.ɵɵdirectiveInject(i4.CommonService), i0.ɵɵdirectiveInject(i5.FormBuilder), i0.ɵɵdirectiveInject(i6.SsoAuthService), i0.ɵɵdirectiveInject(i7.Title));\n  };\n  CcoAlarmRulesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CcoAlarmRulesComponent,\n    selectors: [[\"app-cco-alarm-rules\"]],\n    decls: 11,\n    vars: 10,\n    consts: [[1, \"ccl-form\", 3, \"ngClass\"], [\"class\", \"w-100 alert alert-danger fade show my-3\", 4, \"ngIf\"], [\"class\", \"w-100 alert alert-success fade show my-3\", 4, \"ngIf\"], [\"class\", \"row mb-3\", 4, \"ngIf\"], [3, \"formGroup\"], [1, \"row\"], [1, \"col-md-12\", \"mb-2\", \"mt-1\"], [1, \"cco-secondary-title\"], [4, \"ngIf\"], [\"class\", \"row\", 4, \"ngIf\"], [1, \"w-100\", \"alert\", \"alert-danger\", \"fade\", \"show\", \"my-3\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [1, \"w-100\", \"alert\", \"alert-success\", \"fade\", \"show\", \"my-3\"], [1, \"success-img\"], [\"src\", \"./assets/img/success-icon.svg\"], [1, \"row\", \"mb-3\"], [1, \"col-md-12\"], [1, \"loader\", \"mt-5\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [\"formArrayName\", \"alarmsFormArray\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [3, \"formGroupName\"], [1, \"col-md-12\", \"mt-2\"], [1, \"form-group\", \"form-check\"], [\"formControlName\", \"checked\", \"type\", \"checkbox\", 1, \"form-check-input\", 3, \"ngClass\", \"id\", \"click\"], [1, \"form-check-label\", \"cursor-pointer\", 3, \"for\"], [1, \"col-md-12\", \"row-group\"], [1, \"col-md-3\"], [1, \"form-group\"], [1, \"col-form-label\"], [1, \"error\"], [\"formControlName\", \"raiseThreshold\", \"type\", \"number\", \"placeholder\", \"2\", 3, \"min\", \"max\", \"keyup\", \"change\", \"keydown\"], [\"formControlName\", \"clearThreshold\", \"type\", \"number\", \"placeholder\", \"0\", \"min\", \"0\", 3, \"max\", \"keyup\", \"keydown\"], [\"formControlName\", \"duration\", \"type\", \"number\", 3, \"min\", \"max\", \"placeholder\", \"keyup\", \"keydown\"], [\"class\", \"form-group mt-3\", 4, \"ngIf\"], [1, \"form-group\", \"mt-3\"], [1, \"btn-default\", \"primary\", 3, \"disabled\", \"click\"], [1, \"btn-default\", \"btn-dft\", \"ml-2\", 3, \"disabled\", \"click\"]],\n    template: function CcoAlarmRulesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0);\n        i0.ɵɵtemplate(1, CcoAlarmRulesComponent_div_1_Template, 6, 1, \"div\", 1);\n        i0.ɵɵtemplate(2, CcoAlarmRulesComponent_div_2_Template, 6, 1, \"div\", 2);\n        i0.ɵɵtemplate(3, CcoAlarmRulesComponent_div_3_Template, 7, 1, \"div\", 3);\n        i0.ɵɵelementStart(4, \"form\", 4);\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵelementStart(6, \"div\", 6);\n        i0.ɵɵelementStart(7, \"label\", 7);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, CcoAlarmRulesComponent_ng_container_9_Template, 3, 1, \"ng-container\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(10, CcoAlarmRulesComponent_div_10_Template, 3, 1, \"div\", 9);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c1, !ctx.hasWriteAccess));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.success);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.alarmsList == null ? null : ctx.alarmsList.alarmListForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.language[\"Multiple - ONTs - Down\"]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.alarmsList[\"alarmRulesData\"] && ctx.alarmsList[\"alarmRulesData\"].length > 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasWriteAccess);\n      }\n    },\n    directives: [i8.NgClass, i8.NgIf, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormArrayName, i8.NgForOf, i5.FormGroupName, i5.CheckboxControlValueAccessor, i5.NgControlStatus, i5.FormControlName, i5.DefaultValueAccessor, i5.NumberValueAccessor, i5.MinValidator, i5.MaxValidator],\n    styles: [\".row-group[_ngcontent-%COMP%]{padding-left:35px}.row-group[_ngcontent-%COMP%]   .col-form-label[_ngcontent-%COMP%]{width:100%}.row-group[_ngcontent-%COMP%]   .col-md-3[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:75%}.row-group[_ngcontent-%COMP%]   .name-col[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%}.diable-div[_ngcontent-%COMP%]{pointer-events:none;opacity:.5}.form-check[_ngcontent-%COMP%]{padding-left:20px;margin-bottom:5px}.form-check[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-weight:600}.form-check[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{max-width:13px;max-height:15px;min-height:15px;cursor:pointer}.disable[_ngcontent-%COMP%]{pointer-events:none}.greyout[_ngcontent-%COMP%]{opacity:.5}\"]\n  });\n  return CcoAlarmRulesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}