{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { snapTo } from './SnapUtil';\n\n/**\n * A snap context, containing the (possibly incomplete)\n * mappings of drop targets (to identify the snapping)\n * to computed snap points.\n */\nexport default function SnapContext() {\n  /**\n   * Map<String, SnapPoints> mapping drop targets to\n   * a list of possible snappings.\n   *\n   * @type {Object}\n   */\n  this._targets = {};\n\n  /**\n   * Map<String, Point> initial positioning of element\n   * regarding various snap directions.\n   *\n   * @type {Object}\n   */\n  this._snapOrigins = {};\n\n  /**\n   * List of snap locations\n   *\n   * @type {Array<string>}\n   */\n  this._snapLocations = [];\n\n  /**\n   * Map<String, Array<Point>> of default snapping locations\n   *\n   * @type {Object}\n   */\n  this._defaultSnaps = {};\n}\nSnapContext.prototype.getSnapOrigin = function (snapLocation) {\n  return this._snapOrigins[snapLocation];\n};\nSnapContext.prototype.setSnapOrigin = function (snapLocation, initialValue) {\n  this._snapOrigins[snapLocation] = initialValue;\n  if (this._snapLocations.indexOf(snapLocation) === -1) {\n    this._snapLocations.push(snapLocation);\n  }\n};\nSnapContext.prototype.addDefaultSnap = function (type, point) {\n  var snapValues = this._defaultSnaps[type];\n  if (!snapValues) {\n    snapValues = this._defaultSnaps[type] = [];\n  }\n  snapValues.push(point);\n};\n\n/**\n * Return a number of initialized snaps, i.e. snap locations such as\n * top-left, mid, bottom-right and so forth.\n *\n * @return {Array<string>} snapLocations\n */\nSnapContext.prototype.getSnapLocations = function () {\n  return this._snapLocations;\n};\n\n/**\n * Set the snap locations for this context.\n *\n * The order of locations determines precedence.\n *\n * @param {Array<string>} snapLocations\n */\nSnapContext.prototype.setSnapLocations = function (snapLocations) {\n  this._snapLocations = snapLocations;\n};\n\n/**\n * Get snap points for a given target\n *\n * @param {Element|string} target\n */\nSnapContext.prototype.pointsForTarget = function (target) {\n  var targetId = target.id || target;\n  var snapPoints = this._targets[targetId];\n  if (!snapPoints) {\n    snapPoints = this._targets[targetId] = new SnapPoints();\n    snapPoints.initDefaults(this._defaultSnaps);\n  }\n  return snapPoints;\n};\n\n/**\n * Creates the snap points and initializes them with the\n * given default values.\n *\n * @param {Object<string, Array<Point>>} [defaultPoints]\n */\nexport function SnapPoints(defaultSnaps) {\n  /**\n   * Map<String, Map<(x|y), Array<number>>> mapping snap locations,\n   * i.e. top-left, bottom-right, center to actual snap values.\n   *\n   * @type {Object}\n   */\n  this._snapValues = {};\n}\nSnapPoints.prototype.add = function (snapLocation, point) {\n  var snapValues = this._snapValues[snapLocation];\n  if (!snapValues) {\n    snapValues = this._snapValues[snapLocation] = {\n      x: [],\n      y: []\n    };\n  }\n  if (snapValues.x.indexOf(point.x) === -1) {\n    snapValues.x.push(point.x);\n  }\n  if (snapValues.y.indexOf(point.y) === -1) {\n    snapValues.y.push(point.y);\n  }\n};\nSnapPoints.prototype.snap = function (point, snapLocation, axis, tolerance) {\n  var snappingValues = this._snapValues[snapLocation];\n  return snappingValues && snapTo(point[axis], snappingValues[axis], tolerance);\n};\n\n/**\n * Initialize a number of default snapping points.\n *\n * @param  {Object} defaultSnaps\n */\nSnapPoints.prototype.initDefaults = function (defaultSnaps) {\n  var self = this;\n  forEach(defaultSnaps || {}, function (snapPoints, snapLocation) {\n    forEach(snapPoints, function (point) {\n      self.add(snapLocation, point);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}