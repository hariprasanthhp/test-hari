{"ast":null,"code":"'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,\n  is = require('bpmn-js/lib/util/ModelUtil').is,\n  forEach = require('lodash/forEach');\nvar EventDefinitionHelper = {};\nmodule.exports = EventDefinitionHelper;\nEventDefinitionHelper.getEventDefinition = function (element, eventType) {\n  var bo = getBusinessObject(element),\n    eventDefinition = null;\n  if (bo.eventDefinitions) {\n    forEach(bo.eventDefinitions, function (event) {\n      if (is(event, eventType)) {\n        eventDefinition = event;\n      }\n    });\n  }\n  return eventDefinition;\n};\nEventDefinitionHelper.getTimerEventDefinition = function (element) {\n  return this.getEventDefinition(element, 'bpmn:TimerEventDefinition');\n};\nEventDefinitionHelper.getMessageEventDefinition = function (element) {\n  return this.getEventDefinition(element, 'bpmn:MessageEventDefinition');\n};\nEventDefinitionHelper.getSignalEventDefinition = function (element) {\n  return this.getEventDefinition(element, 'bpmn:SignalEventDefinition');\n};\nEventDefinitionHelper.getErrorEventDefinition = function (element) {\n  return this.getEventDefinition(element, 'bpmn:ErrorEventDefinition');\n};\nEventDefinitionHelper.getEscalationEventDefinition = function (element) {\n  return this.getEventDefinition(element, 'bpmn:EscalationEventDefinition');\n};\nEventDefinitionHelper.getCompensateEventDefinition = function (element) {\n  return this.getEventDefinition(element, 'bpmn:CompensateEventDefinition');\n};\nEventDefinitionHelper.getLinkEventDefinition = function (element) {\n  return this.getEventDefinition(element, 'bpmn:LinkEventDefinition');\n};\nEventDefinitionHelper.getConditionalEventDefinition = function (element) {\n  return this.getEventDefinition(element, 'bpmn:ConditionalEventDefinition');\n};","map":null,"metadata":{},"sourceType":"script"}