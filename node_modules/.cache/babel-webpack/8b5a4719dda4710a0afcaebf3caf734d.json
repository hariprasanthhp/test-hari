{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport elementHelper from 'bpmn-js-properties-panel/lib/helper/ElementHelper';\nimport { getBusinessObject, is } from 'bpmn-js/lib/util/ModelUtil';\nimport { remove as collectionRemove, add as collectionAdd } from 'diagram-js/lib/util/Collections';\nimport { createFormDefinition, createFormId, createFormKey, createUserTaskForm, getFormDefinition, getUserTaskForm } from '../../../helper/FormsHelper';\n\n/**\n * Zeebe specific form definition behavior.\n */\nexport default function FormDefinitionBehavior(eventBus, bpmnFactory) {\n  CommandInterceptor.call(this, eventBus);\n\n  /**\n   * ensures a zeebe:userTaskForm is cleaned up when user task got removed\n   */\n  this.executed('shape.delete', function (context) {\n    const {\n      shape,\n      oldParent\n    } = context;\n    const rootElement = getRootElement(oldParent);\n    const userTaskForm = getUserTaskForm(shape, rootElement);\n    const rootExtensionElements = rootElement.get('extensionElements');\n    if (!is(shape, 'bpmn:UserTask') || !userTaskForm) {\n      return;\n    }\n    collectionRemove(rootExtensionElements.get('values'), userTaskForm);\n    context.removedUserTaskForm = userTaskForm;\n  }, true);\n  this.revert('shape.delete', function (context) {\n    const {\n      removedUserTaskForm,\n      oldParent\n    } = context;\n    const rootElement = getRootElement(oldParent);\n    const rootExtensionElements = rootElement.get('extensionElements');\n    if (!removedUserTaskForm) {\n      return;\n    }\n    collectionAdd(rootExtensionElements.get('values'), removedUserTaskForm);\n  }, true);\n\n  /**\n   * create fresh new copied form definition + user task form\n   */\n  this.executed('shape.create', function (context) {\n    const {\n      shape\n    } = context;\n    const oldFormDefinition = getFormDefinition(shape);\n    if (!is(shape, 'bpmn:UserTask') || !oldFormDefinition) {\n      return;\n    }\n    const oldUserTaskForm = getUserTaskForm(shape);\n    const rootElement = getRootElement(shape);\n    const businessObject = getBusinessObject(shape);\n    const extensionElements = businessObject.get('extensionElements');\n    let rootExtensionElements = rootElement.get('extensionElements');\n\n    // (1) ensure extension elements in root\n    if (!rootExtensionElements) {\n      rootExtensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n        values: []\n      }, rootElement, bpmnFactory);\n      rootElement.set('extensionElements', rootExtensionElements);\n    }\n\n    // (2) remove existing form definition\n    context.oldFormDefinition = oldFormDefinition;\n    collectionRemove(extensionElements.get('values'), oldFormDefinition);\n    const formId = createFormId();\n\n    // (3) create new form definition\n    const formDefinition = createFormDefinition({\n      formKey: createFormKey(formId)\n    }, extensionElements, bpmnFactory);\n    collectionAdd(extensionElements.get('values'), formDefinition);\n\n    // (4) create new user task form\n    const userTaskForm = createUserTaskForm({\n      id: formId,\n      body: oldUserTaskForm ? oldUserTaskForm.get('body') : ''\n    }, rootExtensionElements, bpmnFactory);\n    collectionAdd(rootExtensionElements.get('values'), userTaskForm);\n  }, true);\n  this.revert('shape.create', function (context) {\n    const {\n      shape,\n      oldFormDefinition\n    } = context;\n    const businessObject = getBusinessObject(shape);\n    const extensionElements = businessObject.get('extensionElements');\n    const formDefinition = getFormDefinition(shape);\n    const userTaskForm = getUserTaskForm(shape);\n    const rootElement = getRootElement(shape);\n    const rootExtensionElements = rootElement.get('extensionElements');\n    if (!is(shape, 'bpmn:UserTask') || !userTaskForm) {\n      return;\n    }\n\n    // we need to cover the old form definition to make <redo> possible\n    collectionRemove(extensionElements.get('values'), formDefinition);\n    collectionAdd(extensionElements.get('values'), oldFormDefinition);\n    collectionRemove(rootExtensionElements.get('values'), userTaskForm);\n  }, true);\n}\nFormDefinitionBehavior.$inject = ['eventBus', 'bpmnFactory'];\ninherits(FormDefinitionBehavior, CommandInterceptor);\n\n// helpers //////////////\n\nfunction getRootElement(element) {\n  var businessObject = getBusinessObject(element),\n    parent = businessObject;\n  while (parent.$parent && !is(parent, 'bpmn:Process')) {\n    parent = parent.$parent;\n  }\n  return parent;\n}","map":null,"metadata":{},"sourceType":"module"}