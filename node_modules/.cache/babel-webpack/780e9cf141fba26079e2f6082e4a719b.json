{"ast":null,"code":"import { environment } from \"../../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let OrphandevicesService = /*#__PURE__*/(() => {\n  class OrphandevicesService {\n    constructor(http, sso) {\n      this.http = http;\n      this.sso = sso;\n    }\n    getOrphanDeviceData(params) {\n      console.log(params);\n      let query = \"\";\n      for (var key in params) {\n        if (params[key]) {\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n      }\n      return this.http.get(`${environment.SUPPORT_URL}/device/orphan-device?${query}`);\n    }\n    getOrphanDeviceDataCount(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/orphan-device/count?${ID}`);\n    }\n    assignToOrg(orgid, id) {\n      const payload = {\n        // \"orgId\": orgid,\n        \"_id\": id\n      };\n      return this.http.put(`${environment.SUPPORT_URL}/device/assign-to-org`, payload);\n    }\n  }\n  OrphandevicesService.ɵfac = function OrphandevicesService_Factory(t) {\n    return new (t || OrphandevicesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  OrphandevicesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrphandevicesService,\n    factory: OrphandevicesService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrphandevicesService;\n})();","map":null,"metadata":{},"sourceType":"module"}