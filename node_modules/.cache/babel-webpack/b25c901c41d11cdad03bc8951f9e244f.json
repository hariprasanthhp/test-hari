{"ast":null,"code":"import * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./dygraph-sitescan-utils.service\";\nconst keyWifidiagSiteScan = 'wifidiag.sitescan';\nconst keyWifidiagData = 'wifidiag.data';\nconst keyUnifiedWifiTabName = \"unifiedWifi\";\nvar mock = false;\nvar is_int = function (value) {\n  return parseFloat(value) === parseInt(value) && !isNaN(value);\n};\nvar Band20 = '20MHZ',\n  Band40 = '40MHZ',\n  Band80 = '80MHZ',\n  Band80_80 = '80+80MHZ',\n  Band160 = '160MHZ';\nvar BLANK = '';\nvar HIDDEN = 'Hidden';\nvar Band20Width = 2,\n  Band40Width = 4,\n  Band80Width = 8,\n  Band160Width = 16;\nvar SIGNAL_MIN = -100;\nvar SPLITTER = '$$$';\nvar BandToDisplayMap = {};\nBandToDisplayMap[Band20] = \"20MHz\";\nBandToDisplayMap[Band40] = \"40MHz\";\nBandToDisplayMap[Band80] = \"80MHz\";\nBandToDisplayMap[Band160] = \"160MHz\";\nBandToDisplayMap[Band80_80] = \"80+80MHz\";\nvar radioPathGiga = \"InternetGatewayDevice.X_000631_Device.WiFi.Radio.1.\";\nvar radioPath = 'InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.';\nvar wlanPath = 'InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.';\nvar hostPath;\nvar devicePath;\nvar metricsPath;\nvar wlanOperatingChannelBandwidthParamName = \"OperatingChannelBandwidth\";\nvar wlanOperatingChannelBandwidthStore = 'X_000631_OperatingChannelBandwidth';\nvar wlanChannelUtilizationParamName = \"ChannelUtilization\";\nvar wlanChannelInterferenceTimeParamName = \"ChannelInterferenceTime\";\nvar wlanTotalPacketsSentParamName = \"TotalPacketsSent\";\nvar wlanTotalPacketsReceivedParamName = \"TotalPacketsReceived\";\nvar wlanChannelUtilizationStore = wlanChannelUtilizationParamName;\nvar wlanChannelInterferenceTimeStore = wlanChannelInterferenceTimeParamName;\nvar wlanTotalPacketsSentStore = wlanTotalPacketsSentParamName;\nvar wlanTotalPacketsReceivedStore = wlanTotalPacketsReceivedParamName;\nconst keyWifiCurrentTabForTwo = 'two';\nconst keyWifidiagHosts = 'wifidiag.hosts';\nconst keyWifidiagDevices = 'wifidiag.devices';\nconst keyWifidiagDevicesScore = 'wifidiag.devicesScore';\nconst keyWifidiagDevicesMinimumScore = 'wifidiag.minimunScore';\nconst keyWifidiagDataError = 'wifidiag.error';\nconst keyWifidiagLoading = 'wifidiag.loading';\nconst keyWifidiagCurrentTab = 'wifidiag.current-tab';\nvar radio24ChannelList, radio5ChannelList, radio6ChannelList;\nvar keyWifidiagSiteScanObj = \"wifidiag.sitescan.obj\";\nexport let DygraphSiteScanService = /*#__PURE__*/(() => {\n  class DygraphSiteScanService {\n    constructor(http, Utils) {\n      this.http = http;\n      this.Utils = Utils;\n      // isRadioData() {\n      //     var currentTab = sessionStorage.getItem('currentTab');\n      //     return currentTab == 'five' ? true : false\n      // };\n      /***begin-aswin-11-05-2021-dygraph-filter-channel-issue-fix */\n      this.siteScanFilter = {};\n      /**\r\n      * Get Central Channel\r\n      * @param channel\r\n      * @param leftSpan\r\n      * @param rightSpan\r\n      * @returns {*}\r\n      */\n      this.getCentralChannel = function (channel, leftSpan, rightSpan) {\n        var centralChannel = channel;\n        var radioStr = isRadioData();\n        if (radioStr == '5G' || radioStr == '6G') {\n          // Center the label\n          centralChannel = Math.floor(channel - leftSpan + (rightSpan + leftSpan + 1) / 2);\n        }\n        return centralChannel;\n      };\n      this.getSsids = function () {\n        var currentTab = sessionStorage.getItem('currentTab');\n        var data = JSON.parse(localStorage.getItem('WifidiagSiteScan'));\n        var ssid,\n          ssids = [];\n        var add2SsidArray = function (wlanPaths) {\n          _.each(wlanPaths, function (path, k) {\n            ssid = this.Utils.getValueByPath(data, path);\n            if (ssid) {\n              ssids === null || ssids === void 0 ? void 0 : ssids.push(ssid);\n            }\n          });\n        };\n        var l2IfaceSupported = this.Utils.isParameterSupportedBS(\"InternetGatewayDevice.LANDevice.1.Hosts.Host.1.Layer2Interface\");\n        var IfaceTypwSupported = this.Utils.isParameterSupportedBS(\"InternetGatewayDevice.LANDevice.1.Hosts.Host.1.InterfaceType\");\n        // var ssidPathFilter = false;\n        if (l2IfaceSupported && IfaceTypwSupported) {\n          var IfaceTypeWireless = \"802.11\";\n          var IfaceTypeWirelessCfg = this.Utils.getParameterAttributeBS(\"InternetGatewayDevice.LANDevice.1.Hosts.Host.1.InterfaceType\", \"type\");\n          if (IfaceTypeWirelessCfg && IfaceTypeWirelessCfg.wireless) {\n            IfaceTypeWireless = IfaceTypeWirelessCfg.wireless;\n          }\n          var ssidPathFilter = [];\n          var lanDevices = JSON.parse(sessionStorage.getItem(keyWifidiagHosts));\n          var key;\n          for (key in lanDevices) {\n            var device = lanDevices[key];\n            if (device.InterfaceType == IfaceTypeWireless) {\n              ssidPathFilter === null || ssidPathFilter === void 0 ? void 0 : ssidPathFilter.push(device.Layer2Interface);\n            }\n          }\n        }\n        var ssidArr;\n        if (currentTab === keyWifiCurrentTabForTwo) {\n          ssidArr = this.Utils.get24gWlanPath();\n        } else if (currentTab === 'five') {\n          ssidArr = this.Utils.get5gWlanPath();\n        } else {\n          ssidArr = this.Utils.get6gWlanPath();\n        }\n        if (ssidPathFilter) {\n          var arr = [];\n          var k1;\n          for (k1 in ssidArr) {\n            var ssid = ssidArr[k1];\n            var matched = false;\n            var k2;\n            for (k2 in ssidPathFilter) {\n              var pattern = ssidPathFilter[k2];\n              if (pattern && pattern.length > 0) {\n                pattern += \".\";\n                if (pattern == ssid) {\n                  matched = true;\n                  break;\n                }\n              }\n            }\n            if (matched) {\n              arr === null || arr === void 0 ? void 0 : arr.push(ssid);\n            }\n          }\n          ssidArr = arr;\n        }\n        add2SsidArray(ssidArr);\n        return ssids;\n      };\n      /**\r\n      * Get Bandwidth list for Busyness\r\n      *\r\n      * @param radio\r\n      * @param busynessesGroupByChannel\r\n      * @param channelList\r\n      * @param bandwidthList\r\n      */\n      this.getBusynessBandwidthList = function (radio, busynessesGroupByChannel, channelList, bandwidthList) {\n        //var currentBand = radio[wlanOperatingChannelBandwidthStore];\n        var currentBand = radio['Bandwidth'];\n        var targetBandwidthList = [];\n        var radioStr = isRadioData();\n        if (!currentBand) {\n          if (radioStr == '2.4G') {\n            currentBand = '20MHz';\n          } else if (radioStr == '5G') {\n            currentBand = '80MHz';\n          } else {\n            currentBand = '160MHz';\n          }\n        }\n        // Only display 20MHz busyness for 2.4GHz\n        if (radioStr == '2.4G' && currentBand.toUpperCase() === Band40) {\n          return targetBandwidthList;\n        }\n        // Only display busyness of 1, 6, 11 for 2.4GHz\n        var limitedBusynessDisplayChannels = radio24ChannelList;\n        // Busyness displayed for 5GHz is related to DFS status\n        if (radioStr == '5G') {\n          limitedBusynessDisplayChannels = radio5ChannelList;\n        } else if (radioStr == '6G') {\n          limitedBusynessDisplayChannels = radio6ChannelList;\n        }\n        _.each(channelList, function (channel) {\n          channel = parseInt(channel);\n          // if (_.includes(limitedBusynessDisplayChannels, channel)) {\n          _.each(bandwidthList, function (bandwidth) {\n            if (_.has(busynessesGroupByChannel[channel], bandwidth)) {\n              if (!_.includes(targetBandwidthList, bandwidth)) {\n                targetBandwidthList === null || targetBandwidthList === void 0 ? void 0 : targetBandwidthList.push(bandwidth);\n              }\n            }\n          });\n          // }\n        });\n\n        return targetBandwidthList;\n      };\n      /**\r\n       * Prepare Main SSID Lines\r\n       *\r\n       * @param interpolatedChannels\r\n       * @param annotations\r\n       * @param mainSSID\r\n       * @param radio\r\n       * @param signalKeyList\r\n       * @param bandwidthList\r\n       */\n      this.prepareMainSSIDLines = function (interpolatedChannels, annotations, mainSSID, radio, signalKeyList, bandwidthList) {\n        var _a;\n        var mainChannel = mainSSID.channel;\n        var mainId = mainSSID.id;\n        //var span = this.getSpan(mainChannel, radio[wlanOperatingChannelBandwidthStore].toUpperCase());\n        radio['Bandwidth'] = radio['Bandwidth'] ? (_a = radio['Bandwidth']) === null || _a === void 0 ? void 0 : _a.toUpperCase() : '';\n        var span = this.getSpan(mainChannel, radio['Bandwidth'].toUpperCase());\n        var interpolatedChannel_start = mainChannel - span.leftSpan;\n        var interpolatedChannel_end = mainChannel + span.rightSpan;\n        _.each(_.range(interpolatedChannel_start - 1, interpolatedChannel_end + 1), function (interpolatedChannel) {\n          if (interpolatedChannels[interpolatedChannel] == null) {\n            var value = getBlankEntry(mainId, signalKeyList, bandwidthList);\n            interpolatedChannels[interpolatedChannel] = value;\n          }\n          if (interpolatedChannel === interpolatedChannel_start - 1 || interpolatedChannel === interpolatedChannel_end) {\n            interpolatedChannels[interpolatedChannel][mainId] = -100;\n          } else {\n            interpolatedChannels[interpolatedChannel][mainId] = 0;\n          }\n        });\n        var siteScanResult = JSON.parse(sessionStorage.getItem(keyWifidiagSiteScan));\n        var detailInfos = \"\";\n        var mainSSIDName = mainSSID.name;\n        if (siteScanResult && siteScanResult.ssidNameInfo) {\n          var ssidNames;\n          var radioStr = isRadioData();\n          if (radioStr == '5G') {\n            ssidNames = siteScanResult.ssidNameInfo.wlan5;\n          } else if (radioStr == '2.4G') {\n            ssidNames = siteScanResult.ssidNameInfo.wlan2;\n          } else {\n            ssidNames = siteScanResult.ssidNameInfo.wlan6;\n          }\n          for (var key in ssidNames) {\n            var nameObj = ssidNames[key];\n            if (nameObj && nameObj.SSID) {\n              if (nameObj.SSID != mainSSID.name) {\n                detailInfos += \" \" + nameObj.SSID + (nameObj.Enable == \"false\" ? \" (Disabled)\" : \"\") + \"\\n\";\n              } else {\n                if (nameObj.Enable == \"false\") {\n                  mainSSIDName += \" (Disabled)\";\n                }\n              }\n            }\n          }\n        }\n        if (detailInfos.length > 0) {\n          detailInfos = \"Primarry SSID\\n \" + mainSSIDName + \"\\n\\nOthers\\n\" + detailInfos;\n        } else {\n          detailInfos = mainSSID.name;\n        }\n        if (radioStr == '6G' && mainChannel === 0) {\n          mainChannel = -1;\n        }\n        var mainSSIDAnnotation = {\n          mainSSID: true,\n          series: mainSSID.id,\n          x: mainChannel,\n          height: 27,\n          shortText: mainSSID.name,\n          text: detailInfos,\n          width: 180\n        };\n        annotations === null || annotations === void 0 ? void 0 : annotations.push(mainSSIDAnnotation);\n      };\n      /**\r\n       * Prepare busyness lines\r\n       * @param interpolatedChannels\r\n       * @param annotations\r\n       * @param mainSSID\r\n       * @param radio\r\n       * @param busynessesGroupByChannel\r\n       * @param channelList\r\n       * @param signalKeyList\r\n       * @param bandwidthList\r\n       */\n      this.prepareBusynessLines = function (interpolatedChannels, annotations, mainSSID, radio, busynessesGroupByChannel, channelList, signalKeyList, bandwidthList) {\n        // Only display busyness of 1, 6, 11 for 2.4GHz\n        var that = this;\n        var limitedBusynessDisplayChannels = radio24ChannelList;\n        var radioStr = isRadioData();\n        if (radioStr == '5G') {\n          limitedBusynessDisplayChannels = radio5ChannelList;\n        } else if (radioStr == '6G') {\n          limitedBusynessDisplayChannels = radio6ChannelList;\n        }\n        _.each(channelList, function (channel) {\n          channel = parseInt(channel);\n          if ((limitedBusynessDisplayChannels === null || limitedBusynessDisplayChannels === void 0 ? void 0 : limitedBusynessDisplayChannels.indexOf(channel)) === -1) {\n            if (interpolatedChannels[channel] == null) {\n              interpolatedChannels[channel] = getBlankEntry(mainSSID.id, signalKeyList, bandwidthList);\n            }\n            // return;\n          }\n\n          _.each(bandwidthList, function (bandwidth) {\n            var span = that.getSpan(channel, bandwidth);\n            var curBusyness = 0;\n            if (_.has(busynessesGroupByChannel[channel], bandwidth)) {\n              curBusyness = parseInt(busynessesGroupByChannel[channel][bandwidth][0]['busyness']) / 10;\n              var annotationObj = {\n                series: bandwidth,\n                shortText: BandToDisplayMap[bandwidth],\n                height: 21,\n                width: 50,\n                text: \"\"\n              };\n              annotationObj['x'] = that.getCentralChannel(channel, span.leftSpan, span.rightSpan);\n              annotations === null || annotations === void 0 ? void 0 : annotations.push(annotationObj);\n              var interpolatedChannel_start = channel - span.leftSpan;\n              var interpolatedChannel_end = channel + span.rightSpan;\n              _.each(_.range(interpolatedChannel_start - 1, interpolatedChannel_end + 1), function (interpolatedChannel) {\n                if (interpolatedChannels[interpolatedChannel] == null) {\n                  interpolatedChannels[interpolatedChannel] = getBlankEntry(mainSSID.id, signalKeyList, bandwidthList);\n                }\n                if (interpolatedChannel === interpolatedChannel_start - 1 || interpolatedChannel === interpolatedChannel_end) {\n                  if (interpolatedChannels[interpolatedChannel][bandwidth] === BLANK) {\n                    interpolatedChannels[interpolatedChannel][bandwidth] = 0;\n                  }\n                } else {\n                  interpolatedChannels[interpolatedChannel][bandwidth] = curBusyness;\n                }\n              });\n            }\n          });\n        });\n      };\n      /**\r\n       * Prepare Signal Lines\r\n       *\r\n       * @param interpolatedChannels\r\n       * @param annotations\r\n       * @param mainSSID\r\n       * @param signalsGroupBySSID\r\n       * @param ssidList\r\n       * @param signalKeyList\r\n       * @param bandwidthList\r\n       */\n      this.prepareSignalLines = function (interpolatedChannels, annotations, mainSSID, signalsGroupBySSID, ssidList, signalKeyList, bandwidthList) {\n        var getSpan = this.getSpan;\n        _.each(ssidList, function (ssid) {\n          _.each(signalsGroupBySSID[ssid], function (signal) {\n            var channel = parseInt(signal['channel']);\n            var signalBandwidth = '';\n            var upperCaseVal = signal['radio'].toUpperCase();\n            if (upperCaseVal === '24G') {\n              signalBandwidth = '20MHZ';\n            } else if (upperCaseVal === '5G') {\n              signalBandwidth = '80MHZ';\n            } else {\n              signalBandwidth = '160MHZ';\n            }\n            let bandwidth;\n            if (signal['channel_bandwidth']) {\n              bandwidth = signal['channel_bandwidth'].toUpperCase() !== 'N/AMHZ' ? signal['channel_bandwidth'].toUpperCase() : signalBandwidth;\n            } else {\n              bandwidth = '';\n            }\n            var macaddress = signal['bssid'];\n            var keyForSignal = ssid + SPLITTER + macaddress;\n            var annotationObj = {\n              series: keyForSignal,\n              x: channel,\n              shortText: ssid,\n              text: macaddress,\n              height: 21,\n              width: 120\n            };\n            var span = getSpan(channel, bandwidth);\n            if (annotationObj.shortText == BLANK || annotationObj.shortText == HIDDEN) {\n              annotationObj.shortText = macaddress;\n            } else if (annotationObj.shortText && annotationObj.shortText.indexOf('Hidden') > -1 && macaddress) {\n              annotationObj.shortText = macaddress;\n            }\n            annotations === null || annotations === void 0 ? void 0 : annotations.push(annotationObj);\n            var signalStrength = parseInt(signal['rssi']);\n            var interpolatedChannel_start = channel - span.leftSpan;\n            var interpolatedChannel_end = channel + span.rightSpan;\n            var interpolatedChannel_left_ascend = interpolatedChannel_start + span.step;\n            var interpolatedChannel_right_descend = interpolatedChannel_end - span.step;\n            _.each(_.range(interpolatedChannel_start, interpolatedChannel_end + 1), function (interpolatedChannel) {\n              if (!_.has(interpolatedChannels, interpolatedChannel)) {\n                interpolatedChannels[interpolatedChannel] = getBlankEntry(mainSSID.id, signalKeyList, bandwidthList);\n              }\n              if (interpolatedChannel === interpolatedChannel_start || interpolatedChannel === interpolatedChannel_end) {\n                interpolatedChannels[interpolatedChannel][keyForSignal] = SIGNAL_MIN;\n              } else if (interpolatedChannel >= interpolatedChannel_left_ascend && interpolatedChannel <= interpolatedChannel_right_descend) {\n                interpolatedChannels[interpolatedChannel][keyForSignal] = signalStrength;\n              } else if (interpolatedChannel > interpolatedChannel_start && interpolatedChannel < interpolatedChannel_left_ascend) {\n                var distance = interpolatedChannel - interpolatedChannel_start;\n                interpolatedChannels[interpolatedChannel][keyForSignal] = SIGNAL_MIN + (signalStrength - SIGNAL_MIN) / span.step * distance;\n              } else {\n                var distance = interpolatedChannel - interpolatedChannel_right_descend;\n                interpolatedChannels[interpolatedChannel][keyForSignal] = SIGNAL_MIN + (signalStrength - SIGNAL_MIN) / span.step * distance;\n              }\n            });\n          });\n        });\n      };\n    }\n    getSiteScanFilterData(key) {\n      return this.siteScanFilter.hasOwnProperty(key) ? this.siteScanFilter[key] : false;\n    }\n    setSiteScanFilterData(key, siteScanFilter, reset) {\n      reset ? this.siteScanFilter = {} : this.siteScanFilter[key] = siteScanFilter;\n    }\n    /***end-aswin-11-05-2021-dygraph-filter-channel-issue-fix  */\n    getSpan(curChannel, curBandwidth) {\n      var SPAN = 4;\n      var result = {};\n      var curSpan = 0;\n      var radioStr = isRadioData();\n      if (radioStr == '2.4G') {\n        // 2.4GHz\n        switch (curBandwidth) {\n          case Band20:\n            curSpan = Band20Width;\n            break;\n          case Band40:\n            curSpan = Band40Width;\n            break;\n          case Band80:\n            curSpan = Band80Width;\n            break;\n          case Band160:\n            curSpan = Band160Width;\n            break;\n        }\n        ;\n        result['leftSpan'] = curSpan;\n        result['rightSpan'] = curSpan;\n        result['step'] = 1;\n        return result;\n      } else if (radioStr == '5G' || radioStr == '6G') {\n        // Clasify channels into blocks\n        var modValue, modResult, totalSpan;\n        switch (curBandwidth) {\n          case Band20:\n            result = {\n              leftSpan: 2,\n              rightSpan: 2\n            };\n            break;\n          case Band40:\n            modValue = 2;\n            break;\n          case Band80:\n            modValue = 4;\n            break;\n          case Band160:\n            modValue = 8;\n            break;\n        }\n        ;\n        if (modValue != null) {\n          modResult = Math.floor(curChannel / SPAN) % modValue;\n          totalSpan = modValue * 4;\n          if (modResult === 0) {\n            // Right-most\n            result['leftSpan'] = totalSpan - 2;\n          } else {\n            result['leftSpan'] = (modResult - 1) * SPAN + 2;\n          }\n          result['rightSpan'] = totalSpan - result['leftSpan'];\n        }\n        result['step'] = 2;\n        return result;\n      } else {}\n    }\n    /**\r\n    * Return an entry in which all keys are blank\r\n    *\r\n    * @param mainSsidId\r\n    * @param signalKeyList\r\n    * @param bandwidthList\r\n    * @returns {{}}\r\n    */\n    // getBlankEntry = function (mainSsidId, signalKeyList, bandwidthList) {\n    //     var channel = {};\n    //     channel[mainSsidId] = BLANK;\n    //     _.each(signalKeyList, function (key) {\n    //         channel[key] = BLANK;\n    //     });\n    //     _.each(bandwidthList, function (bandwidth) {\n    //         channel[bandwidth] = BLANK;\n    //     });\n    //     return channel;\n    // };\n    initParams(modelName, dataModelName) {\n      radioPathGiga = this.Utils.get24gRadioPathCalix();\n      radioPath = this.Utils.get24gRadioPath();\n      wlanPath = this.Utils.get24gWlanPath()[0];\n      var radioStr = isRadioData();\n      if (radioStr == '5G') {\n        radioPathGiga = this.Utils.get5gRadioPathCalix();\n        radioPath = this.Utils.get5gRadioPath();\n        wlanPath = this.Utils.get5gWlanPath()[0];\n      } else if (radioStr == '6G') {\n        radioPathGiga = this.Utils.get6gRadioPathCalix();\n        radioPath = this.Utils.get6gRadioPath();\n        wlanPath = this.Utils.get5gWlanPath()[0];\n      }\n      // else {\n      //     radioPathGiga = \"InternetGatewayDevice.X_000631_Device.WiFi.Radio.2.\";\n      //     radioPath = \"InternetGatewayDevice.LANDevice.1.WLANConfiguration.9.\";\n      //     wlanPath = \"InternetGatewayDevice.LANDevice.1.WLANConfiguration.9.\";\n      // }\n      wlanOperatingChannelBandwidthStore = this.Utils.getParameterRealAttributeBS(radioPath + wlanOperatingChannelBandwidthParamName);\n      wlanChannelUtilizationStore = this.Utils.getParameterRealAttributeBS(radioPath + wlanChannelUtilizationParamName);\n    }\n    getRadioObj() {\n      var data = JSON.parse(sessionStorage.getItem(keyWifidiagData));\n      var mergedObj, radioGigaObj, radioObj, wlanObj;\n      wlanObj = this.Utils.getValueByPath(data, wlanPath);\n      radioGigaObj = this.Utils.getValueByPath(data, radioPathGiga);\n      radioObj = this.Utils.getValueByPath(data, radioPath);\n      mergedObj = _.extend(wlanObj, radioGigaObj, radioObj) || {};\n      if (radioGigaObj && radioGigaObj.ChannelUtilization) {\n        mergedObj.ChannelUtilization = parseInt(radioGigaObj.ChannelUtilization) / 10;\n      } else if (radioObj && radioObj[wlanChannelUtilizationStore]) {\n        mergedObj.ChannelUtilization = parseInt(radioObj[wlanChannelUtilizationStore]);\n      } else if (wlanObj && wlanObj[wlanChannelUtilizationStore]) {\n        mergedObj.ChannelUtilization = parseInt(wlanObj[wlanChannelUtilizationStore]);\n      }\n      if (radioGigaObj && radioGigaObj.ChannelInterferenceTime) {\n        mergedObj.ChannelInterferenceTime = parseInt(radioGigaObj.ChannelInterferenceTime) / 10;\n      } else if (radioObj && radioObj[wlanChannelInterferenceTimeStore]) {\n        mergedObj.ChannelInterferenceTime = parseInt(radioObj[wlanChannelInterferenceTimeStore]);\n      } else if (wlanObj && wlanObj[wlanChannelInterferenceTimeStore]) {\n        mergedObj.ChannelInterferenceTime = parseInt(wlanObj[wlanChannelInterferenceTimeStore]);\n      }\n      if (mergedObj.ChannelUtilization && mergedObj.ChannelInterferenceTime) {\n        mergedObj.ChannelFreeTime = 100 - mergedObj.ChannelUtilization - mergedObj.ChannelInterferenceTime;\n      }\n      var packetsSent = 0,\n        packetsReceived = 0;\n      if (radioGigaObj && radioGigaObj.PacketsTransmittedDownstream) {\n        packetsSent = radioGigaObj.PacketsTransmittedDownstream;\n        packetsReceived = radioGigaObj.PacketsTransmittedUpstream;\n      } else if (radioObj && radioObj.PacketsTransmittedDownstream) {\n        packetsSent = radioObj[wlanTotalPacketsSentStore];\n        packetsReceived = radioObj[wlanTotalPacketsReceivedStore];\n      } else {\n        var ssids = this.getSsids();\n        _.each(ssids, function (ssid) {\n          packetsSent += parseInt(ssid[wlanTotalPacketsSentStore]);\n          packetsReceived += parseInt(ssid[wlanTotalPacketsReceivedStore]);\n        });\n      }\n      return _.extend(mergedObj, {\n        'packetsSent': packetsSent,\n        'packetsReceived': packetsReceived\n      });\n    }\n    getRadioSummaryObj() {\n      if (sessionStorage.getItem('radioSummary') != 'undefined') {\n        var data = sessionStorage.getItem('radioSummary') ? JSON.parse(sessionStorage.getItem('radioSummary')) : '';\n      }\n      var SSID = JSON.parse(sessionStorage.getItem('serialNumber'));\n      var mSSID = sessionStorage.getItem('calix.mSSID');\n      var mergedObj = data;\n      if (mergedObj) {\n        mergedObj['SSID'] = mSSID ? mSSID : SSID;\n      }\n      return mergedObj;\n    }\n    getMainSsidObj() {\n      // var radioObject = this.getRadioObj();\n      sessionStorage.getItem('mainchannelvalue');\n      if (sessionStorage.getItem('mainchannelvalue') != 'undefined') {\n        var mainchannelvalue = sessionStorage.getItem('mainchannelvalue') ? JSON.parse(sessionStorage.getItem('mainchannelvalue')) : '';\n      }\n      var radioObject = this.getRadioSummaryObj();\n      return {\n        id: \"GigaCenterMainSSIDSeriesID\",\n        channel: eval(mainchannelvalue.channel),\n        name: radioObject.SSID\n      };\n    }\n    getSiteScanObj() {\n      var result = JSON.parse(sessionStorage.getItem(keyWifidiagSiteScan));\n      if (sessionStorage.getItem('radio24ChannelList') != 'undefined') {\n        radio24ChannelList = JSON.parse(sessionStorage.getItem('radio24ChannelList'));\n      }\n      var radioStr = isRadioData();\n      if (radioStr == '5G') {\n        radio5ChannelList = JSON.parse(sessionStorage.getItem('radio5ChannelList'));\n        ;\n      } else if (radioStr == '6G') {\n        if (sessionStorage.getItem('radio6ChannelList') != 'undefined') {\n          radio6ChannelList = JSON.parse(sessionStorage.getItem('radio6ChannelList'));\n          ;\n        }\n      }\n      if (result == null) {\n        return null;\n      }\n      var busynesses = result.busyness;\n      var signals = result.neighbor;\n      var radioValue = '';\n      if (radioStr == '5G') {\n        radioValue = '5g';\n      } else if (radioStr == '2.4G') {\n        radioValue = '24g';\n      } else {\n        radioValue = '6g';\n      }\n      busynesses = _.filter(busynesses, function (busyness) {\n        return busyness['radio'] === radioValue;\n      });\n      signals = _.filter(signals, function (signal) {\n        return signal['radio'] === radioValue;\n      });\n      signals = _.map(signals, function (signal) {\n        signal['channel'] = signal['channel'].toString();\n        return signal;\n      });\n      _.each(signals, function (signal) {\n        if (signal.ssid == BLANK) {\n          signal.ssid = HIDDEN;\n        }\n      });\n      //group all signals by channel\n      var signalsGroupByChannelAll = _.groupBy(signals, function (signal) {\n        return signal['channel'];\n      });\n      var channelListAll = _.sortBy(_.keys(signalsGroupByChannelAll), function (channel) {\n        return parseInt(channel);\n      });\n      /***begin-aswin-11-05-2021-dygraph-filter-channel-issue-fix */\n      var channelsSelected = this.getSiteScanFilterData('channelFilter');\n      if (channelsSelected && channelsSelected.length > 0) {\n        // busynesses = _.filter(busynesses, function (busyness) {\n        //     return contains(channelsSelected, busyness['channel']);\n        // });\n        // signals = _.filter(signals, function (signal) {\n        //     return contains(channelsSelected, signal['channel']);\n        // });\n        busynesses = busynesses.filter(s => channelsSelected.includes(parseInt(s.channel)));\n        signals = signals.filter(s => channelsSelected.includes(parseInt(s.channel)));\n      }\n      /***end-aswin-11-05-2021-dygraph-filter-channel-issue-fix */\n      //group busyness by (channel,bandwidth)\n      var busynessesGroupByChannel;\n      busynessesGroupByChannel = _.groupBy(busynesses, function (busyness) {\n        return busyness['channel'];\n      });\n      _.each(busynessesGroupByChannel, function (busynessesForChannel, channel) {\n        var busynessesForChannelGroupByBandWidth = _.groupBy(busynessesForChannel, function (busyness) {\n          return busyness['channel_bandwidth'].toUpperCase();\n        });\n        busynessesGroupByChannel[channel] = busynessesForChannelGroupByBandWidth;\n      });\n      var channelList = _.sortBy(_.keys(busynessesGroupByChannel), function (channel) {\n        return parseInt(channel);\n      });\n      //group busyness by (bandwidth,channel)\n      var busynessesGroupByBandwidth;\n      busynessesGroupByBandwidth = _.groupBy(busynesses, function (busyness) {\n        return busyness['channel_bandwidth'].toUpperCase();\n      });\n      _.each(busynessesGroupByBandwidth, function (busynessesForBandwidth, bandwidth) {\n        var busynessesForBandwidthGroupByChannel = _.groupBy(busynessesForBandwidth, function (busyness) {\n          return busyness['channel'];\n        });\n        busynessesGroupByBandwidth[bandwidth] = busynessesForBandwidthGroupByChannel;\n      });\n      var bandwidthList = _.keys(busynessesGroupByBandwidth);\n      //group signal by SSID\n      var signalsGroupBySSID = _.groupBy(signals, function (signal) {\n        return signal['ssid'];\n      });\n      var ssidList = _.keys(signalsGroupBySSID);\n      //group signal by (SSID + BSSID)\n      var signalsGroupBySSIDAndMac = _.groupBy(signals, function (signal) {\n        return signal['ssid'] + SPLITTER + signal['bssid'];\n      });\n      var signalKeyList = _.keys(signalsGroupBySSIDAndMac);\n      //group signal by channel\n      var signalsGroupByChannel = _.groupBy(signals, function (signal) {\n        return signal['channel'];\n      });\n      if (channelList.length === 0) {\n        channelList = _.sortBy(_.keys(signalsGroupByChannel), function (channel) {\n          return parseInt(channel);\n        });\n      }\n      var interpolatedChannels = {};\n      var annotations = [];\n      var mainSSIDObj = this.getMainSsidObj();\n      // var radio = this.getRadioObj();\n      var radio = this.getRadioSummaryObj();\n      // if (isRadioData()) {\n      //     radio[wlanOperatingChannelBandwidthStore] = \"80MHz\";\n      // } else {\n      //     radio[wlanOperatingChannelBandwidthStore] = \"20MHz\";\n      // }\n      //radio.bandwidth = bandwidthList[0];\n      bandwidthList = this.getBusynessBandwidthList(radio, busynessesGroupByChannel, channelList, bandwidthList);\n      this.prepareMainSSIDLines(interpolatedChannels, annotations, mainSSIDObj, radio, signalKeyList, bandwidthList);\n      this.prepareBusynessLines(interpolatedChannels, annotations, mainSSIDObj, radio, busynessesGroupByChannel, channelList, signalKeyList, bandwidthList);\n      this.prepareSignalLines(interpolatedChannels, annotations, mainSSIDObj, signalsGroupBySSID, ssidList, signalKeyList, bandwidthList);\n      var addEmpty = function (channel) {\n        if (!_.has(interpolatedChannels, channel)) {\n          if (radioStr == '5G') {\n            if (_.includes(radio5ChannelList, channel)) {\n              interpolatedChannels[channel] = getBlankEntry(mainSSIDObj.id, signalKeyList, bandwidthList);\n            }\n          } else if (radioStr == '2.4G') {\n            interpolatedChannels[channel] = getBlankEntry(mainSSIDObj.id, signalKeyList, bandwidthList);\n          } else if (radioStr == '6G') {\n            if (_.includes(radio6ChannelList, channel)) {\n              interpolatedChannels[channel] = getBlankEntry(mainSSIDObj.id, signalKeyList, bandwidthList);\n            }\n          } else {\n            interpolatedChannels[channel] = getBlankEntry(mainSSIDObj.id, signalKeyList, bandwidthList);\n          }\n        }\n      };\n      var addSupplementChannels = function () {\n        var currentTab = sessionStorage.getItem('currentTab');\n        if (currentTab === keyUnifiedWifiTabName) {\n          return;\n        }\n        if (currentTab === keyWifiCurrentTabForTwo) {\n          _.each(_.range(-1, 16), function (channel) {\n            addEmpty(channel);\n          });\n        } else if (currentTab === 'six') {\n          // _.each(_.range(-1, 16), function (channel) {\n          //     addEmpty(channel);\n          // });\n          _.each(_.range(30, 86), function (channel) {\n            addEmpty(channel);\n          });\n          _.each(_.range(100, 216), function (channel) {\n            addEmpty(channel);\n          });\n          // _.each(_.range(, 180), function (channel) {\n          //     addEmpty(channel);\n          // });\n        } else {\n          _.each(_.range(34, 67), function (channel) {\n            addEmpty(channel);\n          });\n          _.each(_.range(98, 147), function (channel) {\n            addEmpty(channel);\n          });\n          _.each(_.range(147, 180), function (channel) {\n            addEmpty(channel);\n          });\n        }\n      };\n      addSupplementChannels();\n      var siteScanObj = {};\n      siteScanObj['interpolatedChannels'] = interpolatedChannels;\n      siteScanObj['channelList'] = channelList;\n      siteScanObj['bandwidthList'] = bandwidthList;\n      siteScanObj['ssidList'] = ssidList;\n      siteScanObj['signalKeyList'] = signalKeyList;\n      siteScanObj['annotations'] = annotations;\n      siteScanObj['signals'] = signals;\n      siteScanObj['busynesses'] = busynesses;\n      siteScanObj['busynessesGroupByBandwidth'] = busynessesGroupByBandwidth;\n      siteScanObj['channelListAll'] = channelListAll;\n      siteScanObj[\"mainSSID\"] = mainSSIDObj;\n      sessionStorage.setItem(keyWifidiagSiteScanObj, JSON.stringify(siteScanObj));\n      return siteScanObj;\n    }\n  }\n  DygraphSiteScanService.ɵfac = function DygraphSiteScanService_Factory(t) {\n    return new (t || DygraphSiteScanService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DygraphSiteScanUtilsService));\n  };\n  DygraphSiteScanService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DygraphSiteScanService,\n    factory: DygraphSiteScanService.ɵfac,\n    providedIn: 'root'\n  });\n  return DygraphSiteScanService;\n})();\nfunction isRadioData() {\n  var currentTab = sessionStorage.getItem('currentTab');\n  if (currentTab == 'two') {\n    currentTab = '2.4G';\n  } else if (currentTab == 'five') {\n    currentTab = '5G';\n  } else {\n    currentTab = '6G';\n  }\n  return currentTab;\n}\n;\nfunction getBlankEntry(mainSsidId, signalKeyList, bandwidthList) {\n  var channel = {};\n  channel[mainSsidId] = BLANK;\n  _.each(signalKeyList, function (key) {\n    channel[key] = BLANK;\n  });\n  _.each(bandwidthList, function (bandwidth) {\n    channel[bandwidth] = BLANK;\n  });\n  return channel;\n}","map":null,"metadata":{},"sourceType":"module"}