{"ast":null,"code":"var MARKER_RESIZING = 'djs-resizing',\n  MARKER_RESIZE_NOT_OK = 'resize-not-ok';\nvar LOW_PRIORITY = 500;\nimport { attr as svgAttr, remove as svgRemove, classes as svgClasses } from 'tiny-svg';\n\n/**\n * Provides previews for resizing shapes when resizing.\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {PreviewSupport} previewSupport\n */\nexport default function ResizePreview(eventBus, canvas, previewSupport) {\n  /**\n   * Update resizer frame.\n   *\n   * @param {Object} context\n   */\n  function updateFrame(context) {\n    var shape = context.shape,\n      bounds = context.newBounds,\n      frame = context.frame;\n    if (!frame) {\n      frame = context.frame = previewSupport.addFrame(shape, canvas.getDefaultLayer());\n      canvas.addMarker(shape, MARKER_RESIZING);\n    }\n    if (bounds.width > 5) {\n      svgAttr(frame, {\n        x: bounds.x,\n        width: bounds.width\n      });\n    }\n    if (bounds.height > 5) {\n      svgAttr(frame, {\n        y: bounds.y,\n        height: bounds.height\n      });\n    }\n    if (context.canExecute) {\n      svgClasses(frame).remove(MARKER_RESIZE_NOT_OK);\n    } else {\n      svgClasses(frame).add(MARKER_RESIZE_NOT_OK);\n    }\n  }\n\n  /**\n   * Remove resizer frame.\n   *\n   * @param {Object} context\n   */\n  function removeFrame(context) {\n    var shape = context.shape,\n      frame = context.frame;\n    if (frame) {\n      svgRemove(context.frame);\n    }\n    canvas.removeMarker(shape, MARKER_RESIZING);\n  }\n\n  // add and update previews\n  eventBus.on('resize.move', LOW_PRIORITY, function (event) {\n    updateFrame(event.context);\n  });\n\n  // remove previews\n  eventBus.on('resize.cleanup', function (event) {\n    removeFrame(event.context);\n  });\n}\nResizePreview.$inject = ['eventBus', 'canvas', 'previewSupport'];","map":null,"metadata":{},"sourceType":"module"}