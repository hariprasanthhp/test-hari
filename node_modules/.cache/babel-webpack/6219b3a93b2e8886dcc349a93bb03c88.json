{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nimport * as i3 from \"@angular/router\";\nexport let ApplicationReportApiService = /*#__PURE__*/(() => {\n  class ApplicationReportApiService {\n    constructor(httpClient, sso, router) {\n      this.httpClient = httpClient;\n      this.sso = sso;\n      this.router = router;\n      this.orgId = this.sso.getOrganizationID(this.router.url);\n    }\n    getTraffic(params, module) {\n      let startDate = new Date(params.startDate);\n      let endDate = new Date(params.endDate);\n      let criteria = params.criteriaSelected ? params.criteriaSelected : 'usage';\n      startDate = this.getISOStartOfDay(startDate);\n      endDate = this.getISOEndOfDay(endDate);\n      let granularity = this.getGranularity(startDate, endDate, \"traffic\", criteria);\n      startDate = this.getStartUTCDate(params.startDate, 0);\n      endDate = this.getEndUTCDate(params.endDate);\n      if (criteria != 'usage') {\n        params.startTime = params.startTime - 1;\n        params.endTime = params.endTime - 1;\n        let diff = moment(endDate).diff(moment(startDate), \"hour\");\n        let dayDiff = moment(endDate).diff(moment(startDate), \"days\");\n        granularity = dayDiff <= 31 ? '1hour' : '24hour';\n        if (diff <= 72 && dayDiff <= 3) {\n          let d = new Date(params.startDate);\n          startDate = this.getStartUTCDate(params.startDate, params.startTime);\n          endDate = this.getStartUTCDate(d, params.endTime);\n          granularity = '1min';\n          params.APIStartDate = startDate;\n          params.APIendDate = endDate;\n        }\n        if (params['locationsSelected'].length > 0 && !params['locationsSelected'].includes(\"All\") && diff <= 72 && dayDiff <= 3) {\n          granularity = '1hour';\n        }\n      } else if (criteria == 'usage') {\n        startDate = this.getISOStartOfDay(params.startDate);\n        endDate = this.getISOEndOfDay(params.endDate);\n      }\n      let locationParams = '';\n      if (params['locationsSelected'] && !params['locationsSelected'].includes(\"All\")) {\n        params['locationsSelected'].forEach(element => {\n          locationParams += `&location=${element}`;\n        });\n      }\n      let url = `${environment.CCO_REPORTS_BASE_URL}timeseries?org=${this.orgId}&tenant=0&granularity=${granularity}&startTime=${startDate}&endTime=${endDate}&output=${criteria}&direction=both${locationParams}`;\n      if (module && module == 'applications') {\n        let appParams = '';\n        if (params['applicationsSelected'] && !params['applicationsSelected'].includes(\"All\")) {\n          params['applicationsSelected'].forEach(element => {\n            appParams += `&application=${element}`;\n          });\n          url = `${url}${appParams}`;\n        }\n      }\n      return this.httpClient.get(url);\n    }\n    callRestApi(endpoint, filters) {\n      return this.httpClient.get(`${endpoint}`, this.options).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    getGranularity(startDate, endDate, reportType = '', criteriaType = '') {\n      let granularity = '';\n      if (reportType == 'traffic') {\n        let diff = moment(endDate).diff(moment(startDate), \"hour\");\n        let dayDiff = moment(endDate).diff(moment(startDate), \"days\");\n        if (criteriaType != 'usage') {\n          granularity = diff <= 72 && dayDiff <= 3 ? '1min' : dayDiff <= 31 && diff > 72 ? '1hour' : '24hour';\n        } else {\n          granularity = diff <= 24 ? '1hour' : '24hour';\n        }\n      }\n      if (reportType == 'topSubscribers' || reportType == 'topApplications' || reportType == 'topLocations') {\n        let diff = moment(endDate).diff(moment(startDate), \"hour\");\n        granularity = diff <= 72 ? '1hour' : '24hour';\n      }\n      return granularity;\n    }\n    getISOStartOfDay(dt) {\n      //returns 12AM UTC of day\n      let d = new Date(dt);\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let date = `${year}-${month}-${day}T00:00:00Z`;\n      return date;\n    }\n    getISOEndOfDay(dt) {\n      //returns 12AM UTC of Next day of End date\n      let d = new Date(dt);\n      d.setDate(new Date(d).getDate() + 1);\n      let year = d.getFullYear();\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let date = `${year}-${month}-${day}T00:00:00Z`;\n      return date;\n    }\n    getStartDate(dt, hour, diff) {\n      let d = new Date(dt);\n      if (diff === 3 && hour < 48 && hour >= 24) {\n        d.setDate(new Date(d).getDate() + 1);\n      } else if (diff === 3 && hour >= 48) {\n        d.setDate(new Date(d).getDate() + 2);\n      }\n      if (diff === 2 && hour >= 24) {\n        d.setDate(new Date(d).getDate() + 1);\n      }\n      if (hour >= 48) {\n        hour = hour - 48;\n      } else if (hour >= 24) {\n        hour = hour - 24;\n      }\n      let year = `${d.getFullYear()}`;\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let hr = hour > 9 ? hour : '0' + hour;\n      let date = `${year}-${month}-${day}T${hr}:00:00Z`;\n      return date;\n    }\n    getEndDate(dt, hour, diff) {\n      let d = new Date(dt);\n      if (diff == 3 && hour <= 48 && hour > 24) {\n        d.setDate(new Date(d).getDate() - 1);\n      } else if (diff == 3 && hour <= 24) {\n        d.setDate(new Date(d).getDate() - 2);\n      }\n      if (diff == 2 && hour <= 24) {\n        d.setDate(new Date(d).getDate() - 1);\n      }\n      if (hour === 24 || hour === 48 || hour === 72) {\n        d.setDate(new Date(d).getDate() + 1);\n        hour = 0;\n      }\n      if (hour >= 48) {\n        hour = hour - 48;\n      } else if (hour >= 24) {\n        hour = hour - 24;\n      }\n      let year = `${d.getFullYear()}`;\n      let month = `${d.getMonth() + 1}`;\n      let day = `${d.getDate()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      let hr = hour > 9 ? hour : '0' + hour;\n      let date = `${year}-${month}-${day}T${hr}:00:00Z`;\n      return date;\n    }\n    getStartUTCDate(dt, addHours) {\n      let d = new Date(dt);\n      d.setHours(addHours, 0, 0, 0);\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n    getEndUTCDate(dt) {\n      let d = new Date(dt);\n      d.setHours(0, 0, 0, 0);\n      d.setDate(new Date(d).getDate() + 1);\n      let year = d.getUTCFullYear();\n      let month = `${d.getUTCMonth() + 1}`;\n      let day = `${d.getUTCDate()}`;\n      let hr = `${d.getUTCHours()}`;\n      let min = `${d.getUTCMinutes()}`;\n      if (month.length < 2) {\n        month = `0${month}`;\n      }\n      if (day.length < 2) {\n        day = `0${day}`;\n      }\n      if (hr.length < 2) {\n        hr = `0${hr}`;\n      }\n      if (min.length < 2) {\n        min = `0${min}`;\n      }\n      let date = `${year}-${month}-${day}T${hr}:${min}:00Z`;\n      return date;\n    }\n  }\n  ApplicationReportApiService.ɵfac = function ApplicationReportApiService_Factory(t) {\n    return new (t || ApplicationReportApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService), i0.ɵɵinject(i3.Router));\n  };\n  ApplicationReportApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApplicationReportApiService,\n    factory: ApplicationReportApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApplicationReportApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}