{"ast":null,"code":"/**\n * @license\n * Copyright 2013 David Eberlein (david.eberlein@ch.sauter-bc.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview DataHandler default implementation used for simple line charts.\n * @author David Eberlein (david.eberlein@ch.sauter-bc.com)\n */\n\n/*global Dygraph:false */\n\"use strict\";\n\nimport DygraphDataHandler from './datahandler';\n\n/**\n * @constructor\n * @extends Dygraph.DataHandler\n */\nvar DefaultHandler = function () {};\nDefaultHandler.prototype = new DygraphDataHandler();\n\n/** @inheritDoc */\nDefaultHandler.prototype.extractSeries = function (rawData, i, options) {\n  // TODO(danvk): pre-allocate series here.\n  var series = [];\n  var logScale = options.get('logscale');\n  for (var j = 0; j < rawData.length; j++) {\n    var x = rawData[j][0];\n    var point = rawData[j][i];\n    if (logScale) {\n      // On the log scale, points less than zero do not exist.\n      // This will create a gap in the chart.\n      if (point <= 0) {\n        point = null;\n      }\n    }\n    series.push([x, point]);\n  }\n  return series;\n};\n\n/** @inheritDoc */\nDefaultHandler.prototype.rollingAverage = function (originalData, rollPeriod, options) {\n  rollPeriod = Math.min(rollPeriod, originalData.length);\n  var rollingData = [];\n  var i, j, y, sum, num_ok;\n  // Calculate the rolling average for the first rollPeriod - 1 points\n  // where\n  // there is not enough data to roll over the full number of points\n  if (rollPeriod == 1) {\n    return originalData;\n  }\n  for (i = 0; i < originalData.length; i++) {\n    sum = 0;\n    num_ok = 0;\n    for (j = Math.max(0, i - rollPeriod + 1); j < i + 1; j++) {\n      y = originalData[j][1];\n      if (y === null || isNaN(y)) continue;\n      num_ok++;\n      sum += originalData[j][1];\n    }\n    if (num_ok) {\n      rollingData[i] = [originalData[i][0], sum / num_ok];\n    } else {\n      rollingData[i] = [originalData[i][0], null];\n    }\n  }\n  return rollingData;\n};\n\n/** @inheritDoc */\nDefaultHandler.prototype.getExtremeYValues = function (series, dateWindow, options) {\n  var minY = null,\n    maxY = null,\n    y;\n  var firstIdx = 0,\n    lastIdx = series.length - 1;\n  for (var j = firstIdx; j <= lastIdx; j++) {\n    y = series[j][1];\n    if (y === null || isNaN(y)) continue;\n    if (maxY === null || y > maxY) {\n      maxY = y;\n    }\n    if (minY === null || y < minY) {\n      minY = y;\n    }\n  }\n  return [minY, maxY];\n};\nexport default DefaultHandler;","map":null,"metadata":{},"sourceType":"module"}