{"ast":null,"code":"import { is } from '../../../util/ModelUtil';\nimport { getParent } from './ModelingUtil';\nimport { asTRBL } from 'diagram-js/lib/layout/LayoutUtil';\nimport { substractTRBL, resizeTRBL } from 'diagram-js/lib/features/resize/ResizeUtil';\nvar abs = Math.abs;\nfunction getTRBLResize(oldBounds, newBounds) {\n  return substractTRBL(asTRBL(newBounds), asTRBL(oldBounds));\n}\nvar LANE_PARENTS = ['bpmn:Participant', 'bpmn:Process', 'bpmn:SubProcess'];\nexport var LANE_INDENTATION = 30;\n\n/**\n * Collect all lane shapes in the given paren\n *\n * @param  {djs.model.Shape} shape\n * @param  {Array<djs.model.Base>} [collectedShapes]\n *\n * @return {Array<djs.model.Base>}\n */\nexport function collectLanes(shape, collectedShapes) {\n  collectedShapes = collectedShapes || [];\n  shape.children.filter(function (s) {\n    if (is(s, 'bpmn:Lane')) {\n      collectLanes(s, collectedShapes);\n      collectedShapes.push(s);\n    }\n  });\n  return collectedShapes;\n}\n\n/**\n * Return the lane children of the given element.\n *\n * @param {djs.model.Shape} shape\n *\n * @return {Array<djs.model.Shape>}\n */\nexport function getChildLanes(shape) {\n  return shape.children.filter(function (c) {\n    return is(c, 'bpmn:Lane');\n  });\n}\n\n/**\n * Return the root element containing the given lane shape\n *\n * @param {djs.model.Shape} shape\n *\n * @return {djs.model.Shape}\n */\nexport function getLanesRoot(shape) {\n  return getParent(shape, LANE_PARENTS) || shape;\n}\n\n/**\n * Compute the required resize operations for lanes\n * adjacent to the given shape, assuming it will be\n * resized to the given new bounds.\n *\n * @param {djs.model.Shape} shape\n * @param {Bounds} newBounds\n *\n * @return {Array<Object>}\n */\nexport function computeLanesResize(shape, newBounds) {\n  var rootElement = getLanesRoot(shape);\n  var initialShapes = is(rootElement, 'bpmn:Process') ? [] : [rootElement];\n  var allLanes = collectLanes(rootElement, initialShapes),\n    shapeTrbl = asTRBL(shape),\n    shapeNewTrbl = asTRBL(newBounds),\n    trblResize = getTRBLResize(shape, newBounds),\n    resizeNeeded = [];\n  allLanes.forEach(function (other) {\n    if (other === shape) {\n      return;\n    }\n    var topResize = 0,\n      rightResize = trblResize.right,\n      bottomResize = 0,\n      leftResize = trblResize.left;\n    var otherTrbl = asTRBL(other);\n    if (trblResize.top) {\n      if (abs(otherTrbl.bottom - shapeTrbl.top) < 10) {\n        bottomResize = shapeNewTrbl.top - otherTrbl.bottom;\n      }\n      if (abs(otherTrbl.top - shapeTrbl.top) < 5) {\n        topResize = shapeNewTrbl.top - otherTrbl.top;\n      }\n    }\n    if (trblResize.bottom) {\n      if (abs(otherTrbl.top - shapeTrbl.bottom) < 10) {\n        topResize = shapeNewTrbl.bottom - otherTrbl.top;\n      }\n      if (abs(otherTrbl.bottom - shapeTrbl.bottom) < 5) {\n        bottomResize = shapeNewTrbl.bottom - otherTrbl.bottom;\n      }\n    }\n    if (topResize || rightResize || bottomResize || leftResize) {\n      resizeNeeded.push({\n        shape: other,\n        newBounds: resizeTRBL(other, {\n          top: topResize,\n          right: rightResize,\n          bottom: bottomResize,\n          left: leftResize\n        })\n      });\n    }\n  });\n  return resizeNeeded;\n}","map":null,"metadata":{},"sourceType":"module"}