{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport { getSSIDConfigList, getSSIDManagerList } from \"./endpoints\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SupportRadioService = /*#__PURE__*/(() => {\n  class SupportRadioService {\n    constructor(http) {\n      this.http = http;\n    }\n    // Read\n    getSSIDConfigList(orgId, serialNumber) {\n      return this.http.get(`${environment.SUPPORT_URL}${getSSIDConfigList.replace(/orgId/, orgId).replace(/serialNumber/, serialNumber)}`).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    fetchMetaDatavalues(userid) {\n      return this.http.get(`${environment.API_BASE_URL}csc/router/wifi/secondarynetwork/list?userId=${userid}`);\n    }\n    UpdateOldSSIDedit(orgId, serialNumber, data) {\n      return this.http.put(`${environment.SUPPORT_URL}/device/${orgId}/${serialNumber}/ssidPool`, data).pipe(catchError(this.handleError));\n    }\n    deleteProfileSSID(orgid, serialNumber, eventid) {\n      return this.http.delete(`${environment.SUPPORT_URL}/device/${orgid}/${serialNumber}/secondarynetwork/delete?eventId=${eventid}`);\n    }\n    updateSSIDConfigList(body, orgId, serialNumber) {\n      return this.http.put(`${environment.SUPPORT_URL}/device/${orgId}/${serialNumber}/ssidPool`, body).pipe(catchError(this.handleError));\n    }\n    // updateSSIDConfigList(body: SupportRadioObjectModel, orgId: string, serialNumber: string) {\n    //   return this.http.put(`${environment.SUPPORT_URL}/device/${updateSSIDConfigList.replace(/orgId/, orgId)\n    //     .replace(/serialNumber/, serialNumber)}`, body).pipe(\n    //     catchError(this.handleError) //  handle the error\n    //   );\n    // }\n    getSSIDManagerList(orgId, serialNumber, isRefreshed = false) {\n      const SSIDGetListUrl = `${environment.SUPPORT_URL}${getSSIDManagerList.replace(/orgId/, orgId).replace(/serialNumber/, serialNumber)}${isRefreshed ? '?forceRefresh=true' : ''}`;\n      return this.http.get(SSIDGetListUrl).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    fetchMetaDatavaluesNew(orgid, serialNumber, isRefreshed = false) {\n      return this.http.get(`${environment.API_BASE_URL}csc/device/${orgid}/${serialNumber}/ssidPool${isRefreshed ? '?forceRefresh=true' : ''}`);\n    }\n    Savepasspharseauditlog(request) {\n      //https://stage.api.calix.ai/v1/csc/useraudit/saveAuditLog\n      return this.http.post(`${environment.API_BASE_URL}csc/useraudit/saveAuditLog`, request);\n    }\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n  }\n  SupportRadioService.ɵfac = function SupportRadioService_Factory(t) {\n    return new (t || SupportRadioService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  SupportRadioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SupportRadioService,\n    factory: SupportRadioService.ɵfac,\n    providedIn: 'root'\n  });\n  return SupportRadioService;\n})();","map":null,"metadata":{},"sourceType":"module"}