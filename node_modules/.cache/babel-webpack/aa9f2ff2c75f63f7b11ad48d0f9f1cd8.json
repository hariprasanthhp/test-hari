{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/flow-config/services/common-functions.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"src/app/shared/services/sso-auth.service\";\n//import { io } from 'socket.io-client';\nexport let CcoCommonService = /*#__PURE__*/(() => {\n  class CcoCommonService {\n    constructor(commonFunctionsService, http, sso) {\n      this.commonFunctionsService = commonFunctionsService;\n      this.http = http;\n      this.sso = sso;\n      // private socket = io('ws://localhost:8085',{transports: ['websocket', 'polling', 'flashsocket'],autoConnect: true,\n      // 'reconnectionDelay': 3000,\n      // 'reconnection': true}) ;\n      this.currentPageData = new Subject();\n      this.ccoPageExport = new Subject();\n      this.showCountStatus = new BehaviorSubject(false);\n      this.showCountStatus$ = this.showCountStatus.asObservable();\n      this.textSearch = new Subject();\n    }\n    static save(formValue) {\n      throw new Error('Method not implemented.');\n    }\n    save(formValue) {\n      //console.log(formValue)\n      this.productList = formValue;\n      return this.productList;\n    }\n    savesubscriber(formValue) {\n      this.subscriberValue = formValue;\n      //console.log(formValue)\n      return this.subscriberValue;\n    }\n    savesevice1(formValue) {\n      const list = {\n        pppoe: {\n          username: formValue.username,\n          password: formValue.password\n        },\n        VLanId: formValue.VLanId,\n        Pbit: formValue.Pbit\n      };\n      this.servicevalue1 = list;\n      return this.servicevalue1;\n    }\n    savesevice2(formValue) {\n      const list = {\n        FaxT38: {\n          Enable: formValue.FaxT38\n        },\n        ServiceType: formValue.ServiceType,\n        DialPlan: formValue.DialPlan\n      };\n      this.servicevalue2 = list;\n      //console.log(formValue)\n      return this.servicevalue2;\n    }\n    savesevice3(formValue) {\n      this.servicevalue3 = formValue;\n      //console.log(formValue)\n      return this.servicevalue3;\n    }\n    savesevice4(formValue) {\n      this.servicevalue4 = formValue;\n      //console.log(formValue)\n      return this.servicevalue4;\n    }\n    savesevice5(formValue) {\n      this.servicevalue5 = formValue;\n      //console.log(formValue)\n      return this.servicevalue5;\n    }\n    savesevice6(formValue) {\n      this.servicevalue6 = formValue;\n      //console.log(formValue)\n      return this.servicevalue6;\n    }\n    currentPageAdder(data) {\n      this.currentPageData.next(data);\n    }\n    doExport(data) {\n      this.ccoPageExport.next(data);\n    }\n    exportDataConvertor(array) {\n      let check = Array.isArray(array);\n      if (check) {\n        array.forEach(el => {\n          delete el._id;\n          for (const key in el) {\n            if (typeof el[key] == 'boolean') {\n              if (el[key] == true) {\n                el[key] = 'Yes';\n              } else {\n                el[key] = 'No';\n              }\n            }\n          }\n        });\n      }\n      return array;\n    }\n    generateExportName(firstName) {\n      return this.commonFunctionsService.generateExportName(firstName);\n    }\n    showCount(val) {\n      this.showCountStatus.next(val);\n    }\n    performSearch(orgId, filter, pageNumber, pageSize) {\n      const params = new HttpParams()\n      // .set(\"orgId\", orgId)\n      .set(\"filter\", filter || \"\").set(\"pageNumber\", pageNumber).set(\"pageSize\", pageSize);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.get(`${environment.SUPPORT_URL}/subscriber-search`, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    handleError(handleError) {\n      throw new Error('Method not implemented.');\n    }\n    searchTextEmit(data) {\n      this.textSearch.next(data);\n    }\n  }\n  CcoCommonService.ɵfac = function CcoCommonService_Factory(t) {\n    return new (t || CcoCommonService)(i0.ɵɵinject(i1.CommonFunctionsService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.SsoAuthService));\n  };\n  CcoCommonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CcoCommonService,\n    factory: CcoCommonService.ɵfac,\n    providedIn: 'root'\n  });\n  return CcoCommonService;\n})();","map":null,"metadata":{},"sourceType":"module"}