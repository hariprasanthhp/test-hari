{"ast":null,"code":"import { set as cursorSet, unset as cursorUnset } from '../../util/Cursor';\nimport { install as installClickTrap } from '../../util/ClickTrap';\nimport { delta as deltaPos } from '../../util/PositionUtil';\nimport { event as domEvent, closest as domClosest } from 'min-dom';\nimport { toPoint } from '../../util/Event';\nvar THRESHOLD = 15;\n\n/**\n * Move the canvas via mouse.\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n */\nexport default function MoveCanvas(eventBus, canvas) {\n  var context;\n\n  // listen for move on element mouse down;\n  // allow others to hook into the event before us though\n  // (dragging / element moving will do this)\n  eventBus.on('element.mousedown', 500, function (e) {\n    return handleStart(e.originalEvent);\n  });\n  function handleMove(event) {\n    var start = context.start,\n      button = context.button,\n      position = toPoint(event),\n      delta = deltaPos(position, start);\n    if (!context.dragging && length(delta) > THRESHOLD) {\n      context.dragging = true;\n      if (button === 0) {\n        installClickTrap(eventBus);\n      }\n      cursorSet('grab');\n    }\n    if (context.dragging) {\n      var lastPosition = context.last || context.start;\n      delta = deltaPos(position, lastPosition);\n      canvas.scroll({\n        dx: delta.x,\n        dy: delta.y\n      });\n      context.last = position;\n    }\n\n    // prevent select\n    event.preventDefault();\n  }\n  function handleEnd(event) {\n    domEvent.unbind(document, 'mousemove', handleMove);\n    domEvent.unbind(document, 'mouseup', handleEnd);\n    context = null;\n    cursorUnset();\n  }\n  function handleStart(event) {\n    // event is already handled by '.djs-draggable'\n    if (domClosest(event.target, '.djs-draggable')) {\n      return;\n    }\n    var button = event.button;\n\n    // reject right mouse button or modifier key\n    if (button >= 2 || event.ctrlKey || event.shiftKey || event.altKey) {\n      return;\n    }\n    context = {\n      button: button,\n      start: toPoint(event)\n    };\n    domEvent.bind(document, 'mousemove', handleMove);\n    domEvent.bind(document, 'mouseup', handleEnd);\n\n    // we've handled the event\n    return true;\n  }\n  this.isActive = function () {\n    return !!context;\n  };\n}\nMoveCanvas.$inject = ['eventBus', 'canvas'];\n\n// helpers ///////\n\nfunction length(point) {\n  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n}","map":null,"metadata":{},"sourceType":"module"}