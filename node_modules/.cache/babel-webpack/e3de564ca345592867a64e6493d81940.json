{"ast":null,"code":"import { bind, debounce, forEach, isNumber, isObject } from 'min-dash';\nimport { isSnapped, setSnapped } from './SnapUtil';\nimport { append as svgAppend, attr as svgAttr, classes as svgClasses, create as svgCreate } from 'tiny-svg';\nvar SNAP_TOLERANCE = 7;\nexport var SNAP_LINE_HIDE_DELAY = 1000;\n\n/**\n * Generic snapping feature.\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n */\nexport default function Snapping(canvas) {\n  this._canvas = canvas;\n\n  // delay hide by 1000 seconds since last snap\n  this._asyncHide = debounce(bind(this.hide, this), SNAP_LINE_HIDE_DELAY);\n}\nSnapping.$inject = ['canvas'];\n\n/**\n * Snap an event to given snap points.\n *\n * @param {Event} event\n * @param {SnapPoints} snapPoints\n */\nSnapping.prototype.snap = function (event, snapPoints) {\n  var context = event.context,\n    snapContext = context.snapContext,\n    snapLocations = snapContext.getSnapLocations();\n  var snapping = {\n    x: isSnapped(event, 'x'),\n    y: isSnapped(event, 'y')\n  };\n  forEach(snapLocations, function (location) {\n    var snapOrigin = snapContext.getSnapOrigin(location);\n    var snapCurrent = {\n      x: event.x + snapOrigin.x,\n      y: event.y + snapOrigin.y\n    };\n\n    // snap both axis if not snapped already\n    forEach(['x', 'y'], function (axis) {\n      var locationSnapping;\n      if (!snapping[axis]) {\n        locationSnapping = snapPoints.snap(snapCurrent, location, axis, SNAP_TOLERANCE);\n        if (locationSnapping !== undefined) {\n          snapping[axis] = {\n            value: locationSnapping,\n            originValue: locationSnapping - snapOrigin[axis]\n          };\n        }\n      }\n    });\n\n    // no need to continue snapping\n    if (snapping.x && snapping.y) {\n      return false;\n    }\n  });\n\n  // show snap lines\n  this.showSnapLine('vertical', snapping.x && snapping.x.value);\n  this.showSnapLine('horizontal', snapping.y && snapping.y.value);\n\n  // snap event\n  forEach(['x', 'y'], function (axis) {\n    var axisSnapping = snapping[axis];\n    if (isObject(axisSnapping)) {\n      setSnapped(event, axis, axisSnapping.originValue);\n    }\n  });\n};\nSnapping.prototype._createLine = function (orientation) {\n  var root = this._canvas.getLayer('snap');\n  var line = svgCreate('path');\n  svgAttr(line, {\n    d: 'M0,0 L0,0'\n  });\n  svgClasses(line).add('djs-snap-line');\n  svgAppend(root, line);\n  return {\n    update: function (position) {\n      if (!isNumber(position)) {\n        svgAttr(line, {\n          display: 'none'\n        });\n      } else {\n        if (orientation === 'horizontal') {\n          svgAttr(line, {\n            d: 'M-100000,' + position + ' L+100000,' + position,\n            display: ''\n          });\n        } else {\n          svgAttr(line, {\n            d: 'M ' + position + ',-100000 L ' + position + ', +100000',\n            display: ''\n          });\n        }\n      }\n    }\n  };\n};\nSnapping.prototype._createSnapLines = function () {\n  this._snapLines = {\n    horizontal: this._createLine('horizontal'),\n    vertical: this._createLine('vertical')\n  };\n};\nSnapping.prototype.showSnapLine = function (orientation, position) {\n  var line = this.getSnapLine(orientation);\n  if (line) {\n    line.update(position);\n  }\n  this._asyncHide();\n};\nSnapping.prototype.getSnapLine = function (orientation) {\n  if (!this._snapLines) {\n    this._createSnapLines();\n  }\n  return this._snapLines[orientation];\n};\nSnapping.prototype.hide = function () {\n  forEach(this._snapLines, function (snapLine) {\n    snapLine.update();\n  });\n};","map":null,"metadata":{},"sourceType":"module"}