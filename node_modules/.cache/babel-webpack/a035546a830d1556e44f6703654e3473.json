{"ast":null,"code":"import { isArray, forEach } from 'min-dash';\n\n/**\n * A service that offers the current selection in a diagram.\n * Offers the api to control the selection, too.\n *\n * @class\n *\n * @param {EventBus} eventBus the event bus\n */\nexport default function Selection(eventBus) {\n  this._eventBus = eventBus;\n  this._selectedElements = [];\n  var self = this;\n  eventBus.on(['shape.remove', 'connection.remove'], function (e) {\n    var element = e.element;\n    self.deselect(element);\n  });\n  eventBus.on(['diagram.clear'], function (e) {\n    self.select(null);\n  });\n}\nSelection.$inject = ['eventBus'];\nSelection.prototype.deselect = function (element) {\n  var selectedElements = this._selectedElements;\n  var idx = selectedElements.indexOf(element);\n  if (idx !== -1) {\n    var oldSelection = selectedElements.slice();\n    selectedElements.splice(idx, 1);\n    this._eventBus.fire('selection.changed', {\n      oldSelection: oldSelection,\n      newSelection: selectedElements\n    });\n  }\n};\nSelection.prototype.get = function () {\n  return this._selectedElements;\n};\nSelection.prototype.isSelected = function (element) {\n  return this._selectedElements.indexOf(element) !== -1;\n};\n\n/**\n * This method selects one or more elements on the diagram.\n *\n * By passing an additional add parameter you can decide whether or not the element(s)\n * should be added to the already existing selection or not.\n *\n * @method Selection#select\n *\n * @param  {Object|Object[]} elements element or array of elements to be selected\n * @param  {boolean} [add] whether the element(s) should be appended to the current selection, defaults to false\n */\nSelection.prototype.select = function (elements, add) {\n  var selectedElements = this._selectedElements,\n    oldSelection = selectedElements.slice();\n  if (!isArray(elements)) {\n    elements = elements ? [elements] : [];\n  }\n\n  // selection may be cleared by passing an empty array or null\n  // to the method\n  if (add) {\n    forEach(elements, function (element) {\n      if (selectedElements.indexOf(element) !== -1) {\n        // already selected\n        return;\n      } else {\n        selectedElements.push(element);\n      }\n    });\n  } else {\n    this._selectedElements = selectedElements = elements.slice();\n  }\n  this._eventBus.fire('selection.changed', {\n    oldSelection: oldSelection,\n    newSelection: selectedElements\n  });\n};","map":null,"metadata":{},"sourceType":"module"}