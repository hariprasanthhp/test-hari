{"ast":null,"code":"import { throwError, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"src/app/shared-utils/date-utils.service\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"src/app/shared/services/sso-auth.service\";\nimport * as i5 from \"@angular/router\";\nexport let HealthService = /*#__PURE__*/(() => {\n  class HealthService {\n    constructor(translateService, dateUtils, httpClient, ssoAuthService, activeRoute) {\n      this.translateService = translateService;\n      this.dateUtils = dateUtils;\n      this.httpClient = httpClient;\n      this.ssoAuthService = ssoAuthService;\n      this.activeRoute = activeRoute;\n      this.baseURL = environment.API_BASE_URL;\n      this.previousUrl = \"\";\n      this.isReport = false;\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n      this.regions = this.baseURL + 'nfa/regions?tenant=0';\n      this.locations = this.baseURL + 'nfa/locations?tenant=0';\n      this.systems = this.baseURL + 'nfa/systems?tenant=0';\n      this.reports = this.baseURL + 'health/reports/';\n      this.ont = this.baseURL + 'nfa/onts/count?tenant=0&reportType=DEVICE_CHECKED_IN&type=pon';\n      this.ontBipError = this.baseURL + 'health/reports/biperror/thresholdexceededcount?tenant=0&granularity=15min&direction=both&groupBy=ont';\n      this.ontlowlightcount = this.baseURL + 'health/reports/lowlightlevelcount?tenant=0&granularity=15min&groupBy=ont';\n      this.Interface = this.baseURL + 'nfa/interfaces/names?';\n      this.OntNames = this.baseURL + 'nfa/onts/names?';\n    }\n    ontBipErrornew(query) {\n      let query1 = query + \"&countBy=ont\";\n      return this.httpClient.get(`${environment.API_BASE_URL}health/reports/biperror/count?${query1}`).pipe(catchError(this.handleError));\n    }\n    GetBipError(query) {\n      return this.httpClient.get(` ${this.reports + \"/biperror?\"}${query}`).pipe(catchError(this.handleError) // Error handle\n      );\n    }\n    //offset=0&limit=500&reportType=DISCOVERED_DEVICE&\n    ontname(fsan) {\n      return this.httpClient.get(`${environment.API_BASE_URL}nfa/onts?fsanMac=${fsan}`).pipe(catchError(this.handleError));\n    }\n    getfsan() {\n      return this.httpClient.get(`${this.regions}`).pipe(catchError(this.handleError));\n      // let arr = [{ fsan: 'sdfsdafsdaf' }, { fsan: 'sdfsdafsdaf' }, { fsan: 'sdfsdafsdaf' }, { fsan: 'sdfsdafsdaf' }]\n      // return arr;\n    }\n\n    timeseries(query, type) {\n      if (type == 'pon') {\n        let field = \"&field=usOct&field=dsOct&field=rxPkt&field=rxDis&field=rxErr&field=txPkt&field=txDis&field=txErr&field=rxErrRate&field=txErrRate&field=rxDisRate&field=txDisRate&field=dsRate&field=usRate&interfaceCategory=pon\";\n        let field1 = \"&&field=dsBipErr&field=usBipErr\";\n        return this.httpClient.get(`${this.baseURL + \"/health/timeseries?\"}${query}${field}`).pipe(catchError(this.handleError));\n      } else if (type == 'ont') {\n        let field = `&field=dsBipErr&field=usBipErr&field=usFecTotCodeWord&field=dsFecTotCodeWord&field=upTime&field=rxOptPwr&field=neOptSignalLvl&field=txOptLvl&field=usFecCor&field=dsFecCor&field=usFecUncorCodeWord&field=dsFecUncorCodeWord`;\n        return this.httpClient.get(`${this.baseURL + \"/health/timeseries?\"}${query}${field}`).pipe(catchError(this.handleError));\n      } else if (type == 'ethernet' || type == \"ae\") {\n        let field = \"&field=oct&field=pkt&field=rxPkt&field=rxOct&field=rxDis&field=rxErr&field=txPkt&field=txDis&field=txErr&field=txOct&field=rxErrRate&field=txErrRate&field=rxDisRate&field=txDisRate&field=dsRate&field=usRate\";\n        if (type == 'ae') {\n          field = field + \"&format=grouped&groupBy=system&groupBy=interface&groupBy=ont&interfaceCategory=ae\";\n          return this.httpClient.get(`${this.baseURL + \"/health/timeseries?\"}${query}${field}`).pipe(catchError(this.handleError));\n        } else {\n          field = field + \"&interfaceCategory=ethernet\";\n          return this.httpClient.get(`${this.baseURL + \"/health/timeseries?\"}${query}${field}`).pipe(catchError(this.handleError));\n        }\n      } else if (type == 'dsl') {\n        let field = \"&field=rxPkt&field=rxOct&field=rxDis&field=rxErr&field=txPkt&field=txOct&field=usCurRate&field=dsCurRate&field=usAttRate&field=dsAttRate&field=usSnrMargin&field=dsSnrMargin&field=usTargetSnr&field=dsTargetSnr&field=upTime&field=retrainCnt&field=usRate&field=dsRate&field=rxDisRate&field=rxErrRate\";\n        field = field + \"&interfaceCategory=dsl\";\n        return this.httpClient.get(`${this.baseURL + \"/health/timeseries?\"}${query}${field}`).pipe(catchError(this.handleError));\n      } else if (type == 'ae_General') {\n        let field = \"&field=oct&field=pkt&field=rxPkt&field=rxOct&field=rxDis&field=rxErr&field=txPkt&field=txDis&field=txErr&field=txOct&field=rxErrRate&field=txErrRate&field=rxDisRate&field=txDisRate&field=dsRate&field=usRate&interfaceCategory=ae&aeMgmt=true&format=grouped&groupBy=region&groupBy=location&groupBy=system&groupBy=interface&groupBy=ont\";\n        return this.httpClient.get(`${this.baseURL + \"/health/timeseries?\"}${query}${field}`).pipe(catchError(this.handleError));\n      }\n    }\n    timeseriesBipError(query, type) {\n      if (type == 'pon') {\n        let field = \"&field=dsBipErr&field=usBipErr\";\n        return this.httpClient.get(`${this.baseURL + \"/health/timeseries?\"}${query}${field}`).pipe(catchError(this.handleError));\n      } else if (type == 'ont') {\n        let field = \"&field=dsBer&field=usBer\";\n        return this.httpClient.get(`${this.baseURL + \"/health/timeseries?\"}${query}${field}`).pipe(catchError(this.handleError));\n      }\n    }\n    // Interface \n    GetInterfaces(query, type) {\n      // let system = '&system' + systemId;\n      return this.httpClient.get(`${this.Interface}${query}`).pipe(map(res => {\n        res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n          numeric: true\n        }));\n        return res;\n      }), catchError(this.handleError));\n    }\n    // ont Names\n    GetOntNames(query) {\n      return this.httpClient.get(`${this.OntNames}${query}`);\n    }\n    pontimeseries(query) {\n      let field = \"&field=usOct&field=dsOct&field=rxPkt&field=rxDis&field=rxErr&field=txPkt&field=txDis&field=txErr\";\n      return this.httpClient.get(`${this.baseURL + \"/health/timeseries?\"}${query}${field}`).pipe(catchError(this.handleError));\n    }\n    ethernertimeseries(query) {\n      let field = \"&field=oct&field=pkt&field=rxPkt\";\n      return this.httpClient.get(`${this.baseURL + \"/health/timeseries?\"}${query}${field}`).pipe(catchError(this.handleError));\n    }\n    Lowlightlevelcount(query) {\n      return this.httpClient.get(`${this.reports + \"/lowlightlevelcount?\"}${query}`).pipe(catchError(this.handleError));\n    }\n    getRegions() {\n      return this.httpClient.get(`${this.regions}`).pipe(catchError(this.handleError));\n    }\n    getLocations(id) {\n      let region = '&region=' + id;\n      return this.httpClient.get(`${this.locations}${region}`).pipe(map(res => {\n        res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n        return res;\n      }), catchError(this.handleError));\n    }\n    getSystems(regionId, locationId, page) {\n      let region = '&region=' + regionId;\n      let location = '&location=' + locationId;\n      if (page) location += `&interfaceCategory=${page}`;\n      return this.httpClient.get(`${this.systems}${region}${location}`).pipe(map(res => {\n        res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n        return res;\n      }), catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    getOnt() {\n      return this.httpClient.get(`${this.ont}`);\n    }\n    getEthernetCount(query) {\n      if (query == 'ethernet') {\n        this.query1 = `aeMgmt=false&adminStatus=UP`;\n      } else {\n        this.query1 = `aeMgmt=true&adminStatus=UP`;\n      }\n      return this.httpClient.get(`${environment.API_BASE_URL}nfa/interfaces/ethernet/count?${this.query1}`).pipe(catchError(this.handleError));\n    }\n    getEthernetActiveCount(query) {\n      this.query1 = `aeMgmt=false&adminStatus=UP&operStatus=UP`;\n      return this.httpClient.get(`${environment.API_BASE_URL}nfa/interfaces/ethernet/count?${this.query1}`).pipe(catchError(this.handleError));\n    }\n    getAECount(query) {\n      this.query1 = `adminStatus=UP`;\n      return this.httpClient.get(`${environment.API_BASE_URL}nfa/onts/ae/count?${this.query1}`).pipe(catchError(this.handleError));\n    }\n    getOntBipError(FromDate, EndDate) {\n      return this.httpClient.get(`${this.ontBipError}&startTime=${FromDate}&endTime=${EndDate}`).pipe(catchError(this.handleError));\n    }\n    getLowlightlevelcount(fromdate, endtime) {\n      return this.httpClient.get(`${this.ontlowlightcount}&startTime=${fromdate}&endTime=${endtime}`).pipe(catchError(this.handleError));\n    }\n    formatTodayDate() {\n      var d = new Date(),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      return [year, month, day].join('-');\n    }\n    chartDataFraming(chartdata, chartName, type, extraData, value) {\n      //debugger\n      let resultArray = [];\n      let title = type == 'fsan' ? 'ont' : type;\n      type = type == 'ont' ? 'fsan' : type;\n      if (chartName == 'Packet Dropped') {\n        for (var i = 0; i < (chartdata === null || chartdata === void 0 ? void 0 : chartdata.length); i++) {\n          let name = chartdata[i][type] ? chartdata[i][type] : \"other\";\n          resultArray.push({\n            [this.language[title]]: chartdata[i][\"deleted\"] ? name + ' (Deleted)' : name,\n            [this.language['Received Discarded Packets']]: chartdata[i].rxDis ? chartdata[i].rxDis : 0,\n            [this.language['Transmitted Discarded Packets']]: chartdata[i].txDis ? chartdata[i].txDis : 0\n          });\n        }\n      } else if (chartName == 'ethernet_packet' || chartName == 'ae_packet') {\n        for (var i = 0; i < (chartdata === null || chartdata === void 0 ? void 0 : chartdata.length); i++) {\n          let name = chartdata[i][type] ? chartdata[i][type] : \"other\";\n          resultArray.push({\n            [this.language[title]]: chartdata[i][\"deleted\"] ? name + ' (Deleted)' : name,\n            [this.language['Received Error Packets']]: chartdata[i].rxErr ? chartdata[i].rxErr : 0,\n            [this.language['Transmitted Error Packets']]: chartdata[i].txErr ? chartdata[i].txErr : 0\n          });\n        }\n      } else if (chartName == 'PON Port Courts' || chartName == 'PON Interface Count' || chartName == 'ae_threshold') {\n        let us = this.language['Upstream'];\n        let ds = this.language['Downstream'];\n        for (var i = 0; i < (chartdata === null || chartdata === void 0 ? void 0 : chartdata.length); i++) {\n          let name = chartdata[i][type] ? chartdata[i][type] : \"other\";\n          resultArray.push({\n            [this.language[title]]: chartdata[i][\"deleted\"] ? name + ' (Deleted)' : name,\n            [us]: chartdata[i].usUtilExcCnt ? chartdata[i].usUtilExcCnt : 0,\n            [ds]: chartdata[i].dsUtilExcCnt ? chartdata[i].dsUtilExcCnt : 0\n          });\n        }\n      } else if (value === 'DSL' && (chartName.includes(\"Threshold\") || chartName.includes(\"Not At Attainable\") || chartName.includes(\"Not At Target\"))) {\n        let us = this.language['Upstream'];\n        let ds = this.language['Downstream'];\n        if (chartName.includes(\"Not At Attainable\")) {\n          for (var i = 0; i < (chartdata === null || chartdata === void 0 ? void 0 : chartdata.length); i++) {\n            let name = chartdata[i][type] ? chartdata[i][type] : \"other\";\n            resultArray.push({\n              [this.language[title]]: chartdata[i][\"deleted\"] ? name + ' (Deleted)' : name,\n              [us]: chartdata[i].usCurRateBelowThresCnt ? chartdata[i].usCurRateBelowThresCnt : 0,\n              [ds]: chartdata[i].dsCurRateBelowThresCnt ? chartdata[i].dsCurRateBelowThresCnt : 0\n            });\n          }\n        } else if (chartName.includes(\"Not At Target\")) {\n          for (var i = 0; i < (chartdata === null || chartdata === void 0 ? void 0 : chartdata.length); i++) {\n            let name = chartdata[i][type] ? chartdata[i][type] : \"other\";\n            resultArray.push({\n              [this.language[title]]: chartdata[i][\"deleted\"] ? name + ' (Deleted)' : name,\n              [us]: chartdata[i].usSnrBelowThresCnt ? chartdata[i].usSnrBelowThresCnt : 0,\n              [ds]: chartdata[i].dsSnrBelowThresCnt ? chartdata[i].dsSnrBelowThresCnt : 0\n            });\n          }\n        } else {\n          for (var i = 0; i < (chartdata === null || chartdata === void 0 ? void 0 : chartdata.length); i++) {\n            let name = chartdata[i][type] ? chartdata[i][type] : \"other\";\n            resultArray.push({\n              [this.language[title]]: chartdata[i][\"deleted\"] ? name + ' (Deleted)' : name,\n              [us]: chartdata[i].usUtilExcCnt ? chartdata[i].usUtilExcCnt : 0,\n              [ds]: chartdata[i].dsUtilExcCnt ? chartdata[i].dsUtilExcCnt : 0\n            });\n          }\n        }\n      } else if (chartName == 'PON Error Rate' || chartName == \"BIP Error Rate\") {\n        let urls = this.activeRoute.url;\n        let bipE;\n        if (urls.includes('health/ont')) bipE = this.language[\"BIP Error Count\"];else bipE = this.language['BIP Error Interfaces'];\n        for (var i = 0; i < (chartdata === null || chartdata === void 0 ? void 0 : chartdata.length); i++) {\n          let name = chartdata[i][type] ? chartdata[i][type] : \"other\";\n          resultArray.push({\n            [this.language[title]]: chartdata[i][\"deleted\"] ? name + ' (Deleted)' : name,\n            [bipE]: chartdata[i].count ? chartdata[i].count : 0\n          });\n        }\n      } else if (chartName == 'low light') {\n        for (var i = 0; i < (chartdata === null || chartdata === void 0 ? void 0 : chartdata.length); i++) {\n          let name = chartdata[i][type] ? chartdata[i][type] : \"other\";\n          resultArray.push({\n            [this.language[title]]: chartdata[i][\"deleted\"] ? name + ' (Deleted)' : name,\n            [this.language[\"Optical Power Low Threshold Count\"]]: chartdata[i].count ? chartdata[i].count : 0\n          });\n        }\n      } else if (chartName == 'systemUtilization') {\n        for (var i = 0; i < (chartdata === null || chartdata === void 0 ? void 0 : chartdata.length); i++) {\n          let name = chartdata[i][type] ? chartdata[i][type] : \"other\";\n          resultArray.push({\n            [this.language[title]]: chartdata[i][\"deleted\"] ? name + ' (Deleted)' : name,\n            [this.language['Upstream']]: chartdata[i].usUtilizationPercent ? chartdata[i].usUtilizationPercent : 0,\n            [this.language['Downstream']]: chartdata[i].dsUtilizationPercent ? chartdata[i].dsUtilizationPercent : 0\n          });\n        }\n      }\n      if (resultArray.length) return resultArray;else {\n        resultArray.push({\n          [this.language[\"No Data Available\"]]: \" \"\n        });\n        return resultArray;\n      }\n    }\n    stackedAreaChartOptions() {\n      const object = Object.assign(Object.assign({}, this.commonHighChartOptions), {\n        chart: {\n          type: 'area'\n        },\n        title: {\n          text: 'Stacked Area Chart'\n        },\n        colors: ['#338107', '#fbe936', '#fa423b'],\n        // subtitle: {\n        //   text: 'Source: Wikipedia.org'\n        // },\n        xAxis: {\n          labels: {\n            rotation: -45,\n            style: {\n              fontSize: '13px',\n              fontFamily: 'Verdana, sans-serif'\n            }\n          },\n          categories: ['09/25 12:15', '09/25 20:15', '09/26 04:15', '09/26 12:15', '09/26 20:15', '09/27 04:15', '09/27 12:15', '09/27 20:15', '09/28 04:15', '09/28 12:15', '09/28 20:15', '09/29 04:15', '09/29 12:15', '09/29 20:15', '09/30 04:15', '09/30 12:15', '09/30 20:15', '10/01 04:15', '10/01 12:15', '10/01 20:15', '10/02 04:15'],\n          tickmarkPlacement: 'on',\n          title: {\n            enabled: false\n          }\n        },\n        yAxis: {\n          min: 0,\n          max: 100,\n          tickInterval: 25,\n          title: {\n            text: 'Percentage(%)'\n          }\n          // labels: {\n          //   formatter() {\n          //     return this.value / 1000;\n          //   }\n          // }\n        },\n        tooltip: {\n          headerFormat: '<b>{series.name}</b><br>',\n          pointFormat: '{point.percentage:.1f}%'\n        },\n        plotOptions: {\n          series: {\n            cursor: 'pointer',\n            point: {\n              events: {\n                // tslint:disable-next-line:object-literal-shorthand\n                click: function () {\n                  console.log('Category: ' + this.category + ', Series:' + this.series.name + ', value: ' + this.y);\n                }\n              }\n            }\n          },\n          area: {\n            stacking: 'normal',\n            // lineColor: '#666666',\n            lineWidth: 1,\n            marker: {\n              enabled: false,\n              symbol: 'circle',\n              radius: 2,\n              states: {\n                hover: {\n                  enabled: true\n                }\n              },\n              lineWidth: 1,\n              lineColor: '#666666'\n            }\n          }\n        },\n        series: [{\n          name: 'Free',\n          data: [100, 100, 100, 100, 100, 100, null, null, null, null, null, null, 100, 100, 100, 100, 100, 100, null, null, null]\n        }, {\n          name: 'Used',\n          data: [5, 4, 6, 5, 4, 9, null, null, null, null, null, null, 4, 5, 2, 4, 5, 7, null, null, null]\n        }, {\n          name: 'Interference',\n          data: [20, 25, 18, 25, 22, 24, null, null, null, null, null, null, 20, 22, 25, 21, 23, 18, null, null, null]\n        }]\n      });\n      return of(object);\n    }\n    duplicateDataHandle(data, groupby, type) {\n      if (data === null || data === void 0 ? void 0 : data.length) {\n        let count = 0;\n        let duplicate = [];\n        let modifyData = [];\n        data.forEach(element => {\n          count = count + 1;\n          if (!element[groupby] || element[groupby] == \"       \") {\n            element[groupby] = \"Other\";\n          }\n          if (duplicate.indexOf(element[groupby]) === -1) {\n            duplicate.push(element[groupby]);\n          } else {\n            modifyData.push(element[groupby]);\n          }\n        });\n        data.forEach(element => {\n          modifyData.forEach(el => {\n            if (element[groupby] === el) {\n              element[groupby] = element[groupby] + \"_\" + element[type].slice(0, 5);\n            }\n          });\n        });\n      }\n      return data;\n    }\n    generateDownloadName(chartName, type1, page) {\n      let type;\n      // type1 = type1 == 'interface' ? \"Port\" : type1;\n      if (type1 == 'ont' || type1 == \"fsan\") type = 'ONT';else type = type1.charAt(0).toUpperCase() + type1.slice(1);\n      if (chartName == 'PON Port Courts' || chartName == 'PON Interface Count') {\n        switch (type) {\n          case \"Region\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"Threshold By Region\"];\n              break;\n            }\n          case \"Location\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"Threshold By Location\"];\n              break;\n            }\n          case \"System\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"Threshold By System\"];\n              break;\n            }\n          case \"Interface\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"Threshold By Interface\"];\n              break;\n            }\n          case \"ONT\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"Threshold Exceeded By Ont\"];\n              break;\n            }\n        }\n      } else if (chartName == 'Packet Dropped') {\n        switch (type) {\n          case \"Region\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HPacketDroppedByRegion\"];\n              break;\n            }\n          case \"Location\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HPacketDiscardsByLocation\"];\n              break;\n            }\n          case \"System\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HPacketDroppedBySystem\"];\n              break;\n            }\n          case \"Interface\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HPacketDroppedByInterface\"];\n              break;\n            }\n          case \"ONT\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HPacketDroppedByOnt\"];\n              break;\n            }\n        }\n      } else if (chartName == \"low light\") {\n        switch (type) {\n          case \"Region\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HLowLightLevelbyregion\"];\n              break;\n            }\n          case \"Location\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HLowLightLevelByLocation\"];\n              break;\n            }\n          case \"System\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HLowLightLevelBySystem\"];\n              break;\n            }\n          case \"Interface\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HLowLightLevelByInterface\"];\n              break;\n            }\n          case \"ONT\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"Low Level Light By Ont\"];\n              break;\n            }\n        }\n      } else if (chartName == \"systemUtilization\") {\n        chartName = this.language[page] + \" \" + this.language[\"HUtilizationByInterface\"];\n      } else if (chartName == \"BIP Error Rate\" && page == 'PON') {\n        if (type == \"Interface\") {\n          chartName = this.language[page] + \" \" + this.language[\"Interfaces with BIP Errors\"];\n        } else {\n          switch (type) {\n            case \"Region\":\n              {\n                chartName = this.language[page] + \" \" + this.language[\"BIP Error Interfaces By Region\"];\n                break;\n              }\n            case \"Location\":\n              {\n                chartName = this.language[page] + \" \" + this.language[\"BIP Error Interfaces By Location\"];\n                break;\n              }\n            case \"System\":\n              {\n                chartName = this.language[page] + \" \" + this.language[\"BIP Error Interfaces By System\"];\n                break;\n              }\n            case \"Interface\":\n              {\n                chartName = this.language[page] + \" \" + this.language[\"Interfaces with BIP Errors\"];\n                break;\n              }\n          }\n        }\n      } else if (chartName == \"BIP Error Rate\" || chartName == 'PON Error Rate') {\n        switch (type) {\n          case \"Region\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HBIPErrorbyregion\"];\n              break;\n            }\n          case \"Location\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HBIPErrorByLocation\"];\n              break;\n            }\n          case \"System\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HBIPErrorBySystem\"];\n              break;\n            }\n          case \"Interface\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"HBIPErrorByInterface\"];\n              break;\n            }\n          case \"ONT\":\n            {\n              chartName = this.language[page] + \" \" + this.language[\"Bip Error By Ont\"];\n              break;\n            }\n        }\n      } else {\n        chartName = this.language[page] + \" \" + this.language[chartName];\n      }\n      let splitName = chartName.split(\" \");\n      let joinName = splitName.join('_');\n      let time = new Date().getTime();\n      let name = '';\n      let date = this.formatTodayDate() ? this.formatTodayDate() : '';\n      name += joinName; // + '-' + date + '-' + time;\n      return name;\n    }\n    getGranularity(startDate, endDate) {\n      endDate = this.dateUtils.getCurrentUtcTime();\n      console.log(endDate);\n      let granularity = '24hour';\n      let diff = moment(endDate * 1000).diff(moment(startDate * 1000), \"days\") + 1;\n      if (diff <= 30) {\n        granularity = \"15min\";\n      } else if (diff > 30 && diff <= 90) {\n        granularity = \"1hour\";\n      } else if (diff > 90 && diff <= 182) {\n        granularity = \"24hour\";\n      } else if (diff > 182 && diff <= 728) {\n        granularity = \"1month\";\n      } else granularity = \"1month\";\n      console.log(diff);\n      return granularity;\n    }\n    chart_color(element, value, color = 'first') {\n      // if (element?.deleted && element[value] != 0 && element[value])\n      //     return environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'][color]\n      // else if (element?.deleted && element[value] == 0) {\n      //     return environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'][color]\n      // }\n      // else if (!element[value] || element[value] == 0) {\n      //     return environment.OPERATIONS.HEALTH['BAR_TRANSPARENT'][color]\n      // }\n      if (element === null || element === void 0 ? void 0 : element.deleted) return environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'][color];else return environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'][color];\n    }\n    toolip_color(color) {\n      if (color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].first) return environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].first;else if (color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].second) return environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].second;else if (color == environment.OPERATIONS.HEALTH['BAR_TRANSPARENT'].first) return environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first;else if (color == environment.OPERATIONS.HEALTH['BAR_TRANSPARENT'].second) return environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].second;else return color;\n    }\n    totalcoutsort(data, key1, key2, charttype = 'Region') {\n      let a = [];\n      let b = [];\n      let name = charttype.toLowerCase();\n      if (name == \"interface\") {\n        data.sort((a, b) => (a[name] || \"\").toString().localeCompare((b[name] || \"\").toString(), 'en', {\n          numeric: true\n        }));\n      } else {\n        data.sort((a, b) => (a[name] || \"\").toString().localeCompare((b[name] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n      }\n      data.forEach(obj => {\n        if (obj[key1] || obj[key2] || obj[key1] == 0 || obj[key2] == 0) {\n          a.push(obj);\n        } else b.push(obj);\n      });\n      a.sort(function (a, b) {\n        let a1 = (a[key1] ? a[key1] : 0) + (a[key2] ? a[key2] : 0);\n        let b1 = (b[key1] ? b[key1] : 0) + (b[key2] ? b[key2] : 0);\n        return b1 - a1;\n      });\n      //a.reverse();\n      data = [...a, ...b];\n      return data;\n    }\n    totalcountsort(data, key1, key2, key3, key4, key5, charttype = 'Region') {\n      let a = [];\n      let b = [];\n      let name = charttype.toLowerCase();\n      if (name == \"interface\") {\n        data.sort((a, b) => (a[name] || \"\").toString().localeCompare((b[name] || \"\").toString(), 'en', {\n          numeric: true\n        }));\n      } else {\n        data.sort((a, b) => (a[name] || \"\").toString().localeCompare((b[name] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n      }\n      data.forEach(obj => {\n        if (obj[key1] || obj[key2] || obj[key3] || obj[key4] || obj[key5] || obj[key1] == 0 || obj[key2] == 0 || obj[key3] == 0 || obj[key4] == 0 || obj[key5] == 0) {\n          a.push(obj);\n        } else b.push(obj);\n      });\n      a.sort(function (a, b) {\n        let a1 = (a[key1] ? a[key1] : 0) + (a[key2] ? a[key2] : 0) + (a[key3] ? a[key3] : 0) + (a[key4] ? a[key4] : 0) + (a[key5] ? a[key5] : 0);\n        let b1 = (b[key1] ? b[key1] : 0) + (b[key2] ? b[key2] : 0) + (b[key3] ? b[key3] : 0) + (b[key4] ? b[key4] : 0) + (b[key5] ? b[key5] : 0);\n        return b1 - a1;\n      });\n      //a.reverse();\n      data = [...a, ...b];\n      return data;\n    }\n  }\n  HealthService.ɵfac = function HealthService_Factory(t) {\n    return new (t || HealthService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.DateUtilsService), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.SsoAuthService), i0.ɵɵinject(i5.Router));\n  };\n  HealthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HealthService,\n    factory: HealthService.ɵfac,\n    providedIn: 'root'\n  });\n  return HealthService;\n})();","map":null,"metadata":{},"sourceType":"module"}