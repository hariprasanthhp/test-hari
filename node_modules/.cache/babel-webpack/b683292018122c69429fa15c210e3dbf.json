{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { getBusinessObject, is } from 'bpmn-js/lib/util/ModelUtil';\nconst HIGH_PRIORITY = 15000;\n\n/**\n * BPMN specific create zeebe boundary event behavior\n */\nexport default function CreateZeebeBoundaryEventBehavior(eventBus, elementFactory, bpmnFactory) {\n  CommandInterceptor.call(this, eventBus);\n\n  /**\n   * replace intermediate catch event with boundary event when\n   * attaching it to a shape\n   */\n  this.preExecute('shape.create', HIGH_PRIORITY, function (context) {\n    const {\n      shape,\n      host\n    } = context;\n    const businessObject = getBusinessObject(shape);\n    let attrs = {\n      cancelActivity: true\n    };\n    let newBusinessObject, hostBusinessObject, boundaryEvent, eventDefinitions;\n    if (!host || !is(shape, 'bpmn:IntermediateCatchEvent')) {\n      return;\n    }\n    hostBusinessObject = getBusinessObject(host);\n    attrs = {\n      attachedToRef: hostBusinessObject,\n      ...attrs\n    };\n    eventDefinitions = businessObject.eventDefinitions;\n    newBusinessObject = bpmnFactory.create('bpmn:BoundaryEvent', attrs);\n    boundaryEvent = {\n      type: 'bpmn:BoundaryEvent',\n      businessObject: newBusinessObject\n    };\n    if (eventDefinitions && eventDefinitions[0]) {\n      boundaryEvent = {\n        ...boundaryEvent,\n        eventDefinitionType: eventDefinitions[0].$type\n      };\n    }\n    context.shape = elementFactory.createShape(boundaryEvent);\n  }, true);\n}\nCreateZeebeBoundaryEventBehavior.$inject = ['eventBus', 'elementFactory', 'bpmnFactory'];\ninherits(CreateZeebeBoundaryEventBehavior, CommandInterceptor);","map":null,"metadata":{},"sourceType":"module"}