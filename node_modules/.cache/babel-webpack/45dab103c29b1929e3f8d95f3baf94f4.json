{"ast":null,"code":"import { is, getBusinessObject } from './ModelUtil';\nimport { forEach } from 'min-dash';\nexport function isExpanded(element) {\n  if (is(element, 'bpmn:CallActivity')) {\n    return false;\n  }\n  if (is(element, 'bpmn:SubProcess')) {\n    return getBusinessObject(element).di && !!getBusinessObject(element).di.isExpanded;\n  }\n  if (is(element, 'bpmn:Participant')) {\n    return !!getBusinessObject(element).processRef;\n  }\n  return true;\n}\nexport function isInterrupting(element) {\n  return element && getBusinessObject(element).isInterrupting !== false;\n}\nexport function isEventSubProcess(element) {\n  return element && !!getBusinessObject(element).triggeredByEvent;\n}\nexport function hasEventDefinition(element, eventType) {\n  var bo = getBusinessObject(element),\n    hasEventDefinition = false;\n  if (bo.eventDefinitions) {\n    forEach(bo.eventDefinitions, function (event) {\n      if (is(event, eventType)) {\n        hasEventDefinition = true;\n      }\n    });\n  }\n  return hasEventDefinition;\n}\nexport function hasErrorEventDefinition(element) {\n  return hasEventDefinition(element, 'bpmn:ErrorEventDefinition');\n}\nexport function hasEscalationEventDefinition(element) {\n  return hasEventDefinition(element, 'bpmn:EscalationEventDefinition');\n}\nexport function hasCompensateEventDefinition(element) {\n  return hasEventDefinition(element, 'bpmn:CompensateEventDefinition');\n}","map":null,"metadata":{},"sourceType":"module"}