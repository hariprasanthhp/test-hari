{"ast":null,"code":"import { uploadSwFile, uploadConfigFile, getConfigFileList, getSwFileList, updateConfigFile, updateSwFile, getConfigFileById, getSwFileById, deleteConfigFileById, deleteSwFileById, getSwListCount, getConfigListCount, sw_upload_Url, makeOfficialImage, makeUnOfficialImage } from './endpoint';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { requestType } from '../model/files-list.model';\nimport { UtilityClass } from '../../shared/service/utility-class';\nimport { extractHostname } from 'src/app/support/shared/service/utility.class';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let FileService = /*#__PURE__*/(() => {\n  class FileService {\n    constructor(http, sso) {\n      this.http = http;\n      this.sso = sso;\n      this.Software_URL = `${environment.SUPPORT_URL}/netops-sw/softwareThreshold`;\n    }\n    // Read\n    getConfigFilesList(orgId, name, type) {\n      let params = new HttpParams();\n      if (orgId) {\n        params = params.set('orgId', orgId);\n      }\n      if (name) {\n        params = params.set(\"name\", name);\n      }\n      if (type) {\n        params = params.set(\"type\", type);\n      }\n      return this.http.get(getConfigFileList, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n    // Read\n    getSwFilesList(orgId, name, type) {\n      const params = new HttpParams()\n      // .set('orgId', orgId)\n      .set(\"type\", type).set(\"name\", name);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      const paramsKeys = params.keys();\n      paramsKeys.forEach(key => {\n        const value = params.get(key);\n        if (!value) {\n          params['map'].delete(key);\n        }\n      });\n      return this.http.get(getSwFileList, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n    //This api is used to update only description field\n    updateConfigFile(body, orgId) {\n      const params = new HttpParams();\n      // .set('orgId', orgId);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.put(updateConfigFile, body, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n    //This api is used to update only description field\n    updateSwFile(body, orgId) {\n      const params = new HttpParams();\n      // .set('orgId', orgId);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.put(updateSwFile, body, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    uploadSwFile(body, orgId) {\n      const params = new HttpParams();\n      // .set('orgId', orgId);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.post(uploadSwFile, body, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    uploadConfigFile(body, orgId) {\n      const params = new HttpParams();\n      // .set('orgId', orgId);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.post(uploadConfigFile, body, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getConfigFileById(_id) {\n      return this.http.get(getConfigFileById + \"/\" + _id).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getSwFileById(_id) {\n      return this.http.get(getSwFileById + \"/\" + _id).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getSwFilesCount(orgId) {\n      const params = new HttpParams().set(\"type\", requestType.SW_FW_Image);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.get(getSwListCount, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getConfigFilesCount(orgId) {\n      const params = new HttpParams()\n      // .set(\"orgId\", orgId)\n      .set(\"type\", \"Configuration File\");\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.get(getConfigListCount, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    fileUploadIntoUrl(body, uploadDetails) {\n      let authorizationData = 'Basic ' + btoa(uploadDetails.username + ':' + uploadDetails.password);\n      const options = {\n        headers: new HttpHeaders().set('Authorization', authorizationData).set(\"Content-Type\", \"application/octet-stream\")\n      };\n      let url = uploadDetails.uploadUrl.replace(extractHostname(uploadDetails.uploadUrl), sw_upload_Url);\n      return this.http.post(url, body, options).pipe(catchError(this.handleError) //handel the error \n      );\n    }\n\n    makeOfficialImage(body) {\n      return this.http.post(makeOfficialImage, body).pipe(catchError(this.handleError) //handel the error \n      );\n    }\n\n    makeUnOfficialImge(orgId, Id) {\n      const params = new HttpParams()\n      // .set(\"orgId\", orgId)\n      .set(\"imageId\", Id);\n      if (this.sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.delete(makeUnOfficialImage, {\n        params\n      }).pipe(catchError(this.handleError) //handel the error \n      );\n    }\n\n    deleteConfigFileById(_Id) {\n      return this.http.delete(deleteConfigFileById + \"/\" + _Id).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    deleteSwFileById(_Id) {\n      return this.http.delete(deleteSwFileById + \"/\" + _Id).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getConfigurationFileList(getConfigFileList, body) {\n      return this.http.post(getConfigFileList, body).pipe(catchError(this.handleError) //handel the error \n      );\n    }\n\n    getSoftwareImageList(getSoftwareImagesList, body) {\n      return this.http.post(getSoftwareImagesList, body).pipe(catchError(this.handleError) //handel the error \n      );\n    }\n\n    getFileType() {\n      let arr = new UtilityClass();\n      return arr.FileType;\n    }\n    getSoftwareImageversion() {\n      // const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${this.Software_URL}`).pipe(catchError(this.handleError));\n    }\n    putSoftwareImageversion(requestBody) {\n      return this.http.put(`${this.Software_URL}`, requestBody).pipe(catchError(this.handleError));\n    }\n    postSoftwareImageversion(requestBody) {\n      return this.http.post(`${this.Software_URL}`, requestBody).pipe(catchError(this.handleError));\n    }\n    deleteSoftwareImageversion(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.delete(`${this.Software_URL}?orgId=${ID}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n  }\n  FileService.ɵfac = function FileService_Factory(t) {\n    return new (t || FileService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  FileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileService,\n    factory: FileService.ɵfac,\n    providedIn: 'root'\n  });\n  return FileService;\n})();","map":null,"metadata":{},"sourceType":"module"}