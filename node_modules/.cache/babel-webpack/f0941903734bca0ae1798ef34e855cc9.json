{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { getBusinessObject, is } from '../../../util/ModelUtil';\nimport { isLabel } from '../../../util/LabelUtil';\nvar LOW_PRIORITY = 500;\n\n/**\n * Replace boundary event with intermediate event when creating or moving results in detached event.\n */\nexport default function DetachEventBehavior(bpmnReplace, injector) {\n  injector.invoke(CommandInterceptor, this);\n  this._bpmnReplace = bpmnReplace;\n  var self = this;\n  this.postExecuted('elements.create', LOW_PRIORITY, function (context) {\n    var elements = context.elements;\n    elements.filter(function (shape) {\n      var host = shape.host;\n      return shouldReplace(shape, host);\n    }).map(function (shape) {\n      return elements.indexOf(shape);\n    }).forEach(function (index) {\n      context.elements[index] = self.replaceShape(elements[index]);\n    });\n  }, true);\n  this.preExecute('elements.move', LOW_PRIORITY, function (context) {\n    var shapes = context.shapes,\n      newHost = context.newHost;\n    shapes.forEach(function (shape, index) {\n      var host = shape.host;\n      if (shouldReplace(shape, includes(shapes, host) ? host : newHost)) {\n        shapes[index] = self.replaceShape(shape);\n      }\n    });\n  }, true);\n}\nDetachEventBehavior.$inject = ['bpmnReplace', 'injector'];\ninherits(DetachEventBehavior, CommandInterceptor);\nDetachEventBehavior.prototype.replaceShape = function (shape) {\n  var eventDefinition = getEventDefinition(shape),\n    intermediateEvent;\n  if (eventDefinition) {\n    intermediateEvent = {\n      type: 'bpmn:IntermediateCatchEvent',\n      eventDefinitionType: eventDefinition.$type\n    };\n  } else {\n    intermediateEvent = {\n      type: 'bpmn:IntermediateThrowEvent'\n    };\n  }\n  return this._bpmnReplace.replaceElement(shape, intermediateEvent, {\n    layoutConnection: false\n  });\n};\n\n// helpers //////////\n\nfunction getEventDefinition(element) {\n  var businessObject = getBusinessObject(element),\n    eventDefinitions = businessObject.eventDefinitions;\n  return eventDefinitions && eventDefinitions[0];\n}\nfunction shouldReplace(shape, host) {\n  return !isLabel(shape) && is(shape, 'bpmn:BoundaryEvent') && !host;\n}\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}","map":null,"metadata":{},"sourceType":"module"}