{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as Highcharts from 'highcharts/highcharts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let NetworkSystemsApiService = /*#__PURE__*/(() => {\n  class NetworkSystemsApiService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n    }\n    getSystemController(uuid) {\n      let url = `${environment.API_BASE_URL}cnap/invmgr/devices/${uuid}/state`;\n      return this.http.get(url);\n    }\n    getCardDetails(uuid) {\n      let url = `${environment.API_BASE_URL}cnap/invmgr/equipment/state?system=${uuid}`;\n      return this.http.get(url);\n    }\n    getCardInterfaceSummary(card, uuid) {\n      var _a;\n      let spiltCardShelf = (_a = card === null || card === void 0 ? void 0 : card.card) === null || _a === void 0 ? void 0 : _a.split('/');\n      let shelf = '',\n        slot = '';\n      shelf = spiltCardShelf && spiltCardShelf[0] ? spiltCardShelf[0] : '';\n      slot = spiltCardShelf && spiltCardShelf[1] ? spiltCardShelf[1] : '';\n      let url = `${environment.API_BASE_URL}cnap/invmgr/interfaces/state/summary?system=${uuid}&shelf=${shelf}&slot=${slot}`;\n      return this.http.get(url);\n    }\n    getInterfaceDetails(card, from = 'CCO') {\n      let url = `${environment.API_BASE_URL}cnap/invmgr/interfaces/state/details?system=${card === null || card === void 0 ? void 0 : card.uuid}&name=${card['pon']['name']}`;\n      if (from == 'CCO') url += `&ifType=${card['pon']['ifType']}`;\n      return this.http.get(url);\n    }\n    getOntList(card) {\n      let url = `${environment.API_BASE_URL}cnap/invmgr/discoveredonts/names?system=${card === null || card === void 0 ? void 0 : card.uuid}&name=${card['pon']['name']}&ifType=${card['pon']['ifType']}`;\n      return this.http.get(url);\n    }\n    getOntDetails(card, ont) {\n      let url = `${environment.API_BASE_URL}cnap/invmgr/devices/${card === null || card === void 0 ? void 0 : card.uuid}/state/details?onuid=${ont === null || ont === void 0 ? void 0 : ont.ontId}`;\n      return this.http.get(url);\n    }\n    getNfaOntCount(card, reportTypeSelected, sorting) {\n      let params = {\n        reportType: reportTypeSelected,\n        tenant: 0,\n        system: card === null || card === void 0 ? void 0 : card.uuid,\n        discoveredPonPort: card['pon']['name']\n      };\n      if (sorting === null || sorting === void 0 ? void 0 : sorting.sortBy) {\n        params['sortBy'] = sorting === null || sorting === void 0 ? void 0 : sorting.sortBy;\n        params['sortOrder'] = sorting === null || sorting === void 0 ? void 0 : sorting.sortOrder;\n      }\n      let query = \"\";\n      for (var key in params) {\n        if (params[key] == undefined) {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(params[key]);\n      }\n      let url = `${environment.API_BASE_URL}nfa/onts/count?${query}`;\n      return this.http.get(url);\n    }\n    getNfaOntList(card, reportTypeSelected, sorting) {\n      let params = {\n        reportType: reportTypeSelected,\n        tenant: 0,\n        system: card === null || card === void 0 ? void 0 : card.uuid,\n        discoveredPonPort: card['pon']['name'],\n        limit: sorting === null || sorting === void 0 ? void 0 : sorting.limit\n      };\n      if (sorting === null || sorting === void 0 ? void 0 : sorting.sortBy) {\n        params['sortBy'] = sorting === null || sorting === void 0 ? void 0 : sorting.sortBy;\n        params['sortOrder'] = sorting === null || sorting === void 0 ? void 0 : sorting.sortOrder;\n      }\n      let query = \"\";\n      for (var key in params) {\n        if (params[key] == undefined) {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(params[key]);\n      }\n      let url = `${environment.API_BASE_URL}nfa/onts?${query}`;\n      return this.http.get(url);\n    }\n    secondsToDhms(seconds) {\n      seconds = Number(seconds);\n      let d = Math.floor(seconds / (3600 * 24)),\n        h = Math.floor(seconds % (3600 * 24) / 3600),\n        m = Math.floor(seconds % 3600 / 60),\n        s = Math.floor(seconds % 60);\n      let dDisplay = d > 0 ? d + 'd' : '',\n        hDisplay = h > 0 ? h + 'h' : '',\n        mDisplay = m > 0 ? m + 'm' : '',\n        sDisplay = s > 0 ? s + 's' : '';\n      let formattedTime = '';\n      if (d > 0) {\n        formattedTime += dDisplay;\n      }\n      if (h > 0) {\n        if (d > 0) {\n          formattedTime += ', ';\n        }\n        formattedTime += hDisplay;\n      }\n      if (m > 0) {\n        if (h > 0 || d > 0) {\n          formattedTime += ', ';\n        }\n        formattedTime += m > 9 ? mDisplay : '0' + mDisplay;\n      }\n      if (s > 0) {\n        if (h > 0 || d > 0 || m > 0) {\n          formattedTime += ', ';\n        }\n        formattedTime += s > 9 ? sDisplay : '0' + sDisplay;\n      }\n      if (formattedTime) {\n        return formattedTime;\n      }\n      return 0;\n    }\n    bitsToSize(bits, round, fixed) {\n      let bytes = bits;\n      let sizes = ['bps', 'Kbps', 'Mbps', 'Gbps', 'Tbps'];\n      if (!bytes) return '-';\n      if (bytes == 0) return '0';\n      if (bytes < 0) {\n        bytes = bytes * -1;\n        var i = Math.floor(Math.log(bytes) / Math.log(1000));\n        if (round) {\n          return Math.round(bytes / Math.pow(1000, i)) + ' ' + sizes[i];\n        }\n        let value;\n        value = Highcharts.numberFormat(Math.abs(bytes / Math.pow(1000, i)), fixed);\n        return (value * -1).toFixed(fixed) + ' ' + sizes[i];\n      } else {\n        var i = Math.floor(Math.log(bytes) / Math.log(1000));\n        if (round) {\n          return Math.round(bytes / Math.pow(1000, i)) + ' ' + sizes[i];\n        }\n        return Highcharts.numberFormat(Math.abs(bytes / Math.pow(1000, i)), fixed) + ' ' + sizes[i];\n      }\n    }\n    sortStringHavingSplChar(array, key) {\n      if (array && array.length > 0) {\n        let regex = /[^a-z]/gi;\n        array.forEach(el => {\n          el['alphabets'] = el[key].replace(regex, '');\n        });\n        array.sort((a, b) => a.alphabets > b.alphabets ? 1 : -1);\n        let groupedArray = this.groupByValue(array, 'alphabets'),\n          sortedArray = [];\n        for (const value in groupedArray) {\n          if (groupedArray[value] && groupedArray[value].length > 0) {\n            groupedArray[value].forEach(el => {\n              el['sortingNum'] = Number(el[key].replace(/[^0-9]/g, ''));\n            });\n            groupedArray[value].sort((a, b) => a.sortingNum > b.sortingNum ? 1 : -1);\n            sortedArray = [...sortedArray, ...groupedArray[value]];\n          }\n        }\n        return sortedArray;\n      }\n      return array;\n    }\n    groupByValue(array, key) {\n      return array.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n      }, {});\n    }\n  }\n  NetworkSystemsApiService.ɵfac = function NetworkSystemsApiService_Factory(t) {\n    return new (t || NetworkSystemsApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  NetworkSystemsApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NetworkSystemsApiService,\n    factory: NetworkSystemsApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return NetworkSystemsApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}