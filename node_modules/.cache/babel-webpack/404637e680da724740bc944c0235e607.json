{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { pointsAligned } from 'diagram-js/lib/util/Geometry';\nimport { assign } from 'min-dash';\nvar HIGH_PRIORITY = 3000;\n\n/**\n * Snaps connections with Manhattan layout.\n */\nexport default function LayoutConnectionBehavior(eventBus, gridSnapping, modeling) {\n  CommandInterceptor.call(this, eventBus);\n  this._gridSnapping = gridSnapping;\n  var self = this;\n  this.postExecuted(['connection.create', 'connection.layout'], HIGH_PRIORITY, function (event) {\n    var context = event.context,\n      connection = context.connection,\n      hints = context.hints || {},\n      waypoints = connection.waypoints;\n    if (hints.connectionStart || hints.connectionEnd || hints.createElementsBehavior === false) {\n      return;\n    }\n    if (!hasMiddleSegments(waypoints)) {\n      return;\n    }\n    modeling.updateWaypoints(connection, self.snapMiddleSegments(waypoints));\n  });\n}\nLayoutConnectionBehavior.$inject = ['eventBus', 'gridSnapping', 'modeling'];\ninherits(LayoutConnectionBehavior, CommandInterceptor);\n\n/**\n * Snap middle segments of a given connection.\n *\n * @param {Array<Point>} waypoints\n *\n * @returns {Array<Point>}\n */\nLayoutConnectionBehavior.prototype.snapMiddleSegments = function (waypoints) {\n  var gridSnapping = this._gridSnapping,\n    snapped;\n  waypoints = waypoints.slice();\n  for (var i = 1; i < waypoints.length - 2; i++) {\n    snapped = snapSegment(gridSnapping, waypoints[i], waypoints[i + 1]);\n    waypoints[i] = snapped[0];\n    waypoints[i + 1] = snapped[1];\n  }\n  return waypoints;\n};\n\n// helpers //////////\n\n/**\n * Check whether a connection has a middle segments.\n *\n * @param {Array} waypoints\n *\n * @returns {boolean}\n */\nfunction hasMiddleSegments(waypoints) {\n  return waypoints.length > 3;\n}\n\n/**\n * Check whether an alignment is horizontal.\n *\n * @param {string} aligned\n *\n * @returns {boolean}\n */\nfunction horizontallyAligned(aligned) {\n  return aligned === 'h';\n}\n\n/**\n * Check whether an alignment is vertical.\n *\n * @param {string} aligned\n *\n * @returns {boolean}\n */\nfunction verticallyAligned(aligned) {\n  return aligned === 'v';\n}\n\n/**\n * Get middle segments from a given connection.\n *\n * @param {Array} waypoints\n *\n * @returns {Array}\n */\nfunction snapSegment(gridSnapping, segmentStart, segmentEnd) {\n  var aligned = pointsAligned(segmentStart, segmentEnd);\n  var snapped = {};\n  if (horizontallyAligned(aligned)) {\n    // snap horizontally\n    snapped.y = gridSnapping.snapValue(segmentStart.y);\n  }\n  if (verticallyAligned(aligned)) {\n    // snap vertically\n    snapped.x = gridSnapping.snapValue(segmentStart.x);\n  }\n  if ('x' in snapped || 'y' in snapped) {\n    segmentStart = assign({}, segmentStart, snapped);\n    segmentEnd = assign({}, segmentEnd, snapped);\n  }\n  return [segmentStart, segmentEnd];\n}","map":null,"metadata":{},"sourceType":"module"}