{"ast":null,"code":"'use strict';\n\nvar domQuery = require('min-dom').query,\n  domClear = require('min-dom').clear,\n  domClasses = require('min-dom').classes,\n  is = require('bpmn-js/lib/util/ModelUtil').is,\n  forEach = require('lodash/forEach'),\n  domify = require('min-dom').domify,\n  Ids = require('ids').default;\nvar SPACE_REGEX = /\\s/;\n\n// for QName validation as per http://www.w3.org/TR/REC-xml/#NT-NameChar\nvar QNAME_REGEX = /^([a-z][\\w-.]*:)?[a-z_][\\w-.]*$/i;\n\n// for ID validation as per BPMN Schema (QName - Namespace)\nvar ID_REGEX = /^[a-z_][\\w-.]*$/i;\nvar HTML_ESCAPE_MAP = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  '\\'': '&#39;'\n};\nfunction selectedOption(selectBox) {\n  if (selectBox.selectedIndex >= 0) {\n    return selectBox.options[selectBox.selectedIndex].value;\n  }\n}\nmodule.exports.selectedOption = selectedOption;\nfunction selectedType(elementSyntax, inputNode) {\n  var typeSelect = domQuery(elementSyntax, inputNode);\n  return selectedOption(typeSelect);\n}\nmodule.exports.selectedType = selectedType;\n\n/**\n * Retrieve the root element the document this\n * business object is contained in.\n *\n * @return {ModdleElement}\n */\nfunction getRoot(businessObject) {\n  var parent = businessObject;\n  while (parent.$parent) {\n    parent = parent.$parent;\n  }\n  return parent;\n}\nmodule.exports.getRoot = getRoot;\n\n/**\n * filters all elements in the list which have a given type.\n * removes a new list\n */\nfunction filterElementsByType(objectList, type) {\n  var list = objectList || [];\n  var result = [];\n  forEach(list, function (obj) {\n    if (is(obj, type)) {\n      result.push(obj);\n    }\n  });\n  return result;\n}\nmodule.exports.filterElementsByType = filterElementsByType;\nfunction findRootElementsByType(businessObject, referencedType) {\n  var root = getRoot(businessObject);\n  return filterElementsByType(root.rootElements, referencedType);\n}\nmodule.exports.findRootElementsByType = findRootElementsByType;\nfunction removeAllChildren(domElement) {\n  while (domElement.firstChild) {\n    domElement.removeChild(domElement.firstChild);\n  }\n}\nmodule.exports.removeAllChildren = removeAllChildren;\n\n/**\n * adds an empty option to the list\n */\nfunction addEmptyParameter(list) {\n  return list.push({\n    'label': '',\n    'value': '',\n    'name': ''\n  });\n}\nmodule.exports.addEmptyParameter = addEmptyParameter;\n\n/**\n * returns a dropdown option label depending on the defined event attributes\n */\nfunction getOptionLabel(obj) {\n  var label = obj.name || '';\n  if (obj.errorCode) label += ' (code=' + obj.errorCode + ')';\n  if (obj.escalationCode) label += ' (code=' + obj.escalationCode + ')';\n  return label;\n}\n\n/**\n * returns a list with all root elements for the given parameter 'referencedType'\n */\nfunction refreshOptionsModel(businessObject, referencedType) {\n  var model = [];\n  var referableObjects = findRootElementsByType(businessObject, referencedType);\n  forEach(referableObjects, function (obj) {\n    model.push({\n      label: getOptionLabel(obj),\n      value: obj.id,\n      name: obj.name\n    });\n  });\n  return model;\n}\nmodule.exports.refreshOptionsModel = refreshOptionsModel;\n\n/**\n * fills the drop down with options\n */\nfunction updateOptionsDropDown(domSelector, businessObject, referencedType, entryNode) {\n  var options = refreshOptionsModel(businessObject, referencedType);\n  addEmptyParameter(options);\n  var selectBox = domQuery(domSelector, entryNode);\n  domClear(selectBox);\n  forEach(options, function (option) {\n    var optionEntry = domify('<option value=\"' + escapeHTML(option.value) + '\">' + escapeHTML(option.label) + '</option>');\n    selectBox.appendChild(optionEntry);\n  });\n  return options;\n}\nmodule.exports.updateOptionsDropDown = updateOptionsDropDown;\n\n/**\n * checks whether the id value is valid\n *\n * @param {ModdleElement} bo\n * @param {String} idValue\n * @param {Function} translate\n *\n * @return {String} error message\n */\nfunction isIdValid(bo, idValue, translate) {\n  var assigned = bo.$model.ids.assigned(idValue);\n  var idExists = assigned && assigned !== bo;\n  if (!idValue || idExists) {\n    return translate('Element must have an unique id.');\n  }\n  return validateId(idValue, translate);\n}\nmodule.exports.isIdValid = isIdValid;\nfunction validateId(idValue, translate) {\n  if (containsSpace(idValue)) {\n    return translate('Id must not contain spaces.');\n  }\n  if (!ID_REGEX.test(idValue)) {\n    if (QNAME_REGEX.test(idValue)) {\n      return translate('Id must not contain prefix.');\n    }\n    return translate('Id must be a valid QName.');\n  }\n}\nmodule.exports.validateId = validateId;\nfunction containsSpace(value) {\n  return SPACE_REGEX.test(value);\n}\nmodule.exports.containsSpace = containsSpace;\n\n/**\n * generate a semantic id with given prefix\n */\nfunction nextId(prefix) {\n  var ids = new Ids([32, 32, 1]);\n  return ids.nextPrefixed(prefix);\n}\nmodule.exports.nextId = nextId;\nfunction triggerClickEvent(element) {\n  var evt;\n  var eventType = 'click';\n  if (document.createEvent) {\n    try {\n      // Chrome, Safari, Firefox\n      evt = new MouseEvent(eventType, {\n        view: window,\n        bubbles: true,\n        cancelable: true\n      });\n    } catch (e) {\n      // IE 11, PhantomJS (wat!)\n      evt = document.createEvent('MouseEvent');\n      evt.initEvent(eventType, true, true);\n    }\n    return element.dispatchEvent(evt);\n  } else {\n    // Welcome IE\n    evt = document.createEventObject();\n    return element.fireEvent('on' + eventType, evt);\n  }\n}\nmodule.exports.triggerClickEvent = triggerClickEvent;\nfunction escapeHTML(str) {\n  str = '' + str;\n  return str && str.replace(/[&<>\"']/g, function (match) {\n    return HTML_ESCAPE_MAP[match];\n  });\n}\nmodule.exports.escapeHTML = escapeHTML;\nfunction createDropdown(dropdown) {\n  var menu = dropdown.menu;\n  var dropdownNode = domify('<div class=\"group__dropdown\">' + '<button class=\"group__dropdown-button\">' + '<svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\"><path fill=\"currentColor\" d=\"M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z\"></path></svg>' + '</button>' + '<div class=\"group__dropdown-menu\"></div>' + '</div>');\n  var buttonNode = domQuery('.group__dropdown-button', dropdownNode),\n    menuNode = domQuery('.group__dropdown-menu', dropdownNode);\n  buttonNode.addEventListener('click', function (event) {\n    domClasses(dropdownNode).toggle('group__dropdown--open');\n    createOnGlobalClick(event);\n  });\n  forEach(menu, function (menuItem) {\n    var menuItemNode = domify('<div class=\"group__dropdown-menu-item\" data-dropdown-action=\"' + menuItem.id + '\">' + escapeHTML(menuItem.label) + '</div>');\n    menuItemNode.addEventListener('click', function () {\n      menuItem.onClick();\n      domClasses(dropdownNode).remove('group__dropdown--open');\n    });\n    menuNode.appendChild(menuItemNode);\n  });\n  var _onGlobalClick;\n  function createOnGlobalClick(_event) {\n    function onGlobalClick(event) {\n      if (event === _event) {\n        return;\n      }\n      var target = event.target;\n      if (menuNode !== target && !menuNode.contains(target)) {\n        domClasses(dropdownNode).remove('group__dropdown--open');\n        document.removeEventListener('click', onGlobalClick);\n      }\n    }\n    if (_onGlobalClick) {\n      document.removeEventListener('click', _onGlobalClick);\n    }\n    document.addEventListener('click', onGlobalClick);\n    _onGlobalClick = onGlobalClick;\n  }\n  return dropdownNode;\n}\nmodule.exports.createDropdown = createDropdown;","map":null,"metadata":{},"sourceType":"script"}