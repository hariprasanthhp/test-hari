{"ast":null,"code":"import { assign } from 'min-dash';\nvar round = Math.round;\n\n/**\n * Service that allow replacing of elements.\n */\nexport default function Replace(modeling) {\n  this._modeling = modeling;\n}\nReplace.$inject = ['modeling'];\n\n/**\n * @param {Element} oldElement - Element to be replaced\n * @param {Object}  newElementData - Containing information about the new element,\n *                                   for example the new bounds and type.\n * @param {Object}  options - Custom options that will be attached to the context. It can be used to inject data\n *                            that is needed in the command chain. For example it could be used in\n *                            eventbus.on('commandStack.shape.replace.postExecute') to change shape attributes after\n *                            shape creation.\n */\nReplace.prototype.replaceElement = function (oldElement, newElementData, options) {\n  if (oldElement.waypoints) {\n    // TODO(nikku): we do not replace connections, yet\n    return null;\n  }\n  var modeling = this._modeling;\n  var width = newElementData.width || oldElement.width,\n    height = newElementData.height || oldElement.height,\n    x = newElementData.x || oldElement.x,\n    y = newElementData.y || oldElement.y,\n    centerX = round(x + width / 2),\n    centerY = round(y + height / 2);\n\n  // modeling API requires center coordinates,\n  // account for that when handling shape bounds\n\n  return modeling.replaceShape(oldElement, assign({}, newElementData, {\n    x: centerX,\n    y: centerY,\n    width: width,\n    height: height\n  }), options);\n};","map":null,"metadata":{},"sourceType":"module"}