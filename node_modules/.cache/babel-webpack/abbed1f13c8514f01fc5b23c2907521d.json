{"ast":null,"code":"import { constructEncryptionObject, ssidMetaPattern } from '../service/utility.class';\nimport * as i0 from \"@angular/core\";\nexport let WpaEncryptionConverterPipe = /*#__PURE__*/(() => {\n  class WpaEncryptionConverterPipe {\n    constructor() {\n      this.beconType = null;\n    }\n    transform(value, featureProperties, security) {\n      let displayValue;\n      if (value === undefined) {\n        return value;\n      }\n      // Replace with the specified character\n      this.beconType = value.BeaconType;\n      if (this.beconType) {\n        let ssidMetaData = featureProperties.filter(x => x.featureName.match(ssidMetaPattern));\n        var selectedFieldMeta = ssidMetaData.filter(x => x.featureName.match(/\\d+/)[0] == String(value.featureNo))[0];\n        let valueList = selectedFieldMeta.fields.filter(res => res.name == \"BeaconType\").map(val => val.valueList)[0];\n        if (valueList) {\n          valueList.filter(val => {\n            if (this.beconType && val == this.beconType) {\n              featureProperties.forEach(res => {\n                if (res.featureName == \"SecurityOptions\") {\n                  if (res.configuration) {\n                    if (res.configuration['WPA3-SAE'] && res.configuration['WPA3-SAE'][\"BeaconType\"] == val || val == 'WPA3-SAE') {\n                      displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                    }\n                    if (res.configuration['SecurityOff'] && res.configuration['SecurityOff'][\"BeaconType\"] == val || val == 'SecurityOff') {\n                      if (res.configuration['SecurityOff'].IEEE11iEncryptionModes) {\n                        displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                      } else {\n                        displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                      }\n                    }\n                    if (res.configuration['WPA2-PSK'] && res.configuration['WPA2-PSK'][\"BeaconType\"] == val || val == 'WPA2-PSK') {\n                      if (res.configuration['WPA2-PSK'].IEEE11iEncryptionModes) {\n                        displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                      } else {\n                        displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                      }\n                    }\n                    if (res.configuration['WPA-PSK'] && res.configuration['WPA-PSK'][\"BeaconType\"] == val || val == 'WPA-PSK') {\n                      if (res.configuration['WPA-PSK'].IEEE11iEncryptionModes) {\n                        displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                      } else {\n                        displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                      }\n                    }\n                    if (res.configuration['WPA/WPA2-PSK'] && res.configuration['WPA/WPA2-PSK'][\"BeaconType\"] == val || val == 'WPA/WPA2-PSK') {\n                      if (res.configuration['WPA/WPA2-PSK'].IEEE11iEncryptionModes) {\n                        displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                      } else {\n                        displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                      }\n                    }\n                    if (res.configuration['WPA2/WPA3-PSK'] && res.configuration['WPA2/WPA3-PSK'][\"BeaconType\"] == val || val == 'WPA2/WPA3-PSK') {\n                      if (res.configuration['WPA2/WPA3-PSK'].IEEE11iEncryptionModes) {\n                        displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                      } else {\n                        displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                      }\n                    }\n                    if (res.configuration['WPA3-PSK'] && res.configuration['WPA3-PSK'][\"BeaconType\"] == val || val == 'WPA3-PSK') {\n                      if (res.configuration['WPA3-PSK'].IEEE11iEncryptionModes) {\n                        displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                      } else {\n                        displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                      }\n                    }\n                  }\n                }\n              });\n            }\n          });\n          if (!displayValue) {\n            valueList.filter(val => {\n              security.forEach(sec => {\n                if (sec.id == this.beconType) {\n                  this.beconType = sec.name;\n                }\n              });\n              if (this.beconType && val == this.beconType) {\n                featureProperties.forEach(res => {\n                  if (res.featureName == \"SecurityOptions\") {\n                    if (res.configuration) {\n                      if (res.configuration['WPA3-SAE'] && res.configuration['WPA3-SAE'][\"BeaconType\"] == val || val == 'WPA3-SAE') {\n                        displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                      }\n                      if (res.configuration['SecurityOff'] && res.configuration['SecurityOff'][\"BeaconType\"] == val || val == 'SecurityOff') {\n                        if (res.configuration['SecurityOff'].IEEE11iEncryptionModes) {\n                          displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                        } else {\n                          displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                        }\n                      }\n                      if (res.configuration['WPA2-PSK'] && res.configuration['WPA2-PSK'][\"BeaconType\"] == val || val == 'WPA2-PSK') {\n                        if (res.configuration['WPA2-PSK'].IEEE11iEncryptionModes) {\n                          displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                        } else {\n                          displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                        }\n                      }\n                      if (res.configuration['WPA-PSK'] && res.configuration['WPA-PSK'][\"BeaconType\"] == val || val == 'WPA-PSK') {\n                        if (res.configuration['WPA-PSK'].IEEE11iEncryptionModes) {\n                          displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                        } else {\n                          displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                        }\n                      }\n                      if (res.configuration['WPA/WPA2-PSK'] && res.configuration['WPA/WPA2-PSK'][\"BeaconType\"] == val || val == 'WPA/WPA2-PSK') {\n                        if (res.configuration['WPA/WPA2-PSK'].IEEE11iEncryptionModes) {\n                          displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                        } else {\n                          displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                        }\n                      }\n                      if (res.configuration['WPA2/WPA3-PSK'] && res.configuration['WPA2/WPA3-PSK'][\"BeaconType\"] == val || val == 'WPA2/WPA3-PSK') {\n                        if (res.configuration['WPA2/WPA3-PSK'].IEEE11iEncryptionModes) {\n                          displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                        } else {\n                          displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                        }\n                      }\n                      if (res.configuration['WPA3-PSK'] && res.configuration['WPA3-PSK'][\"BeaconType\"] == val || val == 'WPA3-PSK') {\n                        if (res.configuration['WPA3-PSK'].IEEE11iEncryptionModes) {\n                          displayValue = constructEncryptionObject(value.IEEE11iEncryptionModes)['name'];\n                        } else {\n                          displayValue = constructEncryptionObject(value.WPAEncryptionModes)['name'];\n                        }\n                      }\n                    }\n                  }\n                });\n              }\n            });\n          }\n        }\n        if (!displayValue) {\n          displayValue = 'N/A';\n        }\n        return displayValue;\n      }\n    }\n  }\n  WpaEncryptionConverterPipe.ɵfac = function WpaEncryptionConverterPipe_Factory(t) {\n    return new (t || WpaEncryptionConverterPipe)();\n  };\n  WpaEncryptionConverterPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"wpaEncryptionConverter\",\n    type: WpaEncryptionConverterPipe,\n    pure: true\n  });\n  return WpaEncryptionConverterPipe;\n})();","map":null,"metadata":{},"sourceType":"module"}