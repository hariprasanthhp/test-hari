{"ast":null,"code":"import * as Highcharts from \"highcharts/highstock\";\nimport { saveAs } from 'file-saver';\nimport * as $ from 'jquery';\nimport { DatePipe } from '@angular/common';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../shared/services/custom-translate.service\";\nimport * as i2 from \"../../reports/service/report-api.service\";\nimport * as i3 from \"src/app/sys-admin/services/common.service\";\nimport * as i4 from \"../../service/options-manager.service\";\nimport * as i5 from \"src/app/shared/services/sso-auth.service\";\nimport * as i6 from \"@angular/common\";\nfunction TopAppTrafficComponent_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelementStart(1, \"span\", 11);\n    i0.ɵɵelement(2, \"img\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function TopAppTrafficComponent_div_0_div_1_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return ctx_r3.closeAlert();\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.errorInfo, \" \");\n  }\n}\nfunction TopAppTrafficComponent_div_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵelementStart(1, \"div\", 15);\n    i0.ɵɵelementStart(2, \"div\", 16);\n    i0.ɵɵelementStart(3, \"span\", 17);\n    i0.ɵɵtext(4, \"Loading...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TopAppTrafficComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, TopAppTrafficComponent_div_0_div_1_Template, 6, 1, \"div\", 2);\n    i0.ɵɵelementStart(2, \"div\", 3);\n    i0.ɵɵelementStart(3, \"div\", 4);\n    i0.ɵɵtemplate(4, TopAppTrafficComponent_div_0_div_4_Template, 5, 0, \"div\", 5);\n    i0.ɵɵelementStart(5, \"div\", 6);\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵelement(7, \"div\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 7);\n    i0.ɵɵelement(9, \"div\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.error);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r0.loading ? \"d-block\" : \"d-none\");\n  }\n}\nconst HighchartsMore = require(\"highcharts/highcharts-more\");\nconst HighchartsExporting = require(\"highcharts/modules/exporting\");\nHighchartsMore(Highcharts);\nHighchartsExporting(Highcharts);\nconst noData = require('highcharts/modules/no-data-to-display');\nnoData(Highcharts);\n(function (Highcharts) {\n  Highcharts.exportCharts = function (charts, options) {\n    // Merge the options\n    options = Highcharts.merge(Highcharts.getOptions().exporting, options);\n    // Post to export server\n    options.url = environment.highchartExportURL;\n    Highcharts.post(options.url, {\n      filename: options.filename || 'Subscriber-Top-Application-Traffic',\n      type: options.type,\n      width: options.width,\n      svg: Highcharts.getSVG(charts)\n    });\n  };\n  Highcharts.getSVG = function (charts) {\n    var svgArr = [],\n      top = 0,\n      width = 0;\n    charts.forEach(chart => {\n      const cWidth = chart.chartWidth;\n      const cHeight = chart.chartHeight;\n      chart.setSize(cWidth, cHeight + (100 * chart.legend.pages.length | 0));\n      chart.options.legend.navigation.enabled = false;\n      var svg = chart.getSVG(),\n        // Get width/height of SVG for export\n        svgWidth = +svg.match(/^<svg[^>]*width\\s*=\\s*\\\"?(\\d+)\\\"?[^>]*>/)[1],\n        svgHeight = +svg.match(/^<svg[^>]*height\\s*=\\s*\\\"?(\\d+)\\\"?[^>]*>/)[1];\n      svg = svg.replace('<svg', '<g transform=\"translate(0,' + top + ')\" ');\n      svg = svg.replace('</svg>', '</g>');\n      top += svgHeight;\n      width = Math.max(width, svgWidth);\n      svgArr.push(svg);\n      chart.options.legend.navigation.enabled = true;\n      chart.setSize(cWidth, cHeight);\n    });\n    return '<svg height=\"' + top + '\" width=\"' + width + '\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">' + svgArr.join('') + '</svg>';\n  };\n})(Highcharts);\nexport let TopAppTrafficComponent = /*#__PURE__*/(() => {\n  class TopAppTrafficComponent {\n    constructor(customTranslateService, service, commonOrgService, optionsManagerService, sso) {\n      this.customTranslateService = customTranslateService;\n      this.service = service;\n      this.commonOrgService = commonOrgService;\n      this.optionsManagerService = optionsManagerService;\n      this.sso = sso;\n      this.errorInfo = '';\n      this.pageAvailable = false;\n      this.loading = false;\n      this.Highcharts = Highcharts;\n      this.chartConstructor = \"chart\";\n      this.afterFirstClick = false;\n      this.oneToOneFlag = true;\n      this.updateFlag = false;\n      this.upUsage = '';\n      this.downUsage = '';\n      this.chartType = 'bar';\n      this.language = this.customTranslateService.defualtLanguage;\n      if (this.language) {\n        this.pageAvailable = true;\n        this.upUsage = this.language.upUsageTitle;\n        this.downUsage = this.language.downUsageTitle;\n      }\n      this.customTranslateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.upUsage = data.upUsageTitle;\n        this.downUsage = data.downUsageTitle;\n      });\n      const self = this;\n      this.chartCallback = chart => {\n        // saving chart reference\n        self.chart = chart;\n      };\n    }\n    ngOnInit() {\n      this.page = {\n        main_route: 'network',\n        sub_route: 'top-applications',\n        showLocation: false,\n        showApplication: false,\n        showCriteria: false,\n        showStartDate: true,\n        showEndDate: true,\n        showLimit: true,\n        showGroup: false,\n        showDirection: false,\n        showRate: true\n      };\n      this.sso.setActionLog('CSC', 'pageHit', 'reports - top application traffic', window.location.href, 'top application traffic reports intiated');\n    }\n    loadChartData(data) {\n      data.groupBy = 'application';\n      this.topAppsPieChartOptions = null;\n      this.topAppsChartOptions = null;\n      this.filters = data;\n      this.loading = true;\n      let upoptions;\n      let downoptions;\n      this.subscribe = this.service.getAppTraffic(data).subscribe(res => {\n        this.data = res;\n        if (data['rateSelected'] == 'Average') {\n          data['rateSelected'] = 'Max';\n          upoptions = this.makeAreaChartOptions(res, 'usRate', this.language['up'], data);\n          downoptions = this.makeAreaChartOptions(res, 'dsRate', this.language['down'], data);\n        } else {\n          upoptions = this.makeAreaChartOptions(res, 'peakUsRate', this.language['up'], data);\n          downoptions = this.makeAreaChartOptions(res, 'peakDsRate', this.language['down'], data);\n        }\n        this.upChart = this.Highcharts.chart('container-up', upoptions);\n        this.downChart = this.Highcharts.chart('container-down', downoptions);\n        this.loading = false;\n      }, err => {\n        this.pageErrorHandle(err);\n      });\n    }\n    makeAreaChartOptions(res, type, rate, params) {\n      let that = this;\n      let pipe = new DatePipe('en-US');\n      let timezoneName = /\\((.*)\\)/.exec(new Date().toString())[1];\n      // let timezoneName = 'UTC';\n      let subscriber = ``;\n      if (this.sso.getTrafficReportChartSubscriberInfo()) {\n        subscriber = `<span style=\"font-family: Lato; color: #000000; font-size: 12px; line-height: 1.1640625;\">${this.language['Subscriber']}: ${this.sso.getTrafficReportChartSubscriberInfo()}</span><span style=\"font-size:16px; color:#ffffff\">...</span>`;\n      }\n      let subTitle = `${subscriber}<span style=\"font-family: Lato; color: #000000; font-size: 12px; line-height: 1.1640625;\">Rate: ${params['rateSelected'] === 'Max' ? this.language['Average'] : this.language[params['rateSelected']]}</span><span style=\"font-size:16px; color:#ffffff\">...</span><span style=\"font-family: Lato; color: #000000; font-size: 12px; line-height: 1.1640625;\"> ${this.language['time_win']}: ${pipe.transform(params.startDate, 'MM/dd/yyyy')} to ${pipe.transform(params.endDate, 'MM/dd/yyyy')} [${timezoneName}]</span><span style=\"font-size:16px; color:#ffffff\">...</span>`;\n      var seriesName = [];\n      if (res.length) {\n        res.forEach(element => {\n          if (element[type] === -1) {\n            element[type] = 0;\n          }\n          if (!element.name) {\n            element.name = \"Other\";\n          }\n          if (seriesName.indexOf(element.name) === -1) {\n            seriesName.push(element.name);\n          }\n        });\n      }\n      var seriesData = [];\n      var xAxisCategories = [];\n      $.each(seriesName, (key, value) => {\n        var obj = {};\n        obj.name = value;\n        obj.data = [];\n        $.each(res, (k, v) => {\n          if (!v.name) {\n            v.name = \"Other\";\n          }\n          if (v.name === value) {\n            obj.data.push(v[type]);\n            //xAxisCategories.push(this.dateUtils.getChartFormat(v.startPeriodSec));\n            xAxisCategories.push(this.optionsManagerService.getDateTime(v.startPeriodSec, true, 'MM/dd HH:mm'));\n          }\n        });\n        seriesData.push(obj);\n      });\n      if (seriesData.length == 0) {\n        seriesData = [{\n          name: rate,\n          data: []\n        }];\n      }\n      let colors = this.topApplicationTrafficColors();\n      let options = {\n        credits: {\n          enabled: false\n        },\n        time: {\n          useUTC: false\n        },\n        chart: {\n          type: 'area',\n          zoomType: 'xy'\n        },\n        title: {\n          text: rate === 'Down' ? '' : this.language['subscriberToponTraffic']\n        },\n        subtitle: {\n          text: rate === 'Down' ? '' : subTitle\n        },\n        xAxis: {\n          categories: xAxisCategories,\n          labels: {\n            formatter: function () {\n              //return moment(this.value).format('MM/DD HH:mm');                        \n              return this.value.length > 23 ? this.value.substring(0, 19) + '...' : this.value;\n            },\n            \"isFunction\": true\n          },\n          tickInterval: function () {\n            let sLength = seriesName.length;\n            let xCategLength = xAxisCategories.length;\n            let xAxisLen = Math.floor(xCategLength / sLength);\n            let f = 1;\n            if (xAxisLen <= 10) {\n              f = 1;\n            } else if (xAxisLen > 10 && xAxisLen < 20) {\n              f = 2;\n            } else {\n              f = Math.floor(xAxisLen / 8) ? Math.floor(xAxisLen / 8) : 1;\n            }\n            return f;\n          }()\n        },\n        yAxis: {\n          labels: {\n            formatter: function () {\n              let y = this;\n              var m = y.axis.series[0].dataMax;\n              var unit = m > 1000000000000 ? [1000000000000, 'Tbps'] : m > 1000000000 ? [1000000000, 'Gbps'] : m > 1000000 ? [1000000, 'Mbps'] : m > 1000 ? [1000, 'Kbps'] : [1, 'bps'];\n              return (y.value / unit[0]).toFixed(1) + (y.isFirst ? unit[1] : '');\n            }\n          },\n          title: {\n            text: rate\n          },\n          stackLabels: {\n            enabled: false,\n            style: {\n              fontWeight: 'bold'\n              //color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'\n            }\n          },\n\n          tickPixelInterval: 55\n        },\n        lang: {\n          noData: that.language[\"No Data Available\"]\n        },\n        tooltip: {\n          formatter: function () {\n            let val = that.topApplicationTrafficTooltip(this.y)[0];\n            return '<p><strong>' + this.series.name + '</strong><br/><strong>' + this.x + '</strong><br/><span>' + params['rateSelected'] + ' ' + rate + ' ' + 'Rate' + ': <strong>' + (this.y / val).toFixed(2) + ' ' + that.topApplicationTrafficTooltip(this.y)[1] + '</strong><br/></span></p>';\n          }\n        },\n        plotOptions: {\n          area: {\n            stacking: 'normal',\n            lineColor: '#ffffff',\n            lineWidth: 1,\n            marker: {\n              lineWidth: 1,\n              lineColor: '#ffffff'\n              //enabled: false\n            }\n          }\n        },\n\n        series: seriesData,\n        legend: {\n          align: 'center',\n          verticalAlign: 'bottom',\n          x: 0,\n          y: 0,\n          lineHeight: 10\n        },\n        \"interactive\": true,\n        \"datetimeSupported\": true,\n        \"treemapSupported\": true,\n        colors: colors\n      };\n      if (rate !== 'Down') {\n        options['exporting'] = {\n          buttons: {\n            contextButton: {\n              menuItems: [{\n                textKey: 'downloadPDF',\n                text: this.language.exportPDF,\n                onclick: function () {\n                  that.exportTrafficChart();\n                }\n              }, {\n                textKey: 'downloadCSV',\n                text: this.language.exportCSV,\n                onclick: function () {\n                  let UpdataExport = [];\n                  let DowndataExport = [];\n                  let UpextraData = '';\n                  let DownextraData = '';\n                  let Rate = params['rateSelected'] == 'Max' ? 'Average' : params['rateSelected']; //'Pleak'->Average\n                  let subscriber = ``;\n                  if (that.sso.getTrafficReportChartSubscriberInfo()) {\n                    subscriber = `${that.language['Subscriber']}: ${that.sso.getTrafficReportChartSubscriberInfo()}\\r\\n`;\n                  }\n                  UpextraData = `${subscriber}${that.language.rate}: ${Rate}\\r\\n${that.language.criteria}: ${that.language[params['criteriaSelected']]}\\r\\n${that.language['time_win']}: ${pipe.transform(params.startDate, 'MM/dd/yyyy')} - ${pipe.transform(params.endDate, 'MM/dd/yyyy')} [${timezoneName}]\\r\\nUpStream Traffic\\r\\n`;\n                  DownextraData = `\\r\\nDownStream Traffic\\r\\n`;\n                  for (var i = 0; i < res.length; i++) {\n                    if (res[i].name) {\n                      UpdataExport.push({\n                        'Date Time': that.optionsManagerService.getDateTime(res[i].startPeriodSec, true, 'MM/dd HH:mm'),\n                        'Name': res[i].name ? res[i].name : 'Other',\n                        // 'Usage(Byte)': res[i].usOctets ? res[i].usOctets.toLocaleString() : 0,\n                        // 'Max Rate(bps)': res[i].peakUsRate ? res[i].peakUsRate.toLocaleString() : 0,\n                        // 'Average Rate(bps)': res[i].usRate ? res[i].usRate.toLocaleString() : 0\n                        'Usage(Byte)': res[i].usOctets && res[i].usOctets !== -1 ? res[i].usOctets : 0,\n                        'Max Up Rate(bps)': res[i].peakUsRate && res[i].peakUsRate !== -1 ? res[i].peakUsRate : 0,\n                        'Average Up Rate(bps)': res[i].usRate && res[i].usRate !== -1 ? res[i].usRate : 0\n                      });\n                    }\n                  }\n                  for (var i = 0; i < res.length; i++) {\n                    if (res[i].name) {\n                      DowndataExport.push({\n                        'Date Time': that.optionsManagerService.getDateTime(res[i].startPeriodSec, true, 'MM/dd HH:mm'),\n                        'Name': res[i].name ? res[i].name : 'Other',\n                        // 'Usage(Byte)': res[i].dsOctets ? res[i].dsOctets.toLocaleString() : 0,\n                        // 'Max Rate(bps)': res[i].peakDsRate ? res[i].peakDsRate.toLocaleString() : 0,\n                        // 'Average Rate(bps)': res[i].dsRate ? res[i].dsRate.toLocaleString() : 0\n                        'Usage(Byte)': res[i].dsOctets && res[i].dsOctets !== -1 ? res[i].dsOctets : 0,\n                        'Max Down Rate(bps)': res[i].peakDsRate && res[i].peakDsRate !== -1 ? res[i].peakDsRate : 0,\n                        'Average Down Rate(bps)': res[i].dsRate && res[i].dsRate !== -1 ? res[i].dsRate : 0\n                      });\n                    }\n                  }\n                  that.downLoadCSV('Subscriber_Top_Application_Traffic', UpdataExport, DowndataExport, UpextraData, DownextraData);\n                }\n              }],\n              text: that.language['export'],\n              className: 'export_menu'\n            }\n          }\n        };\n      } else {\n        options['exporting'] = {\n          enabled: false\n        };\n      }\n      return options;\n    }\n    topApplicationTrafficYaxis(y) {\n      return function (y) {\n        var m = y.axis.series[0].dataMax;\n        var unit = m > 1000000000000 ? [1000000000000, 'Tbps'] : m > 1000000000 ? [1000000000, 'Gbps'] : m > 1000000 ? [1000000, 'Mbps'] : m > 1000 ? [1000, 'Kbps'] : [1, 'bps'];\n        return (y.value / unit[0]).toFixed(1) + (y.isFirst ? unit[1] : '');\n      };\n    }\n    topApplicationTrafficTooltip(m) {\n      let unit;\n      return unit = m > 1000000000000 ? [1000000000000, 'Tbps'] : m > 1000000000 ? [1000000000, 'Gbps'] : m > 1000000 ? [1000000, 'Mbps'] : m > 1000 ? [1000, 'Kbps'] : [1, 'bps'];\n    }\n    topApplicationTrafficColors() {\n      //var arr = ['#E87B00', '#44367D', '#8bbc21', '#910000', '#1aadce', '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a']; // old color codes\n      var arr = ['#0279FF', '#82BF00', '#836EE8', '#FF8238', '#029A7C', '#F7C343', '#FF489D', '#C74900', '#2EC4B6', '#0054B2']; // newly added color codes\n      if (3 <= 10) {\n        return arr;\n      } else {\n        var num = 3 - 10;\n        for (var i = 0; i < num; i++) {\n          var colorStr = arr[i];\n          var curColor = new Object();\n          curColor.r = parseInt(colorStr.substr(1, 2), 16);\n          curColor.g = parseInt(colorStr.substr(3, 2), 16);\n          curColor.b = parseInt(colorStr.substr(5, 2), 16);\n          if (curColor.r > 202) {\n            curColor.r = curColor.r >= 218 ? (curColor.r - 202).toString(16) : '0' + (curColor.r - 202).toString(16);\n          } else {\n            curColor.r = (curColor.r + 53).toString(16);\n          }\n          if (curColor.g > 202) {\n            curColor.g = curColor.g >= 218 ? (curColor.g - 202).toString(16) : '0' + (curColor.g - 202).toString(16);\n          } else {\n            curColor.g = (curColor.g + 53).toString(16);\n          }\n          if (curColor.b > 202) {\n            curColor.b = curColor.b >= 218 ? (curColor.b - 202).toString(16) : '0' + (curColor.b - 202).toString(16);\n          } else {\n            curColor.b = (curColor.b + 53).toString(16);\n          }\n          var strColor = '#' + curColor.r + curColor.g + curColor.b;\n          arr.push(strColor);\n        }\n        return arr;\n      }\n    }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = this.language['Access Denied'];\n      } else {\n        this.errorInfo = this.sso.pageErrorHandle(err);\n      }\n      // this.closeAlert();\n      // this.error = true;\n      this.showError(this.errorInfo);\n      this.loading = false;\n      // $(\"html, body\").animate({ scrollTop: 0 }, \"slow\");\n    }\n\n    closeAlert() {\n      this.error = false;\n    }\n    showError(msg) {\n      this.closeAlert();\n      this.errorInfo = msg;\n      this.error = true;\n      $(\"html, body\").animate({\n        scrollTop: 0\n      }, \"slow\");\n    }\n    exportTrafficChart() {\n      Highcharts.exportCharts([this.upChart, this.downChart], {\n        type: 'application/pdf'\n      });\n    }\n    ngOnDestroy() {\n      if (this.subscribe) {\n        this.subscribe.unsubscribe();\n      }\n    }\n    downLoadCSV(name, UpchartData, DownchartData, UpextraData, DownextraData) {\n      let data = UpchartData;\n      let headers = [];\n      /* to get max length object */\n      let maxSize = 0;\n      let maxIndex = 0;\n      let i = 0;\n      for (let obj of data) {\n        let size = this.getSize(obj);\n        if (size > maxSize) {\n          maxSize = size;\n          maxIndex = i;\n        }\n        i++;\n      }\n      for (let key in data[maxIndex]) {\n        if (headers.indexOf(key) === -1) {\n          headers.push(key);\n        }\n      }\n      let downHeaders = [];\n      for (let key in DownchartData[maxIndex]) {\n        if (downHeaders.indexOf(key) === -1) {\n          downHeaders.push(key);\n        }\n      }\n      let fName = name + '.csv';\n      let fType = 'text/csv;charset=utf-8';\n      let UpcsvData = this.ConvertToCSV(data, headers);\n      let DowncsvData = this.ConvertToCSV(DownchartData, downHeaders);\n      let csvData = UpextraData + UpcsvData + DownextraData + DowncsvData;\n      var blob = new Blob([csvData], {\n        type: fType\n      });\n      saveAs(blob, fName);\n    }\n    ConvertToCSV(objArray, headerList) {\n      let array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;\n      let str = '';\n      let row = '';\n      for (let index in headerList) {\n        row += headerList[index] + ',';\n      }\n      row = row.slice(0, -1);\n      str += row + '\\r\\n';\n      for (let i = 0; i < array.length; i++) {\n        let line = '';\n        for (let index in headerList) {\n          let head = headerList[index];\n          line += '\\\"' + (array[i][head] != undefined ? array[i][head] : '') + '\\\"' + ',';\n        }\n        str += line + '\\r\\n';\n      }\n      return str;\n    }\n    getSize(obj) {\n      var size = 0,\n        key;\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) size++;\n      }\n      return size;\n    }\n  }\n  TopAppTrafficComponent.ɵfac = function TopAppTrafficComponent_Factory(t) {\n    return new (t || TopAppTrafficComponent)(i0.ɵɵdirectiveInject(i1.CustomTranslateService), i0.ɵɵdirectiveInject(i2.ReportApiService), i0.ɵɵdirectiveInject(i3.CommonService), i0.ɵɵdirectiveInject(i4.OptionsManagerService), i0.ɵɵdirectiveInject(i5.SsoAuthService));\n  };\n  TopAppTrafficComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TopAppTrafficComponent,\n    selectors: [[\"app-top-app-traffic\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"col-md-12 mt-4\", 4, \"ngIf\"], [1, \"col-md-12\", \"mt-4\"], [\"class\", \"w-100 alert alert-danger  fade show my-3\", 4, \"ngIf\"], [1, \"\", 2, \"height\", \"auto\"], [\"id\", \"fa-chart-wrapper\", 1, \"fa-chart-wrapper\", \"chart-min-h\"], [\"class\", \"loader\", 4, \"ngIf\"], [1, \"chart-sec\", 3, \"ngClass\"], [1, \"fa-chart-container\"], [\"id\", \"container-up\"], [\"id\", \"container-down\"], [1, \"w-100\", \"alert\", \"alert-danger\", \"fade\", \"show\", \"my-3\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"loader\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"]],\n    template: function TopAppTrafficComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TopAppTrafficComponent_div_0_Template, 10, 3, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.pageAvailable);\n      }\n    },\n    directives: [i6.NgIf, i6.NgClass],\n    styles: [\"\"]\n  });\n  return TopAppTrafficComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}