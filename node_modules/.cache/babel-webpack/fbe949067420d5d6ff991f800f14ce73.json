{"ast":null,"code":"'use strict';\n\nvar elementHelper = require('../../../../helper/ElementHelper'),\n  cmdHelper = require('../../../../helper/CmdHelper');\nvar entryFactory = require('../../../../factory/EntryFactory');\n\n/**\n * Get the timer definition type for a given timer event definition.\n *\n * @param {ModdleElement<bpmn:TimerEventDefinition>} timer\n *\n * @return {string|undefined} the timer definition type\n */\nfunction getTimerDefinitionType(timer) {\n  if (!timer) {\n    return;\n  }\n  var timeDate = timer.get('timeDate');\n  if (typeof timeDate !== 'undefined') {\n    return 'timeDate';\n  }\n  var timeCycle = timer.get('timeCycle');\n  if (typeof timeCycle !== 'undefined') {\n    return 'timeCycle';\n  }\n  var timeDuration = timer.get('timeDuration');\n  if (typeof timeDuration !== 'undefined') {\n    return 'timeDuration';\n  }\n}\n\n/**\n * Get the actual timer event definition based on option, whether it's a getter\n * to fetch the timer event definition or the exact event definition itself\n *\n * @param {ModdleElement<bpmn:TimerEventDefinition>|Function} timerOrFunction\n * @param {Shape} element\n * @param {HTMLElement} node\n *\n * @return ModdleElement<bpmn:TimerEventDefinition>\n */\nfunction getTimerDefinition(timerOrFunction, element, node) {\n  if (typeof timerOrFunction === 'function') {\n    return timerOrFunction(element, node);\n  }\n  return timerOrFunction;\n}\n\n/**\n * Creates 'bpmn:FormalExpression' element.\n *\n * @param {ModdleElement} parent\n * @param {string} body\n * @param {BpmnFactory} bpmnFactory\n *\n * @return {ModdleElement<bpmn:FormalExpression>} a formal expression\n */\nfunction createFormalExpression(parent, body, bpmnFactory) {\n  body = body || undefined;\n  return elementHelper.createElement('bpmn:FormalExpression', {\n    body: body\n  }, parent, bpmnFactory);\n}\nfunction TimerEventDefinition(group, element, bpmnFactory, timerEventDefinition, translate, options) {\n  var selectOptions = [{\n    value: 'timeDate',\n    name: translate('Date')\n  }, {\n    value: 'timeDuration',\n    name: translate('Duration')\n  }, {\n    value: 'timeCycle',\n    name: translate('Cycle')\n  }];\n  var prefix = options && options.idPrefix,\n    createTimerEventDefinition = options && options.createTimerEventDefinition;\n  group.entries.push(entryFactory.selectBox(translate, {\n    id: prefix + 'timer-event-definition-type',\n    label: translate('Timer Definition Type'),\n    selectOptions: selectOptions,\n    emptyParameter: true,\n    modelProperty: 'timerDefinitionType',\n    get: function (element, node) {\n      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node);\n      return {\n        timerDefinitionType: getTimerDefinitionType(timerDefinition) || ''\n      };\n    },\n    set: function (element, values, node) {\n      var props = {\n        timeDuration: undefined,\n        timeDate: undefined,\n        timeCycle: undefined\n      };\n      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node),\n        newType = values.timerDefinitionType;\n      if (!timerDefinition && typeof createTimerEventDefinition === 'function') {\n        timerDefinition = createTimerEventDefinition(element, node);\n      }\n      if (values.timerDefinitionType) {\n        var oldType = getTimerDefinitionType(timerDefinition);\n        var value;\n        if (oldType) {\n          var definition = timerDefinition.get(oldType);\n          value = definition.get('body');\n        }\n        props[newType] = createFormalExpression(timerDefinition, value, bpmnFactory);\n      }\n      return cmdHelper.updateBusinessObject(element, timerDefinition, props);\n    },\n    hidden: function (element, node) {\n      return getTimerDefinition(timerEventDefinition, element, node) === undefined;\n    }\n  }));\n  group.entries.push(entryFactory.textField(translate, {\n    id: prefix + 'timer-event-definition',\n    label: translate('Timer Definition'),\n    modelProperty: 'timerDefinition',\n    get: function (element, node) {\n      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node),\n        type = getTimerDefinitionType(timerDefinition),\n        definition = type && timerDefinition.get(type),\n        value = definition && definition.get('body');\n      return {\n        timerDefinition: value\n      };\n    },\n    set: function (element, values, node) {\n      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node),\n        type = getTimerDefinitionType(timerDefinition),\n        definition = type && timerDefinition.get(type);\n      if (definition) {\n        return cmdHelper.updateBusinessObject(element, definition, {\n          body: values.timerDefinition || undefined\n        });\n      }\n    },\n    validate: function (element, node) {\n      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node),\n        type = getTimerDefinitionType(timerDefinition),\n        definition = type && timerDefinition.get(type);\n      if (definition) {\n        var value = definition.get('body');\n        if (!value) {\n          return {\n            timerDefinition: translate('Must provide a value')\n          };\n        }\n      }\n    },\n    hidden: function (element, node) {\n      var timerDefinition = getTimerDefinition(timerEventDefinition, element, node);\n      return !getTimerDefinitionType(timerDefinition);\n    }\n  }));\n}\nmodule.exports = TimerEventDefinition;","map":null,"metadata":{},"sourceType":"script"}