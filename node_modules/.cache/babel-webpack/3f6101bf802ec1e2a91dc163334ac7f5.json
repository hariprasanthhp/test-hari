{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./window-ref.service\";\nexport let DownloadService = /*#__PURE__*/(() => {\n  class DownloadService {\n    constructor(windowRefService) {\n      this.windowRefService = windowRefService;\n    }\n    // Audit-Log-Reports\n    saveToDisk(fileURL, changeFileName, isAuditLogReport) {\n      let fileName;\n      if (isAuditLogReport) {\n        fileName = 'Audit-Log-Reports.csv';\n      } else if (fileURL.fileName && fileURL.fileName.includes('swapsystem')) {\n        fileName = fileURL.fileName.split('/').pop();\n      } else {\n        fileName = fileURL.split('/').pop();\n        // let fileName = 'Audit-Log-Reports.csv';\n      }\n\n      if (changeFileName) {\n        let tmpFileNameSplitArr = fileName.split('.');\n        let tmpFileName = `${changeFileName}.${tmpFileNameSplitArr[tmpFileNameSplitArr.length - 1]}`;\n        fileName = tmpFileName;\n      }\n      ;\n      if (fileURL.fileName && fileURL.fileName.includes('swapsystem')) {\n        fileURL = fileURL.fileName;\n      } else {\n        fileURL = fileURL;\n      }\n      fileURL = `${environment.UI_ASSETS_URL}${fileURL}`;\n      console.log(fileURL);\n      let win = this.windowRefService.nativeWindow;\n      // for non-IE\n      if (!win.ActiveXObject) {\n        var save = document.createElement('a');\n        save.href = fileURL;\n        save.target = '_blank';\n        save.download = fileName || 'unknown';\n        var evt = new MouseEvent('click', {\n          'view': window,\n          'bubbles': true,\n          'cancelable': false\n        });\n        save.dispatchEvent(evt);\n        console.log(\"save.href\", save.href);\n        (window.URL || window.webkitURL).revokeObjectURL(save.href);\n      }\n      // for IE < 11\n      else if (!!win.ActiveXObject && document.execCommand) {\n        var _window = window.open(fileURL, '_blank');\n        _window.document.close();\n        _window.document.execCommand('SaveAs', true, fileName || fileURL);\n        _window.close();\n      }\n    }\n    saveToDiskwkflw(fileURL, changeFileName, isWorkflowLogReport, fileNm) {\n      let fileName;\n      if (isWorkflowLogReport) {\n        fileName = 'Workflow-Reports.csv';\n      } else {\n        fileName = fileNm + \"-\" + 'Workflow-Reports.csv';\n      }\n      if (changeFileName) {\n        let tmpFileNameSplitArr = fileName.split('.');\n        let tmpFileName = `${changeFileName}.${tmpFileNameSplitArr[tmpFileNameSplitArr.length - 1]}`;\n        fileName = tmpFileName;\n      }\n      fileURL = `${environment.UI_ASSETS_URL}${fileURL}`;\n      let win = this.windowRefService.nativeWindow;\n      // for non-IE\n      if (!win.ActiveXObject) {\n        var save = document.createElement('a');\n        save.href = fileURL;\n        save.target = '_blank';\n        save.download = fileName || 'unknown';\n        var evt = new MouseEvent('click', {\n          'view': window,\n          'bubbles': true,\n          'cancelable': false\n        });\n        save.dispatchEvent(evt);\n        console.log(\"save.href\", save.href);\n        (window.URL || window.webkitURL).revokeObjectURL(save.href);\n      }\n      // for IE < 11\n      else if (!!win.ActiveXObject && document.execCommand) {\n        var _window = window.open(fileURL, '_blank');\n        _window.document.close();\n        _window.document.execCommand('SaveAs', true, fileName || fileURL);\n        _window.close();\n      }\n    }\n  }\n  DownloadService.ɵfac = function DownloadService_Factory(t) {\n    return new (t || DownloadService)(i0.ɵɵinject(i1.WindowRefService));\n  };\n  DownloadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DownloadService,\n    factory: DownloadService.ɵfac,\n    providedIn: 'root'\n  });\n  return DownloadService;\n})();","map":null,"metadata":{},"sourceType":"module"}