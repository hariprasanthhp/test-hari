{"ast":null,"code":"import { environment } from \"../../../environments/environment\";\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./config.service\";\nexport let SubscriberServicesService = /*#__PURE__*/(() => {\n  class SubscriberServicesService {\n    constructor(http, config) {\n      this.http = http;\n      this.config = config;\n      this.data = {\n        start: 0,\n        limit: 100\n      };\n      this.result$ = new Subject();\n      this.pdata = {\n        start: 0,\n        limit: 10\n      };\n      this.loading = false;\n      this.ssData = {};\n      this.ssresult$ = new Subject();\n    }\n    getSubscriberServicesCount() {\n      this.http.get(environment.SP_API_BASE_URL + '/subscriber/services').subscribe(res => {\n        if (res && res.total) {\n          this.data['limit'] = res.total;\n        }\n        this.getSubscriberServices();\n      }, err => {\n        console.log(err);\n        this.result$.next({\n          error: true,\n          errorMsg: err.statusText\n        });\n      });\n    }\n    getSubscriberServices(data) {\n      data = this.data;\n      //console.log(data);\n      return this.http.get(environment.SP_API_BASE_URL + '/subscriber/services?start=' + data['start'] + '&limit=' + data['limit']).subscribe(res => {\n        let jdata = [];\n        if (res && res['results']) {\n          let containerAllowedObj = this.config.getContainersAllowedObj();\n          for (let i = 0; i < res['results'].length; i++) {\n            jdata = [];\n            for (let j = 0; j < res['results'][i]['containersSelected'].length; j++) {\n              jdata.push(containerAllowedObj[res['results'][i]['containersSelected'][j]]);\n            }\n            res['results'][i]['containersSelectedNames'] = jdata.join(', ');\n          }\n        }\n        this.result$.next(res);\n      }, err => {\n        //console.log(err);\n        this.result$.next({\n          error: true,\n          errorMsg: err.statusText\n        });\n      });\n    }\n    getList(data) {\n      if (this.loading) {\n        return;\n      }\n      this.loading = true;\n      data = this.pdata;\n      //console.log(data);\n      return this.doService = this.http.get(environment.SP_API_BASE_URL + '/subscriber/services?start=' + data['start'] + '&limit=' + data['limit']).subscribe(res => {\n        this.pdata['start'] += res['results'].length;\n        if (this.pdata['start'] >= res['total']) {\n          res['showLoadMoreBtn'] = false;\n        } else {\n          res['showLoadMoreBtn'] = true;\n        }\n        let jdata = [];\n        if (res && res['results']) {\n          let containerAllowedObj = this.config.getContainersAllowedObj();\n          for (let i = 0; i < res['results'].length; i++) {\n            jdata = [];\n            for (let j = 0; j < res['results'][i]['containersSelected'].length; j++) {\n              jdata.push(containerAllowedObj[res['results'][i]['containersSelected'][j]]);\n            }\n            res['results'][i]['containersSelectedNames'] = jdata.join(', ');\n          }\n        }\n        this.loading = false;\n        this.ssresult$.next(res);\n      }, err => {\n        //console.log(err);\n        this.loading = false;\n        this.result$.next({\n          error: true,\n          errorMsg: err.statusText\n        });\n      }, () => {\n        this.loading = false;\n      });\n    }\n    setDefaultValue() {\n      this.pdata = {\n        start: 0,\n        limit: 10\n      };\n      this.data = {\n        start: 0,\n        limit: 100\n      };\n    }\n  }\n  SubscriberServicesService.ɵfac = function SubscriberServicesService_Factory(t) {\n    return new (t || SubscriberServicesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ConfigService));\n  };\n  SubscriberServicesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SubscriberServicesService,\n    factory: SubscriberServicesService.ɵfac,\n    providedIn: 'root'\n  });\n  return SubscriberServicesService;\n})();","map":null,"metadata":{},"sourceType":"module"}