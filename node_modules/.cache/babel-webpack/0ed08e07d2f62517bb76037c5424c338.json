{"ast":null,"code":"'use strict';\n\nvar escapeHTML = require('../Utils').escapeHTML;\nvar cmdHelper = require('../helper/CmdHelper');\nvar domQuery = require('min-dom').query,\n  domAttr = require('min-dom').attr,\n  domClosest = require('min-dom').closest;\nvar filter = require('lodash/filter'),\n  forEach = require('lodash/forEach'),\n  keys = require('lodash/keys');\nvar domify = require('min-dom').domify;\nvar entryFieldDescription = require('./EntryFieldDescription');\nvar updateSelection = require('selection-update');\nvar TABLE_ROW_DIV_SNIPPET = '<div class=\"bpp-field-wrapper bpp-table-row\">';\nvar DELETE_ROW_BUTTON_SNIPPET = '<button class=\"action-button clear\" data-action=\"deleteElement\">' + '<span>X</span>' + '</button>';\nfunction createInputRowTemplate(properties, canRemove) {\n  var template = TABLE_ROW_DIV_SNIPPET;\n  template += createInputTemplate(properties, canRemove);\n  template += canRemove ? DELETE_ROW_BUTTON_SNIPPET : '';\n  template += '</div>';\n  return template;\n}\nfunction createInputTemplate(properties, canRemove) {\n  var columns = properties.length;\n  var template = '';\n  forEach(properties, function (prop) {\n    template += '<input class=\"bpp-table-row-columns-' + columns + ' ' + (canRemove ? 'bpp-table-row-removable' : '') + '\" ' + 'id=\"camunda-table-row-cell-input-value\" ' + 'type=\"text\" ' + 'name=\"' + escapeHTML(prop) + '\" />';\n  });\n  return template;\n}\nfunction createLabelRowTemplate(labels) {\n  var template = TABLE_ROW_DIV_SNIPPET;\n  template += createLabelTemplate(labels);\n  template += '</div>';\n  return template;\n}\nfunction createLabelTemplate(labels) {\n  var columns = labels.length;\n  var template = '';\n  forEach(labels, function (label) {\n    template += '<label class=\"bpp-table-row-columns-' + columns + '\">' + escapeHTML(label) + '</label>';\n  });\n  return template;\n}\nfunction pick(elements, properties) {\n  return (elements || []).map(function (elem) {\n    var newElement = {};\n    forEach(properties, function (prop) {\n      newElement[prop] = elem[prop] || '';\n    });\n    return newElement;\n  });\n}\nfunction diff(element, node, values, oldValues, editable) {\n  return filter(values, function (value, idx) {\n    return !valueEqual(element, node, value, oldValues[idx], editable, idx);\n  });\n}\nfunction valueEqual(element, node, value, oldValue, editable, idx) {\n  if (value && !oldValue) {\n    return false;\n  }\n  var allKeys = keys(value).concat(keys(oldValue));\n  return allKeys.every(function (key) {\n    var n = value[key] || undefined;\n    var o = oldValue[key] || undefined;\n    return !editable(element, node, key, idx) || n === o;\n  });\n}\nfunction getEntryNode(node) {\n  return domClosest(node, '[data-entry]', true);\n}\nfunction getContainer(node) {\n  return domQuery('div[data-list-entry-container]', node);\n}\nfunction getSelection(node) {\n  return {\n    start: node.selectionStart,\n    end: node.selectionEnd\n  };\n}\nfunction setSelection(node, selection) {\n  node.selectionStart = selection.start;\n  node.selectionEnd = selection.end;\n}\n\n/**\n * @param  {Object} options\n * @param  {string} options.id\n * @param  {string} options.description\n * @param  {Array<string>} options.modelProperties\n * @param  {Array<string>} options.labels\n * @param  {Function} options.getElements - this callback function must return a list of business object items\n * @param  {Function} options.removeElement\n * @param  {Function} options.addElement\n * @param  {Function} options.updateElement\n * @param  {Function} options.editable\n * @param  {Function} options.setControlValue\n * @param  {Function} options.show\n *\n * @return {Object}\n */\nmodule.exports = function (translate, options) {\n  var id = options.id,\n    modelProperties = options.modelProperties,\n    labels = options.labels,\n    description = options.description;\n  var labelRow = createLabelRowTemplate(labels);\n  var getElements = options.getElements;\n  var removeElement = options.removeElement,\n    canRemove = typeof removeElement === 'function';\n  var addElement = options.addElement,\n    canAdd = typeof addElement === 'function',\n    addLabel = options.addLabel || 'Add Value';\n  var updateElement = options.updateElement,\n    canUpdate = typeof updateElement === 'function';\n  var editable = options.editable || function () {\n      return true;\n    },\n    setControlValue = options.setControlValue;\n  var show = options.show,\n    canBeShown = typeof show === 'function';\n  var elements = function (element, node) {\n    return pick(getElements(element, node), modelProperties);\n  };\n  var html = domify((canAdd ? '<div class=\"bpp-table-add-row\" ' + (canBeShown ? 'data-show=\"show\"' : '') + '>' + '<label>' + escapeHTML(addLabel) + '</label>' + '<button class=\"action-button add\" data-action=\"addElement\"><span>+</span></button>' + '</div>' : '') + '<div class=\"bpp-table\" data-show=\"showTable\">' + '<div class=\"bpp-field-wrapper bpp-table-row\">' + labelRow + '</div>' + '<div data-list-entry-container>' + '</div>' + '</div>');\n  if (description) {\n    html.appendChild(entryFieldDescription(translate, description, {\n      show: 'showTable'\n    }));\n  }\n  var factory = {\n    id: id,\n    html: html,\n    get: function (element, node) {\n      var boElements = elements(element, node, this.__invalidValues);\n      var invalidValues = this.__invalidValues;\n      delete this.__invalidValues;\n      forEach(invalidValues, function (value, idx) {\n        var element = boElements[idx];\n        forEach(modelProperties, function (prop) {\n          element[prop] = value[prop];\n        });\n      });\n      return boElements;\n    },\n    set: function (element, values, node) {\n      var action = this.__action || {};\n      delete this.__action;\n      if (action.id === 'delete-element') {\n        return removeElement(element, node, action.idx);\n      } else if (action.id === 'add-element') {\n        return addElement(element, node);\n      } else if (canUpdate) {\n        var commands = [],\n          valuesToValidate = values;\n        if (typeof options.validate !== 'function') {\n          valuesToValidate = diff(element, node, values, elements(element, node), editable);\n        }\n        var self = this;\n        forEach(valuesToValidate, function (value) {\n          var validationError,\n            idx = values.indexOf(value);\n          if (typeof options.validate === 'function') {\n            validationError = options.validate(element, value, node, idx);\n          }\n          if (!validationError) {\n            var cmd = updateElement(element, value, node, idx);\n            if (cmd) {\n              commands.push(cmd);\n            }\n          } else {\n            // cache invalid value in an object by index as key\n            self.__invalidValues = self.__invalidValues || {};\n            self.__invalidValues[idx] = value;\n\n            // execute a command, which does not do anything\n            commands.push(cmdHelper.updateProperties(element, {}));\n          }\n        });\n        return commands;\n      }\n    },\n    createListEntryTemplate: function (value, index, selectBox) {\n      return createInputRowTemplate(modelProperties, canRemove);\n    },\n    addElement: function (element, node, event, scopeNode) {\n      var template = domify(createInputRowTemplate(modelProperties, canRemove));\n      var container = getContainer(node);\n      container.appendChild(template);\n      this.__action = {\n        id: 'add-element'\n      };\n      return true;\n    },\n    deleteElement: function (element, node, event, scopeNode) {\n      var container = getContainer(node);\n      var rowToDelete = event.delegateTarget.parentNode;\n      var idx = parseInt(domAttr(rowToDelete, 'data-index'), 10);\n      container.removeChild(rowToDelete);\n      this.__action = {\n        id: 'delete-element',\n        idx: idx\n      };\n      return true;\n    },\n    editable: function (element, rowNode, input, prop, value, idx) {\n      var entryNode = domClosest(rowNode, '[data-entry]');\n      return editable(element, entryNode, prop, idx);\n    },\n    show: function (element, entryNode, node, scopeNode) {\n      entryNode = getEntryNode(entryNode);\n      return show(element, entryNode, node, scopeNode);\n    },\n    showTable: function (element, entryNode, node, scopeNode) {\n      entryNode = getEntryNode(entryNode);\n      var elems = elements(element, entryNode);\n      return elems && elems.length && (!canBeShown || show(element, entryNode, node, scopeNode));\n    },\n    validateListItem: function (element, value, node, idx) {\n      if (typeof options.validate === 'function') {\n        return options.validate(element, value, node, idx);\n      }\n    }\n  };\n\n  // Update/set the selection on the correct position.\n  // It's the same code like for an input value in the PropertiesPanel.js.\n  if (setControlValue) {\n    factory.setControlValue = function (element, rowNode, input, prop, value, idx) {\n      var entryNode = getEntryNode(rowNode);\n      var isReadOnly = domAttr(input, 'readonly');\n      var oldValue = input.value;\n      var selection;\n\n      // prevents input fields from having the value 'undefined'\n      if (value === undefined) {\n        value = '';\n      }\n\n      // when the attribute 'readonly' exists, ignore the comparison\n      // with 'oldValue' and 'value'\n      if (!!isReadOnly && oldValue === value) {\n        return;\n      }\n\n      // update selection on undo/redo\n      if (document.activeElement === input) {\n        selection = updateSelection(getSelection(input), oldValue, value);\n      }\n      setControlValue(element, entryNode, input, prop, value, idx);\n      if (selection) {\n        setSelection(input, selection);\n      }\n    };\n  }\n  return factory;\n};","map":null,"metadata":{},"sourceType":"script"}