{"ast":null,"code":"'use strict';\n\nvar domify = require('min-dom').domify;\nvar escapeHTML = require('../Utils').escapeHTML;\nvar entryFieldDescription = require('./EntryFieldDescription');\nvar bind = require('lodash/bind');\n\n/**\n * An entry that renders a clickable link.\n *\n * A passed {@link options#handleClick} handler is responsible\n * to process the click.\n *\n * The link may be conditionally shown or hidden. This can be\n * controlled via the {@link options.showLink}.\n *\n * @param {Object} options\n * @param {String} options.id\n * @param {String} [options.buttonLabel]\n * @param {Function} options.handleClick\n * @param {Function} [options.showLink] returning false to hide link\n * @param {String} [options.description]\n *\n * @example\n *\n * var linkEntry = link({\n *   id: 'foo',\n *   description: 'Some Description',\n *   handleClick: function(element, node, event) { ... },\n *   showLink: function(element, node) { ... }\n * });\n *\n * @return {Entry} the newly created entry\n */\nfunction link(translate, options) {\n  var id = options.id,\n    buttonLabel = options.buttonLabel || id,\n    showLink = options.showLink,\n    handleClick = options.handleClick,\n    description = options.description,\n    label = options.label;\n  if (showLink && typeof showLink !== 'function') {\n    throw new Error('options.showLink must be a function');\n  }\n  if (typeof handleClick !== 'function') {\n    throw new Error('options.handleClick must be a function');\n  }\n  var resource = {\n    id: id,\n    html: document.createDocumentFragment()\n  };\n  if (label) {\n    resource.html.appendChild(domify('<label for=\"camunda-' + escapeHTML(id) + '\" ' + (showLink ? 'data-show=\"showLink\" ' : '') + '>' + escapeHTML(label) + '</label>'));\n  }\n  resource.html.appendChild(domify('<div class=\"bpp-field-wrapper\">' + '<a data-action=\"handleClick\" ' + (showLink ? 'data-show=\"showLink\" ' : '') + 'class=\"bpp-entry-link' + (options.cssClasses ? ' ' + escapeHTML(options.cssClasses) : '') + '\">' + escapeHTML(buttonLabel) + '</a></div>'));\n\n  // add description below link entry field\n  if (description) {\n    resource.html.appendChild(entryFieldDescription(translate, description, {\n      show: 'showLink'\n    }));\n  }\n  resource.handleClick = bind(handleClick, resource);\n  if (typeof showLink === 'function') {\n    resource.showLink = function () {\n      return showLink.apply(resource, arguments);\n    };\n  }\n  return resource;\n}\nmodule.exports = link;","map":null,"metadata":{},"sourceType":"script"}