{"ast":null,"code":"import { isString, assign, forEach } from 'min-dash';\nimport { domify, attr as domAttr, classes as domClasses, remove as domRemove, delegate as domDelegate } from 'min-dom';\nimport Ids from '../../util/IdGenerator';\n\n// document wide unique tooltip ids\nvar ids = new Ids('tt');\nfunction createRoot(parentNode) {\n  var root = domify('<div class=\"djs-tooltip-container\" style=\"position: absolute; width: 0; height: 0;\" />');\n  parentNode.insertBefore(root, parentNode.firstChild);\n  return root;\n}\nfunction setPosition(el, x, y) {\n  assign(el.style, {\n    left: x + 'px',\n    top: y + 'px'\n  });\n}\nfunction setVisible(el, visible) {\n  el.style.display = visible === false ? 'none' : '';\n}\nvar tooltipClass = 'djs-tooltip',\n  tooltipSelector = '.' + tooltipClass;\n\n/**\n * A service that allows users to render tool tips on the diagram.\n *\n * The tooltip service will take care of updating the tooltip positioning\n * during navigation + zooming.\n *\n * @example\n *\n * ```javascript\n *\n * // add a pink badge on the top left of the shape\n * tooltips.add({\n *   position: {\n *     x: 50,\n *     y: 100\n *   },\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n * });\n *\n * // or with optional life span\n * tooltips.add({\n *   position: {\n *     top: -5,\n *     left: -5\n *   },\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>',\n *   ttl: 2000\n * });\n *\n * // remove a tool tip\n * var id = tooltips.add(...);\n * tooltips.remove(id);\n * ```\n *\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n */\nexport default function Tooltips(eventBus, canvas) {\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._ids = ids;\n  this._tooltipDefaults = {\n    show: {\n      minZoom: 0.7,\n      maxZoom: 5.0\n    }\n  };\n\n  /**\n   * Mapping tooltipId -> tooltip\n   */\n  this._tooltips = {};\n\n  // root html element for all tooltips\n  this._tooltipRoot = createRoot(canvas.getContainer());\n  var self = this;\n  domDelegate.bind(this._tooltipRoot, tooltipSelector, 'mousedown', function (event) {\n    event.stopPropagation();\n  });\n  domDelegate.bind(this._tooltipRoot, tooltipSelector, 'mouseover', function (event) {\n    self.trigger('mouseover', event);\n  });\n  domDelegate.bind(this._tooltipRoot, tooltipSelector, 'mouseout', function (event) {\n    self.trigger('mouseout', event);\n  });\n  this._init();\n}\nTooltips.$inject = ['eventBus', 'canvas'];\n\n/**\n * Adds a HTML tooltip to the diagram\n *\n * @param {Object}               tooltip   the tooltip configuration\n *\n * @param {string|DOMElement}    tooltip.html                 html element to use as an tooltip\n * @param {Object}               [tooltip.show]               show configuration\n * @param {number}               [tooltip.show.minZoom]       minimal zoom level to show the tooltip\n * @param {number}               [tooltip.show.maxZoom]       maximum zoom level to show the tooltip\n * @param {Object}               tooltip.position             where to attach the tooltip\n * @param {number}               [tooltip.position.left]      relative to element bbox left attachment\n * @param {number}               [tooltip.position.top]       relative to element bbox top attachment\n * @param {number}               [tooltip.position.bottom]    relative to element bbox bottom attachment\n * @param {number}               [tooltip.position.right]     relative to element bbox right attachment\n * @param {number}               [tooltip.timeout=-1]\n *\n * @return {string}              id that may be used to reference the tooltip for update or removal\n */\nTooltips.prototype.add = function (tooltip) {\n  if (!tooltip.position) {\n    throw new Error('must specifiy tooltip position');\n  }\n  if (!tooltip.html) {\n    throw new Error('must specifiy tooltip html');\n  }\n  var id = this._ids.next();\n  tooltip = assign({}, this._tooltipDefaults, tooltip, {\n    id: id\n  });\n  this._addTooltip(tooltip);\n  if (tooltip.timeout) {\n    this.setTimeout(tooltip);\n  }\n  return id;\n};\nTooltips.prototype.trigger = function (action, event) {\n  var node = event.delegateTarget || event.target;\n  var tooltip = this.get(domAttr(node, 'data-tooltip-id'));\n  if (!tooltip) {\n    return;\n  }\n  if (action === 'mouseover' && tooltip.timeout) {\n    this.clearTimeout(tooltip);\n  }\n  if (action === 'mouseout' && tooltip.timeout) {\n    // cut timeout after mouse out\n    tooltip.timeout = 1000;\n    this.setTimeout(tooltip);\n  }\n};\n\n/**\n * Get a tooltip with the given id\n *\n * @param {string} id\n */\nTooltips.prototype.get = function (id) {\n  if (typeof id !== 'string') {\n    id = id.id;\n  }\n  return this._tooltips[id];\n};\nTooltips.prototype.clearTimeout = function (tooltip) {\n  tooltip = this.get(tooltip);\n  if (!tooltip) {\n    return;\n  }\n  var removeTimer = tooltip.removeTimer;\n  if (removeTimer) {\n    clearTimeout(removeTimer);\n    tooltip.removeTimer = null;\n  }\n};\nTooltips.prototype.setTimeout = function (tooltip) {\n  tooltip = this.get(tooltip);\n  if (!tooltip) {\n    return;\n  }\n  this.clearTimeout(tooltip);\n  var self = this;\n  tooltip.removeTimer = setTimeout(function () {\n    self.remove(tooltip);\n  }, tooltip.timeout);\n};\n\n/**\n * Remove an tooltip with the given id\n *\n * @param {string} id\n */\nTooltips.prototype.remove = function (id) {\n  var tooltip = this.get(id);\n  if (tooltip) {\n    domRemove(tooltip.html);\n    domRemove(tooltip.htmlContainer);\n    delete tooltip.htmlContainer;\n    delete this._tooltips[tooltip.id];\n  }\n};\nTooltips.prototype.show = function () {\n  setVisible(this._tooltipRoot);\n};\nTooltips.prototype.hide = function () {\n  setVisible(this._tooltipRoot, false);\n};\nTooltips.prototype._updateRoot = function (viewbox) {\n  var a = viewbox.scale || 1;\n  var d = viewbox.scale || 1;\n  var matrix = 'matrix(' + a + ',0,0,' + d + ',' + -1 * viewbox.x * a + ',' + -1 * viewbox.y * d + ')';\n  this._tooltipRoot.style.transform = matrix;\n  this._tooltipRoot.style['-ms-transform'] = matrix;\n};\nTooltips.prototype._addTooltip = function (tooltip) {\n  var id = tooltip.id,\n    html = tooltip.html,\n    htmlContainer,\n    tooltipRoot = this._tooltipRoot;\n\n  // unwrap jquery (for those who need it)\n  if (html.get && html.constructor.prototype.jquery) {\n    html = html.get(0);\n  }\n\n  // create proper html elements from\n  // tooltip HTML strings\n  if (isString(html)) {\n    html = domify(html);\n  }\n  htmlContainer = domify('<div data-tooltip-id=\"' + id + '\" class=\"' + tooltipClass + '\" style=\"position: absolute\">');\n  htmlContainer.appendChild(html);\n  if (tooltip.type) {\n    domClasses(htmlContainer).add('djs-tooltip-' + tooltip.type);\n  }\n  if (tooltip.className) {\n    domClasses(htmlContainer).add(tooltip.className);\n  }\n  tooltip.htmlContainer = htmlContainer;\n  tooltipRoot.appendChild(htmlContainer);\n  this._tooltips[id] = tooltip;\n  this._updateTooltip(tooltip);\n};\nTooltips.prototype._updateTooltip = function (tooltip) {\n  var position = tooltip.position,\n    htmlContainer = tooltip.htmlContainer;\n\n  // update overlay html based on tooltip x, y\n\n  setPosition(htmlContainer, position.x, position.y);\n};\nTooltips.prototype._updateTooltipVisibilty = function (viewbox) {\n  forEach(this._tooltips, function (tooltip) {\n    var show = tooltip.show,\n      htmlContainer = tooltip.htmlContainer,\n      visible = true;\n    if (show) {\n      if (show.minZoom > viewbox.scale || show.maxZoom < viewbox.scale) {\n        visible = false;\n      }\n      setVisible(htmlContainer, visible);\n    }\n  });\n};\nTooltips.prototype._init = function () {\n  var self = this;\n\n  // scroll/zoom integration\n\n  function updateViewbox(viewbox) {\n    self._updateRoot(viewbox);\n    self._updateTooltipVisibilty(viewbox);\n    self.show();\n  }\n  this._eventBus.on('canvas.viewbox.changing', function (event) {\n    self.hide();\n  });\n  this._eventBus.on('canvas.viewbox.changed', function (event) {\n    updateViewbox(event.viewbox);\n  });\n};","map":null,"metadata":{},"sourceType":"module"}