{"ast":null,"code":"import { map, filter, sortBy } from 'min-dash';\nimport { getLabel } from '../label-editing/LabelUtil';\n\n/**\n * Provides ability to search through BPMN elements\n */\nexport default function BpmnSearchProvider(elementRegistry, searchPad, canvas) {\n  this._elementRegistry = elementRegistry;\n  this._canvas = canvas;\n  searchPad.registerProvider(this);\n}\nBpmnSearchProvider.$inject = ['elementRegistry', 'searchPad', 'canvas'];\n\n/**\n * Finds all elements that match given pattern\n *\n * <Result> :\n *  {\n *    primaryTokens: <Array<Token>>,\n *    secondaryTokens: <Array<Token>>,\n *    element: <Element>\n *  }\n *\n * <Token> :\n *  {\n *    normal|matched: <string>\n *  }\n *\n * @param  {string} pattern\n * @return {Array<Result>}\n */\nBpmnSearchProvider.prototype.find = function (pattern) {\n  var rootElement = this._canvas.getRootElement();\n  var elements = this._elementRegistry.filter(function (element) {\n    if (element.labelTarget) {\n      return false;\n    }\n    return true;\n  });\n\n  // do not include root element\n  elements = filter(elements, function (element) {\n    return element !== rootElement;\n  });\n  elements = map(elements, function (element) {\n    return {\n      primaryTokens: matchAndSplit(getLabel(element), pattern),\n      secondaryTokens: matchAndSplit(element.id, pattern),\n      element: element\n    };\n  });\n\n  // exclude non-matched elements\n  elements = filter(elements, function (element) {\n    return hasMatched(element.primaryTokens) || hasMatched(element.secondaryTokens);\n  });\n  elements = sortBy(elements, function (element) {\n    return getLabel(element.element) + element.element.id;\n  });\n  return elements;\n};\nfunction hasMatched(tokens) {\n  var matched = filter(tokens, function (t) {\n    return !!t.matched;\n  });\n  return matched.length > 0;\n}\nfunction matchAndSplit(text, pattern) {\n  var tokens = [],\n    originalText = text;\n  if (!text) {\n    return tokens;\n  }\n  text = text.toLowerCase();\n  pattern = pattern.toLowerCase();\n  var i = text.indexOf(pattern);\n  if (i > -1) {\n    if (i !== 0) {\n      tokens.push({\n        normal: originalText.substr(0, i)\n      });\n    }\n    tokens.push({\n      matched: originalText.substr(i, pattern.length)\n    });\n    if (pattern.length + i < text.length) {\n      tokens.push({\n        normal: originalText.substr(pattern.length + i, text.length)\n      });\n    }\n  } else {\n    tokens.push({\n      normal: originalText\n    });\n  }\n  return tokens;\n}","map":null,"metadata":{},"sourceType":"module"}