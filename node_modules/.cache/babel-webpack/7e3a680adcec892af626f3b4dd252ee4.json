{"ast":null,"code":"// import { NgxCsvParser } from 'ngx-csv-parser';\n// import { NgxCSVParserError } from 'ngx-csv-parser';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let DataTablecreatorService = /*#__PURE__*/(() => {\n  class DataTablecreatorService {\n    constructor() {\n      this.tableOptionsData = new Subject();\n      this.jsonDataOfCSV = new Subject();\n      this.csvRecords = [];\n      this.tableOptions = {\n        data: [],\n        columns: []\n      };\n      this.columnsObject = {\n        title: '',\n        data: ''\n      };\n      this.header = true;\n      this.xlsOption = {\n        isToCamelCase: true,\n        isNested: true\n      };\n    }\n    generateJsonFromCsv(input, oldData, importType) {\n      let data = [];\n      const file = input.target.files[0];\n      const reader = new FileReader();\n      reader.onload = event => {\n        var _a, _b;\n        const file = event.target.result;\n        const lines = file.split(/\\r\\n|\\n/);\n        var result = [];\n        var headers = lines[0].split(\",\");\n        const regex = /\"/gi;\n        for (var i = 1; i < lines.length; i++) {\n          var obj = {};\n          var currentline = this.acceptComaName(lines[i]); /* CCL-42180 */\n          for (var j = 0; j < headers.length; j++) {\n            currentline[j] = ((_a = currentline[j]) === null || _a === void 0 ? void 0 : _a.replaceAll(regex, '')) ? (_b = currentline[j]) === null || _b === void 0 ? void 0 : _b.replaceAll(regex, '') : '';\n            obj[headers[j]] = currentline[j] ? currentline[j] : '';\n          }\n          result.push(obj);\n        }\n        this.csvRecords = result;\n        this.tableOptionsData.next(this.csvRecords);\n      };\n      reader.onerror = event => {};\n      reader.readAsText(file);\n    }\n    /* CCL-42180 */\n    acceptComaName(str1) {\n      function removeComaStrings(str) {\n        const splitAt = (index, xs) => [xs.slice(0, index), xs.slice(index)];\n        let test = JSON.parse(JSON.stringify({\n          str\n        }))['str'];\n        for (let i = 0; i < test.length; i++) {\n          if (test[i] == '\\\"') {\n            test = splitAt(i, test);\n            break;\n          }\n        }\n        if (Array.isArray(test)) {\n          test[1] = test[1].replace(\"\\\"\", \"\");\n          test[1] = test[1].replace(\",\", 'coma;');\n          /* CCL-49154 */\n          /* let count = 0;\r\n            while (test[1][count] != '\\\"') {\r\n              if (test[1][count] == \",\") {\r\n                test[1] = test[1].replace(\",\", 'coma;')\r\n              }\r\n              count++;\r\n            } */\n          test[1] = test[1].replace(\"\\\"\", \"\");\n          test = test[0] + test[1];\n        }\n        if (test.indexOf(\"\\\"\") != -1) return removeComaStrings(test);\n        return test;\n      }\n      str1 = removeComaStrings(str1).split(',').map(item => item.replaceAll(/coma;/g, ','));\n      return str1;\n    }\n    tableOptionsCreator(object, language, excludeKeys, keysWithoutOld) {\n      let newArray = [];\n      for (const key in object) {\n        if (!excludeKeys.includes(key)) {\n          const loopLength = keysWithoutOld.includes(key) ? 1 : 2;\n          for (let i = 0; i < loopLength; i++) {\n            let options = {\n              title: key ? '' : `${i ? 'Old ' : ''}${language[key.replace(/['\"]+/g, '')]}`,\n              data: object[key] ? '' : key.replace(/['\"]+/g, '')\n            };\n            newArray.push(options);\n          }\n        }\n      }\n      return newArray;\n    }\n    getJsonFromCsv(input) {\n      let data = [];\n      const file = input.target.files[0];\n      const reader = new FileReader();\n      reader.onload = event => {\n        var _a, _b;\n        const file = event.target.result;\n        const lines = file.split(/\\r\\n|\\n/);\n        var result = [];\n        var headers = lines[0].split(\",\");\n        const regex = /\"/gi;\n        for (var i = 1; i < lines.length; i++) {\n          var obj = {};\n          var currentline = this.acceptComaName(lines[i]); /* CCL-42180 */\n          for (var j = 0; j < headers.length; j++) {\n            currentline[j] = ((_a = currentline[j]) === null || _a === void 0 ? void 0 : _a.replaceAll(regex, '')) ? (_b = currentline[j]) === null || _b === void 0 ? void 0 : _b.replaceAll(regex, '') : '';\n            obj[headers[j]] = currentline[j] ? currentline[j] : '';\n          }\n          result.push(obj);\n        }\n        this.csvRecords = result;\n        this.jsonDataOfCSV.next(this.csvRecords);\n        return result;\n      };\n      reader.onerror = event => {};\n      reader.readAsText(file);\n    }\n  }\n  DataTablecreatorService.ɵfac = function DataTablecreatorService_Factory(t) {\n    return new (t || DataTablecreatorService)();\n  };\n  DataTablecreatorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataTablecreatorService,\n    factory: DataTablecreatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataTablecreatorService;\n})();","map":null,"metadata":{},"sourceType":"module"}