{"ast":null,"code":"var ELEMENT_ID = 'data-element-id';\nimport { attr as svgAttr } from 'tiny-svg';\n\n/**\n * @class\n *\n * A registry that keeps track of all shapes in the diagram.\n */\nexport default function ElementRegistry(eventBus) {\n  this._elements = {};\n  this._eventBus = eventBus;\n}\nElementRegistry.$inject = ['eventBus'];\n\n/**\n * Register a pair of (element, gfx, (secondaryGfx)).\n *\n * @param {djs.model.Base} element\n * @param {SVGElement} gfx\n * @param {SVGElement} [secondaryGfx] optional other element to register, too\n */\nElementRegistry.prototype.add = function (element, gfx, secondaryGfx) {\n  var id = element.id;\n  this._validateId(id);\n\n  // associate dom node with element\n  svgAttr(gfx, ELEMENT_ID, id);\n  if (secondaryGfx) {\n    svgAttr(secondaryGfx, ELEMENT_ID, id);\n  }\n  this._elements[id] = {\n    element: element,\n    gfx: gfx,\n    secondaryGfx: secondaryGfx\n  };\n};\n\n/**\n * Removes an element from the registry.\n *\n * @param {djs.model.Base} element\n */\nElementRegistry.prototype.remove = function (element) {\n  var elements = this._elements,\n    id = element.id || element,\n    container = id && elements[id];\n  if (container) {\n    // unset element id on gfx\n    svgAttr(container.gfx, ELEMENT_ID, '');\n    if (container.secondaryGfx) {\n      svgAttr(container.secondaryGfx, ELEMENT_ID, '');\n    }\n    delete elements[id];\n  }\n};\n\n/**\n * Update the id of an element\n *\n * @param {djs.model.Base} element\n * @param {string} newId\n */\nElementRegistry.prototype.updateId = function (element, newId) {\n  this._validateId(newId);\n  if (typeof element === 'string') {\n    element = this.get(element);\n  }\n  this._eventBus.fire('element.updateId', {\n    element: element,\n    newId: newId\n  });\n  var gfx = this.getGraphics(element),\n    secondaryGfx = this.getGraphics(element, true);\n  this.remove(element);\n  element.id = newId;\n  this.add(element, gfx, secondaryGfx);\n};\n\n/**\n * Return the model element for a given id or graphics.\n *\n * @example\n *\n * elementRegistry.get('SomeElementId_1');\n * elementRegistry.get(gfx);\n *\n *\n * @param {string|SVGElement} filter for selecting the element\n *\n * @return {djs.model.Base}\n */\nElementRegistry.prototype.get = function (filter) {\n  var id;\n  if (typeof filter === 'string') {\n    id = filter;\n  } else {\n    id = filter && svgAttr(filter, ELEMENT_ID);\n  }\n  var container = this._elements[id];\n  return container && container.element;\n};\n\n/**\n * Return all elements that match a given filter function.\n *\n * @param {Function} fn\n *\n * @return {Array<djs.model.Base>}\n */\nElementRegistry.prototype.filter = function (fn) {\n  var filtered = [];\n  this.forEach(function (element, gfx) {\n    if (fn(element, gfx)) {\n      filtered.push(element);\n    }\n  });\n  return filtered;\n};\n\n/**\n * Return the first element that satisfies the provided testing function.\n *\n * @param {Function} fn\n *\n * @return {djs.model.Base}\n */\nElementRegistry.prototype.find = function (fn) {\n  var map = this._elements,\n    keys = Object.keys(map);\n  for (var i = 0; i < keys.length; i++) {\n    var id = keys[i],\n      container = map[id],\n      element = container.element,\n      gfx = container.gfx;\n    if (fn(element, gfx)) {\n      return element;\n    }\n  }\n};\n\n/**\n * Return all rendered model elements.\n *\n * @return {Array<djs.model.Base>}\n */\nElementRegistry.prototype.getAll = function () {\n  return this.filter(function (e) {\n    return e;\n  });\n};\n\n/**\n * Iterate over all diagram elements.\n *\n * @param {Function} fn\n */\nElementRegistry.prototype.forEach = function (fn) {\n  var map = this._elements;\n  Object.keys(map).forEach(function (id) {\n    var container = map[id],\n      element = container.element,\n      gfx = container.gfx;\n    return fn(element, gfx);\n  });\n};\n\n/**\n * Return the graphical representation of an element or its id.\n *\n * @example\n * elementRegistry.getGraphics('SomeElementId_1');\n * elementRegistry.getGraphics(rootElement); // <g ...>\n *\n * elementRegistry.getGraphics(rootElement, true); // <svg ...>\n *\n *\n * @param {string|djs.model.Base} filter\n * @param {boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\nElementRegistry.prototype.getGraphics = function (filter, secondary) {\n  var id = filter.id || filter;\n  var container = this._elements[id];\n  return container && (secondary ? container.secondaryGfx : container.gfx);\n};\n\n/**\n * Validate the suitability of the given id and signals a problem\n * with an exception.\n *\n * @param {string} id\n *\n * @throws {Error} if id is empty or already assigned\n */\nElementRegistry.prototype._validateId = function (id) {\n  if (!id) {\n    throw new Error('element must have an id');\n  }\n  if (this._elements[id]) {\n    throw new Error('element with id ' + id + ' already added');\n  }\n};","map":null,"metadata":{},"sourceType":"module"}