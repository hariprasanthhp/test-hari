{"ast":null,"code":"'use strict';\n\nvar textField = require('./TextInputEntryFactory');\n\n/**\n * This function is a wrapper around TextInputEntryFactory.\n * It adds functionality to cache an invalid value entered in the\n * text input, instead of setting it on the business object.\n */\nvar validationAwareTextField = function (translate, options, defaultParameters) {\n  var modelProperty = options.modelProperty;\n  defaultParameters.get = function (element, node) {\n    var value = this.__lastInvalidValue;\n    delete this.__lastInvalidValue;\n    var properties = {};\n    properties[modelProperty] = value !== undefined ? value : options.getProperty(element, node);\n    return properties;\n  };\n  defaultParameters.set = function (element, values, node) {\n    var validationErrors = validate.apply(this, [element, values, node]),\n      propertyValue = values[modelProperty];\n\n    // make sure we do not update the id\n    if (validationErrors && validationErrors[modelProperty]) {\n      this.__lastInvalidValue = propertyValue;\n      return options.setProperty(element, {}, node);\n    } else {\n      var properties = {};\n      properties[modelProperty] = propertyValue;\n      return options.setProperty(element, properties, node);\n    }\n  };\n  var validate = defaultParameters.validate = function (element, values, node) {\n    var value = values[modelProperty] || this.__lastInvalidValue;\n    var property = {};\n    property[modelProperty] = value;\n    return options.validate(element, property, node);\n  };\n  return textField(translate, options, defaultParameters);\n};\nmodule.exports = validationAwareTextField;","map":null,"metadata":{},"sourceType":"script"}