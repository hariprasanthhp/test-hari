{"ast":null,"code":"import { Observable, Subject, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { catchError, map } from 'rxjs/operators';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"src/app/shared-utils/date-utils.service\";\nimport * as i5 from \"@angular/router\";\nexport let IssueService = /*#__PURE__*/(() => {\n  class IssueService {\n    constructor(httpClient, ssoAuthService, fb, dateUtilsService, router) {\n      this.httpClient = httpClient;\n      this.ssoAuthService = ssoAuthService;\n      this.fb = fb;\n      this.dateUtilsService = dateUtilsService;\n      this.router = router;\n      this.appliedFilters = {};\n      this.alertType = '';\n      this.transformedAlarms = ['multiple-onts-down-network', 'multiple-onts-down-pon', 'multiple-onts-down-olt'];\n      this.baseURL = environment.API_BASE_URL;\n      this.issuesFilterChanged$ = new Subject();\n      this.geoMapFilterChanged$ = new Subject();\n      this.homegeomapNavigation$ = new Subject();\n      this.isIssueMap = false;\n      this.issuesGeoMapFiltersParams = {};\n      this.geoMapAppliedFilters = {};\n      this.filtersForm = this.fb.group({\n        startDate: [''],\n        endDate: [''],\n        alarmType: [''],\n        region: [''],\n        location: [''],\n        system: [''],\n        fsan: [''],\n        severity: [''],\n        category: [''],\n        customCategory: [''],\n        eventName: 'All',\n        cco_ack: 'all',\n        cco_shelv: 'all'\n      });\n      this.selectedDate = new Subject();\n      this.filterCount$ = this.selectedDate.asObservable();\n      this.currentIssuesFilterParams = {};\n      this.geoMapHomeFilterParams = {};\n      this.alertsCount = {\n        alerts: 0,\n        events: 0\n      };\n      this.mapViewFilters = {};\n      this.regions = this.baseURL + 'nfa/regions?tenant=0';\n      this.locations = this.baseURL + 'nfa/locations?tenant=0';\n      this.systems = this.baseURL + 'nfa/systems?tenant=0';\n    }\n    filterCounts(ids) {\n      this.selectedDate.next(ids);\n      this.dateParams = ids;\n      return this.dateParams;\n    }\n    listen(eventname) {\n      return new Observable(subscriber => {\n        // socket.on(eventname, (data) => {\n        //   subscriber.next(data);\n        // })\n      });\n    }\n    emit(eventname, data) {\n      // console.log(\"data\");\n      // socket.emit(eventname, data);\n    }\n    getRegions(includeDeleted = false) {\n      let query = ``;\n      if (includeDeleted) {\n        query += `&includeDeleted=true`;\n      }\n      return this.httpClient.get(`${this.regions}${query}`).pipe(map(res => {\n        res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n        return res;\n      }), catchError(this.handleError));\n    }\n    getLocations(id) {\n      let region = '&region=' + id;\n      return this.httpClient.get(`${this.locations}${region}`).pipe(map(res => {\n        res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n        return res;\n      }), catchError(this.handleError));\n    }\n    getSystems(regionId, locationId) {\n      let region = '&region=' + regionId;\n      let location = '&location=' + locationId;\n      return this.httpClient.get(`${this.systems}${region}${location}`).pipe(map(res => {\n        res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n        return res;\n      }), catchError(this.handleError));\n    }\n    prepareLocationRegionHierachy(result) {\n      let regionsLocations = [];\n      let regionMap = {};\n      result.map(item => {\n        if (!regionMap.hasOwnProperty(item[0])) {\n          regionsLocations.push({\n            value: item[0],\n            parent: 'All'\n          });\n          regionMap[item[0]] = true;\n        }\n        regionsLocations.push({\n          value: item[1],\n          parent: item[0]\n        });\n      });\n      return regionsLocations;\n    }\n    // getLocation() {\n    //   return localStorage.getItem('location') ? localStorage.getItem('location') : 'All'\n    // }\n    // getRegion() {\n    //   return localStorage.getItem('region') ? localStorage.getItem('region') : 'All'\n    // }\n    handleError(error) {\n      return throwError(error);\n    }\n    getAlarmSubscriberInfo(id) {\n      return this.httpClient.get(`${this.baseURL}/analytics-engine/alarmSubscriberList?historyReport=false&alarmId=${id}`);\n    }\n    setCurrentIssuesFilterParams(params, isGeoMap = true, changeTab) {\n      this.currentIssuesFilterParams = params;\n      if (!changeTab) {\n        this.issuesFilterChanged$.next(isGeoMap);\n      }\n    }\n    getCurrentIssuesFilterParams() {\n      return this.currentIssuesFilterParams;\n    }\n    setgeoMapHomeFilterParams(params, isGeoMap = true, changeTab) {\n      this.geoMapHomeFilterParams = params;\n      if (!changeTab) {\n        this.issuesFilterChanged$.next(isGeoMap);\n      }\n    }\n    getgeoMapHomeFilterParams() {\n      return this.geoMapHomeFilterParams;\n    }\n    setGeoMapFilters(value) {\n      this.geoMapFilterChanged$.next(value);\n    }\n    callGotoHomeGeomap() {\n      this.homegeomapNavigation$.next();\n    }\n    fromMapNavigation(value) {\n      this.isIssueMap = value;\n    }\n    isMap() {\n      return this.isIssueMap;\n    }\n    setIssuesGeoMapFilters(params) {\n      this.issuesGeoMapFiltersParams = params;\n    }\n    getIssuesGeoMapFilters() {\n      return this.issuesGeoMapFiltersParams;\n    }\n    ngOnDestroy() {\n      if (this.issuesFilterChanged$) {\n        this.issuesFilterChanged$.unsubscribe();\n      }\n      if (this.geoMapFilterChanged$) {\n        this.geoMapFilterChanged$.unsubscribe();\n      }\n      if (this.homegeomapNavigation$) {\n        this.homegeomapNavigation$.unsubscribe();\n      }\n      this.selectedDate.unsubscribe();\n    }\n    generateResourceForUI(alarm, isExaAlarm) {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n      let region = '';\n      let location = '';\n      let deviceName = '';\n      if (alarm && alarm['subject']) {\n        if (alarm['subject']['region']) {\n          region += `${alarm['subject']['region']}`;\n        }\n        if (alarm['subject']['location']) {\n          location += `${region ? '/' : ''}${alarm['subject']['location']}`;\n        }\n        if (alarm['subject']['deviceName']) {\n          deviceName += `${location ? '/' : ''}${alarm['subject']['deviceName']}`;\n        }\n      }\n      if (isExaAlarm) {\n        alarm['subject']['resourceForUI'] = `(${region} ${location} ${deviceName}) ${alarm['subject']['source']}`;\n        if (typeof ((_b = (_a = alarm['subject']) === null || _a === void 0 ? void 0 : _a.additionalAttributes) === null || _b === void 0 ? void 0 : _b['ring-name']) === 'object') {\n          alarm['subject']['resourceForUI'] += `(${(_d = (_c = alarm['subject']) === null || _c === void 0 ? void 0 : _c.additionalAttributes) === null || _d === void 0 ? void 0 : _d['ring-name'].value})`;\n        } else if ((_f = (_e = alarm['subject']) === null || _e === void 0 ? void 0 : _e.additionalAttributes) === null || _f === void 0 ? void 0 : _f['ring-name']) {\n          alarm['subject']['resourceForUI'] += `(${(_h = (_g = alarm['subject']) === null || _g === void 0 ? void 0 : _g.additionalAttributes) === null || _h === void 0 ? void 0 : _h['ring-name']})`;\n        }\n      } else if (this.transformedAlarms.indexOf(alarm['subject']['alarmEventName']) === -1) {\n        alarm['subject']['resourceForUI'] = `(${region} ${location} ${deviceName}) ${alarm['subject']['source']}`;\n      } else {\n        if (alarm['subject'] && alarm['subject']['alarmEventName'] === 'multiple-onts-down-network') {\n          alarm['subject']['resourceForUI'] = `(${region} ${location})`;\n        } else if (alarm['subject'] && alarm['subject']['alarmEventName'] === 'multiple-onts-down-pon') {\n          alarm['subject']['resourceForUI'] = `(${region} ${location} ${deviceName}) ${alarm['subject']['source']}`;\n        } else if (alarm['subject'] && alarm['subject']['alarmEventName'] === 'multiple-onts-down-olt') {\n          alarm['subject']['resourceForUI'] = `(${region} ${location} ${deviceName})`;\n        }\n      }\n      return alarm['subject']['resourceForUI'];\n    }\n    appendFqn(res) {\n      if (res === null || res === void 0 ? void 0 : res.length) {\n        res === null || res === void 0 ? void 0 : res.forEach(element => {\n          if (this.findObjectsCountByValue(res, element.name) > 1) {\n            let fqn = '';\n            if (element.fqn) {\n              let tmp = element['fqn'].split(',');\n              if (tmp.length) {\n                let deviceName = tmp[0];\n                if (deviceName) {\n                  let arr = deviceName.split('=');\n                  if (arr.length && arr[1]) {\n                    fqn = arr[1];\n                  }\n                }\n              }\n            }\n            element['tempName'] = `${element.name} ${fqn ? `(${fqn})` : ''}`;\n          } else {\n            element['tempName'] = element.name;\n          }\n        });\n        res.forEach(element => {\n          element['name'] = element.tempName;\n        });\n      }\n      return res;\n    }\n    findObjectsCountByValue(jsObjects, value) {\n      let count = 0;\n      if (jsObjects && jsObjects.length) {\n        for (var i = 0; i < jsObjects.length; i++) {\n          if (typeof jsObjects[i]['isDeleted'] !== 'undefined' && !jsObjects[i]['isDeleted'] && jsObjects[i]['name'].toLowerCase() == value.toLowerCase()) {\n            count++;\n          }\n        }\n      }\n      return count;\n    }\n    getDateParam(fields, last24hours) {\n      var _a;\n      if ((_a = fields === null || fields === void 0 ? void 0 : fields['date']) === null || _a === void 0 ? void 0 : _a.length) {\n        if (!fields['date'][1]) {\n          fields['date'][1] = new Date();\n        }\n        if (last24hours) {\n          return `${this.dateUtilsService.getStartUtcTimeByDays(0) - 86400000},${this.dateUtilsService.getUtCMilliSecByDateObj(fields['date'][1], true)}`;\n        } else {\n          return `${this.dateUtilsService.getUtCMilliSecByDateObj(fields['date'][0])},${this.dateUtilsService.getUtCMilliSecByDateObj(fields['date'][1], true)}`;\n        }\n      } else {\n        return '';\n      }\n    }\n    setAlertType(alertType) {\n      this.alertType = alertType;\n    }\n    getAlertType() {\n      return this.alertType;\n    }\n    getRemoveFiltersData() {\n      return {\n        'SYSTEM': [],\n        'TRANSFORMED': ['category', 'customCategory', 'fsan'],\n        'HEALTH': ['category', 'customCategory'],\n        'CONNECTIVITY': ['category', 'customCategory', 'fsan'],\n        'EVENTS': ['severity', 'cco_ack', 'cco_shelv', 'customCategory']\n      };\n    }\n    getPageTitle() {\n      return {\n        'SYSTEM': 'System Alarms',\n        'TRANSFORMED': 'Transform Alarms',\n        'HEALTH': 'Health Alerts',\n        'CONNECTIVITY': 'Cloud Connectivity',\n        'EVENTS': 'Events'\n      };\n    }\n    getAlarmAlertTypes() {\n      return ['SYSTEM', 'TRANSFORMED', 'HEALTH', 'CONNECTIVITY'];\n    }\n    buildQuery(params = {}) {\n      let query = '';\n      for (var key in params) {\n        if (params[key] == undefined || params[key] == \"\") {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(params[key]);\n      }\n      return query;\n    }\n    getAppliedFilters() {\n      return this.appliedFilters;\n    }\n    setAppliedFilters(obj, realtime = false) {\n      this.appliedFilters = obj;\n      if (realtime) {\n        this.issuesFilterChanged$.next(false);\n      }\n    }\n    setGeomapAppliedFilters(obj) {\n      this.geoMapAppliedFilters = obj;\n    }\n    getGeomapAppliedFilters() {\n      return this.geoMapAppliedFilters;\n    }\n    gotoHomeGeomap() {\n      let filters = _.pickBy(Object.assign(Object.assign({}, this.getMapViewFilters()), this.getAppliedFilters()), function (value, key) {\n        return value;\n      });\n      if (this.getAlertType() === 'DISRUPTION') {\n        filters['fsan_serialno'] = filters['fsan'];\n      }\n      this.router.navigate(['/cco/home/active-systems-geomap'], {\n        state: {\n          filters: filters\n        }\n      });\n    }\n    getAlertScopes() {\n      return {\n        SYSTEM: {\n          realtime: 'cloud.rbac.coc.issues.systemalarms.realtime',\n          active: 'cloud.rbac.coc.issues.systemalarms.activereports',\n          history: 'cloud.rbac.coc.issues.systemalarms.historicalreports'\n        },\n        TRANSFORMED: {\n          realtime: 'cloud.rbac.coc.issues.transformalarms.realtime',\n          active: 'cloud.rbac.coc.issues.transformalarms.activereports',\n          history: 'cloud.rbac.coc.issues.transformalarms.historicalreports'\n        },\n        HEALTH: {\n          realtime: 'cloud.rbac.coc.issues.healthalerts.realtime',\n          active: 'cloud.rbac.coc.issues.healthalerts.activereports',\n          history: 'cloud.rbac.coc.issues.healthalerts.historicalreports'\n        },\n        CONNECTIVITY: {\n          realtime: 'cloud.rbac.coc.issues.cloudconnectivity.realtime',\n          active: 'cloud.rbac.coc.issues.cloudconnectivity.activereports',\n          history: 'cloud.rbac.coc.issues.cloudconnectivity.historicalreports'\n        },\n        EVENTS: 'cloud.rbac.coc.issues.events',\n        DISRUPTION: 'cloud.rbac.coc.issues.servicedisruptions'\n      };\n    }\n    setAlertsCount(res) {\n      var _a;\n      let alerts = 0,\n        events = 0;\n      if (res === null || res === void 0 ? void 0 : res['alarm']) {\n        for (let key in res['alarm']) {\n          if (res['alarm'][key]) {\n            for (let type in res['alarm'][key]) {\n              alerts += res['alarm'][key][type];\n            }\n          }\n        }\n      }\n      if ((_a = res === null || res === void 0 ? void 0 : res['event']) === null || _a === void 0 ? void 0 : _a.count) {\n        events = res['event'].count;\n      }\n      this.alertsCount = {\n        alerts: alerts,\n        events: events\n      };\n    }\n    getAlertsCount() {\n      return this.alertsCount;\n    }\n    setMapViewFilters(filters) {\n      this.mapViewFilters = filters;\n    }\n    getMapViewFilters() {\n      return this.mapViewFilters;\n    }\n    getFileName(response, page) {\n      let filename;\n      try {\n        filename = response.headers.get('Content-Disposition').split('=')[1];\n      } catch (e) {\n        if (page == 'subsciberDisruption') {\n          filename = 'Subscriber Disruptions.csv';\n        } else {\n          filename = 'ServiceDisruptions.csv';\n        }\n      }\n      return filename;\n    }\n  }\n  IssueService.ɵfac = function IssueService_Factory(t) {\n    return new (t || IssueService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService), i0.ɵɵinject(i3.FormBuilder), i0.ɵɵinject(i4.DateUtilsService), i0.ɵɵinject(i5.Router));\n  };\n  IssueService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IssueService,\n    factory: IssueService.ɵfac,\n    providedIn: 'root'\n  });\n  return IssueService;\n})();","map":null,"metadata":{},"sourceType":"module"}