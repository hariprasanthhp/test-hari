{"ast":null,"code":"import * as Highcharts from 'highcharts/highstock';\nimport Drilldown from \"highcharts/modules/drilldown\";\nimport data from \"highcharts/modules/no-data-to-display\";\nimport Highchartsscroller from \"highcharts/modules/accessibility\";\nimport customEvents from \"highcharts-custom-events\";\nimport { DatePipe } from '@angular/common';\nimport { DataTableDirective } from 'angular-datatables';\nimport { combineLatest, of, Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { catchError, map } from 'rxjs/operators';\nimport _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"../service/health.service\";\nimport * as i3 from \"src/app/cco/health/pon-utilization/service/ccochart.service\";\nimport * as i4 from \"../pon-utilization/service/nfainventory.service\";\nimport * as i5 from \"src/app/shared/services/export-excel.service\";\nimport * as i6 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i7 from \"src/app/sys-admin/services/common.service\";\nimport * as i8 from \"src/app/support/shared/custom-pipes/shortnumber.pipe\";\nimport * as i9 from \"src/app/shared-utils/date-utils.service\";\nimport * as i10 from \"src/app/shared/services/sso-auth.service\";\nimport * as i11 from \"@angular/platform-browser\";\nimport * as i12 from \"@angular/router\";\nimport * as i13 from \"@angular/common/http\";\nimport * as i14 from \"@angular/common\";\nimport * as i15 from \"primeng/calendar\";\nimport * as i16 from \"@angular/forms\";\nimport * as i17 from \"@ng-select/ng-select\";\nimport * as i18 from \"angular-datatables\";\nimport * as i19 from \"../shared/timeserieschart/timeserieschart.component\";\nconst _c0 = [\"showInfoModal\"];\nfunction CcoDslComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.language[\"Access denied due to RBAC. Please consult your Organization Administrator for access.\"], \"\\n\");\n  }\n}\nfunction CcoDslComponent_section_12_ng_template_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 86);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r25 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r25.name ? item_r25.name : item_r25);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r25.name ? item_r25.name : item_r25);\n  }\n}\nfunction CcoDslComponent_section_12_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 86);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r26 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r26.name ? item_r26.name : item_r26);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r26.name ? item_r26.name : item_r26);\n  }\n}\nfunction CcoDslComponent_section_12_ng_template_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 86);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r27 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r27.name ? item_r27.name : item_r27);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r27.name ? item_r27.name : item_r27);\n  }\n}\nfunction CcoDslComponent_section_12_ng_template_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 86);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r28 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r28.name ? item_r28.name : item_r28);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r28.name ? item_r28.name : item_r28);\n  }\n}\nfunction CcoDslComponent_section_12_ng_template_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 86);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r29 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r29.name ? item_r29.name : item_r29);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r29.name ? item_r29.name : item_r29);\n  }\n}\nfunction CcoDslComponent_section_12_ng_template_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 86);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r30 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r30.name ? item_r30.name : item_r30);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r30.name ? item_r30.name : item_r30);\n  }\n}\nfunction CcoDslComponent_section_12_ng_template_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 86);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r31 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r31.name ? item_r31.name : item_r31);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r31.name ? item_r31.name : item_r31);\n  }\n}\nfunction CcoDslComponent_section_12_ng_template_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 86);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r32 = ctx.item;\n    i0.ɵɵpropertyInterpolate(\"title\", item_r32.name ? item_r32.name : item_r32);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r32.name ? item_r32.name : item_r32);\n  }\n}\nfunction CcoDslComponent_section_12_div_58_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 87);\n    i0.ɵɵelementStart(1, \"div\", 88);\n    i0.ɵɵelementStart(2, \"div\", 89);\n    i0.ɵɵelementStart(3, \"span\", 90);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r10.language.Loading);\n  }\n}\nfunction CcoDslComponent_section_12_div_59_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r34 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 91);\n    i0.ɵɵelementStart(1, \"span\", 92);\n    i0.ɵɵelement(2, \"img\", 93);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 94);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_div_59_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r34);\n      const ctx_r33 = i0.ɵɵnextContext(2);\n      return ctx_r33.errorMsg = \"\";\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 95);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r11.errorMsg, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction CcoDslComponent_section_12_div_78_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 87);\n    i0.ɵɵelementStart(1, \"div\", 88);\n    i0.ɵɵelementStart(2, \"div\", 89);\n    i0.ɵɵelementStart(3, \"span\", 90);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r12.language.Loading);\n  }\n}\nfunction CcoDslComponent_section_12_div_79_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 91);\n    i0.ɵɵelementStart(1, \"span\", 92);\n    i0.ɵɵelement(2, \"img\", 93);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 94);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_div_79_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r35 = i0.ɵɵnextContext(2);\n      return ctx_r35.errorMsg = \"\";\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 95);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r13.errorMsg, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction CcoDslComponent_section_12_div_98_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 87);\n    i0.ɵɵelementStart(1, \"div\", 88);\n    i0.ɵɵelementStart(2, \"div\", 89);\n    i0.ɵɵelementStart(3, \"span\", 90);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r14.language.Loading);\n  }\n}\nfunction CcoDslComponent_section_12_div_99_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 91);\n    i0.ɵɵelementStart(1, \"span\", 92);\n    i0.ɵɵelement(2, \"img\", 93);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 94);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_div_99_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r38);\n      const ctx_r37 = i0.ɵɵnextContext(2);\n      return ctx_r37.errorMsg = \"\";\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 95);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r15.errorMsg, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction CcoDslComponent_section_12_span_116_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r40 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 96);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_span_116_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r40);\n      const ctx_r39 = i0.ɵɵnextContext(2);\n      return ctx_r39.clearSearch(ctx_r39.searchText);\n    });\n    i0.ɵɵelement(1, \"img\", 97);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CcoDslComponent_section_12_div_130_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 98);\n    i0.ɵɵelementStart(1, \"div\", 88);\n    i0.ɵɵelementStart(2, \"div\", 89);\n    i0.ɵɵelementStart(3, \"span\", 90);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r17 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r17.language.Loading);\n  }\n}\nfunction CcoDslComponent_section_12_tbody_131_tr_1_td_1_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelement(1, \"img\", 105);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CcoDslComponent_section_12_tbody_131_tr_1_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r48 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 103);\n    i0.ɵɵelementStart(1, \"a\", 104);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_tbody_131_tr_1_td_1_Template_a_click_1_listener() {\n      i0.ɵɵrestoreView(_r48);\n      const item_r42 = i0.ɵɵnextContext().$implicit;\n      const ctx_r46 = i0.ɵɵnextContext(3);\n      return ctx_r46.applyfilter(false, \"\", item_r42);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵtemplate(3, CcoDslComponent_section_12_tbody_131_tr_1_td_1_span_3_Template, 2, 0, \"span\", 66);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r42 = i0.ɵɵnextContext().$implicit;\n    const ctx_r43 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r42[ctx_r43.chartDownType] ? item_r42[ctx_r43.chartDownType] : \"--\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r43.chartType === \"Interface\");\n  }\n}\nfunction CcoDslComponent_section_12_tbody_131_tr_1_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r42 = i0.ɵɵnextContext().$implicit;\n    const ctx_r44 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r42[ctx_r44.chartDownType] ? item_r42[ctx_r44.chartDownType] : \"--\");\n  }\n}\nfunction CcoDslComponent_section_12_tbody_131_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, CcoDslComponent_section_12_tbody_131_tr_1_td_1_Template, 4, 2, \"td\", 99);\n    i0.ɵɵtemplate(2, CcoDslComponent_section_12_tbody_131_tr_1_td_2_Template, 2, 1, \"td\", 66);\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵelementStart(4, \"div\", 100);\n    i0.ɵɵelementStart(5, \"div\");\n    i0.ɵɵelement(6, \"img\", 101);\n    i0.ɵɵelementStart(7, \"span\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\");\n    i0.ɵɵelement(10, \"img\", 102);\n    i0.ɵɵelementStart(11, \"span\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\");\n    i0.ɵɵelementStart(14, \"div\", 100);\n    i0.ɵɵelementStart(15, \"div\");\n    i0.ɵɵelement(16, \"img\", 101);\n    i0.ɵɵelementStart(17, \"span\");\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"div\");\n    i0.ɵɵelement(20, \"img\", 102);\n    i0.ɵɵelementStart(21, \"span\");\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"td\");\n    i0.ɵɵelementStart(24, \"div\", 100);\n    i0.ɵɵelementStart(25, \"div\");\n    i0.ɵɵelement(26, \"img\", 101);\n    i0.ɵɵelementStart(27, \"span\");\n    i0.ɵɵtext(28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"div\");\n    i0.ɵɵelement(30, \"img\", 102);\n    i0.ɵɵelementStart(31, \"span\");\n    i0.ɵɵtext(32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r42 = ctx.$implicit;\n    const ctx_r41 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(item_r42 == null ? null : item_r42.deleted));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r42 == null ? null : item_r42.deleted);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(item_r42.usUtilExcCnt ? ctx_r41.countconvert(item_r42.usUtilExcCnt) : \"0\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(item_r42.dsUtilExcCnt ? ctx_r41.countconvert(item_r42.dsUtilExcCnt) : \"0\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(item_r42.usCurRateBelowThresCnt ? ctx_r41.countconvert(item_r42.usCurRateBelowThresCnt) : \"0\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", item_r42.dsCurRateBelowThresCnt ? ctx_r41.countconvert(item_r42.dsCurRateBelowThresCnt) : \"0\", \"\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(item_r42.usSnrBelowThresCnt ? ctx_r41.countconvert(item_r42.usSnrBelowThresCnt) : \"0\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(item_r42.dsSnrBelowThresCnt ? ctx_r41.countconvert(item_r42.dsSnrBelowThresCnt) : \"0\");\n  }\n}\nfunction CcoDslComponent_section_12_tbody_131_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵtemplate(1, CcoDslComponent_section_12_tbody_131_tr_1_Template, 33, 8, \"tr\", 82);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r18.tableData);\n  }\n}\nfunction CcoDslComponent_section_12_div_144_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 87);\n    i0.ɵɵelementStart(1, \"div\", 88);\n    i0.ɵɵelementStart(2, \"div\", 106);\n    i0.ɵɵelementStart(3, \"span\", 90);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r19.language.Loading);\n  }\n}\nfunction CcoDslComponent_section_12_div_145_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r52 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 91);\n    i0.ɵɵelementStart(1, \"span\", 92);\n    i0.ɵɵelement(2, \"img\", 93);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 94);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_div_145_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r52);\n      const ctx_r51 = i0.ɵɵnextContext(2);\n      return ctx_r51.fullScreenMsg = \"\";\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 95);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r20.fullScreenMsg, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction CcoDslComponent_section_12_tr_167_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 81);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 81);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 81);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\", 81);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\", 81);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\", 81);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const list_r53 = ctx.$implicit;\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", list_r53[ctx_r21.fullScreenChartType] ? list_r53[ctx_r21.fullScreenChartType] : \"--\", \"\", list_r53.deleted ? \" (Deleted)\" : \"\", \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r21.fullScreenChart != \"ponchart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r21.countconvert(list_r53.usUtilExcCnt));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r21.fullScreenChart != \"ponchart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r21.countconvert(list_r53.dsUtilExcCnt));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r21.fullScreenChart != \"packagechart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r21.countconvert(list_r53.usCurRateBelowThresCnt));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r21.fullScreenChart != \"packagechart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r21.countconvert(list_r53.dsCurRateBelowThresCnt));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r21.fullScreenChart != \"bipchart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r21.countconvert(list_r53.usSnrBelowThresCnt));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r21.fullScreenChart != \"bipchart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r21.countconvert(list_r53.dsSnrBelowThresCnt));\n  }\n}\nfunction CcoDslComponent_section_12_div_169_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r58 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 108);\n    i0.ɵɵelementStart(1, \"app-timeserieschart\", 109);\n    i0.ɵɵlistener(\"valueChange\", function CcoDslComponent_section_12_div_169_div_1_Template_app_timeserieschart_valueChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r58);\n      const ctx_r57 = i0.ɵɵnextContext(3);\n      return ctx_r57.clearChartContainer($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r55 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"wholedata\", item_r55)(\"params\", item_r55.params)(\"paramname\", item_r55.paramname)(\"charttype\", item_r55.charttype)(\"title\", item_r55.title)(\"system\", item_r55.system)(\"divid\", item_r55.divid)(\"chartname\", item_r55.chartname)(\"page\", item_r55.page);\n  }\n}\nfunction CcoDslComponent_section_12_div_169_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, CcoDslComponent_section_12_div_169_div_1_Template, 2, 9, \"div\", 107);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r22 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r22.loadedMultipleTimeseriesChart);\n  }\n}\nfunction CcoDslComponent_section_12_ng_template_170_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r61 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 110);\n    i0.ɵɵelementStart(1, \"h5\", 111);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 112);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_ng_template_170_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r61);\n      const modal_r59 = restoredCtx.$implicit;\n      return modal_r59.dismiss(\"Cross click\");\n    });\n    i0.ɵɵelement(6, \"span\", 113);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 114);\n    i0.ɵɵelementStart(8, \"button\", 115);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_ng_template_170_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r61);\n      const modal_r59 = restoredCtx.$implicit;\n      return modal_r59.close(\"Save click\");\n    });\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r24.modalTitle);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r24.modalInfo, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r24.language.Ok, \" \");\n  }\n}\nconst _c1 = function () {\n  return {\n    width: \"100%\",\n    height: \"38px\"\n  };\n};\nconst _c2 = function () {\n  return {\n    height: \"36px\"\n  };\n};\nconst _c3 = function () {\n  return {\n    standalone: true\n  };\n};\nfunction CcoDslComponent_section_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r64 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 9);\n    i0.ɵɵelementStart(1, \"section\", 10);\n    i0.ɵɵelementStart(2, \"div\", 11);\n    i0.ɵɵelementStart(3, \"div\", 12);\n    i0.ɵɵelementStart(4, \"label\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 13);\n    i0.ɵɵelementStart(7, \"p-calendar\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoDslComponent_section_12_Template_p_calendar_ngModelChange_7_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r63 = i0.ɵɵnextContext();\n      return ctx_r63.fromDate = $event;\n    })(\"onSelect\", function CcoDslComponent_section_12_Template_p_calendar_onSelect_7_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r65 = i0.ɵɵnextContext();\n      return ctx_r65.changeDate();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 12);\n    i0.ɵɵelementStart(9, \"label\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 13);\n    i0.ɵɵelementStart(12, \"p-calendar\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoDslComponent_section_12_Template_p_calendar_ngModelChange_12_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r66 = i0.ɵɵnextContext();\n      return ctx_r66.toDate = $event;\n    })(\"onSelect\", function CcoDslComponent_section_12_Template_p_calendar_onSelect_12_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r67 = i0.ɵɵnextContext();\n      return ctx_r67.changeDate();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 12);\n    i0.ɵɵelementStart(14, \"label\");\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"ng-select\", 16);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoDslComponent_section_12_Template_ng_select_ngModelChange_16_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r68 = i0.ɵɵnextContext();\n      return ctx_r68.regionSelected = $event;\n    })(\"ngModelChange\", function CcoDslComponent_section_12_Template_ng_select_ngModelChange_16_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r69 = i0.ɵɵnextContext();\n      return ctx_r69.getLocationValue($event);\n    });\n    i0.ɵɵtemplate(17, CcoDslComponent_section_12_ng_template_17_Template, 2, 2, \"ng-template\", 17);\n    i0.ɵɵtemplate(18, CcoDslComponent_section_12_ng_template_18_Template, 2, 2, \"ng-template\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"div\", 19);\n    i0.ɵɵelementStart(20, \"label\");\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(22, \"ng-select\", 20);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoDslComponent_section_12_Template_ng_select_ngModelChange_22_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r70 = i0.ɵɵnextContext();\n      return ctx_r70.locationSelected = $event;\n    })(\"ngModelChange\", function CcoDslComponent_section_12_Template_ng_select_ngModelChange_22_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r71 = i0.ɵɵnextContext();\n      return ctx_r71.getSystemValue($event);\n    });\n    i0.ɵɵtemplate(23, CcoDslComponent_section_12_ng_template_23_Template, 2, 2, \"ng-template\", 17);\n    i0.ɵɵtemplate(24, CcoDslComponent_section_12_ng_template_24_Template, 2, 2, \"ng-template\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"div\", 21);\n    i0.ɵɵelementStart(26, \"label\");\n    i0.ɵɵtext(27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"ng-select\", 22);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoDslComponent_section_12_Template_ng_select_ngModelChange_28_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r72 = i0.ɵɵnextContext();\n      return ctx_r72.systemSelected = $event;\n    })(\"ngModelChange\", function CcoDslComponent_section_12_Template_ng_select_ngModelChange_28_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r73 = i0.ɵɵnextContext();\n      return ctx_r73.getInterfaceValue($event);\n    });\n    i0.ɵɵtemplate(29, CcoDslComponent_section_12_ng_template_29_Template, 2, 2, \"ng-template\", 17);\n    i0.ɵɵtemplate(30, CcoDslComponent_section_12_ng_template_30_Template, 2, 2, \"ng-template\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(31, \"div\", 23);\n    i0.ɵɵelementStart(32, \"label\");\n    i0.ɵɵtext(33);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(34, \"ng-select\", 24);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoDslComponent_section_12_Template_ng_select_ngModelChange_34_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r74 = i0.ɵɵnextContext();\n      return ctx_r74.interfaceSelected = $event;\n    })(\"ngModelChange\", function CcoDslComponent_section_12_Template_ng_select_ngModelChange_34_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r75 = i0.ɵɵnextContext();\n      return ctx_r75.selectInterface($event);\n    });\n    i0.ɵɵtemplate(35, CcoDslComponent_section_12_ng_template_35_Template, 2, 2, \"ng-template\", 17);\n    i0.ɵɵtemplate(36, CcoDslComponent_section_12_ng_template_36_Template, 2, 2, \"ng-template\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(37, \"div\", 25);\n    i0.ɵɵelementStart(38, \"div\", 26);\n    i0.ɵɵelementStart(39, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_Template_button_click_39_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r76 = i0.ɵɵnextContext();\n      return ctx_r76.applyfilter(true);\n    });\n    i0.ɵɵelementStart(40, \"span\");\n    i0.ɵɵtext(41);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(42, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_Template_button_click_42_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r77 = i0.ɵɵnextContext();\n      return ctx_r77.clearFilter();\n    });\n    i0.ɵɵelementStart(43, \"span\");\n    i0.ɵɵtext(44);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(45, \"section\", 29);\n    i0.ɵɵelementStart(46, \"div\", 30);\n    i0.ɵɵelementStart(47, \"div\", 31);\n    i0.ɵɵelementStart(48, \"div\", 32);\n    i0.ɵɵelementStart(49, \"div\", 33);\n    i0.ɵɵelementStart(50, \"div\", 34);\n    i0.ɵɵtext(51);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(52, \"div\", 35);\n    i0.ɵɵelementStart(53, \"button\", 36);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_Template_button_click_53_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r78 = i0.ɵɵnextContext();\n      return ctx_r78.downloadFunction(ctx_r78.chartTitleDsl, \"#PortCourt\", ctx_r78.chartDownType, ctx_r78.ponChartbyLocation, ctx_r78.chartTitleDsl, ctx_r78.chartId);\n    });\n    i0.ɵɵelement(54, \"img\", 37);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(55, \"button\", 38);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_Template_button_click_55_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r79 = i0.ɵɵnextContext();\n      return ctx_r79.fullScreenExpandFunction(ctx_r79.chartTitleDsl, ctx_r79.chartType, \"ponchart\", ctx_r79.ponChartbyLocation);\n    });\n    i0.ɵɵelement(56, \"img\", 39);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(57, \"div\", 40);\n    i0.ɵɵtemplate(58, CcoDslComponent_section_12_div_58_Template, 5, 1, \"div\", 41);\n    i0.ɵɵtemplate(59, CcoDslComponent_section_12_div_59_Template, 6, 1, \"div\", 42);\n    i0.ɵɵelementStart(60, \"div\", 43);\n    i0.ɵɵelementStart(61, \"h5\", 44);\n    i0.ɵɵtext(62);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(63, \"h5\", 45);\n    i0.ɵɵtext(64);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(65, \"div\", 46);\n    i0.ɵɵelement(66, \"div\", 47);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(67, \"div\", 31);\n    i0.ɵɵelementStart(68, \"div\", 32);\n    i0.ɵɵelementStart(69, \"div\", 33);\n    i0.ɵɵelementStart(70, \"div\", 34);\n    i0.ɵɵtext(71);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(72, \"div\", 35);\n    i0.ɵɵelementStart(73, \"button\", 48);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_Template_button_click_73_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r80 = i0.ɵɵnextContext();\n      return ctx_r80.downloadFunction(ctx_r80.chartTitleAttainable, \"#PacketDropped\", ctx_r80.chartDownType, ctx_r80.packetDroppedData, ctx_r80.chartTitleAttainable, ctx_r80.chartId);\n    });\n    i0.ɵɵelement(74, \"img\", 37);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(75, \"button\", 49);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_Template_button_click_75_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r81 = i0.ɵɵnextContext();\n      return ctx_r81.fullScreenExpandFunction(ctx_r81.chartTitleAttainable, ctx_r81.chartType, \"packagechart\", ctx_r81.packetDroppedData);\n    });\n    i0.ɵɵelement(76, \"img\", 39);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(77, \"div\", 40);\n    i0.ɵɵtemplate(78, CcoDslComponent_section_12_div_78_Template, 5, 1, \"div\", 41);\n    i0.ɵɵtemplate(79, CcoDslComponent_section_12_div_79_Template, 6, 1, \"div\", 42);\n    i0.ɵɵelementStart(80, \"div\", 43);\n    i0.ɵɵelementStart(81, \"h5\", 44);\n    i0.ɵɵtext(82);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(83, \"h5\", 45);\n    i0.ɵɵtext(84);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(85, \"div\", 46);\n    i0.ɵɵelement(86, \"div\", 50);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(87, \"div\", 31);\n    i0.ɵɵelementStart(88, \"div\", 32);\n    i0.ɵɵelementStart(89, \"div\", 33);\n    i0.ɵɵelementStart(90, \"div\", 34);\n    i0.ɵɵtext(91);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(92, \"div\", 35);\n    i0.ɵɵelementStart(93, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_Template_button_click_93_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r82 = i0.ɵɵnextContext();\n      return ctx_r82.downloadFunction(ctx_r82.chartTitleSnr, \"#BIPErrorRate\", ctx_r82.chartDownType, ctx_r82.bipErrorRateData, ctx_r82.chartTitleSnr, ctx_r82.chartId);\n    });\n    i0.ɵɵelement(94, \"img\", 37);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(95, \"button\", 52);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_Template_button_click_95_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r83 = i0.ɵɵnextContext();\n      return ctx_r83.fullScreenExpandFunction(ctx_r83.chartTitleSnr, ctx_r83.chartType, \"bipchart\", ctx_r83.bipErrorRateData);\n    });\n    i0.ɵɵelement(96, \"img\", 39);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(97, \"div\", 40);\n    i0.ɵɵtemplate(98, CcoDslComponent_section_12_div_98_Template, 5, 1, \"div\", 41);\n    i0.ɵɵtemplate(99, CcoDslComponent_section_12_div_99_Template, 6, 1, \"div\", 42);\n    i0.ɵɵelementStart(100, \"div\", 43);\n    i0.ɵɵelementStart(101, \"h5\", 44);\n    i0.ɵɵtext(102);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(103, \"h5\", 45);\n    i0.ɵɵtext(104);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(105, \"div\", 46);\n    i0.ɵɵelement(106, \"div\", 53);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(107, \"section\", 54);\n    i0.ɵɵelementStart(108, \"div\", 55);\n    i0.ɵɵelementStart(109, \"div\", 56);\n    i0.ɵɵelementStart(110, \"div\", 57);\n    i0.ɵɵelementStart(111, \"div\", 58);\n    i0.ɵɵelementStart(112, \"div\", 59);\n    i0.ɵɵtext(113);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(114, \"div\", 60);\n    i0.ɵɵelementStart(115, \"input\", 61);\n    i0.ɵɵlistener(\"ngModelChange\", function CcoDslComponent_section_12_Template_input_ngModelChange_115_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r84 = i0.ɵɵnextContext();\n      return ctx_r84.searchText = $event;\n    })(\"keyup\", function CcoDslComponent_section_12_Template_input_keyup_115_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r85 = i0.ɵɵnextContext();\n      return ctx_r85.search($event.target.value);\n    })(\"search\", function CcoDslComponent_section_12_Template_input_search_115_listener($event) {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r86 = i0.ɵɵnextContext();\n      return ctx_r86.search($event.target.value);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(116, CcoDslComponent_section_12_span_116_Template, 2, 0, \"span\", 62);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(117, \"div\", 56);\n    i0.ɵɵelementStart(118, \"div\", 63);\n    i0.ɵɵelementStart(119, \"table\", 64);\n    i0.ɵɵelementStart(120, \"thead\");\n    i0.ɵɵelementStart(121, \"tr\");\n    i0.ɵɵelementStart(122, \"th\");\n    i0.ɵɵtext(123);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(124, \"th\");\n    i0.ɵɵtext(125);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(126, \"th\");\n    i0.ɵɵtext(127);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(128, \"th\");\n    i0.ɵɵtext(129);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(130, CcoDslComponent_section_12_div_130_Template, 5, 1, \"div\", 65);\n    i0.ɵɵtemplate(131, CcoDslComponent_section_12_tbody_131_Template, 2, 1, \"tbody\", 66);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(132, \"div\", 67);\n    i0.ɵɵelementStart(133, \"div\", 68);\n    i0.ɵɵelementStart(134, \"div\", 69);\n    i0.ɵɵelementStart(135, \"div\", 70);\n    i0.ɵɵelementStart(136, \"div\", 71);\n    i0.ɵɵtext(137);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(138, \"div\", 72);\n    i0.ɵɵelementStart(139, \"button\", 73);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_Template_button_click_139_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r87 = i0.ɵɵnextContext();\n      return ctx_r87.downloadFunction(ctx_r87.downloadTitle, \"#fullScreenChart\", ctx_r87.fullScreenChartType, ctx_r87.fullScreenData, ctx_r87.downloadTitle);\n    });\n    i0.ɵɵelement(140, \"img\", 74);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(141, \"button\", 75);\n    i0.ɵɵlistener(\"click\", function CcoDslComponent_section_12_Template_button_click_141_listener() {\n      i0.ɵɵrestoreView(_r64);\n      const ctx_r88 = i0.ɵɵnextContext();\n      return ctx_r88.fullScreenInvertFunction();\n    });\n    i0.ɵɵelement(142, \"img\", 76);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(143, \"div\", 77);\n    i0.ɵɵtemplate(144, CcoDslComponent_section_12_div_144_Template, 5, 1, \"div\", 41);\n    i0.ɵɵtemplate(145, CcoDslComponent_section_12_div_145_Template, 6, 1, \"div\", 42);\n    i0.ɵɵelementStart(146, \"div\", 43);\n    i0.ɵɵelement(147, \"div\", 78);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(148, \"div\", 79);\n    i0.ɵɵelementStart(149, \"table\", 80);\n    i0.ɵɵelementStart(150, \"thead\");\n    i0.ɵɵelementStart(151, \"tr\");\n    i0.ɵɵelementStart(152, \"th\");\n    i0.ɵɵtext(153);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(154, \"th\", 81);\n    i0.ɵɵtext(155);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(156, \"th\", 81);\n    i0.ɵɵtext(157);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(158, \"th\", 81);\n    i0.ɵɵtext(159);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(160, \"th\", 81);\n    i0.ɵɵtext(161);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(162, \"th\", 81);\n    i0.ɵɵtext(163);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(164, \"th\", 81);\n    i0.ɵɵtext(165);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(166, \"tbody\");\n    i0.ɵɵtemplate(167, CcoDslComponent_section_12_tr_167_Template, 15, 14, \"tr\", 82);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(168, \"section\", 83);\n    i0.ɵɵtemplate(169, CcoDslComponent_section_12_div_169_Template, 2, 1, \"div\", 66);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(170, CcoDslComponent_section_12_ng_template_170_Template, 10, 3, \"ng-template\", 84, 85, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"Start_Date\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(120, _c1));\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r1.language[\"START_DATE\"]);\n    i0.ɵɵproperty(\"inputStyle\", i0.ɵɵpureFunction0(121, _c2))(\"autoZIndex\", true)(\"ngModel\", ctx_r1.fromDate)(\"showIcon\", true)(\"selectOtherMonths\", true)(\"ngModelOptions\", i0.ɵɵpureFunction0(122, _c3))(\"minDate\", ctx_r1.minDateForstart)(\"maxDate\", ctx_r1.toDate)(\"styleClass\", \"p-cal-custom\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"END_DATE\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction0(123, _c1));\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r1.language[\"END_DATE\"]);\n    i0.ɵɵproperty(\"inputStyle\", i0.ɵɵpureFunction0(124, _c2))(\"autoZIndex\", true)(\"ngModel\", ctx_r1.toDate)(\"showIcon\", true)(\"selectOtherMonths\", true)(\"ngModelOptions\", i0.ɵɵpureFunction0(125, _c3))(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.fromDate)(\"styleClass\", \"p-cal-custom\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"Region\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r1.language.region);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.regionSelected)(\"items\", ctx_r1.regionDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"Location\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r1.language.Location);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.locationSelected)(\"items\", ctx_r1.locationDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"System\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r1.language.System);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.systemSelected)(\"items\", ctx_r1.systemDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"Interface\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r1.language.Interface);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.interfaceSelected)(\"items\", ctx_r1.interfaceDataArray)(\"clearable\", false)(\"searchable\", true);\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language[\"apply\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"apply\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language[\"ClearFilter\"]);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language[\"TClearFilter\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"TClearFilter\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r1.fullScreen && !ctx_r1.hideInterface ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language[ctx_r1.chartTitleDsl] || ctx_r1.chartTitleDsl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.language[ctx_r1.chartTitleDsl] || ctx_r1.chartTitleDsl, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language.export);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language.expand);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.errorMsg);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r1.loading && !ctx_r1.errorMsg ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.language[ctx_r1.chartSubTitle] || ctx_r1.chartSubTitle, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.subTitle, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language[ctx_r1.chartTitleAttainable] || ctx_r1.chartTitleAttainable);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.language[ctx_r1.chartTitleAttainable] || ctx_r1.chartTitleAttainable, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language.export);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language.expand);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.errorMsg);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r1.loading && !ctx_r1.errorMsg ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.chartType == \"Interface\" ? ctx_r1.language[ctx_r1.chartSubTitleforPacket] || ctx_r1.chartSubTitleforPacket : ctx_r1.language[ctx_r1.chartSubTitle] || ctx_r1.chartSubTitle, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.subTitle, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language[ctx_r1.chartTitleSnr] || ctx_r1.chartTitleSnr);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.language[ctx_r1.chartTitleSnr] || ctx_r1.chartTitleSnr, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language.export);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language.expand);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.errorMsg);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r1.loading && !ctx_r1.errorMsg ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.chartType == \"Interface\" ? ctx_r1.language[ctx_r1.chartSubTitleforPon] || ctx_r1.chartSubTitleforPon : ctx_r1.chartType == \"System\" ? ctx_r1.language[ctx_r1.chartSubTitleforSys] || ctx_r1.chartSubTitleforSys : ctx_r1.language[ctx_r1.chartSubTitle] || ctx_r1.chartSubTitle, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r1.subTitle, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r1.fullScreen && !ctx_r1.hideInterface ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.language[ctx_r1.tableName] || ctx_r1.tableName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r1.language[ctx_r1.searchType] || ctx_r1.searchType);\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.searchText);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.searchText);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"dtOptions\", ctx_r1.dtOptions)(\"dtTrigger\", ctx_r1.dtTrigger);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.language[ctx_r1.chartType] || ctx_r1.chartType, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"Threshold Exceeded\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"Not at Attainable Rate\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"Not At Target SNR\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.fullScreen ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r1.fullScreenChartName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language.export);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r1.language.shrink);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.fullScreenMsg);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", !ctx_r1.fullScreenMsg ? \"d-block\" : \"d-none\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"dtOptions\", ctx_r1.dtOptions)(\"dtTrigger\", ctx_r1.dtTrigger1);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.language[ctx_r1.fullScreenChartType] || ctx_r1.fullScreenChartType);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r1.fullScreenChart != \"ponchart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.language.Upstream);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r1.fullScreenChart != \"ponchart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.language.Downstream);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r1.fullScreenChart != \"packagechart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.language.Upstream);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r1.fullScreenChart != \"packagechart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.language.Downstream);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r1.fullScreenChart != \"bipchart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.language.Upstream);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", ctx_r1.fullScreenChart != \"bipchart\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.language.Downstream);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.fullScreenData);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.singleTimeseries && !ctx_r1.fullScreen);\n  }\n}\nDrilldown(Highcharts);\ndata(Highcharts);\nHighchartsscroller(Highcharts);\ncustomEvents(Highcharts);\nexport let CcoDslComponent = /*#__PURE__*/(() => {\n  class CcoDslComponent {\n    constructor(translateService, healthService, CcochartService, nfainventoryservice, exportExcelService, dialogService, commonOrgService, ShortnumberPipe, dateUtilsService, sso, titleService, router, http, route) {\n      this.translateService = translateService;\n      this.healthService = healthService;\n      this.CcochartService = CcochartService;\n      this.nfainventoryservice = nfainventoryservice;\n      this.exportExcelService = exportExcelService;\n      this.dialogService = dialogService;\n      this.commonOrgService = commonOrgService;\n      this.ShortnumberPipe = ShortnumberPipe;\n      this.dateUtilsService = dateUtilsService;\n      this.sso = sso;\n      this.titleService = titleService;\n      this.router = router;\n      this.http = http;\n      this.route = route;\n      this.maxDate = new Date();\n      this.ponCounts = 0;\n      this.PONCAPACITY = 0;\n      this.chartTitleDsl = \"Threshold By Region\";\n      this.chartTitleAttainable = 'Not At Attainable Rate By Region';\n      this.chartTitleSnr = 'Not At Target SNR By Region';\n      this.chartSubTitle = 'Select a region to view locations in that region';\n      this.chartName = \"PON Port Courts\";\n      this.language = {};\n      this.minDateForstart = new Date(new Date().setDate(new Date().getDate() - 727));\n      this.regionDataArray = [\"All\"];\n      this.systemDataArray = [\"All\"];\n      this.locationDataArray = [\"All\"];\n      this.chartType = \"Region\";\n      this.chartDownType = 'region';\n      this.tableType = \"Region\";\n      this.tableName = \"Regions\";\n      this.searchType = 'Search regions';\n      this.regionSelected = \"All\";\n      this.locationSelected = \"All\";\n      this.hideInterface = false;\n      this.systemSelected = \"All\";\n      this.fullScreenChartName = '';\n      this.fullScreen = false;\n      this.showUtilization = false;\n      this.chartTitle = 'PON Error Counts';\n      this.value = 8;\n      this.options = {\n        floor: 1,\n        ceil: 8,\n        translate: (value, label) => {\n          switch (value) {\n            case 8:\n              return \"<b>Today</b> \";\n              break;\n            case 7:\n              return \"<b>-1</b> \";\n              break;\n            case 6:\n              return \"<b>-2</b> \";\n              break;\n            case 5:\n              return \"<b>-3</b> \";\n              break;\n            case 4:\n              return \"<b>-4</b> \";\n              break;\n            case 3:\n              return \"<b>-5</b> \";\n              break;\n            case 2:\n              return \"<b>-6</b> \";\n              break;\n            case 1:\n              return \"<b>-7</b> \";\n              break;\n            default:\n              return \"<b>-7</b>\";\n          }\n        }\n      };\n      this.groupBy = \"region\";\n      this.dtTrigger = new Subject();\n      this.dtTrigger1 = new Subject();\n      this.dtTrigger2 = new Subject();\n      this.loadedMultipleTimeseriesChart = [];\n      this.interfaceDataArray = [\"All\"];\n      this.interfaceSelected = \"All\";\n      this.last24hours = false;\n      this.applyCount = 3;\n      this.bipChart = {\n        location: {},\n        system: {},\n        interface: {}\n      };\n      this.packageChart = {\n        location: {},\n        system: {},\n        interface: {}\n      };\n      this.thresholdChart = {\n        location: {},\n        system: {},\n        interface: {}\n      };\n      this.hasScopeAccess = false;\n      this.fullscreen_Filter = false;\n      this.dtOptions = {};\n      this.redenderOnce = false;\n      this.viaHomePage = false;\n      this.tableData = [];\n      this.chartId = 'regionId';\n      this.timeSeriesOptionFilter1 = [{\n        id: 'both',\n        name: 'Highest Total Usage'\n      }, {\n        id: 'down',\n        name: 'Highest Downstream Usage'\n      }, {\n        id: 'up',\n        name: 'Highest Upstream Usage'\n      }];\n      this.timeSeriesOptionFilter2 = [{\n        id: 10,\n        name: 'View 10 Subscribers'\n      }, {\n        id: 25,\n        name: 'View 25 Subscribers'\n      }, {\n        id: 50,\n        name: 'View 50 Subscribers'\n      }];\n      this.timeSeriesData1 = \"both\";\n      this.timeSeriesData2 = 10;\n      this.Tableloading = false;\n      this.closeSub = false;\n      this.idCount = 0;\n      this.fromNs = 'false';\n      this.route.queryParams.subscribe(params => {\n        this.fromNs = params['fromNs'] && params.fromNs == 'true' ? params.fromNs : 'false';\n        if (this.fromNs == 'true') {\n          this.networkSystemsFilters = params;\n          this.hideInterface = true;\n          this.singleTimeseries = true;\n        }\n      });\n      this.ORG_ID = this.sso.getOrganizationID(this.router.url);\n      this.frTable = this.translateService.fr;\n      this.esTable = this.translateService.es;\n      this.language = this.translateService.defualtLanguage;\n      this.regionsApiLoader();\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.chartTitle = this.language.Number_of_PONs;\n        this.tableLanguageOptions();\n        this.applyfilter(true);\n        this.titleService.setTitle(`${this.language['DSL']} - ${this.language['Health']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      });\n      this.toggleSubscription = this.sso.toggled$.subscribe(data => {\n        console.log(Highcharts.charts);\n        Highcharts.charts.forEach(chart => {\n          setTimeout(() => {\n            if (chart != undefined) chart.reflow();\n          }, 100);\n        });\n      });\n    }\n    getTitle(id, array, key, value) {\n      if (id.toLowerCase() == 'all') return 'All';\n      let find = array.find(e => e[value] === id);\n      return find ? find[key] : '';\n    }\n    ngOnInit() {\n      var _a, _b, _c, _d, _e;\n      this.totalcount = this.nfainventoryservice.GetDslCount(false).subscribe(res => {\n        var _a;\n        this.ponCounts = (_a = res === null || res === void 0 ? void 0 : res.count) === null || _a === void 0 ? void 0 : _a.toLocaleString();\n      });\n      this.ponutilizationchart = this.nfainventoryservice.GetDslCount(true).subscribe(res => {\n        var _a;\n        if (res) {\n          this.PONCAPACITY = (_a = res === null || res === void 0 ? void 0 : res.count) === null || _a === void 0 ? void 0 : _a.toLocaleString();\n          //console.log(this.PONCAPACITY, 'this.PONCAPACITY ');\n        }\n      });\n\n      this.dtOptions = {\n        pagingType: 'full_numbers',\n        pageLength: 10,\n        lengthChange: true,\n        processing: false,\n        dom: 'tipr',\n        destroy: true,\n        ordering: true,\n        order: [],\n        columnDefs: [{\n          targets: [3]\n        }]\n      };\n      this.titleService.setTitle(`${this.language['DSL']} - ${this.language['Health']} - ${this.language['Operations']} - ${this.language['Calix Cloud']}`);\n      Highcharts.wrap(Highcharts.Tooltip.prototype, 'refresh', function (p, points, mouseEvent) {\n        p.call(this, points, mouseEvent);\n        if (!this.isHidden && this.shared) {\n          var seriesTooltipBorderColor = points[0] && points[0].series && points[0].series.options.tooltip && points[0].series.options.tooltip.borderColor,\n            borderColor = seriesTooltipBorderColor,\n            label = this.label;\n          if (label && borderColor) {\n            label.attr({\n              stroke: borderColor\n            });\n          }\n        }\n      });\n      let scopes = this.sso.getScopes();\n      if (environment.VALIDATE_SCOPE) {\n        if (scopes['cloud.rbac.coc.health.dsl']) {\n          this.hasScopeAccess = true;\n        }\n      } else {\n        this.hasScopeAccess = true;\n      }\n      if (!this.hasScopeAccess) {\n        this.sso.setPageAccess(false);\n        return;\n      } else {\n        this.sso.setPageAccess(true);\n      }\n      this.count = 0;\n      let date = new Date();\n      this.fromDate = new Date(date.getTime() - 1 * 24 * 60 * 60 * 1000);\n      this.toDate = new Date();\n      this.tableLanguageOptions();\n      if ((_a = history.state) === null || _a === void 0 ? void 0 : _a.days) {\n        this.viaHomePage = true;\n        let days = ((_b = history.state) === null || _b === void 0 ? void 0 : _b.days) - 1;\n        this.regionSelected = (_c = history.state) === null || _c === void 0 ? void 0 : _c.categoryid;\n        this.regionName = (_d = history.state) === null || _d === void 0 ? void 0 : _d.categoryname;\n        this.fromDate = new Date(date.getTime() - days * 24 * 60 * 60 * 1000);\n        this.toDate = new Date();\n        this.applyfilter(true);\n      } else if ((_e = history.state) === null || _e === void 0 ? void 0 : _e.last24hours) {\n        this.fromDate = new Date(date.getTime() - 1 * 24 * 60 * 60 * 1000);\n        this.toDate = new Date();\n        this.last24hours = true;\n        this.applyCount = -1;\n        this.applyfilter(true);\n      } else if (this.fromNs != 'true') this.applyfilter(true);\n    }\n    tableLanguageOptions() {\n      if (this.language.fileLanguage == 'fr') {\n        this.dtOptions.language = this.frTable;\n      } else if (this.language.fileLanguage == 'es') {\n        this.dtOptions.language = this.esTable;\n      } else if (this.language.fileLanguage == 'de_DE') {\n        this.dtOptions.language = this.translateService.de_DE;\n      } else if (this.language.fileLanguage == 'en' && this.dtOptions.language) {\n        delete this.dtOptions.language;\n      }\n    }\n    // Region Api Loader\n    regionsApiLoader() {\n      this.regionsSubject = this.nfainventoryservice.GetRegions().subscribe(res => {\n        this.regionDataArray = [\"All\"];\n        let counts = {};\n        res.forEach(x => {\n          counts[x.name] = (counts[x.name] || 0) + 1;\n        });\n        res.forEach((element, index) => {\n          var _a;\n          if (counts[element['name']] > 1) {\n            element.name = element.name + \" (\" + ((_a = element.fqn) === null || _a === void 0 ? void 0 : _a.split('=')[1].split(',')[0]) + \")\";\n          }\n        });\n        res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n        this.regionDataArray = [...this.regionDataArray, ...res];\n        if (this.fromNs == 'true') {\n          if (this.networkSystemsFilters && this.networkSystemsFilters['region_uuid']) {\n            if (this.regionDataArray.findIndex(el => el['id'] == this.networkSystemsFilters['region_uuid']) !== -1) {\n              this.regionSelected = this.networkSystemsFilters['region_uuid'];\n              this.getLocationValue('');\n            } else {\n              this.fromNs = 'false';\n              this.applyfilter(true);\n            }\n          }\n        }\n      }, error => {});\n    }\n    // location value\n    getLocationValue(event) {\n      let id = this.regionSelected == \"All\" ? \"\" : this.regionSelected;\n      this.groupBy = \"region\";\n      this.locationSelected = \"All\";\n      this.systemSelected = \"All\";\n      this.interfaceSelected = \"All\";\n      this.locationDataArray = [\"All\"];\n      this.systemDataArray = [\"All\"];\n      this.interfaceDataArray = [\"All\"];\n      if (this.regionSelected && this.regionSelected != \"All\") {\n        this.LocationSubject = this.nfainventoryservice.GetLocations(id).subscribe(res => {\n          res.sort();\n          this.locationDataArray = [\"All\"];\n          this.locationDataArray = [...this.locationDataArray, ...res];\n          if (this.fromNs == 'true') {\n            if (this.networkSystemsFilters && this.networkSystemsFilters['location_uuid']) {\n              if (this.locationDataArray.findIndex(el => el['id'] == this.networkSystemsFilters['location_uuid']) !== -1) {\n                this.locationSelected = this.networkSystemsFilters['location_uuid'];\n                this.getSystemValue('');\n              } else {\n                // this.loading = true;\n                this.fromNs = 'false';\n                this.applyfilter(true);\n              }\n            }\n          }\n        }, error => {});\n      }\n      this.regionDataArray.forEach(element => {\n        if (element.id == this.regionSelected) {\n          this.regionName = element.name;\n          this.packageChart.location = {\n            region: this.regionSelected,\n            regionname: this.regionName\n          };\n          this.bipChart.location = this.thresholdChart.location = this.packageChart.location;\n        }\n      });\n    }\n    // system value\n    getSystemValue(event) {\n      let regionid = this.regionSelected == \"All\" ? \"\" : this.regionSelected;\n      let locationid = this.locationSelected == \"All\" ? \"\" : this.locationSelected;\n      this.groupBy = \"location\";\n      this.systemSelected = \"All\";\n      this.interfaceSelected = 'All';\n      this.systemDataArray = [\"All\"];\n      this.interfaceDataArray = [\"All\"];\n      if (this.locationSelected != \"All\" && this.regionSelected != \"All\") {\n        this.systemSubject = this.nfainventoryservice.GetSystems(regionid, locationid, \"dsl\").subscribe(res => {\n          this.systemDataArray = [\"All\"];\n          this.systemDataArray = [...this.systemDataArray, ...res];\n          if (this.fromNs == 'true') {\n            if (this.networkSystemsFilters && this.networkSystemsFilters['system_uuid']) {\n              if (this.systemDataArray.findIndex(el => el['uuid'] == this.networkSystemsFilters['system_uuid']) !== -1) {\n                this.systemSelected = this.networkSystemsFilters['system_uuid'];\n                this.getInterfaceValue('');\n              } else {\n                // this.loading = true;\n                this.fromNs = 'false';\n                this.applyfilter(true);\n              }\n            }\n          }\n        }, error => {});\n      }\n      this.locationDataArray.forEach(element => {\n        if (element.id == this.locationSelected) {\n          this.locationName = element.name;\n          this.packageChart.system = {\n            region: this.regionSelected,\n            regionname: this.regionName,\n            location: this.locationSelected,\n            locationname: this.locationName\n          };\n          this.bipChart.system = this.thresholdChart.system = this.packageChart.system;\n        }\n      });\n    }\n    //load interface\n    getInterfaceValue(event) {\n      this.interfaceSelected = 'All';\n      this.interfaceDataArray = [\"All\"];\n      let params1 = {\n        system: this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n        interfaceCategory: \"dsl\"\n      };\n      let query = \"\";\n      for (var key in params1) {\n        if (params1[key] == undefined || params1[key] == \"\" || params1[key] === []) {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(params1[key]);\n      }\n      if (this.systemSelected != \"All\" && this.locationSelected != \"All\" && this.regionSelected != \"All\") {\n        this.ponbiperror = this.healthService.GetInterfaces(query, 'dsl').subscribe(res => {\n          res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n            numeric: true\n          }));\n          this.interfaceDataArray = ['All'];\n          this.interfaceDataArray = [...this.interfaceDataArray, ...res];\n          if (this.fromNs == 'true') {\n            if (this.networkSystemsFilters && this.networkSystemsFilters['interface']) {\n              if (this.interfaceDataArray.findIndex(el => el['name'] == this.networkSystemsFilters['interface']) !== -1) {\n                this.interfaceSelected = this.networkSystemsFilters['interface'];\n                this.fromNs = 'false';\n                this.applyfilter(true);\n              } else {\n                this.fromNs = 'false';\n                this.applyfilter(true);\n              }\n            }\n          }\n        });\n        this.systemDataArray.forEach(element => {\n          if (element.uuid == this.systemSelected) {\n            this.systemName = element.name;\n            this.packageChart.interface = {\n              region: this.regionSelected,\n              regionname: this.regionName,\n              location: this.locationSelected,\n              locationname: this.locationName,\n              system: this.systemSelected,\n              systemname: this.systemName\n            };\n            this.bipChart.interface = this.thresholdChart.interface = this.packageChart.interface;\n          }\n        });\n      }\n    }\n    //select the interface\n    selectInterface(event) {\n      this.interfaceDataArray.forEach(element => {\n        if (element.name == this.interfaceSelected) {\n          this.interfaceName = element.name;\n          this.packageChart.interface = {\n            region: this.regionSelected,\n            regionname: this.regionName,\n            location: this.locationSelected,\n            locationname: this.locationName,\n            system: this.systemSelected,\n            systemname: this.systemName,\n            interface: this.interfaceSelected,\n            interfacename: this.interfaceName\n          };\n          this.bipChart.interface = this.thresholdChart.interface = this.packageChart.interface;\n        }\n      });\n    }\n    changeDate() {\n      if (!this.interfaceSelected) this.loadedMultipleTimeseriesChart = [];\n      if (!this.validateStartEndDates()) {\n        this.modalTitle = this.language.Time_Period;\n        this.openModalInfo();\n        return;\n      }\n      ;\n      if (this.fromDate && this.toDate) {\n        this.dateParam = '&date=' + this.fromDate.getTime() + '%2C' + this.toDate.getTime();\n      } else {\n        this.dateParam = \"\";\n      }\n    }\n    applyfilter(val, chart, data) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;\n      this.closeSub = false;\n      console.log(data);\n      if (val || chart) {\n        this.searchText = '';\n        if ((chart === null || chart === void 0 ? void 0 : chart.type) == \"Interface\" || (data === null || data === void 0 ? void 0 : data.interface)) {\n          this.rerender();\n          this.closeSub = false;\n        }\n      }\n      if (val) {\n        this.applyCount++;\n        if (this.last24hours && this.applyCount >= 1) this.last24hours = false;\n      }\n      if (!this.validateStartEndDates()) {\n        this.modalTitle = this.language.Time_Period;\n        this.openModalInfo();\n        return;\n      }\n      ;\n      if (this.fullScreen == true) {\n        this.fullscreen_Filter = true;\n        if (this.systemSelected && this.systemSelected != \"All\") {\n          let chartname;\n          this.chartId = 'interface';\n          if (this.fullScreenChart == \"ponchart\") {\n            chartname = 'Threshold By Interface';\n          } else if (this.fullScreenChart == \"bipchart\") {\n            chartname = \"Not At Target SNR By Interface\";\n          } else if (this.fullScreenChart == \"packagechart\") {\n            chartname = 'Not At Attainable Rate By Interface';\n          } else if (this.fullScreenChart == \"UtilizationChart\") {\n            chartname = 'HUtilizationByInterface';\n          }\n          this.fullScreenExpandFunction(chartname, 'Interface', this.fullScreenChart, '', this.chartId);\n          return;\n        }\n        if (this.locationSelected && this.locationSelected != \"All\") {\n          let chartname;\n          this.chartId = 'systemId';\n          if (this.fullScreenChart == \"ponchart\") {\n            chartname = 'Threshold By System';\n          } else if (this.fullScreenChart == \"bipchart\") {\n            chartname = \"Not At Target SNR By System\";\n          } else if (this.fullScreenChart == \"packagechart\") {\n            chartname = \"Not At Attainable Rate By System\";\n          }\n          this.fullScreenExpandFunction(chartname, 'System', this.fullScreenChart, '', this.chartId);\n          return;\n        }\n        if (this.regionSelected && this.regionSelected != \"All\") {\n          let chartname;\n          this.chartId = 'locationId';\n          if (this.fullScreenChart == \"ponchart\") {\n            chartname = 'Threshold By Location';\n          } else if (this.fullScreenChart == \"bipchart\") {\n            chartname = \"Not At Target SNR By Location\";\n          } else if (this.fullScreenChart == \"packagechart\") {\n            chartname = \"Not At Attainable Rate By Location\";\n          }\n          this.fullScreenExpandFunction(chartname, 'Location', this.fullScreenChart, '', this.chartId);\n          return;\n        }\n        if (this.regionSelected == \"All\") {\n          let chartname;\n          this.chartId = \"regionId\";\n          if (this.fullScreenChart == \"ponchart\") {\n            chartname = 'Threshold By Region';\n          } else if (this.fullScreenChart == \"bipchart\") {\n            chartname = \"Not At Target SNR By Region\";\n          } else if (this.fullScreenChart == \"packagechart\") {\n            chartname = \"Not At Attainable Rate By Region\";\n          }\n          this.fullScreenExpandFunction(chartname, 'Region', this.fullScreenChart, '', this.chartId);\n          return;\n        }\n      } else {\n        this.hideInterface = false;\n        this.showUtilization = false;\n        this.singleTimeseries = false;\n        this.fullscreen_Filter = false;\n        if (this.interfaceSelected && this.interfaceSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Interface\" || (data === null || data === void 0 ? void 0 : data.interface)) {\n          if (chart || data) {\n            let istimeseries, date, enddate, groupBy;\n            istimeseries = true;\n            date = this.fromDate;\n            enddate = this.toDate;\n            groupBy = \"\";\n            this.getInterfaceValue(chart);\n            let interfaceSelected = chart.category ? chart.category : data.interface;\n            if (istimeseries) {\n              let params = {\n                tenant: \"0\",\n                startTime: this.fromDate,\n                endTime: this.toDate,\n                region: ((_a = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _a === void 0 ? void 0 : _a.region) ? (_b = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _b === void 0 ? void 0 : _b.region : this.regionSelected ? this.regionSelected : this.regionSelected == \"All\" || chart.type == \"Location\" ? \"\" : this.regionSelected,\n                location: ((_c = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _c === void 0 ? void 0 : _c.location) ? (_d = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _d === void 0 ? void 0 : _d.location : this.locationSelected ? this.locationSelected : this.locationSelected == \"All\" ? \"\" : this.locationSelected,\n                system: ((_e = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _e === void 0 ? void 0 : _e.system) ? (_f = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _f === void 0 ? void 0 : _f.system : this.systemSelected ? this.systemSelected : this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n                interface: interfaceSelected\n              };\n              let paramsname = {\n                regionname: ((_g = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _g === void 0 ? void 0 : _g.regionname) ? (_h = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _h === void 0 ? void 0 : _h.regionname : this.regionNameSelected,\n                locationname: ((_j = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _j === void 0 ? void 0 : _j.locationname) ? (_k = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _k === void 0 ? void 0 : _k.locationname : this.locationNameSelected,\n                systemname: ((_l = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _l === void 0 ? void 0 : _l.systemname) ? (_m = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _m === void 0 ? void 0 : _m.systemname : this.systemNameSelected,\n                interfacename: chart.name ? chart.name : interfaceSelected\n              };\n              this.timeSeriesParams = {\n                startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n                endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n                system: ((_o = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _o === void 0 ? void 0 : _o.system) ? (_p = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _p === void 0 ? void 0 : _p.system : this.systemSelected ? this.systemSelected : this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n                interface: interfaceSelected,\n                count: 10,\n                direction: 'both'\n              };\n              params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n              this.timeSeriesParams[\"granularity\"] = this.healthService.getGranularity(this.timeSeriesParams.startTime, this.timeSeriesParams.endTime);\n              this.singleTimeseries = true;\n              let system = ((_q = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _q === void 0 ? void 0 : _q.system) ? (_r = chart === null || chart === void 0 ? void 0 : chart.extradata) === null || _r === void 0 ? void 0 : _r.system : this.systemSelected;\n              let chartName = 'ponPon' + system + interfaceSelected;\n              this.loadMultipleChart(params, paramsname, \"General\", chartName, interfaceSelected);\n              //this.getTimeSeriesTableData(this.timeSeriesParams)\n              return;\n            }\n          } else {\n            this.loadedMultipleTimeseriesChart = [];\n            this.hideInterface = true;\n            let params = {\n              tenant: \"0\",\n              startTime: this.fromDate,\n              endTime: this.toDate,\n              region: this.regionSelected == \"All\" ? \"\" : this.regionSelected,\n              location: this.locationSelected == \"All\" ? \"\" : this.locationSelected,\n              system: this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n              interface: this.interfaceSelected == \"All\" ? \"\" : this.interfaceSelected\n            };\n            params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n            let paramsname = {\n              regionname: this.regionName,\n              locationname: this.locationName,\n              systemname: this.systemName,\n              interfacename: this.interfaceName\n            };\n            this.systemNameSelected = this.systemName;\n            this.timeSeriesParams = {\n              startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n              endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n              system: this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n              interface: this.interfaceSelected == \"All\" ? \"\" : this.interfaceSelected,\n              count: 10,\n              direction: 'both'\n            };\n            this.timeSeriesParams[\"granularity\"] = this.healthService.getGranularity(this.timeSeriesParams.startTime, this.timeSeriesParams.endTime);\n            this.singleTimeseries = true;\n            this.loadMultipleChart(params, paramsname, \"General\", \"General\", this.interfaceSelected);\n            //this.getTimeSeriesTableData(this.timeSeriesParams)\n            return;\n          }\n        }\n        if (this.systemSelected && this.systemSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"System\" || (data === null || data === void 0 ? void 0 : data.system) || this.locationSelected && this.locationSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Location\" || (data === null || data === void 0 ? void 0 : data.location) || this.regionSelected && this.regionSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Region\" || (data === null || data === void 0 ? void 0 : data.region)) {\n          if (this.systemSelected && this.systemSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"System\" || (data === null || data === void 0 ? void 0 : data.system)) {\n            this.loadedMultipleTimeseriesChart = [];\n            this.chartTitleDsl = \"Threshold By Interface\";\n            this.chartTitleAttainable = 'Not At Attainable Rate By Interface';\n            this.chartTitleSnr = 'Not At Target SNR By Interface';\n            this.chartType = \"Interface\";\n            this.chartSubTitle = 'Uplink_port_Sub';\n            this.chartSubTitleforPacket = 'Select an interface to view not at attainable rate on that interface';\n            this.chartSubTitleforPon = 'Select an interface to view not at target SNR on that interface';\n            this.chartDownType = \"interface\";\n            this.tableType = \"Interface\";\n            this.tableName = \"Interfaces\";\n            this.chartId = 'interface';\n            this.searchType = 'Search interfaces';\n            let value = val ? {\n              type: \"System\",\n              charttype: \"ponchart\",\n              category: this.systemSelected,\n              name: this.systemName,\n              extradata: this.thresholdChart.system\n            } : chart;\n            let groupBy, chartid;\n            groupBy = \"interface\";\n            this.regionSelected = ((_s = value.extradata) === null || _s === void 0 ? void 0 : _s.region) ? (_t = value.extradata) === null || _t === void 0 ? void 0 : _t.region : this.regionSelected;\n            this.locationSelected = ((_u = value.extradata) === null || _u === void 0 ? void 0 : _u.location) ? (_v = value.extradata) === null || _v === void 0 ? void 0 : _v.location : this.locationSelected;\n            this.systemSelected = value.category ? value.category : data.systemId;\n            this.systemNameSelected = value.name ? value.name : data === null || data === void 0 ? void 0 : data.system;\n            console.log(this.systemSelected);\n            if (!val) this.getInterfaceValue(value);\n            this.extraData = {\n              region: this.regionSelected,\n              regionname: ((_w = value === null || value === void 0 ? void 0 : value.extradata) === null || _w === void 0 ? void 0 : _w.regionname) ? (_x = value === null || value === void 0 ? void 0 : value.extradata) === null || _x === void 0 ? void 0 : _x.regionname : this.regionNameSelected ? this.regionNameSelected : (_y = this.thresholdChart.system) === null || _y === void 0 ? void 0 : _y.regionname,\n              location: this.locationSelected,\n              locationname: ((_z = value === null || value === void 0 ? void 0 : value.extradata) === null || _z === void 0 ? void 0 : _z.locationname) ? (_0 = value === null || value === void 0 ? void 0 : value.extradata) === null || _0 === void 0 ? void 0 : _0.locationname : this.locationNameSelected,\n              system: this.systemSelected,\n              systemname: this.systemNameSelected\n            };\n            this.thresholdChart.interface = this.extraData;\n            this.packageChart.interface = this.extraData;\n            this.bipChart.interface = this.extraData;\n            chartid = \"Interface_chart\";\n            this.params = {\n              tenant: \"0\",\n              startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n              endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n              region: ((_1 = value === null || value === void 0 ? void 0 : value.extradata) === null || _1 === void 0 ? void 0 : _1.region) ? (_2 = value === null || value === void 0 ? void 0 : value.extradata) === null || _2 === void 0 ? void 0 : _2.region : this.regionSelected ? this.regionSelected : this.regionSelected == \"All\" || value.type == \"Location\" ? \"\" : this.regionSelected,\n              location: ((_3 = value === null || value === void 0 ? void 0 : value.extradata) === null || _3 === void 0 ? void 0 : _3.location) ? (_4 = value === null || value === void 0 ? void 0 : value.extradata) === null || _4 === void 0 ? void 0 : _4.location : this.locationSelected ? this.locationSelected : this.locationSelected == \"All\" ? \"\" : this.locationSelected,\n              system: value.category ? value.category : this.systemSelected ? this.systemSelected : this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n              groupBy: groupBy\n            };\n            if (val) {\n              this.LoadbySystem(\"UtilizationChart\");\n            }\n            this.loading = true;\n            this.params[\"granularity\"] = this.healthService.getGranularity(this.params.startTime, this.params.endTime);\n            let query = \"\";\n            for (var key in this.params) {\n              if (this.params[key] == undefined || this.params[key] == \"undefined\" || this.params[key] == \"\") {\n                continue;\n              }\n              if (query != \"\") {\n                query += \"&\";\n              }\n              query += key + \"=\" + encodeURIComponent(this.params[key]);\n            }\n            let query1 = query + \"&countBy=interface\";\n            query = query + '&interfaceCategory=dsl';\n            let requestEndpoints = [`${environment.API_BASE_URL}health/reports/utilization/thresholdexceededcount?${query}`, `${environment.API_BASE_URL}health/reports/dsl/lowrate?${query1}`, `${environment.API_BASE_URL}health/reports/dsl/lowsnr?${query1}`];\n            const requests = [];\n            requestEndpoints.forEach(endpoint => {\n              const req = this.CcochartService.callRestApi(endpoint).pipe(map(res => {\n                return res;\n              }), catchError(error => {\n                return of(error);\n              }));\n              requests.push(req);\n            });\n            this.combineLatest = combineLatest(requests);\n            this.makeParallelRequest(this.extraData, this.chartDownType);\n            return;\n          }\n          if (this.locationSelected && this.locationSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Location\" || (data === null || data === void 0 ? void 0 : data.location)) {\n            this.chartTitleDsl = \"Threshold By System\";\n            this.chartTitleAttainable = 'Not At Attainable Rate By System';\n            this.chartTitleSnr = 'Not At Target SNR By System';\n            this.chartType = \"System\";\n            this.chartSubTitle = 'Health_System_Sub';\n            this.chartSubTitleforSys = 'PON_BIP_System';\n            this.tableType = \"System\";\n            this.tableName = \"Systems\";\n            this.chartDownType = \"system\";\n            this.chartId = 'systemId';\n            this.searchType = 'Search systems';\n            let value = val ? {\n              type: \"Location\",\n              charttype: \"ponchart\",\n              category: this.locationSelected,\n              name: this.locationName,\n              extradata: this.thresholdChart.location\n            } : chart;\n            let groupBy, chartid;\n            groupBy = \"system\";\n            chartid = \"System_chart\";\n            this.regionSelected = ((_5 = value.extradata) === null || _5 === void 0 ? void 0 : _5.region) ? (_6 = value.extradata) === null || _6 === void 0 ? void 0 : _6.region : this.regionSelected;\n            this.locationSelected = value.category ? value.category : data.locationId;\n            this.locationNameSelected = value.name ? value.name : data.location;\n            if (!val) this.getSystemValue(value);\n            this.extraData = {\n              region: this.regionSelected,\n              regionname: ((_7 = value.extradata) === null || _7 === void 0 ? void 0 : _7.regionname) ? (_8 = value.extradata) === null || _8 === void 0 ? void 0 : _8.regionname : this.regionNameSelected,\n              location: this.locationSelected,\n              locationname: value.name ? value.name : data.location\n            };\n            this.thresholdChart.system = this.extraData;\n            this.packageChart.system = this.extraData;\n            this.bipChart.system = this.extraData;\n            this.params = {\n              tenant: \"0\",\n              startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n              endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n              region: ((_9 = value === null || value === void 0 ? void 0 : value.extradata) === null || _9 === void 0 ? void 0 : _9.region) ? (_10 = value === null || value === void 0 ? void 0 : value.extradata) === null || _10 === void 0 ? void 0 : _10.region : this.regionSelected ? this.regionSelected : this.regionSelected == \"All\" || value.type == \"Location\" ? \"\" : this.regionSelected,\n              location: value.category ? value.category : this.locationSelected ? this.locationSelected : this.locationSelected == \"All\" ? \"\" : this.locationSelected,\n              groupBy: groupBy\n            };\n            this.params[\"granularity\"] = this.healthService.getGranularity(this.params.startTime, this.params.endTime);\n            let query = \"\";\n            for (var key in this.params) {\n              if (this.params[key] == undefined || this.params[key] == \"undefined\" || this.params[key] == \"\") {\n                continue;\n              }\n              if (query != \"\") {\n                query += \"&\";\n              }\n              query += key + \"=\" + encodeURIComponent(this.params[key]);\n            }\n            let query1 = query + \"&countBy=interface\";\n            query = query + '&interfaceCategory=dsl';\n            let requestEndpoints = [`${environment.API_BASE_URL}health/reports/utilization/thresholdexceededcount?${query}`, `${environment.API_BASE_URL}health/reports/dsl/lowrate?${query1}`, `${environment.API_BASE_URL}health/reports/dsl/lowsnr?${query1}`];\n            const requests = [];\n            requestEndpoints.forEach(endpoint => {\n              const req = this.CcochartService.callRestApi(endpoint).pipe(map(res => {\n                return res;\n              }), catchError(error => {\n                return of(error);\n              }));\n              requests.push(req);\n            });\n            this.loading = true;\n            this.combineLatest = combineLatest(requests);\n            this.makeParallelRequest(this.extraData, this.chartDownType);\n            return;\n          }\n          if (this.regionSelected && this.regionSelected != \"All\" || (chart === null || chart === void 0 ? void 0 : chart.type) == \"Region\" || (data === null || data === void 0 ? void 0 : data.region)) {\n            let groupBy, chartid;\n            this.chartTitleDsl = \"Threshold By Location\";\n            this.chartTitleAttainable = 'Not At Attainable Rate By Location';\n            this.chartTitleSnr = 'Not At Target SNR By Location';\n            this.chartType = \"Location\";\n            this.chartSubTitle = 'Select a location to view systems in that location';\n            this.chartDownType = 'location';\n            this.tableType = \"Location\";\n            this.tableName = \"Locations\";\n            this.chartId = 'locationId';\n            this.searchType = 'Search locations';\n            let value = val ? {\n              type: \"Region\",\n              charttype: \"ponchart\",\n              category: this.regionSelected,\n              name: this.regionName\n            } : chart;\n            groupBy = \"location\";\n            chartid = \"Location_chart\";\n            this.extraData = {\n              region: value.category ? value.category : data === null || data === void 0 ? void 0 : data.regionId,\n              regionname: value.name ? value.name : data.region\n            };\n            this.regionSelected = value.category ? value.category : data.regionId;\n            this.regionNameSelected = value.name ? value.name : data.region;\n            if (!val || this.viaHomePage) this.getLocationValue(value);\n            this.thresholdChart.location = this.extraData;\n            this.packageChart.location = this.extraData;\n            this.bipChart.location = this.extraData;\n            this.params = {\n              tenant: \"0\",\n              startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n              endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n              region: value.category ? value.category : data.regionId ? data.regionId : this.regionSelected == \"All\" || value.type == \"Location\" ? \"\" : this.regionSelected,\n              groupBy: groupBy\n            };\n          }\n          this.params[\"granularity\"] = this.healthService.getGranularity(this.params.startTime, this.params.endTime);\n          let query = \"\";\n          for (var key in this.params) {\n            if (this.params[key] == undefined || this.params[key] == \"undefined\" || this.params[key] == \"\") {\n              continue;\n            }\n            if (query != \"\") {\n              query += \"&\";\n            }\n            query += key + \"=\" + encodeURIComponent(this.params[key]);\n          }\n          let query1 = query + \"&countBy=interface\";\n          query = query + '&interfaceCategory=dsl';\n          this.loading = true;\n          let requestEndpoints = [`${environment.API_BASE_URL}health/reports/utilization/thresholdexceededcount?${query}`, `${environment.API_BASE_URL}health/reports/dsl/lowrate?${query1}`, `${environment.API_BASE_URL}health/reports/dsl/lowsnr?${query1}`];\n          const requests = [];\n          requestEndpoints.forEach(endpoint => {\n            const req = this.CcochartService.callRestApi(endpoint).pipe(map(res => {\n              return res;\n            }), catchError(error => {\n              return of(error);\n            }));\n            requests.push(req);\n          });\n          this.combineLatest = combineLatest(requests);\n          this.makeParallelRequest(this.extraData, this.chartDownType);\n          return;\n        }\n        this.chartType = \"Region\";\n        this.chartDownType = 'region';\n        this.tableType = \"Region\";\n        this.tableName = \"Regions\";\n        this.chartId = \"regionId\";\n        this.chartTitleDsl = \"Threshold By Region\";\n        this.chartSubTitle = 'Select a region to view locations in that region';\n        this.chartTitleAttainable = 'Not At Attainable Rate By Region';\n        this.chartTitleSnr = 'Not At Target SNR By Region';\n        this.searchType = 'Search regions';\n        let params = {\n          tenant: \"0\",\n          startTime: this.last24hours ? `${Math.ceil((this.dateUtilsService.getStartUtcTimeByDaysseconds(0) - 86400000) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n          endTime: this.last24hours ? `${Math.ceil(this.dateUtilsService.getStartUtcTimeByDaysseconds(0) / 1000)}` : `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n          groupBy: \"region\"\n        };\n        this.chartId = \"regionId\";\n        params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n        let query = \"\";\n        for (var key in params) {\n          if (params[key] == undefined || params[key] == \"undefined\" || params[key] == \"\") {\n            continue;\n          }\n          if (query != \"\") {\n            query += \"&\";\n          }\n          query += key + \"=\" + encodeURIComponent(params[key]);\n        }\n        this.loading = true;\n        this.errorMsg = \"\";\n        this.bipErrormsg = \"\";\n        this.packetDroppedErrormsg = \"\";\n        let query1 = query + \"&countBy=interface\";\n        query = query + '&interfaceCategory=dsl';\n        let requestEndpoints = [`${environment.API_BASE_URL}health/reports/utilization/thresholdexceededcount?${query}`, `${environment.API_BASE_URL}health/reports/dsl/lowrate?${query1}`, `${environment.API_BASE_URL}health/reports/dsl/lowsnr?${query1}`];\n        const requests = [];\n        requestEndpoints.forEach(endpoint => {\n          const req = this.CcochartService.callRestApi(endpoint).pipe(map(res => {\n            return res;\n          }), catchError(error => {\n            return of(error);\n          }));\n          requests.push(req);\n        });\n        this.combineLatest = combineLatest(requests);\n        this.makeParallelRequest(false, this.chartDownType);\n      }\n    }\n    makeParallelRequest(extradata, type) {\n      this.parallelReqSubscribtion = this.combineLatest.subscribe(response => {\n        if (response[0] && response[0].error) {\n          if (response[0].status == 401) {\n            this.errorMsg = this.language['Access Denied'];\n          } else {\n            this.errorMsg = this.commonOrgService.pageErrorHandle(response[0]);\n          }\n          this.ponChartbyLocation = [];\n        } else {\n          response[0] = this.totalCoutSort(response[0], \"usUtilExcCnt\", \"dsUtilExcCnt\", this.chartType);\n          this.ponChartbyLocation = response[0];\n          Highcharts.chart('PortCourtChart', this.portCountChartOptionsn(Object.assign([], this.ponChartbyLocation.map(element => Object.assign({}, element))) || [], this.chartType, false, extradata));\n          this.GetSubTitle(Object.assign([], this.ponChartbyLocation.map(element => Object.assign({}, element))) || [], this.chartType, false, extradata);\n        }\n        if (response[1] && response[1].error) {\n          if (response[1].status == 401) {\n            this.packetDroppedErrormsg = this.language['Access Denied'];\n          } else {\n            this.packetDroppedErrormsg = this.commonOrgService.pageErrorHandle(response[1]);\n          }\n          this.packetDroppedData = [];\n        } else {\n          response[1] = this.totalCoutSort(response[1], \"usCurRateBelowThresCnt\", \"dsCurRateBelowThresCnt\", this.chartType);\n          this.packetDroppedData = response[1];\n          Highcharts.chart('PacketDroppedChart', this.notAtAttainableChartOptionsn(Object.assign([], this.packetDroppedData.map(element => Object.assign({}, element))) || [], this.chartType, false, extradata));\n        }\n        this.GetSubTitle(Object.assign([], this.packetDroppedData.map(element => Object.assign({}, element))) || [], this.chartType, false, extradata);\n        if (response[2] && response[2].error) {\n          if (response[2].status == 401) {\n            this.bipErrormsg = this.language['Access Denied'];\n          } else {\n            this.bipErrormsg = this.commonOrgService.pageErrorHandle(response[2]);\n          }\n          this.bipErrorRateData = [];\n        } else {\n          response[2] = this.totalCoutSort(response[2], \"usSnrBelowThresCnt\", \"dsSnrBelowThresCnt\", this.chartType);\n          this.bipErrorRateData = response[2];\n          Highcharts.chart('BIPErrorRateChart', this.notAtTargetSNRChartOptionsn(Object.assign([], this.bipErrorRateData.map(element => Object.assign({}, element))) || [], this.chartType, false, extradata));\n        }\n        this.GetSubTitle(Object.assign([], this.bipErrorRateData.map(element => Object.assign({}, element))) || [], this.chartType, false, extradata);\n        this.getTableData([Object.assign([], this.ponChartbyLocation.map(element => Object.assign({}, element))), Object.assign([], this.packetDroppedData.map(element => Object.assign({}, element))), Object.assign([], this.bipErrorRateData.map(element => Object.assign({}, element)))], this.chartId, this.chartType);\n        this.loading = false;\n      }, err => {\n        this.loading = false;\n        this.commonOrgService.pageScrollTop();\n      }, () => {\n        this.loading = false;\n      });\n    }\n    LoadbySystem(charttype) {\n      this.showUtilization = true;\n      let params = {\n        tenant: \"0\",\n        startTime: `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n        endTime: `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n        system: this.systemSelected == \"All\" ? \"\" : this.systemSelected\n      };\n      params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n      let query = \"\";\n      for (var key in params) {\n        if (params[key] == undefined || params[key] == \"undefined\" || params[key] == \"\") {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(params[key]);\n      }\n    }\n    GetSubTitle(data, type, fullscreen, extradata) {\n      var groupby, categoryid;\n      if (type == 'Region') {\n        groupby = 'region';\n      } else if (type == 'Location') {\n        groupby = 'location', categoryid = 'locationId';\n        this.subTitle = `${this.language['region']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.regionname}`;\n      } else if (type == 'System') {\n        groupby = 'system', categoryid = 'systemId';\n        this.subTitle = `${this.language['region']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.regionname},\n       ${this.language['location']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.locationname} `;\n      } else if (type == 'Interface') {\n        groupby = 'interface';\n        categoryid = 'interface';\n        this.subTitle = `${this.language['region']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.regionname},\n       ${this.language['location']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.locationname}, ${this.language['System']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.systemname} `;\n      } else if (type == 'Ont') {\n        groupby = 'ont', categoryid = 'ontId';\n        this.subTitle = `${this.language['region']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.regionname},\n       ${this.language['location']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.locationname}, ${this.language['System']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.systemname}, ${this.language['interface']}: ${extradata === null || extradata === void 0 ? void 0 : extradata.interfacename}`;\n      }\n    }\n    ngOnDestroy() {\n      if (this.dtSub) this.dtSub.unsubscribe();\n      if (this.dtSub1) this.dtSub1.unsubscribe();\n      if (this.dtSub2) this.dtSub2.unsubscribe();\n      if (this.languageSubject) this.languageSubject.unsubscribe();\n      if (this.LocationSubject) this.LocationSubject.unsubscribe();\n      if (this.regionsSubject) this.regionsSubject.unsubscribe();\n      if (this.systemSubject) this.systemSubject.unsubscribe();\n      if (this.utilization) this.utilization.unsubscribe();\n      if (this.ponutilizationchart) this.ponutilizationchart.unsubscribe();\n      if (this.ponpackage) this.ponpackage.unsubscribe();\n      if (this.ponbiperror) this.ponbiperror.unsubscribe();\n      if (this.toggleSubscription) this.toggleSubscription.unsubscribe();\n      if (this.parallelReqSubscribtion) this.parallelReqSubscribtion.unsubscribe();\n    }\n    openModalInfo() {\n      this.modalRef = this.dialogService.open(this.showInfoModal, {\n        size: 'lg',\n        centered: true,\n        windowClass: 'custom-modal'\n      });\n    }\n    validateStartEndDates() {\n      let currentdate = new Date();\n      if (!this.fromDate) {\n        this.modalInfo = this.language['Time range not valid, end time should be later than start time.'];\n        return false;\n      }\n      if (this.fromDate > currentdate || this.toDate > currentdate) {\n        this.modalInfo = 'Time range not valid, End Date and Start Date should not above current Date';\n        return false;\n      }\n      if (this.fromDate && this.toDate) {\n        if (this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate) > this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)) {\n          this.modalInfo = 'Time range not valid, end time should be later than start time.';\n          return false;\n        } else if (this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate) == this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)) {\n          this.modalInfo = 'Time range not valid, Start Date and End Date should not be same .';\n          return false;\n        }\n        return true;\n      } else {\n        return true;\n      }\n    }\n    loadMultipleChart(param, paramsname, charttype, chartname, value) {\n      this.count = this.count + 1;\n      let IsDuplicate = false;\n      if (this.loadedMultipleTimeseriesChart.length) {\n        this.loadedMultipleTimeseriesChart.forEach(element => {\n          if (element.chartname == chartname) {\n            IsDuplicate = true;\n            var elmnt = document.getElementById(chartname);\n            if (elmnt) elmnt.scrollIntoView({\n              behavior: 'smooth'\n            });\n          }\n        });\n      }\n      if (IsDuplicate) return;\n      setTimeout(() => {\n        this.loadedMultipleTimeseriesChart.push({\n          params: param,\n          paramname: paramsname,\n          charttype: charttype,\n          chartname: chartname,\n          divid: chartname + this.count,\n          page: 'dsl',\n          last24hours: this.last24hours,\n          title: value,\n          system: this.systemNameSelected ? this.systemNameSelected : this.systemName\n        });\n        this.loadedMultipleTimeseriesChart = [...this.loadedMultipleTimeseriesChart];\n      }, 100);\n    }\n    totalCoutSort(data, key1, key2, charttype = 'Region') {\n      let a = [];\n      let b = [];\n      let name = charttype.toLowerCase();\n      if (name == \"interface\") data.sort((a, b) => (a[name] || \"\").toString().localeCompare((b[name] || \"\").toString(), 'en', {\n        numeric: true\n      }));else {\n        data.sort((a, b) => (a[name] || \"\").toString().localeCompare((b[name] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n      }\n      data.forEach(obj => {\n        if (obj[key1] || obj[key2] || obj[key1] == 0 || obj[key2] == 0) {\n          a.push(obj);\n        } else b.push(obj);\n      });\n      a.sort(function (a, b) {\n        let a1 = (a[key1] ? a[key1] : null) + (a[key2] ? a[key2] : null);\n        let b1 = (b[key1] ? b[key1] : null) + (b[key2] ? b[key2] : null);\n        return b1 - a1;\n      });\n      data = [...a, ...b];\n      return data;\n    }\n    singlecountsort(data, key1, charttype = 'Region') {\n      let a = [];\n      let b = [];\n      let name = charttype.toLowerCase();\n      if (name == \"interface\") data.sort((a, b) => (a[name] || \"\").toString().localeCompare((b[name] || \"\").toString(), 'en', {\n        numeric: true\n      }));else {\n        data.sort((a, b) => (a[name] || \"\").toString().localeCompare((b[name] || \"\").toString(), 'en', {\n          numeric: false\n        }));\n      }\n      data.forEach(obj => {\n        if (obj[key1] || obj[key1] == 0) {\n          a.push(obj);\n        } else b.push(obj);\n      });\n      a.sort(function (a, b) {\n        return (b[key1] ? b[key1] : null) - (a[key1] ? a[key1] : null);\n      });\n      data = [...a, ...b];\n      return data;\n    }\n    portCountChartOptionsn(data, type, fullscreen, extradata) {\n      const self = this;\n      let category, categoryid, subTitle;\n      let maxvalue = 0;\n      var seriesData = [];\n      var seriesData1 = [];\n      var xAxisCategories = [];\n      var groupby;\n      if (type == 'Region') {\n        groupby = 'region', categoryid = 'regionId';\n      } else if (type == 'Location') {\n        groupby = 'location', categoryid = 'locationId';\n      } else if (type == 'System') {\n        groupby = 'system', categoryid = 'systemId';\n      } else if (type == 'Interface') {\n        groupby = 'interface';\n        categoryid = 'interface';\n      }\n      if (data.length) {\n        data = this.healthService.duplicateDataHandle(data, groupby, categoryid);\n        data.forEach(element => {\n          xAxisCategories.push(element[groupby]);\n          seriesData1.push({\n            y: element.dsUtilExcCnt ? element.dsUtilExcCnt : 0,\n            color: this.healthService.chart_color(element, \"dsUtilExcCnt\", \"second\")\n          });\n          seriesData.push({\n            y: element.usUtilExcCnt ? element.usUtilExcCnt : 0,\n            color: this.healthService.chart_color(element, \"usUtilExcCnt\", \"first\")\n          });\n        });\n        maxvalue = xAxisCategories.length > 8 ? 10 : xAxisCategories.length;\n      }\n      return {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'column'\n        },\n        legend: {\n          enabled: true\n        },\n        exporting: {\n          enabled: false\n        },\n        title: {\n          text: type,\n          style: {\n            display: 'none'\n          }\n        },\n        subtitle: {\n          text: subTitle\n        },\n        xAxis: {\n          categories: xAxisCategories,\n          min: 0,\n          max: maxvalue <= 7 ? maxvalue - 1 : 7,\n          scrollbar: {\n            barBackgroundColor: '#CCCCCC',\n            barBorderColor: '#ccc',\n            rifleColor: 'transparent',\n            barBorderRadius: 3,\n            trackBorderRadius: 3,\n            buttonArrowColor: 'transparent',\n            trackBackgroundColor: '#EBEAEF',\n            height: 6,\n            enabled: maxvalue == 10 ? true : false\n          },\n          tickLength: 0\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language['DSL Interface Count']\n          },\n          labels: {\n            formatter: function () {\n              return self.ShortnumberPipe.transform(this.value, false, 0);\n            }\n          },\n          gridLineWidth: 1\n        },\n        tooltip: {\n          useHTML: true,\n          borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          formatter: function () {\n            var s = \"\",\n              h = \"\",\n              f = \"\",\n              info = \" \";\n            f = \"</table>\";\n            this.points.forEach(point => {\n              if (point.color == environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].first || point.color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].first || point.color == environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].second || point.color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].second) {\n                info = \" (Deleted)\";\n              }\n              h = `<span style = \"font-size:10px\"> ${point.key} ${info}  </span><table>`;\n              s += `<tr><td style='color:${self.healthService.toolip_color(point.color)};padding:0'> ${point.series.name} : </td>\n          <td style='padding:0;margin-left:10px'>&nbsp ${self.ShortnumberPipe.transform(point.y)} </b></td></tr>`;\n            });\n            let g = s + f;\n            return h + g;\n          },\n          shared: true\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        plotOptions: {\n          bar: {\n            dataLabels: {\n              enabled: false\n            }\n          },\n          series: {\n            minPointLength: 3,\n            point: {\n              events: {\n                mouseOver: function (event) {\n                  data.forEach(element => {\n                    let Deleted = false;\n                    if (element[groupby] == this.category) {\n                      Deleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (!fullscreen && !Deleted) {\n                        this.graphic.attr({\n                          cursor: 'pointer'\n                        });\n                      }\n                    }\n                  });\n                },\n                click: function (event) {\n                  if (fullscreen) return;\n                  let isDeleted = false;\n                  data.forEach(element => {\n                    if (element[groupby] == event.point.category) {\n                      category = element[categoryid];\n                      isDeleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (isDeleted) {\n                        return;\n                      }\n                    }\n                  });\n                  let data1 = {\n                    type: this.series.chart.options.title.text,\n                    charttype: \"ponchart\",\n                    category: category,\n                    name: event.point.category,\n                    extradata: event === null || event === void 0 ? void 0 : event.point.series.options.extradata\n                  };\n                  if (!isDeleted) {\n                    self.applyfilter(false, data1);\n                  }\n                }\n              }\n            }\n          }\n        },\n        series: [{\n          name: this.language[\"Upstream\"],\n          data: seriesData || [],\n          color: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          extradata: extradata,\n          tooltip: {\n            borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first\n          }\n        }, {\n          name: this.language[\"Downstream\"],\n          data: seriesData1 || [],\n          color: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].second,\n          extradata: extradata,\n          tooltip: {\n            borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].second\n          }\n        }]\n      };\n    }\n    notAtAttainableChartOptionsn(data, type, fullscreen, extradata) {\n      const self = this;\n      let category, categoryid, subTitle;\n      let maxvalue = 0;\n      var seriesData = [];\n      var seriesData1 = [];\n      var xAxisCategories = [];\n      var groupby;\n      if (type == 'Region') {\n        groupby = 'region', categoryid = 'regionId';\n      } else if (type == 'Location') {\n        groupby = 'location', categoryid = 'locationId';\n      } else if (type == 'System') {\n        groupby = 'system', categoryid = 'systemId';\n      } else if (type == 'Interface') {\n        groupby = 'interface';\n        categoryid = 'interface';\n      } else if (type == 'Ont') {\n        groupby = 'ont', categoryid = 'ontId';\n      }\n      if (data.length) {\n        data = this.healthService.duplicateDataHandle(data, groupby, categoryid);\n        data.forEach(element => {\n          xAxisCategories.push(element[groupby]);\n          seriesData.push({\n            y: element.usCurRateBelowThresCnt ? element.usCurRateBelowThresCnt : 0,\n            color: this.healthService.chart_color(element, \"usCurRateBelowThresCnt\", \"first\")\n          });\n          seriesData1.push({\n            y: element.dsCurRateBelowThresCnt ? element.dsCurRateBelowThresCnt : 0,\n            color: this.healthService.chart_color(element, \"dsCurRateBelowThresCnt\", \"second\")\n          });\n        });\n        maxvalue = xAxisCategories.length > 8 ? 10 : xAxisCategories.length;\n      }\n      return {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'column'\n        },\n        subtitle: {\n          text: subTitle\n        },\n        exporting: {\n          enabled: false\n        },\n        legend: {\n          enabled: true\n        },\n        title: {\n          text: type,\n          style: {\n            display: 'none'\n          }\n        },\n        xAxis: {\n          categories: xAxisCategories,\n          min: 0,\n          max: maxvalue <= 7 ? maxvalue - 1 : 7,\n          scrollbar: {\n            barBackgroundColor: '#CCCCCC',\n            barBorderColor: '#ccc',\n            rifleColor: 'transparent',\n            barBorderRadius: 3,\n            trackBorderRadius: 3,\n            buttonArrowColor: 'transparent',\n            trackBackgroundColor: '#EBEAEF',\n            height: 6,\n            enabled: maxvalue == 10 ? true : false\n          },\n          tickLength: 0\n        },\n        yAxis: {\n          allowDecimals: false,\n          title: {\n            text: this.language['DSL Interface Count']\n          },\n          labels: {\n            formatter: function () {\n              return self.ShortnumberPipe.transform(this.value, false, 0);\n            }\n          },\n          gridLineWidth: 1,\n          min: 0,\n          softMax: 1,\n          minRange: 0\n        },\n        tooltip: {\n          useHTML: true,\n          formatter: function () {\n            var s = \"\",\n              h = \"\",\n              f = \"\",\n              info = \" \";\n            f = \"</table>\";\n            this.points.forEach(point => {\n              if (point.color == environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].first || point.color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].first || point.color == environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].second || point.color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].second) {\n                info = \" (Deleted)\";\n              }\n              h = `<span style = \"font-size:10px\"> ${point.key} ${info}  </span><table>`;\n              s += `<tr><td style='color:${self.healthService.toolip_color(point.color)};padding:0'> ${point.series.name} : </td>\n        <td style='padding:0;margin-left:10px'>&nbsp ${self.ShortnumberPipe.transform(point.y)} </b></td></tr>`;\n            });\n            let g = s + f;\n            return h + g;\n          },\n          shared: true\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        plotOptions: {\n          bar: {\n            dataLabels: {\n              enabled: false\n            }\n          },\n          series: {\n            minPointLength: 3,\n            point: {\n              events: {\n                mouseOver: function (event) {\n                  data.forEach(element => {\n                    let Deleted = false;\n                    if (element[groupby] == this.category) {\n                      Deleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (!fullscreen && !Deleted) {\n                        this.graphic.attr({\n                          cursor: 'pointer'\n                        });\n                      }\n                    }\n                  });\n                },\n                click: function (event) {\n                  if (fullscreen) return;\n                  let isDeleted = false;\n                  data.forEach(element => {\n                    if (element[groupby] == event.point.category) {\n                      category = element[categoryid];\n                      isDeleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (isDeleted) {\n                        return;\n                      }\n                    }\n                  });\n                  let data1 = {\n                    type: this.series.chart.options.title.text,\n                    charttype: \"packagechart\",\n                    category: category,\n                    name: event.point.category,\n                    extradata: event === null || event === void 0 ? void 0 : event.point.series.options.extradata\n                  };\n                  if (!isDeleted) {\n                    self.applyfilter(false, data1);\n                  }\n                }\n              }\n            }\n          }\n        },\n        series: [{\n          name: this.language[\"Upstream\"],\n          data: seriesData || [],\n          color: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          extradata: extradata,\n          tooltip: {\n            borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first\n          }\n        }, {\n          name: this.language[\"Downstream\"],\n          data: seriesData1 || [],\n          color: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].second,\n          extradata: extradata,\n          tooltip: {\n            borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].second\n          }\n        }]\n      };\n    }\n    notAtTargetSNRChartOptionsn(data, type, fullscreen, extradata) {\n      const self = this;\n      let category, categoryid, subTitle;\n      let maxvalue = 0;\n      var seriesData = [];\n      var seriesData1 = [];\n      var xAxisCategories = [];\n      var groupby;\n      if (type == 'Region') {\n        groupby = 'region', categoryid = 'regionId';\n      } else if (type == 'Location') {\n        groupby = 'location', categoryid = 'locationId';\n      } else if (type == 'System') {\n        groupby = 'system', categoryid = 'systemId';\n      } else if (type == 'Interface') {\n        groupby = 'interface';\n        categoryid = 'interface';\n      }\n      if (data.length) {\n        data = this.healthService.duplicateDataHandle(data, groupby, categoryid);\n        data.forEach(element => {\n          xAxisCategories.push(element[groupby]);\n          seriesData1.push({\n            y: element.usSnrBelowThresCnt ? element.usSnrBelowThresCnt : 0,\n            color: this.healthService.chart_color(element, \"usSnrBelowThresCnt\", \"first\")\n          });\n          seriesData.push({\n            y: element.dsSnrBelowThresCnt ? element.dsSnrBelowThresCnt : 0,\n            color: this.healthService.chart_color(element, \"dsSnrBelowThresCnt\", \"second\")\n          });\n        });\n        maxvalue = xAxisCategories.length > 8 ? 10 : xAxisCategories.length;\n      }\n      return {\n        credits: {\n          enabled: false\n        },\n        chart: {\n          type: 'column'\n        },\n        legend: {\n          enabled: true\n        },\n        exporting: {\n          enabled: false\n        },\n        title: {\n          text: type,\n          style: {\n            display: 'none'\n          }\n        },\n        subtitle: {\n          text: subTitle\n        },\n        xAxis: {\n          categories: xAxisCategories,\n          min: 0,\n          max: maxvalue <= 7 ? maxvalue - 1 : 7,\n          scrollbar: {\n            barBackgroundColor: '#CCCCCC',\n            barBorderColor: '#ccc',\n            rifleColor: 'transparent',\n            barBorderRadius: 3,\n            trackBorderRadius: 3,\n            buttonArrowColor: 'transparent',\n            trackBackgroundColor: '#EBEAEF',\n            height: 6,\n            enabled: maxvalue == 10 ? true : false\n          },\n          tickLength: 0\n        },\n        yAxis: {\n          min: 0,\n          softMax: 1,\n          allowDecimals: false,\n          title: {\n            text: this.language['DSL Interface Count']\n          },\n          labels: {\n            formatter: function () {\n              return self.ShortnumberPipe.transform(this.value, false, 0);\n            }\n          },\n          gridLineWidth: 1\n        },\n        tooltip: {\n          useHTML: true,\n          borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          formatter: function () {\n            var s = \"\",\n              h = \"\",\n              f = \"\",\n              info = \" \";\n            f = \"</table>\";\n            this.points.forEach(point => {\n              if (point.color == environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].first || point.color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].first || point.color == environment.OPERATIONS.HEALTH['HEALTH_DELETED_BAR_CHART_COLORS'].second || point.color == environment.OPERATIONS.HEALTH['DELETED_TRANSPARENT'].second) {\n                info = \" (Deleted)\";\n              }\n              h = `<span style = \"font-size:10px\"> ${point.key} ${info}  </span><table>`;\n              s += `<tr><td style='color:${self.healthService.toolip_color(point.color)};padding:0'> ${point.series.name} : </td>\n          <td style='padding:0;margin-left:10px'>&nbsp ${self.ShortnumberPipe.transform(point.y)} </b></td></tr>`;\n            });\n            let g = s + f;\n            return h + g;\n          },\n          shared: true\n        },\n        lang: {\n          noData: this.language[\"No Data Available\"]\n        },\n        plotOptions: {\n          bar: {\n            dataLabels: {\n              enabled: false\n            }\n          },\n          series: {\n            minPointLength: 3,\n            point: {\n              events: {\n                mouseOver: function (event) {\n                  data.forEach(element => {\n                    let Deleted = false;\n                    if (element[groupby] == this.category) {\n                      Deleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (!fullscreen && !Deleted) {\n                        this.graphic.attr({\n                          cursor: 'pointer'\n                        });\n                      }\n                    }\n                  });\n                },\n                click: function (event) {\n                  if (fullscreen) return;\n                  let isDeleted = false;\n                  data.forEach(element => {\n                    if (element[groupby] == event.point.category) {\n                      category = element[categoryid];\n                      isDeleted = element === null || element === void 0 ? void 0 : element.deleted;\n                      if (isDeleted) {\n                        return;\n                      }\n                    }\n                  });\n                  let data1 = {\n                    type: this.series.chart.options.title.text,\n                    charttype: \"ponchart\",\n                    category: category,\n                    name: event.point.category,\n                    extradata: event === null || event === void 0 ? void 0 : event.point.series.options.extradata\n                  };\n                  if (!isDeleted) {\n                    self.applyfilter(false, data1);\n                  }\n                }\n              }\n            }\n          }\n        },\n        series: [{\n          name: this.language['Upstream'],\n          data: seriesData1 || [],\n          color: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first,\n          extradata: extradata,\n          tooltip: {\n            borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].first\n          }\n        }, {\n          name: this.language['Downstream'],\n          data: seriesData || [],\n          color: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].second,\n          extradata: extradata,\n          tooltip: {\n            borderColor: environment.OPERATIONS.HEALTH['HEALTH_BAR_CHART_COLORS'].second\n          }\n        }]\n      };\n    }\n    clearFilter() {\n      if (this.loading) {\n        return;\n      }\n      this.subTitle = '';\n      this.searchText = '';\n      let date = new Date();\n      this.fromDate = new Date(date.getTime() - 1 * 24 * 60 * 60 * 1000);\n      this.toDate = this.toDate = new Date();\n      this.last24hours = false;\n      this.systemDataArray = [\"All\"];\n      this.locationDataArray = [\"All\"];\n      this.interfaceDataArray = [\"All\"];\n      this.locationSelected = \"All\";\n      this.regionSelected = \"All\";\n      this.systemSelected = \"All\";\n      this.interfaceSelected = \"All\";\n      this.regionName = null;\n      this.locationName = null;\n      this.systemName = null;\n      this.groupBy = null;\n      this.chartId = \"regionId\";\n      this.loadedMultipleTimeseriesChart = [];\n      if (this.fullScreen == true) {\n        this.fullscreen_Filter = true;\n        let chartname;\n        if (this.fullScreenChart == \"ponchart\") {\n          chartname = 'Threshold By Region';\n        } else if (this.fullScreenChart == \"bipchart\") {\n          chartname = \"Not At Target SNR By Region\";\n        } else if (this.fullScreenChart == \"packagechart\") {\n          chartname = 'Not At Attainable Rate By Region';\n        }\n        this.fullScreenExpandFunction(chartname, 'Region', this.fullScreenChart, '', this.chartId);\n        return;\n      } else {\n        this.applyfilter(true);\n        this.chartType = \"Region\";\n        this.chartDownType = 'region';\n        this.tableType = \"Region\";\n        this.tableName = \"Regions\";\n        this.chartSubTitle = 'Select a region to view locations in that region';\n        this.chartId = \"regionId\";\n        this.chartTitleDsl = \"Threshold By Region\";\n        this.chartTitleAttainable = 'Not At Attainable Rate By Region';\n        this.chartTitleSnr = 'Not At Target SNR By Region';\n        this.searchType = 'Search regions';\n      }\n    }\n    heading(chartName, type, idName, title) {\n      let region, location, system, interfaces, heading;\n      let pipe = new DatePipe('en-US');\n      if (chartName.includes(\"Threshold\")) {\n        heading = this.extraData;\n      } else if (chartName.includes(\"Not At Attainable\")) {\n        heading = this.packageChart[type];\n      } else if (chartName.includes(\"Not At Target\")) {\n        heading = this.bipChart[type];\n      }\n      if (heading) {\n        region = heading.regionname ? heading.regionname : this.regionSelected ? this.regionSelected : 'All';\n        location = heading.locationname ? heading.locationname : this.locationSelected;\n        system = heading.systemname ? heading.systemname : this.systemSelected;\n        interfaces = heading.interfacename ? heading.interfacename : this.interfaceSelected;\n      }\n      let extraData;\n      if (type == 'region') extraData = `${this.language[title] || title} \\r\\n${this.language.region} : All \\r\\n${this.language['START_DATE']} : ${pipe.transform(this.fromDate, 'MM/dd/yyyy')} \\r\\n${this.language['END_DATE']} : ${pipe.transform(this.toDate, 'MM/dd/yyyy')} \\r\\n\\r\\n`;else if (type == 'location') extraData = `${this.language[title] || title} \\r\\n${this.language.region} : ${region} \\r\\n${this.language['START_DATE']} : ${pipe.transform(this.fromDate, 'MM/dd/yyyy')}\\r\\n${this.language['END_DATE']} : ${pipe.transform(this.toDate, 'MM/dd/yyyy')} \\r\\n\\r\\n`;else if (type == 'system') extraData = `${this.language[title] || title} \\r\\n${this.language.region} : ${region} \\r\\n${this.language.location} : ${location}\\r\\n${this.language['START_DATE']} : ${pipe.transform(this.fromDate, 'MM/dd/yyyy')}\\r\\n${this.language['END_DATE']} : ${pipe.transform(this.toDate, 'MM/dd/yyyy')} \\r\\n\\r\\n`;else extraData = `${this.language[title]} \\r\\n${this.language.region} : ${region} \\r\\n${this.language.location} : ${location}\\r\\n${this.language.System} : ${system}\\r\\n${this.language['START_DATE']} : ${pipe.transform(this.fromDate, 'MM/dd/yyyy')} \\r\\n${this.language['END_DATE']} : ${pipe.transform(this.toDate, 'MM/dd/yyyy')} \\r\\n\\r\\n`;\n      return extraData;\n    }\n    downloadFunction(chartName, idName, type, chartdata, title, chartId) {\n      this.idCount++;\n      console.log(chartdata);\n      let extraData = this.heading(chartName, type, idName, title);\n      let id = idName + this.idCount;\n      $(id).addClass('spinnershow');\n      let data;\n      if (chartId) data = this.healthService.duplicateDataHandle(chartdata, type, chartId);\n      data = this.healthService.chartDataFraming(chartdata, chartName, type, extraData, 'DSL');\n      let fname = this.healthService.generateDownloadName(chartName, type, 'DSL');\n      setTimeout(() => {\n        $(id).removeClass('spinnershow');\n      }, 1000);\n      this.exportExcelService.downLoadCSV(fname, data, extraData);\n    }\n    fullScreenExpandFunction(chartName, charttype, chart, chartdata, type) {\n      this.fullScreenData = [];\n      this.fullScreen = true;\n      this.fullScreenChartType = charttype;\n      this.fullScreenMsg = \"\";\n      this.chartGroupby = charttype;\n      this.fullScreenChartName = this.language[chartName] ? this.language[chartName] : chartName;\n      this.fullScreenChart = chart;\n      this.downloadTitle = chartName;\n      let groupBy;\n      if (charttype == \"Region\") {\n        groupBy = 'region';\n        this.fullScreenChartType = 'region';\n      } else if (charttype == 'Location') {\n        groupBy = 'location';\n        this.fullScreenChartType = 'location';\n      } else if (charttype == 'System') {\n        groupBy = 'system';\n        this.fullScreenChartType = 'system';\n      } else if (charttype == 'Interface') {\n        groupBy = 'interface';\n        this.fullScreenChartType = 'interface';\n      }\n      let params = {\n        tenant: \"0\",\n        startTime: `${this.dateUtilsService.getUtCSecondsByDateObj(this.fromDate)}`,\n        endTime: `${this.dateUtilsService.getUtCSecondsByDateObj(this.toDate, true)}`,\n        region: this.regionSelected == \"All\" ? \"\" : this.regionSelected,\n        location: this.locationSelected == \"All\" ? \"\" : this.locationSelected,\n        system: this.systemSelected == \"All\" ? \"\" : this.systemSelected,\n        groupBy: groupBy\n      };\n      params[\"granularity\"] = this.healthService.getGranularity(params.startTime, params.endTime);\n      let query = \"\";\n      for (var key in params) {\n        if (params[key] == undefined || params[key] == \"undefined\" || params[key] == \"\") {\n          continue;\n        }\n        if (query != \"\") {\n          query += \"&\";\n        }\n        query += key + \"=\" + encodeURIComponent(params[key]);\n      }\n      let query1 = query + \"&countBy=interface\";\n      if (chartdata) {\n        this.fullScreenMsg = \"\";\n        this.fullScreenData = chartdata;\n        this.rerender();\n        if (chart == 'ponchart') {\n          this.fullScrChart = 'PON Interface Count';\n          Highcharts.chart('fullScreenChart', this.portCountChartOptionsn(chartdata || [], charttype, true, this.thresholdChart[groupBy]));\n        } else if (chart == \"bipchart\") {\n          this.fullScrChart = 'BIP Error Rate';\n          Highcharts.chart('fullScreenChart', this.notAtTargetSNRChartOptionsn(chartdata || [], charttype, true, this.bipChart[groupBy]));\n        } else if (chart == \"packagechart\") {\n          this.fullScrChart = 'Packet Dropped';\n          Highcharts.chart('fullScreenChart', this.notAtAttainableChartOptionsn(chartdata || [], charttype, true, this.packageChart[groupBy]));\n        }\n        // else if (chart == \"UtilizationChart\") {\n        //   this.fullScrChart = 'systemUtilization'\n        //   Highcharts.chart('fullScreenChart', this.utilizationChartOption(chartdata || [], charttype));    \n        // }\n        setTimeout(() => {\n          var elmnt = document.getElementById(\"full_screen\");\n          elmnt.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }, 0);\n      } else {\n        this.fullScreenData = [];\n        this.rerender();\n        if (chart == \"ponchart\") {\n          this.fullScrChart = 'PON Interface Count';\n          this.ponutilizationchart = this.CcochartService.Getutilizationthresholdexceededcount(query, 'dsl').subscribe(res => {\n            res = this.totalCoutSort(res, \"usUtilExcCnt\", \"dsUtilExcCnt\", charttype);\n            this.getTableFullscreen(res, groupBy, type);\n            Highcharts.chart('fullScreenChart', this.portCountChartOptionsn(res || [], charttype, true, this.thresholdChart[groupBy]));\n          }, err => {\n            this.loading = false;\n            this.errorHandler(err);\n          });\n        } else if (chart == \"bipchart\") {\n          this.fullScrChart = 'BIP Error Rate';\n          this.ponbiperror = this.CcochartService.GetNotAtSNR(query1).subscribe(res => {\n            res = this.totalCoutSort(res, \"usSnrBelowThresCnt\", \"dsSnrBelowThresCnt\", charttype);\n            this.getTableFullscreen(res, groupBy, type);\n            Highcharts.chart('fullScreenChart', this.notAtTargetSNRChartOptionsn(res || [], charttype, true, this.bipChart[groupBy]));\n          }, err => {\n            this.loading = false;\n            this.errorHandler(err);\n          });\n        } else if (chart == \"packagechart\") {\n          this.fullScrChart = 'Packet Dropped';\n          this.ponpackage = this.CcochartService.GetNotAtAttainable(query1).subscribe(res => {\n            res = this.totalCoutSort(res, \"usCurRateBelowThresCnt\", \"dsCurRateBelowThresCnt\", charttype);\n            this.getTableFullscreen(res, groupBy, type);\n            Highcharts.chart('fullScreenChart', this.notAtAttainableChartOptionsn(res || [], charttype, true, this.packageChart[groupBy]));\n          }, err => {\n            this.loading = false;\n            this.errorHandler(err);\n          });\n        }\n      }\n    }\n    errorHandler(err) {\n      if (err.status == 401) {\n        this.fullScreenMsg = this.language['Access Denied'];\n      } else {\n        this.fullScreenMsg = this.commonOrgService.pageErrorHandle(err);\n      }\n    }\n    getTableFullscreen(res, groupBy, type) {\n      this.fullScreenMsg = \"\";\n      this.fullScreenData = this.healthService.duplicateDataHandle(res, groupBy, type);\n      this.rerender();\n      this.loading = false;\n    }\n    charttabledata(groupBy, data) {\n      let duplicate = [];\n      let fullscreendata = [];\n      if (data.length) {\n        let count = 0;\n        data.forEach(element => {\n          count = count + 1;\n          if (!element[groupBy] || element[groupBy] == \"       \") {\n            element[groupBy] = \"Other\";\n          }\n          if (duplicate.indexOf(element[groupBy]) === -1) {\n            duplicate.push(element[groupBy]);\n          } else {\n            let c = 0;\n            let temp = 1;\n            do {\n              c = c + 1;\n              let test = element[groupBy] + \"(\" + c + \")\";\n              if (duplicate.indexOf(test) === -1) {\n                element[groupBy] = test;\n                duplicate.push(element[groupBy]);\n                temp = 0;\n              }\n            } while (temp != 0);\n          }\n        });\n        data.forEach(element => {\n          fullscreendata.push(element);\n        });\n      }\n      this.fullScreenData = fullscreendata;\n    }\n    fullScreenInvertFunction() {\n      this.searchText = '';\n      this.fullScreen = false;\n      if (this.fullscreen_Filter) this.applyfilter(true);\n    }\n    clearChartContainer(values) {\n      var findindex = this.loadedMultipleTimeseriesChart.findIndex(x => x.chartname === values.chartname);\n      if (findindex > -1) {\n        this.loadedMultipleTimeseriesChart.splice(findindex, 1);\n      }\n    }\n    countconvert(number) {\n      return this.ShortnumberPipe.transform(number, true, 5);\n    }\n    decimalconvert(number) {\n      let no = (number * 100).toFixed(2);\n      if (no === '0.00') {\n        return 0;\n      } else {\n        return no;\n      }\n    }\n    search(term) {\n      this.dtElements.forEach(dtElement => {\n        if (dtElement.dtInstance) dtElement.dtInstance.then(dtInstance => {\n          dtInstance.columns(0).search(term).draw();\n        });\n      });\n    }\n    rerender() {\n      this.dtElements.forEach(dtElement => {\n        if (dtElement.dtInstance) dtElement.dtInstance.then(dtInstance => {\n          dtInstance.destroy();\n        });\n      });\n      setTimeout(() => {\n        this.dtSub = this.dtTrigger.next();\n        this.dtSub1 = this.dtTrigger1.next();\n        this.dtSub2 = this.dtTrigger2.next();\n      });\n    }\n    getTableData(data, type, chartType) {\n      let arr = _.groupBy(_.flatten([JSON.parse(JSON.stringify(data[0])), JSON.parse(JSON.stringify(data[1])), JSON.parse(JSON.stringify(data[2]))]), type);\n      this.tableData = _.map(arr, function (val) {\n        return _.merge.apply(_, val);\n      });\n      let groupby = type.replace('Id', '');\n      this.tableData = this.healthService.duplicateDataHandle(this.tableData, groupby, type);\n      this.tableData = this.healthService.totalcountsort(this.tableData, 'usUtilExcCnt', 'dsUtilExcCnt', 'rxDis', 'txDis', \"count\", chartType);\n      if (!this.redenderOnce) {\n        this.dtTrigger.next();\n        this.redenderOnce = true;\n      } else {\n        this.rerender();\n      }\n    }\n    closeSubTable() {\n      this.closeSub = true;\n    }\n    clearSearch(value) {\n      this.searchText = \"\";\n      this.rerender();\n    }\n  }\n  CcoDslComponent.ɵfac = function CcoDslComponent_Factory(t) {\n    return new (t || CcoDslComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.HealthService), i0.ɵɵdirectiveInject(i3.CcochartService), i0.ɵɵdirectiveInject(i4.NfainventoryService), i0.ɵɵdirectiveInject(i5.ExportExcelService), i0.ɵɵdirectiveInject(i6.NgbModal), i0.ɵɵdirectiveInject(i7.CommonService), i0.ɵɵdirectiveInject(i8.ShortnumberPipe), i0.ɵɵdirectiveInject(i9.DateUtilsService), i0.ɵɵdirectiveInject(i10.SsoAuthService), i0.ɵɵdirectiveInject(i11.Title), i0.ɵɵdirectiveInject(i12.Router), i0.ɵɵdirectiveInject(i13.HttpClient), i0.ɵɵdirectiveInject(i12.ActivatedRoute));\n  };\n  CcoDslComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CcoDslComponent,\n    selectors: [[\"app-cco-dsl\"]],\n    viewQuery: function CcoDslComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(DataTableDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.showInfoModal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dtElements = _t);\n      }\n    },\n    decls: 13,\n    vars: 6,\n    consts: [[\"role\", \"alert\", \"class\", \"alert alert-warning\", 4, \"ngIf\"], [1, \"d-flex\", \"dsl-ports-kbi\", \"w-100\", \"my-3\"], [1, \"col-auto\", \"pr-2\"], [\"id\", \"dsl-ports-kbi\", 1, \"cco-list-label\", \"mb-0\"], [1, \"stats-value\"], [1, \"col-auto\"], [\"id\", \"dsl-ports-showtime-kbi\", 1, \"cco-list-label\", \"mb-0\"], [\"class\", \"pb-2\", 4, \"ngIf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\"], [1, \"pb-2\"], [1, \"filter-container\", \"pb-2\"], [1, \"row\", \"px-2\"], [\"id\", \"current-issues-region\", 1, \"col-item\", \"ccl-form\"], [\"width\", \"100%\"], [\"id\", \"start_date\", \"appendTo\", \"body\", \"dateFormat\", \"mm-dd-yy\", 3, \"inputStyle\", \"autoZIndex\", \"placeholder\", \"ngModel\", \"showIcon\", \"selectOtherMonths\", \"ngModelOptions\", \"minDate\", \"maxDate\", \"styleClass\", \"ngModelChange\", \"onSelect\"], [\"id\", \"start_date\", \"appendTo\", \"body\", \"dateFormat\", \"mm-dd-yy\", 3, \"inputStyle\", \"autoZIndex\", \"placeholder\", \"ngModel\", \"showIcon\", \"selectOtherMonths\", \"ngModelOptions\", \"maxDate\", \"minDate\", \"styleClass\", \"ngModelChange\", \"onSelect\"], [\"width\", \"100%\", \"bindValue\", \"id\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"ngModel\", \"items\", \"clearable\", \"searchable\", \"placeholder\", \"ngModelChange\"], [\"ng-label-tmp\", \"\"], [\"ng-option-tmp\", \"\"], [\"id\", \"current-issues-location\", 1, \"col-item\", \"ccl-form\"], [\"width\", \"100%\", \"bindValue\", \"id\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"ngModel\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"ngModelChange\"], [\"id\", \"current-issues-System\", 1, \"col-item\", \"ccl-form\"], [\"width\", \"100%\", \"bindValue\", \"uuid\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"ngModel\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"ngModelChange\"], [\"id\", \"current-issues-interface\", 1, \"col-item\", \"ccl-form\"], [\"width\", \"100%\", \"bindValue\", \"name\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"ngModel\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"ngModelChange\"], [1, \"col-item\", \"col-item-action\"], [1, \"d-inline-flex\", \"align-items-center\"], [1, \"btn-default\", \"btn-primary\", \"py-0\", \"mr-2\", 3, \"title\", \"click\"], [\"id\", \"#\", 1, \"btn-link\", \"btn-over-ellipse\", \"primary\", 3, \"title\", \"click\"], [1, \"mt-3\", 3, \"ngClass\"], [\"id\", \"Region\", 1, \"row\"], [1, \"col-sm-6\", \"col-md-4\", \"col-lg-4\", \"col-xl-4\", \"mb-3\"], [1, \"border-bottom\", \"d-flex\", \"align-items-center\", \"w-100\", \"pb-2\", \"justify-content-between\"], [\"data-toggle\", \"tooltip\", 1, \"overflow-hidden\", 3, \"title\"], [1, \"cco-secondary-title\", \"long-title-ellips\"], [1, \"mwc-btns\", \"d-inline-flex\", \"align-items-center\"], [\"type\", \"button\", \"id\", \"PortCourtDownloadSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-dload\", \"mr-2\", 3, \"title\", \"click\"], [\"src\", \"../../../../assets/img/ic_download_grey.svg\"], [\"type\", \"button\", \"id\", \"PortCourtExpandSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-expand\", 3, \"title\", \"click\"], [\"src\", \"../../../../assets/img/ic_expand_grey.svg\"], [1, \"img\", \"my-2\"], [\"class\", \"mt-3\", 4, \"ngIf\"], [\"class\", \"w-100 alert alert-danger  fade show my-3\", 4, \"ngIf\"], [1, \"mwc-content\", 3, \"ngClass\"], [1, \"greyaa\", \"mb-2\", \"heading-subtitle\"], [1, \"mb-0\", \"heading-subtitle\", \"text-center\"], [1, \"col-md-12\", \"p-2\"], [\"id\", \"PortCourtChart\", 1, \"chart-box\", \"h-300px\"], [\"type\", \"button\", \"id\", \"PacketDroppedDownloadSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-dload\", \"mr-2\", 3, \"title\", \"click\"], [\"type\", \"button\", \"id\", \"PacketDroppedExpandSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-expand\", 3, \"title\", \"click\"], [\"id\", \"PacketDroppedChart\", 1, \"chart-box\", \"h-300px\"], [\"type\", \"button\", \"id\", \"BIPErrorRateDownloadSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-dload\", 3, \"title\", \"click\"], [\"type\", \"button\", \"id\", \"BIPErrorRateExpandSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-expand\", 3, \"title\", \"click\"], [\"id\", \"BIPErrorRateChart\", 1, \"chart-box\", \"h-300px\"], [1, \"mb-3\", 3, \"ngClass\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"d-flex\", \"justify-content-between\", \"border-bottom\"], [\"data-toggle\", \"tooltip\", 1, \"long-title-ellips\"], [1, \"cco-secondary-title\", \"pb-2\"], [1, \"col-md-3\", \"smy-2\", \"ccl-form\", \"position-relative\", \"my-4\"], [\"type\", \"text\", \"aria-label\", \"Search\", 1, \"ccl-from\", \"pr-3\", \"ng-pristine\", \"ng-valid\", \"ng-touched\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\", \"keyup\", \"search\"], [\"class\", \"search-close\", 3, \"click\", 4, \"ngIf\"], [1, \"pon-report-table\"], [\"id\", \"pon_table\", \"width\", \"100%\", \"datatable\", \"\", 1, \"row-border\", \"hover\", \"table-alter\", 3, \"dtOptions\", \"dtTrigger\"], [\"class\", \"loader\", 4, \"ngIf\"], [4, \"ngIf\"], [\"id\", \"full_screen\", 1, \"row\", \"my-3\", 3, \"ngClass\"], [1, \"subscriber-trends-wrapper\", \"overflow-auto\"], [1, \"w-100\", \"px-3\"], [1, \"d-flex\", \"justify-content-between\", \"border-bottom\", \"mb-2\"], [1, \"cco-secondary-title\"], [1, \"mwc-btns\", \"flex\"], [\"id\", \"fullScreenChartDownloadSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-dload\", 3, \"title\", \"click\"], [\"src\", \"../../../../assets/img/ic_download_grey copy.svg\", \"alt\", \"\"], [\"id\", \"fullScreenChartExpandSection\", \"data-toggle\", \"tooltip\", 1, \"btn-round\", \"btn-small-24\", \"btn-grey\", \"btn-expand-inv\", 3, \"title\", \"click\"], [\"src\", \"../../../../assets/img/ic_expand_inverted_grey.svg\", \"alt\", \"\"], [1, \"ml-3\", \"mr-3\"], [\"id\", \"fullScreenChart\", 1, \"chart-box\", \"hw-full\"], [1, \"w-100\"], [\"id\", \"ont-fullscreen\", \"width\", \"100%\", \"datatable\", \"\", 1, \"row-border\", \"hover\", \"table-alter\", 3, \"dtOptions\", \"dtTrigger\"], [3, \"hidden\"], [4, \"ngFor\", \"ngForOf\"], [1, \"my-3\"], [\"class\", \"col-md-12\"], [\"showInfoModal\", \"\"], [1, \"text-truncate\", 3, \"title\"], [1, \"mt-3\"], [1, \"d-flex\", \"justify-content-center\"], [\"role\", \"\", 1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"w-100\", \"alert\", \"alert-danger\", \"fade\", \"show\", \"my-3\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [1, \"search-close\", 3, \"click\"], [\"src\", \"../../../../../assets/img/ic_close-44px.svg\"], [1, \"loader\"], [\"class\", \"text-link\", 4, \"ngIf\"], [1, \"d-flex\"], [\"src\", \"../../../../../assets/img/chart-up.svg\", \"alt\", \"\", 1, \"mx-2\"], [\"src\", \"../../../../../assets/img/chart-down.svg\", \"alt\", \"\", 1, \"mx-2\"], [1, \"text-link\"], [\"href\", \"javascript:void(0)\", 3, \"click\"], [\"src\", \"../../../../../assets/img/plus-icon.svg\", \"alt\", \"\", 1, \"mx-2\"], [1, \"spinner-border\", \"text-primary\"], [\"class\", \"w-100 my-2\", 4, \"ngFor\", \"ngForOf\"], [1, \"w-100\", \"my-2\"], [3, \"wholedata\", \"params\", \"paramname\", \"charttype\", \"title\", \"system\", \"divid\", \"chartname\", \"page\", \"valueChange\"], [1, \"modal-header\", \"d-block\"], [\"id\", \"showInfoModal\", 1, \"modal-title\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\"], [1, \"modal-body\", \"add-device-model\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn-default\", \"btn-primary\", \"px-3\", \"px-3\", 3, \"click\"]],\n    template: function CcoDslComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CcoDslComponent_div_0_Template, 2, 1, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"label\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"h1\", 4);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelementStart(8, \"label\", 6);\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"h1\", 4);\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, CcoDslComponent_section_12_Template, 172, 126, \"section\", 7);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasScopeAccess);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.language[\"Configured DSL Interfaces\"]);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.ponCounts ? ctx.ponCounts : 0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language[\"DSL Interfaces in Showtime Status\"], \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.PONCAPACITY ? ctx.PONCAPACITY : 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasScopeAccess);\n      }\n    },\n    directives: [i14.NgIf, i15.Calendar, i16.NgControlStatus, i16.NgModel, i17.NgSelectComponent, i17.ɵh, i17.ɵf, i14.NgClass, i16.DefaultValueAccessor, i18.DataTableDirective, i14.NgForOf, i19.TimeserieschartComponent],\n    styles: [\".dsl-ports-kbi[_ngcontent-%COMP%]   .col-auto[_ngcontent-%COMP%]{border-left:1px solid #EBEAEF;padding-left:12px;min-width:130px}.long-title-ellips[_ngcontent-%COMP%]{white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.search-close[_ngcontent-%COMP%]{position:absolute;width:12px;right:32px;top:5px;cursor:pointer}\"]\n  });\n  return CcoDslComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}