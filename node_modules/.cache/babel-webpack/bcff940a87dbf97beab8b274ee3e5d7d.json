{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as go from 'gojs';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app-services/translate.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../services/issues.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"ngx-spinner\";\nimport * as i6 from \"src/app/shared/services/sso-auth.service\";\nimport * as i7 from \"../../data.service\";\nimport * as i8 from \"src/app/sys-admin/services/common.service\";\nimport * as i9 from \"../../support-wifi/services/support-wifi.service\";\nimport * as i10 from \"../../shared/component/subscriber-menu/subscriber-menu.component\";\nimport * as i11 from \"@angular/common\";\nimport * as i12 from \"@angular/forms\";\nconst _c0 = [\"APDiagram\"];\nconst _c1 = [\"searchValue\"];\nconst _c2 = [\"issueBox\"];\nfunction DemoTopologyComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 39);\n    i0.ɵɵelementStart(1, \"div\", 40);\n    i0.ɵɵelementStart(2, \"div\", 41);\n    i0.ɵɵelementStart(3, \"span\", 42);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.language.Loading);\n  }\n}\nfunction DemoTopologyComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵelementStart(1, \"span\", 44);\n    i0.ɵɵelement(2, \"img\", 45);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 46);\n    i0.ɵɵlistener(\"click\", function DemoTopologyComponent_div_4_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.closeAlert();\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 47);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r1.errorInfo, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction DemoTopologyComponent_div_48_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"p\", 53);\n    i0.ɵɵtext(2, \"Issue:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 54);\n    i0.ɵɵelementStart(4, \"span\", 55);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6, \" - \");\n    i0.ɵɵelementStart(7, \"span\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const rgErr_r11 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(rgErr_r11.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(rgErr_r11.note);\n  }\n}\nfunction DemoTopologyComponent_div_48_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51);\n    i0.ɵɵtemplate(1, DemoTopologyComponent_div_48_div_3_div_1_Template, 9, 2, \"div\", 52);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.rgArr);\n  }\n}\nfunction DemoTopologyComponent_div_48_div_4_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵelementStart(2, \"span\", 55);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" - \");\n    i0.ɵɵelementStart(5, \"span\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const clientErr_r13 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(clientErr_r13.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\\\"\", clientErr_r13.note, \"\\\"\");\n  }\n}\nfunction DemoTopologyComponent_div_48_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 51);\n    i0.ɵɵelementStart(1, \"h4\", 56);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, DemoTopologyComponent_div_48_div_4_div_3_Template, 7, 2, \"div\", 52);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r9.selectedAPValue[\"hostname\"], \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r9.clientArr);\n  }\n}\nfunction DemoTopologyComponent_div_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", null, 48);\n    i0.ɵɵelementStart(2, \"div\", 49);\n    i0.ɵɵtemplate(3, DemoTopologyComponent_div_48_div_3_Template, 2, 1, \"div\", 50);\n    i0.ɵɵtemplate(4, DemoTopologyComponent_div_48_div_4_Template, 4, 2, \"div\", 50);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.rgflag);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.selectedAPValue);\n  }\n}\nexport let DemoTopologyComponent = /*#__PURE__*/(() => {\n  class DemoTopologyComponent {\n    constructor(translateService, http, issuseservice, route, spinner, ssoAuthService, dataService, router, changeDetector, commonOrgService, api) {\n      this.translateService = translateService;\n      this.http = http;\n      this.issuseservice = issuseservice;\n      this.route = route;\n      this.spinner = spinner;\n      this.ssoAuthService = ssoAuthService;\n      this.dataService = dataService;\n      this.router = router;\n      this.changeDetector = changeDetector;\n      this.commonOrgService = commonOrgService;\n      this.api = api;\n      this.nodeLinkColor = {\n        green: '#c8d652',\n        red: '#c7a9a2'\n      };\n      this.nodeColor = {\n        green: '#f6f8e9',\n        red: '#f6e6e8'\n      };\n      this.searchSubject = new Subject();\n      this.locationFixed = false;\n      this.MODULE = 'support';\n      this.isIconClicked = [];\n      this.primaryActionButton = [];\n      this.Description = [];\n      this.severity = [];\n      this.reason = [];\n      this.apiCallDone = false;\n      this.loading = false;\n      this.lastDeviceClickData = {};\n      this.uniqueDevices = [];\n      this.uniqueHostnames = [];\n      this.clientData = {};\n      this.twoHrsCategory = [];\n      this.twoHrsData = [];\n      this.sixHrsData = [];\n      this.oneDayData = [];\n      this.width = '100%';\n      this.height = 400;\n      this.type = 'msline';\n      this.title = 'app';\n      this.apInformtion = '';\n      this.VisitedPage = '';\n      this.routerKey = '';\n      this.nextVisitedPage = '';\n      this.nextRouterKey = '';\n      this.nextTabledataUniqueId = '';\n      this.currentPage = 'main';\n      this.dblClkFired = false;\n      this.$ = go.GraphObject.make;\n      this.apData = {};\n      this.apImageUrl = '';\n      this.apNodeData = [];\n      this.apLinkData = [];\n      this.topologyData = {\n        phy: [],\n        legacy: [],\n        clientWifi: []\n      };\n      this.topologyView = true;\n      this.tplgyType = '';\n      this.tableView = false;\n      this.legacyChecked = false;\n      this.phyChecked = false;\n      this.signalChecked = false;\n      this.filterEnabled = false;\n      this.successFilterEnabled = false;\n      this.deviceDatas = [];\n      this.deviceDatasUpdated = [];\n      this.backBtnDisabled = true;\n      this.accessPointId = '';\n      this.nodeDataArray = [];\n      this.linkDataArray = [];\n      this.hostnameFilterData = [];\n      this.topRow = true;\n      this.onClickClients = '';\n      this.clientArr = [];\n      this.rgArr = [];\n      this.clientDeviceSSID = false;\n      this.rgflag = false;\n      this.rgDetails = [];\n      this.rgModel = '';\n      this.raManufacture = '';\n      this.ipv4 = '';\n      this.ipv6 = '';\n      this.pageNumber = 1;\n      this.pageSize = 10;\n      this.makemodel = [];\n      this.zoomFactorList = [{\n        factor: '25%',\n        value: 0.25\n      }, {\n        factor: '50%',\n        value: 0.5\n      }, {\n        factor: '75%',\n        value: 0.75\n      }, {\n        factor: '100%',\n        value: 1\n      }, {\n        factor: '125%',\n        value: 1.25\n      }, {\n        factor: '150%',\n        value: 1.5\n      }, {\n        factor: '175%',\n        value: 1.75\n      }, {\n        factor: '200%',\n        value: 2\n      }];\n      this.zoomScale = 1;\n      this.images = ['assets/images/tv-all-clear.png', 'assets/images/printer-clear.png', 'assets/images/ipad-all-clear.png', 'assets/images/laptop-all-clear.png', 'assets/images/phone-all-clear-state.png', 'assets/images/camera-clear.png', 'assets/images/audiobox-clear.png', 'assets/images/gaming-clear.png', 'assets/images/ipad-all-clear.png', 'assets/images/laptop-all-clear.png'];\n      this.clientDevicesImages = ['assets/images/deviceicons/question_mark_grey_icon.png', 'assets/images/deviceicons/phone_grey_icon.png', 'assets/images/deviceicons/computer_grey_icon.png', 'assets/images/deviceicons/console_grey_icon.png', 'assets/images/deviceicons/media_player_grey_icon.png', 'assets/images/deviceicons/printer_grey_icon.png', 'assets/images/deviceicons/television_grey_icon.png', 'assets/images/deviceicons/network_icon_grey.png', 'assets/images/deviceicons/camera_grey_icon.png', 'assets/images/deviceicons/tablet_grey_icon.png', 'assets/images/deviceicons/voip_grey.png', 'assets/images/deviceicons/iot_grey.png', 'assets/images/deviceicons/ic_modem-24px.svg', 'assets/images/deviceicons/question_mark_grey_icon.png'];\n      this.imagesObj = {\n        Television: 'assets/images/tv-all-clear.png',\n        Tablet: 'assets/images/ipad-all-clear.png',\n        Phone: 'assets/images/phone-all-clear-state.png',\n        Camera: 'assets/images/camera-clear.png',\n        'Media Player': 'assets/images/audiobox-clear.png',\n        Console: 'assets/images/gaming-clear.png',\n        'Wi-Fi IoT': 'assets/images/iot.png',\n        'Wi Fi IoT': 'assets/images/iot.png',\n        'Wifi IoT': 'assets/images/iot.png',\n        Computer: 'assets/images/computer.png',\n        Printer: 'assets/images/printer-clear.png',\n        Network: 'assets/images/network.png',\n        Voip: 'assets/images/voip.png',\n        Fridge: 'assets/images/iot.png',\n        'Television-red': 'assets/images/tv-critical-issues.png',\n        'Tablet-red': 'assets/images/ipad-critical.png',\n        'Phone-red': 'assets/images/phone-critical-state.png',\n        'Camera-red': 'assets/images/camera-critical.png',\n        'Media Player-red': 'assets/images/audiobox-critical.png',\n        'Console-red': 'assets/images/gaming-critical.png',\n        'Wi-Fi IoT-red': 'assets/images/iot-critical.png',\n        'Wi Fi IoT-red': 'assets/images/iot-critical.png',\n        'Wifi IoT-red': 'assets/images/iot-critical.png',\n        'Computer-red': 'assets/images/computer-critical.png',\n        'Printer-red': 'assets/images/printer-critical.png',\n        'Network-red': 'assets/images/network-critical.png',\n        'Voip-red': 'assets/images/voip-critical.png',\n        'Fridge-red': 'assets/images/iot-critical.png',\n        'iot-red': 'assets/images/iot-critical.png',\n        'wireless-red': 'assets/img/WiFi-Error.svg',\n        'wireless-green': 'assets/img/WiFi-Success.svg',\n        'wireless-orange': 'assets/img/WiFi-Warning.svg'\n      };\n      this.ssid = '';\n      this.radio = '';\n      this.ethOrAPType = '';\n      this.ethOrAPImageUrl = '';\n      this.accesspoint = false;\n      this.accessPointImages = {\n        yellow: 'assets/images/myRouter_yellow.svg',\n        green: 'assets/images/myRouter.svg',\n        red: 'assets/images/myRouter_red.svg'\n      };\n      go.Diagram.licenseKey = '73f946e4b56e28a800ca0d2b113f69ed1bb37f3b9e8c1bf0595446a7ef0d68403089ef2802868ac582ff19fd1829c0dcd5c46c7a9e1c0138e132d38c40e485ade16477b6435b448da3012f90ccaf2ff5ac2f77a0c3b672a68a70dff6eea8c59a59eff5861ace1cab2f2d5637562cff4ba5ebda7afa02d349746d9a';\n      let url = this.router.url;\n      if (url.indexOf('/support/') > -1) {\n        this.MODULE = 'support';\n      } else this.MODULE = 'cco';\n    }\n    ngOnInit() {\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n      this.backBtnDisabled = true;\n      this.route.queryParams.subscribe(params => {\n        this.routerMac = params['routerMac'];\n        this.getData();\n        this.getAllClientsData(this.routerMac);\n      });\n    }\n    ngAfterViewInit() {}\n    loadfirst() {\n      let $ = this.$;\n      var colors = {\n        blue: '#2a6dc0',\n        orange: '#ea2857',\n        green: '#1cc1bc',\n        gray: '#5b5b5b',\n        white: '#F5F5F5'\n      };\n      if (this.APTopology) {\n        this.APTopology.div = null;\n      }\n      this.APTopology = $(go.Diagram, 'mainDiagram', {\n        minScale: 0.25,\n        maxScale: 2.0,\n        initialContentAlignment: go.Spot.Top,\n        'undoManager.isEnabled': true,\n        LayoutCompleted: e => {\n          this.updateDivHeight();\n          this.enableAllCommandHandler();\n          if (this.rgArr.length > 0) {\n            this.scroll();\n          }\n        },\n        InitialLayoutCompleted: e => {\n          this.setZoomScaleToFit();\n          addMakeCustomExpander();\n          // e.diagram.findTreeRoots().each(function(r) { r.collapseTree(2); });\n          // e.diagram.findTreeRoots().each(function(r) { r.expandTree(1); });\n          e.diagram.nodes.each(function (r) {\n            r.data['isRg'] ? collapseDefault(r) : null;\n          });\n          // e.diagram.findTreeRoots().each(function(r) { r.expandTree(1); });\n        },\n\n        initialAutoScale: go.Diagram.UniformToFill,\n        layout: $(go.TreeLayout,\n        //LayeredDigraphLayout\n        {\n          // direction: 0,\n          layerSpacing: 110,\n          // columnSpacing: 33,\n          // linkSpacing: 5,\n          // isOngoing: false,\n          angle: 0\n        })\n      });\n      this.APTopology.toolManager.toolTipDuration = 60000;\n      this.APTopology.toolManager.hoverDelay = 500;\n      function linkInfo4(d) {\n        // Tooltip info for a link data object\n        if (d.name == '') {\n          return false;\n        } else {\n          return `${d.name}`;\n        }\n      }\n      this.APTopology.nodeTemplate = $(go.Node, 'Auto',\n      // { isTreeExpanded: false },\n      {\n        selectionAdorned: false,\n        click: (e, obj) => {\n          this.clientArr = [];\n          this.selectedAPValue = '';\n          if (obj.part.data['ap-tech-note'] || obj.part.data['rg-tech-notes']) {\n            this.apInformtion = obj.part.data['ap-tech-note'];\n            if (obj.part.data['failed-clients'] != 0) {\n              this.selectedAPValue = obj.part.data;\n            }\n            if (obj.part.data.clients && obj.part.data.clients.length > 0) {\n              for (let i = 0; i < obj.part.data.clients.length; i++) {\n                let name = '';\n                if (this.resValue.landing.rg.hostname) {\n                  name = this.resValue.landing.rg.hostname;\n                } else {\n                  name = this.resValue.landing.rg.mac;\n                }\n                if (i == 0 && obj.part.data['rg-color'] == 'red') {\n                  let params = {\n                    note: obj.part.data['rg-tech-notes'],\n                    name: name\n                  };\n                  JSON.stringify(this.clientArr.push(params));\n                }\n                if (obj.part.data.clients[i]['legacy-device-test-result'] != 'PASS' || obj.part.data.clients[i]['signal-strength-test-result'] != 'PASS' || obj.part.data.clients[i]['phy-rate-test-result'] != 'PASS') {\n                  let hostname = '';\n                  if (obj.part.data.clients[i]['hostname']) {\n                    hostname = obj.part.data.clients[i]['hostname'];\n                  } else {\n                    hostname = obj.part.data.clients[i]['mac'];\n                  }\n                  let params = {\n                    note: obj.part.data.clients[i]['client-note'],\n                    name: hostname\n                  };\n                  JSON.stringify(this.clientArr.push(params));\n                }\n              }\n            } else if (!obj.part.data['rg-tech-notes']) {\n              this.selectedAPValue = obj.part.data;\n              let hostname = '';\n              if (obj.part.data['hostname']) {\n                hostname = obj.part.data['hostname'];\n              } else {\n                hostname = obj.part.data['sn'];\n              }\n              let params = {\n                note: obj.part.data['ap-tech-note'],\n                name: hostname\n              };\n              JSON.stringify(this.clientArr.push(params));\n            }\n          } else {\n            this.apInformtion = obj.part.data['rg-tech-notes'];\n          }\n          if (this.clientArr.length > 0) {\n            this.scroll();\n          }\n        },\n        mouseHover: function (e, obj) {\n          let node = obj.part;\n          if (node.data.key === 'internet') {\n            return;\n          }\n          if (node.data.key === 'ethernet') {\n            return;\n          }\n        },\n        toolTip: $('ToolTip', {\n          'Border.stroke': colors['blue'],\n          'Border.strokeWidth': 1,\n          visible: false\n        }, new go.Binding('visible', 'tooltip', function (text) {\n          return text != '';\n        }), $(go.TextBlock, {\n          margin: 4\n        }, {\n          font: 'bold 12px sans-serif'\n        }, new go.Binding('text', 'tooltip')))\n      },\n      // new go.Binding('visible'),\n      $(go.Shape, {\n        // background : 'red',\n        width: 210,\n        height: 120,\n        fill: 'white'\n      }, new go.Binding('strokeWidth', 'isHighlighted', function (h) {\n        return h ? 2 : 0;\n      }).ofObject(), new go.Binding('stroke', 'isHighlighted', function (h) {\n        return h ? 'gold' : 'white';\n      }).ofObject()), $(go.Shape, new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }), {\n        width: 210,\n        height: 40,\n        strokeWidth: 0\n      }, new go.Binding('fill', '', function (node) {\n        return node.color || 'white';\n      })), $(go.Panel, 'Auto', new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }), {\n        width: 220,\n        height: 120\n      }, $(go.Panel, 'Spot', {\n        visible: false\n      }, $(go.Picture, {\n        // background : 'blue',\n        desiredSize: new go.Size(25, 20),\n        alignment: go.Spot.TopLeft,\n        visible: false,\n        margin: new go.Margin(25, 0, 0, 10),\n        toolTip: $('ToolTip', {\n          visible: false,\n          'Border.stroke': colors['blue'],\n          'Border.strokeWidth': 1\n        }, $(go.TextBlock, 'Arrowheads', {\n          margin: 4\n        }, {\n          font: 'bold 12px sans-serif'\n        }, new go.Binding('text', 'ap_rssi_tooltip'), new go.Binding('visible', '', function (data) {\n          return data.ap_rssi_tooltip && data != '' && data['ap-online'] == 'true';\n        })), new go.Binding('visible', '', function (data) {\n          return data.ap_rssi_tooltip && data != '' && data['ap-online'] == 'true';\n        }))\n      }, new go.Binding('source', 'wirelessIcon', function (image) {\n        return image ? image : '';\n      }), new go.Binding('width', 'width', function (data) {\n        return data - 5;\n      }), new go.Binding('height', 'height', function (data) {\n        return data - 10;\n      })), new go.Binding('visible', '', function (data) {\n        return data.wirelessIcon && data.wirelessIcon != '' && data['ap-online'] == 'true';\n      })), $(go.Panel, 'Spot', {\n        visible: false,\n        alignment: go.Spot.TopLeft\n      }, new go.Binding('visible', 'freqBand', function (freqBand) {\n        return freqBand != '';\n      }), $(go.TextBlock, {\n        margin: new go.Margin(25, 0, 0, 10)\n      }, new go.Binding('text', 'freqBand'))), $(go.Panel, 'Horizontal',\n      // the row of status indicators\n      $(go.Panel, 'Horizontal', {\n        height: 35,\n        width: 60\n      }, $(go.Picture, {\n        margin: new go.Margin(0, 0, 0, 25)\n      }, new go.Binding('source', 'source', function (image) {\n        return image ? image : '';\n      }), new go.Binding('element', 'source-video', function (video) {\n        return video ? video : '';\n      }), new go.Binding('width', 'width'), new go.Binding('height', 'height'))), $(go.Panel, 'Horizontal', {\n        height: 40,\n        width: 160\n      }, $(go.TextBlock, {\n        margin: new go.Margin(0, 0, 0, 10),\n        width: 120,\n        overflow: go.TextBlock.OverflowEllipsis,\n        // isMultiline : false,\n        maxLines: 1\n        // maxSize: new go.Size(200, 60),\n      }, new go.Binding('text', 'label', function (l) {\n        return l ? l : '';\n      })))),\n      //Passed Clients\n      $(go.Panel, 'Auto', {\n        click: function (e, obj) {\n          var node = obj.part; // get the Node containing this Button\n          if (node === null) return;\n          e.handled = true;\n          expandNode(node, true, 'isPassedClient');\n        }\n      }, new go.Binding('margin', 'label', function (l) {\n        return l ? new go.Margin(-55, 0, 0, 50) : '';\n      }), new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }),\n      // decorations:\n      $(go.Shape, 'Circle', {\n        width: 24,\n        height: 24,\n        // fill: 'white',\n        stroke: 'green',\n        strokeWidth: 2,\n        margin: 5,\n        visible: false\n      }, new go.Binding('fill', '_othersPassedExpanded', function (node) {\n        return node ? 'green' : 'white';\n      }), new go.Binding('visible', 'passed-clients', function (l) {\n        return l ? l : false;\n      })), $(go.TextBlock, {\n        margin: 5\n      }, new go.Binding('stroke', '', function (node) {\n        return node._othersPassedExpanded ? 'white' : 'black';\n      }), new go.Binding('text', 'passed-clients', function (l) {\n        return l ? l : '';\n      }))),\n      //Failed Clients\n      $(go.Panel, 'Auto', {\n        click: function (e, obj) {\n          var node = obj.part; // get the Node containing this Button\n          if (node === null) return;\n          e.handled = true;\n          expandNode(node, true, 'isFailedClient');\n        }\n      }, new go.Binding('margin', 'label', function (l) {\n        return l ? new go.Margin(-45, 0, 0, 90) : '';\n      }), new go.Binding('cursor', 'label', function (l) {\n        return l ? 'pointer' : '';\n      }),\n      // decorations:\n      $(go.Shape, 'Circle', {\n        width: 24,\n        height: 24,\n        // fill: 'white',\n        stroke: 'orange',\n        strokeWidth: 2,\n        margin: 5,\n        visible: false\n      }, new go.Binding('fill', '_othersFailedExpanded', function (node) {\n        return node ? 'orange' : 'white';\n      }), new go.Binding('visible', 'failed-clients', function (l) {\n        return l ? l : false;\n      })), $(go.TextBlock, {\n        margin: 5\n      }, new go.Binding('stroke', '', function (node) {\n        return node._othersFailedExpanded ? 'white' : 'black';\n      }), new go.Binding('text', 'failed-clients', function (l) {\n        return l ? l : '';\n      }))), $(go.Panel, 'Auto', {\n        margin: new go.Margin(0, 0, 0, 175)\n      }, makeCustomExpander(false))), new go.Binding('visible', 'isClient', function (o) {\n        return !o;\n      }));\n      this.APTopology.linkTemplate = $(go.Link, {\n        curve: go.Link.Bezier,\n        // toShortLength: 6,\n        relinkableFrom: true,\n        relinkableTo: true\n      },\n      // allow the user to relink existing links\n      $(go.Shape, {\n        strokeWidth: 3,\n        width: 200\n      }, new go.Binding('stroke', 'color'), new go.Binding('strokeWidth', 'thick')), {\n        toolTip: $('ToolTip', {\n          visible: false\n        }, new go.Binding('visible', '', linkInfo4), $(go.TextBlock, {\n          margin: 2\n        },\n        // the tooltip shows the result of calling linkInfo(data)\n        new go.Binding('text', '', linkInfo4)))\n      });\n      let that = this;\n      function makeCustomExpander(others) {\n        return $('Button', {\n          visible: false,\n          // alignment: align,\n          click: function (e, obj) {\n            var node = obj.part; // get the Node containing this Button\n            if (node === null) return;\n            e.handled = true;\n            expandNode(node, others, 'isClient');\n          }\n        }, $(go.Shape,\n        // the icon\n        {\n          name: 'ButtonIcon',\n          figure: 'TriangleLeft',\n          stroke: '#424242',\n          strokeWidth: 2,\n          desiredSize: new go.Size(8, 8)\n        },\n        // bind the Shape.figure to the node.data._othersExpanded value using this converter:\n        new go.Binding('figure', others ? '_othersExpanded' : '_primariesExpanded', function (exp, shape) {\n          var but = shape.panel;\n          return exp ? 'TriangleLeft' : 'TriangleRight';\n        })),\n        // assume initially not visible because there are no links coming out\n        // { visible: false },\n        // bind the button visibility to whether it's not a leaf node\n        // new go.Binding('visible', 'isTreeLeaf', function (leaf) {\n        //   return !leaf;\n        // }).ofObject(),\n        // new go.Binding('visible', 'apHasChildAp', function (l) { return l && l == true?true:false}),\n        new go.Binding('visible', '', function (node) {\n          return !node.isTreeLeaf && node.apHasChildAp ? true : false;\n        }));\n      }\n      function expandNode(node, others, type) {\n        others = node.data['isSSID'] ? true : others;\n        type = node.data['isSSID'] ? node.data['isPassedClient'] ? 'isPassedClient' : 'isFailedClient' : type;\n        that.APTopology.startTransaction('CollapseExpandTree');\n        var children = node.findTreeChildrenNodes();\n        children.each(function (c) {\n          var cd = c.data;\n          if (others && !cd[type]) return;\n          if (!others && cd[type]) return;\n          if (c.visible) {\n            c.visible = false;\n            c.collapseTree();\n          } else {\n            c.visible = true;\n            c.expandTree();\n          }\n        });\n        if (others) {\n          if (type == 'isPassedClient') {\n            that.APTopology.model.set(node.data, '_othersPassedExpanded', !node.data._othersPassedExpanded);\n          } else if (type == 'isFailedClient') {\n            that.APTopology.model.set(node.data, '_othersFailedExpanded', !node.data._othersFailedExpanded);\n          }\n        } else {\n          that.APTopology.model.set(node.data, '_primariesExpanded', !node.data._primariesExpanded);\n        }\n        that.APTopology.commitTransaction('CollapseExpandTree');\n      }\n      function collapseDefault(node) {\n        return __awaiter(this, void 0, void 0, function* () {\n          that.APTopology.startTransaction('CollapseExpandTree');\n          var children = node.findTreeChildrenNodes();\n          var parent = node.findTreeParentNode();\n          that.APTopology.model.set(node.data, '_primariesExpanded', !node.data._primariesExpanded);\n          yield children.each(function (c) {\n            c.visible = false;\n            c.collapseTree();\n            var subChild = c.findTreeChildrenNodes();\n            if (subChild) {\n              collapseDefault(c);\n            }\n          });\n          if (!that.locationFixed) {\n            locateIssueFix(parent);\n          }\n          that.APTopology.commitTransaction('CollapseExpandTree');\n        });\n      }\n      function locateIssueFix(node) {\n        that.APTopology.startTransaction('CollapseExpandTree');\n        that.APTopology.findTreeRoots().each(function (e) {\n          if (e.data['isInternet']) e.location.y = e.location.y + 1;\n          that.locationFixed = true;\n        });\n        // node.location.y = node.location.y + 1;\n        // node.location = new go.Point(0, 141);\n        that.APTopology.commitTransaction('CollapseExpandTree');\n      }\n      function addMakeCustomExpander() {\n        that.APTopology.startTransaction('CollapseExpandTree');\n        that.APTopology.nodes.each(function (obj) {\n          let node = obj.part;\n          let childrenExists = obj.part.findTreeChildrenNodes();\n          let childExists = false;\n          childrenExists.each(function (c) {\n            var cd = c.data;\n            if (!cd['isClient'] || cd['isSSIDClient']) {\n              childExists = true;\n            }\n            that.APTopology.model.set(node.data, 'apHasChildAp', childExists);\n          });\n        });\n        that.APTopology.commitTransaction('CollapseExpandTree');\n      }\n      that.APTopology.model = new go.GraphLinksModel(that.nodeDataArray, that.linkDataArray);\n      const el = this.APDiagram.nativeElement;\n      const canvas = el.querySelector('canvas');\n      canvas['style']['outline'] = 'none';\n    }\n    play() {\n      return true;\n    }\n    loadInitialDiagram(json) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.nodeDataArray = [];\n        this.linkDataArray = [];\n        let rgColor = '';\n        let linkColor = '';\n        if (json.landing.rg.online == 'true') {\n          rgColor = '#f6f8e9';\n          linkColor = '#cfdb67';\n        } else {\n          rgColor = '#f3f3f3';\n          linkColor = 'grey';\n        }\n        let uplinkText = '';\n        let uplinkRate = '';\n        if (Object.keys(json.landing.uplink).length > 0) {\n          uplinkText = `MAC : ${json.landing.uplink.mac}`;\n          uplinkRate = `Download Rate : ${json.landing.uplink.downloadRate} Mbps \\n Upload Rate : ${json.landing.uplink.uploadRate} Mbps `;\n        }\n        let connection = '';\n        if (this.ipv4 && this.ipv6) {\n          connection = `IPv4: Connected \\n IPv6: Connected`;\n        } else if (this.ipv4 && !this.ipv6) {\n          connection = `IPv4: Connected \\n IPv6: Disconnected`;\n        } else if (!this.ipv4 && this.ipv6) {\n          connection = `IPv4: Disconnected \\n IPv6: Connected`;\n        }\n        let uplinkData = {\n          isInternet: true,\n          text: uplinkText,\n          label: connection,\n          source: 'assets/images/global.svg',\n          key: 'test',\n          accessPointId: '',\n          width: 30,\n          height: 30,\n          color: rgColor\n        };\n        let uplinkEthernetData = {\n          text: `Ethernet Port`,\n          label: `Ethernet Port`,\n          source: 'assets/images/ethernet.png',\n          key: 'ethernet',\n          accessPointId: '',\n          color: '#f3f3f3',\n          width: 17,\n          height: 30\n        };\n        // ****** RG NOTE\n        if (json.landing && json.landing.rg) {\n          let color;\n          color = json.landing.rg['online'] ? 'red' : 'green';\n          this.linkDataArray.push({\n            from: uplinkData.key,\n            to: json.landing.rg.mac,\n            color: linkColor,\n            thick: 2,\n            routing: go.Link.Normal,\n            name: uplinkRate\n          });\n          let rgDetails = '';\n          let freq_band = '';\n          if (json.landing.rg['online']) {\n            if (json.landing.rg['online'] == 'true') {\n              rgDetails = `Connection: Online`;\n            } else {\n              rgDetails = `Connection: Offline`;\n            }\n          }\n          rgDetails += json.landing.rg['ip'] ? `\\n IP Address : ${json.landing.rg['ip']}` : ``;\n          rgDetails += json.landing.rg['mac'] ? `\\n MAC Address: ${json.landing.rg['mac']}` : ``;\n          rgDetails += json.landing.rg['version'] ? `\\n Software Version : ${json.landing.rg['version']}` : ``;\n          rgDetails += json.landing.rg['sn'] ? `\\n Serial Number: ${json.landing.rg['sn']}` : ``;\n          rgDetails += json.landing.rg['hostname'] ? `\\n Device : ${json.landing.rg['hostname']}` : ``;\n          rgDetails += this.rgModel ? `\\n Model : ${this.rgModel}` : ``;\n          rgDetails += this.raManufacture ? `\\n Manufacturer : ${this.raManufacture}` : ``;\n          if (json.landing.rg['radio-info']) {\n            var radioInfo = json.landing.rg['radio-info'];\n            var freqArr = [];\n            if (radioInfo.length > 0) {\n              for (let fband = 0; fband < radioInfo.length; fband++) {\n                let fbandValue = radioInfo[fband]['freq-band'] + 'GHz';\n                freqArr.push(fbandValue);\n              }\n              freq_band = freqArr.join(', ');\n            }\n            rgDetails += freq_band ? `\\n Frequency Band: ${freq_band}` : ``;\n          }\n          if (json.landing.rg.clients) {\n            if (json.landing.rg.clients.length > 0) {\n              rgDetails += json.landing.rg.clients ? `\\n Total Devices: ${json.landing.rg.clients.length}` : `\\n Total Devices: 0`;\n            }\n          }\n          rgDetails += json.landing.rg['passed-clients'] != 0 ? `\\n Devices without issues and warnings: ${json.landing.rg['passed-clients']}` : `\\n Devices without issues and warnings: 0`;\n          rgDetails += json.landing.rg['failed-clients'] != 0 ? `\\n Devices with issues and warnings: ${json.landing.rg['failed-clients']}` : `\\n Devices with issues and warnings: 0`;\n          json.landing.rg['tooltip'] = rgDetails;\n          json.landing.rg['source'] = json.landing.rg['online'] ? 'assets/images/myRouter.svg' : 'assets/images/router-critical-state.png';\n          json.landing.rg['key'] = json.landing.rg.mac;\n          this.rgKey = json.landing.rg.mac;\n          if (json.landing.rg['rg-color'] == 'green') {\n            json.landing.rg['color'] = '#f6f8e9';\n          } else if (json.landing.rg['rg-color'] == 'red') {\n            json.landing.rg['color'] = '#f6e6e8';\n          } else if (json.landing.rg['rg-color'] == 'yellow') {\n            json.landing.rg['color'] = '#ffff84b5';\n          }\n          if (json.landing.rg['online'] == 'false') {\n            json.landing.rg['color'] = '#f6e6e8';\n          }\n          json.landing.rg['width'] = 30;\n          json.landing.rg['height'] = 30;\n          json.landing.rg['model'] = this.rgModel;\n          json.landing.rg['isRg'] = true;\n          if (json.landing.rg['hostname']) {\n            json.landing.rg['label'] = `${json.landing.rg['hostname']}`;\n          } else {\n            json.landing.rg['label'] = `${json.landing.rg['sn']}`;\n          }\n          // Populate APS\n          let rgData = json.landing.rg.aps;\n          // if (!this.clientDeviceSSID) {\n          this.nodeDataArray.push(uplinkData);\n          this.nodeDataArray.push(json.landing.rg);\n          if (rgData && rgData.length > 0) {\n            yield this.populateAps(rgData, json, json.landing.rg, uplinkEthernetData);\n          }\n          this.setClientDetailsNode();\n        }\n      });\n    }\n    getData() {\n      this.loading = true;\n      let url = `assets/data/rg.json`;\n      let getSerialNo = this.ssoAuthService.getSerialNo();\n      if (getSerialNo != '') {\n        var Devices = JSON.parse(getSerialNo);\n      }\n      var SubscriberId = this.ssoAuthService.getCSCSubscriberId();\n      var serialNo = [];\n      if (Devices) {\n        Devices.forEach(element => {\n          if (element.serialNumber) {\n            var newElement = {};\n            newElement['serialNumber'] = element.serialNumber, newElement['opMode'] = element.opMode, serialNo.push(newElement);\n          }\n        });\n      }\n      let data = {\n        subscriberId: SubscriberId,\n        devices: serialNo\n      };\n      let orgId = +localStorage.getItem('calix.org_id');\n      this.issuseservice.topologyValue(orgId, data).subscribe(json => {\n        // this.http.get(url).subscribe(\n        //   (json: any) => {\n        if (json.landing.rg['rg-color'] == 'red' || json.landing.rg['rg-color'] == 'yellow') {\n          this.rgflag = true;\n          let name = '';\n          if (json.landing.rg['hostname']) {\n            name = json.landing.rg['hostname'];\n          } else {\n            name = json.landing.rg['sn'];\n          }\n          let params = {\n            name: name,\n            note: json.landing.rg['rg-tech-notes']\n          };\n          JSON.stringify(this.rgArr.push(params));\n        }\n        this.loading = false;\n        let pageNumber = 1;\n        let pageSize = 10;\n        this.dataService.performSearch(orgId, json.landing.rg.sn, pageNumber, pageSize).subscribe(searchData => __awaiter(this, void 0, void 0, function* () {\n          this.rgDetails = searchData;\n          for (let i = 0; i < this.rgDetails.records.length; i++) {\n            for (let j = 0; j < this.rgDetails.records[i].devices.length; j++) {\n              if (this.rgDetails.records[i].devices[j].serialNumber == json.landing.rg.sn) {\n                this.rgModel = this.rgDetails.records[i].devices[j].modelName;\n                this.raManufacture = this.rgDetails.records[i].devices[j].manufacturer;\n                this.ipv4 = this.rgDetails.records[i].devices[j].ipAddress;\n                this.ipv6 = this.rgDetails.records[i].devices[j].secondIpAddress;\n              }\n              let params = {\n                model: this.rgDetails.records[i].devices[j].modelName,\n                manufacture: this.rgDetails.records[i].devices[j].manufacturer,\n                sno: this.rgDetails.records[i].devices[j].serialNumber\n              };\n              this.makemodel.push(params);\n            }\n          }\n          // this.resValue = JSON.parse(JSON.stringify(json));\n          this.resValue = json;\n          this.loadInitialDiagram(json);\n        }), err => {\n          this.pageErrorHandle(err);\n          this.loading = false;\n        });\n      }, err => {\n        this.pageErrorHandle(err);\n        this.loading = false;\n      });\n    }\n    setClientDetailsNode() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // if (!this.clientDeviceSSID) {\n        yield this.nodeDataArray.forEach(el => {\n          if (el.clients && el.clients.length > 0) {\n            this.objData = el;\n            this.onClickClients = '';\n            this.getAPData(this.objData);\n          }\n        });\n        this.setOthersPrimary();\n      });\n    }\n    setOthersPrimary() {\n      this.nodeDataArray.forEach(el => {\n        el['apHasChildAp'] = false;\n        el['_othersPassedExpanded'] = false;\n        el['_othersFailedExpanded'] = false;\n        el['_primariesExpanded'] = false;\n      });\n      this.loadfirst();\n    }\n    clientNodeDetails(clientAttributes) {\n      this.clientDetails = '';\n      if (clientAttributes['ip-address']) {\n        this.clientDetails = `IP Address : ${clientAttributes['ip-address']}`;\n      }\n      if (clientAttributes['hostname']) {\n        this.clientDetails += `\\n Hostname : ${clientAttributes['hostname']}`;\n      }\n      if (clientAttributes['version']) {\n        this.clientDetails += `\\n Software Version : ${clientAttributes['version']}`;\n      }\n      if (clientAttributes['mac']) {\n        this.clientDetails += `\\n MAC Address: ${clientAttributes['mac']}`;\n      }\n      if (clientAttributes['fingerprint-model'] && clientAttributes['fingerprint-model'] != 'Unknown') {\n        this.clientDetails += `\\n Model : ${clientAttributes['fingerprint-model']}`;\n      }\n      if (clientAttributes['fingerprint-vendor'] && clientAttributes['fingerprint-vendor'] != 'Unknown') {\n        this.clientDetails += `\\n Manufacturer: ${clientAttributes['fingerprint-vendor']}`;\n      }\n      if (clientAttributes['intf-type']) {\n        this.clientDetails += `\\n Connection Type: ${clientAttributes['intf-type']}`;\n      }\n      if (clientAttributes['signal-strength']) {\n        this.clientDetails += `\\n Signal Strength : ${clientAttributes['signal-strength']}`;\n      }\n      if (clientAttributes['client-efficiency-score']) {\n        let scoreType = '';\n        let clientEffScore = Number((Number(clientAttributes['client-efficiency-score']) * 100).toFixed(2));\n        if (clientEffScore >= 45) {\n          scoreType = 'Good';\n        } else if (clientEffScore >= 20 && clientEffScore < 45) {\n          scoreType = 'Fair';\n        } else if (clientEffScore < 20) {\n          scoreType = 'Poor';\n        }\n        this.clientDetails += '\\n Client Efficiency Score : ' + clientEffScore + '% (' + scoreType + ')';\n      }\n      if (clientAttributes['Airtime-usage'] >= 0) {\n        this.clientDetails += `\\n Airtime Usage : ${clientAttributes['Airtime-usage']}`;\n      }\n      if (clientAttributes['Channel-number']) {\n        this.clientDetails += `\\n Channel Number : ${clientAttributes['Channel-number']}`;\n      }\n      if (clientAttributes['DS-phy-rate'] || clientAttributes['US-phy-rate']) {\n        this.clientDetails += `\\n DS/Us Phy Rate : ${this.kbpsTO(clientAttributes['DS-phy-rate'])}bps/${this.kbpsTO(clientAttributes['US-phy-rate'])}bps`;\n      }\n      if (clientAttributes['RX-bandwidth-usage'] || clientAttributes['TX-bandwidth-usage']) {\n        this.clientDetails += `\\n RX/TX BW Usage : ${this.kbpsTO(clientAttributes['RX-bandwidth-usage'])}bps/${this.kbpsTO(clientAttributes['TX-bandwidth-usage'])}bps`;\n      }\n      if (clientAttributes['SNR']) {\n        this.clientDetails += `\\n SNR : ${clientAttributes['SNR']}`;\n      }\n      if (clientAttributes['freq-band']) {\n        this.clientDetails += `\\n Frequency Band: ${clientAttributes['freq-band']} GHz`;\n      }\n      if (clientAttributes.clients) {\n        if (clientAttributes.clients.length > 0) {\n          this.clientDetails += `\\n Total Devices: ${clientAttributes.clients.length}`;\n        }\n      }\n      if (clientAttributes['passed-clients']) {\n        this.clientDetails += `\\n Devices without issues and warnings: ${clientAttributes['passed-clients']}`;\n      }\n      if (clientAttributes['failed-clients']) {\n        this.clientDetails += `\\n Devices with issues and warnings: ${clientAttributes['failed-clients']}`;\n      }\n      if (clientAttributes['ap-tech-note']) {\n        this.clientDetails += `\\n Issue(s): ${clientAttributes['ap-tech-note']}`;\n      }\n    }\n    getAPData(apMac) {\n      this.searchText = '';\n      this.apInformtion = '';\n      // Client Devices connected with RG\n      //Populate Client Devices of Rg and APS\n      if (apMac.clients && apMac.clients.length > 0) {\n        this.populateClientDevices(apMac.clients, apMac);\n      }\n    }\n    getAllClientsData(apMac, singleClick, dblClick) {\n      let signalImages = {\n        0: 'assets/images/no-wifi-signal.png',\n        1: 'assets/images/low-wifi-signal.png',\n        2: 'assets/images/all-green-wifi.png',\n        3: 'assets/images/all-green-wifi.png'\n      };\n      this.spinner.show();\n    }\n    accessPoint() {\n      this.clientDeviceSSID = !this.clientDeviceSSID;\n      this.loadInitialDiagram(this.resValue);\n    }\n    enableAllCommandHandler() {\n      var cmdhnd = this.APTopology.commandHandler;\n      this.enable('ScrollToPart', cmdhnd.canScrollToPart());\n    }\n    enable(name, ok) {\n      var button = document.getElementById(name);\n      if (button) button['disabled'] = !ok;\n    }\n    zoomfunctionalities(type) {\n      if (type == 'ScrollToPart') {\n        this.APTopology.commandHandler.scrollToPart();\n      }\n    }\n    searchDiagram() {\n      if (this.searchText.length > 1) {\n        let that = this;\n        this.searchSubject.next();\n        this.searchSubject.pipe(debounceTime(1000)).subscribe(() => {\n          // this.APTopology.highlighteds.each(e => {e.visible = true})\n          that.APTopology.focus();\n          that.APTopology.startTransaction('highlight search');\n          if (that.searchText) {\n            var safe = that.searchText.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n            var regex = new RegExp(safe, 'i');\n            var results = that.APTopology.findNodesByExample({\n              label: regex\n            }, {\n              mac: regex\n            }, {\n              model: regex\n            });\n            that.APTopology.highlightCollection(results);\n            that.APTopology.highlighteds.each(e => {\n              let parent = e.findTreeParentNode();\n              if (parent) {\n                visibleAllChilds(parent);\n              }\n              function visibleAllChilds(parent) {\n                e.visible = true;\n                e.expandTree();\n                var hasPassedClient = false,\n                  hasFailedClient = false,\n                  hasApChild = false;\n                parent.findTreeChildrenNodes().each(el => {\n                  if (el.data['isPassedClient']) {\n                    hasPassedClient = true;\n                  }\n                  if (el.data['isFailedClient']) {\n                    hasFailedClient = true;\n                  }\n                  if (!el.data['isClient']) {\n                    hasApChild = true;\n                  }\n                  el.visible = true;\n                  el.expandTree();\n                  bindButtonValues(el, hasPassedClient, hasFailedClient, hasApChild);\n                });\n                let subParent = parent.findTreeParentNode();\n                bindButtonValues(parent, hasPassedClient, hasFailedClient, hasApChild);\n                if (subParent) {\n                  visibleAllChilds(subParent);\n                }\n              }\n              function bindButtonValues(parent, hasPassedClient, hasFailedClient, hasApChild) {\n                if (hasPassedClient) {\n                  that.APTopology.model.set(parent.data, '_othersPassedExpanded', true);\n                }\n                if (hasFailedClient) {\n                  that.APTopology.model.set(parent.data, '_othersFailedExpanded', true);\n                }\n                if (hasApChild) {\n                  that.APTopology.model.set(parent.data, '_primariesExpanded', true);\n                }\n              }\n              // e.expandTree();\n            });\n\n            if (results.count > 0) that.APTopology.centerRect(results.first().actualBounds);\n          } else {\n            // empty string only clears highlighteds collection\n            that.APTopology.clearHighlighteds();\n          }\n          that.APTopology.commitTransaction('highlight search');\n          that.searchValue.nativeElement.focus();\n          setTimeout(() => {\n            that.zoomfunctionalities('ScrollToPart');\n          }, 100);\n        });\n      }\n    }\n    refreshClick() {\n      this.searchText = '';\n      this.clientArr = [];\n      this.rgArr = [];\n      this.nodeDataArray = [];\n      this.linkDataArray = [];\n      this.APTopology.clearHighlighteds();\n      this.getData();\n    }\n    changeScaleDiagram(scale, type) {\n      var oldscale = this.APTopology.scale;\n      if (type == 'dropDown') {\n        this.APTopology.scale = scale;\n      } else if (type == 'decrease') {\n        this.APTopology.scale = oldscale - 0.25;\n      } else if (type == 'increase') {\n        this.APTopology.scale = oldscale + 0.25;\n      }\n      this.zoomScale = this.APTopology.scale;\n      this.updateDivHeight();\n    }\n    setZoomScaleToFit() {\n      let isScroll = false;\n      let nativeDiagram;\n      const el = this.APDiagram.nativeElement;\n      this.zoomScale = 1;\n      do {\n        this.APTopology.scale = this.zoomScale;\n        isScroll = false;\n      } while (isScroll);\n      this.updateDivHeight();\n    }\n    updateDivHeight() {\n      let divElement = document.getElementById('mainDiagram');\n      divElement.style.height = Number(this.APTopology.documentBounds.height) + 100 + 'px' || '500px';\n      this.APTopology.requestUpdate();\n    }\n    kbpsTO(val, valueOnly, unitOnly) {\n      let kbpsString = this.api.kbpsTO(val, valueOnly, unitOnly);\n      return kbpsString;\n    }\n    bytesToSize(bytes) {\n      const units = ['bytes', 'Kbps', 'Mbps', 'Gbps', 'Tbps', 'Pbps', 'Ebps', 'Zbps', 'Ybps'];\n      let l = 0,\n        n = parseInt(bytes, 10) || 0;\n      while (n >= 1024 && ++l) {\n        n = n / 1024;\n      }\n      return n.toFixed(n < 10 && l > 0 ? 1 : 0) + ' ' + units[l];\n    }\n    scroll() {\n      setTimeout(() => {\n        this.issueBox.nativeElement.scrollIntoView();\n      }, 100);\n    }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = this.language['Access Denied'];\n      } else {\n        this.errorInfo = this.ssoAuthService.pageErrorHandle(err);\n      }\n      this.closeAlert();\n      this.error = true;\n    }\n    closeAlert() {\n      this.error = false;\n    }\n    populateAps(apsData, json, prevElement, uplinkEthernetData) {\n      var nodeFreqArr = [];\n      var freqArr = [];\n      apsData.forEach(element => {\n        let rgMainAPDetails = '';\n        let modelName = '';\n        let manufactureName = '';\n        rgMainAPDetails = element['ip'] ? `IP Address : ${element['ip']}` : ``;\n        rgMainAPDetails += element['mac'] ? `\\n MAC Address: ${element['mac']}` : ``;\n        rgMainAPDetails += element['version'] ? `\\n Software Version : ${element['version']}` : ``;\n        rgMainAPDetails += element['sn'] ? `\\n Serial Number: ${element['sn']}` : ``;\n        rgMainAPDetails += element['hostname'] ? `\\n Device : ${element['hostname']}` : ``;\n        if (this.makemodel) {\n          for (let n = 0; n < this.makemodel.length; n++) {\n            if (element.sn == this.makemodel[n]['sno']) {\n              element['model'] = `${this.makemodel[n]['model']}`;\n              modelName = this.makemodel[n]['model'];\n              manufactureName = this.makemodel[n]['manufacture'];\n            }\n          }\n        }\n        rgMainAPDetails += modelName ? `\\n Model : ${modelName}` : ``;\n        rgMainAPDetails += manufactureName ? `\\n Manufacturer : ${manufactureName}` : ``;\n        if (element['radio-info']) {\n          var radioInfo = element['radio-info'];\n          var freqBandValue = '';\n          let freq_band = '';\n          if (radioInfo.length > 0) {\n            for (let fband = 0; fband < radioInfo.length; fband++) {\n              let fbandValue = radioInfo[fband]['freq-band'] + 'GHz';\n              freqArr.push(fbandValue);\n              nodeFreqArr.push(radioInfo[fband]['freq-band']);\n            }\n            freqArr = [...new Set(freqArr)];\n            freq_band = freqArr.join(', ');\n          }\n          rgMainAPDetails += freq_band ? `\\n Frequency Band: ${freq_band}` : ``;\n          var uniq = [...new Set(nodeFreqArr)];\n          uniq.forEach(element => {\n            freqBandValue = freqBandValue + element + 'GHz / ';\n          });\n          freqBandValue = freqBandValue.slice(0, -3);\n        }\n        if (element.clients) {\n          if (element.clients.length > 0) {\n            rgMainAPDetails += element.clients.length ? `\\n Total Devices: ${element.clients.length}` : `\\n Total Devices: 0`;\n          }\n        }\n        rgMainAPDetails += element['passed-clients'] ? `\\n Devices without issues and warnings: ${element['passed-clients']}` : `\\n Devices without issues and warnings: 0`;\n        rgMainAPDetails += element['failed-clients'] ? `\\n Devices with issues and warnings: ${element['failed-clients']}` : `\\n Devices with issues and warnings: 0`;\n        rgMainAPDetails += element['ap-tech-note'] ? `\\n Note: ${element['ap-tech-note']}` : ``;\n        element['tooltip'] = rgMainAPDetails;\n        if (element['ap-color'] == 'green') {\n          element['color'] = '#f6f8e9';\n        } else if (element['ap-color'] == 'red') {\n          element['color'] = '#f6e6e8';\n        } else if (element['ap-color'] == 'yellow') {\n          element['color'] = '#ffff84b5';\n        }\n        if (element['ap-online'] == 'false') {\n          element['color'] = '#f6e6e8';\n        }\n        element['width'] = 30;\n        element['height'] = 30;\n        element['source'] = this.accessPointImages[element['ap-color']];\n        element['key'] = element.mac;\n        if (element['hostname']) {\n          element['label'] = `${element['hostname']}`;\n        } else {\n          element['label'] = `${element['sn']}`;\n        }\n        element.backhaul['rx-phy-rate'] = element.backhaul['rx-phy-rate'] ? this.kbpsTO(element.backhaul['rx-phy-rate']) + 'bps' : this.kbpsTO(0) + 'bps';\n        element.backhaul['tx-phy-rate'] = element.backhaul['tx-phy-rate'] ? this.kbpsTO(element.backhaul['tx-phy-rate']) + 'bps' : this.kbpsTO(0) + 'bps';\n        if (element['backhaul']['rssi'] >= -50) {\n          element['wirelessIcon'] = this.imagesObj['wireless-green'];\n          element['rssi_signal_strength'] = 'Excellent';\n        } else if (element['backhaul']['rssi'] >= -66 && element['backhaul']['rssi'] <= -51) {\n          element['wirelessIcon'] = this.imagesObj['wireless-green'];\n          element['rssi_signal_strength'] = 'Good';\n        } else if (element['backhaul']['rssi'] >= -69 && element['backhaul']['rssi'] <= -67) {\n          element['wirelessIcon'] = this.imagesObj['wireless-orange'];\n          element['rssi_signal_strength'] = 'Ok';\n        } else if (element['backhaul']['rssi'] >= -79 && element['backhaul']['rssi'] <= -70) {\n          element['wirelessIcon'] = this.imagesObj['wireless-red'];\n          element['rssi_signal_strength'] = 'Weak';\n        } else if (element['backhaul']['rssi'] <= -80) {\n          element['wirelessIcon'] = this.imagesObj['wireless-red'];\n          element['rssi_signal_strength'] = 'Very Weak';\n        }\n        element['ap_rssi'] = element['backhaul']['rssi'];\n        element['ap_rssi_signal_strength'] = element['backhaul']['rssi'];\n        element['ap_backhaul_tech_note'] = element['backhaul']['backhaul-tech-note'] || '-';\n        element['ap_rssi_tooltip'] = 'Signal Strength : ' + element['rssi_signal_strength'] + '\\n' + 'RSSI : ' + element['ap_rssi'] + ' dBm' + '\\n' + 'Issue(s) : ' + element['ap_backhaul_tech_note'];\n        this.nodeDataArray.push(element);\n        if (this.clientDeviceSSID) {\n          var tx_rate = element.backhaul['tx-phy-rate'] ? ` \\n Tx Phy Rate: ${this.kbpsTO(element.backhaul['tx-phy-rate'])}bps` : `\\n Tx Phy Rate: ${this.kbpsTO(0)}bps`;\n          var rx_rate = element.backhaul['rx-phy-rate'] ? ` \\n Rx Phy Rate: ${this.kbpsTO(element.backhaul['rx-phy-rate'])}bps` : ` \\n Rx Phy Rate: ${this.kbpsTO(0)}bps`;\n          var backhaul_note = element.backhaul['backhaul-tech-note'] ? ` \\n Backhaul Tech Note : ${element.backhaul['backhaul-tech-note']}` : '';\n          var channelNumber = element['Channel-number'] ? `\\n Channel: ${element['Channel-number']}` : '',\n            ssid = {\n              text: `ssid`,\n              key: `${prevElement.sn}-${element.ssid}`,\n              accessPointId: '',\n              color: '#f3f3f3',\n              label: element.ssid,\n              source: 'assets/images/Icon_Device_Wifi scaled.svg',\n              freqBand: freqBandValue,\n              tooltip: `Connection Type: ${element['int-type']} \\n Mac: ${prevElement['mac']} \\n SSID: ${element['ssid']} \\n Channel: ${element.backhaul['channel']} \\n RSSI: ${element.backhaul['rssi']} dBm ${tx_rate} ${rx_rate} ${backhaul_note}`,\n              ssidKey: '',\n              isAPSSID: true\n            },\n            ethernet = {\n              text: `ethernet`,\n              key: `ethernet-${prevElement.sn}`,\n              accessPointId: '',\n              color: '#f3f3f3',\n              label: 'Ethernet Port',\n              source: 'assets/images/ethernet.png',\n              width: 17,\n              height: 30,\n              tooltip: `Connection Type: ${element['int-type']}`,\n              isAPSSID: true\n            };\n          let trsRecRate = '';\n          if (element && element['int-type'] == 'WiFi') {\n            trsRecRate = `Transmit rate: ${element.backhaul['tx-phy-rate']} \\n Receive rate: ${element.backhaul['rx-phy-rate']}`;\n          } else {\n            trsRecRate = `Connection Type: LAN`;\n          }\n          if (element['int-type'] == 'WiFi') {\n            if (element.ssid) {\n              if (!this.nodeDataArray.find(el => el.key == ssid.key)) {\n                this.nodeDataArray.push(ssid);\n                ssid['ssidKey'] = element.ssid;\n              }\n            }\n            if (!this.linkDataArray.find(el => el.from == prevElement['mac'] && el.to == ssid.key)) {\n              this.linkDataArray.push({\n                from: prevElement['mac'],\n                to: ssid.key,\n                color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n                thick: 2,\n                routing: go.Link.Normal,\n                name: `Connection Type: ${element['int-type']} \\n SSID: ${element['ssid']}`\n              });\n            }\n            this.linkDataArray.push({\n              from: ssid.key,\n              to: element.mac,\n              color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n              thick: 2,\n              routing: go.Link.Normal,\n              name: trsRecRate\n            });\n          } else if (element['int-type'] === 'eth' || element['int-type'] == 'LAN') {\n            if (element['int-type']) {\n              if (!this.nodeDataArray.find(el => el.key == ethernet.key)) {\n                this.nodeDataArray.push(ethernet);\n              }\n            }\n            if (!this.linkDataArray.find(el => el.from == prevElement['mac'] && el.to == ethernet.key)) {\n              this.linkDataArray.push({\n                from: prevElement['mac'],\n                to: ethernet.key,\n                color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n                thick: 2,\n                routing: go.Link.Normal,\n                name: `Connection Type: ${ethernet.key}`\n              });\n            }\n            this.linkDataArray.push({\n              from: ethernet.key,\n              to: element.mac,\n              color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n              thick: 2,\n              routing: go.Link.Normal,\n              name: trsRecRate\n            });\n          }\n        } else {\n          if (element['int-type'] === 'eth' || element['int-type'] === 'LAN') {\n            let color = 'black';\n            this.nodeDataArray.push(uplinkEthernetData);\n            this.linkDataArray.push({\n              from: prevElement['mac'],\n              to: uplinkEthernetData.key,\n              color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n              thick: 2,\n              routing: go.Link.Normal,\n              name: `${prevElement['hostname']} to Ethernet`\n            });\n            this.linkDataArray.push({\n              from: uplinkEthernetData.key,\n              to: element.mac,\n              color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n              thick: 2,\n              routing: go.Link.Normal,\n              name: `Ethernet to ${element.hostname}`\n            });\n          } else {\n            let trsRecRate = '';\n            if (element && element['int-type'] == 'WiFi') {\n              trsRecRate = `Transmit rate: ${element.backhaul['tx-phy-rate']} \\n Receive rate: ${element.backhaul['rx-phy-rate']}`;\n            } else {\n              trsRecRate = `Connection Type: LAN`;\n            }\n            this.linkDataArray.push({\n              from: prevElement['mac'],\n              to: element.mac,\n              color: element['ap-online'] == 'true' ? this.nodeLinkColor['green'] : this.nodeLinkColor['red'],\n              thick: 2,\n              routing: go.Link.Normal,\n              name: trsRecRate\n            });\n          }\n        }\n        // Check for child node\n        if (Array.isArray(element.aps) && element.aps.length > 0) {\n          this.populateAps(element.aps, json, element, uplinkEthernetData);\n        }\n      });\n    }\n    populateClientDevices(clientDevices, parentNode) {\n      var freqBandPassedArr = [];\n      var freqBandFailedArr = [];\n      clientDevices.forEach(element => {\n        this.clientNodeDetails(element);\n        element['key'] = element.mac;\n        var signalStatus = element['signal-strength-test-result'];\n        var legacyStatus = element['legacy-device-test-result'];\n        var phyRateTestResult = element['phy-rate-test-result'];\n        let linkDetails = '';\n        if (element['signal-strength']) {\n          linkDetails += `RSSI: ${element['signal-strength']} dBm`;\n        }\n        if (element['wifi-mode']) {\n          linkDetails += `\\n Mode: ${element['wifi-mode']}`;\n        }\n        if (element['DS-phy-rate']) {\n          linkDetails += '\\n DS Phy Rate: ' + this.kbpsTO(element['DS-phy-rate']) + 'bps';\n        } else {\n          linkDetails += '\\n DS Phy Rate: ' + this.kbpsTO(0) + 'bps';\n        }\n        if (element['US-phy-rate']) {\n          linkDetails += '\\n US Phy Rate: ' + this.kbpsTO(element['US-phy-rate']) + 'bps';\n        } else {\n          linkDetails += '\\n US Phy Rate: ' + this.kbpsTO(0) + 'bps';\n        }\n        if (element['freq-band']) {\n          linkDetails += `\\n Band: ${element['freq-band']}GHz`;\n        }\n        if (element['intf-type'] == 'WiFi') {\n          if (element['ssid']) {\n            linkDetails += `\\n SSID: ${element['ssid']}`;\n          }\n        }\n        linkDetails += `\\n Connection Type: ${element['intf-type']}`;\n        var eachLine = linkDetails.split('\\n');\n        if (eachLine.length - 1 == 1) {\n          linkDetails += `\\n`;\n        }\n        let clientHostname = '';\n        if (element.hostname) {\n          clientHostname = element.hostname;\n        } else {\n          clientHostname = element['mac'];\n        }\n        // linkDetails = linkDetails.replace(/[^\\x20-\\x7E]/gmi, \"\");\n        element['label'] = element.hostname;\n        element['tooltip'] = this.clientDetails;\n        element['width'] = 30;\n        element['height'] = 30;\n        element['model'] = element['fingerprint-model'];\n        if (signalStatus == 'PASS' && legacyStatus == 'PASS' && phyRateTestResult == 'PASS') {\n          element['color'] = this.nodeColor.green;\n        } else {\n          element['color'] = this.nodeColor.red;\n        }\n        //source image for clients\n        if (element['client-type'] != 30 && [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].includes(element['client-type'])) {\n          element['source'] = this.clientDevicesImages[element['client-type']];\n        } else if (element['client-type'] == 30) {\n          element['source'] = this.clientDevicesImages[12];\n        } else {\n          element['source'] = this.clientDevicesImages[13];\n        }\n        this.nodeDataArray.push(element);\n        var withoutSSID = {};\n        if (signalStatus == 'PASS' && legacyStatus == 'PASS' && phyRateTestResult == 'PASS') {\n          withoutSSID = {\n            from: parentNode.key,\n            to: element.key,\n            color: this.nodeLinkColor.green,\n            thick: 2,\n            routing: go.Link.Normal,\n            name: linkDetails\n          };\n        } else {\n          withoutSSID = {\n            from: parentNode.key,\n            to: element.key,\n            color: this.nodeLinkColor.red,\n            thick: 2,\n            routing: go.Link.Normal,\n            name: linkDetails\n          };\n        }\n        if (this.clientDeviceSSID) {\n          element['isSSIDClient'] = true;\n          var channelNumber = element['Channel-number'] ? `\\n Channel: ${element['Channel-number']}` : '',\n            ssid = {\n              text: `ssid`,\n              key: `${parentNode.sn}-${element.ssid}-client`,\n              accessPointId: '',\n              color: '#f3f3f3',\n              label: element.ssid,\n              source: 'assets/images/Icon_Device_Wifi scaled.svg',\n              freqBand: element['freq-band'],\n              tooltip: `Connection Type: ${element['intf-type']} \\n Mac: ${element['mac']} \\n SSID: ${element['ssid']} \\n Frequency Band: ${element['freq-band']}GHz ${channelNumber}`,\n              ssidKey: '',\n              isClient: true,\n              isSSID: true\n            },\n            ethernet = {\n              text: `ethernet`,\n              key: `ethernet-${parentNode.sn}-client`,\n              accessPointId: '',\n              color: '#f3f3f3',\n              label: 'Ethernet Port',\n              source: 'assets/images/ethernet.png',\n              width: 17,\n              height: 30,\n              tooltip: `Connection Type: ${element['intf-type']}`,\n              isClient: true,\n              isSSID: true\n            };\n          if (element['isPassedClient']) {\n            ssid['isPassedClient'] = true;\n            ethernet['isPassedClient'] = true;\n            ssid['key'] = ssid['key'] + 'isPassedClient';\n            ethernet['key'] = ethernet['key'] + 'isPassedClient';\n          } else {\n            ssid['isFailedClient'] = true;\n            ethernet['isFailedClient'] = true;\n            ssid['key'] = ssid['key'] + 'isFailedClient';\n            ethernet['key'] = ethernet['key'] + 'isFailedClient';\n          }\n          if (element['intf-type'] == 'WiFi') {\n            let freqBandValue = '';\n            var uniq = [];\n            if (element['isPassedClient']) {\n              freqBandPassedArr.push(element['freq-band']);\n              uniq = [...new Set(freqBandPassedArr)];\n            } else {\n              freqBandFailedArr.push(element['freq-band']);\n              uniq = [...new Set(freqBandFailedArr)];\n            }\n            uniq.forEach(element => {\n              freqBandValue = freqBandValue + element + 'GHz / ';\n            });\n            freqBandValue = freqBandValue.slice(0, -3);\n            ssid['freqBand'] = freqBandValue;\n            if (element.ssid) {\n              var isSSIDExist = this.nodeDataArray.find(el => el.key == ssid.key && !el['isAPSSID']);\n              if (!isSSIDExist) {\n                this.nodeDataArray.push(ssid);\n                ssid['ssidKey'] = element.ssid;\n              } else {\n                isSSIDExist['freqBand'] = freqBandValue;\n              }\n            }\n            if (!this.linkDataArray.find(el => el.from == parentNode.key && el.to == ssid.key)) {\n              this.linkDataArray.push({\n                from: parentNode.key,\n                to: ssid.key,\n                color: signalStatus == 'PASS' && legacyStatus == 'PASS' && phyRateTestResult == 'PASS' ? this.nodeLinkColor.green : this.nodeLinkColor.red,\n                thick: 2,\n                routing: go.Link.Normal,\n                name: linkDetails\n              });\n            }\n            this.linkDataArray.push({\n              from: ssid.key,\n              to: element.key,\n              color: signalStatus == 'PASS' && legacyStatus == 'PASS' && phyRateTestResult == 'PASS' ? this.nodeLinkColor.green : this.nodeLinkColor.red,\n              thick: 2,\n              routing: go.Link.Normal,\n              name: linkDetails\n            });\n          } else if (element['intf-type'] === 'eth' || element['intf-type'] == 'LAN') {\n            if (element['intf-type']) {\n              if (!this.nodeDataArray.find(el => el.key == ethernet.key && !el['isAPSSID'])) {\n                this.nodeDataArray.push(ethernet);\n              }\n            }\n            if (!this.linkDataArray.find(el => el.from == parentNode.key && el.to == ethernet.key)) {\n              this.linkDataArray.push({\n                from: parentNode.key,\n                to: ethernet.key,\n                color: signalStatus == 'PASS' && legacyStatus == 'PASS' && phyRateTestResult == 'PASS' ? this.nodeLinkColor.green : this.nodeLinkColor.red,\n                thick: 2,\n                routing: go.Link.Normal,\n                name: ethernet.tooltip\n              });\n            }\n            this.linkDataArray.push({\n              from: ethernet.key,\n              to: element.key,\n              color: signalStatus == 'PASS' && legacyStatus == 'PASS' && phyRateTestResult == 'PASS' ? this.nodeLinkColor.green : this.nodeLinkColor.red,\n              thick: 2,\n              routing: go.Link.Normal,\n              name: ethernet.tooltip\n            });\n          }\n        } else {\n          if (signalStatus == 'PASS' && legacyStatus == 'PASS' && phyRateTestResult == 'PASS') {\n            element['isPassedClient'] = true;\n          } else {\n            element['isFailedClient'] = true;\n          }\n          element['isClient'] = true;\n          this.linkDataArray.push(withoutSSID);\n        }\n      });\n    }\n    ngOnDestroy() {}\n  }\n  DemoTopologyComponent.ɵfac = function DemoTopologyComponent_Factory(t) {\n    return new (t || DemoTopologyComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.IssuesService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i5.NgxSpinnerService), i0.ɵɵdirectiveInject(i6.SsoAuthService), i0.ɵɵdirectiveInject(i7.DataServiceService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i8.CommonService), i0.ɵɵdirectiveInject(i9.SupportWifiService));\n  };\n  DemoTopologyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DemoTopologyComponent,\n    selectors: [[\"app-demo-topology\"]],\n    viewQuery: function DemoTopologyComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.APDiagram = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchValue = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.issueBox = _t.first);\n      }\n    },\n    decls: 49,\n    vars: 7,\n    consts: [[1, \"m-2\"], [1, \"row\"], [\"class\", \"loader load\", 4, \"ngIf\"], [\"class\", \"w-100 alert alert alert-danger fade show\", 4, \"ngIf\"], [1, \"col-md-12\", \"ccl-tabs\"], [\"id\", \"tabs\", 1, \"nav\", \"nav-tabs\"], [1, \"nav-item\"], [\"data-toggle\", \"tab\", \"routerLinkActive\", \"active\", 1, \"nav-link\", \"small\", 3, \"routerLink\", \"Click\"], [1, \"big-text\"], [\"data-toggle\", \"tab\", \"routerLinkActive\", \"active\", 1, \"nav-link\", \"small\", 3, \"routerLink\"], [\"id\", \"tabsContent\", 1, \"tab-content\"], [\"id\", \"issue\", 1, \"tab-pane\", \"fade\", \"active\", \"show\"], [1, \"row\", \"pb-2\"], [\"id\", \"topology\", 1, \"tab-pane\", \"fade\"], [1, \"col-md-12\"], [1, \"toggle-swtbtn\", \"checkbox\", \"switcher\"], [1, \"col-md-3\"], [1, \"refreshButton\"], [\"id\", \"serviceDataRefresh\", 1, \"cursor-pointer\", \"primary\", 3, \"click\"], [1, \"fas\", \"fa-sync\", \"refreshicon\"], [1, \"col-md-9\", \"pr-0\"], [1, \"accessPoint\"], [1, \"d-inline-flex\", \"align-items-center\", \"justify-content-between\", \"search-box-input\"], [\"name\", \"search\", \"id\", \"mySearch\", \"placeholder\", \"Search\", \"id\", \"mySearch\", 3, \"ngModel\", \"ngModelChange\"], [\"searchValue\", \"\"], [1, \"search-box-icon\"], [\"id\", \"searchSubscriberIcon\", \"src\", \"assets/img/ic_search_white.svg\", 1, \"search-icon\", \"primary\", 3, \"click\"], [\"for\", \"Voice\", 2, \"margin-top\", \"10px\"], [\"type\", \"checkbox\", \"id\", \"Voice\", 3, \"change\"], [1, \"zoom\"], [1, \"cus-button\"], [\"id\", \"ZoomIn\", 1, \"mr-2\", \"pointer\", 2, \"font-size\", \"24px\", 3, \"click\"], [\"src\", \"assets/images/iconmonstr-minus.svg\", 2, \"height\", \"25px\"], [1, \"icon-hl\", 2, \"width\", \"70px\"], [\"id\", \"ZoomOut\", 1, \"pointer\", 2, \"font-size\", \"24px\", 3, \"click\"], [\"src\", \"assets/images/iconmonstr-plus.svg\", 2, \"height\", \"25px\"], [\"id\", \"mainDiagram\", 1, \"diagram-info\"], [\"APDiagram\", \"\"], [4, \"ngIf\"], [1, \"loader\", \"load\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"w-100\", \"alert\", \"alert\", \"alert-danger\", \"fade\", \"show\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [\"issueBox\", \"\"], [1, \"topo-info-box\"], [\"style\", \"margin-left: 10px\", 4, \"ngIf\"], [2, \"margin-left\", \"10px\"], [4, \"ngFor\", \"ngForOf\"], [2, \"font-weight\", \"600\", \"line-height\", \"0.4\"], [1, \"m-0\"], [2, \"font-weight\", \"600\"], [2, \"font-size\", \"20px\", \"font-weight\", \"600\"]],\n    template: function DemoTopologyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-subscriber-menu\");\n        i0.ɵɵelementStart(1, \"section\", 0);\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵtemplate(3, DemoTopologyComponent_div_3_Template, 5, 1, \"div\", 2);\n        i0.ɵɵtemplate(4, DemoTopologyComponent_div_4_Template, 6, 1, \"div\", 3);\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵelementStart(6, \"ul\", 5);\n        i0.ɵɵelementStart(7, \"li\", 6);\n        i0.ɵɵelementStart(8, \"a\", 7);\n        i0.ɵɵlistener(\"Click\", function DemoTopologyComponent_Template_a_Click_8_listener($event) {\n          return $event.preventDefault();\n        });\n        i0.ɵɵelementStart(9, \"span\", 8);\n        i0.ɵɵtext(10, \"Issues\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"li\", 6);\n        i0.ɵɵelementStart(12, \"a\", 9);\n        i0.ɵɵelementStart(13, \"span\", 8);\n        i0.ɵɵtext(14, \"Topology\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 10);\n        i0.ɵɵelementStart(16, \"div\", 11);\n        i0.ɵɵelement(17, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 13);\n        i0.ɵɵelement(19, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 1);\n        i0.ɵɵelementStart(21, \"div\", 14);\n        i0.ɵɵelementStart(22, \"div\", 15);\n        i0.ɵɵelementStart(23, \"div\", 16);\n        i0.ɵɵelementStart(24, \"label\", 17);\n        i0.ɵɵelementStart(25, \"span\", 18);\n        i0.ɵɵlistener(\"click\", function DemoTopologyComponent_Template_span_click_25_listener() {\n          return ctx.refreshClick();\n        });\n        i0.ɵɵelement(26, \"i\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"div\", 20);\n        i0.ɵɵelementStart(28, \"div\", 21);\n        i0.ɵɵelementStart(29, \"div\", 22);\n        i0.ɵɵelementStart(30, \"input\", 23, 24);\n        i0.ɵɵlistener(\"ngModelChange\", function DemoTopologyComponent_Template_input_ngModelChange_30_listener($event) {\n          return ctx.searchText = $event;\n        })(\"ngModelChange\", function DemoTopologyComponent_Template_input_ngModelChange_30_listener() {\n          return ctx.searchDiagram();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 25);\n        i0.ɵɵelementStart(33, \"img\", 26);\n        i0.ɵɵlistener(\"click\", function DemoTopologyComponent_Template_img_click_33_listener() {\n          return ctx.searchDiagram();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"label\", 27);\n        i0.ɵɵelementStart(35, \"input\", 28);\n        i0.ɵɵlistener(\"change\", function DemoTopologyComponent_Template_input_change_35_listener() {\n          return ctx.accessPoint();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"span\");\n        i0.ɵɵelement(37, \"small\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(38);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"div\", 29);\n        i0.ɵɵelementStart(40, \"div\", 30);\n        i0.ɵɵelementStart(41, \"span\", 31);\n        i0.ɵɵlistener(\"click\", function DemoTopologyComponent_Template_span_click_41_listener($event) {\n          return ctx.changeScaleDiagram($event, \"decrease\");\n        });\n        i0.ɵɵelement(42, \"img\", 32);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(43, \"span\", 33);\n        i0.ɵɵelementStart(44, \"span\", 34);\n        i0.ɵɵlistener(\"click\", function DemoTopologyComponent_Template_span_click_44_listener($event) {\n          return ctx.changeScaleDiagram($event, \"increase\");\n        });\n        i0.ɵɵelement(45, \"img\", 35);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(46, \"div\", 36, 37);\n        i0.ɵɵtemplate(48, DemoTopologyComponent_div_48_Template, 5, 2, \"div\", 38);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.error);\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/\", ctx.MODULE, \"/overview/issues\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵpropertyInterpolate1(\"routerLink\", \"/\", ctx.MODULE, \"/overview/topology\");\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"ngModel\", ctx.searchText);\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate1(\" \", \"Show Connectivity\", \" \");\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngIf\", (ctx.rgArr == null ? null : ctx.rgArr.length) > 0 || (ctx.clientArr == null ? null : ctx.clientArr.length) > 0);\n      }\n    },\n    directives: [i10.SubscriberMenuComponent, i11.NgIf, i4.RouterLinkWithHref, i4.RouterLinkActive, i12.DefaultValueAccessor, i12.NgControlStatus, i12.NgModel, i11.NgForOf],\n    styles: [\".gshHeader{border-color:#a768be;font-size:13px;margin-bottom:7px}.diagram-info[_ngcontent-%COMP%]{width:100%;min-height:500px;margin-top:20px}.toggle-swtbtn[_ngcontent-%COMP%]{display:flex;justify-content:space-between}.toggle-swtbtn[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{margin-right:13px}.toggle-swtbtn[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin-left:40px;cursor:pointer;color:#0279ff;font-size:larger;font-weight:700}.toggle-swtbtn[_ngcontent-%COMP%]   .refreshButton[_ngcontent-%COMP%]   .refreshicon[_ngcontent-%COMP%]{font-size:24px;color:#0279ff;margin-left:30px}.toggle-swtbtn[_ngcontent-%COMP%]   .accessPoint[_ngcontent-%COMP%]{display:flex;justify-content:flex-end}.toggle-swtbtn[_ngcontent-%COMP%]   .accessPoint[_ngcontent-%COMP%]   .zoom[_ngcontent-%COMP%]{margin-left:40px;display:flex}.cus-button[_ngcontent-%COMP%]{float:right;min-width:168px;position:relative;height:42px;display:block;border-radius:60px;border:1px solid #dcdcdc;padding:0 0 0 12px}.cus-button[_ngcontent-%COMP%]   span.icon-hl[_ngcontent-%COMP%]{display:inline-block}.cus-button[_ngcontent-%COMP%]   .bord-right[_ngcontent-%COMP%]{border-right:1px solid #dcdcdc;padding-right:8px}.cus-button[_ngcontent-%COMP%]   .bord-left[_ngcontent-%COMP%]{border-left:1px solid #dcdcdc;padding-left:8px}.cus-button[_ngcontent-%COMP%]   .ng-select-container[_ngcontent-%COMP%]{background-color:#fff!important;border:none!important}.cus-button[_ngcontent-%COMP%]   .ng-dropdown-panel-items[_ngcontent-%COMP%]{overflow-y:hidden!important}.cus-button[_ngcontent-%COMP%]   .ng-dropdown-panel[_ngcontent-%COMP%]   .ng-dropdown-panel-items[_ngcontent-%COMP%]{width:75px!important}.topo-info-box[_ngcontent-%COMP%]{width:100%;padding:15px;background-color:#ebeaef;border-radius:10px}.ng-dropdown-panel[_ngcontent-%COMP%]   .ng-dropdown-panel-items[_ngcontent-%COMP%]{max-height:240px!important}.search-box-input[_ngcontent-%COMP%]{border-radius:26px;background:#F8F8FA;padding:0 0 0 15px;font-size:14px;font-weight:400;width:30%;color:#646363;border:1px solid #dfdfdf;margin-right:5px}.search-box-input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;height:38px;line-height:inherit!important;border-radius:26px;background:transparent;padding:0;font-size:14px;font-weight:400;color:#646363;border:none}.search-box-icon[_ngcontent-%COMP%]{width:42px;height:40px;background-color:#0279ff;padding:10px;border-radius:25px;cursor:pointer}\"]\n  });\n  return DemoTopologyComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}