{"ast":null,"code":"import { map, assign, pick } from 'min-dash';\nimport { isAny } from './util/ModelingUtil';\nimport { is } from '../../util/ModelUtil';\nexport default function BpmnFactory(moddle) {\n  this._model = moddle;\n}\nBpmnFactory.$inject = ['moddle'];\nBpmnFactory.prototype._needsId = function (element) {\n  return isAny(element, ['bpmn:RootElement', 'bpmn:FlowElement', 'bpmn:MessageFlow', 'bpmn:DataAssociation', 'bpmn:Artifact', 'bpmn:Participant', 'bpmn:Lane', 'bpmn:LaneSet', 'bpmn:Process', 'bpmn:Collaboration', 'bpmndi:BPMNShape', 'bpmndi:BPMNEdge', 'bpmndi:BPMNDiagram', 'bpmndi:BPMNPlane', 'bpmn:Property', 'bpmn:CategoryValue']);\n};\nBpmnFactory.prototype._ensureId = function (element) {\n  // generate semantic ids for elements\n  // bpmn:SequenceFlow -> SequenceFlow_ID\n  var prefix;\n  if (is(element, 'bpmn:Activity')) {\n    prefix = 'Activity';\n  } else if (is(element, 'bpmn:Event')) {\n    prefix = 'Event';\n  } else if (is(element, 'bpmn:Gateway')) {\n    prefix = 'Gateway';\n  } else if (isAny(element, ['bpmn:SequenceFlow', 'bpmn:MessageFlow'])) {\n    prefix = 'Flow';\n  } else {\n    prefix = (element.$type || '').replace(/^[^:]*:/g, '');\n  }\n  prefix += '_';\n  if (!element.id && this._needsId(element)) {\n    element.id = this._model.ids.nextPrefixed(prefix, element);\n  }\n};\nBpmnFactory.prototype.create = function (type, attrs) {\n  var element = this._model.create(type, attrs || {});\n  this._ensureId(element);\n  return element;\n};\nBpmnFactory.prototype.createDiLabel = function () {\n  return this.create('bpmndi:BPMNLabel', {\n    bounds: this.createDiBounds()\n  });\n};\nBpmnFactory.prototype.createDiShape = function (semantic, bounds, attrs) {\n  return this.create('bpmndi:BPMNShape', assign({\n    bpmnElement: semantic,\n    bounds: this.createDiBounds(bounds)\n  }, attrs));\n};\nBpmnFactory.prototype.createDiBounds = function (bounds) {\n  return this.create('dc:Bounds', bounds);\n};\nBpmnFactory.prototype.createDiWaypoints = function (waypoints) {\n  var self = this;\n  return map(waypoints, function (pos) {\n    return self.createDiWaypoint(pos);\n  });\n};\nBpmnFactory.prototype.createDiWaypoint = function (point) {\n  return this.create('dc:Point', pick(point, ['x', 'y']));\n};\nBpmnFactory.prototype.createDiEdge = function (semantic, waypoints, attrs) {\n  return this.create('bpmndi:BPMNEdge', assign({\n    bpmnElement: semantic\n  }, attrs));\n};\nBpmnFactory.prototype.createDiPlane = function (semantic) {\n  return this.create('bpmndi:BPMNPlane', {\n    bpmnElement: semantic\n  });\n};","map":null,"metadata":{},"sourceType":"module"}