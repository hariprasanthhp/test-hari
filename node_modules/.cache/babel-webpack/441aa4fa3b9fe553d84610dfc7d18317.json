{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let UriValidatorService = /*#__PURE__*/(() => {\n  class UriValidatorService {\n    constructor() {}\n    uriValidate(str) {\n      var DIGIT = \"[0-9]\";\n      var ALPHA = \"[A-Za-z]\";\n      var HEXDIG = \"[0-9A-Fa-f]\";\n      var DQUOTE = \"\\\"\";\n      //   pct-encoded   = \"%\" HEXDIG HEXDIG\n      var pct_encoded = \"%%\" + HEXDIG + HEXDIG;\n      //   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n      var unreserved = \"(?:\" + ALPHA + \"|\" + DIGIT + \"|\\\\-|\\\\.|_|~)\";\n      //   gen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\n      var gen_delims = \"(?::|/|\\\\?|#|\\\\[|\\\\]|@)\";\n      //   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n      //                 / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n      var sub_delims = \"(?:!|\\\\$|&|'|\\\\(|\\\\)|\\\\*|\\\\+|,|;|=)\";\n      //   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n      var pchar = \"(?:\" + unreserved + \"|\" + pct_encoded + \"|\" + sub_delims + \"|:|@)\";\n      //   reserved      = gen-delims / sub-delims\n      var reserved = \"(?:\" + gen_delims + \"|\" + sub_delims + \")\";\n      //// scheme\n      //   scheme        = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n      var scheme = ALPHA + \"(?:\" + ALPHA + \"|\" + DIGIT + \"|\\\\+|\\\\-|\\\\.)*\";\n      //// authority\n      //   dec-octet     = DIGIT                 ; 0-9\n      //                 / %x31-39 DIGIT         ; 10-99\n      //                 / \"1\" 2DIGIT            ; 100-199\n      //                 / \"2\" %x30-34 DIGIT     ; 200-249\n      //                 / \"25\" %x30-35          ; 250-255\n      var dec_octet = \"(?:\" + DIGIT + \"|[1-9]\" + DIGIT + \"|1\" + DIGIT + \"{2}|2[0-4]\" + DIGIT + \"|25[0-5])\";\n      //  IPv4address   = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\n      var IPv4address = dec_octet + \"\\\\.\" + dec_octet + \"\\\\.\" + dec_octet + \"\\\\.\" + dec_octet;\n      //  h16           = 1*4HEXDIG\n      var h16 = \"(?:\" + HEXDIG + \"){1,4}\";\n      //  ls32          = ( h16 \":\" h16 ) / IPv4address\n      var ls32 = \"(?:(?:\" + h16 + \":\" + h16 + \")|\" + IPv4address + \")\";\n      //   IPv6address   =                            6( h16 \":\" ) ls32\n      //                 /                       \"::\" 5( h16 \":\" ) ls32\n      //                 / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n      //                 / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n      //                 / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n      //                 / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n      //                 / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n      //                 / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n      //                 / [ *6( h16 \":\" ) h16 ] \"::\"\n      var IPv6address = \"(?:(?:\" + h16 + \":){6}\" + ls32 + \"|::(?:\" + h16 + \":){5}\" + ls32 + \"|(?:\" + h16 + \")?::(?:\" + h16 + \":){4}\" + ls32 + \"|(?:(?:\" + h16 + \":){0,1}\" + h16 + \")?::(?:\" + h16 + \":){3}\" + ls32 + \"|(?:(?:\" + h16 + \":){0,2}\" + h16 + \")?::(?:\" + h16 + \":){2}\" + ls32 + \"|(?:(?:\" + h16 + \":){0,3}\" + h16 + \")?::\" + h16 + \":\" + ls32 + \"|(?:(?:\" + h16 + \":){0,4}\" + h16 + \")?::\" + ls32 + \"|(?:(?:\" + h16 + \":){0,5}\" + h16 + \")?::\" + h16 + \"|(?:(?:\" + h16 + \":){0,6}\" + h16 + \")?::)\";\n      //   IPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n      var IPvFuture = \"v\" + HEXDIG + \"+\\\\.(?:\" + unreserved + \"|\" + sub_delims + \"|:)+\";\n      //   IP-literal    = \"[\" ( IPv6address / IPvFuture  ) \"]\"\n      var IP_literal = \"\\\\[(?:\" + IPv6address + \"|\" + IPvFuture + \")\\\\]\";\n      //   reg-name      = *( unreserved / pct-encoded / sub-delims )\n      var reg_name = \"(?:\" + unreserved + \"|\" + pct_encoded + \"|\" + sub_delims + \")*\";\n      //   userinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\n      var userinfo = \"(?:\" + unreserved + \"|\" + pct_encoded + \"|\" + sub_delims + \"|:)*\";\n      //   host          = IP-literal / IPv4address / reg-name\n      var host = \"(?:\" + IP_literal + \"|\" + IPv4address + \"|\" + reg_name + \")\";\n      //   port          = *DIGIT\n      var port = \"(?:\" + DIGIT + \")*\";\n      //   authority     = [ userinfo \"@\" ] host [ \":\" port ]\n      var authority = \"(?:\" + userinfo + \"@)?\" + host + \"(?::\" + port + \")?\";\n      //// Path\n      //   segment       = *pchar\n      var segment = pchar + \"*\";\n      //   segment-nz    = 1*pchar\n      var segment_nz = pchar + \"+\";\n      //   segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / \"@\" )\n      //                 ; non-zero-length segment without any colon \":\"\n      var segment_nz_nc = \"(?:\" + unreserved + \"|\" + pct_encoded + \"|\" + sub_delims + \"|@)+\";\n      //   path-abempty  = *( \"/\" segment )\n      var path_abempty = \"(?:/\" + segment + \")*\";\n      //   path-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\n      var path_absolute = \"/(?:\" + segment_nz + \"(?:/\" + segment + \")*)?\";\n      //   path-noscheme = segment-nz-nc *( \"/\" segment )\n      var path_noscheme = segment_nz_nc + \"(?:/\" + segment + \")*\";\n      //   path-rootless = segment-nz *( \"/\" segment )\n      var path_rootless = segment_nz + \"(?:/\" + segment + \")*\";\n      //   path-empty    = 0<pchar>\n      var path_empty = \"\";\n      //   path          = path-abempty    ; begins with \"/\" or is empty\n      //                 / path-absolute   ; begins with \"/\" but not \"//\"\n      //                 / path-noscheme   ; begins with a non-colon segment\n      //                 / path-rootless   ; begins with a segment\n      //                 / path-empty      ; zero characters\n      var path = \"(?:\" + path_abempty + \"|\" + path_absolute + \"|\" + path_noscheme + \"|\" + path_rootless + \"|\" + path_empty + \")\";\n      //// Query and Fragment\n      //   query         = *( pchar / \"/\" / \"?\" )\n      var query = \"(?:\" + pchar + \"|/|\\\\?)*\";\n      //   fragment      = *( pchar / \"/\" / \"?\" )\n      var fragment = \"(?:\" + pchar + \"|/|\\\\?)*\";\n      //// URIs\n      //   hier-part     = \"//\" authority path-abempty\n      //                 / path-absolute\n      //                 / path-rootless\n      //                 / path-empty\n      var hier_part = \"(?:(?://\" + authority + path_abempty + \")|\" + path_absolute + \"|\" + path_rootless + \"|\" + path_empty + \")\";\n      //   relative-part = \"//\" authority path-abempty\n      //                 / path-absolute\n      //                 / path-noscheme\n      //                 / path-empty\n      var relative_part = \"(?:(?://\" + authority + path_abempty + \")|\" + path_absolute + \"|\" + path_noscheme + \"|\" + path_empty + \")\";\n      //   relative-ref  = relative-part [ \"?\" query ] [ \"#\" fragment ]\n      var relative_ref = relative_part + \"(?:\\\\?\" + query + \")?(?:#\" + fragment + \")?\";\n      //   URI           = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n      var URI = \"(?:\" + scheme + \":\" + hier_part + \"(?:\\\\?\" + query + \")?(?:#\" + fragment + \")?)\";\n      //   URI-reference = URI / relative-ref\n      var URI_reference = \"(?:\" + URI + \"|\" + relative_ref + \")\";\n      //   absolute-URI  = scheme \":\" hier-part [ \"?\" query ]\n      var absolute_URI = \"(?:\" + scheme + \":\" + hier_part + \"(?:\\\\?\" + query + \")?)\";\n      //// HTTP[S] - RFC7230\n      // http-URI = \"http:\" \"//\" authority path-abempty [ \"?\" query ]\n      //             [ \"#\" fragment ]\n      var http_URI = \"(?:http://\" + authority + path_abempty + \"(?:\\\\?\" + query + \")?(?:#\" + fragment + \")?)\";\n      // https-URI = \"https:\" \"//\" authority path-abempty [ \"?\" query ]\n      //              [ \"#\" fragment ]\n      var https_URI = \"(?:https://\" + authority + path_abempty + \"(?:\\\\?\" + query + \")?(?:#\" + fragment + \")?)\";\n      //// WS[S] - RFC6455\n      // ws-URI = \"ws:\" \"//\" host [ \":\" port ] path [ \"?\" query ]\n      var ws_URI = \"(?:ws://\" + host + \"(?::\" + port + \")?\" + path + \"(?:\\\\?\" + query + \")?)\";\n      // wss-URI = \"wss:\" \"//\" host [ \":\" port ] path [ \"?\" query ]\n      var wss_URI = \"(?:wss://\" + host + \"(?::\" + port + \")?\" + path + \"(?:\\\\?\" + query + \")?)\";\n      //// mailto - RFC6068\n      // some-delims  = \"!\" / \"$\" / \"'\" / \"(\" / \")\" / \"*\"\n      //            / \"+\" / \",\" / \";\" / \":\" / \"@\"\n      var some_delims = \"(?:!|\\\\$|'|\\\\(|\\\\)|\\\\*\\\\+|,|;|:|@)\";\n      // qchar        = unreserved / pct-encoded / some-delims\n      var qchar = \"(?:\" + unreserved + \"|\" + pct_encoded + \"|\" + some_delims + \")\";\n      // dtext-no-obs = %d33-90 / ; Printable US-ASCII\n      //              %d94-126  ; characters not including\n      //                        ; \"[\", \"]\", or \"\\\"\n      var dtext_no_obs = \"(?:[!-[^-~])\";\n      // atext           =   ALPHA / DIGIT /    ; Printable US-ASCII\n      //                     \"!\" / \"#\" /        ;  characters not including\n      //                     \"$\" / \"%\" /        ;  specials.  Used for atoms.\n      //                     \"&\" / \"'\" /\n      //                     \"*\" / \"+\" /\n      //                     \"-\" / \"/\" /\n      //                     \"=\" / \"?\" /\n      //                     \"^\" / \"_\" /\n      //                     \"`\" / \"{\" /\n      //                     \"|\" / \"}\" /\n      //                     \"~\"\n      // \n      // dot-atom-text   =   1*atext *(\".\" 1*atext)\n      var rfc5322_atext = \"(?:\" + ALPHA + \"|\" + DIGIT + \"|!|#|\\\\$|%%|&|'|\\\\*|\\\\+|-|/|=|\\\\?|\\\\^|_|`|{|\\\\||}|~)\";\n      var rfc5322_dot_atom_text = \"(?:\" + rfc5322_atext + \"{1,}(?:.\" + rfc5322_atext + \"{1,})*)\";\n      var qcontent;\n      var rfc5322_FWS;\n      var rfc5322_CFWS;\n      qcontent = rfc5322_FWS = rfc5322_CFWS = \"(?:)\";\n      // quoted-string   =   [CFWS]\n      //                     DQUOTE *([FWS] qcontent) [FWS] DQUOTE\n      //                     [CFWS]\n      var rfc5322_quoted_string = \"(?:(?:\" + rfc5322_CFWS + \")?\" + DQUOTE + \"(?:(?:\" + rfc5322_FWS + \")?\" + qcontent + \")*(?:\" + rfc5322_FWS + \")?\" + DQUOTE + \"(?:\" + rfc5322_CFWS + \")?)\";\n      // domain       = dot-atom-text / \"[\" *dtext-no-obs \"]\"\n      var domain = \"(?:\" + rfc5322_dot_atom_text + \"|(?:\\\\[\" + dtext_no_obs + \"*\\\\]))\";\n      // local-part   = dot-atom-text / quoted-string\n      var local_part = \"(?:\" + rfc5322_dot_atom_text + \"|\" + rfc5322_quoted_string + \")\";\n      // addr-spec    = local-part \"@\" domain\n      var addr_spec = \"(?:\" + local_part + \"@\" + domain + \")\";\n      // hfvalue      = *qchar\n      var hfvalue = \"(?:\" + qchar + \"*)\";\n      // hfname       = *qchar\n      var hfname = \"(?:\" + qchar + \"*)\";\n      // hfield       = hfname \"=\" hfvalue\n      var hfield = \"(?:\" + hfname + \"=\" + hfvalue + \")\";\n      // to           = addr-spec *(\",\" addr-spec )\n      var to = \"(?:\" + addr_spec + \"(?:,\" + addr_spec + \")*)\";\n      // hfields      = \"?\" hfield *( \"&\" hfield )\n      var hfields = \"(?:\\\\?\" + hfield + \"(?:&\" + hfield + \")*)\";\n      // mailtoURI    = \"mailto:\" [ to ] [ hfields ]\n      var mailto_URI = \"(?:mailto:(?:\" + to + \")?(?:\" + hfields + \")?)\";\n      //// data - RFC2397 (+ RFC2045)\n      // ietf-token := <An extension token defined by a\n      //                standards-track RFC and registered\n      //                with IANA.>\n      var rfc2045_token = \"(?:[0-z]+)\";\n      var rfc2045_ietf_token = rfc2045_token;\n      var rfc2045_iana_tokens = rfc2045_token;\n      // x-token := <The two characters \"X-\" or \"x-\" followed, with\n      //             no intervening white space, by any token>\n      var rfc2045_x_token = \"(?:[xX]-\" + rfc2045_token + \")\";\n      // extension-token := ietf-token / x-token\n      var rfc2045_extension_token = \"(?:\" + rfc2045_ietf_token + \"|\" + rfc2045_x_token + \")\";\n      // discrete-type := \"text\" / \"image\" / \"audio\" / \"video\" /\n      //                  \"application\" / extension-token\n      var rfc2045_discrete_type = \"(?:text|image|audio|video|application|\" + rfc2045_extension_token + \")\";\n      // composite-type := \"message\" / \"multipart\" / extension-token\n      var rfc2045_composite_type = \"(?:message|multipart|\" + rfc2045_extension_token + \")\";\n      // type := discrete-type / composite-type\n      var rfc2045_type = \"(?:\" + rfc2045_discrete_type + \"|\" + rfc2045_composite_type + \")\";\n      // subtype := extension-token / iana-token\n      var rfc2045_subtype = \"(?:\" + rfc2045_extension_token + \"|\" + rfc2045_iana_tokens + \")\";\n      // parameter  := attribute \"=\" value\n      // attribute := token\n      //              ; Matching of attributes\n      //              ; is ALWAYS case-insensitive.\n      // \n      // value := token / quoted-string\n      var rfc2045_quoted_string = \"(?:)\";\n      var rfc2045_attribute = \"(?:\" + rfc2045_token + \")\";\n      var rfc2045_value = \"(?:\" + rfc2045_token + \"|\" + rfc2045_quoted_string + \")\";\n      var rfc2045_parameter = \"(?:\" + rfc2045_attribute + \"=\" + rfc2045_value + \")\";\n      // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n      var mediatype = \"(?:(?:\" + rfc2045_type + \"/\" + rfc2045_subtype + \")?(?:;\" + rfc2045_parameter + \")*)\";\n      // uric          = reserved | unreserved | escaped  // 2396\n      // data       := *urlchar\n      var rfc2396_uric = \"(?:\" + reserved + \"|\" + unreserved + \"|\" + pct_encoded + \")\";\n      var data = \"(?:\" + rfc2396_uric + \"*)\";\n      // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n      var data_URI = \"(?:data:(?:\" + mediatype + \")?(?:;base64)?,\" + data + \")\";\n      //// gopher - RFC4266\n      // gopher://<host>:<port>/<gopher-path>\n      var gopher_path = path;\n      var gopher_URI = \"(?:gopher://\" + host + \":\" + port + \"/\" + gopher_path + \")\";\n      //// file - draft-kerwin-file-scheme-13\n      // f-scheme       = \"file\"\n      var file_f_scheme = \"(?:file)\";\n      // f-auth         = [ userinfo \"@\" ] host\n      var file_f_auth = \"(?:(?:\" + userinfo + \"@)?\" + host + \")\";\n      // unc-path       = 2*3\"/\" authority path-absolute\n      var file_unc_path = \"(?:/{2,3}\" + authority + path_absolute + \")\";\n      // drive-marker   = \":\" / \"|\"\n      var file_drive_marker = \"(?::|\\\\|)\";\n      // drive-letter   = ALPHA [ drive-marker ]\n      var file_drive_letter = \"(?:\" + ALPHA + \"(?:\" + file_drive_marker + \")?)\";\n      // windows-path   = drive-letter path-absolute\n      var file_windows_path = \"(?:\" + file_drive_letter + path_absolute + \")\";\n      // local-path     = path-absolute\n      //                / windows-path\n      var file_local_path = \"(?:\" + path_absolute + \"|\" + file_windows_path + \")\";\n      // auth-path      = [ f-auth ] path-absolute\n      //                / unc-path\n      //                / windows-path\n      var file_auth_path = \"(?:(?:\" + file_f_auth + \"?\" + path_absolute + \")|\" + file_unc_path + \"|\" + file_windows_path + \")\";\n      // f-hier-part    = \"//\" auth-path\n      //                / local-path\n      var file_f_hier_part = \"(?:(?://\" + file_auth_path + \")|\" + file_local_path + \")\";\n      // file-URI       = f-scheme \":\" f-hier-part [ \"?\" query ]\n      var file_URI = \"(?:\" + file_f_scheme + \":\" + file_f_hier_part + \"(?:\\\\?\" + query + \")?)\";\n      var known = {\n        http: http_URI,\n        https: https_URI,\n        ws: ws_URI,\n        wss: wss_URI,\n        mailto: mailto_URI,\n        data: data_URI,\n        gopher: gopher_URI,\n        file: file_URI\n      };\n      if (!new RegExp(\"^\" + URI_reference + \"$\").test(str)) {\n        return false;\n      } else if (str.indexOf(\":\") == -1) {\n        return true;\n      } else {\n        var scheme = str.split(\":\")[0].toLowerCase();\n        if (!known[scheme]) return true;\n        return new RegExp(\"^\" + known[scheme] + \"($|#\" + fragment + \")\").test(str);\n      }\n    }\n  }\n  UriValidatorService.ɵfac = function UriValidatorService_Factory(t) {\n    return new (t || UriValidatorService)();\n  };\n  UriValidatorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UriValidatorService,\n    factory: UriValidatorService.ɵfac,\n    providedIn: 'root'\n  });\n  return UriValidatorService;\n})();","map":null,"metadata":{},"sourceType":"module"}