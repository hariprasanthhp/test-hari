{"ast":null,"code":"import { isCmd, isKey, isShift } from './KeyboardUtil';\nvar LOW_PRIORITY = 500;\nexport var KEYCODE_C = 67;\nexport var KEYCODE_V = 86;\nexport var KEYCODE_Y = 89;\nexport var KEYCODE_Z = 90;\nexport var KEYS_COPY = ['c', 'C', KEYCODE_C];\nexport var KEYS_PASTE = ['v', 'V', KEYCODE_V];\nexport var KEYS_REDO = ['y', 'Y', KEYCODE_Y];\nexport var KEYS_UNDO = ['z', 'Z', KEYCODE_Z];\n\n/**\n * Adds default keyboard bindings.\n *\n * This does not pull in any features will bind only actions that\n * have previously been registered against the editorActions component.\n *\n * @param {EventBus} eventBus\n * @param {Keyboard} keyboard\n */\nexport default function KeyboardBindings(eventBus, keyboard) {\n  var self = this;\n  eventBus.on('editorActions.init', LOW_PRIORITY, function (event) {\n    var editorActions = event.editorActions;\n    self.registerBindings(keyboard, editorActions);\n  });\n}\nKeyboardBindings.$inject = ['eventBus', 'keyboard'];\n\n/**\n * Register available keyboard bindings.\n *\n * @param {Keyboard} keyboard\n * @param {EditorActions} editorActions\n */\nKeyboardBindings.prototype.registerBindings = function (keyboard, editorActions) {\n  /**\n   * Add keyboard binding if respective editor action\n   * is registered.\n   *\n   * @param {string} action name\n   * @param {Function} fn that implements the key binding\n   */\n  function addListener(action, fn) {\n    if (editorActions.isRegistered(action)) {\n      keyboard.addListener(fn);\n    }\n  }\n\n  // undo\n  // (CTRL|CMD) + Z\n  addListener('undo', function (context) {\n    var event = context.keyEvent;\n    if (isCmd(event) && !isShift(event) && isKey(KEYS_UNDO, event)) {\n      editorActions.trigger('undo');\n      return true;\n    }\n  });\n\n  // redo\n  // CTRL + Y\n  // CMD + SHIFT + Z\n  addListener('redo', function (context) {\n    var event = context.keyEvent;\n    if (isCmd(event) && (isKey(KEYS_REDO, event) || isKey(KEYS_UNDO, event) && isShift(event))) {\n      editorActions.trigger('redo');\n      return true;\n    }\n  });\n\n  // copy\n  // CTRL/CMD + C\n  addListener('copy', function (context) {\n    var event = context.keyEvent;\n    if (isCmd(event) && isKey(KEYS_COPY, event)) {\n      editorActions.trigger('copy');\n      return true;\n    }\n  });\n\n  // paste\n  // CTRL/CMD + V\n  addListener('paste', function (context) {\n    var event = context.keyEvent;\n    if (isCmd(event) && isKey(KEYS_PASTE, event)) {\n      editorActions.trigger('paste');\n      return true;\n    }\n  });\n\n  // zoom in one step\n  // CTRL/CMD + +\n  addListener('stepZoom', function (context) {\n    var event = context.keyEvent;\n\n    // quirk: it has to be triggered by `=` as well to work on international keyboard layout\n    // cf: https://github.com/bpmn-io/bpmn-js/issues/1362#issuecomment-722989754\n    if (isKey(['+', 'Add', '='], event) && isCmd(event)) {\n      editorActions.trigger('stepZoom', {\n        value: 1\n      });\n      return true;\n    }\n  });\n\n  // zoom out one step\n  // CTRL + -\n  addListener('stepZoom', function (context) {\n    var event = context.keyEvent;\n    if (isKey(['-', 'Subtract'], event) && isCmd(event)) {\n      editorActions.trigger('stepZoom', {\n        value: -1\n      });\n      return true;\n    }\n  });\n\n  // zoom to the default level\n  // CTRL + 0\n  addListener('zoom', function (context) {\n    var event = context.keyEvent;\n    if (isKey('0', event) && isCmd(event)) {\n      editorActions.trigger('zoom', {\n        value: 1\n      });\n      return true;\n    }\n  });\n\n  // delete selected element\n  // DEL\n  addListener('removeSelection', function (context) {\n    var event = context.keyEvent;\n    if (isKey(['Backspace', 'Delete', 'Del'], event)) {\n      editorActions.trigger('removeSelection');\n      return true;\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}