{"ast":null,"code":"import { getMid } from '../../layout/LayoutUtil';\nimport { isNil, isObject } from 'min-dash';\nexport default function Connect(eventBus, dragging, modeling, rules) {\n  // rules\n\n  function canConnect(source, target) {\n    return rules.allowed('connection.create', {\n      source: source,\n      target: target\n    });\n  }\n  function canConnectReverse(source, target) {\n    return canConnect(target, source);\n  }\n\n  // event handlers\n\n  eventBus.on('connect.hover', function (event) {\n    var context = event.context,\n      start = context.start,\n      hover = event.hover,\n      canExecute;\n\n    // cache hover state\n    context.hover = hover;\n    canExecute = context.canExecute = canConnect(start, hover);\n\n    // ignore hover\n    if (isNil(canExecute)) {\n      return;\n    }\n    if (canExecute !== false) {\n      context.source = start;\n      context.target = hover;\n      return;\n    }\n    canExecute = context.canExecute = canConnectReverse(start, hover);\n\n    // ignore hover\n    if (isNil(canExecute)) {\n      return;\n    }\n    if (canExecute !== false) {\n      context.source = hover;\n      context.target = start;\n    }\n  });\n  eventBus.on(['connect.out', 'connect.cleanup'], function (event) {\n    var context = event.context;\n    context.hover = null;\n    context.source = null;\n    context.target = null;\n    context.canExecute = false;\n  });\n  eventBus.on('connect.end', function (event) {\n    var context = event.context,\n      canExecute = context.canExecute,\n      connectionStart = context.connectionStart,\n      connectionEnd = {\n        x: event.x,\n        y: event.y\n      },\n      source = context.source,\n      target = context.target;\n    if (!canExecute) {\n      return false;\n    }\n    var attrs = null,\n      hints = {\n        connectionStart: isReverse(context) ? connectionEnd : connectionStart,\n        connectionEnd: isReverse(context) ? connectionStart : connectionEnd\n      };\n    if (isObject(canExecute)) {\n      attrs = canExecute;\n    }\n    modeling.connect(source, target, attrs, hints);\n  });\n\n  // API\n\n  /**\n   * Start connect operation.\n   *\n   * @param {DOMEvent} event\n   * @param {djs.model.Base} start\n   * @param {Point} [connectionStart]\n   * @param {boolean} [autoActivate=false]\n   */\n  this.start = function (event, start, connectionStart, autoActivate) {\n    if (!isObject(connectionStart)) {\n      autoActivate = connectionStart;\n      connectionStart = getMid(start);\n    }\n    dragging.init(event, 'connect', {\n      autoActivate: autoActivate,\n      data: {\n        shape: start,\n        context: {\n          start: start,\n          connectionStart: connectionStart\n        }\n      }\n    });\n  };\n}\nConnect.$inject = ['eventBus', 'dragging', 'modeling', 'rules'];\n\n// helpers //////////\n\nexport function isReverse(context) {\n  var hover = context.hover,\n    source = context.source,\n    target = context.target;\n  return hover && source && hover === source && source !== target;\n}","map":null,"metadata":{},"sourceType":"module"}