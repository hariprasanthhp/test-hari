{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\nvar LOW_PRIORITY = 500,\n  HIGH_PRIORITY = 5000;\n\n/**\n * BPMN specific delete lane behavior\n */\nexport default function UpdateFlowNodeRefsBehavior(eventBus, modeling, translate) {\n  CommandInterceptor.call(this, eventBus);\n\n  /**\n   * Ok, this is it:\n   *\n   * We have to update the Lane#flowNodeRefs _and_\n   * FlowNode#lanes with every FlowNode move/resize and\n   * Lane move/resize.\n   *\n   * We want to group that stuff to recompute containments\n   * as efficient as possible.\n   *\n   * Yea!\n   */\n\n  // the update context\n  var context;\n  function initContext() {\n    context = context || new UpdateContext();\n    context.enter();\n    return context;\n  }\n  function getContext() {\n    if (!context) {\n      throw new Error(translate('out of bounds release'));\n    }\n    return context;\n  }\n  function releaseContext() {\n    if (!context) {\n      throw new Error(translate('out of bounds release'));\n    }\n    var triggerUpdate = context.leave();\n    if (triggerUpdate) {\n      modeling.updateLaneRefs(context.flowNodes, context.lanes);\n      context = null;\n    }\n    return triggerUpdate;\n  }\n  var laneRefUpdateEvents = ['spaceTool', 'lane.add', 'lane.resize', 'lane.split', 'elements.create', 'elements.delete', 'elements.move', 'shape.create', 'shape.delete', 'shape.move', 'shape.resize'];\n\n  // listen to a lot of stuff to group lane updates\n\n  this.preExecute(laneRefUpdateEvents, HIGH_PRIORITY, function (event) {\n    initContext();\n  });\n  this.postExecuted(laneRefUpdateEvents, LOW_PRIORITY, function (event) {\n    releaseContext();\n  });\n\n  // Mark flow nodes + lanes that need an update\n\n  this.preExecute(['shape.create', 'shape.move', 'shape.delete', 'shape.resize'], function (event) {\n    var context = event.context,\n      shape = context.shape;\n    var updateContext = getContext();\n\n    // no need to update labels\n    if (shape.labelTarget) {\n      return;\n    }\n    if (is(shape, 'bpmn:Lane')) {\n      updateContext.addLane(shape);\n    }\n    if (is(shape, 'bpmn:FlowNode')) {\n      updateContext.addFlowNode(shape);\n    }\n  });\n}\nUpdateFlowNodeRefsBehavior.$inject = ['eventBus', 'modeling', 'translate'];\ninherits(UpdateFlowNodeRefsBehavior, CommandInterceptor);\nfunction UpdateContext() {\n  this.flowNodes = [];\n  this.lanes = [];\n  this.counter = 0;\n  this.addLane = function (lane) {\n    this.lanes.push(lane);\n  };\n  this.addFlowNode = function (flowNode) {\n    this.flowNodes.push(flowNode);\n  };\n  this.enter = function () {\n    this.counter++;\n  };\n  this.leave = function () {\n    this.counter--;\n    return !this.counter;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}