{"ast":null,"code":"import { uniqueBy, isArray } from 'min-dash';\n\n/**\n * A service that offers un- and redoable execution of commands.\n *\n * The command stack is responsible for executing modeling actions\n * in a un- and redoable manner. To do this it delegates the actual\n * command execution to {@link CommandHandler}s.\n *\n * Command handlers provide {@link CommandHandler#execute(ctx)} and\n * {@link CommandHandler#revert(ctx)} methods to un- and redo a command\n * identified by a command context.\n *\n *\n * ## Life-Cycle events\n *\n * In the process the command stack fires a number of life-cycle events\n * that other components to participate in the command execution.\n *\n *    * preExecute\n *    * preExecuted\n *    * execute\n *    * executed\n *    * postExecute\n *    * postExecuted\n *    * revert\n *    * reverted\n *\n * A special event is used for validating, whether a command can be\n * performed prior to its execution.\n *\n *    * canExecute\n *\n * Each of the events is fired as `commandStack.{eventName}` and\n * `commandStack.{commandName}.{eventName}`, respectively. This gives\n * components fine grained control on where to hook into.\n *\n * The event object fired transports `command`, the name of the\n * command and `context`, the command context.\n *\n *\n * ## Creating Command Handlers\n *\n * Command handlers should provide the {@link CommandHandler#execute(ctx)}\n * and {@link CommandHandler#revert(ctx)} methods to implement\n * redoing and undoing of a command.\n *\n * A command handler _must_ ensure undo is performed properly in order\n * not to break the undo chain. It must also return the shapes that\n * got changed during the `execute` and `revert` operations.\n *\n * Command handlers may execute other modeling operations (and thus\n * commands) in their `preExecute` and `postExecute` phases. The command\n * stack will properly group all commands together into a logical unit\n * that may be re- and undone atomically.\n *\n * Command handlers must not execute other commands from within their\n * core implementation (`execute`, `revert`).\n *\n *\n * ## Change Tracking\n *\n * During the execution of the CommandStack it will keep track of all\n * elements that have been touched during the command's execution.\n *\n * At the end of the CommandStack execution it will notify interested\n * components via an 'elements.changed' event with all the dirty\n * elements.\n *\n * The event can be picked up by components that are interested in the fact\n * that elements have been changed. One use case for this is updating\n * their graphical representation after moving / resizing or deletion.\n *\n * @see CommandHandler\n *\n * @param {EventBus} eventBus\n * @param {Injector} injector\n */\nexport default function CommandStack(eventBus, injector) {\n  /**\n   * A map of all registered command handlers.\n   *\n   * @type {Object}\n   */\n  this._handlerMap = {};\n\n  /**\n   * A stack containing all re/undoable actions on the diagram\n   *\n   * @type {Array<Object>}\n   */\n  this._stack = [];\n\n  /**\n   * The current index on the stack\n   *\n   * @type {number}\n   */\n  this._stackIdx = -1;\n\n  /**\n   * Current active commandStack execution\n   *\n   * @type {Object}\n   * @property {Object[]} actions\n   * @property {Object[]} dirty\n   * @property { 'undo' | 'redo' | 'clear' | 'execute' | null } trigger the cause of the current excecution\n   */\n  this._currentExecution = {\n    actions: [],\n    dirty: [],\n    trigger: null\n  };\n  this._injector = injector;\n  this._eventBus = eventBus;\n  this._uid = 1;\n  eventBus.on(['diagram.destroy', 'diagram.clear'], function () {\n    this.clear(false);\n  }, this);\n}\nCommandStack.$inject = ['eventBus', 'injector'];\n\n/**\n * Execute a command\n *\n * @param {string} command the command to execute\n * @param {Object} context the environment to execute the command in\n */\nCommandStack.prototype.execute = function (command, context) {\n  if (!command) {\n    throw new Error('command required');\n  }\n  this._currentExecution.trigger = 'execute';\n  var action = {\n    command: command,\n    context: context\n  };\n  this._pushAction(action);\n  this._internalExecute(action);\n  this._popAction(action);\n};\n\n/**\n * Ask whether a given command can be executed.\n *\n * Implementors may hook into the mechanism on two ways:\n *\n *   * in event listeners:\n *\n *     Users may prevent the execution via an event listener.\n *     It must prevent the default action for `commandStack.(<command>.)canExecute` events.\n *\n *   * in command handlers:\n *\n *     If the method {@link CommandHandler#canExecute} is implemented in a handler\n *     it will be called to figure out whether the execution is allowed.\n *\n * @param  {string} command the command to execute\n * @param  {Object} context the environment to execute the command in\n *\n * @return {boolean} true if the command can be executed\n */\nCommandStack.prototype.canExecute = function (command, context) {\n  var action = {\n    command: command,\n    context: context\n  };\n  var handler = this._getHandler(command);\n  var result = this._fire(command, 'canExecute', action);\n\n  // handler#canExecute will only be called if no listener\n  // decided on a result already\n  if (result === undefined) {\n    if (!handler) {\n      return false;\n    }\n    if (handler.canExecute) {\n      result = handler.canExecute(context);\n    }\n  }\n  return result;\n};\n\n/**\n * Clear the command stack, erasing all undo / redo history\n */\nCommandStack.prototype.clear = function (emit) {\n  this._stack.length = 0;\n  this._stackIdx = -1;\n  if (emit !== false) {\n    this._fire('changed', {\n      trigger: 'clear'\n    });\n  }\n};\n\n/**\n * Undo last command(s)\n */\nCommandStack.prototype.undo = function () {\n  var action = this._getUndoAction(),\n    next;\n  if (action) {\n    this._currentExecution.trigger = 'undo';\n    this._pushAction(action);\n    while (action) {\n      this._internalUndo(action);\n      next = this._getUndoAction();\n      if (!next || next.id !== action.id) {\n        break;\n      }\n      action = next;\n    }\n    this._popAction();\n  }\n};\n\n/**\n * Redo last command(s)\n */\nCommandStack.prototype.redo = function () {\n  var action = this._getRedoAction(),\n    next;\n  if (action) {\n    this._currentExecution.trigger = 'redo';\n    this._pushAction(action);\n    while (action) {\n      this._internalExecute(action, true);\n      next = this._getRedoAction();\n      if (!next || next.id !== action.id) {\n        break;\n      }\n      action = next;\n    }\n    this._popAction();\n  }\n};\n\n/**\n * Register a handler instance with the command stack\n *\n * @param {string} command\n * @param {CommandHandler} handler\n */\nCommandStack.prototype.register = function (command, handler) {\n  this._setHandler(command, handler);\n};\n\n/**\n * Register a handler type with the command stack\n * by instantiating it and injecting its dependencies.\n *\n * @param {string} command\n * @param {Function} a constructor for a {@link CommandHandler}\n */\nCommandStack.prototype.registerHandler = function (command, handlerCls) {\n  if (!command || !handlerCls) {\n    throw new Error('command and handlerCls must be defined');\n  }\n  var handler = this._injector.instantiate(handlerCls);\n  this.register(command, handler);\n};\nCommandStack.prototype.canUndo = function () {\n  return !!this._getUndoAction();\n};\nCommandStack.prototype.canRedo = function () {\n  return !!this._getRedoAction();\n};\n\n// stack access  //////////////////////\n\nCommandStack.prototype._getRedoAction = function () {\n  return this._stack[this._stackIdx + 1];\n};\nCommandStack.prototype._getUndoAction = function () {\n  return this._stack[this._stackIdx];\n};\n\n// internal functionality //////////////////////\n\nCommandStack.prototype._internalUndo = function (action) {\n  var self = this;\n  var command = action.command,\n    context = action.context;\n  var handler = this._getHandler(command);\n\n  // guard against illegal nested command stack invocations\n  this._atomicDo(function () {\n    self._fire(command, 'revert', action);\n    if (handler.revert) {\n      self._markDirty(handler.revert(context));\n    }\n    self._revertedAction(action);\n    self._fire(command, 'reverted', action);\n  });\n};\nCommandStack.prototype._fire = function (command, qualifier, event) {\n  if (arguments.length < 3) {\n    event = qualifier;\n    qualifier = null;\n  }\n  var names = qualifier ? [command + '.' + qualifier, qualifier] : [command],\n    i,\n    name,\n    result;\n  event = this._eventBus.createEvent(event);\n  for (i = 0; name = names[i]; i++) {\n    result = this._eventBus.fire('commandStack.' + name, event);\n    if (event.cancelBubble) {\n      break;\n    }\n  }\n  return result;\n};\nCommandStack.prototype._createId = function () {\n  return this._uid++;\n};\nCommandStack.prototype._atomicDo = function (fn) {\n  var execution = this._currentExecution;\n  execution.atomic = true;\n  try {\n    fn();\n  } finally {\n    execution.atomic = false;\n  }\n};\nCommandStack.prototype._internalExecute = function (action, redo) {\n  var self = this;\n  var command = action.command,\n    context = action.context;\n  var handler = this._getHandler(command);\n  if (!handler) {\n    throw new Error('no command handler registered for <' + command + '>');\n  }\n  this._pushAction(action);\n  if (!redo) {\n    this._fire(command, 'preExecute', action);\n    if (handler.preExecute) {\n      handler.preExecute(context);\n    }\n    this._fire(command, 'preExecuted', action);\n  }\n\n  // guard against illegal nested command stack invocations\n  this._atomicDo(function () {\n    self._fire(command, 'execute', action);\n    if (handler.execute) {\n      // actual execute + mark return results as dirty\n      self._markDirty(handler.execute(context));\n    }\n\n    // log to stack\n    self._executedAction(action, redo);\n    self._fire(command, 'executed', action);\n  });\n  if (!redo) {\n    this._fire(command, 'postExecute', action);\n    if (handler.postExecute) {\n      handler.postExecute(context);\n    }\n    this._fire(command, 'postExecuted', action);\n  }\n  this._popAction(action);\n};\nCommandStack.prototype._pushAction = function (action) {\n  var execution = this._currentExecution,\n    actions = execution.actions;\n  var baseAction = actions[0];\n  if (execution.atomic) {\n    throw new Error('illegal invocation in <execute> or <revert> phase (action: ' + action.command + ')');\n  }\n  if (!action.id) {\n    action.id = baseAction && baseAction.id || this._createId();\n  }\n  actions.push(action);\n};\nCommandStack.prototype._popAction = function () {\n  var execution = this._currentExecution,\n    trigger = execution.trigger,\n    actions = execution.actions,\n    dirty = execution.dirty;\n  actions.pop();\n  if (!actions.length) {\n    this._eventBus.fire('elements.changed', {\n      elements: uniqueBy('id', dirty.reverse())\n    });\n    dirty.length = 0;\n    this._fire('changed', {\n      trigger: trigger\n    });\n    execution.trigger = null;\n  }\n};\nCommandStack.prototype._markDirty = function (elements) {\n  var execution = this._currentExecution;\n  if (!elements) {\n    return;\n  }\n  elements = isArray(elements) ? elements : [elements];\n  execution.dirty = execution.dirty.concat(elements);\n};\nCommandStack.prototype._executedAction = function (action, redo) {\n  var stackIdx = ++this._stackIdx;\n  if (!redo) {\n    this._stack.splice(stackIdx, this._stack.length, action);\n  }\n};\nCommandStack.prototype._revertedAction = function (action) {\n  this._stackIdx--;\n};\nCommandStack.prototype._getHandler = function (command) {\n  return this._handlerMap[command];\n};\nCommandStack.prototype._setHandler = function (command, handler) {\n  if (!command || !handler) {\n    throw new Error('command and handler required');\n  }\n  if (this._handlerMap[command]) {\n    throw new Error('overriding handler for command <' + command + '>');\n  }\n  this._handlerMap[command] = handler;\n};","map":null,"metadata":{},"sourceType":"module"}