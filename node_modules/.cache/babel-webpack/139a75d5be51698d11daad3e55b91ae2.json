{"ast":null,"code":"import { add as collectionAdd, remove as collectionRemove } from '../../../util/Collections';\n\n/**\n * A handler that implements reversible attaching/detaching of shapes.\n */\nexport default function UpdateAttachmentHandler(modeling) {\n  this._modeling = modeling;\n}\nUpdateAttachmentHandler.$inject = ['modeling'];\nUpdateAttachmentHandler.prototype.execute = function (context) {\n  var shape = context.shape,\n    newHost = context.newHost,\n    oldHost = shape.host;\n\n  // (0) detach from old host\n  context.oldHost = oldHost;\n  context.attacherIdx = removeAttacher(oldHost, shape);\n\n  // (1) attach to new host\n  addAttacher(newHost, shape);\n\n  // (2) update host\n  shape.host = newHost;\n  return shape;\n};\nUpdateAttachmentHandler.prototype.revert = function (context) {\n  var shape = context.shape,\n    newHost = context.newHost,\n    oldHost = context.oldHost,\n    attacherIdx = context.attacherIdx;\n\n  // (2) update host\n  shape.host = oldHost;\n\n  // (1) attach to new host\n  removeAttacher(newHost, shape);\n\n  // (0) detach from old host\n  addAttacher(oldHost, shape, attacherIdx);\n  return shape;\n};\nfunction removeAttacher(host, attacher) {\n  // remove attacher from host\n  return collectionRemove(host && host.attachers, attacher);\n}\nfunction addAttacher(host, attacher, idx) {\n  if (!host) {\n    return;\n  }\n  var attachers = host.attachers;\n  if (!attachers) {\n    host.attachers = attachers = [];\n  }\n  collectionAdd(attachers, attacher, idx);\n}","map":null,"metadata":{},"sourceType":"module"}