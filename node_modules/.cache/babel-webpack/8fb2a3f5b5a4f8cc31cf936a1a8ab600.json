{"ast":null,"code":"'use strict';\n\nvar elementHelper = require('../helper/ElementHelper');\n\n/**\n * A handler capable of creating a new element under a provided parent\n * and updating / creating a reference to it in one atomic action.\n *\n * @class\n * @constructor\n */\nfunction CreateAndReferenceElementHandler(elementRegistry, bpmnFactory) {\n  this._elementRegistry = elementRegistry;\n  this._bpmnFactory = bpmnFactory;\n}\nCreateAndReferenceElementHandler.$inject = ['elementRegistry', 'bpmnFactory'];\nmodule.exports = CreateAndReferenceElementHandler;\n\n// api ////////////////////\n\n/**\n * Creates a new element under a provided parent and updates / creates a reference to it in\n * one atomic action.\n *\n * @method  CreateAndReferenceElementHandler#execute\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element which is the context for the reference\n * @param {moddle.referencingObject} context.referencingObject the object which creates the reference\n * @param {String} context.referenceProperty the property of the referencingObject which makes the reference\n * @param {moddle.newObject} context.newObject the new object to add\n * @param {moddle.newObjectContainer} context.newObjectContainer the container for the new object\n *\n * @returns {Array<djs.mode.Base>} the updated element\n */\nCreateAndReferenceElementHandler.prototype.execute = function (context) {\n  var referencingObject = ensureNotNull(context.referencingObject, 'referencingObject'),\n    referenceProperty = ensureNotNull(context.referenceProperty, 'referenceProperty'),\n    newObject = ensureNotNull(context.newObject, 'newObject'),\n    newObjectContainer = ensureNotNull(context.newObjectContainer, 'newObjectContainer'),\n    newObjectParent = ensureNotNull(context.newObjectParent, 'newObjectParent'),\n    changed = [context.element]; // this will not change any diagram-js elements\n\n  // create new object\n  var referencedObject = elementHelper.createElement(newObject.type, newObject.properties, newObjectParent, this._bpmnFactory);\n  context.referencedObject = referencedObject;\n\n  // add to containing list\n  newObjectContainer.push(referencedObject);\n\n  // adjust reference attribute\n  context.previousReference = referencingObject[referenceProperty];\n  referencingObject[referenceProperty] = referencedObject;\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n/**\n * Reverts the update\n *\n * @method  CreateAndReferenceElementHandler#revert\n *\n * @param {Object} context\n *\n * @returns {djs.mode.Base} the updated element\n */\nCreateAndReferenceElementHandler.prototype.revert = function (context) {\n  var referencingObject = context.referencingObject,\n    referenceProperty = context.referenceProperty,\n    previousReference = context.previousReference,\n    referencedObject = context.referencedObject,\n    newObjectContainer = context.newObjectContainer;\n\n  // reset reference\n  referencingObject.set(referenceProperty, previousReference);\n\n  // remove new element\n  newObjectContainer.splice(newObjectContainer.indexOf(referencedObject), 1);\n  return context.changed;\n};\n\n// helpers //////////////\n\nfunction ensureNotNull(prop, name) {\n  if (!prop) {\n    throw new Error(name + ' required');\n  }\n  return prop;\n}","map":null,"metadata":{},"sourceType":"script"}