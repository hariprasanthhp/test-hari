{"ast":null,"code":"import inherits from 'inherits';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { getBusinessObject, is } from '../../../util/ModelUtil';\nimport { computeChildrenBBox } from 'diagram-js/lib/features/resize/ResizeUtil';\nvar LOW_PRIORITY = 500;\nexport default function ToggleElementCollapseBehaviour(eventBus, elementFactory, modeling, resize) {\n  CommandInterceptor.call(this, eventBus);\n  function hideEmptyLabels(children) {\n    if (children.length) {\n      children.forEach(function (child) {\n        if (child.type === 'label' && !child.businessObject.name) {\n          child.hidden = true;\n        }\n      });\n    }\n  }\n  function expandedBounds(shape, defaultSize) {\n    var children = shape.children,\n      newBounds = defaultSize,\n      visibleElements,\n      visibleBBox;\n    visibleElements = filterVisible(children).concat([shape]);\n    visibleBBox = computeChildrenBBox(visibleElements);\n    if (visibleBBox) {\n      // center to visibleBBox with max(defaultSize, childrenBounds)\n      newBounds.width = Math.max(visibleBBox.width, newBounds.width);\n      newBounds.height = Math.max(visibleBBox.height, newBounds.height);\n      newBounds.x = visibleBBox.x + (visibleBBox.width - newBounds.width) / 2;\n      newBounds.y = visibleBBox.y + (visibleBBox.height - newBounds.height) / 2;\n    } else {\n      // center to collapsed shape with defaultSize\n      newBounds.x = shape.x + (shape.width - newBounds.width) / 2;\n      newBounds.y = shape.y + (shape.height - newBounds.height) / 2;\n    }\n    return newBounds;\n  }\n  function collapsedBounds(shape, defaultSize) {\n    return {\n      x: shape.x + (shape.width - defaultSize.width) / 2,\n      y: shape.y + (shape.height - defaultSize.height) / 2,\n      width: defaultSize.width,\n      height: defaultSize.height\n    };\n  }\n  this.executed(['shape.toggleCollapse'], LOW_PRIORITY, function (e) {\n    var context = e.context,\n      shape = context.shape;\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n    if (!shape.collapsed) {\n      // all children got made visible through djs, hide empty labels\n      hideEmptyLabels(shape.children);\n\n      // remove collapsed marker\n      getBusinessObject(shape).di.isExpanded = true;\n    } else {\n      // place collapsed marker\n      getBusinessObject(shape).di.isExpanded = false;\n    }\n  });\n  this.reverted(['shape.toggleCollapse'], LOW_PRIORITY, function (e) {\n    var context = e.context;\n    var shape = context.shape;\n\n    // revert removing/placing collapsed marker\n    if (!shape.collapsed) {\n      getBusinessObject(shape).di.isExpanded = true;\n    } else {\n      getBusinessObject(shape).di.isExpanded = false;\n    }\n  });\n  this.postExecuted(['shape.toggleCollapse'], LOW_PRIORITY, function (e) {\n    var shape = e.context.shape,\n      defaultSize = elementFactory._getDefaultSize(shape),\n      newBounds;\n    if (shape.collapsed) {\n      // resize to default size of collapsed shapes\n      newBounds = collapsedBounds(shape, defaultSize);\n    } else {\n      // resize to bounds of max(visible children, defaultSize)\n      newBounds = expandedBounds(shape, defaultSize);\n    }\n    modeling.resizeShape(shape, newBounds, null, {\n      autoResize: shape.collapsed ? false : 'nwse'\n    });\n  });\n}\ninherits(ToggleElementCollapseBehaviour, CommandInterceptor);\nToggleElementCollapseBehaviour.$inject = ['eventBus', 'elementFactory', 'modeling'];\n\n// helpers //////////////////////\n\nfunction filterVisible(elements) {\n  return elements.filter(function (e) {\n    return !e.hidden;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}