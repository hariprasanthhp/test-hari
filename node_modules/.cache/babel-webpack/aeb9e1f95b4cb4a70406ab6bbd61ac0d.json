{"ast":null,"code":"import inherits from 'inherits';\nimport { getOrientation, getMid, asTRBL } from 'diagram-js/lib/layout/LayoutUtil';\nimport { substract } from 'diagram-js/lib/util/Math';\nimport { hasExternalLabel } from '../../../util/LabelUtil';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nvar ALIGNMENTS = ['top', 'bottom', 'left', 'right'];\nvar ELEMENT_LABEL_DISTANCE = 10;\n\n/**\n * A component that makes sure that external labels are added\n * together with respective elements and properly updated (DI wise)\n * during move.\n *\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n */\nexport default function AdaptiveLabelPositioningBehavior(eventBus, modeling) {\n  CommandInterceptor.call(this, eventBus);\n  this.postExecuted(['connection.create', 'connection.layout', 'connection.updateWaypoints'], function (event) {\n    var context = event.context,\n      connection = context.connection,\n      source = connection.source,\n      target = connection.target,\n      hints = context.hints || {};\n    if (hints.createElementsBehavior !== false) {\n      checkLabelAdjustment(source);\n      checkLabelAdjustment(target);\n    }\n  });\n  this.postExecuted(['label.create'], function (event) {\n    var context = event.context,\n      shape = context.shape,\n      hints = context.hints || {};\n    if (hints.createElementsBehavior !== false) {\n      checkLabelAdjustment(shape.labelTarget);\n    }\n  });\n  this.postExecuted(['elements.create'], function (event) {\n    var context = event.context,\n      elements = context.elements,\n      hints = context.hints || {};\n    if (hints.createElementsBehavior !== false) {\n      elements.forEach(function (element) {\n        checkLabelAdjustment(element);\n      });\n    }\n  });\n  function checkLabelAdjustment(element) {\n    // skip non-existing labels\n    if (!hasExternalLabel(element)) {\n      return;\n    }\n    var optimalPosition = getOptimalPosition(element);\n\n    // no optimal position found\n    if (!optimalPosition) {\n      return;\n    }\n    adjustLabelPosition(element, optimalPosition);\n  }\n  function adjustLabelPosition(element, orientation) {\n    var elementMid = getMid(element),\n      label = element.label,\n      labelMid = getMid(label);\n\n    // ignore labels that are being created\n    if (!label.parent) {\n      return;\n    }\n    var elementTrbl = asTRBL(element);\n    var newLabelMid;\n    switch (orientation) {\n      case 'top':\n        newLabelMid = {\n          x: elementMid.x,\n          y: elementTrbl.top - ELEMENT_LABEL_DISTANCE - label.height / 2\n        };\n        break;\n      case 'left':\n        newLabelMid = {\n          x: elementTrbl.left - ELEMENT_LABEL_DISTANCE - label.width / 2,\n          y: elementMid.y\n        };\n        break;\n      case 'bottom':\n        newLabelMid = {\n          x: elementMid.x,\n          y: elementTrbl.bottom + ELEMENT_LABEL_DISTANCE + label.height / 2\n        };\n        break;\n      case 'right':\n        newLabelMid = {\n          x: elementTrbl.right + ELEMENT_LABEL_DISTANCE + label.width / 2,\n          y: elementMid.y\n        };\n        break;\n    }\n    var delta = substract(newLabelMid, labelMid);\n    modeling.moveShape(label, delta);\n  }\n}\ninherits(AdaptiveLabelPositioningBehavior, CommandInterceptor);\nAdaptiveLabelPositioningBehavior.$inject = ['eventBus', 'modeling'];\n\n// helpers //////////////////////\n\n/**\n * Return alignments which are taken by a boundary's host element\n *\n * @param {Shape} element\n *\n * @return {Array<string>}\n */\nfunction getTakenHostAlignments(element) {\n  var hostElement = element.host,\n    elementMid = getMid(element),\n    hostOrientation = getOrientation(elementMid, hostElement);\n  var freeAlignments;\n\n  // check whether there is a multi-orientation, e.g. 'top-left'\n  if (hostOrientation.indexOf('-') >= 0) {\n    freeAlignments = hostOrientation.split('-');\n  } else {\n    freeAlignments = [hostOrientation];\n  }\n  var takenAlignments = ALIGNMENTS.filter(function (alignment) {\n    return freeAlignments.indexOf(alignment) === -1;\n  });\n  return takenAlignments;\n}\n\n/**\n * Return alignments which are taken by related connections\n *\n * @param {Shape} element\n *\n * @return {Array<string>}\n */\nfunction getTakenConnectionAlignments(element) {\n  var elementMid = getMid(element);\n  var takenAlignments = [].concat(element.incoming.map(function (c) {\n    return c.waypoints[c.waypoints.length - 2];\n  }), element.outgoing.map(function (c) {\n    return c.waypoints[1];\n  })).map(function (point) {\n    return getApproximateOrientation(elementMid, point);\n  });\n  return takenAlignments;\n}\n\n/**\n * Return the optimal label position around an element\n * or _undefined_, if none was found.\n *\n * @param  {Shape} element\n *\n * @return {string} positioning identifier\n */\nfunction getOptimalPosition(element) {\n  var labelMid = getMid(element.label);\n  var elementMid = getMid(element);\n  var labelOrientation = getApproximateOrientation(elementMid, labelMid);\n  if (!isAligned(labelOrientation)) {\n    return;\n  }\n  var takenAlignments = getTakenConnectionAlignments(element);\n  if (element.host) {\n    var takenHostAlignments = getTakenHostAlignments(element);\n    takenAlignments = takenAlignments.concat(takenHostAlignments);\n  }\n  var freeAlignments = ALIGNMENTS.filter(function (alignment) {\n    return takenAlignments.indexOf(alignment) === -1;\n  });\n\n  // NOTHING TO DO; label already aligned a.O.K.\n  if (freeAlignments.indexOf(labelOrientation) !== -1) {\n    return;\n  }\n  return freeAlignments[0];\n}\nfunction getApproximateOrientation(p0, p1) {\n  return getOrientation(p1, p0, 5);\n}\nfunction isAligned(orientation) {\n  return ALIGNMENTS.indexOf(orientation) !== -1;\n}","map":null,"metadata":{},"sourceType":"module"}