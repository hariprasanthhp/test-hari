{"ast":null,"code":"import { of, Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared-utils/date-utils.service\";\nimport * as i3 from \"src/app/shared/services/sso-auth.service\";\nexport let SupportWifiService = /*#__PURE__*/(() => {\n  class SupportWifiService {\n    constructor(http, dateUtils, sso) {\n      this.http = http;\n      this.dateUtils = dateUtils;\n      this.sso = sso;\n      this.selfHealChanges = new Subject();\n      this.ssidPage = new Subject();\n      this.selfHealVisibility = new Subject();\n      this.reasons = ['Unknown', 'Dynamic channel selection', 'Radar detection', 'Channel set by user', 'Configuration change', 'Initial channel selection', 'Off - channel CAC', 'Channel switch announcement', 'TDLS channel switch announcement', 'Auto Channel Select', 'DFS Suppress', 'DFS Re-entry'];\n      this.availability = {};\n      this.standardMap = {\n        \"a\": \"802.11a\",\n        \"n\": \"802.11n\",\n        \"n5\": \"802.11n Only\",\n        \"b\": \"802.11b\",\n        \"bgn\": \"802.11b/g/n\",\n        \"nbg\": \"802.11n/b/g\",\n        \"gn\": \"802.11g/n\",\n        \"bg\": \"802.11b/g\",\n        \"ac\": \"802.11ac\",\n        \"ac5\": \"802.11ac and 802.11n\",\n        \"g\": \"802.11g\",\n        \"g-only\": \"802.11g\",\n        \"n-only\": \"802.11n\",\n        \"an\": \"802.11an\",\n        \"anac\": \"802.11a/n/ac\",\n        \"n5ac\": \"802.11a/n/ac\",\n        \"ng\": \"802.11n and 802.11g\",\n        \"ax\": \"802.11ax, 802.11n and 802.11g\",\n        \"ax5\": \"802.11ax, 802.11ac and 802.11n\"\n      };\n    }\n    selfHealChanged(data) {\n      this.selfHealChanges.next(data);\n    }\n    changeSelfHealVisibility(data) {\n      this.selfHealVisibility.next(data);\n    }\n    ssidPageLoaded(data) {\n      this.ssidPage.next(data);\n    }\n    getRadioSummary(orgId, fsan, unassociated) {\n      const url = unassociated ? `${environment.SUPPORT_URL}/device/${orgId}/${fsan}/radioStatus` : `${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wifi/radioSummaries`;\n      return this.http.get(url);\n    }\n    saveRadioSummary(orgId, fsan, type, params) {\n      return this.http.put(`${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wifi/radioSummary?radio=${type}`, params);\n    }\n    getAirtimeAnalysis(orgId, fsan) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wifi/radioAirTime`);\n    }\n    getHistoryAirtimeAnalysis(url) {\n      return this.http.get(url);\n    }\n    getChannelScoreData(orgId, fsan, start, end) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wifi/channelScores?startDate=${start}&endDate=${end}`);\n    }\n    getSelfHealStaus(orgId, subsId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/wifi-optimization/subscriber/config/${subsId}?${ID}`);\n    }\n    updateSelfHealStaus(orgId, subsId, status) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/device/wifi-optimization/subscriber/config/${subsId}?${ID}selfHeal=${status}`, {});\n    }\n    getUsageTXRX(orgId, fsan, macAddr, period) {\n      //return this.http.get(`${environment.SUPPORT_URL}/device/client/usage/rxtx?${ID}serialNumber=${fsan}&stationMac=${macAddr}&type=${period}`);\n      return this.http.get(`${environment.SUPPORT_URL}/device/client/usage?stationMac=${macAddr}&lastndays=${period}`);\n    }\n    getUsage15MinTXRX(orgId, fsan, macAddr, start) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/client/usage?stationMac=${macAddr}&startTime=${start}`);\n    }\n    getSignalStrength(orgId, fsan, macAddr) {\n      //return this.http.get('https://dev.api.calix.ai/v1/csc/device/client/usage?lastndays=7&stationMac=ec%3Afa%3A5c%3Ac2%3Aea%3A41');\n      return this.http.get(`${environment.SUPPORT_URL}/device/client/usage?lastndays=7&stationMac=${macAddr}&type=hour`);\n    }\n    callRestApi(endpoint, filters) {\n      return this.http.get(`${endpoint}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    putIPTV(orgId, fsan, params) {\n      return this.http.put(`${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wps/iptv`, params);\n    }\n    getWPS(orgId, fsan, wps) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wps/${wps}`);\n    }\n    putWPS(orgId, fsan, wps, params) {\n      return this.http.put(`${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wps/${wps}`, params);\n    }\n    getWpsCheck(orgId, fsan) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wpsCheck`);\n    }\n    getWpsSummary(orgId, fsan) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wpsSummary`);\n    }\n    getInitialCheck(orgId, fsan) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wps/iptv/check`);\n    }\n    siteScanRun(orgId, fsan) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.post(`${environment.SUPPORT_URL}/device-systools/site-scan/runTestNow?${ID}sn=${fsan}`, {});\n    }\n    getsiteScanLatest(orgId, fsan) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device-systools/site-scan/results/latest?${ID}sn=${fsan}`);\n    }\n    getChannelChangeLogs(orgId, fsan, macAddress) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${fsan}/wifi/channelChangeLog?macAddr=${macAddress}`);\n    }\n    getBackhaul(orgId, fsan, wfsan, macAddress) {\n      const ID = this.sso.getOrg(orgId);\n      const url = fsan ? `${environment.SUPPORT_URL}/device/wifi/backhaul?${ID}rgsn=${fsan}&wapsn=${wfsan}&stationMac=${macAddress}` : `${environment.SUPPORT_URL}/device/wifi/backhaul?${ID}wapsn=${wfsan}&stationMac=${macAddress}`;\n      return this.http.get(url);\n      //  return this.http.get(`${environment.SUPPORT_URL}/device/wifi/backhaul?${ID}rgsn=${fsan}&wapsn=${wfsan}&stationMac=${macAddress}`);\n    }\n\n    getSteeringLog(url) {\n      return this.http.get(url);\n    }\n    getDownstreamData(url) {\n      return this.http.get(url);\n    }\n    getOrgSelfHealStatus(orgId) {\n      return this.http.get(`${environment.SUPPORT_URL}/netops-selfheal/wifi-optimization/org/config/${orgId}`);\n    }\n    wifiAvailability(orgId, serialNumber) {\n      return this.http.get(`${environment.SUPPORT_URL}/device/${orgId}/${serialNumber}/availability`);\n    }\n    getWIFIAvailability(serialNumber) {\n      return this.availability[serialNumber] ? this.availability[serialNumber] : undefined;\n    }\n    setWIFIAvailability(data, serialNumber) {\n      this.availability[serialNumber] = data;\n    }\n    getradiostatistics(orgId, serialNumber) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/device/radio/statistics?${ID}serialNumber=${serialNumber}`);\n    }\n    handleErrorWithEmpty(error) {\n      return of({});\n    }\n    checkWirelessMode(item) {\n      let mode = item.Mode ? item.Mode : '';\n      let modes = [];\n      if (mode.indexOf('a') > -1 || mode.indexOf('b') > -1) {\n        modes.push('802.11ax');\n      }\n      if (mode.indexOf('n') > -1) {\n        modes.push('802.11n');\n      }\n      if (mode.indexOf('g') > -1) {\n        modes.push('802.11g');\n      }\n      return modes.join(', ');\n    }\n    getPrevDate(type, ds) {\n      let date = new Date();\n      let now = new Date();\n      let firstDay;\n      let lastDay;\n      ;\n      if (type == 'day') {\n        let dayCount = ds ? ds : 1;\n        date.setDate(date.getDate() - dayCount);\n        //date.setHours(0, 0, 0, 0);\n        firstDay = date;\n        lastDay = now;\n      } else {\n        let monthCount = ds ? ds : 1;\n        firstDay = new Date(date.getFullYear(), date.getMonth() - monthCount, 1);\n        //firstDay.setHours(0, 0, 0, 0);\n        lastDay = now;\n      }\n      return {\n        firstDay: firstDay,\n        lastDay: lastDay\n      };\n    }\n    modeValueToText(type, value) {\n      var name = value.replace(/,/g, '');\n      if (type != '2.4G' && (value == 'n' || value == 'ac')) {\n        name = value + '5';\n      }\n      return this.standardMap[name] || '';\n    }\n    getReason(code) {\n      let responsecode;\n      let isnumber = Number(code);\n      let subnetintodecimal;\n      if (isNaN(isnumber)) {\n        responsecode = code;\n      } else {\n        // responsecode = this.reasons[code] || 'Unknown'\n        let codetobinary = parseInt(code).toString(2);\n        let getsubstringofbinary = codetobinary === null || codetobinary === void 0 ? void 0 : codetobinary.substring(8);\n        if (!getsubstringofbinary) {\n          subnetintodecimal = code;\n        } else {\n          subnetintodecimal = parseInt(getsubstringofbinary, 2).toString(10);\n        }\n        responsecode = this.reasons[subnetintodecimal] || 'Unknown';\n      }\n      return responsecode;\n      // return this.reasons[code] || 'Unknown';\n    }\n\n    sortByTimestamp(list, key, asc) {\n      list.sort(function (x, y) {\n        x[key] = x[key] ? parseInt(x[key]) : 0;\n        y[key] = y[key] ? parseInt(y[key]) : 0;\n        if (asc && asc == 'asc') {\n          return x[key] - y[key];\n        }\n        if (asc && asc == 'desc') {\n          return y[key] - x[key];\n        }\n      });\n      return list;\n    }\n    kbpsTO(m, valueOnly, UnitOnly) {\n      let unit;\n      let units = [];\n      m = parseInt(m);\n      if (m > 1000000000) {\n        unit = (m / 1000000000).toFixed(2) + 'T';\n        units = [(m / 1000000000).toFixed(2), 'T'];\n      } else if (m > 1000000) {\n        unit = (m / 1000000).toFixed(2) + 'G';\n        units = [(m / 1000000).toFixed(2), 'G'];\n      } else if (m > 1000) {\n        unit = (m / 1000).toFixed(2) + 'M';\n        units = [(m / 1000).toFixed(2), 'M'];\n      } else {\n        unit = m + 'K';\n        units = [m, 'K'];\n      }\n      if (valueOnly) {\n        return units[0];\n      } else if (UnitOnly) {\n        return units[1];\n      }\n      return unit;\n    }\n    ////Wan Failover//////////\n    sitestartbw(request) {\n      /* let res:any\r\n       res ='success'\r\n       return res;*/\n      return this.http.post(`${environment.SUPPORT_URL}/smbiq/backupwan/sitescan/start`, request);\n    }\n    sitescanresultbw(userId) {\n      /* let res :any\r\n        res={\r\n         \"wifis\": [\r\n           {\r\n             \"ssid\": \"wifi ssid1\",\r\n             \"frequency\": \"5G\",\r\n             \"securityType\": 3,\r\n             \"signalStrength\": -50\r\n           },\r\n           {\r\n             \"ssid\": \"wifi ssid2\",\r\n             \"frequency\": \"5G\",\r\n             \"securityType\": 0,\r\n             \"signalStrength\": -66\r\n           },\r\n           {\r\n             \"ssid\": \"wifi ssid3\",\r\n             \"frequency\": \"5G\",\r\n             \"securityType\": 1,\r\n             \"signalStrength\": -69\r\n           },\r\n           {\r\n             \"ssid\": \"wifi ssid4\",\r\n             \"frequency\": \"5G\",\r\n             \"securityType\": 0,\r\n             \"signalStrength\": -80\r\n           }\r\n      \n           \r\n      \n         ]\r\n       }\r\n       return res*/\n      return this.http.get(`${environment.SUPPORT_URL}/smbiq/backupwan/sitescan/result?userId=${userId}`);\n    }\n    backupwanwifi(userId) {\n      /* let res :any\r\n       res={\r\n           \"id\": \"123\",\r\n           \"ssid\": \"smb\",\r\n           \"securityType\": \"number\",\r\n           \"password\": \"23232\",\r\n           \"appliedTraffic\": {\r\n             \"owner\": true,\r\n             \"staff\": false,\r\n             \"customer\": false,\r\n             \"pos\": true\r\n           },\r\n           \"forceTestRunning\": true\r\n         }\r\n       return res*/\n      return this.http.get(`${environment.SUPPORT_URL}/smbiq/backupwan/wifi?userId=${userId}`);\n    }\n    backupwanstatus(userId) {\n      return this.http.get(`${environment.SUPPORT_URL}/smbiq/backupwan/status?userId=${userId}`);\n    }\n    backupwanwifiadd(request) {\n      return this.http.put(`${environment.SUPPORT_URL}/smbiq/backupwan/wifi/add`, request);\n    }\n    backupwanwifiupdate(request) {\n      return this.http.post(`${environment.SUPPORT_URL}/smbiq/backupwan/wifi/update`, request);\n    }\n    backupwanwifidelete(userId, id) {\n      return this.http.delete(`${environment.SUPPORT_URL}/smbiq/backupwan/wifi/delete?userId=${userId}&id=${id}`);\n    }\n    teststartbw(request) {\n      return this.http.post(`${environment.SUPPORT_URL}/smbiq/backupwan/test/start`, request);\n    }\n    teststatusbw(userId, id) {\n      /* let res :any\r\n       res={\r\n         \"id\": 453,\r\n         \"result\": \"sucess\",\r\n         \"failReason\": \"\"\r\n       }\r\n       return res\r\n       */\n      return this.http.get(`${environment.SUPPORT_URL}/smbiq/backupwan/test/status?userId=${userId}&id=${id}\n  `);\n    }\n    teststopbw(request) {\n      return this.http.post(`${environment.SUPPORT_URL}/smbiq/backupwan/test/stop`, request);\n    }\n    getBackupWanStatus(userId) {\n      return this.http.get(`${environment.SUPPORT_URL}/smbiq/backupwan/status?userId=${userId}`);\n    }\n    getONTIpaddress(orgId, UUIDNo) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.CMC_API_BASE_URL}/search/prioritySearch?orgId=${orgId}&filter=${UUIDNo}`).pipe(catchError(this.handleError));\n    }\n    getONTIpAddressAggrId(agggroup, orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.faAdminCorrelatorURL}flowendpoint?agggroup=${agggroup}&assigned=false&count=false&mappedby=NONE&orderby=name&org-id=${orgId}&pagenumber=0&pagesize=1000&sortdirection=asc`).pipe(catchError(this.handleError));\n    }\n  }\n  SupportWifiService.ɵfac = function SupportWifiService_Factory(t) {\n    return new (t || SupportWifiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DateUtilsService), i0.ɵɵinject(i3.SsoAuthService));\n  };\n  SupportWifiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SupportWifiService,\n    factory: SupportWifiService.ɵfac,\n    providedIn: 'root'\n  });\n  return SupportWifiService;\n})();","map":null,"metadata":{},"sourceType":"module"}