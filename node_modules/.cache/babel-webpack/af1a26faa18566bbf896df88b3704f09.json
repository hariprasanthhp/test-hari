{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    //'X-Calix-Username': 'admin@calix.com'\n  })\n};\nexport let OrganizationsService = /*#__PURE__*/(() => {\n  class OrganizationsService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.baseURL = environment.CALIX_ADMIN_BASE_URL;\n      this.orgBaseURL = environment.CALIX_ADMIN_ORG_BASE_URL;\n      this.org_id = environment.faAdminOrgId;\n    }\n    OrgsList() {\n      return this.httpClient.get(`${this.orgBaseURL}organizations`, httpOptions);\n    }\n    AddOrg(params) {\n      return this.httpClient.post(`${this.orgBaseURL}organizations`, params, httpOptions);\n    }\n    DeleteOrg(orgId) {\n      return this.httpClient.delete(`${this.orgBaseURL}organizations/${orgId}`, httpOptions);\n    }\n    Entitlements(orgId) {\n      return this.httpClient.get(`${this.orgBaseURL}entitlements/cloud/all`, httpOptions);\n    }\n    EntitlementsByOrgId(orgId) {\n      return this.httpClient.get(`${this.orgBaseURL}entitlements/${orgId}`, httpOptions);\n    }\n    callRestApi(endpoint, filters) {\n      return this.httpClient.get(`${endpoint}`, httpOptions).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    RoleData(roleId) {\n      return this.httpClient.get(`${this.baseURL}role/${roleId}`, httpOptions);\n    }\n    AddAdmin(params, orgAdminRoleId) {\n      return this.httpClient.post(`${this.baseURL}role/${orgAdminRoleId}/users`, params, httpOptions);\n    }\n    addEntitlements(url, params) {\n      return this.httpClient.post(url, params, httpOptions);\n    }\n    changeEntitlements(url, params) {\n      return this.httpClient.put(url, params, httpOptions);\n    }\n    UsersListByOrgId(orgId, count) {\n      return this.httpClient.get(`${this.baseURL}org/${orgId}/users?size=${count}`, httpOptions);\n    }\n  }\n  OrganizationsService.ɵfac = function OrganizationsService_Factory(t) {\n    return new (t || OrganizationsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  OrganizationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrganizationsService,\n    factory: OrganizationsService.ɵfac,\n    providedIn: 'root'\n  });\n  return OrganizationsService;\n})();","map":null,"metadata":{},"sourceType":"module"}