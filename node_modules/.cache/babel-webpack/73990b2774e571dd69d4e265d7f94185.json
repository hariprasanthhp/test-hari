{"ast":null,"code":"'use strict';\n\nvar isFunction = require('min-dash').isFunction,\n  isObject = require('min-dash').isObject,\n  some = require('min-dash').some;\nvar WILDCARD = '*';\nfunction ZeebeModdleExtension(eventBus) {\n  var self = this;\n  eventBus.on('moddleCopy.canCopyProperty', function (context) {\n    var property = context.property,\n      parent = context.parent;\n    return self.canCopyProperty(property, parent);\n  });\n}\nZeebeModdleExtension.$inject = ['eventBus'];\nZeebeModdleExtension.prototype.canCopyProperty = function (property, parent) {\n  // check if property is allowed in parent\n  if (isObject(property) && !isAllowedInParent(property, parent)) {\n    return false;\n  }\n};\nmodule.exports = ZeebeModdleExtension;\n\n// helpers //////////\n\nfunction is(element, type) {\n  return element && isFunction(element.$instanceOf) && element.$instanceOf(type);\n}\nfunction getParent(element, type) {\n  if (!type) {\n    return element.$parent;\n  }\n  if (is(element, type)) {\n    return element;\n  }\n  if (!element.$parent) {\n    return;\n  }\n  return getParent(element.$parent, type);\n}\nfunction isAllowedInParent(property, parent) {\n  // (1) find property descriptor\n  var descriptor = property.$type && property.$model.getTypeDescriptor(property.$type);\n  var allowedIn = descriptor && descriptor.meta && descriptor.meta.allowedIn;\n  if (!allowedIn || isWildcard(allowedIn)) {\n    return true;\n  }\n\n  // (2) check if property has parent of allowed type\n  return some(allowedIn, function (type) {\n    return getParent(parent, type);\n  });\n}\nfunction isWildcard(allowedIn) {\n  return allowedIn.indexOf(WILDCARD) !== -1;\n}","map":null,"metadata":{},"sourceType":"script"}