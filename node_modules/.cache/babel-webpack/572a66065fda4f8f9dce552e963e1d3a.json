{"ast":null,"code":"import { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let DeviceGroupService = /*#__PURE__*/(() => {\n  class DeviceGroupService {\n    constructor(http, sso) {\n      this.http = http;\n      this.sso = sso;\n    }\n    getDeviceGoupList(orgId, limit = 50) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/group?${ID}skip=0&limit=${limit}`);\n    }\n    getDeviceGroups(orgId, ID) {\n      const Id_org = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/group?${Id_org}&deviceId=${ID}`);\n    }\n    getEditDeviceGoupList(devicegrpid) {\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/group/` + devicegrpid);\n    }\n    GetDeviceType(payload) {\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/device-type?matcher=${payload}`);\n    }\n    getDiscoveredCount(payload) {\n      //return this.http.get(`${environment.SUPPORT_URL}/netops-device/device/count?matcher=${payload}`);\n      let params = {\n        $matcher: payload\n      };\n      return this.http.put(`${environment.SUPPORT_URL}/netops-device/device/count`, params);\n    }\n    GetDiscoveredDevices(payload) {\n      //return this.http.get(`${environment.SUPPORT_URL}/netops-device/device?matcher=${payload}`);\n      let params = {\n        matcher: payload\n      };\n      return this.http.put(`${environment.SUPPORT_URL}/netops-device/device`, params);\n    }\n    GetUnDiscoveredDevices_static(orgId, devicegrpid) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/static-group-member/undiscovered/` + devicegrpid + `?${ID}`);\n    }\n    GetUnDiscoveredDevices_static_count(devicegrpid, orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/static-group-member/undiscovered/count/` + devicegrpid + `?${ID}`);\n    }\n    GetDiscoveredDevices_static_count(devicegrpid, orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/static-group-member/discovered/count/` + devicegrpid + `?${ID}`);\n    }\n    GetDiscoveredDevices_static(orgId, devicegrpid) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/static-group-member/discovered/` + devicegrpid + `?${ID}`);\n    }\n    // DeleteDeviceGoupList(orgId, devicegrpid) {\n    //   return this.http.delete(`${environment.SUPPORT_URL}/netops-device/group/` + devicegrpid + `?${ID}`);\n    // }\n    DeleteDeviceGoupList(orgId, devicegrpid, forceDelete) {\n      return this.http.delete(`${environment.SUPPORT_URL}/netops-device/group/` + devicegrpid + `?forceDelete=${forceDelete}`);\n    }\n    addDeviceGroup(orgId, request) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.post(`${environment.SUPPORT_URL}/netops-device/group?${ID}`, request);\n    }\n    UpdateDeviceGroup(orgId, devicegrpid, request) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.put(`${environment.SUPPORT_URL}/netops-device/group/` + devicegrpid + `?${ID}`, request);\n    }\n    getDeviceGoupCount(orgId) {\n      const ID = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/group/count?${ID}`);\n    }\n    getDeviceGoupsearchCount(orgId, ID) {\n      const Id_org = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/group/count?${Id_org}deviceId=${ID}`);\n    }\n    getDeviceMemberCount(orgId, ID) {\n      const Id_org = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-device/group-member/count?groupId=${ID}${Id_org}`);\n    }\n    getWorkflowsById(orgId, ID, filterOnBoot) {\n      const Id_org = this.sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-wf/workflow?${Id_org}groupId=${ID}${filterOnBoot ? \"&excludeOnBoot=true\" : \"&excludeOnBoot=false\"}`);\n    }\n    pageErrorHandle(err) {\n      let errorInfo;\n      if (err.error != undefined && err.error != null && typeof err.error == 'string') {\n        errorInfo = `${err.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.error != undefined && typeof err.error.error == 'string') {\n        errorInfo = `${err.error.error}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'string') {\n        errorInfo = `${err.error.fault}`;\n      } else if (err.error != undefined && typeof err.error == 'object' && err.error.fault != undefined && typeof err.error.fault == 'object' && err.error.fault.faultstring != undefined && typeof err.error.fault.faultstring == 'string') {\n        errorInfo = `${err.error.fault.faultstring}`;\n      } else if (err.error && err.error.errorMessage) {\n        errorInfo = err.error.errorMessage;\n      } else if (err.statusText == 'Unknown Error' && err.status == '0') {\n        // errorInfo = \"Unknown Error - Please refresh the page\"; // remove later\n        errorInfo = \"An unknown error has occurred. Refresh the page to try again\";\n      } else if (err.error != undefined) {\n        errorInfo = `${err.error.message}`;\n      } else {\n        errorInfo = `${err.message}`;\n      }\n      let langfromapi = this.sso.getspecificlangliterals();\n      errorInfo = errorInfo != 'undefined' && errorInfo && langfromapi[errorInfo] ? langfromapi[errorInfo] : errorInfo;\n      return errorInfo != 'undefined' && errorInfo.length ? errorInfo : Object.values(this.flatten(err)).join(' - ');\n    }\n    traverseAndFlatten(currentNode, target, flattenedKey) {\n      for (var key in currentNode) {\n        if (currentNode.hasOwnProperty(key)) {\n          var newKey;\n          if (flattenedKey === undefined) {\n            newKey = key;\n          } else {\n            newKey = flattenedKey + '.' + key;\n          }\n          var value = currentNode[key];\n          if (typeof value === \"object\") {\n            this.traverseAndFlatten(value, target, newKey);\n          } else {\n            target[newKey] = value;\n          }\n        }\n      }\n    }\n    flatten(obj) {\n      let flattenedObject = {};\n      try {\n        this.traverseAndFlatten(obj, flattenedObject);\n      } catch (ex) {\n        flattenedObject = {};\n      }\n      return flattenedObject;\n    }\n    // getSubscriberInfo(orgId, subscriberId) {\n    //   return this.http.get(`${environment.SUPPORT_URL}/subscriber-summary/${subscriberId}?${ID}`);\n    // }\n    // setSubscriberInfo(subscribrData) {\n    //   this.subscriberInfo = subscribrData;\n    // }\n    // getStoredSubscriberInfo() {\n    //   return this.subscriberInfo;\n    // }\n    GetwanAccessTypes(modelName) {\n      return this.http.get(`${environment.CALIX_URL}support/device/feature-properties?modelName=${modelName}`);\n    }\n  }\n  DeviceGroupService.ɵfac = function DeviceGroupService_Factory(t) {\n    return new (t || DeviceGroupService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  DeviceGroupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeviceGroupService,\n    factory: DeviceGroupService.ɵfac,\n    providedIn: 'root'\n  });\n  return DeviceGroupService;\n})();","map":null,"metadata":{},"sourceType":"module"}