{"ast":null,"code":"import { isArray, isString, isObject, assign, forEach, find, filter, matchPattern, isDefined } from 'min-dash';\nimport { domify, classes as domClasses, attr as domAttr, remove as domRemove, clear as domClear } from 'min-dom';\nimport { getBBox } from '../../util/Elements';\nimport Ids from '../../util/IdGenerator';\n\n// document wide unique overlay ids\nvar ids = new Ids('ov');\nvar LOW_PRIORITY = 500;\n\n/**\n * A service that allows users to attach overlays to diagram elements.\n *\n * The overlay service will take care of overlay positioning during updates.\n *\n * @example\n *\n * // add a pink badge on the top left of the shape\n * overlays.add(someShape, {\n *   position: {\n *     top: -5,\n *     left: -5\n *   },\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n * });\n *\n * // or add via shape id\n *\n * overlays.add('some-element-id', {\n *   position: {\n *     top: -5,\n *     left: -5\n *   }\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n * });\n *\n * // or add with optional type\n *\n * overlays.add(someShape, 'badge', {\n *   position: {\n *     top: -5,\n *     left: -5\n *   }\n *   html: '<div style=\"width: 10px; background: fuchsia; color: white;\">0</div>'\n * });\n *\n *\n * // remove an overlay\n *\n * var id = overlays.add(...);\n * overlays.remove(id);\n *\n *\n * You may configure overlay defaults during tool by providing a `config` module\n * with `overlays.defaults` as an entry:\n *\n * {\n *   overlays: {\n *     defaults: {\n *       show: {\n *         minZoom: 0.7,\n *         maxZoom: 5.0\n *       },\n *       scale: {\n *         min: 1\n *       }\n *     }\n * }\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n * @param {ElementRegistry} elementRegistry\n */\nexport default function Overlays(config, eventBus, canvas, elementRegistry) {\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._elementRegistry = elementRegistry;\n  this._ids = ids;\n  this._overlayDefaults = assign({\n    // no show constraints\n    show: null,\n    // always scale\n    scale: true\n  }, config && config.defaults);\n\n  /**\n   * Mapping overlayId -> overlay\n   */\n  this._overlays = {};\n\n  /**\n   * Mapping elementId -> overlay container\n   */\n  this._overlayContainers = [];\n\n  // root html element for all overlays\n  this._overlayRoot = createRoot(canvas.getContainer());\n  this._init();\n}\nOverlays.$inject = ['config.overlays', 'eventBus', 'canvas', 'elementRegistry'];\n\n/**\n * Returns the overlay with the specified id or a list of overlays\n * for an element with a given type.\n *\n * @example\n *\n * // return the single overlay with the given id\n * overlays.get('some-id');\n *\n * // return all overlays for the shape\n * overlays.get({ element: someShape });\n *\n * // return all overlays on shape with type 'badge'\n * overlays.get({ element: someShape, type: 'badge' });\n *\n * // shape can also be specified as id\n * overlays.get({ element: 'element-id', type: 'badge' });\n *\n *\n * @param {Object} search\n * @param {string} [search.id]\n * @param {string|djs.model.Base} [search.element]\n * @param {string} [search.type]\n *\n * @return {Object|Array<Object>} the overlay(s)\n */\nOverlays.prototype.get = function (search) {\n  if (isString(search)) {\n    search = {\n      id: search\n    };\n  }\n  if (isString(search.element)) {\n    search.element = this._elementRegistry.get(search.element);\n  }\n  if (search.element) {\n    var container = this._getOverlayContainer(search.element, true);\n\n    // return a list of overlays when searching by element (+type)\n    if (container) {\n      return search.type ? filter(container.overlays, matchPattern({\n        type: search.type\n      })) : container.overlays.slice();\n    } else {\n      return [];\n    }\n  } else if (search.type) {\n    return filter(this._overlays, matchPattern({\n      type: search.type\n    }));\n  } else {\n    // return single element when searching by id\n    return search.id ? this._overlays[search.id] : null;\n  }\n};\n\n/**\n * Adds a HTML overlay to an element.\n *\n * @param {string|djs.model.Base}   element   attach overlay to this shape\n * @param {string}                  [type]    optional type to assign to the overlay\n * @param {Object}                  overlay   the overlay configuration\n *\n * @param {string|DOMElement}       overlay.html                 html element to use as an overlay\n * @param {Object}                  [overlay.show]               show configuration\n * @param {number}                  [overlay.show.minZoom]       minimal zoom level to show the overlay\n * @param {number}                  [overlay.show.maxZoom]       maximum zoom level to show the overlay\n * @param {Object}                  overlay.position             where to attach the overlay\n * @param {number}                  [overlay.position.left]      relative to element bbox left attachment\n * @param {number}                  [overlay.position.top]       relative to element bbox top attachment\n * @param {number}                  [overlay.position.bottom]    relative to element bbox bottom attachment\n * @param {number}                  [overlay.position.right]     relative to element bbox right attachment\n * @param {boolean|Object}          [overlay.scale=true]         false to preserve the same size regardless of\n *                                                               diagram zoom\n * @param {number}                  [overlay.scale.min]\n * @param {number}                  [overlay.scale.max]\n *\n * @return {string}                 id that may be used to reference the overlay for update or removal\n */\nOverlays.prototype.add = function (element, type, overlay) {\n  if (isObject(type)) {\n    overlay = type;\n    type = null;\n  }\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n  if (!overlay.position) {\n    throw new Error('must specifiy overlay position');\n  }\n  if (!overlay.html) {\n    throw new Error('must specifiy overlay html');\n  }\n  if (!element) {\n    throw new Error('invalid element specified');\n  }\n  var id = this._ids.next();\n  overlay = assign({}, this._overlayDefaults, overlay, {\n    id: id,\n    type: type,\n    element: element,\n    html: overlay.html\n  });\n  this._addOverlay(overlay);\n  return id;\n};\n\n/**\n * Remove an overlay with the given id or all overlays matching the given filter.\n *\n * @see Overlays#get for filter options.\n *\n * @param {string} [id]\n * @param {Object} [filter]\n */\nOverlays.prototype.remove = function (filter) {\n  var overlays = this.get(filter) || [];\n  if (!isArray(overlays)) {\n    overlays = [overlays];\n  }\n  var self = this;\n  forEach(overlays, function (overlay) {\n    var container = self._getOverlayContainer(overlay.element, true);\n    if (overlay) {\n      domRemove(overlay.html);\n      domRemove(overlay.htmlContainer);\n      delete overlay.htmlContainer;\n      delete overlay.element;\n      delete self._overlays[overlay.id];\n    }\n    if (container) {\n      var idx = container.overlays.indexOf(overlay);\n      if (idx !== -1) {\n        container.overlays.splice(idx, 1);\n      }\n    }\n  });\n};\nOverlays.prototype.show = function () {\n  setVisible(this._overlayRoot);\n};\nOverlays.prototype.hide = function () {\n  setVisible(this._overlayRoot, false);\n};\nOverlays.prototype.clear = function () {\n  this._overlays = {};\n  this._overlayContainers = [];\n  domClear(this._overlayRoot);\n};\nOverlays.prototype._updateOverlayContainer = function (container) {\n  var element = container.element,\n    html = container.html;\n\n  // update container left,top according to the elements x,y coordinates\n  // this ensures we can attach child elements relative to this container\n\n  var x = element.x,\n    y = element.y;\n  if (element.waypoints) {\n    var bbox = getBBox(element);\n    x = bbox.x;\n    y = bbox.y;\n  }\n  setPosition(html, x, y);\n  domAttr(container.html, 'data-container-id', element.id);\n};\nOverlays.prototype._updateOverlay = function (overlay) {\n  var position = overlay.position,\n    htmlContainer = overlay.htmlContainer,\n    element = overlay.element;\n\n  // update overlay html relative to shape because\n  // it is already positioned on the element\n\n  // update relative\n  var left = position.left,\n    top = position.top;\n  if (position.right !== undefined) {\n    var width;\n    if (element.waypoints) {\n      width = getBBox(element).width;\n    } else {\n      width = element.width;\n    }\n    left = position.right * -1 + width;\n  }\n  if (position.bottom !== undefined) {\n    var height;\n    if (element.waypoints) {\n      height = getBBox(element).height;\n    } else {\n      height = element.height;\n    }\n    top = position.bottom * -1 + height;\n  }\n  setPosition(htmlContainer, left || 0, top || 0);\n};\nOverlays.prototype._createOverlayContainer = function (element) {\n  var html = domify('<div class=\"djs-overlays\" style=\"position: absolute\" />');\n  this._overlayRoot.appendChild(html);\n  var container = {\n    html: html,\n    element: element,\n    overlays: []\n  };\n  this._updateOverlayContainer(container);\n  this._overlayContainers.push(container);\n  return container;\n};\nOverlays.prototype._updateRoot = function (viewbox) {\n  var scale = viewbox.scale || 1;\n  var matrix = 'matrix(' + [scale, 0, 0, scale, -1 * viewbox.x * scale, -1 * viewbox.y * scale].join(',') + ')';\n  setTransform(this._overlayRoot, matrix);\n};\nOverlays.prototype._getOverlayContainer = function (element, raw) {\n  var container = find(this._overlayContainers, function (c) {\n    return c.element === element;\n  });\n  if (!container && !raw) {\n    return this._createOverlayContainer(element);\n  }\n  return container;\n};\nOverlays.prototype._addOverlay = function (overlay) {\n  var id = overlay.id,\n    element = overlay.element,\n    html = overlay.html,\n    htmlContainer,\n    overlayContainer;\n\n  // unwrap jquery (for those who need it)\n  if (html.get && html.constructor.prototype.jquery) {\n    html = html.get(0);\n  }\n\n  // create proper html elements from\n  // overlay HTML strings\n  if (isString(html)) {\n    html = domify(html);\n  }\n  overlayContainer = this._getOverlayContainer(element);\n  htmlContainer = domify('<div class=\"djs-overlay\" data-overlay-id=\"' + id + '\" style=\"position: absolute\">');\n  htmlContainer.appendChild(html);\n  if (overlay.type) {\n    domClasses(htmlContainer).add('djs-overlay-' + overlay.type);\n  }\n  overlay.htmlContainer = htmlContainer;\n  overlayContainer.overlays.push(overlay);\n  overlayContainer.html.appendChild(htmlContainer);\n  this._overlays[id] = overlay;\n  this._updateOverlay(overlay);\n  this._updateOverlayVisibilty(overlay, this._canvas.viewbox());\n};\nOverlays.prototype._updateOverlayVisibilty = function (overlay, viewbox) {\n  var show = overlay.show,\n    minZoom = show && show.minZoom,\n    maxZoom = show && show.maxZoom,\n    htmlContainer = overlay.htmlContainer,\n    visible = true;\n  if (show) {\n    if (isDefined(minZoom) && minZoom > viewbox.scale || isDefined(maxZoom) && maxZoom < viewbox.scale) {\n      visible = false;\n    }\n    setVisible(htmlContainer, visible);\n  }\n  this._updateOverlayScale(overlay, viewbox);\n};\nOverlays.prototype._updateOverlayScale = function (overlay, viewbox) {\n  var shouldScale = overlay.scale,\n    minScale,\n    maxScale,\n    htmlContainer = overlay.htmlContainer;\n  var scale,\n    transform = '';\n  if (shouldScale !== true) {\n    if (shouldScale === false) {\n      minScale = 1;\n      maxScale = 1;\n    } else {\n      minScale = shouldScale.min;\n      maxScale = shouldScale.max;\n    }\n    if (isDefined(minScale) && viewbox.scale < minScale) {\n      scale = (1 / viewbox.scale || 1) * minScale;\n    }\n    if (isDefined(maxScale) && viewbox.scale > maxScale) {\n      scale = (1 / viewbox.scale || 1) * maxScale;\n    }\n  }\n  if (isDefined(scale)) {\n    transform = 'scale(' + scale + ',' + scale + ')';\n  }\n  setTransform(htmlContainer, transform);\n};\nOverlays.prototype._updateOverlaysVisibilty = function (viewbox) {\n  var self = this;\n  forEach(this._overlays, function (overlay) {\n    self._updateOverlayVisibilty(overlay, viewbox);\n  });\n};\nOverlays.prototype._init = function () {\n  var eventBus = this._eventBus;\n  var self = this;\n\n  // scroll/zoom integration\n\n  function updateViewbox(viewbox) {\n    self._updateRoot(viewbox);\n    self._updateOverlaysVisibilty(viewbox);\n    self.show();\n  }\n  eventBus.on('canvas.viewbox.changing', function (event) {\n    self.hide();\n  });\n  eventBus.on('canvas.viewbox.changed', function (event) {\n    updateViewbox(event.viewbox);\n  });\n\n  // remove integration\n\n  eventBus.on(['shape.remove', 'connection.remove'], function (e) {\n    var element = e.element;\n    var overlays = self.get({\n      element: element\n    });\n    forEach(overlays, function (o) {\n      self.remove(o.id);\n    });\n    var container = self._getOverlayContainer(element);\n    if (container) {\n      domRemove(container.html);\n      var i = self._overlayContainers.indexOf(container);\n      if (i !== -1) {\n        self._overlayContainers.splice(i, 1);\n      }\n    }\n  });\n\n  // move integration\n\n  eventBus.on('element.changed', LOW_PRIORITY, function (e) {\n    var element = e.element;\n    var container = self._getOverlayContainer(element, true);\n    if (container) {\n      forEach(container.overlays, function (overlay) {\n        self._updateOverlay(overlay);\n      });\n      self._updateOverlayContainer(container);\n    }\n  });\n\n  // marker integration, simply add them on the overlays as classes, too.\n\n  eventBus.on('element.marker.update', function (e) {\n    var container = self._getOverlayContainer(e.element, true);\n    if (container) {\n      domClasses(container.html)[e.add ? 'add' : 'remove'](e.marker);\n    }\n  });\n\n  // clear overlays with diagram\n\n  eventBus.on('diagram.clear', this.clear, this);\n};\n\n// helpers /////////////////////////////\n\nfunction createRoot(parentNode) {\n  var root = domify('<div class=\"djs-overlay-container\" style=\"position: absolute; width: 0; height: 0;\" />');\n  parentNode.insertBefore(root, parentNode.firstChild);\n  return root;\n}\nfunction setPosition(el, x, y) {\n  assign(el.style, {\n    left: x + 'px',\n    top: y + 'px'\n  });\n}\nfunction setVisible(el, visible) {\n  el.style.display = visible === false ? 'none' : '';\n}\nfunction setTransform(el, transform) {\n  el.style['transform-origin'] = 'top left';\n  ['', '-ms-', '-webkit-'].forEach(function (prefix) {\n    el.style[prefix + 'transform'] = transform;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}