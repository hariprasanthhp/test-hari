{"ast":null,"code":"import BpmnTreeWalker from 'bpmn-js/lib/import/BpmnTreeWalker';\nimport { getBusinessObject } from 'bpmn-js/lib/util/ModelUtil';\nimport { add as collectionAdd, remove as collectionRemove } from 'diagram-js/lib/util/Collections';\nimport { saveClear } from 'diagram-js/lib/util/Removal';\nimport { find } from 'min-dash';\nlet DeleteSubProcessHandler = /*#__PURE__*/(() => {\n  class DeleteSubProcessHandler {\n    constructor(bpmnFactory, bpmnImporter, bpmnjs, canvas, translate) {\n      this._bpmnFactory = bpmnFactory;\n      this._bpmnImporter = bpmnImporter;\n      this._bpmnjs = bpmnjs;\n      this._canvas = canvas;\n      this._translate = translate;\n    }\n    execute(context) {\n      var self = this;\n      function deleteElements(elements) {\n        saveClear(elements, function (element) {\n          deleteElement(element);\n        });\n      }\n      function deleteElement(element) {\n        if (element.children && element.children.length) {\n          element.children.slice().forEach(deleteElement);\n        }\n        if (element.waypoints) {\n          self._canvas.removeConnection(element);\n        } else {\n          self._canvas.removeShape(element);\n        }\n      }\n      var subProcess = context.subProcess,\n        targetDiagram = context.subProcessDiagram;\n\n      // on redo created diagram needs to be added\n      if (!this.findDiagram(subProcess.id)) {\n        // on do diagram needs to be created and added\n        if (!targetDiagram) {\n          targetDiagram = this._bpmnFactory.create('bpmndi:BPMNDiagram', {\n            plane: this._bpmnFactory.createDiPlane(getBusinessObject(subProcess))\n          });\n\n          // save for revert\n          context.created = true;\n          context.subProcessDiagram = targetDiagram;\n        }\n        var definitions = this._bpmnjs.getDefinitions(),\n          diagrams = definitions.diagrams;\n        collectionAdd(diagrams, targetDiagram);\n      }\n      var sourceDiagram = this.findDiagram(this._canvas.getRootElement().id);\n      var sourcePlaneElements = sourceDiagram.plane.planeElement.filter(function (element) {\n        return hasParentWithId(element, subProcess.id);\n      });\n\n      // (1) remove DI binding\n      sourcePlaneElements.forEach(function (sourcePlaneElement) {\n        delete sourcePlaneElement.bpmnElement.di;\n      });\n\n      // (2) move DI (but only children of subProcess)\n      moveDI(sourceDiagram, targetDiagram, sourcePlaneElements);\n\n      // (3) delete children\n      if (subProcess.children && subProcess.children.length) {\n        deleteElements(subProcess.children);\n      }\n    }\n    revert(context) {\n      var self = this;\n      var subProcess = context.subProcess,\n        subProcessDiagram = context.subProcessDiagram,\n        created = context.created;\n      var warnings = [];\n      var visitor = {\n        element: function (element, parentShape) {\n          return self._bpmnImporter.add(element, parentShape);\n        },\n        error: function (message, context) {\n          warnings.push({\n            message: message,\n            context: context\n          });\n        }\n      };\n      var walker = new BpmnTreeWalker(visitor, this._translate);\n      var plane = subProcessDiagram.plane,\n        planeElements = plane.planeElement;\n\n      // (1) register DI first\n      planeElements.forEach(function (planeElement) {\n        walker.registerDi(planeElement);\n      });\n\n      // (2) move DI\n      moveDI(subProcessDiagram, this.findDiagram(this._canvas.getRootElement().id));\n\n      // (3) delete bpmndi:BPMNDiagram if created\n      if (created) {\n        var definitions = this._bpmnjs.getDefinitions(),\n          diagrams = definitions.diagrams;\n        collectionRemove(diagrams, subProcessDiagram);\n      }\n\n      // (4) try to import\n      try {\n        walker.handleSubProcess(getBusinessObject(subProcess), subProcess);\n\n        // must be called afterwards\n        walker.handleDeferred();\n      } catch (e) {\n        // TODO(philippfromme): handle\n        console.error(e);\n      }\n      if (warnings.length) {\n        // TODO(philippfromme): handle\n        console.warn(warnings);\n      }\n    }\n    findDiagram(id) {\n      var diagrams = this._bpmnjs.getDefinitions().diagrams;\n      return find(diagrams, function (diagram) {\n        const plane = diagram.plane,\n          bpmnElement = plane.bpmnElement;\n        return bpmnElement.id === id;\n      });\n    }\n  }\n  DeleteSubProcessHandler.$inject = ['bpmnFactory', 'bpmnImporter', 'bpmnjs', 'canvas', 'translate'];\n\n  // helpers ///////////\n\n  /**\r\n   * Move DI elements from one bpmndi:BPMNDiagram to another.\r\n   *\r\n   * @param {Object} sourceDiagram\r\n   * @param {Object} targetDiagram\r\n   * @param {Array} sourcePlaneElements - Optional list of elements to move.\r\n   * If not specified, all elements will be moved.\r\n   */\n  return DeleteSubProcessHandler;\n})();\nexport { DeleteSubProcessHandler as default };\nfunction moveDI(sourceDiagram, targetDiagram, sourcePlaneElements) {\n  sourcePlaneElements = sourcePlaneElements || sourceDiagram.plane.planeElement;\n  var targetPlaneElements = targetDiagram.plane.get('planeElement');\n\n  // (1) add to target plane\n  sourcePlaneElements.forEach(function (sourcePlaneElement) {\n    collectionAdd(targetPlaneElements, sourcePlaneElement);\n  });\n\n  // (2) remove from source plane\n  sourcePlaneElements.slice().forEach(function (sourcePlaneElement) {\n    collectionRemove(sourceDiagram.plane.planeElement, sourcePlaneElement);\n    sourcePlaneElement.$parent = targetDiagram.plane;\n  });\n}\nfunction hasParentWithId(planeElement, parentId) {\n  while (planeElement.bpmnElement && planeElement.bpmnElement.$parent) {\n    if (planeElement.bpmnElement.$parent.id === parentId) {\n      return true;\n    }\n    planeElement = planeElement.bpmnElement.$parent;\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"module"}