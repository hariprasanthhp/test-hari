{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../historyreport/service/history-chart-options.service\";\nimport * as i4 from \"src/app-services/translate.service\";\nimport * as i5 from \"../../service/issue.service\";\nimport * as i6 from \"src/app/shared/services/sso-auth.service\";\nimport * as i7 from \"@angular/router\";\nimport * as i8 from \"src/app/sys-admin/services/common.service\";\nimport * as i9 from \"@ng-select/ng-select\";\nimport * as i10 from \"@angular/common\";\nfunction CommonRealtimeFilterComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelementStart(1, \"label\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 19);\n    i0.ɵɵelementStart(4, \"ng-select\", 20);\n    i0.ɵɵlistener(\"change\", function CommonRealtimeFilterComponent_div_19_Template_ng_select_change_4_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onAlarmGroupChange($event);\n    });\n    i0.ɵɵelementStart(5, \"ng-option\", 21);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"ng-option\", 22);\n    i0.ɵɵtext(8, \"ONT\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"ng-option\", 23);\n    i0.ɵɵtext(10, \"OLT\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.language[\"System Type\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"searchable\", false)(\"multiple\", false)(\"clearable\", false);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.language.All);\n  }\n}\nfunction CommonRealtimeFilterComponent_div_20_small_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.language[\"Invalid FSAN\"]);\n  }\n}\nfunction CommonRealtimeFilterComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelementStart(1, \"label\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 19);\n    i0.ɵɵelementStart(4, \"input\", 24);\n    i0.ɵɵlistener(\"keypress\", function CommonRealtimeFilterComponent_div_20_Template_input_keypress_4_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.removespecialcharacter($event);\n    })(\"keyup\", function CommonRealtimeFilterComponent_div_20_Template_input_keyup_4_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.validateFSAN($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, CommonRealtimeFilterComponent_div_20_small_5_Template, 2, 1, \"small\", 25);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.language[\"FSAN\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r1.language[\"FSAN\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.fsanvalid);\n  }\n}\nfunction CommonRealtimeFilterComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementStart(1, \"label\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 27);\n    i0.ɵɵelementStart(4, \"ng-select\", 28);\n    i0.ɵɵlistener(\"add\", function CommonRealtimeFilterComponent_div_21_Template_ng_select_add_4_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.validateAlarmName($event);\n    })(\"remove\", function CommonRealtimeFilterComponent_div_21_Template_ng_select_remove_4_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.validateAlarmName($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.language[\"Exclude Alarms\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r2.language[\"Alarm Name\"]);\n    i0.ɵɵproperty(\"searchable\", true)(\"clearable\", false)(\"multiple\", true)(\"items\", ctx_r2.alarmNames);\n  }\n}\nfunction CommonRealtimeFilterComponent_div_22_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r14.language[\"New_Profile_Validation2\"], \" \");\n  }\n}\nfunction CommonRealtimeFilterComponent_div_22_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r15.language[\"Please enter the display limit\"], \" \");\n  }\n}\nfunction CommonRealtimeFilterComponent_div_22_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵtemplate(1, CommonRealtimeFilterComponent_div_22_div_7_div_1_Template, 2, 1, \"div\", 33);\n    i0.ɵɵtemplate(2, CommonRealtimeFilterComponent_div_22_div_7_div_2_Template, 2, 1, \"div\", 33);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.filtersForm == null ? null : ctx_r13.filtersForm.controls == null ? null : ctx_r13.filtersForm.controls.limit.errors == null ? null : ctx_r13.filtersForm.controls.limit.errors.invalidNumber);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.filtersForm == null ? null : ctx_r13.filtersForm.controls == null ? null : ctx_r13.filtersForm.controls.limit.errors == null ? null : ctx_r13.filtersForm.controls.limit.errors.isrequired);\n  }\n}\nfunction CommonRealtimeFilterComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelementStart(1, \"label\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementStart(3, \"span\", 29);\n    i0.ɵɵtext(4, \"*\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 19);\n    i0.ɵɵelement(6, \"input\", 30);\n    i0.ɵɵtemplate(7, CommonRealtimeFilterComponent_div_22_div_7_Template, 3, 2, \"div\", 31);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r3.language[\"Display Limit\"], \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", ctx_r3.language[\"Display Limit\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r3.filtersForm == null ? null : ctx_r3.filtersForm.controls == null ? null : ctx_r3.filtersForm.controls.limit.invalid) && ((ctx_r3.filtersForm == null ? null : ctx_r3.filtersForm.controls == null ? null : ctx_r3.filtersForm.controls.limit.dirty) || (ctx_r3.filtersForm == null ? null : ctx_r3.filtersForm.controls == null ? null : ctx_r3.filtersForm.controls.limit.touched)));\n  }\n}\nexport let CommonRealtimeFilterComponent = /*#__PURE__*/(() => {\n  class CommonRealtimeFilterComponent {\n    constructor(http, fb, chartOptionService, translateService, issueService, ssoService, route, commonOrgService, router) {\n      this.http = http;\n      this.fb = fb;\n      this.chartOptionService = chartOptionService;\n      this.translateService = translateService;\n      this.issueService = issueService;\n      this.ssoService = ssoService;\n      this.route = route;\n      this.commonOrgService = commonOrgService;\n      this.router = router;\n      //visible:boolean=false\n      this.filterData = new EventEmitter();\n      this.filtersForm = this.fb.group({\n        region: [''],\n        location: [''],\n        system: [''],\n        limit: [20, [numValidator]],\n        systemStatus: 'connected',\n        alarmEventName: [''],\n        fsan_serialno: '',\n        device_type: ''\n      });\n      this.regionsDataArray = [\"All\"];\n      this.locationDataArray = [\"All\"];\n      this.systemDataArray = [\"All\"];\n      this.geoMapFilters = false;\n      this.activeTab = 'alarms';\n      this.geoMapIssue = 'false';\n      this.appliedFilters = {\n        region: true,\n        location: true,\n        system: true,\n        limit: true,\n        fsan_serialno: false,\n        device_type: false,\n        alarmEventName: false\n      };\n      this.url = this.router.url;\n      this.alarmNames = [];\n      this.hasScopeAccess = false;\n      this.showFSAN = true;\n      this.fsanvalid = true;\n      this.url = this.router.url;\n    }\n    ngOnInit() {\n      var _a, _b;\n      this.setFilters();\n      // this.getAlarmNames();\n      this.language = this.translateService.defualtLanguage;\n      this.languageSubject = this.translateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n      });\n      this.setIntialValue();\n      this.regionsApiLoader();\n      let scopes = this.ssoService.getScopes();\n      if (environment.VALIDATE_SCOPE) {\n        const alertScopes = this.issueService.getAlertScopes();\n        if (scopes === null || scopes === void 0 ? void 0 : scopes[(_a = alertScopes === null || alertScopes === void 0 ? void 0 : alertScopes[this.issueService.getAlertType()]) === null || _a === void 0 ? void 0 : _a.realtime]) {\n          this.hasScopeAccess = true;\n        }\n      } else {\n        this.hasScopeAccess = true;\n      }\n      if (!this.hasScopeAccess) {\n        this.ssoService.setPageAccess(false);\n        return;\n      } else {\n        this.ssoService.setPageAccess(true);\n      }\n      this.route.queryParams.subscribe(params => {\n        var _a, _b, _c;\n        this.geoMapIssue = params['geoMapIssue'] && params.geoMapIssue == 'true' ? params.geoMapIssue : 'false';\n        if (this.geoMapIssue == 'true') {\n          this.homeGeoMapFilters = this.issueService.getAppliedFilters();\n          this.issuesGeoMapFilters = this.homeGeoMapFilters ? this.homeGeoMapFilters : {};\n          if (this.issuesGeoMapFilters) {\n            this.filtersForm.get('device_type').setValue(this.issuesGeoMapFilters['device_type'] ? (_a = this.issuesGeoMapFilters['device_type']) === null || _a === void 0 ? void 0 : _a.toUpperCase() : 'ALL');\n            this.onAlarmGroupChange(this.filtersForm.get('device_type').value);\n            if (((_b = this.issuesGeoMapFilters['device_type']) === null || _b === void 0 ? void 0 : _b.toUpperCase()) == 'ONT' || ((_c = this.issuesGeoMapFilters['device_type']) === null || _c === void 0 ? void 0 : _c.toUpperCase()) == 'ALL') {\n              this.filtersForm.get('fsan_serialno').setValue(this.issuesGeoMapFilters['fsan_serialno'] ? this.issuesGeoMapFilters['fsan_serialno'] : '');\n            }\n          }\n        }\n        if (params['fsan']) {\n          this.filtersForm.patchValue({\n            fsan_serialno: params['fsan']\n          });\n          this.generateParams();\n        }\n      });\n      if ((_b = history === null || history === void 0 ? void 0 : history.state) === null || _b === void 0 ? void 0 : _b.filters) {\n        const filters = _.pickBy(history.state.filters, function (value, key) {\n          return value;\n        });\n        this.filtersForm.patchValue(filters);\n        this.onAlarmGroupChange(this.filtersForm.get('device_type').value);\n        this.issueService.setMapViewFilters(history.state.filters);\n      } else {\n        this.issueService.setMapViewFilters({});\n      }\n      console.log(history.state);\n      if (this.appliedFilters.alarmEventName) {\n        if (this.url.includes(\"geoMapIssue=true\")) {\n          setTimeout(() => {\n            this.getAlarmNames();\n          }, 2000);\n        } else {\n          this.getAlarmNames();\n        }\n      } else {\n        this.generateParams();\n      }\n    }\n    regionsApiLoader() {\n      this.regionsSubject = this.issueService.getRegions().subscribe(res => {\n        if (res && res.length) {\n          res = this.issueService.appendFqn(res);\n        }\n        this.chartOptionService.setRegionsInfo(res);\n        res.sort();\n        this.regionsDataArray = [...this.regionsDataArray, ...res];\n        if (this.filtersForm.get('region').value) {\n          this.loadLocationValue('');\n        }\n      }, error => {});\n    }\n    loadLocationValue(event) {\n      let ids = this.filtersForm.get('region').value;\n      let locationIds = this.filtersForm.get('location').value;\n      if (ids) {\n        let regionQuery = '';\n        if (ids.length) {\n          if (ids.indexOf('All') !== -1) {\n            this.locationDataArray = [\"All\"];\n            this.systemDataArray = [\"All\"];\n            this.filtersForm.get('location').setValue(['All']);\n            this.filtersForm.get('system').setValue(['All']);\n            return;\n          }\n          ids.forEach(element => {\n            if (element == 'All') {\n              return;\n            }\n            regionQuery += `&region=${element}`;\n          });\n          this.locationsSubject = this.http.get(`${environment.API_BASE_URL}nfa/locations?tenant=0${regionQuery}`).pipe(map(res => {\n            res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n              numeric: false\n            }));\n            res = this.issueService.appendFqn(res);\n            return res;\n          }), catchError(this.handleError)).subscribe(res => {\n            //this.setLocationsInfo(res);\n            this.chartOptionService.setLocationsInfo(res);\n            this.locationDataArray = [\"All\"];\n            this.locationDataArray = [...this.locationDataArray, ...res];\n            // this.locationDataArray = res;\n            // this.locationDataArray.push(\"All\");\n            if (locationIds && locationIds.length) {\n              let locationsObj = this.chartOptionService.getLocationsObj();\n              let locationListIds = Object.keys(locationsObj).length ? Object.keys(locationsObj) : [];\n              let validLocationIds = [];\n              locationIds.forEach(element => {\n                if (locationListIds.indexOf(element) !== -1) {\n                  validLocationIds.push(element);\n                }\n              });\n              if (!validLocationIds.length) {\n                validLocationIds = ['All'];\n              }\n              this.filtersForm.get('location').setValue(validLocationIds);\n              this.loadSystemValue();\n            }\n          }, error => {});\n          this;\n        } else {\n          this.filtersForm.get('region').setValue(['All']);\n          this.filtersForm.get('location').setValue(['All']);\n          this.filtersForm.get('system').setValue(['All']);\n          this.locationDataArray = [\"All\"];\n          this.systemDataArray = [\"All\"];\n        }\n      }\n    }\n    handleError(error) {\n      return throwError(error);\n    }\n    loadSystemValue(event) {\n      let regionids = this.filtersForm.get('region').value;\n      let locationids = this.filtersForm.get('location').value;\n      let systemIds = this.filtersForm.get('system').value;\n      if (regionids.length && locationids.length && locationids.indexOf('All') !== -1) {\n        this.filtersForm.get('system').setValue(['All']);\n        this.systemDataArray = [\"All\"];\n        return;\n      }\n      if (regionids.length && locationids.length && locationids.indexOf('All') === -1) {\n        let regionQuery = '';\n        regionids.forEach(element => {\n          if (element == 'All') {\n            return;\n          }\n          regionQuery += `&region=${element}`;\n        });\n        let locationQuery = '';\n        locationids.forEach(element => {\n          if (element == 'All') {\n            return;\n          }\n          locationQuery += `&location=${element}`;\n        });\n        this.systemsSubject = this.http.get(`${environment.API_BASE_URL}nfa/systems?tenant=0${regionQuery}${locationQuery}`).pipe(map(res => {\n          res.sort((a, b) => (a[\"name\"] || \"\").toString().localeCompare((b[\"name\"] || \"\").toString(), 'en', {\n            numeric: false\n          }));\n          return res;\n        }), catchError(this.handleError)).subscribe(res => {\n          //this.setSystemsInfo(res);\n          this.chartOptionService.setSystemsInfo(res);\n          this.systemDataArray = [\"All\"];\n          this.systemDataArray = [...this.systemDataArray, ...res];\n          if (systemIds && systemIds.length) {\n            let systemsObj = this.chartOptionService.getSystemsObj();\n            let systemListIds = Object.keys(systemsObj).length ? Object.keys(systemsObj) : [];\n            let validSystemIds = [];\n            systemIds.forEach(element => {\n              if (systemListIds.indexOf(element) !== -1) {\n                validSystemIds.push(element);\n              }\n            });\n            if (!validSystemIds.length) {\n              validSystemIds = ['All'];\n            }\n            this.filtersForm.get('system').setValue(validSystemIds);\n          }\n          // this.systemDataArray = res;\n          // this.systemDataArray.push(\"All\");\n        }, error => {});\n      } else {\n        if (!locationids.length) {\n          this.filtersForm.get('location').setValue(['All']);\n          this.filtersForm.get('system').setValue(['All']);\n          this.systemDataArray = [\"All\"];\n        }\n      }\n    }\n    clearFilter() {\n      this.setIntialValue();\n      this.locationDataArray = [\"All\"];\n      this.systemDataArray = [\"All\"];\n      this.generateParams();\n    }\n    validateRegion(event) {\n      let regions = this.filtersForm.get('region').value;\n      if (event === 'All') {\n        regions = ['All'];\n      } else {\n        let index = regions.indexOf('All');\n        if (index > -1) {\n          regions.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('region').setValue(regions);\n      this.loadLocationValue('');\n    }\n    validateLocation(event) {\n      let locations = this.filtersForm.get('location').value;\n      if (event === 'All') {\n        locations = ['All'];\n      } else {\n        let index = locations.indexOf('All');\n        if (index > -1) {\n          locations.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('location').setValue(locations);\n      this.loadSystemValue('');\n    }\n    validateSystem(event) {\n      let systems = this.filtersForm.get('system').value;\n      if (!systems.length) {\n        systems = ['All'];\n      } else if (event === 'All') {\n        systems = ['All'];\n      } else {\n        let index = systems.indexOf('All');\n        if (index > -1) {\n          systems.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('system').setValue(systems);\n    }\n    isNumber(evt) {\n      let limit = this.filtersForm.get(\"limit\").value;\n      return /^\\d*\\.?\\d*$/.test(limit);\n    }\n    validateAlarmName(event) {\n      let alarms = this.filtersForm.get('alarmEventName').value;\n      if (!alarms.length) {\n        alarms = ['All'];\n      } else if (event === 'All') {\n        alarms = ['All'];\n      } else {\n        let index = alarms.indexOf('All');\n        if (index > -1) {\n          alarms.splice(index, 1);\n        }\n      }\n      this.filtersForm.get('alarmEventName').setValue(alarms);\n    }\n    selectSystem(event) {\n      //todo\n    }\n    getAlarmNames() {\n      this.http.get(`${environment.API_BASE_URL}analytics-engine/alarmEvent?historyalarm=false&notificationType=Alarm&alertType=${this.issueService.getAlertType()}`).subscribe(json => {\n        let alarmNames = [{\n          id: \"All\",\n          name: \"None\"\n        }];\n        let alarm = json.sort(function (a, b) {\n          return a.toLowerCase().localeCompare(b.toLowerCase());\n        });\n        if (alarm) {\n          alarm.forEach(element => {\n            if (!element) {\n              return;\n            }\n            if (element === 'multiple-onts-down') {\n              return;\n            }\n            alarmNames.push({\n              id: element,\n              name: element\n            });\n          });\n        }\n        this.alarmNames = alarmNames;\n        if (this.appliedFilters.alarmEventName) {\n          this.getCustomAlarmsFunc();\n        }\n      });\n    }\n    getCustomAlarmsFunc() {\n      this.http.get(`${environment.API_BASE_URL}analytics-engine/customAlarms/false?alertType=${this.issueService.getAlertType()}`).subscribe(json => {\n        if (json && json.length > 0) {\n          let defaultExcludeAlarms = this.alarmNames.filter(el => json.findIndex(ele => ele['alarmName'] == el['name']) != -1).map(alarms => alarms['id']);\n          if (defaultExcludeAlarms && defaultExcludeAlarms.length > 0) {\n            this.filtersForm.get('alarmEventName').setValue(defaultExcludeAlarms);\n          }\n        } else {\n          this.filtersForm.get('alarmEventName').setValue(['All']);\n        }\n        this.generateParams();\n      }, err => {\n        this.error = true;\n        this.pageErrorHandle(err);\n        this.filtersForm.get('alarmEventName').setValue(['All']);\n        this.generateParams();\n      });\n    }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = this.language['Access Denied'];\n      } else {\n        this.errorInfo = this.commonOrgService.pageErrorHandle(err);\n      }\n      this.error = true;\n      this.loading = false;\n    }\n    closeAlert() {\n      this.error = false;\n    }\n    onAlarmGroupChange(value) {\n      if (value === 'OLT') {\n        this.filtersForm.get('fsan_serialno').setValue('');\n        this.showFSAN = false;\n      } else {\n        this.showFSAN = true;\n      }\n    }\n    validateFSAN(event) {\n      if (event) {\n        if (this.filtersForm.get('fsan_serialno').value.length === 0 || this.filtersForm.get('fsan_serialno').value.length === 12) {\n          this.fsanvalid = true;\n        }\n      } else {\n        this.fsanvalid = true;\n        if (this.filtersForm.get('fsan_serialno').value.length !== 0 && this.filtersForm.get('fsan_serialno').value.length !== 12) {\n          this.fsanvalid = false;\n        }\n      }\n    }\n    removespecialcharacter(event) {\n      var key;\n      key = event.keyCode; //key = event.charCode;\n      return key > 47 && key < 58 || key > 64 && key < 91 || key > 96 && key < 123;\n    }\n    changeTab(activeTab) {\n      this.issueService.fromMapNavigation(false);\n      this.activeTab = activeTab;\n      this.generateParams();\n    }\n    generateParams(changeTab) {\n      var _a, _b, _c, _d;\n      if ((_b = (_a = this.filtersForm) === null || _a === void 0 ? void 0 : _a.controls) === null || _b === void 0 ? void 0 : _b.limit.invalid) {\n        return;\n      }\n      this.validateFSAN();\n      if (!this.fsanvalid) return;\n      let fields = this.filtersForm.value;\n      fields = this.removeAllValues(fields);\n      let params = {\n        region: fields['region'],\n        location: fields['location'],\n        system: fields['system'],\n        alarmCount: this.filtersForm.get('limit').value ? this.filtersForm.get('limit').value : 0\n      };\n      if (this.appliedFilters.fsan_serialno) {\n        params['fsan_serialno'] = this.filtersForm.get('fsan_serialno').value;\n        params['device_type'] = this.filtersForm.get('device_type').value;\n        if (this.filtersForm.get('device_type').value === 'OLT') {\n          delete params['fsan_serialno'];\n        }\n      }\n      let alarms = [];\n      (_d = (_c = this.filtersForm.get('alarmEventName')) === null || _c === void 0 ? void 0 : _c.value) === null || _d === void 0 ? void 0 : _d.forEach(element => {\n        if (element == 'All') {\n          return;\n        }\n        alarms.push(element);\n      });\n      params['alarmEventName'] = alarms.join(',');\n      this.appliedParams = params;\n      if (this.activeTab == 'disconncted') {\n        this.geoMapFilters = false;\n      }\n      //this.issueService.setCurrentIssuesFilterParams(params, this.geoMapFilters, changeTab);\n      this.issueService.setAppliedFilters(params, true);\n    }\n    setFilters() {\n      var _a;\n      const alertType = (_a = this.issueService.getAlertType()) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n      if (alertType === 'system') {\n        this.appliedFilters.fsan_serialno = true;\n        this.appliedFilters.device_type = true;\n        this.appliedFilters.alarmEventName = true;\n      } else if (alertType === 'transformed') {\n        this.appliedFilters.alarmEventName = true;\n      } else if (alertType === 'health') {\n        this.appliedFilters.device_type = true;\n        this.appliedFilters.fsan_serialno = true;\n        this.appliedFilters.alarmEventName = true;\n      }\n    }\n    setIntialValue() {\n      this.filtersForm.patchValue({\n        region: ['All'],\n        location: ['All'],\n        system: ['All'],\n        limit: 20,\n        systemStatus: 'connected',\n        alarmEventName: ['All'],\n        fsan_serialno: ''\n      });\n      if (this.appliedFilters['device_type']) {\n        this.filtersForm.get('device_type').setValue('ALL');\n      }\n    }\n    removeAllValues(fields) {\n      ['system', 'region', 'location'].forEach(element => {\n        var _a, _b;\n        if (((_a = fields[element]) === null || _a === void 0 ? void 0 : _a.indexOf('All')) !== -1 || ((_b = fields[element]) === null || _b === void 0 ? void 0 : _b.indexOf('None')) !== -1) {\n          fields[element] = undefined;\n        }\n      });\n      return fields;\n    }\n    ngOnDestroy() {\n      this.issueService.setAppliedFilters({}, true);\n    }\n  }\n  CommonRealtimeFilterComponent.ɵfac = function CommonRealtimeFilterComponent_Factory(t) {\n    return new (t || CommonRealtimeFilterComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.HistoryChartOptionsService), i0.ɵɵdirectiveInject(i4.TranslateService), i0.ɵɵdirectiveInject(i5.IssueService), i0.ɵɵdirectiveInject(i6.SsoAuthService), i0.ɵɵdirectiveInject(i7.ActivatedRoute), i0.ɵɵdirectiveInject(i8.CommonService), i0.ɵɵdirectiveInject(i7.Router));\n  };\n  CommonRealtimeFilterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CommonRealtimeFilterComponent,\n    selectors: [[\"app-common-realtime-filter\"]],\n    inputs: {\n      geoMapFilters: \"geoMapFilters\",\n      activeTab: \"activeTab\"\n    },\n    outputs: {\n      filterData: \"filterData\"\n    },\n    decls: 31,\n    vars: 25,\n    consts: [[3, \"formGroup\"], [1, \"row\"], [1, \"col-md-12\", \"pl-0\", \"pr-0\"], [1, \"current-issue-menu-container\", \"flex-wrap\"], [1, \"current-issue-menu-item\", \"col-12\", \"col-sm-12\", \"col-md-3\", \"col-lg-3\"], [\"for\", \"Name\", 1, \"col-form-label\", \"select-font\"], [\"id\", \"current-issues-interval\", 1, \"w-100\"], [\"formControlName\", \"region\", \"bindValue\", \"id\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"multiple\", \"items\", \"clearable\", \"searchable\", \"placeholder\", \"add\", \"remove\"], [\"formControlName\", \"location\", \"bindValue\", \"id\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"multiple\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"add\", \"remove\"], [\"formControlName\", \"system\", \"bindValue\", \"uuid\", \"bindLabel\", \"name\", 1, \"selectboxwidth\", 3, \"multiple\", \"items\", \"placeholder\", \"clearable\", \"searchable\", \"add\", \"remove\"], [\"class\", \"current-issue-menu-item col-12 col-sm-6 col-md-3 col-lg-3\", 4, \"ngIf\"], [\"class\", \"current-issue-menu-item col-12 col-sm-12 col-md-3 col-lg-3\", 4, \"ngIf\"], [1, \"current-issue-menu-container\"], [1, \"row\", \"mt-1\"], [1, \"col-md-12\", \"text-left\"], [1, \"d-inline-flex\"], [\"type\", \"button\", 1, \"btn-default\", \"primary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn-default\", \"btn-dft\", \"ml-2\", 3, \"click\"], [1, \"current-issue-menu-item\", \"col-12\", \"col-sm-6\", \"col-md-3\", \"col-lg-3\"], [\"id\", \"current-issues-interval\", 1, \"w-100\", \"ccl-form\"], [\"formControlName\", \"device_type\", 3, \"searchable\", \"multiple\", \"clearable\", \"change\"], [\"value\", \"ALL\"], [\"value\", \"ONT\"], [\"value\", \"OLT\"], [\"formControlName\", \"fsan_serialno\", \"type\", \"text\", \"maxlength\", \"12\", 1, \"form-control\", 3, \"placeholder\", \"keypress\", \"keyup\"], [\"class\", \"vald-tag red\", 4, \"ngIf\"], [1, \"vald-tag\", \"red\"], [\"id\", \"current-issues-interval\", 1, \"custom-selectbox\", \"w-100\"], [\"formControlName\", \"alarmEventName\", \"id\", \"alarmEventName\", \"bindValue\", \"id\", \"bindLabel\", \"name\", 3, \"searchable\", \"clearable\", \"multiple\", \"placeholder\", \"items\", \"add\", \"remove\"], [1, \"error\"], [\"formControlName\", \"limit\", \"type\", \"number\", \"min\", \"1\", 1, \"form-control\", 3, \"placeholder\"], [\"class\", \"errorMessage\", 4, \"ngIf\"], [1, \"errorMessage\"], [4, \"ngIf\"]],\n    template: function CommonRealtimeFilterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"label\", 5);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"ng-select\", 7);\n        i0.ɵɵlistener(\"add\", function CommonRealtimeFilterComponent_Template_ng_select_add_8_listener($event) {\n          return ctx.validateRegion($event);\n        })(\"remove\", function CommonRealtimeFilterComponent_Template_ng_select_remove_8_listener($event) {\n          return ctx.loadLocationValue($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 4);\n        i0.ɵɵelementStart(10, \"label\", 5);\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 6);\n        i0.ɵɵelementStart(13, \"ng-select\", 8);\n        i0.ɵɵlistener(\"add\", function CommonRealtimeFilterComponent_Template_ng_select_add_13_listener($event) {\n          return ctx.validateLocation($event);\n        })(\"remove\", function CommonRealtimeFilterComponent_Template_ng_select_remove_13_listener($event) {\n          return ctx.loadSystemValue($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 4);\n        i0.ɵɵelementStart(15, \"label\", 5);\n        i0.ɵɵtext(16);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 6);\n        i0.ɵɵelementStart(18, \"ng-select\", 9);\n        i0.ɵɵlistener(\"add\", function CommonRealtimeFilterComponent_Template_ng_select_add_18_listener($event) {\n          return ctx.validateSystem($event);\n        })(\"remove\", function CommonRealtimeFilterComponent_Template_ng_select_remove_18_listener($event) {\n          return ctx.validateSystem($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, CommonRealtimeFilterComponent_div_19_Template, 11, 5, \"div\", 10);\n        i0.ɵɵtemplate(20, CommonRealtimeFilterComponent_div_20_Template, 6, 3, \"div\", 10);\n        i0.ɵɵtemplate(21, CommonRealtimeFilterComponent_div_21_Template, 5, 6, \"div\", 11);\n        i0.ɵɵtemplate(22, CommonRealtimeFilterComponent_div_22_Template, 8, 3, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 13);\n        i0.ɵɵelementStart(25, \"div\", 14);\n        i0.ɵɵelementStart(26, \"div\", 15);\n        i0.ɵɵelementStart(27, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function CommonRealtimeFilterComponent_Template_button_click_27_listener() {\n          return ctx.generateParams();\n        });\n        i0.ɵɵtext(28);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function CommonRealtimeFilterComponent_Template_button_click_29_listener() {\n          return ctx.clearFilter();\n        });\n        i0.ɵɵtext(30);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.filtersForm);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.language.region);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.language.region);\n        i0.ɵɵproperty(\"multiple\", true)(\"items\", ctx.regionsDataArray)(\"clearable\", false)(\"searchable\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.language.Location);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.language.Location);\n        i0.ɵɵproperty(\"multiple\", true)(\"items\", ctx.locationDataArray)(\"clearable\", false)(\"searchable\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.language.System);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.language.System);\n        i0.ɵɵproperty(\"multiple\", true)(\"items\", ctx.systemDataArray)(\"clearable\", false)(\"searchable\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.appliedFilters.device_type);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showFSAN && ctx.appliedFilters.fsan_serialno);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.appliedFilters.alarmEventName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.geoMapFilters);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.apply, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.language.Clear_Filters, \" \");\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i9.NgSelectComponent, i2.NgControlStatus, i2.FormControlName, i10.NgIf, i9.ɵr, i2.DefaultValueAccessor, i2.MaxLengthValidator, i2.NumberValueAccessor, i2.MinValidator],\n    styles: [\"@charset \\\"UTF-8\\\";.red[_ngcontent-%COMP%]{color:#c70000}.issue-left-menu[_ngcontent-%COMP%]{width:100%}.issue-right-content[_ngcontent-%COMP%]{width:100%;border-left:1px solid #dedede;padding:10px}.current-issue-menu-item[_ngcontent-%COMP%]{flex-grow:0}.btn-secondary[_ngcontent-%COMP%]{color:#5f6165!important;background-color:#f7f8fa!important;border-color:#888!important}.current-issues-table[_ngcontent-%COMP%]{width:100%}.current-issues-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]{width:100%}.current-issues-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]{font-size:14px}.current-issues-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]{font-size:14px}.btn-secondary[_ngcontent-%COMP%]{color:#5f6165!important;background-color:#f8f8fa!important;border-color:#f8f8fa!important;padding:3px \\\\200b 10px}.undo-icon[_ngcontent-%COMP%]{background-color:#f8f8fa;padding:3px;color:#9e9e9e;border-radius:15px;margin:2px;font-size:17px;cursor:pointer;width:30px;height:30px;text-align:center}.table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{font-weight:600!important;font-size:16px}.cco-secondary-title[_ngcontent-%COMP%]{font-size:24px;font-style:normal;font-weight:400;line-height:30px;letter-spacing:0em;text-align:left;color:#1a1f22}.mw-170[_ngcontent-%COMP%]{min-width:170px}.current-issue-menu-container[_ngcontent-%COMP%]{display:flex;margin:20px 0 0;align-items:center;flex-wrap:wrap;justify-self:start}.test-container[_ngcontent-%COMP%]{display:flex;width:100%}.item[_ngcontent-%COMP%]{flex-grow:1;border-left:1px solid #EBEAEF;padding-left:12px;width:calc(100% / 4)}.item[_ngcontent-%COMP%] + .item[_ngcontent-%COMP%]{margin-left:2%}@media screen and (max-width: 767px){.mpl[_ngcontent-%COMP%]{padding-left:15px!important}.current-issue-menu-container[_ngcontent-%COMP%]{display:block}.current-issue-menu-item[_ngcontent-%COMP%]{margin-top:10px;margin-left:0!important}.mt-center[_ngcontent-%COMP%]{text-align:center!important}#current-issue-table[_ngcontent-%COMP%]{overflow-x:scroll}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar{height:5px}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar-track{height:5px;background:#f1f1f1}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{height:5px;background:#ddd}}@media screen and (min-width: 768px) and (max-width: 1140px){#current-issue-table[_ngcontent-%COMP%]{overflow-x:scroll}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar{height:5px}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar-track{height:5px;background:#f1f1f1}#current-issue-table[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{height:5px;background:#ddd}}.modal.fade[_ngcontent-%COMP%]   .modal-dialog[_ngcontent-%COMP%]{border-radius:26px;max-width:70%!important}.current-issues-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(1){width:120px!important}.current-issues-table[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:nth-child(1){width:120px!important}.max-w-90[_ngcontent-%COMP%]{max-width:90px}.col-recom[_ngcontent-%COMP%]{min-width:300px}.col-recom[_ngcontent-%COMP%]   .subj-text[_ngcontent-%COMP%]{max-height:300px;overflow-y:auto}.col-resource[_ngcontent-%COMP%]{max-width:400px!important}.col-resource[_ngcontent-%COMP%]   .col-res-data[_ngcontent-%COMP%]{min-width:400px;max-width:400px;word-break:break-all}.btn-transparent[_ngcontent-%COMP%]{color:#0279ff;border:none;background:none;font-size:14px}.btn-transparent[_ngcontent-%COMP%]:hover{color:#0054b2}.btn-sm-primary[_ngcontent-%COMP%]{height:24px;line-height:16px!important;padding:3px 20px!important;font-size:14px}\"]\n  });\n  return CommonRealtimeFilterComponent;\n})();\nexport function numValidator(control) {\n  let regex = /^\\s*(\\d{1,5}|-\\d+)?\\s*$/;\n  if ((control === null || control === void 0 ? void 0 : control.value) == 0) {\n    control === null || control === void 0 ? void 0 : control.setValue(20);\n    return null;\n  }\n  if (!(control === null || control === void 0 ? void 0 : control.value)) {\n    return {\n      'isrequired': true\n    };\n  }\n  if ((control === null || control === void 0 ? void 0 : control.value) > 10000) {\n    control === null || control === void 0 ? void 0 : control.setValue(10000);\n    return null;\n  }\n  if ((control === null || control === void 0 ? void 0 : control.value) < 1) {\n    control === null || control === void 0 ? void 0 : control.setValue(Math.abs(control.value));\n    return null;\n  }\n  if (!regex.test(control.value)) {\n    return {\n      'invalidNumber': true\n    };\n  }\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}