{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let NetopsServiceService = /*#__PURE__*/(() => {\n  class NetopsServiceService {\n    constructor(http, Sso) {\n      this.http = http;\n      this.Sso = Sso;\n    }\n    AddWorkflowData(data) {\n      const ID = this.Sso.getOrg(this.Sso.getOrgId());\n      return this.http.post(environment.SUPPORT_URL + `/netops-wf/workflow?${ID}`, data);\n    }\n    editWorkflowData(data) {\n      const ID = this.Sso.getOrg(this.Sso.getOrgId());\n      return this.http.put(environment.SUPPORT_URL + '/netops-wf/workflow/' + data._id + '?', data);\n    }\n    GetWorkflowGrid(orgId, excludOnBoot) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-wf/workflow?${ID}${excludOnBoot ? excludOnBoot : ''}`);\n    }\n    DownloadWholeWkflwData(orgId, workflowId, timezone) {\n      const params = new HttpParams()\n      // .set('orgId', orgId)\n      .set('workflowId', workflowId).set('timezone', timezone);\n      if (this.Sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.get(`${environment.SUPPORT_URL}/workflow/downloadLogByGFS`, {\n        params,\n        responseType: 'text'\n      });\n    }\n    DownloadpartWkflwData(orgId, workflowId, execId, timezone, state) {\n      const params = new HttpParams()\n      // .set('orgId', orgId)\n      .set('workflowId', workflowId).set('execId', execId).set('timezone', timezone).set('state', state);\n      if (this.Sso.getOrg(orgId)) {\n        params.set(\"orgId\", orgId);\n      }\n      return this.http.get(`${environment.SUPPORT_URL}/workflow/downloadLogByGFS`, {\n        params,\n        responseType: 'text'\n      });\n    }\n    /* GetWorkflowGridWithPagination(orgId, skip, limit) {\r\n      return this.http.get(`${environment.SUPPORT_URL}/netops-wf/workflow?${ID}skip=${skip}&limit=${limit}`);\r\n    }\r\n    GetWorkFlowCount(orgId) {\r\n      return this.http.get(`${environment.SUPPORT_URL}/netops-wf/workflow/count?${ID}`);\r\n    } */\n    GetWorkflowFoundation(orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-wf/workflow?${ID}source=Foundation`);\n    }\n    GetWorkflowById(workflowId) {\n      return this.http.get(`${environment.SUPPORT_URL}/netops-wf/workflow/${workflowId}`);\n    }\n    DeleteWrkflw(workflowId) {\n      return this.http.delete(`${environment.SUPPORT_URL}/netops-wf/workflow/${workflowId}`);\n    }\n    suspendWrkflw(workflowId) {\n      return this.http.put(`${environment.SUPPORT_URL}/netops-wf/workflow/${workflowId}/suspend`, '');\n    }\n    resumeWrkflw(workflowId) {\n      return this.http.put(`${environment.SUPPORT_URL}/netops-wf/workflow/${workflowId}/resume`, '');\n    }\n    GetDeviceGroup(orgId, skip, limit) {\n      return this.http.get(environment.SUPPORT_URL + '/netops-device/group?' + 'skip=' + skip + '&limit=' + limit);\n    }\n    getDeviceGrpById(deviceId) {\n      return this.http.get(environment.SUPPORT_URL + '/netops-device/group/' + deviceId);\n    }\n    getConfigFile(orgId, type) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(environment.SUPPORT_URL + `/netops-file/file?${ID}` + 'type=' + type);\n    }\n    getConfigProfile(orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(environment.SUPPORT_URL + `/netops-config/configuration-profile?${ID}` + 'brief=' + true);\n    }\n    getStaticDevice(orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(environment.SUPPORT_URL + `/netops-device/group?${ID}` + 'skip=' + 0 + '&limit=' + 0);\n    }\n    getWorkflowById(id) {\n      return this.http.get(environment.SUPPORT_URL + '/netops-wf/workflow/' + id);\n    }\n    getExecLogs(orgId, workflowId, filter, execId = '') {\n      const ID = this.Sso.getOrg(orgId);\n      if (filter === \"Succeeded\" || filter === 'Failed' || filter === 'In Progress' || filter === 'Pending') {\n        return this.http.get(environment.SUPPORT_URL + `/netops-wf/workflow-exec-logs?${ID}` + 'workflowId=' + workflowId + '&state=' + filter + '&execId=' + execId);\n      } else {\n        return this.http.get(environment.SUPPORT_URL + `/netops-wf/workflow-exec-logs?${ID}` + 'workflowId=' + workflowId + '&execId=' + execId);\n      }\n    }\n    getReplaceService(orgId, category, profileId, mode, framingType, voiceType) {\n      if (profileId && mode && framingType) {\n        const params = new HttpParams()\n        // .set('orgId', orgId)\n        .set('category', category).set('profileId', profileId).set('mode', mode).set('framingtype', framingType);\n        if (this.Sso.getOrg(orgId)) {\n          params.set(\"orgId\", orgId);\n        }\n        return this.http.get(environment.SUPPORT_URL + '/netops-config/configuration-profile-managed-ont', {\n          params\n        });\n      } else if (profileId && voiceType) {\n        const params = new HttpParams()\n        // .set('orgId', orgId)\n        .set('category', category).set('profileId', profileId).set('voicetype', voiceType);\n        if (this.Sso.getOrg(orgId)) {\n          params.set(\"orgId\", orgId);\n        }\n        return this.http.get(environment.SUPPORT_URL + '/netops-config/configuration-profile-managed-ont', {\n          params\n        });\n      } else if (profileId && mode) {\n        const params = new HttpParams()\n        // .set('orgId', orgId)\n        .set('category', category).set('mode', mode).set('profileId', profileId);\n        if (this.Sso.getOrg(orgId)) {\n          params.set(\"orgId\", orgId);\n        }\n        return this.http.get(environment.SUPPORT_URL + '/netops-config/configuration-profile-managed-ont', {\n          params\n        });\n      } else if (profileId) {\n        const params = new HttpParams()\n        // .set('orgId', orgId)\n        .set('category', category).set('profileId', profileId);\n        if (this.Sso.getOrg(orgId)) {\n          params.set(\"orgId\", orgId);\n        }\n        return this.http.get(environment.SUPPORT_URL + '/netops-config/configuration-profile-managed-ont', {\n          params\n        });\n      } else {\n        const params = new HttpParams()\n        // .set('orgId', orgId)\n        .set('category', category);\n        if (this.Sso.getOrg(orgId)) {\n          params.set(\"orgId\", orgId);\n        }\n        return this.http.get(environment.SUPPORT_URL + '/netops-config/configuration-profile-managed-ont', {\n          params\n        });\n      }\n    }\n    getWorkflowByHist(orgId, workflowId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(environment.SUPPORT_URL + `/netops-wf/workflow/history?${ID}` + 'workflowId=' + workflowId);\n    }\n    GetWorkflowHisyPagination(orgId, workflowId, skip, limit) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-wf/workflow/history?${ID}workflowId=${workflowId}&limit=${limit}&skip=${skip}`);\n    }\n    GetWorkFlowCountHist(orgId, workflowId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(`${environment.SUPPORT_URL}/netops-wf/workflow/history/count?${ID}workflowId=${workflowId}`);\n    }\n    getWorkFlowExcLogsCount(orgId, workflowId, execId, state) {\n      const ID = this.Sso.getOrg(orgId);\n      if (state) {\n        return this.http.get(environment.SUPPORT_URL + `/netops-wf/workflow-exec-logs/count?${ID}` + 'workflowId=' + workflowId + '&execId=' + execId + '&state=' + state);\n      } else {\n        return this.http.get(environment.SUPPORT_URL + `/netops-wf/workflow-exec-logs/count?${ID}` + 'workflowId=' + workflowId + '&execId=' + execId);\n      }\n    }\n    getIqSuites(orgId) {\n      const ID = this.Sso.getOrg(orgId);\n      return this.http.get(environment.FOUNDATION_BASE_URL + `/subscriber-systems/org-config/iq-suites?${ID}`);\n    }\n    updateIQSuitesConfigs(orgId, request) {\n      const ID = this.Sso.getOrg(orgId);\n      let url = `${environment.FOUNDATION_BASE_URL}subscriber-systems/org-config/iq-suites?${ID}`;\n      return this.http.put(url, request);\n    }\n  }\n  NetopsServiceService.ɵfac = function NetopsServiceService_Factory(t) {\n    return new (t || NetopsServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  NetopsServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NetopsServiceService,\n    factory: NetopsServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return NetopsServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}