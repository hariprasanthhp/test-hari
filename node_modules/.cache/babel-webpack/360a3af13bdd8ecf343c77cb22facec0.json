{"ast":null,"code":"import { assign } from 'min-dash';\nvar round = Math.round;\n\n/**\n * A handler that implements reversible addition of shapes.\n *\n * @param {canvas} Canvas\n */\nexport default function CreateShapeHandler(canvas) {\n  this._canvas = canvas;\n}\nCreateShapeHandler.$inject = ['canvas'];\n\n// api //////////////////////\n\n/**\n * Appends a shape to a target shape\n *\n * @param {Object} context\n * @param {djs.model.Base} context.parent the parent object\n * @param {Point} context.position position of the new element\n */\nCreateShapeHandler.prototype.execute = function (context) {\n  var shape = context.shape,\n    positionOrBounds = context.position,\n    parent = context.parent,\n    parentIndex = context.parentIndex;\n  if (!parent) {\n    throw new Error('parent required');\n  }\n  if (!positionOrBounds) {\n    throw new Error('position required');\n  }\n\n  // (1) add at event center position _or_ at given bounds\n  if (positionOrBounds.width !== undefined) {\n    assign(shape, positionOrBounds);\n  } else {\n    assign(shape, {\n      x: positionOrBounds.x - round(shape.width / 2),\n      y: positionOrBounds.y - round(shape.height / 2)\n    });\n  }\n\n  // (2) add to canvas\n  this._canvas.addShape(shape, parent, parentIndex);\n  return shape;\n};\n\n/**\n * Undo append by removing the shape\n */\nCreateShapeHandler.prototype.revert = function (context) {\n  var shape = context.shape;\n\n  // (3) remove form canvas\n  this._canvas.removeShape(shape);\n  return shape;\n};","map":null,"metadata":{},"sourceType":"module"}