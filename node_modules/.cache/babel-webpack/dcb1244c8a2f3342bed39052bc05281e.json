{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { UsageEnum } from \"../models/usage-model\";\nimport { environment } from \"../../../../../environments/environment\";\nimport { addDeviceProfile, addNewProfilewithDevice, addWebAddressProfile, allProfilesBlockStatusUpdate, allUsersSummary, applicationDisabled, applicationEnable, applicationInstall, applicationStatus, applicationUnInstall, avatarUpload, deleteAllBedTimeProfile, deleteBedTimeProfileByDayId, deleteDeviceProfile, deleteProfile, deleteSpecificBEdTIme, editCategoryProfile, editProfileApp, editProfileAppCategory, editProfileBedTime, featureList, getAllCategoryProfile, getNotification, getProfileAppsList, getProfileBedTime, getSafeSearchStatus, getSearchList, getSelectedAppList, getUserId, getYoutubeRestrictionStatus, listProfileWebUrl, profileBlockStatusUpdate, profilerouterUsageList, profileStaionList, removeProfileWebUrl, removeSelectedApp, setBedTieDayEnable, setBedTimeAllDay, updateContentFilterMain, setSafeSearchStatus, setYoutubeRestrictionStatus, stationListAll, updateAllBedTimeProfile, updateContentFilter, updateProfileName, updateWebAddressProfile, usersProfileSummary, getAllCategory, getAppList, getWebList, editCategoryMain, editProfileAppMain, getSearchListMain, addWebAddressMain, removeProfileWebUrlMain, removeSelectedAppMain, setWebAddressMain, updateWebAddressMain, setSafeSearchStatusMain, getSafeSearchStatusMain, setyoutubeStatusMain, getyoutubeStatusMain, getDns, setDns, getDnsMain, setDnsMain, getIcloud, setIcloud, getIcloudMain, setIcloudMain, getParentControlCategories } from \"./endPoints\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nexport let ExperianceIQService = /*#__PURE__*/(() => {\n  class ExperianceIQService {\n    constructor(http, formBuilder) {\n      this.http = http;\n      this.formBuilder = formBuilder;\n    }\n    getUserId(serialNumber) {\n      const params = new HttpParams().set('sn', serialNumber);\n      return this.http.get(getUserId, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getFeatureList(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(featureList, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getqoslist_V2(userId) {\n      /* var authToken = 'Bearer '+ token;\r\n       \r\n      var headers_object = new HttpHeaders({\r\n       'Content-Type': 'application/json',\r\n        'Authorization': authToken\r\n      });\r\n      const httpOptions = {\r\n       headers: headers_object\r\n      };*/\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(`${environment.SUPPORT_URL}/qos/summary`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    getprofileAdd_V1(token, body) {\n      return this.http.post(`${environment.SUPPORT_URL}/qos/profile/add`, body).pipe(catchError(this.handleError));\n    }\n    ActivateV1(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.post(`${environment.SUPPORT_URL}/qos/activate`, {\n        'userId': userId\n      }).pipe(catchError(this.handleError));\n    }\n    DeactivateV1(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.delete(`${environment.SUPPORT_URL}/qos/deactivate`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    editqosDeviceV1(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(`${environment.SUPPORT_URL}/qos/device/edit`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    getQosV1(userId) {\n      /*var authToken = 'Bearer '+ token;\r\n      \r\n      var headers_object = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n       'Authorization': authToken\r\n      });\r\n      const httpOptions = {\r\n      headers: headers_object\r\n      };*/\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(`${environment.SUPPORT_URL}/qos`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    editqosProfileListV1(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(`${environment.SUPPORT_URL}/qos/profile/list`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    updateProfileV1(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(`${environment.SUPPORT_URL}/qos/profile/list`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    deviceUpdateV1(body) {\n      return this.http.put(`${environment.SUPPORT_URL}/qos/device/update`, body).pipe(catchError(this.handleError));\n    }\n    deleteDeviceV1(userId, deviceId) {\n      const params = new HttpParams().set('macAddr', deviceId).set('userId', userId);\n      return this.http.delete(`${environment.SUPPORT_URL}/qos/device/remove`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    deleteProfileV1(userId, deviceId) {\n      const params = new HttpParams().set('id', deviceId).set('userId', userId);\n      return this.http.delete(`${environment.SUPPORT_URL}/qos/profile/remove`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    getProfileV1(userId, profileId) {\n      const params = new HttpParams().set('id', profileId).set('userId', userId);\n      return this.http.get(`${environment.SUPPORT_URL}/qos/profile`, {\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    UpdateProfileV1(token, body) {\n      return this.http.put(`${environment.SUPPORT_URL}/qos/profile/update`, body).pipe(catchError(this.handleError));\n    }\n    updateDefaultProfileV1(userId, body) {\n      return this.http.put(`${environment.SUPPORT_URL}/qos/update`, body).pipe(catchError(this.handleError));\n    }\n    //-joy-09-03-21-network-priority\n    addProfileNewDevice(body) {\n      return this.http.put(addNewProfilewithDevice, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    deleteProfile(profileId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('userId', userId);\n      return this.http.delete(deleteProfile, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    stationListAll(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(stationListAll, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    profileStationList(profileId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('userId', userId);\n      return this.http.get(profileStaionList, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    editProfileName(body) {\n      return this.http.post(updateProfileName, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    uploadAvatar(file, profileId) {\n      let formData = new FormData();\n      formData.append('upfile', file);\n      formData.append('profileId', profileId);\n      return this.http.post(avatarUpload, formData).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getAllUsersSummary(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(allUsersSummary, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getUserProfileSummary(profileId, userId, type) {\n      if (type) {\n        const params = new HttpParams().set('profileId', profileId).set('userId', userId).set('type', type);\n        return this.http.get(usersProfileSummary, {\n          params\n        }).pipe(catchError(this.handleError) //  handle the error\n        );\n      } else {\n        const params = new HttpParams().set('profileId', profileId).set('userId', userId);\n        return this.http.get(usersProfileSummary, {\n          params\n        }).pipe(catchError(this.handleError) //  handle the error\n        );\n      }\n    }\n\n    updateProfileBlockStatus(body) {\n      return this.http.post(profileBlockStatusUpdate, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateAllProfileBlockStatus(body) {\n      return this.http.post(allProfilesBlockStatusUpdate, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    addDeviceProfile(body) {\n      return this.http.post(addDeviceProfile, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    removeDeviceProfile(body) {\n      return this.http.post(deleteDeviceProfile, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    addWebAddressProfile(body) {\n      return this.http.put(addWebAddressProfile, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    addWebAddressMain(body) {\n      return this.http.put(addWebAddressMain, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    setWebAddressMain(body) {\n      return this.http.post(setWebAddressMain, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateWebAddressProfile(body) {\n      return this.http.post(updateWebAddressProfile, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateWebAddressMain(body) {\n      return this.http.post(updateWebAddressMain, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getProfileWebUrl(profileId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('userId', userId);\n      return this.http.get(listProfileWebUrl, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getProfileWebUrlMain(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(getWebList, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    removeWebUrl(profileId, webUrlId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('userId', userId).set('id', webUrlId);\n      return this.http.delete(removeProfileWebUrl, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    removeWebUrlMain(webUrlId, userId) {\n      const params = new HttpParams().set('userId', userId).set('id', webUrlId);\n      return this.http.delete(removeProfileWebUrlMain, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getProfileUsage(userId, profileId, type) {\n      if (type) {\n        const params = new HttpParams().set('type', type).set('profileId', profileId).set('userId', userId);\n        return this.http.get(profilerouterUsageList, {\n          params\n        }).pipe(catchError(this.handleError)); //  handle the error\n      } else {\n        const params = new HttpParams().set('type', UsageEnum.DAY).set('profileId', profileId).set('userId', userId);\n        return this.http.get(profilerouterUsageList, {\n          params\n        }).pipe(catchError(this.handleError)); //  handle the error\n      }\n    }\n\n    getBedTimeByProfileId(profileId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('userId', userId);\n      return this.http.get(getProfileBedTime, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    editBedTimeProfile(body) {\n      return this.http.post(editProfileBedTime, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateAllProfileBedTime(body) {\n      return this.http.post(updateAllBedTimeProfile, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    setEnableBedtimeAllDay(body) {\n      return this.http.post(setBedTimeAllDay, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateBedTimeByDay(body) {\n      return this.http.post(setBedTieDayEnable, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    deleteBedTImeByProfileId(userId, profileId, dayId, indexOfDay) {\n      const params = new HttpParams().set('userId', userId).set('profileId', profileId).set('id', String(dayId)).set('idx', String(indexOfDay));\n      return this.http.delete(deleteSpecificBEdTIme, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getAllAppsByProfileId(profileId) {\n      const params = new HttpParams().set('profileId', profileId);\n      return this.http.get(getProfileAppsList, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    editAppByProfileId(body) {\n      return this.http.post(editProfileApp, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    editAppMain(body) {\n      return this.http.post(editProfileAppMain, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    editAppCategory(body) {\n      return this.http.put(editProfileAppCategory, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getAllCategoryByProfileId(profileId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('userId', userId);\n      return this.http.get(getAllCategoryProfile, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    editCategoyByProfileId(body) {\n      return this.http.post(editCategoryProfile, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    editCategoyMain(body) {\n      return this.http.post(editCategoryMain, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    searchApp(profileId, keyWord, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('keyword', keyWord).set('userId', userId);\n      return this.http.get(getSearchList, {\n        params\n      }).pipe(map(data => data.apps), catchError(this.handleError)); //  handle the error)); \n    }\n\n    searchAppMain(keyWord, userId) {\n      const params = new HttpParams().set('keyword', keyWord).set('userId', userId);\n      return this.http.get(getSearchListMain, {\n        params\n      }).pipe(map(data => data.apps), catchError(this.handleError)); //  handle the error)); \n    }\n\n    getAppListByProfileId(profileId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('userId', userId);\n      return this.http.get(getSelectedAppList, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getAppListMain(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(getAppList, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    deleteAppByProfileAndAppId(profileId, appId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('aid', appId).set('userId', userId);\n      return this.http.delete(removeSelectedApp, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    deleteAppByProfileAndAppIdMain(appId, userId) {\n      const params = new HttpParams().set('aid', appId).set('userId', userId);\n      return this.http.delete(removeSelectedAppMain, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getSafeSearchStatus(profileId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('userId', userId);\n      return this.http.get(getSafeSearchStatus, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getSafeSearchStatusMain(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(getSafeSearchStatusMain, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateSafeSearchStatus(body) {\n      return this.http.post(setSafeSearchStatus, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateSafeSearchStatusMain(body) {\n      return this.http.post(setSafeSearchStatusMain, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getYotubeRestrictionStatus(profileId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('userId', userId);\n      return this.http.get(getYoutubeRestrictionStatus, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getYotubeRestrictionStatusMain(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(getyoutubeStatusMain, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateYotubeRestrictionStatus(body) {\n      return this.http.post(setYoutubeRestrictionStatus, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateYotubeRestrictionStatusMain(body) {\n      return this.http.post(setyoutubeStatusMain, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getApplicationStatus(sn, appName) {\n      const params = new HttpParams().set('fsn', sn).set('appName', appName);\n      return this.http.get(applicationStatus, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    installApplication(body) {\n      return this.http.post(applicationInstall, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    unInstallApplication(body) {\n      return this.http.post(applicationUnInstall, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    applicationEnable(body) {\n      return this.http.post(applicationEnable, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    applicationDisbale(body) {\n      return this.http.post(applicationDisabled, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateContentFilter(body) {\n      return this.http.post(updateContentFilter, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    updateContentFilterMain(body) {\n      return this.http.post(updateContentFilterMain, body).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getNotification(userId, iqType, type) {\n      const params = new HttpParams().set('userId', userId).set('iqType', iqType).set('type', type);\n      return this.http.get(getNotification, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    deleteProfileBedTimeByDayId(profileId, dayId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('id', dayId).set('userId', userId);\n      return this.http.delete(deleteBedTimeProfileByDayId, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    deleteALLBedTimeProfile(profileId, userId) {\n      const params = new HttpParams().set('profileId', profileId).set('userId', userId);\n      return this.http.delete(deleteAllBedTimeProfile, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    EIQResetPriorites(deviceId) {\n      let result = {\n        'macAddr': deviceId\n      };\n      return this.http.post(`${environment.SUPPORT_URL}/extended/qos/clear`, result).pipe(catchError(this.handleError));\n    }\n    EIQDeletePriorites(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.delete(`${environment.SUPPORT_URL}/extended/qos/damp/alert/remove?userId=${userId}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      // Return an observable with a user-facing error message.\n      return throwError(error);\n    }\n    getAllCategory(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(getAllCategory, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getDns(userId, profileId) {\n      const params = new HttpParams().set('userId', userId).set('profileId', profileId);\n      return this.http.get(getDns, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    setDns(input) {\n      return this.http.post(setDns, input).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getDnsMain(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(getDnsMain, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    setDnsMain(input) {\n      return this.http.post(setDnsMain, input).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getICloud(userId, profileId) {\n      const params = new HttpParams().set('userId', userId).set('profileId', profileId);\n      return this.http.get(getIcloud, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    setICloud(input) {\n      return this.http.post(setIcloud, input).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getICloudMain(userId) {\n      const params = new HttpParams().set('userId', userId);\n      return this.http.get(getIcloudMain, {\n        params\n      }).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    setICloudMain(input) {\n      return this.http.post(setIcloudMain, input).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getParentControlCategories() {\n      return this.http.get(getParentControlCategories).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    getExperienceIqFormGroup() {\n      return this.formBuilder.group({\n        categoryGroup: [null],\n        categoryList: this.formBuilder.array([]),\n        youtube: this.formBuilder.group({\n          enable: false\n        }),\n        safesearch: this.formBuilder.group({\n          enable: false\n        }),\n        dnsoverhttps: this.formBuilder.group({\n          enable: false\n        }),\n        icloudrelay: this.formBuilder.group({\n          enable: false\n        }),\n        app: [null],\n        // appList: this.formBuilder.array([]),\n        website: [null],\n        webList: this.formBuilder.array([])\n      });\n    }\n    getStaffProfiles(userId) {\n      return this.http.get(`${environment.SUPPORT_URL}/smbiq/staffprofile/all?userId=${userId}&includeDevices=true`).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n\n    deleteStaffProfile(userId, staffProfileId) {\n      return this.http.delete(`${environment.SUPPORT_URL}/smbiq/staffprofile?userId=${userId}&staffProfileId=${staffProfileId}`).pipe(catchError(this.handleError) //  handle the error\n      );\n    }\n  }\n\n  ExperianceIQService.ɵfac = function ExperianceIQService_Factory(t) {\n    return new (t || ExperianceIQService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FormBuilder));\n  };\n  ExperianceIQService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExperianceIQService,\n    factory: ExperianceIQService.ɵfac,\n    providedIn: 'root'\n  });\n  return ExperianceIQService;\n})();","map":null,"metadata":{},"sourceType":"module"}