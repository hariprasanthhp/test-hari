{"ast":null,"code":"import * as Highcharts from \"highcharts/highstock\";\nimport { DatePipe } from '@angular/common';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport { DataTableDirective } from 'angular-datatables';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/services/custom-translate.service\";\nimport * as i2 from \"../../reports/location-report-api.service\";\nimport * as i3 from \"../../../shared/chart-options.service\";\nimport * as i4 from \"src/app/sys-admin/services/common.service\";\nimport * as i5 from \"src/app/shared/services/export-excel.service\";\nimport * as i6 from \"src/app/shared/services/sso-auth.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i9 from \"angular-datatables\";\nfunction MonthlyUsageByserviceCategoryComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.language[\"Access denied due to RBAC. Please consult your Organization Administrator for access.\"], \"\\n\");\n  }\n}\nfunction MonthlyUsageByserviceCategoryComponent_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelementStart(1, \"span\", 14);\n    i0.ɵɵelement(2, \"img\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function MonthlyUsageByserviceCategoryComponent_div_1_div_1_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.closeAlert();\n    });\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"innerHtml\", ctx_r2.errorInfo, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction MonthlyUsageByserviceCategoryComponent_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelementStart(1, \"div\", 19);\n    i0.ɵɵelementStart(2, \"div\", 20);\n    i0.ɵɵelementStart(3, \"button\", 21);\n    i0.ɵɵelementStart(4, \"p\", 22);\n    i0.ɵɵelement(5, \"i\", 23);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 24);\n    i0.ɵɵelementStart(8, \"button\", 25);\n    i0.ɵɵelementStart(9, \"span\", 26);\n    i0.ɵɵlistener(\"click\", function MonthlyUsageByserviceCategoryComponent_div_1_div_3_Template_span_click_9_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.downloadPdf();\n    });\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"button\", 25);\n    i0.ɵɵelementStart(12, \"span\", 26);\n    i0.ɵɵlistener(\"click\", function MonthlyUsageByserviceCategoryComponent_div_1_div_3_Template_span_click_12_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.downloadCSV();\n    });\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r3.language.export, \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r3.language.exportPdf);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r3.language.exportCsv);\n  }\n}\nfunction MonthlyUsageByserviceCategoryComponent_div_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵelementStart(1, \"div\", 28);\n    i0.ɵɵelementStart(2, \"div\", 29);\n    i0.ɵɵelementStart(3, \"span\", 30);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r4.language.Loading);\n  }\n}\nfunction MonthlyUsageByserviceCategoryComponent_div_1_div_9_tbody_15_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 38);\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 35);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 35);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\", 35);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r13 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(4);\n    i0.ɵɵpropertyInterpolate(\"id\", item_r13._id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", item_r13.startPeriodSec ? ctx_r12.chartOptionService.getUTCDateFormatFromUTCTime(item_r13.startPeriodSec, true, \"MM/dd/yyyy\") : \"--\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r13.key ? item_r13.key : \"--\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r13.dsOctets && item_r13.dsOctets !== -1 ? ctx_r12.convertByteToGB(item_r13.dsOctets) : 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r13.usOctets && item_r13.usOctets !== -1 ? ctx_r12.convertByteToGB(item_r13.usOctets) : 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", item_r13.totalOctets && item_r13.totalOctets !== -1 ? ctx_r12.convertByteToGB(item_r13.totalOctets) : 0, \" \");\n  }\n}\nfunction MonthlyUsageByserviceCategoryComponent_div_1_div_9_tbody_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tbody\");\n    i0.ɵɵtemplate(1, MonthlyUsageByserviceCategoryComponent_div_1_div_9_tbody_15_tr_1_Template, 11, 6, \"tr\", 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r11.data);\n  }\n}\nfunction MonthlyUsageByserviceCategoryComponent_div_1_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵelementStart(1, \"div\", 32);\n    i0.ɵɵelementStart(2, \"table\", 33);\n    i0.ɵɵelementStart(3, \"thead\", 34);\n    i0.ɵɵelementStart(4, \"tr\");\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\", 35);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\", 35);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\", 35);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(15, MonthlyUsageByserviceCategoryComponent_div_1_div_9_tbody_15_Template, 2, 1, \"tbody\", 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"hidden\", !ctx_r5.dataAvailable)(\"dtOptions\", ctx_r5.dtOptions)(\"dtTrigger\", ctx_r5.dtTrigger);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r5.language[\"month_title\"]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.language.GroupName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.language.downUsage);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.language.upUsage);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.language.totalUsage);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r5.data == null ? null : ctx_r5.data.length) != 0);\n  }\n}\nfunction MonthlyUsageByserviceCategoryComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, MonthlyUsageByserviceCategoryComponent_div_1_div_1_Template, 6, 1, \"div\", 4);\n    i0.ɵɵelementStart(2, \"div\", 5);\n    i0.ɵɵtemplate(3, MonthlyUsageByserviceCategoryComponent_div_1_div_3_Template, 14, 3, \"div\", 6);\n    i0.ɵɵelementStart(4, \"div\", 7);\n    i0.ɵɵtemplate(5, MonthlyUsageByserviceCategoryComponent_div_1_div_5_Template, 5, 1, \"div\", 8);\n    i0.ɵɵelementStart(6, \"div\", 9);\n    i0.ɵɵelementStart(7, \"div\", 10);\n    i0.ɵɵelement(8, \"div\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, MonthlyUsageByserviceCategoryComponent_div_1_div_9_Template, 16, 9, \"div\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.error);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.dataAvailable);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.pageAvailable);\n  }\n}\nconst HighchartsMore = require(\"highcharts/highcharts-more\");\nconst HighchartsExporting = require(\"highcharts/modules/exporting\");\nHighchartsMore(Highcharts);\nHighchartsExporting(Highcharts);\nconst noData = require('highcharts/modules/no-data-to-display');\nnoData(Highcharts);\nexport let MonthlyUsageByserviceCategoryComponent = /*#__PURE__*/(() => {\n  class MonthlyUsageByserviceCategoryComponent {\n    constructor(customTranslateService, locationService, chartOptionService, commonOrgService, exportExcel, sso) {\n      this.customTranslateService = customTranslateService;\n      this.locationService = locationService;\n      this.chartOptionService = chartOptionService;\n      this.commonOrgService = commonOrgService;\n      this.exportExcel = exportExcel;\n      this.sso = sso;\n      this.pageAvailable = false;\n      this.loading = false;\n      this.Highcharts = Highcharts;\n      this.upUsage = '';\n      this.downUsage = '';\n      this.errorInfo = '';\n      this.dtOptions = {};\n      this.dtTrigger = new Subject();\n      this.renderOnce = false;\n      this.hasScopeAccess = false;\n      this.language = this.customTranslateService.defualtLanguage;\n      this.frTable = this.customTranslateService.fr;\n      this.esTable = this.customTranslateService.es;\n      if (this.language) {\n        this.pageAvailable = true;\n        this.upUsage = this.language.upUsageTitle;\n        this.downUsage = this.language.downUsageTitle;\n      }\n      this.languageSubs = this.customTranslateService.selectedLanguage.subscribe(data => {\n        this.language = data;\n        this.upUsage = data.upUsageTitle;\n        this.downUsage = data.downUsageTitle;\n        setTimeout(() => {\n          if (this.renderedOnce) this.renderTable(true);\n          if (this.renderOnce) {\n            this.renderChart();\n          }\n        }, 500);\n      });\n    }\n    ngOnInit() {\n      let scopes = this.sso.getScopes();\n      if (environment.VALIDATE_SCOPE && window.location.pathname.indexOf('/cco/traffic/') > -1) {\n        let validScopes = Object.keys(scopes);\n        if (validScopes) {\n          for (let i = 0; i < validScopes.length; i++) {\n            if (validScopes[i].indexOf('cloud.rbac.coc.traffic.location.report') !== -1) {\n              this.hasScopeAccess = true;\n              break;\n            }\n          }\n        }\n      } else {\n        this.hasScopeAccess = true;\n      }\n      this.closeAlert();\n      this.dtOptions = {\n        pagingType: 'full_numbers',\n        pageLength: 10,\n        lengthChange: false,\n        processing: false,\n        dom: 'tipr',\n        order: [],\n        columnDefs: [{\n          targets: 0,\n          type: 'date'\n        }]\n      };\n      this.tableLanguageOptions();\n      this.renderedOnce = false;\n      this.columnDefs = [{\n        headerName: 'Month',\n        field: 'startPeriodSec'\n      }, {\n        headerName: 'Group Name',\n        field: 'key'\n      }, {\n        headerName: 'Down Usage(GB)',\n        field: 'dsOctets'\n      }, {\n        headerName: 'Up Usage(GB)',\n        field: 'usOctets'\n      }, {\n        headerName: 'Total Usage(GB)',\n        field: 'totalOctets'\n      }];\n    }\n    tableLanguageOptions() {\n      if (this.language.fileLanguage == 'fr') {\n        this.dtOptions.language = this.frTable;\n      } else if (this.language.fileLanguage == 'es') {\n        this.dtOptions.language = this.esTable;\n      } else if (this.language.fileLanguage == 'de_DE') {\n        this.dtOptions.language = this.customTranslateService.de_DE;\n      } else if (this.language.fileLanguage == 'en' && this.dtOptions.language) {\n        delete this.dtOptions.language;\n      }\n    }\n    ngOnDestroy() {\n      if (this.subscribe) {\n        this.subscribe.unsubscribe();\n      }\n      if (this.languageSubs) {\n        this.languageSubs.unsubscribe();\n      }\n    }\n    makeIsoDateZero(value) {\n      let a = value.split('.');\n      let b = a[0].split(\"T\");\n      b.pop();\n      return b.join(':') + 'T00:00:00Z';\n    }\n    loadChartData(data) {\n      this.error = false;\n      this.filters = data;\n      this.chartOptionService.btnDisabled = true;\n      let date = new Date(data.endDate);\n      this.startDate = new Date(date.getFullYear() - 1, date.getMonth(), 1);\n      this.endDate = new Date(date.getFullYear(), date.getMonth(), 0);\n      this.loading = true;\n      this.monthlyUsageByServiceChartOptions = null;\n      let granularity = '1hour';\n      data['granularity'] = granularity;\n      this.subscribe = this.locationService.getMonthlyUsageByService(data).subscribe(res => {\n        this.data = res;\n        this.exportData = res;\n        this.monthlyUsageByServiceChartOptions = this.chartOptionService.monthlyUsageByServiceChartOptions(res, data);\n        if (document.getElementById('container')) {\n          this.Highcharts.chart('container', this.monthlyUsageByServiceChartOptions);\n        }\n        this.renderTable(false);\n        this.loading = false;\n        this.chartOptionService.btnDisabled = false;\n        this.renderOnce = true;\n      }, err => {\n        this.exportData = [];\n        this.monthlyUsageByServiceChartOptions = this.chartOptionService.monthlyUsageByServiceChartOptions([], data);\n        if (document.getElementById('container')) {\n          this.Highcharts.chart('container', this.monthlyUsageByServiceChartOptions);\n        }\n        this.pageErrorHandle(err);\n        this.renderTable(false);\n        this.loading = false;\n        this.renderOnce = true;\n        this.chartOptionService.btnDisabled = false;\n      });\n    }\n    renderChart() {\n      this.monthlyUsageByServiceChartOptions = null;\n      this.monthlyUsageByServiceChartOptions = this.chartOptionService.monthlyUsageByServiceChartOptions(this.data, this.filters);\n      if (document.getElementById('container')) {\n        this.Highcharts.chart('container', this.monthlyUsageByServiceChartOptions);\n      }\n    }\n    renderTable(rerender) {\n      this.tableLanguageOptions();\n      if (rerender || this.renderedOnce) {\n        this.rerender();\n        this.dataAvailable = true;\n        setTimeout(() => {\n          this.loading = false;\n        }, 1000);\n      } else {\n        this.dtTrigger.next();\n        this.renderedOnce = true;\n        this.dataAvailable = true;\n        setTimeout(() => {\n          this.loading = false;\n        }, 1000);\n      }\n    }\n    rerender() {\n      this.dtElement.dtInstance.then(dtInstance => {\n        // Destroy the table first\n        dtInstance.destroy();\n        this.dtTrigger.next();\n      });\n    }\n    pageErrorHandle(err) {\n      if (err.status == 401) {\n        this.errorInfo = this.language['Access Denied'];\n      } else {\n        this.errorInfo = this.commonOrgService.pageErrorHandle(err);\n      }\n      this.showError(this.errorInfo);\n      this.loading = false;\n    }\n    closeAlert() {\n      this.error = false;\n    }\n    showError(msg) {\n      this.closeAlert();\n      this.errorInfo = msg;\n      this.error = true;\n      $(\"html, body\").animate({\n        scrollTop: 0\n      }, \"slow\");\n    }\n    convertByteToGB(bytes) {\n      if (bytes) {\n        return (bytes / Math.pow(1000, 3)).toFixed(5);\n      } else return 0;\n    }\n    getAllData(pdf) {\n      this.pdfSubs = this.locationService.getMonthlyUsageByService(this.filters).subscribe(data => {\n        this.exportData = data ? data : [];\n        if (pdf) {\n          this.doPDFDownload();\n        } else {\n          this.doCSVDownload();\n        }\n      }, err => {\n        if (pdf) {\n          this.doPDFDownload();\n        } else {\n          this.doCSVDownload();\n        }\n        this.pageErrorHandle(err);\n      });\n    }\n    downloadCSV() {\n      if (this.exportData && this.exportData.length > 0) {\n        this.doCSVDownload();\n      } else {\n        this.getAllData(false);\n      }\n    }\n    exportDataConvertor(array) {\n      let pipe = new DatePipe('en-US');\n      let check = Array.isArray(array);\n      let data = [];\n      if (check) {\n        array.forEach(el => {\n          data.push({\n            'Month': el.startPeriodSec ? `${this.chartOptionService.getUTCDateFormatFromUTCTime(el.startPeriodSec, true, 'MM/dd/yyyy')}` : '',\n            'Group Name': el.key ? el.key : '',\n            'Down Usage(GB)': el.dsOctets && el.dsOctets !== -1 ? this.convertByteToGB(el.dsOctets) : '0',\n            'Up Usage(GB)': el.usOctets && el.usOctets !== -1 ? this.convertByteToGB(el.usOctets) : '0',\n            'Total Usage(GB)': el.totalOctets && el.totalOctets !== -1 ? this.convertByteToGB(el.totalOctets) : '0'\n          });\n        });\n      }\n      return data;\n    }\n    doCSVDownload() {\n      let timezoneName = 'Coordinated Universal Time';\n      let pipe = new DatePipe('en-US');\n      let LocationNames = \"\";\n      if (this.filters['locationsSelectedNames']) {\n        LocationNames = this.filters['locationsSelectedNames'];\n      }\n      let direction = \"\";\n      if (this.filters.directionSelected == 'both') {\n        direction = this.language['Both(Down+Up)'];\n      } else if (this.filters.directionSelected == 'Down') {\n        direction = this.language['Down'];\n      } else {\n        direction = this.language['Up'];\n      }\n      let exportData = this.exportDataConvertor(this.exportData);\n      let name = this.filters.type === 'location' ? 'Location_Monthly_Usage_By_Service_Category' : 'Network_Monthly_Usage_By_Service_Category';\n      // let name = this.commonFunctionsService.generateExportName('Monthly_Usage_ByService_Category');\n      let date = this.chartOptionService.getMonthlyUsageDates();\n      let extraData = `${this.language.network} ${this.language.locationMenuMonthlyUsageByServiceCategory}\\r\\n${this.language['time_win']}: ${pipe.transform(date.startDate, 'MM/dd/yyyy')} - ${pipe.transform(date.endDate, 'MM/dd/yyyy')} [${timezoneName}]\\r\\n${this.language.direction}: ${this.filters['directionSelected'] ? direction : ''}\\r\\n`;\n      if (this.filters.type === 'location') {\n        extraData = `${this.language.location} ${this.language.locationMenuMonthlyUsageByServiceCategory}\\r\\n${this.language['time_win']}: ${pipe.transform(date.startDate, 'MM/dd/yyyy')} - ${pipe.transform(date.endDate, 'MM/dd/yyyy')} [${timezoneName}]\\r\\n${this.language.location} : ${this.filters['locationsSelectedNames']}\\r\\n${this.language.direction}: ${this.filters['directionSelected'] ? direction : ''}\\r\\n`;\n      }\n      // let extraData = `${this.language.locationMenuMonthlyUsageByServiceCategory}\\r\\n${this.language.location} : ${LocationNames}\\r\\n${this.language.Month} : ${pipe.transform(this.filters['monthSelected'], 'MM/dd/yyyy')} [${timezoneName}]\\r\\n${this.language.direction} : ${this.filters['directionSelected']}\\r\\n${this.language.treshold} (KB): ${this.filters['threshold']}\\r\\n${this.language.aggre}: ${this.filters['aggregateSelected']}\\r\\n${this.language.elim}: ${this.filters['eliminateUnknownSelected']}\\r\\n${this.language.thres}: ${this.filters['thresholdTypeSelected']}\\r\\n\\r\\n`;\n      if (exportData.length) {\n        this.exportExcel.downLoadCSV(name, exportData, extraData);\n      } else {\n        this.exportExcel.downLoadCSV(name, [], extraData);\n      }\n    }\n    downloadPdf() {\n      if (this.exportData && this.exportData.length) {\n        this.doPDFDownload();\n      } else {\n        this.getAllData(true);\n      }\n    }\n    doPDFDownload() {\n      this.loading = true;\n      let pipe = new DatePipe('en-US');\n      let data = this.exportData;\n      const bodyData = [],\n        headerArray = this.columnDefs.map(obj => obj.headerName);\n      data.forEach(obj => {\n        const rowDatum = [];\n        this.columnDefs.forEach(colObj => {\n          if (colObj.field == 'dsOctets' || colObj.field == 'usOctets' || colObj.field == 'totalOctets') {\n            rowDatum.push(obj[colObj.field] && obj[colObj.field] !== -1 ? this.convertByteToGB(obj[colObj.field]) : \"0\");\n          } else if (colObj.field == 'startPeriodSec') {\n            // let dateconvert = new Date(obj[colObj.field] * 1000)\n            rowDatum.push(obj[colObj.field] ? `${this.chartOptionService.getUTCDateFormatFromUTCTime(obj[colObj.field], true, 'MM/dd/yyyy')}` : '');\n          } else {\n            rowDatum.push(obj[colObj.field] ? obj[colObj.field] : '');\n          }\n        });\n        bodyData.push(rowDatum);\n      });\n      const higherChartData = $('.highcharts-container')[0];\n      const width = higherChartData && higherChartData.offsetWidth ? higherChartData.offsetWidth : 0;\n      const height = higherChartData && higherChartData.offsetHeight ? higherChartData.offsetHeight : 0;\n      html2canvas(higherChartData, {\n        width: width + 200,\n        height: height + 300,\n        scrollX: 20,\n        scrollY: window.pageYOffset * -1,\n        scale: 4\n      }).then(canvas => {\n        let contentDataURL = canvas.toDataURL('image/png', 1);\n        const doc = new jsPDF(\"landscape\");\n        doc.addImage(contentDataURL, 'JPEG', 20, 20, 280, 210);\n        let curHeight = 0;\n        doc.addPage();\n        autoTable(doc, {\n          margin: {\n            top: 5,\n            right: 5,\n            bottom: 5,\n            left: 5\n          },\n          startY: 5,\n          showHead: 'everyPage',\n          pageBreak: 'auto',\n          theme: 'striped',\n          head: [headerArray],\n          body: bodyData,\n          didDrawPage: data => {\n            curHeight = data.cursor.y;\n          }\n        });\n        setTimeout(() => {\n          // doc.addImage(contentDataURL, 'JPEG', 10, (curHeight + 10), 200, 170);\n          let name = this.filters.type === 'location' ? 'Location_Monthly_Usage_By_Service_Category' : 'Network_Monthly_Usage_By_Service_Category';\n          doc.save(`${name}.pdf`);\n          this.loading = false;\n        }, 300);\n      });\n    }\n  }\n  MonthlyUsageByserviceCategoryComponent.ɵfac = function MonthlyUsageByserviceCategoryComponent_Factory(t) {\n    return new (t || MonthlyUsageByserviceCategoryComponent)(i0.ɵɵdirectiveInject(i1.CustomTranslateService), i0.ɵɵdirectiveInject(i2.LocationReportApiService), i0.ɵɵdirectiveInject(i3.ChartOptionsService), i0.ɵɵdirectiveInject(i4.CommonService), i0.ɵɵdirectiveInject(i5.ExportExcelService), i0.ɵɵdirectiveInject(i6.SsoAuthService));\n  };\n  MonthlyUsageByserviceCategoryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MonthlyUsageByserviceCategoryComponent,\n    selectors: [[\"app-monthly-usage-byservice-category\"]],\n    viewQuery: function MonthlyUsageByserviceCategoryComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(DataTableDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dtElement = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[\"role\", \"alert\", \"class\", \"alert alert-warning\", 4, \"ngIf\"], [\"class\", \"col-md-12 mt-4\", 4, \"ngIf\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\"], [1, \"col-md-12\", \"mt-4\"], [\"class\", \"w-100 alert alert-danger  fade show my-3\", 4, \"ngIf\"], [1, \"\", 2, \"height\", \"auto\"], [\"class\", \"row justify-content-end \", 4, \"ngIf\"], [\"id\", \"fa-chart-wrapper\", 1, \"fa-chart-wrapper\", \"chart-min-h\"], [\"class\", \"loader\", 4, \"ngIf\"], [1, \"chart-sec\"], [1, \"fa-chart-container\", \"mt-5\"], [\"id\", \"container\", 1, \"cco-traffic-reports-container\"], [\"class\", \"row my-3\", \"style\", \"min-height: 65vh;\", 4, \"ngIf\"], [1, \"w-100\", \"alert\", \"alert-danger\", \"fade\", \"show\", \"my-3\"], [1, \"error-img\"], [\"src\", \"./assets/img/ic_error-36px.svg\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [1, \"d-inline-flex\", 3, \"innerHtml\"], [1, \"row\", \"justify-content-end\"], [1, \"col-md-3\", \"px-0\", \"text-right\"], [\"placement\", \"bottom-right\", \"ngbDropdown\", \"\", 1, \"cus-dd\", \"dropdown-button\", \"float-right\"], [\"id\", \"dropdownExchange\", \"ngbDropdownToggle\", \"\", 1, \"float-right\"], [1, \"listdata\", \"bar-label\", \"mb0\"], [1, \"fa\", \"fa-bars\", \"mr-2\"], [\"ngbDropdownMenu\", \"\", \"aria-labelledby\", \"dropdownExchange\", \"id\", \"supportListId\"], [\"ngbDropdownItem\", \"\", 1, \"greyaa\"], [3, \"click\"], [1, \"loader\"], [1, \"d-flex\", \"justify-content-center\"], [1, \"spinner-border\", \"text-primary\"], [1, \"sr-only\"], [1, \"row\", \"my-3\", 2, \"min-height\", \"65vh\"], [1, \"col\"], [\"id\", \"active_subscribers\", \"width\", \"100%\", \"datatable\", \"\", 1, \"row-border\", \"hover\", \"table-alter\", 3, \"hidden\", \"dtOptions\", \"dtTrigger\"], [1, \"\"], [\"text-align:\", \"\", \"right\", \"\"], [4, \"ngIf\"], [3, \"id\", 4, \"ngFor\", \"ngForOf\"], [3, \"id\"]],\n    template: function MonthlyUsageByserviceCategoryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MonthlyUsageByserviceCategoryComponent_div_0_Template, 2, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, MonthlyUsageByserviceCategoryComponent_div_1_Template, 10, 4, \"div\", 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.hasScopeAccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.pageAvailable && ctx.hasScopeAccess);\n      }\n    },\n    directives: [i7.NgIf, i8.NgbDropdown, i8.NgbDropdownToggle, i8.NgbDropdownMenu, i8.NgbDropdownItem, i9.DataTableDirective, i7.NgForOf],\n    styles: [\".export_menu[_ngcontent-%COMP%]   image[_ngcontent-%COMP%]{transform:translate(2px)}.cus-dd.dropdown-button.show[_ngcontent-%COMP%]   .dropdown-menu.show[_ngcontent-%COMP%]{width:auto;min-width:74.59px;top:-1px!important;left:-8px!important;border-radius:0!important;z-index:5!important;margin:0;padding:5px 0!important;box-shadow:#888 3px 3px 10px;border:1px solid #999999;background:white}.cus-dd.dropdown-button.show[_ngcontent-%COMP%]   .listdata[_ngcontent-%COMP%]{font-weight:bold;color:#000;background-color:#e6ebf5}.cus-dd.dropdown-button.show[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:5px 10px!important;line-height:15px;font-size:11px!important}.cus-dd.dropdown-button.show[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{color:#fff;background:#335cad}.cus-dd[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{display:none!important}.cus-dd[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]{width:auto!important}.cus-dd[_ngcontent-%COMP%]   .listdata[_ngcontent-%COMP%]{padding:0 8px 4px 4px;border-radius:0}.cus-dd[_ngcontent-%COMP%]   .listdata[_ngcontent-%COMP%]:hover{background-color:#e6e6e6}.bar-label[_ngcontent-%COMP%]{font-size:12px;font-family:\\\"Lucida Grande\\\",\\\"Lucida Sans Unicode\\\",Arial,Helvetica,sans-serif;color:#333}.bar-label[_ngcontent-%COMP%]   .fa[_ngcontent-%COMP%]{font-size:18px;color:#666;margin-bottom:2px}\"]\n  });\n  return MonthlyUsageByserviceCategoryComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}