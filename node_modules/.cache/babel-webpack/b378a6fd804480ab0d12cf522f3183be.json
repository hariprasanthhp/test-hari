{"ast":null,"code":"import { assign, bind, pick } from 'min-dash';\nimport { domify, query as domQuery, event as domEvent, remove as domRemove } from 'min-dom';\nvar min = Math.min,\n  max = Math.max;\nfunction preventDefault(e) {\n  e.preventDefault();\n}\nfunction stopPropagation(e) {\n  e.stopPropagation();\n}\nfunction isTextNode(node) {\n  return node.nodeType === Node.TEXT_NODE;\n}\nfunction toArray(nodeList) {\n  return [].slice.call(nodeList);\n}\n\n/**\n * Initializes a container for a content editable div.\n *\n * Structure:\n *\n * container\n *   parent\n *     content\n *     resize-handle\n *\n * @param {object} options\n * @param {DOMElement} options.container The DOM element to append the contentContainer to\n * @param {Function} options.keyHandler Handler for key events\n * @param {Function} options.resizeHandler Handler for resize events\n */\nexport default function TextBox(options) {\n  this.container = options.container;\n  this.parent = domify('<div class=\"djs-direct-editing-parent\">' + '<div class=\"djs-direct-editing-content\" contenteditable=\"true\"></div>' + '</div>');\n  this.content = domQuery('[contenteditable]', this.parent);\n  this.keyHandler = options.keyHandler || function () {};\n  this.resizeHandler = options.resizeHandler || function () {};\n  this.autoResize = bind(this.autoResize, this);\n  this.handlePaste = bind(this.handlePaste, this);\n}\n\n/**\n * Create a text box with the given position, size, style and text content\n *\n * @param {Object} bounds\n * @param {Number} bounds.x absolute x position\n * @param {Number} bounds.y absolute y position\n * @param {Number} [bounds.width] fixed width value\n * @param {Number} [bounds.height] fixed height value\n * @param {Number} [bounds.maxWidth] maximum width value\n * @param {Number} [bounds.maxHeight] maximum height value\n * @param {Number} [bounds.minWidth] minimum width value\n * @param {Number} [bounds.minHeight] minimum height value\n * @param {Object} [style]\n * @param {String} value text content\n *\n * @return {DOMElement} The created content DOM element\n */\nTextBox.prototype.create = function (bounds, style, value, options) {\n  var self = this;\n  var parent = this.parent,\n    content = this.content,\n    container = this.container;\n  options = this.options = options || {};\n  style = this.style = style || {};\n  var parentStyle = pick(style, ['width', 'height', 'maxWidth', 'maxHeight', 'minWidth', 'minHeight', 'left', 'top', 'backgroundColor', 'position', 'overflow', 'border', 'wordWrap', 'textAlign', 'outline', 'transform']);\n  assign(parent.style, {\n    width: bounds.width + 'px',\n    height: bounds.height + 'px',\n    maxWidth: bounds.maxWidth + 'px',\n    maxHeight: bounds.maxHeight + 'px',\n    minWidth: bounds.minWidth + 'px',\n    minHeight: bounds.minHeight + 'px',\n    left: bounds.x + 'px',\n    top: bounds.y + 'px',\n    backgroundColor: '#ffffff',\n    position: 'absolute',\n    overflow: 'visible',\n    border: '1px solid #ccc',\n    boxSizing: 'border-box',\n    wordWrap: 'normal',\n    textAlign: 'center',\n    outline: 'none'\n  }, parentStyle);\n  var contentStyle = pick(style, ['fontFamily', 'fontSize', 'fontWeight', 'lineHeight', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft']);\n  assign(content.style, {\n    boxSizing: 'border-box',\n    width: '100%',\n    outline: 'none',\n    wordWrap: 'break-word'\n  }, contentStyle);\n  if (options.centerVertically) {\n    assign(content.style, {\n      position: 'absolute',\n      top: '50%',\n      transform: 'translate(0, -50%)'\n    }, contentStyle);\n  }\n  content.innerText = value;\n  domEvent.bind(content, 'keydown', this.keyHandler);\n  domEvent.bind(content, 'mousedown', stopPropagation);\n  domEvent.bind(content, 'paste', self.handlePaste);\n  if (options.autoResize) {\n    domEvent.bind(content, 'input', this.autoResize);\n  }\n  if (options.resizable) {\n    this.resizable(style);\n  }\n  container.appendChild(parent);\n\n  // set selection to end of text\n  this.setSelection(content.lastChild, content.lastChild && content.lastChild.length);\n  return parent;\n};\n\n/**\n * Intercept paste events to remove formatting from pasted text.\n */\nTextBox.prototype.handlePaste = function (e) {\n  var options = this.options,\n    style = this.style;\n  e.preventDefault();\n  var text;\n  if (e.clipboardData) {\n    // Chrome, Firefox, Safari\n    text = e.clipboardData.getData('text/plain');\n  } else {\n    // Internet Explorer\n    text = window.clipboardData.getData('Text');\n  }\n  this.insertText(text);\n  if (options.autoResize) {\n    var hasResized = this.autoResize(style);\n    if (hasResized) {\n      this.resizeHandler(hasResized);\n    }\n  }\n};\nTextBox.prototype.insertText = function (text) {\n  // insertText command not supported by Internet Explorer\n  var success = document.execCommand('insertText', false, text);\n  if (success) {\n    return;\n  }\n  this._insertTextIE(text);\n};\nTextBox.prototype._insertTextIE = function (text) {\n  // Internet Explorer\n  var range = this.getSelection(),\n    startContainer = range.startContainer,\n    endContainer = range.endContainer,\n    startOffset = range.startOffset,\n    endOffset = range.endOffset,\n    commonAncestorContainer = range.commonAncestorContainer;\n  var childNodesArray = toArray(commonAncestorContainer.childNodes);\n  var container, offset;\n  if (isTextNode(commonAncestorContainer)) {\n    var containerTextContent = startContainer.textContent;\n    startContainer.textContent = containerTextContent.substring(0, startOffset) + text + containerTextContent.substring(endOffset);\n    container = startContainer;\n    offset = startOffset + text.length;\n  } else if (startContainer === this.content && endContainer === this.content) {\n    var textNode = document.createTextNode(text);\n    this.content.insertBefore(textNode, childNodesArray[startOffset]);\n    container = textNode;\n    offset = textNode.textContent.length;\n  } else {\n    var startContainerChildIndex = childNodesArray.indexOf(startContainer),\n      endContainerChildIndex = childNodesArray.indexOf(endContainer);\n    childNodesArray.forEach(function (childNode, index) {\n      if (index === startContainerChildIndex) {\n        childNode.textContent = startContainer.textContent.substring(0, startOffset) + text + endContainer.textContent.substring(endOffset);\n      } else if (index > startContainerChildIndex && index <= endContainerChildIndex) {\n        domRemove(childNode);\n      }\n    });\n    container = startContainer;\n    offset = startOffset + text.length;\n  }\n  if (container && offset !== undefined) {\n    // is necessary in Internet Explorer\n    setTimeout(function () {\n      self.setSelection(container, offset);\n    });\n  }\n};\n\n/**\n * Automatically resize element vertically to fit its content.\n */\nTextBox.prototype.autoResize = function () {\n  var parent = this.parent,\n    content = this.content;\n  var fontSize = parseInt(this.style.fontSize) || 12;\n  if (content.scrollHeight > parent.offsetHeight || content.scrollHeight < parent.offsetHeight - fontSize) {\n    var bounds = parent.getBoundingClientRect();\n    var height = content.scrollHeight;\n    parent.style.height = height + 'px';\n    this.resizeHandler({\n      width: bounds.width,\n      height: bounds.height,\n      dx: 0,\n      dy: height - bounds.height\n    });\n  }\n};\n\n/**\n * Make an element resizable by adding a resize handle.\n */\nTextBox.prototype.resizable = function () {\n  var self = this;\n  var parent = this.parent,\n    resizeHandle = this.resizeHandle;\n  var minWidth = parseInt(this.style.minWidth) || 0,\n    minHeight = parseInt(this.style.minHeight) || 0,\n    maxWidth = parseInt(this.style.maxWidth) || Infinity,\n    maxHeight = parseInt(this.style.maxHeight) || Infinity;\n  if (!resizeHandle) {\n    resizeHandle = this.resizeHandle = domify('<div class=\"djs-direct-editing-resize-handle\"></div>');\n    var startX, startY, startWidth, startHeight;\n    var onMouseDown = function (e) {\n      preventDefault(e);\n      stopPropagation(e);\n      startX = e.clientX;\n      startY = e.clientY;\n      var bounds = parent.getBoundingClientRect();\n      startWidth = bounds.width;\n      startHeight = bounds.height;\n      domEvent.bind(document, 'mousemove', onMouseMove);\n      domEvent.bind(document, 'mouseup', onMouseUp);\n    };\n    var onMouseMove = function (e) {\n      preventDefault(e);\n      stopPropagation(e);\n      var newWidth = min(max(startWidth + e.clientX - startX, minWidth), maxWidth);\n      var newHeight = min(max(startHeight + e.clientY - startY, minHeight), maxHeight);\n      parent.style.width = newWidth + 'px';\n      parent.style.height = newHeight + 'px';\n      self.resizeHandler({\n        width: startWidth,\n        height: startHeight,\n        dx: e.clientX - startX,\n        dy: e.clientY - startY\n      });\n    };\n    var onMouseUp = function (e) {\n      preventDefault(e);\n      stopPropagation(e);\n      domEvent.unbind(document, 'mousemove', onMouseMove, false);\n      domEvent.unbind(document, 'mouseup', onMouseUp, false);\n    };\n    domEvent.bind(resizeHandle, 'mousedown', onMouseDown);\n  }\n  assign(resizeHandle.style, {\n    position: 'absolute',\n    bottom: '0px',\n    right: '0px',\n    cursor: 'nwse-resize',\n    width: '0',\n    height: '0',\n    borderTop: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid transparent',\n    borderRight: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid #ccc',\n    borderBottom: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid #ccc',\n    borderLeft: (parseInt(this.style.fontSize) / 4 || 3) + 'px solid transparent'\n  });\n  parent.appendChild(resizeHandle);\n};\n\n/**\n * Clear content and style of the textbox, unbind listeners and\n * reset CSS style.\n */\nTextBox.prototype.destroy = function () {\n  var parent = this.parent,\n    content = this.content,\n    resizeHandle = this.resizeHandle;\n\n  // clear content\n  content.innerText = '';\n\n  // clear styles\n  parent.removeAttribute('style');\n  content.removeAttribute('style');\n  domEvent.unbind(content, 'keydown', this.keyHandler);\n  domEvent.unbind(content, 'mousedown', stopPropagation);\n  domEvent.unbind(content, 'input', this.autoResize);\n  domEvent.unbind(content, 'paste', this.handlePaste);\n  if (resizeHandle) {\n    resizeHandle.removeAttribute('style');\n    domRemove(resizeHandle);\n  }\n  domRemove(parent);\n};\nTextBox.prototype.getValue = function () {\n  return this.content.innerText.trim();\n};\nTextBox.prototype.getSelection = function () {\n  var selection = window.getSelection(),\n    range = selection.getRangeAt(0);\n  return range;\n};\nTextBox.prototype.setSelection = function (container, offset) {\n  var range = document.createRange();\n  if (container === null) {\n    range.selectNodeContents(this.content);\n  } else {\n    range.setStart(container, offset);\n    range.setEnd(container, offset);\n  }\n  var selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n};","map":null,"metadata":{},"sourceType":"module"}