{"ast":null,"code":"'use strict';\n\nvar assign = require('lodash/assign'),\n  find = require('lodash/find');\nvar domify = require('min-dom').domify,\n  domQuery = require('min-dom').query;\nvar escapeHTML = require('../Utils').escapeHTML;\nvar selectEntryFactory = require('./SelectEntryFactory'),\n  entryFieldDescription = require('./EntryFieldDescription');\n\n/**\n * The combo box is a special implementation of the select entry and adds the option 'custom' to the\n * select box. If 'custom' is selected, an additional text input field is shown which allows to define\n * a custom value.\n *\n * @param  {Object} options\n * @param  {string} options.id\n * @param  {string} options.label\n * @param  {Array<Object>} options.selectOptions list of name/value pairs\n * @param  {string} options.modelProperty\n * @param  {function} options.get\n * @param  {function} options.set\n * @param  {string} [options.customValue] custom select option value (default: 'custom')\n * @param  {string} [options.customName] custom select option name visible in the select box (default: 'custom')\n *\n * @return {Object}\n */\nvar comboBox = function (translate, options) {\n  var selectOptions = options.selectOptions,\n    modelProperty = options.modelProperty,\n    customValue = options.customValue || 'custom',\n    customName = options.customName || 'custom ' + modelProperty,\n    description = options.description;\n\n  // check if a value is not a built in value\n  var isCustomValue = function (value) {\n    if (typeof value[modelProperty] === 'undefined') {\n      return false;\n    }\n    var isCustom = !find(selectOptions, function (option) {\n      return value[modelProperty] === option.value;\n    });\n    return isCustom;\n  };\n  var comboOptions = assign({}, options);\n\n  // true if the selected value in the select box is customValue\n  comboOptions.showCustomInput = function (element, node) {\n    var selectBox = domQuery('[data-entry=\"' + options.id + '\"] select', node.parentNode);\n    if (selectBox) {\n      return selectBox.value === customValue;\n    }\n    return false;\n  };\n  comboOptions.get = function (element, node) {\n    var value = options.get(element, node);\n    var modifiedValues = {};\n    if (!isCustomValue(value)) {\n      modifiedValues[modelProperty] = value[modelProperty] || '';\n      return modifiedValues;\n    }\n    modifiedValues[modelProperty] = customValue;\n    modifiedValues['custom-' + modelProperty] = value[modelProperty];\n    return modifiedValues;\n  };\n  comboOptions.set = function (element, values, node) {\n    var modifiedValues = {};\n\n    // if the custom select option has been selected\n    // take the value from the text input field\n    if (values[modelProperty] === customValue) {\n      modifiedValues[modelProperty] = values['custom-' + modelProperty] || '';\n    } else if (options.emptyParameter && values[modelProperty] === '') {\n      modifiedValues[modelProperty] = undefined;\n    } else {\n      modifiedValues[modelProperty] = values[modelProperty];\n    }\n    return options.set(element, modifiedValues, node);\n  };\n  comboOptions.selectOptions.push({\n    name: customName,\n    value: customValue\n  });\n  var comboBoxEntry = assign({}, selectEntryFactory(translate, comboOptions, comboOptions));\n  var fragment = document.createDocumentFragment();\n  fragment.appendChild(comboBoxEntry.html);\n  comboBoxEntry.html = fragment;\n  comboBoxEntry.html.appendChild(domify('<div class=\"bpp-field-wrapper bpp-combo-input\" ' + 'data-show=\"showCustomInput\"' + '>' + '<input id=\"camunda-' + escapeHTML(options.id) + '-input\" type=\"text\" name=\"custom-' + escapeHTML(modelProperty) + '\" ' + ' />' + '</div>'));\n\n  // add description below combo box entry field\n  if (description) {\n    comboBoxEntry.html.appendChild(entryFieldDescription(translate, description, {\n      show: 'showCustomInput'\n    }));\n  }\n  return comboBoxEntry;\n};\nmodule.exports = comboBox;","map":null,"metadata":{},"sourceType":"script"}