{"ast":null,"code":"import { assign, forEach, isFunction, isDefined, omit, size } from 'min-dash';\nimport { delegate as domDelegate, domify, classes as domClasses, attr as domAttr, remove as domRemove } from 'min-dom';\nvar DATA_REF = 'data-id';\nvar CLOSE_EVENTS = ['contextPad.close', 'canvas.viewbox.changing', 'commandStack.changed'];\nvar DEFAULT_PRIORITY = 1000;\n\n/**\n * A popup menu that can be used to display a list of actions anywhere in the canvas.\n *\n * @param {Object} config\n * @param {boolean|Object} [config.scale={ min: 1.0, max: 1.5 }]\n * @param {number} [config.scale.min]\n * @param {number} [config.scale.max]\n * @param {EventBus} eventBus\n * @param {Canvas} canvas\n *\n * @class\n * @constructor\n */\nexport default function PopupMenu(config, eventBus, canvas) {\n  var scale = isDefined(config && config.scale) ? config.scale : {\n    min: 1,\n    max: 1.5\n  };\n  this._config = {\n    scale: scale\n  };\n  this._eventBus = eventBus;\n  this._canvas = canvas;\n  this._providers = {};\n  this._current = {};\n}\nPopupMenu.$inject = ['config.popupMenu', 'eventBus', 'canvas'];\n\n/**\n * Registers a popup menu provider\n *\n * @param  {string} id\n * @param {number} [priority=1000]\n * @param  {Object} provider\n *\n * @example\n * const popupMenuProvider = {\n *   getPopupMenuEntries: function(element) {\n *     return {\n *       'entry-1': {\n *         label: 'My Entry',\n *         action: function() { alert(\"I have been clicked!\"); }\n *       }\n *     }\n *   }\n * };\n *\n * popupMenu.registerProvider('myMenuID', popupMenuProvider);\n */\nPopupMenu.prototype.registerProvider = function (id, priority, provider) {\n  if (!provider) {\n    provider = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n  this._eventBus.on('popupMenu.getProviders.' + id, priority, function (event) {\n    event.providers.push(provider);\n  });\n};\n\n/**\n * Determine if the popup menu has entries.\n *\n * @return {boolean} true if empty\n */\nPopupMenu.prototype.isEmpty = function (element, providerId) {\n  if (!element) {\n    throw new Error('element parameter is missing');\n  }\n  if (!providerId) {\n    throw new Error('providerId parameter is missing');\n  }\n  var providers = this._getProviders(providerId);\n  if (!providers) {\n    return true;\n  }\n  var entries = this._getEntries(element, providers),\n    headerEntries = this._getHeaderEntries(element, providers);\n  var hasEntries = size(entries) > 0,\n    hasHeaderEntries = headerEntries && size(headerEntries) > 0;\n  return !hasEntries && !hasHeaderEntries;\n};\n\n/**\n * Create entries and open popup menu at given position\n *\n * @param  {Object} element\n * @param  {string} id provider id\n * @param  {Object} position\n *\n * @return {Object} popup menu instance\n */\nPopupMenu.prototype.open = function (element, id, position) {\n  var providers = this._getProviders(id);\n  if (!element) {\n    throw new Error('Element is missing');\n  }\n  if (!providers || !providers.length) {\n    throw new Error('No registered providers for: ' + id);\n  }\n  if (!position) {\n    throw new Error('the position argument is missing');\n  }\n  if (this.isOpen()) {\n    this.close();\n  }\n  this._emit('open');\n  var current = this._current = {\n    className: id,\n    element: element,\n    position: position\n  };\n  var entries = this._getEntries(element, providers),\n    headerEntries = this._getHeaderEntries(element, providers);\n  current.entries = assign({}, entries, headerEntries);\n  current.container = this._createContainer();\n  if (size(headerEntries)) {\n    current.container.appendChild(this._createEntries(headerEntries, 'djs-popup-header'));\n  }\n  if (size(entries)) {\n    current.container.appendChild(this._createEntries(entries, 'djs-popup-body'));\n  }\n  var canvas = this._canvas,\n    parent = canvas.getContainer();\n  this._attachContainer(current.container, parent, position.cursor);\n  this._bindAutoClose();\n};\n\n/**\n * Removes the popup menu and unbinds the event handlers.\n */\nPopupMenu.prototype.close = function () {\n  if (!this.isOpen()) {\n    return;\n  }\n  this._emit('close');\n  this._unbindAutoClose();\n  domRemove(this._current.container);\n  this._current.container = null;\n};\n\n/**\n * Determine if an open popup menu exist.\n *\n * @return {boolean} true if open\n */\nPopupMenu.prototype.isOpen = function () {\n  return !!this._current.container;\n};\n\n/**\n * Trigger an action associated with an entry.\n *\n * @param {Object} event\n *\n * @return the result of the action callback, if any\n */\nPopupMenu.prototype.trigger = function (event) {\n  // silence other actions\n  event.preventDefault();\n  var element = event.delegateTarget || event.target,\n    entryId = domAttr(element, DATA_REF);\n  var entry = this._getEntry(entryId);\n  if (entry.action) {\n    return entry.action.call(null, event, entry);\n  }\n};\nPopupMenu.prototype._getProviders = function (id) {\n  var event = this._eventBus.createEvent({\n    type: 'popupMenu.getProviders.' + id,\n    providers: []\n  });\n  this._eventBus.fire(event);\n  return event.providers;\n};\nPopupMenu.prototype._getEntries = function (element, providers) {\n  var entries = {};\n  forEach(providers, function (provider) {\n    // handle legacy method\n    if (!provider.getPopupMenuEntries) {\n      forEach(provider.getEntries(element), function (entry) {\n        var id = entry.id;\n        if (!id) {\n          throw new Error('every entry must have the id property set');\n        }\n        entries[id] = omit(entry, ['id']);\n      });\n      return;\n    }\n    var entriesOrUpdater = provider.getPopupMenuEntries(element);\n    if (isFunction(entriesOrUpdater)) {\n      entries = entriesOrUpdater(entries);\n    } else {\n      forEach(entriesOrUpdater, function (entry, id) {\n        entries[id] = entry;\n      });\n    }\n  });\n  return entries;\n};\nPopupMenu.prototype._getHeaderEntries = function (element, providers) {\n  var entries = {};\n  forEach(providers, function (provider) {\n    // handle legacy method\n    if (!provider.getPopupMenuHeaderEntries) {\n      if (!provider.getHeaderEntries) {\n        return;\n      }\n      forEach(provider.getHeaderEntries(element), function (entry) {\n        var id = entry.id;\n        if (!id) {\n          throw new Error('every entry must have the id property set');\n        }\n        entries[id] = omit(entry, ['id']);\n      });\n      return;\n    }\n    var entriesOrUpdater = provider.getPopupMenuHeaderEntries(element);\n    if (isFunction(entriesOrUpdater)) {\n      entries = entriesOrUpdater(entries);\n    } else {\n      forEach(entriesOrUpdater, function (entry, id) {\n        entries[id] = entry;\n      });\n    }\n  });\n  return entries;\n};\n\n/**\n * Gets an entry instance (either entry or headerEntry) by id.\n *\n * @param  {string} entryId\n *\n * @return {Object} entry instance\n */\nPopupMenu.prototype._getEntry = function (entryId) {\n  var entry = this._current.entries[entryId];\n  if (!entry) {\n    throw new Error('entry not found');\n  }\n  return entry;\n};\nPopupMenu.prototype._emit = function (eventName) {\n  this._eventBus.fire('popupMenu.' + eventName);\n};\n\n/**\n * Creates the popup menu container.\n *\n * @return {Object} a DOM container\n */\nPopupMenu.prototype._createContainer = function () {\n  var container = domify('<div class=\"djs-popup\">'),\n    position = this._current.position,\n    className = this._current.className;\n  assign(container.style, {\n    position: 'absolute',\n    left: position.x + 'px',\n    top: position.y + 'px',\n    visibility: 'hidden'\n  });\n  domClasses(container).add(className);\n  return container;\n};\n\n/**\n * Attaches the container to the DOM.\n *\n * @param {Object} container\n * @param {Object} parent\n */\nPopupMenu.prototype._attachContainer = function (container, parent, cursor) {\n  var self = this;\n\n  // Event handler\n  domDelegate.bind(container, '.entry', 'click', function (event) {\n    self.trigger(event);\n  });\n  this._updateScale(container);\n\n  // Attach to DOM\n  parent.appendChild(container);\n  if (cursor) {\n    this._assureIsInbounds(container, cursor);\n  }\n};\n\n/**\n * Updates popup style.transform with respect to the config and zoom level.\n *\n * @method _updateScale\n *\n * @param {Object} container\n */\nPopupMenu.prototype._updateScale = function (container) {\n  var zoom = this._canvas.zoom();\n  var scaleConfig = this._config.scale,\n    minScale,\n    maxScale,\n    scale = zoom;\n  if (scaleConfig !== true) {\n    if (scaleConfig === false) {\n      minScale = 1;\n      maxScale = 1;\n    } else {\n      minScale = scaleConfig.min;\n      maxScale = scaleConfig.max;\n    }\n    if (isDefined(minScale) && zoom < minScale) {\n      scale = minScale;\n    }\n    if (isDefined(maxScale) && zoom > maxScale) {\n      scale = maxScale;\n    }\n  }\n  setTransform(container, 'scale(' + scale + ')');\n};\n\n/**\n * Make sure that the menu is always fully shown\n *\n * @method function\n *\n * @param  {Object} container\n * @param  {Position} cursor {x, y}\n */\nPopupMenu.prototype._assureIsInbounds = function (container, cursor) {\n  var canvas = this._canvas,\n    clientRect = canvas._container.getBoundingClientRect();\n  var containerX = container.offsetLeft,\n    containerY = container.offsetTop,\n    containerWidth = container.scrollWidth,\n    containerHeight = container.scrollHeight,\n    overAxis = {},\n    left,\n    top;\n  var cursorPosition = {\n    x: cursor.x - clientRect.left,\n    y: cursor.y - clientRect.top\n  };\n  if (containerX + containerWidth > clientRect.width) {\n    overAxis.x = true;\n  }\n  if (containerY + containerHeight > clientRect.height) {\n    overAxis.y = true;\n  }\n  if (overAxis.x && overAxis.y) {\n    left = cursorPosition.x - containerWidth + 'px';\n    top = cursorPosition.y - containerHeight + 'px';\n  } else if (overAxis.x) {\n    left = cursorPosition.x - containerWidth + 'px';\n    top = cursorPosition.y + 'px';\n  } else if (overAxis.y && cursorPosition.y < containerHeight) {\n    left = cursorPosition.x + 'px';\n    top = 10 + 'px';\n  } else if (overAxis.y) {\n    left = cursorPosition.x + 'px';\n    top = cursorPosition.y - containerHeight + 'px';\n  }\n  assign(container.style, {\n    left: left,\n    top: top\n  }, {\n    visibility: 'visible',\n    'z-index': 1000\n  });\n};\n\n/**\n * Creates a list of entries and returns them as a DOM container.\n *\n * @param {Array<Object>} entries an array of entry objects\n * @param {string} className the class name of the entry container\n *\n * @return {Object} a DOM container\n */\nPopupMenu.prototype._createEntries = function (entries, className) {\n  var entriesContainer = domify('<div>'),\n    self = this;\n  domClasses(entriesContainer).add(className);\n  forEach(entries, function (entry, id) {\n    var entryContainer = self._createEntry(entry, id);\n    entriesContainer.appendChild(entryContainer);\n  });\n  return entriesContainer;\n};\n\n/**\n * Creates a single entry and returns it as a DOM container.\n *\n * @param  {Object} entry\n *\n * @return {Object} a DOM container\n */\nPopupMenu.prototype._createEntry = function (entry, id) {\n  var entryContainer = domify('<div>'),\n    entryClasses = domClasses(entryContainer);\n  entryClasses.add('entry');\n  if (entry.className) {\n    entry.className.split(' ').forEach(function (className) {\n      entryClasses.add(className);\n    });\n  }\n  domAttr(entryContainer, DATA_REF, id);\n  if (entry.label) {\n    var label = domify('<span>');\n    label.textContent = entry.label;\n    entryContainer.appendChild(label);\n  }\n  if (entry.imageUrl) {\n    entryContainer.appendChild(domify('<img src=\"' + entry.imageUrl + '\" />'));\n  }\n  if (entry.active === true) {\n    entryClasses.add('active');\n  }\n  if (entry.disabled === true) {\n    entryClasses.add('disabled');\n  }\n  if (entry.title) {\n    entryContainer.title = entry.title;\n  }\n  return entryContainer;\n};\n\n/**\n * Set up listener to close popup automatically on certain events.\n */\nPopupMenu.prototype._bindAutoClose = function () {\n  this._eventBus.once(CLOSE_EVENTS, this.close, this);\n};\n\n/**\n * Remove the auto-closing listener.\n */\nPopupMenu.prototype._unbindAutoClose = function () {\n  this._eventBus.off(CLOSE_EVENTS, this.close, this);\n};\n\n// helpers /////////////////////////////\n\nfunction setTransform(element, transform) {\n  element.style['transform-origin'] = 'top left';\n  ['', '-ms-', '-webkit-'].forEach(function (prefix) {\n    element.style[prefix + 'transform'] = transform;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}