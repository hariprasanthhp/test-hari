{"ast":null,"code":"'use strict';\n\nvar getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;\n\n// input entities\nvar textInputField = require('./TextInputEntryFactory'),\n  checkboxField = require('./CheckboxEntryFactory'),\n  selectBoxField = require('./SelectEntryFactory'),\n  comboBoxField = require('./ComboEntryFactory'),\n  textBoxField = require('./TextBoxEntryFactory'),\n  validationAwareTextInputField = require('./ValidationAwareTextInput'),\n  tableField = require('./TableEntryFactory'),\n  labelEntry = require('./LabelFactory'),\n  link = require('./LinkEntryFactory'),\n  autoSuggestTextBoxField = require('./AutoSuggestTextBoxFactory'),\n  collapsible = require('./CollapsibleEntryFactory'),\n  toggleSwitch = require('./ToggleSwitchEntryFactory');\nvar cmdHelper = require('../helper/CmdHelper');\n\n// helpers ////////////////////////////////////////\n\nfunction ensureNotNull(prop) {\n  if (!prop) {\n    throw new Error(prop + ' must be set.');\n  }\n  return prop;\n}\n\n/**\n * sets the default parameters which are needed to create an entry\n *\n * @param options\n * @returns {{id: *, description: (*|string), get: (*|Function), set: (*|Function),\n *            validate: (*|Function), html: string}}\n */\nvar setDefaultParameters = function (options) {\n  // default method to fetch the current value of the input field\n  var defaultGet = function (element) {\n    var bo = getBusinessObject(element),\n      res = {},\n      prop = ensureNotNull(options.modelProperty);\n    res[prop] = bo.get(prop);\n    return res;\n  };\n\n  // default method to set a new value to the input field\n  var defaultSet = function (element, values) {\n    var res = {},\n      prop = ensureNotNull(options.modelProperty);\n    if (values[prop] !== '') {\n      res[prop] = values[prop];\n    } else {\n      res[prop] = undefined;\n    }\n    return cmdHelper.updateProperties(element, res);\n  };\n\n  // default validation method\n  var defaultValidate = function () {\n    return {};\n  };\n  return {\n    id: options.id,\n    description: options.description || '',\n    get: options.get || defaultGet,\n    set: options.set || defaultSet,\n    validate: options.validate || defaultValidate,\n    html: ''\n  };\n};\nfunction EntryFactory() {}\n\n/**\n * Generates an text input entry object for a property panel.\n * options are:\n * - id: id of the entry - String\n *\n * - description: description of the property - String\n *\n * - label: label for the input field - String\n *\n * - set: setter method - Function\n *\n * - get: getter method - Function\n *\n * - validate: validation mehtod - Function\n *\n * - modelProperty: name of the model property - String\n *\n * - buttonAction: Object which contains the following properties: - Object\n * ---- name: name of the [data-action] callback - String\n * ---- method: callback function for [data-action] - Function\n *\n * - buttonShow: Object which contains the following properties: - Object\n * ---- name: name of the [data-show] callback - String\n * ---- method: callback function for [data-show] - Function\n *\n * @param options\n * @returns the propertyPanel entry resource object\n */\nEntryFactory.textField = function (translate, options) {\n  return textInputField(translate, options, setDefaultParameters(options));\n};\nEntryFactory.validationAwareTextField = function (translate, options) {\n  return validationAwareTextInputField(translate, options, setDefaultParameters(options));\n};\n\n/**\n * Generates a checkbox input entry object for a property panel.\n * options are:\n * - id: id of the entry - String\n *\n * - description: description of the property - String\n *\n * - label: label for the input field - String\n *\n * - set: setter method - Function\n *\n * - get: getter method - Function\n *\n * - validate: validation method - Function\n *\n * - modelProperty: name of the model property - String\n *\n * @param options\n * @returns the propertyPanel entry resource object\n */\nEntryFactory.checkbox = function (translate, options) {\n  return checkboxField(translate, options, setDefaultParameters(options));\n};\nEntryFactory.textBox = function (translate, options) {\n  return textBoxField(translate, options, setDefaultParameters(options));\n};\nEntryFactory.selectBox = function (translate, options) {\n  return selectBoxField(translate, options, setDefaultParameters(options));\n};\nEntryFactory.comboBox = function (translate, options) {\n  return comboBoxField(translate, options);\n};\nEntryFactory.table = function (translate, options) {\n  return tableField(translate, options);\n};\nEntryFactory.label = function (options) {\n  return labelEntry(options);\n};\nEntryFactory.link = function (translate, options) {\n  return link(translate, options);\n};\nEntryFactory.autoSuggest = function (translate, options) {\n  return autoSuggestTextBoxField(translate, options, setDefaultParameters(options));\n};\nEntryFactory.collapsible = function (options) {\n  return collapsible(options);\n};\nEntryFactory.toggleSwitch = function (translate, options) {\n  return toggleSwitch(translate, options, setDefaultParameters(options));\n};\nmodule.exports = EntryFactory;","map":null,"metadata":{},"sourceType":"script"}