{"ast":null,"code":"import SnapContext from './SnapContext';\nimport { getChildren, isSnapped, mid } from './SnapUtil';\nimport { isCmd } from '../keyboard/KeyboardUtil';\nimport { forEach, isNumber } from 'min-dash';\nvar HIGHER_PRIORITY = 1250;\n\n/**\r\n * Snap during create and move.\r\n *\r\n * @param {EventBus} elementRegistry\r\n * @param {EventBus} eventBus\r\n * @param {Snapping} snapping\r\n */\nexport default function CreateMoveSnapping(elementRegistry, eventBus, snapping) {\n  var self = this;\n  this._elementRegistry = elementRegistry;\n  eventBus.on(['create.start', 'shape.move.start'], function (event) {\n    self.initSnap(event);\n  });\n  eventBus.on(['create.move', 'create.end', 'shape.move.move', 'shape.move.end'], HIGHER_PRIORITY, function (event) {\n    var context = event.context,\n      shape = context.shape,\n      snapContext = context.snapContext,\n      target = context.target;\n    if (event.originalEvent && isCmd(event.originalEvent)) {\n      return;\n    }\n    if (isSnapped(event) || !target) {\n      return;\n    }\n    var snapPoints = snapContext.pointsForTarget(target);\n    if (!snapPoints.initialized) {\n      snapPoints = self.addSnapTargetPoints(snapPoints, shape, target);\n      snapPoints.initialized = true;\n    }\n    snapping.snap(event, snapPoints);\n  });\n  eventBus.on(['create.cleanup', 'shape.move.cleanup'], function () {\n    snapping.hide();\n  });\n}\nCreateMoveSnapping.$inject = ['elementRegistry', 'eventBus', 'snapping'];\nCreateMoveSnapping.prototype.initSnap = function (event) {\n  var elementRegistry = this._elementRegistry;\n  var context = event.context,\n    shape = context.shape,\n    snapContext = context.snapContext;\n  if (!snapContext) {\n    snapContext = context.snapContext = new SnapContext();\n  }\n  var shapeMid;\n  if (elementRegistry.get(shape.id)) {\n    // move\n    shapeMid = mid(shape, event);\n  } else {\n    // create\n    shapeMid = {\n      x: event.x + mid(shape).x,\n      y: event.y + mid(shape).y\n    };\n  }\n  var shapeTopLeft = {\n      x: shapeMid.x - shape.width / 2,\n      y: shapeMid.y - shape.height / 2\n    },\n    shapeBottomRight = {\n      x: shapeMid.x + shape.width / 2,\n      y: shapeMid.y + shape.height / 2\n    };\n  snapContext.setSnapOrigin('mid', {\n    x: shapeMid.x - event.x,\n    y: shapeMid.y - event.y\n  });\n\n  // snap labels to mid only\n  if (isLabel(shape)) {\n    return snapContext;\n  }\n  snapContext.setSnapOrigin('top-left', {\n    x: shapeTopLeft.x - event.x,\n    y: shapeTopLeft.y - event.y\n  });\n  snapContext.setSnapOrigin('bottom-right', {\n    x: shapeBottomRight.x - event.x,\n    y: shapeBottomRight.y - event.y\n  });\n  return snapContext;\n};\nCreateMoveSnapping.prototype.addSnapTargetPoints = function (snapPoints, shape, target) {\n  var snapTargets = this.getSnapTargets(shape, target);\n  forEach(snapTargets, function (snapTarget) {\n    // handle labels\n    if (isLabel(snapTarget)) {\n      if (isLabel(shape)) {\n        snapPoints.add('mid', mid(snapTarget));\n      }\n      return;\n    }\n\n    // handle connections\n    if (isConnection(snapTarget)) {\n      // ignore single segment connections\n      if (snapTarget.waypoints.length < 3) {\n        return;\n      }\n\n      // ignore first and last waypoint\n      var waypoints = snapTarget.waypoints.slice(1, -1);\n      forEach(waypoints, function (waypoint) {\n        snapPoints.add('mid', waypoint);\n      });\n      return;\n    }\n\n    // handle shapes\n    snapPoints.add('mid', mid(snapTarget));\n  });\n  if (!isNumber(shape.x) || !isNumber(shape.y)) {\n    return snapPoints;\n  }\n\n  // snap to original position when moving\n  if (this._elementRegistry.get(shape.id)) {\n    snapPoints.add('mid', mid(shape));\n  }\n  return snapPoints;\n};\nCreateMoveSnapping.prototype.getSnapTargets = function (shape, target) {\n  return getChildren(target).filter(function (child) {\n    return !isHidden(child);\n  });\n};\n\n// helpers //////////\n\nfunction isConnection(element) {\n  return !!element.waypoints;\n}\nfunction isHidden(element) {\n  return !!element.hidden;\n}\nfunction isLabel(element) {\n  return !!element.labelTarget;\n}","map":null,"metadata":{},"sourceType":"module"}