{"ast":null,"code":"import entryFactory from 'bpmn-js-properties-panel/lib/factory/EntryFactory';\nimport cmdHelper from 'bpmn-js-properties-panel/lib/helper/CmdHelper';\nimport elementHelper from 'bpmn-js-properties-panel/lib/helper/ElementHelper';\nimport extensionElementsHelper from 'bpmn-js-properties-panel/lib/helper/ExtensionElementsHelper';\nimport { getBusinessObject } from 'bpmn-js/lib/util/ModelUtil';\n\n/**\n * Create an entry to modify a property of an element which\n * is referenced by a event definition.\n *\n * @param  {djs.model.Base} element\n * @param  {ModdleElement} definition\n * @param  {BpmnFactory} bpmnFactory\n * @param  {Function} translate\n * @param  {Object} options\n * @param  {string} options.id the id of the entry\n * @param  {string} options.label the label of the entry\n * @param  {string} options.referenceProperty the name of referencing property\n * @param  {string} options.modelProperty the name of property to modify\n * @param  {string} options.extensionElement the name of the extensionElement to modify\n * @param  {string} options.shouldValidate a flag indicate whether to validate or not\n *\n * @return {Array<Object>} return an array containing the entries\n */\nexport default function (element, definition, bpmnFactory, translate, options) {\n  const id = options.id || 'element-property';\n  const label = options.label;\n  const referenceProperty = options.referenceProperty;\n  const modelProperty = options.modelProperty || 'name';\n  const extensionElementKey = options.extensionElement || 'zeebe:Subscription';\n  const shouldValidate = options.shouldValidate || false;\n  function getElements(bo, type, prop) {\n    const elems = extensionElementsHelper.getExtensionElements(bo, type) || [];\n    return !prop ? elems : (elems[0] || {})[prop] || [];\n  }\n  function getExtensionElement(element) {\n    const bo = getBusinessObject(element);\n    return (getElements(bo, extensionElementKey) || [])[0];\n  }\n  const entry = entryFactory.textField(translate, {\n    id: id,\n    label: label,\n    modelProperty: modelProperty,\n    get: function (element, node) {\n      const reference = definition.get(referenceProperty);\n      const props = {};\n      props[modelProperty] = reference && (getExtensionElement(reference) || {})[modelProperty];\n      return props;\n    },\n    set: function (element, values, node) {\n      const reference = definition.get(referenceProperty);\n      const bo = getBusinessObject(reference);\n      reference.businessObject = bo;\n      const commands = [];\n      let extensionElements = bo.get('extensionElements');\n      if (!extensionElements) {\n        extensionElements = elementHelper.createElement('bpmn:ExtensionElements', {\n          values: []\n        }, bo, bpmnFactory);\n        commands.push(cmdHelper.updateProperties(reference, {\n          extensionElements: extensionElements\n        }));\n      }\n      let extensionElement = getExtensionElement(reference);\n      if (!extensionElement) {\n        extensionElement = elementHelper.createElement(extensionElementKey, {}, extensionElements, bpmnFactory);\n        commands.push(cmdHelper.addAndRemoveElementsFromList(element, extensionElements, 'values', 'extensionElements', [extensionElement], []));\n      }\n      commands.push(cmdHelper.updateBusinessObject(element, extensionElement, values));\n      return commands;\n    },\n    hidden: function (element, node) {\n      return !definition.get(referenceProperty);\n    }\n  });\n  if (shouldValidate) {\n    entry.validate = (element, values, node) => {\n      const reference = definition.get(referenceProperty);\n      if (reference && !values[modelProperty]) {\n        const validationErrors = {};\n        validationErrors[modelProperty] = 'Must provide a value';\n        return validationErrors;\n      }\n    };\n  }\n  return [entry];\n}","map":null,"metadata":{},"sourceType":"module"}