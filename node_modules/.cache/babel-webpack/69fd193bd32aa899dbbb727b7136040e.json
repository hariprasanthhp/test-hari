{"ast":null,"code":"import elementHelper from 'bpmn-js-properties-panel/lib/helper/ElementHelper';\nimport cmdHelper from 'bpmn-js-properties-panel/lib/helper/CmdHelper';\nimport entryFactory from 'bpmn-js-properties-panel/lib/factory/EntryFactory';\nexport default function (group, bpmnFactory, timerEventDefinition, timerOptions, translate) {\n  const selectOptions = timerOptions;\n  group.entries.push(entryFactory.selectBox(translate, {\n    id: 'timer-event-definition-type',\n    label: translate('Timer Definition Type'),\n    selectOptions: selectOptions,\n    emptyParameter: true,\n    modelProperty: 'timerDefinitionType',\n    get: function (element, node) {\n      return {\n        timerDefinitionType: getTimerDefinitionType(timerEventDefinition) || ''\n      };\n    },\n    set: function (element, values) {\n      const props = {\n        timeDuration: undefined,\n        timeDate: undefined,\n        timeCycle: undefined\n      };\n      const newType = values.timerDefinitionType;\n      if (values.timerDefinitionType) {\n        const oldType = getTimerDefinitionType(timerEventDefinition);\n        let value;\n        if (oldType) {\n          const definition = timerEventDefinition.get(oldType);\n          value = definition.get('body');\n        }\n        props[newType] = createFormalExpression(timerEventDefinition, value, bpmnFactory);\n      }\n      return cmdHelper.updateBusinessObject(element, timerEventDefinition, props);\n    }\n  }));\n  group.entries.push(entryFactory.textField(translate, {\n    id: 'timer-event-definition',\n    label: translate('Timer Definition'),\n    modelProperty: 'timerDefinition',\n    get: function (element, node) {\n      const type = getTimerDefinitionType(timerEventDefinition);\n      const definition = type && timerEventDefinition.get(type);\n      const value = definition && definition.get('body');\n      return {\n        timerDefinition: value\n      };\n    },\n    set: function (element, values) {\n      const type = getTimerDefinitionType(timerEventDefinition);\n      const definition = type && timerEventDefinition.get(type);\n      if (definition) {\n        return cmdHelper.updateBusinessObject(element, definition, {\n          body: values.timerDefinition || undefined\n        });\n      }\n    },\n    validate: function (element) {\n      const type = getTimerDefinitionType(timerEventDefinition);\n      const definition = type && timerEventDefinition.get(type);\n      if (definition) {\n        const value = definition.get('body');\n        if (!value) {\n          return {\n            timerDefinition: translate('Must provide a value')\n          };\n        }\n      }\n    },\n    hidden: function (element) {\n      return !getTimerDefinitionType(timerEventDefinition);\n    }\n  }));\n}\n\n// helper //////////\n\n/**\r\n * Get the timer definition type for a given timer event definition.\r\n *\r\n * @param {ModdleElement<bpmn:TimerEventDefinition>} timer\r\n *\r\n * @return {string|undefined} the timer definition type\r\n */\nconst getTimerDefinitionType = timer => {\n  const timeDate = timer.get('timeDate');\n  if (typeof timeDate !== 'undefined') {\n    return 'timeDate';\n  }\n  const timeCycle = timer.get('timeCycle');\n  if (typeof timeCycle !== 'undefined') {\n    return 'timeCycle';\n  }\n  const timeDuration = timer.get('timeDuration');\n  if (typeof timeDuration !== 'undefined') {\n    return 'timeDuration';\n  }\n};\n\n/**\r\n * Creates 'bpmn:FormalExpression' element.\r\n *\r\n * @param {ModdleElement} parent\r\n * @param {string} body\r\n * @param {BpmnFactory} bpmnFactory\r\n *\r\n * @return {ModdleElement<bpmn:FormalExpression>} a formal expression\r\n */\nconst createFormalExpression = (parent, body, bpmnFactory) => {\n  body = body || undefined;\n  return elementHelper.createElement('bpmn:FormalExpression', {\n    body: body\n  }, parent, bpmnFactory);\n};","map":null,"metadata":{},"sourceType":"module"}