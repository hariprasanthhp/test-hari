{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/sso-auth.service\";\nexport let RegionApiService = /*#__PURE__*/(() => {\n  class RegionApiService {\n    constructor(httpClient, sso) {\n      this.httpClient = httpClient;\n      this.sso = sso;\n      this.baseURL = environment.API_BASE;\n      this.OrgBaseURL = environment.CALIX_ADMIN_ORG_BASE_URL;\n      this.org_id = environment.faAdminOrgId;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          // 'X-Calix-ClientID': environment.X_CALIX_CLIENTID,\n          // 'X-Calix-AccessToken':   this.sso.getAccessToken()\n        })\n      };\n    }\n    regionList(url) {\n      return this.httpClient.get(`${this.baseURL}/v1/${url}`, this.httpOptions);\n    }\n    regionAdd(params) {\n      return this.httpClient.post(`${this.baseURL}/v1/cnap/invmgr/regions/`, params, this.httpOptions);\n    }\n    regionUpdate(params, uuid) {\n      const headers = new HttpHeaders().set('Content-Type', 'text/plain');\n      return this.httpClient.put(`${this.baseURL}/v1/cnap/invmgr/regions/${uuid}`, params, {\n        headers,\n        responseType: 'text'\n      });\n    }\n    regionDelete(uuid) {\n      return this.httpClient.delete(`${this.baseURL}/v1/cnap/invmgr/regions/${uuid}`, this.httpOptions);\n    }\n    locationAdd(params, uuid) {\n      return this.httpClient.post(`${this.baseURL}/v1/cnap/invmgr/regions/${uuid}/networkGroup`, params, {\n        headers: new HttpHeaders({\n          'Content-Type': 'text/plain'\n        })\n      });\n    }\n    locationUpdate(params, uuid, ngid) {\n      const headers = new HttpHeaders().set('Content-Type', 'text/plain');\n      return this.httpClient.put(`${this.baseURL}/v1/cnap/invmgr/regions/${uuid}/networkGroup/${ngid}`, params, {\n        headers,\n        responseType: 'text'\n      });\n    }\n    locationDelete(uuid, ngid) {\n      return this.httpClient.delete(`${this.baseURL}/v1/cnap/invmgr/regions/${uuid}/networkGroup/${ngid}`, this.httpOptions);\n    }\n    regionListCount() {\n      return this.httpClient.get(`${this.baseURL}/v1/nfa/regions/details/count`, this.httpOptions);\n    }\n  }\n  RegionApiService.ɵfac = function RegionApiService_Factory(t) {\n    return new (t || RegionApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SsoAuthService));\n  };\n  RegionApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RegionApiService,\n    factory: RegionApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return RegionApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}